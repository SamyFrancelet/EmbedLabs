
ButtonManager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc48  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002690  0800ce18  0800ce18  0001ce18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000b5e  0800f4a8  0800f4a8  0001f4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000020  08010008  08010008  00020008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  08010028  08010028  00020028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   0000001c  08010030  08010030  00020030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  0801004c  0801004c  0002004c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0801005c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001530  200000a8  08010104  000300a8  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  200015d8  08010104  000315d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000a5dbd  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000162cc  00000000  00000000  000d5e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000203f0  00000000  00000000  000ec161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021f0  00000000  00000000  0010c558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000029c0  00000000  00000000  0010e748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00038abc  00000000  00000000  00111108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000508bc  00000000  00000000  00149bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012b062  00000000  00000000  0019a480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000d2  00000000  00000000  002c54e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007948  00000000  00000000  002c55b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  002ccefc  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  002ccfc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ce00 	.word	0x0800ce00

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ac 	.word	0x200000ac
 800020c:	0800ce00 	.word	0x0800ce00

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <HAL_GPIO_EXTI_Callback>:
 * Is called automatically by the STM32 HAL when configuring a GPIO as 
 * EXTI (external interrupt) and an interrupt arrives.
 */
extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    switch (GPIO_Pin)
 80005b8:	2840      	cmp	r0, #64	; 0x40
 80005ba:	d004      	beq.n	80005c6 <HAL_GPIO_EXTI_Callback+0xe>
 80005bc:	d80a      	bhi.n	80005d4 <HAL_GPIO_EXTI_Callback+0x1c>
 80005be:	2804      	cmp	r0, #4
 80005c0:	d001      	beq.n	80005c6 <HAL_GPIO_EXTI_Callback+0xe>
 80005c2:	2808      	cmp	r0, #8
 80005c4:	d108      	bne.n	80005d8 <HAL_GPIO_EXTI_Callback+0x20>
{
 80005c6:	b508      	push	{r3, lr}
#ifdef BUTTON3_Pin
    case BUTTON3_Pin:
#endif
		// Notify ButtonsController about interrupt
		// TODO: Uncomment code below
        ButtonsController::getInstance()->onIrq();
 80005c8:	f004 ff26 	bl	8005418 <_ZN17ButtonsController11getInstanceEv>
 80005cc:	6803      	ldr	r3, [r0, #0]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	4798      	blx	r3
        break;
    default:
        break;
    }
}
 80005d2:	bd08      	pop	{r3, pc}
    switch (GPIO_Pin)
 80005d4:	2880      	cmp	r0, #128	; 0x80
 80005d6:	d0f6      	beq.n	80005c6 <HAL_GPIO_EXTI_Callback+0xe>
 80005d8:	4770      	bx	lr
	...

080005dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005e0:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	2400      	movs	r4, #0
 80005e4:	940b      	str	r4, [sp, #44]	; 0x2c
 80005e6:	940c      	str	r4, [sp, #48]	; 0x30
 80005e8:	940d      	str	r4, [sp, #52]	; 0x34
 80005ea:	940e      	str	r4, [sp, #56]	; 0x38
 80005ec:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ee:	4bab      	ldr	r3, [pc, #684]	; (800089c <MX_GPIO_Init+0x2c0>)
 80005f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f2:	f042 0210 	orr.w	r2, r2, #16
 80005f6:	631a      	str	r2, [r3, #48]	; 0x30
 80005f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fa:	f002 0210 	and.w	r2, r2, #16
 80005fe:	9200      	str	r2, [sp, #0]
 8000600:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000604:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000608:	631a      	str	r2, [r3, #48]	; 0x30
 800060a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800060c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000610:	9201      	str	r2, [sp, #4]
 8000612:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000616:	f042 0202 	orr.w	r2, r2, #2
 800061a:	631a      	str	r2, [r3, #48]	; 0x30
 800061c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800061e:	f002 0202 	and.w	r2, r2, #2
 8000622:	9202      	str	r2, [sp, #8]
 8000624:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000628:	f042 0208 	orr.w	r2, r2, #8
 800062c:	631a      	str	r2, [r3, #48]	; 0x30
 800062e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000630:	f002 0208 	and.w	r2, r2, #8
 8000634:	9203      	str	r2, [sp, #12]
 8000636:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800063a:	f042 0204 	orr.w	r2, r2, #4
 800063e:	631a      	str	r2, [r3, #48]	; 0x30
 8000640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000642:	f002 0204 	and.w	r2, r2, #4
 8000646:	9204      	str	r2, [sp, #16]
 8000648:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800064c:	f042 0201 	orr.w	r2, r2, #1
 8000650:	631a      	str	r2, [r3, #48]	; 0x30
 8000652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000654:	f002 0201 	and.w	r2, r2, #1
 8000658:	9205      	str	r2, [sp, #20]
 800065a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800065c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800065e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000662:	631a      	str	r2, [r3, #48]	; 0x30
 8000664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000666:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800066a:	9206      	str	r2, [sp, #24]
 800066c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800066e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
 8000676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000678:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800067c:	9207      	str	r2, [sp, #28]
 800067e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000682:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000686:	631a      	str	r2, [r3, #48]	; 0x30
 8000688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800068a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800068e:	9208      	str	r2, [sp, #32]
 8000690:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000694:	f042 0220 	orr.w	r2, r2, #32
 8000698:	631a      	str	r2, [r3, #48]	; 0x30
 800069a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800069c:	f002 0220 	and.w	r2, r2, #32
 80006a0:	9209      	str	r2, [sp, #36]	; 0x24
 80006a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006aa:	631a      	str	r2, [r3, #48]	; 0x30
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b2:	930a      	str	r3, [sp, #40]	; 0x28
 80006b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80006b6:	4622      	mov	r2, r4
 80006b8:	2110      	movs	r1, #16
 80006ba:	4879      	ldr	r0, [pc, #484]	; (80008a0 <MX_GPIO_Init+0x2c4>)
 80006bc:	f000 ffeb 	bl	8001696 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|LED2_Pin, GPIO_PIN_RESET);
 80006c0:	4622      	mov	r2, r4
 80006c2:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80006c6:	4877      	ldr	r0, [pc, #476]	; (80008a4 <MX_GPIO_Init+0x2c8>)
 80006c8:	f000 ffe5 	bl	8001696 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006cc:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 80008c4 <MX_GPIO_Init+0x2e8>
 80006d0:	2201      	movs	r2, #1
 80006d2:	2120      	movs	r1, #32
 80006d4:	4650      	mov	r0, sl
 80006d6:	f000 ffde 	bl	8001696 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2108      	movs	r1, #8
 80006de:	4872      	ldr	r0, [pc, #456]	; (80008a8 <MX_GPIO_Init+0x2cc>)
 80006e0:	f000 ffd9 	bl	8001696 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ea:	4870      	ldr	r0, [pc, #448]	; (80008ac <MX_GPIO_Init+0x2d0>)
 80006ec:	f000 ffd3 	bl	8001696 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|LED1_Pin, GPIO_PIN_RESET);
 80006f0:	4622      	mov	r2, r4
 80006f2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 80006f6:	486e      	ldr	r0, [pc, #440]	; (80008b0 <MX_GPIO_Init+0x2d4>)
 80006f8:	f000 ffcd 	bl	8001696 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 80006fc:	4622      	mov	r2, r4
 80006fe:	2108      	movs	r1, #8
 8000700:	486c      	ldr	r0, [pc, #432]	; (80008b4 <MX_GPIO_Init+0x2d8>)
 8000702:	f000 ffc8 	bl	8001696 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000706:	f04f 0808 	mov.w	r8, #8
 800070a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000712:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 80008c8 <MX_GPIO_Init+0x2ec>
 8000716:	a90b      	add	r1, sp, #44	; 0x2c
 8000718:	4658      	mov	r0, fp
 800071a:	f000 fe1f 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800071e:	2304      	movs	r3, #4
 8000720:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	2502      	movs	r5, #2
 8000724:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000728:	2603      	movs	r6, #3
 800072a:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800072c:	2309      	movs	r3, #9
 800072e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000730:	a90b      	add	r1, sp, #44	; 0x2c
 8000732:	4658      	mov	r0, fp
 8000734:	f000 fe12 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000738:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800073c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000742:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000744:	230b      	movs	r3, #11
 8000746:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000748:	a90b      	add	r1, sp, #44	; 0x2c
 800074a:	485a      	ldr	r0, [pc, #360]	; (80008b4 <MX_GPIO_Init+0x2d8>)
 800074c:	f000 fe06 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000750:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000754:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000756:	2312      	movs	r3, #18
 8000758:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800075e:	2304      	movs	r3, #4
 8000760:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	a90b      	add	r1, sp, #44	; 0x2c
 8000764:	484e      	ldr	r0, [pc, #312]	; (80008a0 <MX_GPIO_Init+0x2c4>)
 8000766:	f000 fdf9 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800076a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800076e:	930b      	str	r3, [sp, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000770:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000774:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000776:	f04f 090a 	mov.w	r9, #10
 800077a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077e:	a90b      	add	r1, sp, #44	; 0x2c
 8000780:	4847      	ldr	r0, [pc, #284]	; (80008a0 <MX_GPIO_Init+0x2c4>)
 8000782:	f000 fdeb 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8000786:	2310      	movs	r3, #16
 8000788:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2701      	movs	r7, #1
 800078c:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000792:	a90b      	add	r1, sp, #44	; 0x2c
 8000794:	4842      	ldr	r0, [pc, #264]	; (80008a0 <MX_GPIO_Init+0x2c4>)
 8000796:	f000 fde1 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80007a4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80007a8:	a90b      	add	r1, sp, #44	; 0x2c
 80007aa:	4650      	mov	r0, sl
 80007ac:	f000 fdd6 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80007b0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80007b4:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ba:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80007bc:	230c      	movs	r3, #12
 80007be:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c0:	a90b      	add	r1, sp, #44	; 0x2c
 80007c2:	483d      	ldr	r0, [pc, #244]	; (80008b8 <MX_GPIO_Init+0x2dc>)
 80007c4:	f000 fdca 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED2_Pin;
 80007c8:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80007cc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d4:	a90b      	add	r1, sp, #44	; 0x2c
 80007d6:	4833      	ldr	r0, [pc, #204]	; (80008a4 <MX_GPIO_Init+0x2c8>)
 80007d8:	f000 fdc0 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80007dc:	2360      	movs	r3, #96	; 0x60
 80007de:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007e6:	230d      	movs	r3, #13
 80007e8:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ea:	a90b      	add	r1, sp, #44	; 0x2c
 80007ec:	4658      	mov	r0, fp
 80007ee:	f000 fdb5 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80007f2:	2340      	movs	r3, #64	; 0x40
 80007f4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80007fc:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000800:	a90b      	add	r1, sp, #44	; 0x2c
 8000802:	4827      	ldr	r0, [pc, #156]	; (80008a0 <MX_GPIO_Init+0x2c4>)
 8000804:	f000 fdaa 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000812:	a90b      	add	r1, sp, #44	; 0x2c
 8000814:	4829      	ldr	r0, [pc, #164]	; (80008bc <MX_GPIO_Init+0x2e0>)
 8000816:	f000 fda1 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800081a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800081e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000820:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000826:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082a:	a90b      	add	r1, sp, #44	; 0x2c
 800082c:	481d      	ldr	r0, [pc, #116]	; (80008a4 <MX_GPIO_Init+0x2c8>)
 800082e:	f000 fd95 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000832:	23f0      	movs	r3, #240	; 0xf0
 8000834:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800083c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000840:	a90b      	add	r1, sp, #44	; 0x2c
 8000842:	481a      	ldr	r0, [pc, #104]	; (80008ac <MX_GPIO_Init+0x2d0>)
 8000844:	f000 fd8a 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000854:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000858:	a90b      	add	r1, sp, #44	; 0x2c
 800085a:	4816      	ldr	r0, [pc, #88]	; (80008b4 <MX_GPIO_Init+0x2d8>)
 800085c:	f000 fd7e 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000860:	2320      	movs	r3, #32
 8000862:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800086a:	a90b      	add	r1, sp, #44	; 0x2c
 800086c:	4650      	mov	r0, sl
 800086e:	f000 fd75 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000872:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800087c:	230d      	movs	r3, #13
 800087e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000880:	a90b      	add	r1, sp, #44	; 0x2c
 8000882:	4650      	mov	r0, sl
 8000884:	f000 fd6a 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON0_Pin;
 8000888:	230c      	movs	r3, #12
 800088a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_GPIO_Init+0x2e4>)
 800088e:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000890:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000892:	a90b      	add	r1, sp, #44	; 0x2c
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_GPIO_Init+0x2d0>)
 8000896:	f000 fd61 	bl	800135c <HAL_GPIO_Init>
 800089a:	e017      	b.n	80008cc <MX_GPIO_Init+0x2f0>
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020400 	.word	0x40020400
 80008a4:	40020000 	.word	0x40020000
 80008a8:	40022800 	.word	0x40022800
 80008ac:	40022000 	.word	0x40022000
 80008b0:	40021c00 	.word	0x40021c00
 80008b4:	40021800 	.word	0x40021800
 80008b8:	40020800 	.word	0x40020800
 80008bc:	40022400 	.word	0x40022400
 80008c0:	10310000 	.word	0x10310000
 80008c4:	40020c00 	.word	0x40020c00
 80008c8:	40021000 	.word	0x40021000

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80008cc:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 80008d0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d4:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80008d8:	a90b      	add	r1, sp, #44	; 0x2c
 80008da:	4884      	ldr	r0, [pc, #528]	; (8000aec <MX_GPIO_Init+0x510>)
 80008dc:	f000 fd3e 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80008e0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80008ea:	a90b      	add	r1, sp, #44	; 0x2c
 80008ec:	4880      	ldr	r0, [pc, #512]	; (8000af0 <MX_GPIO_Init+0x514>)
 80008ee:	f000 fd35 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80008f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008f6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008fe:	220d      	movs	r2, #13
 8000900:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000902:	a90b      	add	r1, sp, #44	; 0x2c
 8000904:	487b      	ldr	r0, [pc, #492]	; (8000af4 <MX_GPIO_Init+0x518>)
 8000906:	f000 fd29 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800090a:	2210      	movs	r2, #16
 800090c:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000912:	a90b      	add	r1, sp, #44	; 0x2c
 8000914:	4650      	mov	r0, sl
 8000916:	f000 fd21 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 800091a:	2204      	movs	r2, #4
 800091c:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000924:	220c      	movs	r2, #12
 8000926:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000928:	a90b      	add	r1, sp, #44	; 0x2c
 800092a:	4650      	mov	r0, sl
 800092c:	f000 fd16 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000930:	f248 0304 	movw	r3, #32772	; 0x8004
 8000934:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000936:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800093a:	a90b      	add	r1, sp, #44	; 0x2c
 800093c:	486e      	ldr	r0, [pc, #440]	; (8000af8 <MX_GPIO_Init+0x51c>)
 800093e:	f000 fd0d 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000942:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000946:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 800094e:	a90b      	add	r1, sp, #44	; 0x2c
 8000950:	486a      	ldr	r0, [pc, #424]	; (8000afc <MX_GPIO_Init+0x520>)
 8000952:	f000 fd03 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_PWR_EN_Pin LED1_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin|LED1_Pin;
 8000956:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 800095a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000962:	a90b      	add	r1, sp, #44	; 0x2c
 8000964:	4864      	ldr	r0, [pc, #400]	; (8000af8 <MX_GPIO_Init+0x51c>)
 8000966:	f000 fcf9 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800096a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800096e:	930b      	str	r3, [sp, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000976:	220d      	movs	r2, #13
 8000978:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800097a:	a90b      	add	r1, sp, #44	; 0x2c
 800097c:	485e      	ldr	r0, [pc, #376]	; (8000af8 <MX_GPIO_Init+0x51c>)
 800097e:	f000 fced 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000982:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000986:	4b5e      	ldr	r3, [pc, #376]	; (8000b00 <MX_GPIO_Init+0x524>)
 8000988:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800098c:	a90b      	add	r1, sp, #44	; 0x2c
 800098e:	485b      	ldr	r0, [pc, #364]	; (8000afc <MX_GPIO_Init+0x520>)
 8000990:	f000 fce4 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000994:	f04f 0bc0 	mov.w	fp, #192	; 0xc0
 8000998:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a0:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80009a2:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a6:	a90b      	add	r1, sp, #44	; 0x2c
 80009a8:	4850      	ldr	r0, [pc, #320]	; (8000aec <MX_GPIO_Init+0x510>)
 80009aa:	f000 fcd7 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80009ae:	2210      	movs	r2, #16
 80009b0:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80009b8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80009bc:	a90b      	add	r1, sp, #44	; 0x2c
 80009be:	484e      	ldr	r0, [pc, #312]	; (8000af8 <MX_GPIO_Init+0x51c>)
 80009c0:	f000 fccc 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 80009c4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80009c8:	4b4e      	ldr	r3, [pc, #312]	; (8000b04 <MX_GPIO_Init+0x528>)
 80009ca:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009cc:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009ce:	a90b      	add	r1, sp, #44	; 0x2c
 80009d0:	4848      	ldr	r0, [pc, #288]	; (8000af4 <MX_GPIO_Init+0x518>)
 80009d2:	f000 fcc3 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80009d6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80009da:	930b      	str	r3, [sp, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009dc:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009e0:	a90b      	add	r1, sp, #44	; 0x2c
 80009e2:	4849      	ldr	r0, [pc, #292]	; (8000b08 <MX_GPIO_Init+0x52c>)
 80009e4:	f000 fcba 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80009e8:	2305      	movs	r3, #5
 80009ea:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80009f2:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f6:	a90b      	add	r1, sp, #44	; 0x2c
 80009f8:	483c      	ldr	r0, [pc, #240]	; (8000aec <MX_GPIO_Init+0x510>)
 80009fa:	f000 fcaf 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009fe:	2332      	movs	r3, #50	; 0x32
 8000a00:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a08:	230b      	movs	r3, #11
 8000a0a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0c:	a90b      	add	r1, sp, #44	; 0x2c
 8000a0e:	4837      	ldr	r0, [pc, #220]	; (8000aec <MX_GPIO_Init+0x510>)
 8000a10:	f000 fca4 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a14:	2304      	movs	r3, #4
 8000a16:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000a1e:	2309      	movs	r3, #9
 8000a20:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a22:	a90b      	add	r1, sp, #44	; 0x2c
 8000a24:	4839      	ldr	r0, [pc, #228]	; (8000b0c <MX_GPIO_Init+0x530>)
 8000a26:	f000 fc99 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000a2a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a2e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a34:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000a36:	2309      	movs	r3, #9
 8000a38:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3a:	a90b      	add	r1, sp, #44	; 0x2c
 8000a3c:	4650      	mov	r0, sl
 8000a3e:	f000 fc8d 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8000a42:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	a90b      	add	r1, sp, #44	; 0x2c
 8000a4e:	4829      	ldr	r0, [pc, #164]	; (8000af4 <MX_GPIO_Init+0x518>)
 8000a50:	f000 fc84 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000a54:	2304      	movs	r3, #4
 8000a56:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a58:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	a90b      	add	r1, sp, #44	; 0x2c
 8000a5e:	4825      	ldr	r0, [pc, #148]	; (8000af4 <MX_GPIO_Init+0x518>)
 8000a60:	f000 fc7c 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a64:	2386      	movs	r3, #134	; 0x86
 8000a66:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a6e:	230b      	movs	r3, #11
 8000a70:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	a90b      	add	r1, sp, #44	; 0x2c
 8000a74:	4826      	ldr	r0, [pc, #152]	; (8000b10 <MX_GPIO_Init+0x534>)
 8000a76:	f000 fc71 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000a7a:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a7c:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000a80:	a90b      	add	r1, sp, #44	; 0x2c
 8000a82:	4823      	ldr	r0, [pc, #140]	; (8000b10 <MX_GPIO_Init+0x534>)
 8000a84:	f000 fc6a 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000a88:	2350      	movs	r3, #80	; 0x50
 8000a8a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a92:	230d      	movs	r3, #13
 8000a94:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	a90b      	add	r1, sp, #44	; 0x2c
 8000a98:	481d      	ldr	r0, [pc, #116]	; (8000b10 <MX_GPIO_Init+0x534>)
 8000a9a:	f000 fc5f 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000a9e:	2328      	movs	r3, #40	; 0x28
 8000aa0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000aa8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	a90b      	add	r1, sp, #44	; 0x2c
 8000aae:	4818      	ldr	r0, [pc, #96]	; (8000b10 <MX_GPIO_Init+0x534>)
 8000ab0:	f000 fc54 	bl	800135c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000ab4:	4622      	mov	r2, r4
 8000ab6:	4621      	mov	r1, r4
 8000ab8:	4640      	mov	r0, r8
 8000aba:	f000 fb09 	bl	80010d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000abe:	4640      	mov	r0, r8
 8000ac0:	f000 fb38 	bl	8001134 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000ac4:	4622      	mov	r2, r4
 8000ac6:	4621      	mov	r1, r4
 8000ac8:	2009      	movs	r0, #9
 8000aca:	f000 fb01 	bl	80010d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000ace:	2009      	movs	r0, #9
 8000ad0:	f000 fb30 	bl	8001134 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ad4:	4622      	mov	r2, r4
 8000ad6:	4621      	mov	r1, r4
 8000ad8:	2017      	movs	r0, #23
 8000ada:	f000 faf9 	bl	80010d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ade:	2017      	movs	r0, #23
 8000ae0:	f000 fb28 	bl	8001134 <HAL_NVIC_EnableIRQ>

}
 8000ae4:	b011      	add	sp, #68	; 0x44
 8000ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aea:	bf00      	nop
 8000aec:	40020800 	.word	0x40020800
 8000af0:	40022800 	.word	0x40022800
 8000af4:	40021800 	.word	0x40021800
 8000af8:	40021c00 	.word	0x40021c00
 8000afc:	40022000 	.word	0x40022000
 8000b00:	10110000 	.word	0x10110000
 8000b04:	10310000 	.word	0x10310000
 8000b08:	40021400 	.word	0x40021400
 8000b0c:	40020400 	.word	0x40020400
 8000b10:	40020000 	.word	0x40020000

08000b14 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <Error_Handler+0x2>

08000b18 <MX_USART1_UART_Init>:
{
 8000b18:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000b1a:	480b      	ldr	r0, [pc, #44]	; (8000b48 <MX_USART1_UART_Init+0x30>)
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_USART1_UART_Init+0x34>)
 8000b1e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000b20:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000b24:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b26:	2300      	movs	r3, #0
 8000b28:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b2a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b2c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b2e:	220c      	movs	r2, #12
 8000b30:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b32:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b36:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b38:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b3a:	f002 fc74 	bl	8003426 <HAL_UART_Init>
 8000b3e:	b900      	cbnz	r0, 8000b42 <MX_USART1_UART_Init+0x2a>
}
 8000b40:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000b42:	f7ff ffe7 	bl	8000b14 <Error_Handler>
 8000b46:	bf00      	nop
 8000b48:	200014e8 	.word	0x200014e8
 8000b4c:	40011000 	.word	0x40011000

08000b50 <MX_SPI2_Init>:
{
 8000b50:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8000b52:	480f      	ldr	r0, [pc, #60]	; (8000b90 <MX_SPI2_Init+0x40>)
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_SPI2_Init+0x44>)
 8000b56:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b58:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000b5c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b62:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b66:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b68:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b6a:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b70:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b72:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b74:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b76:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b78:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b7a:	2207      	movs	r2, #7
 8000b7c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b7e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b80:	2308      	movs	r3, #8
 8000b82:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b84:	f002 f838 	bl	8002bf8 <HAL_SPI_Init>
 8000b88:	b900      	cbnz	r0, 8000b8c <MX_SPI2_Init+0x3c>
}
 8000b8a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000b8c:	f7ff ffc2 	bl	8000b14 <Error_Handler>
 8000b90:	200013f8 	.word	0x200013f8
 8000b94:	40003800 	.word	0x40003800

08000b98 <MX_I2C3_Init>:
{
 8000b98:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 8000b9a:	4811      	ldr	r0, [pc, #68]	; (8000be0 <MX_I2C3_Init+0x48>)
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_I2C3_Init+0x4c>)
 8000b9e:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x00A0A3F7;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_I2C3_Init+0x50>)
 8000ba2:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba8:	2201      	movs	r2, #1
 8000baa:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bac:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000bae:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bb0:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb2:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bb4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000bb6:	f000 feef 	bl	8001998 <HAL_I2C_Init>
 8000bba:	b950      	cbnz	r0, 8000bd2 <MX_I2C3_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4808      	ldr	r0, [pc, #32]	; (8000be0 <MX_I2C3_Init+0x48>)
 8000bc0:	f001 f912 	bl	8001de8 <HAL_I2CEx_ConfigAnalogFilter>
 8000bc4:	b938      	cbnz	r0, 8000bd6 <MX_I2C3_Init+0x3e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_I2C3_Init+0x48>)
 8000bca:	f001 f93b 	bl	8001e44 <HAL_I2CEx_ConfigDigitalFilter>
 8000bce:	b920      	cbnz	r0, 8000bda <MX_I2C3_Init+0x42>
}
 8000bd0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000bd2:	f7ff ff9f 	bl	8000b14 <Error_Handler>
    Error_Handler();
 8000bd6:	f7ff ff9d 	bl	8000b14 <Error_Handler>
    Error_Handler();
 8000bda:	f7ff ff9b 	bl	8000b14 <Error_Handler>
 8000bde:	bf00      	nop
 8000be0:	2000149c 	.word	0x2000149c
 8000be4:	40005c00 	.word	0x40005c00
 8000be8:	00a0a3f7 	.word	0x00a0a3f7

08000bec <SystemClock_Config>:
{
 8000bec:	b510      	push	{r4, lr}
 8000bee:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf0:	2230      	movs	r2, #48	; 0x30
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	a828      	add	r0, sp, #160	; 0xa0
 8000bf6:	f00a fee1 	bl	800b9bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfa:	2400      	movs	r4, #0
 8000bfc:	9423      	str	r4, [sp, #140]	; 0x8c
 8000bfe:	9424      	str	r4, [sp, #144]	; 0x90
 8000c00:	9425      	str	r4, [sp, #148]	; 0x94
 8000c02:	9426      	str	r4, [sp, #152]	; 0x98
 8000c04:	9427      	str	r4, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c06:	2284      	movs	r2, #132	; 0x84
 8000c08:	4621      	mov	r1, r4
 8000c0a:	a802      	add	r0, sp, #8
 8000c0c:	f00a fed6 	bl	800b9bc <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c10:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <SystemClock_Config+0xd0>)
 8000c12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c18:	641a      	str	r2, [r3, #64]	; 0x40
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c24:	4a26      	ldr	r2, [pc, #152]	; (8000cc0 <SystemClock_Config+0xd4>)
 8000c26:	6813      	ldr	r3, [r2, #0]
 8000c28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	6813      	ldr	r3, [r2, #0]
 8000c34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c38:	9301      	str	r3, [sp, #4]
 8000c3a:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c40:	2201      	movs	r2, #1
 8000c42:	922b      	str	r2, [sp, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c44:	2210      	movs	r2, #16
 8000c46:	922c      	str	r2, [sp, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c48:	932e      	str	r3, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c4a:	942f      	str	r4, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 10;
 8000c4c:	220a      	movs	r2, #10
 8000c4e:	9230      	str	r2, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 210;
 8000c50:	22d2      	movs	r2, #210	; 0xd2
 8000c52:	9231      	str	r2, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c54:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c56:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c58:	a828      	add	r0, sp, #160	; 0xa0
 8000c5a:	f001 f9b3 	bl	8001fc4 <HAL_RCC_OscConfig>
 8000c5e:	bb38      	cbnz	r0, 8000cb0 <SystemClock_Config+0xc4>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c60:	230f      	movs	r3, #15
 8000c62:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c64:	2302      	movs	r3, #2
 8000c66:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c70:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c76:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c78:	2105      	movs	r1, #5
 8000c7a:	a823      	add	r0, sp, #140	; 0x8c
 8000c7c:	f001 fc0c 	bl	8002498 <HAL_RCC_ClockConfig>
 8000c80:	b9c0      	cbnz	r0, 8000cb4 <SystemClock_Config+0xc8>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <SystemClock_Config+0xd8>)
 8000c84:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000c86:	23c0      	movs	r3, #192	; 0xc0
 8000c88:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8000c8a:	2307      	movs	r3, #7
 8000c8c:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000c92:	2300      	movs	r3, #0
 8000c94:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000c96:	2201      	movs	r2, #1
 8000c98:	920c      	str	r2, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000c9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c9e:	920d      	str	r2, [sp, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ca0:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000ca2:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca4:	a802      	add	r0, sp, #8
 8000ca6:	f001 fcd3 	bl	8002650 <HAL_RCCEx_PeriphCLKConfig>
 8000caa:	b928      	cbnz	r0, 8000cb8 <SystemClock_Config+0xcc>
}
 8000cac:	b034      	add	sp, #208	; 0xd0
 8000cae:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000cb0:	f7ff ff30 	bl	8000b14 <Error_Handler>
    Error_Handler();
 8000cb4:	f7ff ff2e 	bl	8000b14 <Error_Handler>
    Error_Handler();
 8000cb8:	f7ff ff2c 	bl	8000b14 <Error_Handler>
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40007000 	.word	0x40007000
 8000cc4:	00010048 	.word	0x00010048

08000cc8 <main>:
{
 8000cc8:	b508      	push	{r3, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000cca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cce:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000cd2:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <main+0xa8>)
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000cda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cde:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ce2:	695a      	ldr	r2, [r3, #20]
 8000ce4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000ce8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cee:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000cf2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000cf6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000cfa:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000cfe:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8000d02:	e000      	b.n	8000d06 <main+0x3e>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8000d04:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d06:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d0a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000d0e:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8000d12:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000d16:	4916      	ldr	r1, [pc, #88]	; (8000d70 <main+0xa8>)
 8000d18:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	3a01      	subs	r2, #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1f2      	bne.n	8000d0a <main+0x42>
    } while(sets-- != 0U);
 8000d24:	1e43      	subs	r3, r0, #1
 8000d26:	2800      	cmp	r0, #0
 8000d28:	d1ec      	bne.n	8000d04 <main+0x3c>
 8000d2a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d2e:	694b      	ldr	r3, [r1, #20]
 8000d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d34:	614b      	str	r3, [r1, #20]
 8000d36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d3a:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000d3e:	f000 f98d 	bl	800105c <HAL_Init>
  SystemClock_Config();
 8000d42:	f7ff ff53 	bl	8000bec <SystemClock_Config>
  MX_GPIO_Init();
 8000d46:	f7ff fc49 	bl	80005dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d4a:	f7ff fee5 	bl	8000b18 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000d4e:	f7ff feff 	bl	8000b50 <MX_SPI2_Init>
  MX_I2C3_Init();
 8000d52:	f7ff ff21 	bl	8000b98 <MX_I2C3_Init>
  MX_TouchGFX_Init();
 8000d56:	f002 ffaf 	bl	8003cb8 <MX_TouchGFX_Init>
  XF_initialize(10);
 8000d5a:	200a      	movs	r0, #10
 8000d5c:	f005 faba 	bl	80062d4 <XF_initialize>
  Factory_initialize();
 8000d60:	f002 fe0a 	bl	8003978 <Factory_initialize>
  Factory_build();
 8000d64:	f002 fe0c 	bl	8003980 <Factory_build>
  XF_exec();
 8000d68:	f005 fae2 	bl	8006330 <XF_exec>
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <main+0xa4>
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_MspInit+0x2c>)
 8000d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d7a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d7e:	641a      	str	r2, [r3, #64]	; 0x40
 8000d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d82:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000d86:	9200      	str	r2, [sp, #0]
 8000d88:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d90:	645a      	str	r2, [r3, #68]	; 0x44
 8000d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d98:	9301      	str	r3, [sp, #4]
 8000d9a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9c:	b002      	add	sp, #8
 8000d9e:	4770      	bx	lr
 8000da0:	40023800 	.word	0x40023800

08000da4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000da4:	b510      	push	{r4, lr}
 8000da6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	2300      	movs	r3, #0
 8000daa:	9303      	str	r3, [sp, #12]
 8000dac:	9304      	str	r3, [sp, #16]
 8000dae:	9305      	str	r3, [sp, #20]
 8000db0:	9306      	str	r3, [sp, #24]
 8000db2:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C3)
 8000db4:	6802      	ldr	r2, [r0, #0]
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <HAL_I2C_MspInit+0x64>)
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d001      	beq.n	8000dc0 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000dbc:	b008      	add	sp, #32
 8000dbe:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc0:	4c12      	ldr	r4, [pc, #72]	; (8000e0c <HAL_I2C_MspInit+0x68>)
 8000dc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc8:	6323      	str	r3, [r4, #48]	; 0x30
 8000dca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd0:	9301      	str	r3, [sp, #4]
 8000dd2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000dd4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000dd8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dda:	2312      	movs	r3, #18
 8000ddc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000de6:	2304      	movs	r3, #4
 8000de8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dea:	a903      	add	r1, sp, #12
 8000dec:	4808      	ldr	r0, [pc, #32]	; (8000e10 <HAL_I2C_MspInit+0x6c>)
 8000dee:	f000 fab5 	bl	800135c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000df2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000df4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000df8:	6423      	str	r3, [r4, #64]	; 0x40
 8000dfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000dfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e00:	9302      	str	r3, [sp, #8]
 8000e02:	9b02      	ldr	r3, [sp, #8]
}
 8000e04:	e7da      	b.n	8000dbc <HAL_I2C_MspInit+0x18>
 8000e06:	bf00      	nop
 8000e08:	40005c00 	.word	0x40005c00
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40021c00 	.word	0x40021c00

08000e14 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C3)
 8000e14:	6802      	ldr	r2, [r0, #0]
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_I2C_MspDeInit+0x2c>)
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d000      	beq.n	8000e1e <HAL_I2C_MspDeInit+0xa>
 8000e1c:	4770      	bx	lr
{
 8000e1e:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000e20:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <HAL_I2C_MspDeInit+0x30>)
 8000e22:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000e24:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e28:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8000e2a:	4c07      	ldr	r4, [pc, #28]	; (8000e48 <HAL_I2C_MspDeInit+0x34>)
 8000e2c:	2180      	movs	r1, #128	; 0x80
 8000e2e:	4620      	mov	r0, r4
 8000e30:	f000 fb84 	bl	800153c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8000e34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e38:	4620      	mov	r0, r4
 8000e3a:	f000 fb7f 	bl	800153c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8000e3e:	bd10      	pop	{r4, pc}
 8000e40:	40005c00 	.word	0x40005c00
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40021c00 	.word	0x40021c00

08000e4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e4c:	b570      	push	{r4, r5, r6, lr}
 8000e4e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	2300      	movs	r3, #0
 8000e52:	9303      	str	r3, [sp, #12]
 8000e54:	9304      	str	r3, [sp, #16]
 8000e56:	9305      	str	r3, [sp, #20]
 8000e58:	9306      	str	r3, [sp, #24]
 8000e5a:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 8000e5c:	6802      	ldr	r2, [r0, #0]
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <HAL_SPI_MspInit+0x88>)
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d001      	beq.n	8000e68 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e64:	b008      	add	sp, #32
 8000e66:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e68:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e72:	641a      	str	r2, [r3, #64]	; 0x40
 8000e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e76:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000e7a:	9200      	str	r2, [sp, #0]
 8000e7c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e84:	631a      	str	r2, [r3, #48]	; 0x30
 8000e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e88:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000e8c:	9201      	str	r2, [sp, #4]
 8000e8e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e92:	f042 0202 	orr.w	r2, r2, #2
 8000e96:	631a      	str	r2, [r3, #48]	; 0x30
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	9302      	str	r3, [sp, #8]
 8000ea0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000ea2:	2502      	movs	r5, #2
 8000ea4:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2400      	movs	r4, #0
 8000eaa:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eae:	2605      	movs	r6, #5
 8000eb0:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	a903      	add	r1, sp, #12
 8000eb4:	4808      	ldr	r0, [pc, #32]	; (8000ed8 <HAL_SPI_MspInit+0x8c>)
 8000eb6:	f000 fa51 	bl	800135c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000eba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ebe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ec6:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec8:	a903      	add	r1, sp, #12
 8000eca:	4804      	ldr	r0, [pc, #16]	; (8000edc <HAL_SPI_MspInit+0x90>)
 8000ecc:	f000 fa46 	bl	800135c <HAL_GPIO_Init>
}
 8000ed0:	e7c8      	b.n	8000e64 <HAL_SPI_MspInit+0x18>
 8000ed2:	bf00      	nop
 8000ed4:	40003800 	.word	0x40003800
 8000ed8:	40022000 	.word	0x40022000
 8000edc:	40020400 	.word	0x40020400

08000ee0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee0:	b570      	push	{r4, r5, r6, lr}
 8000ee2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	9303      	str	r3, [sp, #12]
 8000ee8:	9304      	str	r3, [sp, #16]
 8000eea:	9305      	str	r3, [sp, #20]
 8000eec:	9306      	str	r3, [sp, #24]
 8000eee:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000ef0:	6802      	ldr	r2, [r0, #0]
 8000ef2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ef6:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d001      	beq.n	8000f02 <HAL_UART_MspInit+0x22>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000efe:	b008      	add	sp, #32
 8000f00:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f02:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8000f06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f08:	f042 0210 	orr.w	r2, r2, #16
 8000f0c:	645a      	str	r2, [r3, #68]	; 0x44
 8000f0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f10:	f002 0210 	and.w	r2, r2, #16
 8000f14:	9200      	str	r2, [sp, #0]
 8000f16:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f1a:	f042 0202 	orr.w	r2, r2, #2
 8000f1e:	631a      	str	r2, [r3, #48]	; 0x30
 8000f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f22:	f002 0202 	and.w	r2, r2, #2
 8000f26:	9201      	str	r2, [sp, #4]
 8000f28:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f2c:	f042 0201 	orr.w	r2, r2, #1
 8000f30:	631a      	str	r2, [r3, #48]	; 0x30
 8000f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	9302      	str	r3, [sp, #8]
 8000f3a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2602      	movs	r6, #2
 8000f42:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2400      	movs	r4, #0
 8000f46:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f4a:	2507      	movs	r5, #7
 8000f4c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	a903      	add	r1, sp, #12
 8000f50:	4807      	ldr	r0, [pc, #28]	; (8000f70 <HAL_UART_MspInit+0x90>)
 8000f52:	f000 fa03 	bl	800135c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000f56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f5a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f62:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000f64:	a903      	add	r1, sp, #12
 8000f66:	4803      	ldr	r0, [pc, #12]	; (8000f74 <HAL_UART_MspInit+0x94>)
 8000f68:	f000 f9f8 	bl	800135c <HAL_GPIO_Init>
}
 8000f6c:	e7c7      	b.n	8000efe <HAL_UART_MspInit+0x1e>
 8000f6e:	bf00      	nop
 8000f70:	40020400 	.word	0x40020400
 8000f74:	40020000 	.word	0x40020000

08000f78 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <NMI_Handler>

08000f7a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <HardFault_Handler>

08000f7c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <MemManage_Handler>

08000f7e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <BusFault_Handler>

08000f80 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <UsageFault_Handler>

08000f82 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f82:	4770      	bx	lr

08000f84 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f84:	4770      	bx	lr

08000f86 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f86:	4770      	bx	lr

08000f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f88:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
  // SysTick handler gets called every millisecond (is given by code
  // generated by STM32CubeMX). Check which interval is needed by the
  // XF (typically slower) and call XF_tick() accordingly.
  if (XF_isRunning() &&
 8000f8a:	f005 fbbc 	bl	8006706 <XF_isRunning>
 8000f8e:	b910      	cbnz	r0, 8000f96 <SysTick_Handler+0xe>
      (HAL_GetTick() % XF_tickIntervalInMilliseconds()) == 0)
  {
	XF_tick();
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f90:	f000 f87a 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f94:	bd10      	pop	{r4, pc}
      (HAL_GetTick() % XF_tickIntervalInMilliseconds()) == 0)
 8000f96:	f000 f883 	bl	80010a0 <HAL_GetTick>
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	f005 fbac 	bl	80066f8 <XF_tickIntervalInMilliseconds>
 8000fa0:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fa4:	fb00 4013 	mls	r0, r0, r3, r4
  if (XF_isRunning() &&
 8000fa8:	2800      	cmp	r0, #0
 8000faa:	d1f1      	bne.n	8000f90 <SysTick_Handler+0x8>
	XF_tick();
 8000fac:	f005 fb90 	bl	80066d0 <XF_tick>
 8000fb0:	e7ee      	b.n	8000f90 <SysTick_Handler+0x8>

08000fb2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000fb2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000fb4:	2004      	movs	r0, #4
 8000fb6:	f000 fb75 	bl	80016a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000fba:	bd08      	pop	{r3, pc}

08000fbc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000fbc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000fbe:	2008      	movs	r0, #8
 8000fc0:	f000 fb70 	bl	80016a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000fc4:	bd08      	pop	{r3, pc}

08000fc6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fc6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000fc8:	2040      	movs	r0, #64	; 0x40
 8000fca:	f000 fb6b 	bl	80016a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000fce:	2080      	movs	r0, #128	; 0x80
 8000fd0:	f000 fb68 	bl	80016a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fd4:	bd08      	pop	{r3, pc}
	...

08000fd8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8000fd8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8000fda:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <LTDC_IRQHandler+0xc>)
 8000fdc:	f000 ff60 	bl	8001ea0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8000fe0:	bd08      	pop	{r3, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20001350 	.word	0x20001350

08000fe8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8000fe8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8000fea:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <DMA2D_IRQHandler+0xc>)
 8000fec:	f000 f918 	bl	8001220 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8000ff0:	bd08      	pop	{r3, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000145c 	.word	0x2000145c

08000ff8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <SystemInit+0x18>)
 8000ffa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000ffe:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001002:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001006:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800100a:	609a      	str	r2, [r3, #8]
#endif
}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b510      	push	{r4, lr}
 8001016:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_InitTick+0x40>)
 800101a:	7818      	ldrb	r0, [r3, #0]
 800101c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001020:	fbb3 f3f0 	udiv	r3, r3, r0
 8001024:	4a0c      	ldr	r2, [pc, #48]	; (8001058 <HAL_InitTick+0x44>)
 8001026:	6810      	ldr	r0, [r2, #0]
 8001028:	fbb0 f0f3 	udiv	r0, r0, r3
 800102c:	f000 f890 	bl	8001150 <HAL_SYSTICK_Config>
 8001030:	b968      	cbnz	r0, 800104e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001032:	2c0f      	cmp	r4, #15
 8001034:	d901      	bls.n	800103a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001036:	2001      	movs	r0, #1
 8001038:	e00a      	b.n	8001050 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103a:	2200      	movs	r2, #0
 800103c:	4621      	mov	r1, r4
 800103e:	f04f 30ff 	mov.w	r0, #4294967295
 8001042:	f000 f845 	bl	80010d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001046:	4b03      	ldr	r3, [pc, #12]	; (8001054 <HAL_InitTick+0x40>)
 8001048:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 800104a:	2000      	movs	r0, #0
 800104c:	e000      	b.n	8001050 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800104e:	2001      	movs	r0, #1
}
 8001050:	bd10      	pop	{r4, pc}
 8001052:	bf00      	nop
 8001054:	20000004 	.word	0x20000004
 8001058:	20000000 	.word	0x20000000

0800105c <HAL_Init>:
{
 800105c:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <HAL_Init+0x28>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001066:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800106e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001070:	2003      	movs	r0, #3
 8001072:	f000 f81b 	bl	80010ac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001076:	2000      	movs	r0, #0
 8001078:	f7ff ffcc 	bl	8001014 <HAL_InitTick>
  HAL_MspInit();
 800107c:	f7ff fe7a 	bl	8000d74 <HAL_MspInit>
}
 8001080:	2000      	movs	r0, #0
 8001082:	bd08      	pop	{r3, pc}
 8001084:	40023c00 	.word	0x40023c00

08001088 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001088:	4a03      	ldr	r2, [pc, #12]	; (8001098 <HAL_IncTick+0x10>)
 800108a:	6811      	ldr	r1, [r2, #0]
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <HAL_IncTick+0x14>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	440b      	add	r3, r1
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	200015c4 	.word	0x200015c4
 800109c:	20000004 	.word	0x20000004

080010a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010a0:	4b01      	ldr	r3, [pc, #4]	; (80010a8 <HAL_GetTick+0x8>)
 80010a2:	6818      	ldr	r0, [r3, #0]
}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	200015c4 	.word	0x200015c4

080010ac <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ac:	4906      	ldr	r1, [pc, #24]	; (80010c8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80010ae:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010b4:	041b      	lsls	r3, r3, #16
 80010b6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b8:	0200      	lsls	r0, r0, #8
 80010ba:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010be:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80010c0:	4a02      	ldr	r2, [pc, #8]	; (80010cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80010c2:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80010c4:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00
 80010cc:	05fa0000 	.word	0x05fa0000

080010d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d0:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_NVIC_SetPriority+0x58>)
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010da:	f1c3 0407 	rsb	r4, r3, #7
 80010de:	2c04      	cmp	r4, #4
 80010e0:	bf28      	it	cs
 80010e2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e4:	1d1d      	adds	r5, r3, #4
 80010e6:	2d06      	cmp	r5, #6
 80010e8:	d914      	bls.n	8001114 <HAL_NVIC_SetPriority+0x44>
 80010ea:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	f04f 35ff 	mov.w	r5, #4294967295
 80010f0:	fa05 f404 	lsl.w	r4, r5, r4
 80010f4:	ea21 0104 	bic.w	r1, r1, r4
 80010f8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fa:	fa05 f303 	lsl.w	r3, r5, r3
 80010fe:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001102:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001104:	2800      	cmp	r0, #0
 8001106:	db07      	blt.n	8001118 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	0109      	lsls	r1, r1, #4
 800110a:	b2c9      	uxtb	r1, r1
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <HAL_NVIC_SetPriority+0x5c>)
 800110e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001110:	bc30      	pop	{r4, r5}
 8001112:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001114:	2300      	movs	r3, #0
 8001116:	e7e9      	b.n	80010ec <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001118:	f000 000f 	and.w	r0, r0, #15
 800111c:	0109      	lsls	r1, r1, #4
 800111e:	b2c9      	uxtb	r1, r1
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_NVIC_SetPriority+0x60>)
 8001122:	5419      	strb	r1, [r3, r0]
 8001124:	e7f4      	b.n	8001110 <HAL_NVIC_SetPriority+0x40>
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00
 800112c:	e000e400 	.word	0xe000e400
 8001130:	e000ed14 	.word	0xe000ed14

08001134 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001134:	2800      	cmp	r0, #0
 8001136:	db07      	blt.n	8001148 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001138:	f000 021f 	and.w	r2, r0, #31
 800113c:	0940      	lsrs	r0, r0, #5
 800113e:	2301      	movs	r3, #1
 8001140:	4093      	lsls	r3, r2
 8001142:	4a02      	ldr	r2, [pc, #8]	; (800114c <HAL_NVIC_EnableIRQ+0x18>)
 8001144:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000e100 	.word	0xe000e100

08001150 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001150:	3801      	subs	r0, #1
 8001152:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001156:	d20a      	bcs.n	800116e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_SYSTICK_Config+0x24>)
 800115a:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	4a06      	ldr	r2, [pc, #24]	; (8001178 <HAL_SYSTICK_Config+0x28>)
 800115e:	21f0      	movs	r1, #240	; 0xf0
 8001160:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001164:	2000      	movs	r0, #0
 8001166:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001168:	2207      	movs	r2, #7
 800116a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800116e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000e010 	.word	0xe000e010
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800117c:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800117e:	6805      	ldr	r5, [r0, #0]
 8001180:	682c      	ldr	r4, [r5, #0]
 8001182:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001186:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001188:	6804      	ldr	r4, [r0, #0]
 800118a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800118c:	6883      	ldr	r3, [r0, #8]
 800118e:	2b40      	cmp	r3, #64	; 0x40
 8001190:	d005      	beq.n	800119e <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8001192:	6803      	ldr	r3, [r0, #0]
 8001194:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001196:	6803      	ldr	r3, [r0, #0]
 8001198:	60da      	str	r2, [r3, #12]
  }
}
 800119a:	bc30      	pop	{r4, r5}
 800119c:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800119e:	6803      	ldr	r3, [r0, #0]
 80011a0:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80011a2:	6803      	ldr	r3, [r0, #0]
 80011a4:	60d9      	str	r1, [r3, #12]
 80011a6:	e7f8      	b.n	800119a <DMA_SetConfig+0x1e>

080011a8 <HAL_DMA_Start_IT>:
{
 80011a8:	b538      	push	{r3, r4, r5, lr}
 80011aa:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011ac:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80011ae:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80011b2:	2801      	cmp	r0, #1
 80011b4:	d030      	beq.n	8001218 <HAL_DMA_Start_IT+0x70>
 80011b6:	2001      	movs	r0, #1
 80011b8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80011bc:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 80011c0:	b2c0      	uxtb	r0, r0
 80011c2:	2801      	cmp	r0, #1
 80011c4:	d004      	beq.n	80011d0 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 80011c6:	2300      	movs	r3, #0
 80011c8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 80011cc:	2002      	movs	r0, #2
}
 80011ce:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80011d0:	2002      	movs	r0, #2
 80011d2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011d6:	2000      	movs	r0, #0
 80011d8:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011da:	4620      	mov	r0, r4
 80011dc:	f7ff ffce 	bl	800117c <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011e0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80011e2:	233f      	movs	r3, #63	; 0x3f
 80011e4:	4093      	lsls	r3, r2
 80011e6:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011e8:	6822      	ldr	r2, [r4, #0]
 80011ea:	6813      	ldr	r3, [r2, #0]
 80011ec:	f043 0316 	orr.w	r3, r3, #22
 80011f0:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80011f2:	6822      	ldr	r2, [r4, #0]
 80011f4:	6953      	ldr	r3, [r2, #20]
 80011f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011fa:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80011fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011fe:	b123      	cbz	r3, 800120a <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001200:	6822      	ldr	r2, [r4, #0]
 8001202:	6813      	ldr	r3, [r2, #0]
 8001204:	f043 0308 	orr.w	r3, r3, #8
 8001208:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800120a:	6822      	ldr	r2, [r4, #0]
 800120c:	6813      	ldr	r3, [r2, #0]
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001214:	2000      	movs	r0, #0
 8001216:	e7da      	b.n	80011ce <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001218:	2002      	movs	r0, #2
 800121a:	e7d8      	b.n	80011ce <HAL_DMA_Start_IT+0x26>

0800121c <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800121c:	4770      	bx	lr

0800121e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800121e:	4770      	bx	lr

08001220 <HAL_DMA2D_IRQHandler>:
{
 8001220:	b570      	push	{r4, r5, r6, lr}
 8001222:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001224:	6803      	ldr	r3, [r0, #0]
 8001226:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001228:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800122a:	f015 0f01 	tst.w	r5, #1
 800122e:	d016      	beq.n	800125e <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001230:	f416 7f80 	tst.w	r6, #256	; 0x100
 8001234:	d013      	beq.n	800125e <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800123c:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800123e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	63c3      	str	r3, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001246:	6803      	ldr	r3, [r0, #0]
 8001248:	2201      	movs	r2, #1
 800124a:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800124c:	2304      	movs	r3, #4
 800124e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001252:	2300      	movs	r3, #0
 8001254:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8001258:	6943      	ldr	r3, [r0, #20]
 800125a:	b103      	cbz	r3, 800125e <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 800125c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800125e:	f015 0f20 	tst.w	r5, #32
 8001262:	d018      	beq.n	8001296 <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001264:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8001268:	d015      	beq.n	8001296 <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800126a:	6822      	ldr	r2, [r4, #0]
 800126c:	6813      	ldr	r3, [r2, #0]
 800126e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001272:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001274:	6823      	ldr	r3, [r4, #0]
 8001276:	2220      	movs	r2, #32
 8001278:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800127a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001282:	2304      	movs	r3, #4
 8001284:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001288:	2300      	movs	r3, #0
 800128a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 800128e:	6963      	ldr	r3, [r4, #20]
 8001290:	b10b      	cbz	r3, 8001296 <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 8001292:	4620      	mov	r0, r4
 8001294:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001296:	f015 0f08 	tst.w	r5, #8
 800129a:	d018      	beq.n	80012ce <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800129c:	f416 6f00 	tst.w	r6, #2048	; 0x800
 80012a0:	d015      	beq.n	80012ce <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80012a2:	6822      	ldr	r2, [r4, #0]
 80012a4:	6813      	ldr	r3, [r2, #0]
 80012a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012aa:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80012ac:	6823      	ldr	r3, [r4, #0]
 80012ae:	2208      	movs	r2, #8
 80012b0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80012b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80012ba:	2304      	movs	r3, #4
 80012bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80012c0:	2300      	movs	r3, #0
 80012c2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 80012c6:	6963      	ldr	r3, [r4, #20]
 80012c8:	b10b      	cbz	r3, 80012ce <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 80012ca:	4620      	mov	r0, r4
 80012cc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80012ce:	f015 0f04 	tst.w	r5, #4
 80012d2:	d002      	beq.n	80012da <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 80012d4:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80012d8:	d120      	bne.n	800131c <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80012da:	f015 0f02 	tst.w	r5, #2
 80012de:	d016      	beq.n	800130e <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80012e0:	f416 7f00 	tst.w	r6, #512	; 0x200
 80012e4:	d013      	beq.n	800130e <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80012e6:	6822      	ldr	r2, [r4, #0]
 80012e8:	6813      	ldr	r3, [r2, #0]
 80012ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80012ee:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80012f0:	6823      	ldr	r3, [r4, #0]
 80012f2:	2202      	movs	r2, #2
 80012f4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80012f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80012f8:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80012fa:	2301      	movs	r3, #1
 80012fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001300:	2300      	movs	r3, #0
 8001302:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferCpltCallback != NULL)
 8001306:	6923      	ldr	r3, [r4, #16]
 8001308:	b10b      	cbz	r3, 800130e <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 800130a:	4620      	mov	r0, r4
 800130c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800130e:	f015 0f10 	tst.w	r5, #16
 8001312:	d002      	beq.n	800131a <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001314:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8001318:	d10c      	bne.n	8001334 <HAL_DMA2D_IRQHandler+0x114>
}
 800131a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800131c:	6822      	ldr	r2, [r4, #0]
 800131e:	6813      	ldr	r3, [r2, #0]
 8001320:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001324:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001326:	6823      	ldr	r3, [r4, #0]
 8001328:	2204      	movs	r2, #4
 800132a:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800132c:	4620      	mov	r0, r4
 800132e:	f7ff ff75 	bl	800121c <HAL_DMA2D_LineEventCallback>
 8001332:	e7d2      	b.n	80012da <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001334:	6822      	ldr	r2, [r4, #0]
 8001336:	6813      	ldr	r3, [r2, #0]
 8001338:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800133c:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800133e:	6823      	ldr	r3, [r4, #0]
 8001340:	2210      	movs	r2, #16
 8001342:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001344:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001346:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001348:	2301      	movs	r3, #1
 800134a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800134e:	2300      	movs	r3, #0
 8001350:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001354:	4620      	mov	r0, r4
 8001356:	f7ff ff62 	bl	800121e <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800135a:	e7de      	b.n	800131a <HAL_DMA2D_IRQHandler+0xfa>

0800135c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800135c:	2300      	movs	r3, #0
 800135e:	2b0f      	cmp	r3, #15
 8001360:	f200 80e3 	bhi.w	800152a <HAL_GPIO_Init+0x1ce>
{
 8001364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001366:	b083      	sub	sp, #12
 8001368:	e039      	b.n	80013de <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800136a:	2209      	movs	r2, #9
 800136c:	e000      	b.n	8001370 <HAL_GPIO_Init+0x14>
 800136e:	2200      	movs	r2, #0
 8001370:	40b2      	lsls	r2, r6
 8001372:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8001374:	3402      	adds	r4, #2
 8001376:	4e6d      	ldr	r6, [pc, #436]	; (800152c <HAL_GPIO_Init+0x1d0>)
 8001378:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800137c:	4a6c      	ldr	r2, [pc, #432]	; (8001530 <HAL_GPIO_Init+0x1d4>)
 800137e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001380:	43ea      	mvns	r2, r5
 8001382:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001386:	684f      	ldr	r7, [r1, #4]
 8001388:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800138c:	d001      	beq.n	8001392 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 800138e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8001392:	4c67      	ldr	r4, [pc, #412]	; (8001530 <HAL_GPIO_Init+0x1d4>)
 8001394:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8001396:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001398:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800139c:	684f      	ldr	r7, [r1, #4]
 800139e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80013a2:	d001      	beq.n	80013a8 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80013a4:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80013a8:	4c61      	ldr	r4, [pc, #388]	; (8001530 <HAL_GPIO_Init+0x1d4>)
 80013aa:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ac:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80013ae:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013b2:	684f      	ldr	r7, [r1, #4]
 80013b4:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80013b8:	d001      	beq.n	80013be <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80013ba:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80013be:	4c5c      	ldr	r4, [pc, #368]	; (8001530 <HAL_GPIO_Init+0x1d4>)
 80013c0:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80013c2:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80013c4:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013c6:	684e      	ldr	r6, [r1, #4]
 80013c8:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80013cc:	d001      	beq.n	80013d2 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80013ce:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80013d2:	4c57      	ldr	r4, [pc, #348]	; (8001530 <HAL_GPIO_Init+0x1d4>)
 80013d4:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80013d6:	3301      	adds	r3, #1
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	f200 80a4 	bhi.w	8001526 <HAL_GPIO_Init+0x1ca>
    ioposition = ((uint32_t)0x01) << position;
 80013de:	2201      	movs	r2, #1
 80013e0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013e2:	680c      	ldr	r4, [r1, #0]
 80013e4:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80013e8:	ea32 0404 	bics.w	r4, r2, r4
 80013ec:	d1f3      	bne.n	80013d6 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013ee:	684c      	ldr	r4, [r1, #4]
 80013f0:	1e66      	subs	r6, r4, #1
 80013f2:	2c11      	cmp	r4, #17
 80013f4:	bf18      	it	ne
 80013f6:	2e01      	cmpne	r6, #1
 80013f8:	d901      	bls.n	80013fe <HAL_GPIO_Init+0xa2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013fa:	2c12      	cmp	r4, #18
 80013fc:	d112      	bne.n	8001424 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->OSPEEDR; 
 80013fe:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001400:	005f      	lsls	r7, r3, #1
 8001402:	2403      	movs	r4, #3
 8001404:	40bc      	lsls	r4, r7
 8001406:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 800140a:	68cc      	ldr	r4, [r1, #12]
 800140c:	40bc      	lsls	r4, r7
 800140e:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8001410:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001412:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001414:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001418:	684c      	ldr	r4, [r1, #4]
 800141a:	f3c4 1200 	ubfx	r2, r4, #4, #1
 800141e:	409a      	lsls	r2, r3
 8001420:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8001422:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001424:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001426:	005e      	lsls	r6, r3, #1
 8001428:	2403      	movs	r4, #3
 800142a:	40b4      	lsls	r4, r6
 800142c:	43e2      	mvns	r2, r4
 800142e:	ea27 0704 	bic.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001432:	688c      	ldr	r4, [r1, #8]
 8001434:	40b4      	lsls	r4, r6
 8001436:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8001438:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800143a:	684c      	ldr	r4, [r1, #4]
 800143c:	2c12      	cmp	r4, #18
 800143e:	bf18      	it	ne
 8001440:	2c02      	cmpne	r4, #2
 8001442:	d113      	bne.n	800146c <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3];
 8001444:	08df      	lsrs	r7, r3, #3
 8001446:	3708      	adds	r7, #8
 8001448:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800144c:	f003 0407 	and.w	r4, r3, #7
 8001450:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8001454:	240f      	movs	r4, #15
 8001456:	fa04 f40c 	lsl.w	r4, r4, ip
 800145a:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800145e:	690c      	ldr	r4, [r1, #16]
 8001460:	fa04 f40c 	lsl.w	r4, r4, ip
 8001464:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 8001468:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 800146c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800146e:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001470:	684a      	ldr	r2, [r1, #4]
 8001472:	f002 0203 	and.w	r2, r2, #3
 8001476:	40b2      	lsls	r2, r6
 8001478:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800147a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800147c:	684a      	ldr	r2, [r1, #4]
 800147e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001482:	d0a8      	beq.n	80013d6 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001484:	4a2b      	ldr	r2, [pc, #172]	; (8001534 <HAL_GPIO_Init+0x1d8>)
 8001486:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001488:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800148c:	6454      	str	r4, [r2, #68]	; 0x44
 800148e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001490:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001494:	9201      	str	r2, [sp, #4]
 8001496:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001498:	089c      	lsrs	r4, r3, #2
 800149a:	1ca6      	adds	r6, r4, #2
 800149c:	4a23      	ldr	r2, [pc, #140]	; (800152c <HAL_GPIO_Init+0x1d0>)
 800149e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80014a2:	f003 0203 	and.w	r2, r3, #3
 80014a6:	0096      	lsls	r6, r2, #2
 80014a8:	220f      	movs	r2, #15
 80014aa:	40b2      	lsls	r2, r6
 80014ac:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80014b0:	4a21      	ldr	r2, [pc, #132]	; (8001538 <HAL_GPIO_Init+0x1dc>)
 80014b2:	4290      	cmp	r0, r2
 80014b4:	f43f af5b 	beq.w	800136e <HAL_GPIO_Init+0x12>
 80014b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014bc:	4290      	cmp	r0, r2
 80014be:	d022      	beq.n	8001506 <HAL_GPIO_Init+0x1aa>
 80014c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014c4:	4290      	cmp	r0, r2
 80014c6:	d020      	beq.n	800150a <HAL_GPIO_Init+0x1ae>
 80014c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014cc:	4290      	cmp	r0, r2
 80014ce:	d01e      	beq.n	800150e <HAL_GPIO_Init+0x1b2>
 80014d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014d4:	4290      	cmp	r0, r2
 80014d6:	d01c      	beq.n	8001512 <HAL_GPIO_Init+0x1b6>
 80014d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014dc:	4290      	cmp	r0, r2
 80014de:	d01a      	beq.n	8001516 <HAL_GPIO_Init+0x1ba>
 80014e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014e4:	4290      	cmp	r0, r2
 80014e6:	d018      	beq.n	800151a <HAL_GPIO_Init+0x1be>
 80014e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014ec:	4290      	cmp	r0, r2
 80014ee:	d016      	beq.n	800151e <HAL_GPIO_Init+0x1c2>
 80014f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014f4:	4290      	cmp	r0, r2
 80014f6:	d014      	beq.n	8001522 <HAL_GPIO_Init+0x1c6>
 80014f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014fc:	4290      	cmp	r0, r2
 80014fe:	f43f af34 	beq.w	800136a <HAL_GPIO_Init+0xe>
 8001502:	220a      	movs	r2, #10
 8001504:	e734      	b.n	8001370 <HAL_GPIO_Init+0x14>
 8001506:	2201      	movs	r2, #1
 8001508:	e732      	b.n	8001370 <HAL_GPIO_Init+0x14>
 800150a:	2202      	movs	r2, #2
 800150c:	e730      	b.n	8001370 <HAL_GPIO_Init+0x14>
 800150e:	2203      	movs	r2, #3
 8001510:	e72e      	b.n	8001370 <HAL_GPIO_Init+0x14>
 8001512:	2204      	movs	r2, #4
 8001514:	e72c      	b.n	8001370 <HAL_GPIO_Init+0x14>
 8001516:	2205      	movs	r2, #5
 8001518:	e72a      	b.n	8001370 <HAL_GPIO_Init+0x14>
 800151a:	2206      	movs	r2, #6
 800151c:	e728      	b.n	8001370 <HAL_GPIO_Init+0x14>
 800151e:	2207      	movs	r2, #7
 8001520:	e726      	b.n	8001370 <HAL_GPIO_Init+0x14>
 8001522:	2208      	movs	r2, #8
 8001524:	e724      	b.n	8001370 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8001526:	b003      	add	sp, #12
 8001528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800152a:	4770      	bx	lr
 800152c:	40013800 	.word	0x40013800
 8001530:	40013c00 	.word	0x40013c00
 8001534:	40023800 	.word	0x40023800
 8001538:	40020000 	.word	0x40020000

0800153c <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800153c:	2300      	movs	r3, #0
 800153e:	2b0f      	cmp	r3, #15
 8001540:	f200 809b 	bhi.w	800167a <HAL_GPIO_DeInit+0x13e>
{
 8001544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001546:	e02d      	b.n	80015a4 <HAL_GPIO_DeInit+0x68>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8001548:	2609      	movs	r6, #9
 800154a:	e000      	b.n	800154e <HAL_GPIO_DeInit+0x12>
 800154c:	2600      	movs	r6, #0
 800154e:	fa06 f404 	lsl.w	r4, r6, r4
 8001552:	42ac      	cmp	r4, r5
 8001554:	d075      	beq.n	8001642 <HAL_GPIO_DeInit+0x106>
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001556:	6805      	ldr	r5, [r0, #0]
 8001558:	005c      	lsls	r4, r3, #1
 800155a:	2603      	movs	r6, #3
 800155c:	fa06 f404 	lsl.w	r4, r6, r4
 8001560:	ea25 0504 	bic.w	r5, r5, r4
 8001564:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001566:	fa23 f506 	lsr.w	r5, r3, r6
 800156a:	3508      	adds	r5, #8
 800156c:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8001570:	f003 0707 	and.w	r7, r3, #7
 8001574:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8001578:	270f      	movs	r7, #15
 800157a:	fa07 f70c 	lsl.w	r7, r7, ip
 800157e:	ea26 0607 	bic.w	r6, r6, r7
 8001582:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001586:	68c5      	ldr	r5, [r0, #12]
 8001588:	ea25 0504 	bic.w	r5, r5, r4
 800158c:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800158e:	6845      	ldr	r5, [r0, #4]
 8001590:	ea25 0202 	bic.w	r2, r5, r2
 8001594:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001596:	6882      	ldr	r2, [r0, #8]
 8001598:	ea22 0404 	bic.w	r4, r2, r4
 800159c:	6084      	str	r4, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800159e:	3301      	adds	r3, #1
 80015a0:	2b0f      	cmp	r3, #15
 80015a2:	d869      	bhi.n	8001678 <HAL_GPIO_DeInit+0x13c>
    ioposition = ((uint32_t)0x01) << position;
 80015a4:	2201      	movs	r2, #1
 80015a6:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 80015a8:	ea02 0701 	and.w	r7, r2, r1
    if(iocurrent == ioposition)
 80015ac:	ea32 0401 	bics.w	r4, r2, r1
 80015b0:	d1f5      	bne.n	800159e <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2];
 80015b2:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80015b6:	f10c 0502 	add.w	r5, ip, #2
 80015ba:	4c30      	ldr	r4, [pc, #192]	; (800167c <HAL_GPIO_DeInit+0x140>)
 80015bc:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80015c0:	f003 0403 	and.w	r4, r3, #3
 80015c4:	00a4      	lsls	r4, r4, #2
 80015c6:	260f      	movs	r6, #15
 80015c8:	fa06 fe04 	lsl.w	lr, r6, r4
 80015cc:	ea0e 0505 	and.w	r5, lr, r5
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80015d0:	4e2b      	ldr	r6, [pc, #172]	; (8001680 <HAL_GPIO_DeInit+0x144>)
 80015d2:	42b0      	cmp	r0, r6
 80015d4:	d0ba      	beq.n	800154c <HAL_GPIO_DeInit+0x10>
 80015d6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015da:	42b0      	cmp	r0, r6
 80015dc:	d021      	beq.n	8001622 <HAL_GPIO_DeInit+0xe6>
 80015de:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015e2:	42b0      	cmp	r0, r6
 80015e4:	d01f      	beq.n	8001626 <HAL_GPIO_DeInit+0xea>
 80015e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015ea:	42b0      	cmp	r0, r6
 80015ec:	d01d      	beq.n	800162a <HAL_GPIO_DeInit+0xee>
 80015ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015f2:	42b0      	cmp	r0, r6
 80015f4:	d01b      	beq.n	800162e <HAL_GPIO_DeInit+0xf2>
 80015f6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015fa:	42b0      	cmp	r0, r6
 80015fc:	d019      	beq.n	8001632 <HAL_GPIO_DeInit+0xf6>
 80015fe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001602:	42b0      	cmp	r0, r6
 8001604:	d017      	beq.n	8001636 <HAL_GPIO_DeInit+0xfa>
 8001606:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800160a:	42b0      	cmp	r0, r6
 800160c:	d015      	beq.n	800163a <HAL_GPIO_DeInit+0xfe>
 800160e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001612:	42b0      	cmp	r0, r6
 8001614:	d013      	beq.n	800163e <HAL_GPIO_DeInit+0x102>
 8001616:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800161a:	42b0      	cmp	r0, r6
 800161c:	d094      	beq.n	8001548 <HAL_GPIO_DeInit+0xc>
 800161e:	260a      	movs	r6, #10
 8001620:	e795      	b.n	800154e <HAL_GPIO_DeInit+0x12>
 8001622:	2601      	movs	r6, #1
 8001624:	e793      	b.n	800154e <HAL_GPIO_DeInit+0x12>
 8001626:	2602      	movs	r6, #2
 8001628:	e791      	b.n	800154e <HAL_GPIO_DeInit+0x12>
 800162a:	2603      	movs	r6, #3
 800162c:	e78f      	b.n	800154e <HAL_GPIO_DeInit+0x12>
 800162e:	2604      	movs	r6, #4
 8001630:	e78d      	b.n	800154e <HAL_GPIO_DeInit+0x12>
 8001632:	2605      	movs	r6, #5
 8001634:	e78b      	b.n	800154e <HAL_GPIO_DeInit+0x12>
 8001636:	2606      	movs	r6, #6
 8001638:	e789      	b.n	800154e <HAL_GPIO_DeInit+0x12>
 800163a:	2607      	movs	r6, #7
 800163c:	e787      	b.n	800154e <HAL_GPIO_DeInit+0x12>
 800163e:	2608      	movs	r6, #8
 8001640:	e785      	b.n	800154e <HAL_GPIO_DeInit+0x12>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001642:	4c10      	ldr	r4, [pc, #64]	; (8001684 <HAL_GPIO_DeInit+0x148>)
 8001644:	6825      	ldr	r5, [r4, #0]
 8001646:	ea25 0507 	bic.w	r5, r5, r7
 800164a:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800164c:	6865      	ldr	r5, [r4, #4]
 800164e:	ea25 0507 	bic.w	r5, r5, r7
 8001652:	6065      	str	r5, [r4, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001654:	68a5      	ldr	r5, [r4, #8]
 8001656:	ea25 0507 	bic.w	r5, r5, r7
 800165a:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800165c:	68e5      	ldr	r5, [r4, #12]
 800165e:	ea25 0707 	bic.w	r7, r5, r7
 8001662:	60e7      	str	r7, [r4, #12]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8001664:	4d05      	ldr	r5, [pc, #20]	; (800167c <HAL_GPIO_DeInit+0x140>)
 8001666:	f10c 0402 	add.w	r4, ip, #2
 800166a:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 800166e:	ea26 060e 	bic.w	r6, r6, lr
 8001672:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
 8001676:	e76e      	b.n	8001556 <HAL_GPIO_DeInit+0x1a>
    }
  }
}
 8001678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800167a:	4770      	bx	lr
 800167c:	40013800 	.word	0x40013800
 8001680:	40020000 	.word	0x40020000
 8001684:	40013c00 	.word	0x40013c00

08001688 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001688:	6903      	ldr	r3, [r0, #16]
 800168a:	4219      	tst	r1, r3
 800168c:	d001      	beq.n	8001692 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800168e:	2001      	movs	r0, #1
 8001690:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001692:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001694:	4770      	bx	lr

08001696 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001696:	b10a      	cbz	r2, 800169c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001698:	6181      	str	r1, [r0, #24]
 800169a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800169c:	0409      	lsls	r1, r1, #16
 800169e:	6181      	str	r1, [r0, #24]
  }
}
 80016a0:	4770      	bx	lr
	...

080016a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016a4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	4203      	tst	r3, r0
 80016ac:	d100      	bne.n	80016b0 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80016ae:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016b0:	4b02      	ldr	r3, [pc, #8]	; (80016bc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80016b2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016b4:	f7fe ff80 	bl	80005b8 <HAL_GPIO_EXTI_Callback>
}
 80016b8:	e7f9      	b.n	80016ae <HAL_GPIO_EXTI_IRQHandler+0xa>
 80016ba:	bf00      	nop
 80016bc:	40013c00 	.word	0x40013c00

080016c0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80016c0:	6803      	ldr	r3, [r0, #0]
 80016c2:	699a      	ldr	r2, [r3, #24]
 80016c4:	f012 0f02 	tst.w	r2, #2
 80016c8:	d001      	beq.n	80016ce <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80016ca:	2200      	movs	r2, #0
 80016cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016ce:	6803      	ldr	r3, [r0, #0]
 80016d0:	699a      	ldr	r2, [r3, #24]
 80016d2:	f012 0f01 	tst.w	r2, #1
 80016d6:	d103      	bne.n	80016e0 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80016d8:	699a      	ldr	r2, [r3, #24]
 80016da:	f042 0201 	orr.w	r2, r2, #1
 80016de:	619a      	str	r2, [r3, #24]
  }
}
 80016e0:	4770      	bx	lr

080016e2 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80016e2:	b470      	push	{r4, r5, r6}
 80016e4:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80016e6:	6805      	ldr	r5, [r0, #0]
 80016e8:	6868      	ldr	r0, [r5, #4]
 80016ea:	0d74      	lsrs	r4, r6, #21
 80016ec:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80016f0:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80016f4:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80016f8:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80016fc:	f044 0403 	orr.w	r4, r4, #3
 8001700:	ea20 0004 	bic.w	r0, r0, r4
 8001704:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001708:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800170c:	4319      	orrs	r1, r3
 800170e:	4331      	orrs	r1, r6
 8001710:	4301      	orrs	r1, r0
 8001712:	6069      	str	r1, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001714:	bc70      	pop	{r4, r5, r6}
 8001716:	4770      	bx	lr

08001718 <I2C_IsAcknowledgeFailed>:
{
 8001718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800171a:	4605      	mov	r5, r0
 800171c:	460e      	mov	r6, r1
 800171e:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001720:	6803      	ldr	r3, [r0, #0]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f013 0f10 	tst.w	r3, #16
 8001728:	d101      	bne.n	800172e <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 800172a:	2000      	movs	r0, #0
}
 800172c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800172e:	682b      	ldr	r3, [r5, #0]
 8001730:	699c      	ldr	r4, [r3, #24]
 8001732:	f014 0f20 	tst.w	r4, #32
 8001736:	d117      	bne.n	8001768 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8001738:	f1b6 3fff 	cmp.w	r6, #4294967295
 800173c:	d0f7      	beq.n	800172e <I2C_IsAcknowledgeFailed+0x16>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800173e:	f7ff fcaf 	bl	80010a0 <HAL_GetTick>
 8001742:	1bc0      	subs	r0, r0, r7
 8001744:	42b0      	cmp	r0, r6
 8001746:	d801      	bhi.n	800174c <I2C_IsAcknowledgeFailed+0x34>
 8001748:	2e00      	cmp	r6, #0
 800174a:	d1f0      	bne.n	800172e <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800174c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800174e:	f043 0320 	orr.w	r3, r3, #32
 8001752:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001754:	2320      	movs	r3, #32
 8001756:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800175a:	2300      	movs	r3, #0
 800175c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8001760:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 8001764:	2001      	movs	r0, #1
 8001766:	e7e1      	b.n	800172c <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001768:	2210      	movs	r2, #16
 800176a:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800176c:	682b      	ldr	r3, [r5, #0]
 800176e:	2420      	movs	r4, #32
 8001770:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001772:	4628      	mov	r0, r5
 8001774:	f7ff ffa4 	bl	80016c0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001778:	682a      	ldr	r2, [r5, #0]
 800177a:	6853      	ldr	r3, [r2, #4]
 800177c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001780:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001784:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800178e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001796:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800179a:	2300      	movs	r3, #0
 800179c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80017a0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 80017a4:	2001      	movs	r0, #1
 80017a6:	e7c1      	b.n	800172c <I2C_IsAcknowledgeFailed+0x14>

080017a8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80017a8:	b570      	push	{r4, r5, r6, lr}
 80017aa:	4604      	mov	r4, r0
 80017ac:	460d      	mov	r5, r1
 80017ae:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017b0:	6823      	ldr	r3, [r4, #0]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f013 0f02 	tst.w	r3, #2
 80017b8:	d11d      	bne.n	80017f6 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80017ba:	4632      	mov	r2, r6
 80017bc:	4629      	mov	r1, r5
 80017be:	4620      	mov	r0, r4
 80017c0:	f7ff ffaa 	bl	8001718 <I2C_IsAcknowledgeFailed>
 80017c4:	b9c8      	cbnz	r0, 80017fa <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80017c6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80017ca:	d0f1      	beq.n	80017b0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017cc:	f7ff fc68 	bl	80010a0 <HAL_GetTick>
 80017d0:	1b80      	subs	r0, r0, r6
 80017d2:	42a8      	cmp	r0, r5
 80017d4:	d801      	bhi.n	80017da <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80017d6:	2d00      	cmp	r5, #0
 80017d8:	d1ea      	bne.n	80017b0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80017dc:	f043 0320 	orr.w	r3, r3, #32
 80017e0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017e2:	2320      	movs	r3, #32
 80017e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80017ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80017f2:	2001      	movs	r0, #1
 80017f4:	e000      	b.n	80017f8 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80017f6:	2000      	movs	r0, #0
}
 80017f8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80017fa:	2001      	movs	r0, #1
 80017fc:	e7fc      	b.n	80017f8 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080017fe <I2C_WaitOnFlagUntilTimeout>:
{
 80017fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001802:	4606      	mov	r6, r0
 8001804:	4688      	mov	r8, r1
 8001806:	4617      	mov	r7, r2
 8001808:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800180a:	6834      	ldr	r4, [r6, #0]
 800180c:	69a4      	ldr	r4, [r4, #24]
 800180e:	ea38 0304 	bics.w	r3, r8, r4
 8001812:	bf0c      	ite	eq
 8001814:	2401      	moveq	r4, #1
 8001816:	2400      	movne	r4, #0
 8001818:	42bc      	cmp	r4, r7
 800181a:	d118      	bne.n	800184e <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800181c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001820:	d0f3      	beq.n	800180a <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001822:	f7ff fc3d 	bl	80010a0 <HAL_GetTick>
 8001826:	9b06      	ldr	r3, [sp, #24]
 8001828:	1ac0      	subs	r0, r0, r3
 800182a:	42a8      	cmp	r0, r5
 800182c:	d801      	bhi.n	8001832 <I2C_WaitOnFlagUntilTimeout+0x34>
 800182e:	2d00      	cmp	r5, #0
 8001830:	d1eb      	bne.n	800180a <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001832:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8001834:	f043 0320 	orr.w	r3, r3, #32
 8001838:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800183a:	2320      	movs	r3, #32
 800183c:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001840:	2300      	movs	r3, #0
 8001842:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001846:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800184a:	2001      	movs	r0, #1
 800184c:	e000      	b.n	8001850 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 800184e:	2000      	movs	r0, #0
}
 8001850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001854 <I2C_RequestMemoryWrite>:
{
 8001854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	4604      	mov	r4, r0
 800185c:	4690      	mov	r8, r2
 800185e:	461d      	mov	r5, r3
 8001860:	9e08      	ldr	r6, [sp, #32]
 8001862:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <I2C_RequestMemoryWrite+0x78>)
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800186c:	b2ea      	uxtb	r2, r5
 800186e:	f7ff ff38 	bl	80016e2 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001872:	463a      	mov	r2, r7
 8001874:	4631      	mov	r1, r6
 8001876:	4620      	mov	r0, r4
 8001878:	f7ff ff96 	bl	80017a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800187c:	b9f8      	cbnz	r0, 80018be <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800187e:	2d01      	cmp	r5, #1
 8001880:	d10e      	bne.n	80018a0 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001882:	6823      	ldr	r3, [r4, #0]
 8001884:	fa5f f288 	uxtb.w	r2, r8
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800188a:	9700      	str	r7, [sp, #0]
 800188c:	4633      	mov	r3, r6
 800188e:	2200      	movs	r2, #0
 8001890:	2180      	movs	r1, #128	; 0x80
 8001892:	4620      	mov	r0, r4
 8001894:	f7ff ffb3 	bl	80017fe <I2C_WaitOnFlagUntilTimeout>
 8001898:	b9a8      	cbnz	r0, 80018c6 <I2C_RequestMemoryWrite+0x72>
}
 800189a:	b002      	add	sp, #8
 800189c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80018a6:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018a8:	463a      	mov	r2, r7
 80018aa:	4631      	mov	r1, r6
 80018ac:	4620      	mov	r0, r4
 80018ae:	f7ff ff7b 	bl	80017a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80018b2:	b930      	cbnz	r0, 80018c2 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018b4:	6823      	ldr	r3, [r4, #0]
 80018b6:	fa5f f288 	uxtb.w	r2, r8
 80018ba:	629a      	str	r2, [r3, #40]	; 0x28
 80018bc:	e7e5      	b.n	800188a <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 80018be:	2001      	movs	r0, #1
 80018c0:	e7eb      	b.n	800189a <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 80018c2:	2001      	movs	r0, #1
 80018c4:	e7e9      	b.n	800189a <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 80018c6:	2001      	movs	r0, #1
 80018c8:	e7e7      	b.n	800189a <I2C_RequestMemoryWrite+0x46>
 80018ca:	bf00      	nop
 80018cc:	80002000 	.word	0x80002000

080018d0 <I2C_RequestMemoryRead>:
{
 80018d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	4604      	mov	r4, r0
 80018d8:	4690      	mov	r8, r2
 80018da:	461d      	mov	r5, r3
 80018dc:	9e08      	ldr	r6, [sp, #32]
 80018de:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80018e0:	4b18      	ldr	r3, [pc, #96]	; (8001944 <I2C_RequestMemoryRead+0x74>)
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	2300      	movs	r3, #0
 80018e6:	b2ea      	uxtb	r2, r5
 80018e8:	f7ff fefb 	bl	80016e2 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018ec:	463a      	mov	r2, r7
 80018ee:	4631      	mov	r1, r6
 80018f0:	4620      	mov	r0, r4
 80018f2:	f7ff ff59 	bl	80017a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80018f6:	b9f8      	cbnz	r0, 8001938 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018f8:	2d01      	cmp	r5, #1
 80018fa:	d10e      	bne.n	800191a <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018fc:	6823      	ldr	r3, [r4, #0]
 80018fe:	fa5f f288 	uxtb.w	r2, r8
 8001902:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001904:	9700      	str	r7, [sp, #0]
 8001906:	4633      	mov	r3, r6
 8001908:	2200      	movs	r2, #0
 800190a:	2140      	movs	r1, #64	; 0x40
 800190c:	4620      	mov	r0, r4
 800190e:	f7ff ff76 	bl	80017fe <I2C_WaitOnFlagUntilTimeout>
 8001912:	b9a8      	cbnz	r0, 8001940 <I2C_RequestMemoryRead+0x70>
}
 8001914:	b002      	add	sp, #8
 8001916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800191a:	6823      	ldr	r3, [r4, #0]
 800191c:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8001920:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001922:	463a      	mov	r2, r7
 8001924:	4631      	mov	r1, r6
 8001926:	4620      	mov	r0, r4
 8001928:	f7ff ff3e 	bl	80017a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800192c:	b930      	cbnz	r0, 800193c <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800192e:	6823      	ldr	r3, [r4, #0]
 8001930:	fa5f f288 	uxtb.w	r2, r8
 8001934:	629a      	str	r2, [r3, #40]	; 0x28
 8001936:	e7e5      	b.n	8001904 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8001938:	2001      	movs	r0, #1
 800193a:	e7eb      	b.n	8001914 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 800193c:	2001      	movs	r0, #1
 800193e:	e7e9      	b.n	8001914 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8001940:	2001      	movs	r0, #1
 8001942:	e7e7      	b.n	8001914 <I2C_RequestMemoryRead+0x44>
 8001944:	80002000 	.word	0x80002000

08001948 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001948:	b570      	push	{r4, r5, r6, lr}
 800194a:	4605      	mov	r5, r0
 800194c:	460c      	mov	r4, r1
 800194e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001950:	682b      	ldr	r3, [r5, #0]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f013 0f20 	tst.w	r3, #32
 8001958:	d11a      	bne.n	8001990 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800195a:	4632      	mov	r2, r6
 800195c:	4621      	mov	r1, r4
 800195e:	4628      	mov	r0, r5
 8001960:	f7ff feda 	bl	8001718 <I2C_IsAcknowledgeFailed>
 8001964:	b9b0      	cbnz	r0, 8001994 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001966:	f7ff fb9b 	bl	80010a0 <HAL_GetTick>
 800196a:	1b80      	subs	r0, r0, r6
 800196c:	42a0      	cmp	r0, r4
 800196e:	d801      	bhi.n	8001974 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8001970:	2c00      	cmp	r4, #0
 8001972:	d1ed      	bne.n	8001950 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001974:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001976:	f043 0320 	orr.w	r3, r3, #32
 800197a:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800197c:	2320      	movs	r3, #32
 800197e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001982:	2300      	movs	r3, #0
 8001984:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001988:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800198c:	2001      	movs	r0, #1
}
 800198e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001990:	2000      	movs	r0, #0
 8001992:	e7fc      	b.n	800198e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8001994:	2001      	movs	r0, #1
 8001996:	e7fa      	b.n	800198e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08001998 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001998:	2800      	cmp	r0, #0
 800199a:	d057      	beq.n	8001a4c <HAL_I2C_Init+0xb4>
{
 800199c:	b510      	push	{r4, lr}
 800199e:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019a0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d041      	beq.n	8001a2c <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80019a8:	2324      	movs	r3, #36	; 0x24
 80019aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80019ae:	6822      	ldr	r2, [r4, #0]
 80019b0:	6813      	ldr	r3, [r2, #0]
 80019b2:	f023 0301 	bic.w	r3, r3, #1
 80019b6:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019b8:	6863      	ldr	r3, [r4, #4]
 80019ba:	6822      	ldr	r2, [r4, #0]
 80019bc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80019c0:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019c2:	6822      	ldr	r2, [r4, #0]
 80019c4:	6893      	ldr	r3, [r2, #8]
 80019c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80019ca:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019cc:	68e3      	ldr	r3, [r4, #12]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d031      	beq.n	8001a36 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019d2:	68a3      	ldr	r3, [r4, #8]
 80019d4:	6822      	ldr	r2, [r4, #0]
 80019d6:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80019da:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019dc:	68e3      	ldr	r3, [r4, #12]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d02f      	beq.n	8001a42 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019e2:	6822      	ldr	r2, [r4, #0]
 80019e4:	6851      	ldr	r1, [r2, #4]
 80019e6:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <HAL_I2C_Init+0xb8>)
 80019e8:	430b      	orrs	r3, r1
 80019ea:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019ec:	6822      	ldr	r2, [r4, #0]
 80019ee:	68d3      	ldr	r3, [r2, #12]
 80019f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80019f4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80019f6:	6923      	ldr	r3, [r4, #16]
 80019f8:	6962      	ldr	r2, [r4, #20]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	69a1      	ldr	r1, [r4, #24]
 80019fe:	6822      	ldr	r2, [r4, #0]
 8001a00:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001a04:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a06:	69e3      	ldr	r3, [r4, #28]
 8001a08:	6a21      	ldr	r1, [r4, #32]
 8001a0a:	6822      	ldr	r2, [r4, #0]
 8001a0c:	430b      	orrs	r3, r1
 8001a0e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001a10:	6822      	ldr	r2, [r4, #0]
 8001a12:	6813      	ldr	r3, [r2, #0]
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a1e:	2320      	movs	r3, #32
 8001a20:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a24:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a26:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8001a2a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001a2c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001a30:	f7ff f9b8 	bl	8000da4 <HAL_I2C_MspInit>
 8001a34:	e7b8      	b.n	80019a8 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a36:	68a3      	ldr	r3, [r4, #8]
 8001a38:	6822      	ldr	r2, [r4, #0]
 8001a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a3e:	6093      	str	r3, [r2, #8]
 8001a40:	e7cc      	b.n	80019dc <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a42:	6823      	ldr	r3, [r4, #0]
 8001a44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	e7ca      	b.n	80019e2 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001a4c:	2001      	movs	r0, #1
}
 8001a4e:	4770      	bx	lr
 8001a50:	02008000 	.word	0x02008000

08001a54 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8001a54:	b1a8      	cbz	r0, 8001a82 <HAL_I2C_DeInit+0x2e>
{
 8001a56:	b510      	push	{r4, lr}
 8001a58:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a5a:	2324      	movs	r3, #36	; 0x24
 8001a5c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001a60:	6802      	ldr	r2, [r0, #0]
 8001a62:	6813      	ldr	r3, [r2, #0]
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8001a6a:	f7ff f9d3 	bl	8000e14 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a6e:	2000      	movs	r0, #0
 8001a70:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001a72:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a76:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a78:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 8001a7c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8001a80:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a82:	2001      	movs	r0, #1
}
 8001a84:	4770      	bx	lr

08001a86 <HAL_I2C_Mem_Write>:
{
 8001a86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	460d      	mov	r5, r1
 8001a8e:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8001a92:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a94:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8001a98:	b2c9      	uxtb	r1, r1
 8001a9a:	2920      	cmp	r1, #32
 8001a9c:	f040 80be 	bne.w	8001c1c <HAL_I2C_Mem_Write+0x196>
 8001aa0:	4604      	mov	r4, r0
 8001aa2:	4690      	mov	r8, r2
 8001aa4:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8001aa6:	faba f38a 	clz	r3, sl
 8001aaa:	095b      	lsrs	r3, r3, #5
 8001aac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001aae:	2a00      	cmp	r2, #0
 8001ab0:	bf08      	it	eq
 8001ab2:	2301      	moveq	r3, #1
 8001ab4:	b9b3      	cbnz	r3, 8001ae4 <HAL_I2C_Mem_Write+0x5e>
    __HAL_LOCK(hi2c);
 8001ab6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	f000 80b2 	beq.w	8001c24 <HAL_I2C_Mem_Write+0x19e>
 8001ac0:	f04f 0b01 	mov.w	fp, #1
 8001ac4:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001ac8:	f7ff faea 	bl	80010a0 <HAL_GetTick>
 8001acc:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ace:	9000      	str	r0, [sp, #0]
 8001ad0:	2319      	movs	r3, #25
 8001ad2:	465a      	mov	r2, fp
 8001ad4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ad8:	4620      	mov	r0, r4
 8001ada:	f7ff fe90 	bl	80017fe <I2C_WaitOnFlagUntilTimeout>
 8001ade:	b130      	cbz	r0, 8001aee <HAL_I2C_Mem_Write+0x68>
      return HAL_ERROR;
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	e09c      	b.n	8001c1e <HAL_I2C_Mem_Write+0x198>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ae8:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8001aea:	2001      	movs	r0, #1
 8001aec:	e097      	b.n	8001c1e <HAL_I2C_Mem_Write+0x198>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001aee:	2321      	movs	r3, #33	; 0x21
 8001af0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001af4:	2340      	movs	r3, #64	; 0x40
 8001af6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001afe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001b00:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b02:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b06:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b08:	9601      	str	r6, [sp, #4]
 8001b0a:	9700      	str	r7, [sp, #0]
 8001b0c:	464b      	mov	r3, r9
 8001b0e:	4642      	mov	r2, r8
 8001b10:	4629      	mov	r1, r5
 8001b12:	4620      	mov	r0, r4
 8001b14:	f7ff fe9e 	bl	8001854 <I2C_RequestMemoryWrite>
 8001b18:	b970      	cbnz	r0, 8001b38 <HAL_I2C_Mem_Write+0xb2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	2bff      	cmp	r3, #255	; 0xff
 8001b20:	d90f      	bls.n	8001b42 <HAL_I2C_Mem_Write+0xbc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b22:	22ff      	movs	r2, #255	; 0xff
 8001b24:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b26:	2300      	movs	r3, #0
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b2e:	4629      	mov	r1, r5
 8001b30:	4620      	mov	r0, r4
 8001b32:	f7ff fdd6 	bl	80016e2 <I2C_TransferConfig>
 8001b36:	e021      	b.n	8001b7c <HAL_I2C_Mem_Write+0xf6>
      __HAL_UNLOCK(hi2c);
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001b3e:	4658      	mov	r0, fp
 8001b40:	e06d      	b.n	8001c1e <HAL_I2C_Mem_Write+0x198>
      hi2c->XferSize = hi2c->XferCount;
 8001b42:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001b44:	b292      	uxth	r2, r2
 8001b46:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b48:	2300      	movs	r3, #0
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	4629      	mov	r1, r5
 8001b54:	4620      	mov	r0, r4
 8001b56:	f7ff fdc4 	bl	80016e2 <I2C_TransferConfig>
 8001b5a:	e00f      	b.n	8001b7c <HAL_I2C_Mem_Write+0xf6>
          hi2c->XferSize = hi2c->XferCount;
 8001b5c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001b5e:	b292      	uxth	r2, r2
 8001b60:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b62:	2300      	movs	r3, #0
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	4620      	mov	r0, r4
 8001b70:	f7ff fdb7 	bl	80016e2 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8001b74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d033      	beq.n	8001be4 <HAL_I2C_Mem_Write+0x15e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b7c:	4632      	mov	r2, r6
 8001b7e:	4639      	mov	r1, r7
 8001b80:	4620      	mov	r0, r4
 8001b82:	f7ff fe11 	bl	80017a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b86:	2800      	cmp	r0, #0
 8001b88:	d14e      	bne.n	8001c28 <HAL_I2C_Mem_Write+0x1a2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	7812      	ldrb	r2, [r2, #0]
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b94:	3301      	adds	r3, #1
 8001b96:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001b98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001ba2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001baa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001bac:	b292      	uxth	r2, r2
 8001bae:	2a00      	cmp	r2, #0
 8001bb0:	d0e0      	beq.n	8001b74 <HAL_I2C_Mem_Write+0xee>
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1de      	bne.n	8001b74 <HAL_I2C_Mem_Write+0xee>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bb6:	9600      	str	r6, [sp, #0]
 8001bb8:	463b      	mov	r3, r7
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2180      	movs	r1, #128	; 0x80
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f7ff fe1d 	bl	80017fe <I2C_WaitOnFlagUntilTimeout>
 8001bc4:	bb90      	cbnz	r0, 8001c2c <HAL_I2C_Mem_Write+0x1a6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bc6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	2bff      	cmp	r3, #255	; 0xff
 8001bcc:	d9c6      	bls.n	8001b5c <HAL_I2C_Mem_Write+0xd6>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bce:	22ff      	movs	r2, #255	; 0xff
 8001bd0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bda:	4629      	mov	r1, r5
 8001bdc:	4620      	mov	r0, r4
 8001bde:	f7ff fd80 	bl	80016e2 <I2C_TransferConfig>
 8001be2:	e7c7      	b.n	8001b74 <HAL_I2C_Mem_Write+0xee>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001be4:	4632      	mov	r2, r6
 8001be6:	4639      	mov	r1, r7
 8001be8:	4620      	mov	r0, r4
 8001bea:	f7ff fead 	bl	8001948 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bee:	b9f8      	cbnz	r0, 8001c30 <HAL_I2C_Mem_Write+0x1aa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bf0:	6823      	ldr	r3, [r4, #0]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001bf6:	6821      	ldr	r1, [r4, #0]
 8001bf8:	684b      	ldr	r3, [r1, #4]
 8001bfa:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001bfe:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001c02:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001c06:	f023 0301 	bic.w	r3, r3, #1
 8001c0a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001c0c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001c16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8001c1a:	e000      	b.n	8001c1e <HAL_I2C_Mem_Write+0x198>
    return HAL_BUSY;
 8001c1c:	2002      	movs	r0, #2
}
 8001c1e:	b003      	add	sp, #12
 8001c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001c24:	2002      	movs	r0, #2
 8001c26:	e7fa      	b.n	8001c1e <HAL_I2C_Mem_Write+0x198>
        return HAL_ERROR;
 8001c28:	2001      	movs	r0, #1
 8001c2a:	e7f8      	b.n	8001c1e <HAL_I2C_Mem_Write+0x198>
          return HAL_ERROR;
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	e7f6      	b.n	8001c1e <HAL_I2C_Mem_Write+0x198>
      return HAL_ERROR;
 8001c30:	2001      	movs	r0, #1
 8001c32:	e7f4      	b.n	8001c1e <HAL_I2C_Mem_Write+0x198>

08001c34 <HAL_I2C_Mem_Read>:
{
 8001c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	460d      	mov	r5, r1
 8001c3c:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8001c40:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c42:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8001c46:	b2c9      	uxtb	r1, r1
 8001c48:	2920      	cmp	r1, #32
 8001c4a:	f040 80bf 	bne.w	8001dcc <HAL_I2C_Mem_Read+0x198>
 8001c4e:	4604      	mov	r4, r0
 8001c50:	4690      	mov	r8, r2
 8001c52:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8001c54:	faba f38a 	clz	r3, sl
 8001c58:	095b      	lsrs	r3, r3, #5
 8001c5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001c5c:	2a00      	cmp	r2, #0
 8001c5e:	bf08      	it	eq
 8001c60:	2301      	moveq	r3, #1
 8001c62:	b9b3      	cbnz	r3, 8001c92 <HAL_I2C_Mem_Read+0x5e>
    __HAL_LOCK(hi2c);
 8001c64:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	f000 80b3 	beq.w	8001dd4 <HAL_I2C_Mem_Read+0x1a0>
 8001c6e:	f04f 0b01 	mov.w	fp, #1
 8001c72:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001c76:	f7ff fa13 	bl	80010a0 <HAL_GetTick>
 8001c7a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c7c:	9000      	str	r0, [sp, #0]
 8001c7e:	2319      	movs	r3, #25
 8001c80:	465a      	mov	r2, fp
 8001c82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c86:	4620      	mov	r0, r4
 8001c88:	f7ff fdb9 	bl	80017fe <I2C_WaitOnFlagUntilTimeout>
 8001c8c:	b130      	cbz	r0, 8001c9c <HAL_I2C_Mem_Read+0x68>
      return HAL_ERROR;
 8001c8e:	2001      	movs	r0, #1
 8001c90:	e09d      	b.n	8001dce <HAL_I2C_Mem_Read+0x19a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c96:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8001c98:	2001      	movs	r0, #1
 8001c9a:	e098      	b.n	8001dce <HAL_I2C_Mem_Read+0x19a>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c9c:	2322      	movs	r3, #34	; 0x22
 8001c9e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ca2:	2340      	movs	r3, #64	; 0x40
 8001ca4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001cac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001cae:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cb0:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cb4:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cb6:	9601      	str	r6, [sp, #4]
 8001cb8:	9700      	str	r7, [sp, #0]
 8001cba:	464b      	mov	r3, r9
 8001cbc:	4642      	mov	r2, r8
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	f7ff fe05 	bl	80018d0 <I2C_RequestMemoryRead>
 8001cc6:	b970      	cbnz	r0, 8001ce6 <HAL_I2C_Mem_Read+0xb2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cc8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	2bff      	cmp	r3, #255	; 0xff
 8001cce:	d90f      	bls.n	8001cf0 <HAL_I2C_Mem_Read+0xbc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cd0:	22ff      	movs	r2, #255	; 0xff
 8001cd2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001cd4:	4b43      	ldr	r3, [pc, #268]	; (8001de4 <HAL_I2C_Mem_Read+0x1b0>)
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cdc:	4629      	mov	r1, r5
 8001cde:	4620      	mov	r0, r4
 8001ce0:	f7ff fcff 	bl	80016e2 <I2C_TransferConfig>
 8001ce4:	e021      	b.n	8001d2a <HAL_I2C_Mem_Read+0xf6>
      __HAL_UNLOCK(hi2c);
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001cec:	4658      	mov	r0, fp
 8001cee:	e06e      	b.n	8001dce <HAL_I2C_Mem_Read+0x19a>
      hi2c->XferSize = hi2c->XferCount;
 8001cf0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001cf2:	b292      	uxth	r2, r2
 8001cf4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001cf6:	4b3b      	ldr	r3, [pc, #236]	; (8001de4 <HAL_I2C_Mem_Read+0x1b0>)
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	4629      	mov	r1, r5
 8001d02:	4620      	mov	r0, r4
 8001d04:	f7ff fced 	bl	80016e2 <I2C_TransferConfig>
 8001d08:	e00f      	b.n	8001d2a <HAL_I2C_Mem_Read+0xf6>
          hi2c->XferSize = hi2c->XferCount;
 8001d0a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001d0c:	b292      	uxth	r2, r2
 8001d0e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d10:	2300      	movs	r3, #0
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	4629      	mov	r1, r5
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	f7ff fce0 	bl	80016e2 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8001d22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d034      	beq.n	8001d94 <HAL_I2C_Mem_Read+0x160>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001d2a:	9600      	str	r6, [sp, #0]
 8001d2c:	463b      	mov	r3, r7
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2104      	movs	r1, #4
 8001d32:	4620      	mov	r0, r4
 8001d34:	f7ff fd63 	bl	80017fe <I2C_WaitOnFlagUntilTimeout>
 8001d38:	2800      	cmp	r0, #0
 8001d3a:	d14d      	bne.n	8001dd8 <HAL_I2C_Mem_Read+0x1a4>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d3c:	6823      	ldr	r3, [r4, #0]
 8001d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d42:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001d44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d46:	3301      	adds	r3, #1
 8001d48:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001d4a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001d4c:	3a01      	subs	r2, #1
 8001d4e:	b292      	uxth	r2, r2
 8001d50:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001d52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	3b01      	subs	r3, #1
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d5c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0de      	beq.n	8001d22 <HAL_I2C_Mem_Read+0xee>
 8001d64:	2a00      	cmp	r2, #0
 8001d66:	d1dc      	bne.n	8001d22 <HAL_I2C_Mem_Read+0xee>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d68:	9600      	str	r6, [sp, #0]
 8001d6a:	463b      	mov	r3, r7
 8001d6c:	2180      	movs	r1, #128	; 0x80
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f7ff fd45 	bl	80017fe <I2C_WaitOnFlagUntilTimeout>
 8001d74:	bb90      	cbnz	r0, 8001ddc <HAL_I2C_Mem_Read+0x1a8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	2bff      	cmp	r3, #255	; 0xff
 8001d7c:	d9c5      	bls.n	8001d0a <HAL_I2C_Mem_Read+0xd6>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d7e:	22ff      	movs	r2, #255	; 0xff
 8001d80:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d82:	2300      	movs	r3, #0
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	f7ff fca8 	bl	80016e2 <I2C_TransferConfig>
 8001d92:	e7c6      	b.n	8001d22 <HAL_I2C_Mem_Read+0xee>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d94:	4632      	mov	r2, r6
 8001d96:	4639      	mov	r1, r7
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f7ff fdd5 	bl	8001948 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d9e:	b9f8      	cbnz	r0, 8001de0 <HAL_I2C_Mem_Read+0x1ac>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001da0:	6823      	ldr	r3, [r4, #0]
 8001da2:	2220      	movs	r2, #32
 8001da4:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001da6:	6821      	ldr	r1, [r4, #0]
 8001da8:	684b      	ldr	r3, [r1, #4]
 8001daa:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001dae:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001db2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001db6:	f023 0301 	bic.w	r3, r3, #1
 8001dba:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001dbc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001dc6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8001dca:	e000      	b.n	8001dce <HAL_I2C_Mem_Read+0x19a>
    return HAL_BUSY;
 8001dcc:	2002      	movs	r0, #2
}
 8001dce:	b003      	add	sp, #12
 8001dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001dd4:	2002      	movs	r0, #2
 8001dd6:	e7fa      	b.n	8001dce <HAL_I2C_Mem_Read+0x19a>
        return HAL_ERROR;
 8001dd8:	2001      	movs	r0, #1
 8001dda:	e7f8      	b.n	8001dce <HAL_I2C_Mem_Read+0x19a>
          return HAL_ERROR;
 8001ddc:	2001      	movs	r0, #1
 8001dde:	e7f6      	b.n	8001dce <HAL_I2C_Mem_Read+0x19a>
      return HAL_ERROR;
 8001de0:	2001      	movs	r0, #1
 8001de2:	e7f4      	b.n	8001dce <HAL_I2C_Mem_Read+0x19a>
 8001de4:	80002400 	.word	0x80002400

08001de8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b20      	cmp	r3, #32
 8001df0:	d124      	bne.n	8001e3c <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001df2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d022      	beq.n	8001e40 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e00:	2324      	movs	r3, #36	; 0x24
 8001e02:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e06:	6802      	ldr	r2, [r0, #0]
 8001e08:	6813      	ldr	r3, [r2, #0]
 8001e0a:	f023 0301 	bic.w	r3, r3, #1
 8001e0e:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e10:	6802      	ldr	r2, [r0, #0]
 8001e12:	6813      	ldr	r3, [r2, #0]
 8001e14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e18:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e1a:	6802      	ldr	r2, [r0, #0]
 8001e1c:	6813      	ldr	r3, [r2, #0]
 8001e1e:	4319      	orrs	r1, r3
 8001e20:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e22:	6802      	ldr	r2, [r0, #0]
 8001e24:	6813      	ldr	r3, [r2, #0]
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e2c:	2320      	movs	r3, #32
 8001e2e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e32:	2300      	movs	r3, #0
 8001e34:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001e38:	4618      	mov	r0, r3
 8001e3a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001e3c:	2002      	movs	r0, #2
 8001e3e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001e40:	2002      	movs	r0, #2
  }
}
 8001e42:	4770      	bx	lr

08001e44 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e44:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b20      	cmp	r3, #32
 8001e4c:	d122      	bne.n	8001e94 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e4e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d020      	beq.n	8001e98 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8001e56:	2301      	movs	r3, #1
 8001e58:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e5c:	2324      	movs	r3, #36	; 0x24
 8001e5e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e62:	6802      	ldr	r2, [r0, #0]
 8001e64:	6813      	ldr	r3, [r2, #0]
 8001e66:	f023 0301 	bic.w	r3, r3, #1
 8001e6a:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e6c:	6802      	ldr	r2, [r0, #0]
 8001e6e:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e74:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e78:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e7a:	6802      	ldr	r2, [r0, #0]
 8001e7c:	6813      	ldr	r3, [r2, #0]
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e84:	2320      	movs	r3, #32
 8001e86:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001e90:	4618      	mov	r0, r3
 8001e92:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001e94:	2002      	movs	r0, #2
 8001e96:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001e98:	2002      	movs	r0, #2
  }
}
 8001e9a:	4770      	bx	lr

08001e9c <HAL_LTDC_ErrorCallback>:
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8001e9c:	4770      	bx	lr

08001e9e <HAL_LTDC_ReloadEventCallback>:
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_LTDC_IRQHandler>:
{
 8001ea0:	b570      	push	{r4, r5, r6, lr}
 8001ea2:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001ea4:	6803      	ldr	r3, [r0, #0]
 8001ea6:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8001ea8:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8001eaa:	f015 0f04 	tst.w	r5, #4
 8001eae:	d002      	beq.n	8001eb6 <HAL_LTDC_IRQHandler+0x16>
 8001eb0:	f016 0f04 	tst.w	r6, #4
 8001eb4:	d112      	bne.n	8001edc <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8001eb6:	f015 0f02 	tst.w	r5, #2
 8001eba:	d002      	beq.n	8001ec2 <HAL_LTDC_IRQHandler+0x22>
 8001ebc:	f016 0f02 	tst.w	r6, #2
 8001ec0:	d121      	bne.n	8001f06 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8001ec2:	f015 0f01 	tst.w	r5, #1
 8001ec6:	d002      	beq.n	8001ece <HAL_LTDC_IRQHandler+0x2e>
 8001ec8:	f016 0f01 	tst.w	r6, #1
 8001ecc:	d132      	bne.n	8001f34 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8001ece:	f015 0f08 	tst.w	r5, #8
 8001ed2:	d002      	beq.n	8001eda <HAL_LTDC_IRQHandler+0x3a>
 8001ed4:	f016 0f08 	tst.w	r6, #8
 8001ed8:	d13d      	bne.n	8001f56 <HAL_LTDC_IRQHandler+0xb6>
}
 8001eda:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8001edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ede:	f022 0204 	bic.w	r2, r2, #4
 8001ee2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8001ee4:	6803      	ldr	r3, [r0, #0]
 8001ee6:	2204      	movs	r2, #4
 8001ee8:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8001eea:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001ef6:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001efa:	2300      	movs	r3, #0
 8001efc:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8001f00:	f7ff ffcc 	bl	8001e9c <HAL_LTDC_ErrorCallback>
 8001f04:	e7d7      	b.n	8001eb6 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8001f06:	6822      	ldr	r2, [r4, #0]
 8001f08:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001f0a:	f023 0302 	bic.w	r3, r3, #2
 8001f0e:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	2202      	movs	r2, #2
 8001f14:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8001f16:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001f20:	2304      	movs	r3, #4
 8001f22:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001f26:	2300      	movs	r3, #0
 8001f28:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	f7ff ffb5 	bl	8001e9c <HAL_LTDC_ErrorCallback>
 8001f32:	e7c6      	b.n	8001ec2 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001f34:	6822      	ldr	r2, [r4, #0]
 8001f36:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001f38:	f023 0301 	bic.w	r3, r3, #1
 8001f3c:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8001f3e:	6822      	ldr	r2, [r4, #0]
 8001f40:	2301      	movs	r3, #1
 8001f42:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8001f44:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8001f4e:	4620      	mov	r0, r4
 8001f50:	f002 fe24 	bl	8004b9c <HAL_LTDC_LineEventCallback>
 8001f54:	e7bb      	b.n	8001ece <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8001f56:	6822      	ldr	r2, [r4, #0]
 8001f58:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001f5a:	f023 0308 	bic.w	r3, r3, #8
 8001f5e:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8001f60:	6823      	ldr	r3, [r4, #0]
 8001f62:	2208      	movs	r2, #8
 8001f64:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8001f66:	2301      	movs	r3, #1
 8001f68:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8001f72:	4620      	mov	r0, r4
 8001f74:	f7ff ff93 	bl	8001e9e <HAL_LTDC_ReloadEventCallback>
}
 8001f78:	e7af      	b.n	8001eda <HAL_LTDC_IRQHandler+0x3a>
	...

08001f7c <HAL_LTDC_ProgramLineEvent>:
{
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8001f7c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d01a      	beq.n	8001fba <HAL_LTDC_ProgramLineEvent+0x3e>
{
 8001f84:	b410      	push	{r4}
  __HAL_LOCK(hltdc);
 8001f86:	2201      	movs	r2, #1
 8001f88:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001f92:	6804      	ldr	r4, [r0, #0]
 8001f94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f96:	f023 0301 	bic.w	r3, r3, #1
 8001f9a:	6363      	str	r3, [r4, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8001f9c:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <HAL_LTDC_ProgramLineEvent+0x44>)
 8001f9e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8001fa0:	6801      	ldr	r1, [r0, #0]
 8001fa2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	634b      	str	r3, [r1, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001fa8:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001fac:	2300      	movs	r3, #0
 8001fae:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0

  return HAL_OK;
 8001fb2:	4618      	mov	r0, r3
}
 8001fb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fb8:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8001fba:	2002      	movs	r0, #2
}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40016800 	.word	0x40016800

08001fc4 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fc4:	2800      	cmp	r0, #0
 8001fc6:	f000 81ff 	beq.w	80023c8 <HAL_RCC_OscConfig+0x404>
{
 8001fca:	b570      	push	{r4, r5, r6, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd0:	6803      	ldr	r3, [r0, #0]
 8001fd2:	f013 0f01 	tst.w	r3, #1
 8001fd6:	d029      	beq.n	800202c <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fd8:	4ba7      	ldr	r3, [pc, #668]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 030c 	and.w	r3, r3, #12
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d01a      	beq.n	800201a <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fe4:	4ba4      	ldr	r3, [pc, #656]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d00f      	beq.n	8002010 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff0:	6863      	ldr	r3, [r4, #4]
 8001ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff6:	d040      	beq.n	800207a <HAL_RCC_OscConfig+0xb6>
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d154      	bne.n	80020a6 <HAL_RCC_OscConfig+0xe2>
 8001ffc:	4b9e      	ldr	r3, [pc, #632]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	e039      	b.n	8002084 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002010:	4b99      	ldr	r3, [pc, #612]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002018:	d0ea      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201a:	4b97      	ldr	r3, [pc, #604]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002022:	d003      	beq.n	800202c <HAL_RCC_OscConfig+0x68>
 8002024:	6863      	ldr	r3, [r4, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 81d0 	beq.w	80023cc <HAL_RCC_OscConfig+0x408>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	f013 0f02 	tst.w	r3, #2
 8002032:	d074      	beq.n	800211e <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002034:	4b90      	ldr	r3, [pc, #576]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f013 0f0c 	tst.w	r3, #12
 800203c:	d05e      	beq.n	80020fc <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800203e:	4b8e      	ldr	r3, [pc, #568]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b08      	cmp	r3, #8
 8002048:	d053      	beq.n	80020f2 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800204a:	68e3      	ldr	r3, [r4, #12]
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 8089 	beq.w	8002164 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002052:	4a89      	ldr	r2, [pc, #548]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 8002054:	6813      	ldr	r3, [r2, #0]
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205c:	f7ff f820 	bl	80010a0 <HAL_GetTick>
 8002060:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002062:	4b85      	ldr	r3, [pc, #532]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f013 0f02 	tst.w	r3, #2
 800206a:	d172      	bne.n	8002152 <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800206c:	f7ff f818 	bl	80010a0 <HAL_GetTick>
 8002070:	1b40      	subs	r0, r0, r5
 8002072:	2802      	cmp	r0, #2
 8002074:	d9f5      	bls.n	8002062 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8002076:	2003      	movs	r0, #3
 8002078:	e1ad      	b.n	80023d6 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800207a:	4a7f      	ldr	r2, [pc, #508]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 800207c:	6813      	ldr	r3, [r2, #0]
 800207e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002082:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002084:	6863      	ldr	r3, [r4, #4]
 8002086:	b32b      	cbz	r3, 80020d4 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8002088:	f7ff f80a 	bl	80010a0 <HAL_GetTick>
 800208c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	4b7a      	ldr	r3, [pc, #488]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002096:	d1c9      	bne.n	800202c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002098:	f7ff f802 	bl	80010a0 <HAL_GetTick>
 800209c:	1b40      	subs	r0, r0, r5
 800209e:	2864      	cmp	r0, #100	; 0x64
 80020a0:	d9f5      	bls.n	800208e <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80020a2:	2003      	movs	r0, #3
 80020a4:	e197      	b.n	80023d6 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020aa:	d009      	beq.n	80020c0 <HAL_RCC_OscConfig+0xfc>
 80020ac:	4b72      	ldr	r3, [pc, #456]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	e7e1      	b.n	8002084 <HAL_RCC_OscConfig+0xc0>
 80020c0:	4b6d      	ldr	r3, [pc, #436]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e7d7      	b.n	8002084 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 80020d4:	f7fe ffe4 	bl	80010a0 <HAL_GetTick>
 80020d8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020da:	4b67      	ldr	r3, [pc, #412]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020e2:	d0a3      	beq.n	800202c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e4:	f7fe ffdc 	bl	80010a0 <HAL_GetTick>
 80020e8:	1b40      	subs	r0, r0, r5
 80020ea:	2864      	cmp	r0, #100	; 0x64
 80020ec:	d9f5      	bls.n	80020da <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 80020ee:	2003      	movs	r0, #3
 80020f0:	e171      	b.n	80023d6 <HAL_RCC_OscConfig+0x412>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020f2:	4b61      	ldr	r3, [pc, #388]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80020fa:	d1a6      	bne.n	800204a <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fc:	4b5e      	ldr	r3, [pc, #376]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f013 0f02 	tst.w	r3, #2
 8002104:	d003      	beq.n	800210e <HAL_RCC_OscConfig+0x14a>
 8002106:	68e3      	ldr	r3, [r4, #12]
 8002108:	2b01      	cmp	r3, #1
 800210a:	f040 8161 	bne.w	80023d0 <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210e:	4a5a      	ldr	r2, [pc, #360]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 8002110:	6813      	ldr	r3, [r2, #0]
 8002112:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002116:	6921      	ldr	r1, [r4, #16]
 8002118:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800211c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800211e:	6823      	ldr	r3, [r4, #0]
 8002120:	f013 0f08 	tst.w	r3, #8
 8002124:	d046      	beq.n	80021b4 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002126:	6963      	ldr	r3, [r4, #20]
 8002128:	b383      	cbz	r3, 800218c <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800212a:	4a53      	ldr	r2, [pc, #332]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 800212c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002134:	f7fe ffb4 	bl	80010a0 <HAL_GetTick>
 8002138:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800213a:	4b4f      	ldr	r3, [pc, #316]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 800213c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213e:	f013 0f02 	tst.w	r3, #2
 8002142:	d137      	bne.n	80021b4 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002144:	f7fe ffac 	bl	80010a0 <HAL_GetTick>
 8002148:	1b40      	subs	r0, r0, r5
 800214a:	2802      	cmp	r0, #2
 800214c:	d9f5      	bls.n	800213a <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 800214e:	2003      	movs	r0, #3
 8002150:	e141      	b.n	80023d6 <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002152:	4a49      	ldr	r2, [pc, #292]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 8002154:	6813      	ldr	r3, [r2, #0]
 8002156:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800215a:	6921      	ldr	r1, [r4, #16]
 800215c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	e7dc      	b.n	800211e <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8002164:	4a44      	ldr	r2, [pc, #272]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 8002166:	6813      	ldr	r3, [r2, #0]
 8002168:	f023 0301 	bic.w	r3, r3, #1
 800216c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800216e:	f7fe ff97 	bl	80010a0 <HAL_GetTick>
 8002172:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002174:	4b40      	ldr	r3, [pc, #256]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f013 0f02 	tst.w	r3, #2
 800217c:	d0cf      	beq.n	800211e <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800217e:	f7fe ff8f 	bl	80010a0 <HAL_GetTick>
 8002182:	1b40      	subs	r0, r0, r5
 8002184:	2802      	cmp	r0, #2
 8002186:	d9f5      	bls.n	8002174 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8002188:	2003      	movs	r0, #3
 800218a:	e124      	b.n	80023d6 <HAL_RCC_OscConfig+0x412>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800218c:	4a3a      	ldr	r2, [pc, #232]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 800218e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002196:	f7fe ff83 	bl	80010a0 <HAL_GetTick>
 800219a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219c:	4b36      	ldr	r3, [pc, #216]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 800219e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021a0:	f013 0f02 	tst.w	r3, #2
 80021a4:	d006      	beq.n	80021b4 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a6:	f7fe ff7b 	bl	80010a0 <HAL_GetTick>
 80021aa:	1b40      	subs	r0, r0, r5
 80021ac:	2802      	cmp	r0, #2
 80021ae:	d9f5      	bls.n	800219c <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 80021b0:	2003      	movs	r0, #3
 80021b2:	e110      	b.n	80023d6 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	f013 0f04 	tst.w	r3, #4
 80021ba:	d07d      	beq.n	80022b8 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021bc:	4b2e      	ldr	r3, [pc, #184]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80021c4:	d10b      	bne.n	80021de <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c6:	4b2c      	ldr	r3, [pc, #176]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 80021c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021ce:	641a      	str	r2, [r3, #64]	; 0x40
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	9301      	str	r3, [sp, #4]
 80021d8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80021da:	2501      	movs	r5, #1
 80021dc:	e000      	b.n	80021e0 <HAL_RCC_OscConfig+0x21c>
  FlagStatus pwrclkchanged = RESET;
 80021de:	2500      	movs	r5, #0
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e0:	4b26      	ldr	r3, [pc, #152]	; (800227c <HAL_RCC_OscConfig+0x2b8>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80021e8:	d00e      	beq.n	8002208 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ea:	68a3      	ldr	r3, [r4, #8]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d01f      	beq.n	8002230 <HAL_RCC_OscConfig+0x26c>
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d135      	bne.n	8002260 <HAL_RCC_OscConfig+0x29c>
 80021f4:	4b20      	ldr	r3, [pc, #128]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 80021f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021f8:	f022 0201 	bic.w	r2, r2, #1
 80021fc:	671a      	str	r2, [r3, #112]	; 0x70
 80021fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002200:	f022 0204 	bic.w	r2, r2, #4
 8002204:	671a      	str	r2, [r3, #112]	; 0x70
 8002206:	e018      	b.n	800223a <HAL_RCC_OscConfig+0x276>
      PWR->CR1 |= PWR_CR1_DBP;
 8002208:	4a1c      	ldr	r2, [pc, #112]	; (800227c <HAL_RCC_OscConfig+0x2b8>)
 800220a:	6813      	ldr	r3, [r2, #0]
 800220c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002210:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002212:	f7fe ff45 	bl	80010a0 <HAL_GetTick>
 8002216:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002218:	4b18      	ldr	r3, [pc, #96]	; (800227c <HAL_RCC_OscConfig+0x2b8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002220:	d1e3      	bne.n	80021ea <HAL_RCC_OscConfig+0x226>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002222:	f7fe ff3d 	bl	80010a0 <HAL_GetTick>
 8002226:	1b80      	subs	r0, r0, r6
 8002228:	2864      	cmp	r0, #100	; 0x64
 800222a:	d9f5      	bls.n	8002218 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 800222c:	2003      	movs	r0, #3
 800222e:	e0d2      	b.n	80023d6 <HAL_RCC_OscConfig+0x412>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002230:	4a11      	ldr	r2, [pc, #68]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 8002232:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800223a:	68a3      	ldr	r3, [r4, #8]
 800223c:	b353      	cbz	r3, 8002294 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223e:	f7fe ff2f 	bl	80010a0 <HAL_GetTick>
 8002242:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 8002246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002248:	f013 0f02 	tst.w	r3, #2
 800224c:	d133      	bne.n	80022b6 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224e:	f7fe ff27 	bl	80010a0 <HAL_GetTick>
 8002252:	1b80      	subs	r0, r0, r6
 8002254:	f241 3388 	movw	r3, #5000	; 0x1388
 8002258:	4298      	cmp	r0, r3
 800225a:	d9f3      	bls.n	8002244 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800225c:	2003      	movs	r0, #3
 800225e:	e0ba      	b.n	80023d6 <HAL_RCC_OscConfig+0x412>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002260:	2b05      	cmp	r3, #5
 8002262:	d00d      	beq.n	8002280 <HAL_RCC_OscConfig+0x2bc>
 8002264:	4b04      	ldr	r3, [pc, #16]	; (8002278 <HAL_RCC_OscConfig+0x2b4>)
 8002266:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002268:	f022 0201 	bic.w	r2, r2, #1
 800226c:	671a      	str	r2, [r3, #112]	; 0x70
 800226e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002270:	f022 0204 	bic.w	r2, r2, #4
 8002274:	671a      	str	r2, [r3, #112]	; 0x70
 8002276:	e7e0      	b.n	800223a <HAL_RCC_OscConfig+0x276>
 8002278:	40023800 	.word	0x40023800
 800227c:	40007000 	.word	0x40007000
 8002280:	4b5c      	ldr	r3, [pc, #368]	; (80023f4 <HAL_RCC_OscConfig+0x430>)
 8002282:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002284:	f042 0204 	orr.w	r2, r2, #4
 8002288:	671a      	str	r2, [r3, #112]	; 0x70
 800228a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800228c:	f042 0201 	orr.w	r2, r2, #1
 8002290:	671a      	str	r2, [r3, #112]	; 0x70
 8002292:	e7d2      	b.n	800223a <HAL_RCC_OscConfig+0x276>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002294:	f7fe ff04 	bl	80010a0 <HAL_GetTick>
 8002298:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229a:	4b56      	ldr	r3, [pc, #344]	; (80023f4 <HAL_RCC_OscConfig+0x430>)
 800229c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229e:	f013 0f02 	tst.w	r3, #2
 80022a2:	d008      	beq.n	80022b6 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a4:	f7fe fefc 	bl	80010a0 <HAL_GetTick>
 80022a8:	1b80      	subs	r0, r0, r6
 80022aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80022ae:	4298      	cmp	r0, r3
 80022b0:	d9f3      	bls.n	800229a <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 80022b2:	2003      	movs	r0, #3
 80022b4:	e08f      	b.n	80023d6 <HAL_RCC_OscConfig+0x412>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022b6:	b9fd      	cbnz	r5, 80022f8 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022b8:	69a3      	ldr	r3, [r4, #24]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 808a 	beq.w	80023d4 <HAL_RCC_OscConfig+0x410>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c0:	4a4c      	ldr	r2, [pc, #304]	; (80023f4 <HAL_RCC_OscConfig+0x430>)
 80022c2:	6892      	ldr	r2, [r2, #8]
 80022c4:	f002 020c 	and.w	r2, r2, #12
 80022c8:	2a08      	cmp	r2, #8
 80022ca:	d058      	beq.n	800237e <HAL_RCC_OscConfig+0x3ba>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d019      	beq.n	8002304 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d0:	4a48      	ldr	r2, [pc, #288]	; (80023f4 <HAL_RCC_OscConfig+0x430>)
 80022d2:	6813      	ldr	r3, [r2, #0]
 80022d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022da:	f7fe fee1 	bl	80010a0 <HAL_GetTick>
 80022de:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e0:	4b44      	ldr	r3, [pc, #272]	; (80023f4 <HAL_RCC_OscConfig+0x430>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80022e8:	d047      	beq.n	800237a <HAL_RCC_OscConfig+0x3b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ea:	f7fe fed9 	bl	80010a0 <HAL_GetTick>
 80022ee:	1b00      	subs	r0, r0, r4
 80022f0:	2802      	cmp	r0, #2
 80022f2:	d9f5      	bls.n	80022e0 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80022f4:	2003      	movs	r0, #3
 80022f6:	e06e      	b.n	80023d6 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f8:	4a3e      	ldr	r2, [pc, #248]	; (80023f4 <HAL_RCC_OscConfig+0x430>)
 80022fa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80022fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002300:	6413      	str	r3, [r2, #64]	; 0x40
 8002302:	e7d9      	b.n	80022b8 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8002304:	4a3b      	ldr	r2, [pc, #236]	; (80023f4 <HAL_RCC_OscConfig+0x430>)
 8002306:	6813      	ldr	r3, [r2, #0]
 8002308:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800230c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800230e:	f7fe fec7 	bl	80010a0 <HAL_GetTick>
 8002312:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002314:	4b37      	ldr	r3, [pc, #220]	; (80023f4 <HAL_RCC_OscConfig+0x430>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800231c:	d006      	beq.n	800232c <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231e:	f7fe febf 	bl	80010a0 <HAL_GetTick>
 8002322:	1b40      	subs	r0, r0, r5
 8002324:	2802      	cmp	r0, #2
 8002326:	d9f5      	bls.n	8002314 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8002328:	2003      	movs	r0, #3
 800232a:	e054      	b.n	80023d6 <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800232c:	69e3      	ldr	r3, [r4, #28]
 800232e:	6a22      	ldr	r2, [r4, #32]
 8002330:	4313      	orrs	r3, r2
 8002332:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002334:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002338:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800233a:	0852      	lsrs	r2, r2, #1
 800233c:	3a01      	subs	r2, #1
 800233e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002342:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002344:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002348:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800234c:	4a29      	ldr	r2, [pc, #164]	; (80023f4 <HAL_RCC_OscConfig+0x430>)
 800234e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002350:	6813      	ldr	r3, [r2, #0]
 8002352:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002356:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002358:	f7fe fea2 	bl	80010a0 <HAL_GetTick>
 800235c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235e:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <HAL_RCC_OscConfig+0x430>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002366:	d106      	bne.n	8002376 <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002368:	f7fe fe9a 	bl	80010a0 <HAL_GetTick>
 800236c:	1b00      	subs	r0, r0, r4
 800236e:	2802      	cmp	r0, #2
 8002370:	d9f5      	bls.n	800235e <HAL_RCC_OscConfig+0x39a>
            return HAL_TIMEOUT;
 8002372:	2003      	movs	r0, #3
 8002374:	e02f      	b.n	80023d6 <HAL_RCC_OscConfig+0x412>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002376:	2000      	movs	r0, #0
 8002378:	e02d      	b.n	80023d6 <HAL_RCC_OscConfig+0x412>
 800237a:	2000      	movs	r0, #0
 800237c:	e02b      	b.n	80023d6 <HAL_RCC_OscConfig+0x412>
      pll_config = RCC->PLLCFGR;
 800237e:	4a1d      	ldr	r2, [pc, #116]	; (80023f4 <HAL_RCC_OscConfig+0x430>)
 8002380:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002382:	2b01      	cmp	r3, #1
 8002384:	d029      	beq.n	80023da <HAL_RCC_OscConfig+0x416>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002386:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800238a:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800238c:	428b      	cmp	r3, r1
 800238e:	d126      	bne.n	80023de <HAL_RCC_OscConfig+0x41a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002390:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8002394:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002396:	428b      	cmp	r3, r1
 8002398:	d123      	bne.n	80023e2 <HAL_RCC_OscConfig+0x41e>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800239a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800239c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023a0:	4013      	ands	r3, r2
 80023a2:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80023a6:	d11e      	bne.n	80023e6 <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023a8:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 80023ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023ae:	085b      	lsrs	r3, r3, #1
 80023b0:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023b2:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 80023b6:	d118      	bne.n	80023ea <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023b8:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80023bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023be:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 80023c2:	d114      	bne.n	80023ee <HAL_RCC_OscConfig+0x42a>
  return HAL_OK;
 80023c4:	2000      	movs	r0, #0
 80023c6:	e006      	b.n	80023d6 <HAL_RCC_OscConfig+0x412>
    return HAL_ERROR;
 80023c8:	2001      	movs	r0, #1
}
 80023ca:	4770      	bx	lr
        return HAL_ERROR;
 80023cc:	2001      	movs	r0, #1
 80023ce:	e002      	b.n	80023d6 <HAL_RCC_OscConfig+0x412>
        return HAL_ERROR;
 80023d0:	2001      	movs	r0, #1
 80023d2:	e000      	b.n	80023d6 <HAL_RCC_OscConfig+0x412>
  return HAL_OK;
 80023d4:	2000      	movs	r0, #0
}
 80023d6:	b002      	add	sp, #8
 80023d8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80023da:	2001      	movs	r0, #1
 80023dc:	e7fb      	b.n	80023d6 <HAL_RCC_OscConfig+0x412>
 80023de:	2001      	movs	r0, #1
 80023e0:	e7f9      	b.n	80023d6 <HAL_RCC_OscConfig+0x412>
 80023e2:	2001      	movs	r0, #1
 80023e4:	e7f7      	b.n	80023d6 <HAL_RCC_OscConfig+0x412>
 80023e6:	2001      	movs	r0, #1
 80023e8:	e7f5      	b.n	80023d6 <HAL_RCC_OscConfig+0x412>
 80023ea:	2001      	movs	r0, #1
 80023ec:	e7f3      	b.n	80023d6 <HAL_RCC_OscConfig+0x412>
 80023ee:	2001      	movs	r0, #1
 80023f0:	e7f1      	b.n	80023d6 <HAL_RCC_OscConfig+0x412>
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800

080023f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023fa:	4b24      	ldr	r3, [pc, #144]	; (800248c <HAL_RCC_GetSysClockFreq+0x94>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b04      	cmp	r3, #4
 8002404:	d03d      	beq.n	8002482 <HAL_RCC_GetSysClockFreq+0x8a>
 8002406:	2b08      	cmp	r3, #8
 8002408:	d13d      	bne.n	8002486 <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800240a:	4b20      	ldr	r3, [pc, #128]	; (800248c <HAL_RCC_GetSysClockFreq+0x94>)
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002418:	d012      	beq.n	8002440 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800241a:	4b1c      	ldr	r3, [pc, #112]	; (800248c <HAL_RCC_GetSysClockFreq+0x94>)
 800241c:	6859      	ldr	r1, [r3, #4]
 800241e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002422:	2300      	movs	r3, #0
 8002424:	481a      	ldr	r0, [pc, #104]	; (8002490 <HAL_RCC_GetSysClockFreq+0x98>)
 8002426:	fba1 0100 	umull	r0, r1, r1, r0
 800242a:	f7fd ff49 	bl	80002c0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800242e:	4b17      	ldr	r3, [pc, #92]	; (800248c <HAL_RCC_GetSysClockFreq+0x94>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002436:	3301      	adds	r3, #1
 8002438:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800243a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800243e:	e023      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_RCC_GetSysClockFreq+0x94>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002448:	015c      	lsls	r4, r3, #5
 800244a:	2500      	movs	r5, #0
 800244c:	1ae4      	subs	r4, r4, r3
 800244e:	f165 0500 	sbc.w	r5, r5, #0
 8002452:	01ae      	lsls	r6, r5, #6
 8002454:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8002458:	01a7      	lsls	r7, r4, #6
 800245a:	1b38      	subs	r0, r7, r4
 800245c:	eb66 0105 	sbc.w	r1, r6, r5
 8002460:	00cc      	lsls	r4, r1, #3
 8002462:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8002466:	00c5      	lsls	r5, r0, #3
 8002468:	18e8      	adds	r0, r5, r3
 800246a:	f144 0100 	adc.w	r1, r4, #0
 800246e:	028b      	lsls	r3, r1, #10
 8002470:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002474:	0284      	lsls	r4, r0, #10
 8002476:	4620      	mov	r0, r4
 8002478:	4619      	mov	r1, r3
 800247a:	2300      	movs	r3, #0
 800247c:	f7fd ff20 	bl	80002c0 <__aeabi_uldivmod>
 8002480:	e7d5      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8002482:	4803      	ldr	r0, [pc, #12]	; (8002490 <HAL_RCC_GetSysClockFreq+0x98>)
 8002484:	e000      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002486:	4803      	ldr	r0, [pc, #12]	; (8002494 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800
 8002490:	017d7840 	.word	0x017d7840
 8002494:	00f42400 	.word	0x00f42400

08002498 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002498:	2800      	cmp	r0, #0
 800249a:	f000 80a0 	beq.w	80025de <HAL_RCC_ClockConfig+0x146>
{
 800249e:	b570      	push	{r4, r5, r6, lr}
 80024a0:	460d      	mov	r5, r1
 80024a2:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024a4:	4b52      	ldr	r3, [pc, #328]	; (80025f0 <HAL_RCC_ClockConfig+0x158>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	428b      	cmp	r3, r1
 80024ae:	d20b      	bcs.n	80024c8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b0:	4a4f      	ldr	r2, [pc, #316]	; (80025f0 <HAL_RCC_ClockConfig+0x158>)
 80024b2:	6813      	ldr	r3, [r2, #0]
 80024b4:	f023 030f 	bic.w	r3, r3, #15
 80024b8:	430b      	orrs	r3, r1
 80024ba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024bc:	6813      	ldr	r3, [r2, #0]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	428b      	cmp	r3, r1
 80024c4:	f040 808d 	bne.w	80025e2 <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	f013 0f02 	tst.w	r3, #2
 80024ce:	d017      	beq.n	8002500 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d0:	f013 0f04 	tst.w	r3, #4
 80024d4:	d004      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d6:	4a47      	ldr	r2, [pc, #284]	; (80025f4 <HAL_RCC_ClockConfig+0x15c>)
 80024d8:	6893      	ldr	r3, [r2, #8]
 80024da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024de:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e0:	6823      	ldr	r3, [r4, #0]
 80024e2:	f013 0f08 	tst.w	r3, #8
 80024e6:	d004      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e8:	4a42      	ldr	r2, [pc, #264]	; (80025f4 <HAL_RCC_ClockConfig+0x15c>)
 80024ea:	6893      	ldr	r3, [r2, #8]
 80024ec:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024f0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f2:	4a40      	ldr	r2, [pc, #256]	; (80025f4 <HAL_RCC_ClockConfig+0x15c>)
 80024f4:	6893      	ldr	r3, [r2, #8]
 80024f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024fa:	68a1      	ldr	r1, [r4, #8]
 80024fc:	430b      	orrs	r3, r1
 80024fe:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002500:	6823      	ldr	r3, [r4, #0]
 8002502:	f013 0f01 	tst.w	r3, #1
 8002506:	d031      	beq.n	800256c <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002508:	6863      	ldr	r3, [r4, #4]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d020      	beq.n	8002550 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800250e:	2b02      	cmp	r3, #2
 8002510:	d025      	beq.n	800255e <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002512:	4a38      	ldr	r2, [pc, #224]	; (80025f4 <HAL_RCC_ClockConfig+0x15c>)
 8002514:	6812      	ldr	r2, [r2, #0]
 8002516:	f012 0f02 	tst.w	r2, #2
 800251a:	d064      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800251c:	4935      	ldr	r1, [pc, #212]	; (80025f4 <HAL_RCC_ClockConfig+0x15c>)
 800251e:	688a      	ldr	r2, [r1, #8]
 8002520:	f022 0203 	bic.w	r2, r2, #3
 8002524:	4313      	orrs	r3, r2
 8002526:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002528:	f7fe fdba 	bl	80010a0 <HAL_GetTick>
 800252c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252e:	4b31      	ldr	r3, [pc, #196]	; (80025f4 <HAL_RCC_ClockConfig+0x15c>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	6862      	ldr	r2, [r4, #4]
 8002538:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800253c:	d016      	beq.n	800256c <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253e:	f7fe fdaf 	bl	80010a0 <HAL_GetTick>
 8002542:	1b80      	subs	r0, r0, r6
 8002544:	f241 3388 	movw	r3, #5000	; 0x1388
 8002548:	4298      	cmp	r0, r3
 800254a:	d9f0      	bls.n	800252e <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 800254c:	2003      	movs	r0, #3
 800254e:	e045      	b.n	80025dc <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002550:	4a28      	ldr	r2, [pc, #160]	; (80025f4 <HAL_RCC_ClockConfig+0x15c>)
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002558:	d1e0      	bne.n	800251c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800255a:	2001      	movs	r0, #1
 800255c:	e03e      	b.n	80025dc <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255e:	4a25      	ldr	r2, [pc, #148]	; (80025f4 <HAL_RCC_ClockConfig+0x15c>)
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002566:	d1d9      	bne.n	800251c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002568:	2001      	movs	r0, #1
 800256a:	e037      	b.n	80025dc <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800256c:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <HAL_RCC_ClockConfig+0x158>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	42ab      	cmp	r3, r5
 8002576:	d90a      	bls.n	800258e <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002578:	4a1d      	ldr	r2, [pc, #116]	; (80025f0 <HAL_RCC_ClockConfig+0x158>)
 800257a:	6813      	ldr	r3, [r2, #0]
 800257c:	f023 030f 	bic.w	r3, r3, #15
 8002580:	432b      	orrs	r3, r5
 8002582:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002584:	6813      	ldr	r3, [r2, #0]
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	42ab      	cmp	r3, r5
 800258c:	d12d      	bne.n	80025ea <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800258e:	6823      	ldr	r3, [r4, #0]
 8002590:	f013 0f04 	tst.w	r3, #4
 8002594:	d006      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002596:	4a17      	ldr	r2, [pc, #92]	; (80025f4 <HAL_RCC_ClockConfig+0x15c>)
 8002598:	6893      	ldr	r3, [r2, #8]
 800259a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800259e:	68e1      	ldr	r1, [r4, #12]
 80025a0:	430b      	orrs	r3, r1
 80025a2:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a4:	6823      	ldr	r3, [r4, #0]
 80025a6:	f013 0f08 	tst.w	r3, #8
 80025aa:	d007      	beq.n	80025bc <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ac:	4a11      	ldr	r2, [pc, #68]	; (80025f4 <HAL_RCC_ClockConfig+0x15c>)
 80025ae:	6893      	ldr	r3, [r2, #8]
 80025b0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80025b4:	6921      	ldr	r1, [r4, #16]
 80025b6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025ba:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025bc:	f7ff ff1c 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <HAL_RCC_ClockConfig+0x15c>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80025c8:	4a0b      	ldr	r2, [pc, #44]	; (80025f8 <HAL_RCC_ClockConfig+0x160>)
 80025ca:	5cd3      	ldrb	r3, [r2, r3]
 80025cc:	40d8      	lsrs	r0, r3
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_RCC_ClockConfig+0x164>)
 80025d0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80025d2:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_RCC_ClockConfig+0x168>)
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	f7fe fd1d 	bl	8001014 <HAL_InitTick>
  return HAL_OK;
 80025da:	2000      	movs	r0, #0
}
 80025dc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80025de:	2001      	movs	r0, #1
}
 80025e0:	4770      	bx	lr
      return HAL_ERROR;
 80025e2:	2001      	movs	r0, #1
 80025e4:	e7fa      	b.n	80025dc <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 80025e6:	2001      	movs	r0, #1
 80025e8:	e7f8      	b.n	80025dc <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 80025ea:	2001      	movs	r0, #1
 80025ec:	e7f6      	b.n	80025dc <HAL_RCC_ClockConfig+0x144>
 80025ee:	bf00      	nop
 80025f0:	40023c00 	.word	0x40023c00
 80025f4:	40023800 	.word	0x40023800
 80025f8:	0800ce18 	.word	0x0800ce18
 80025fc:	20000000 	.word	0x20000000
 8002600:	20000008 	.word	0x20000008

08002604 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002604:	4b01      	ldr	r3, [pc, #4]	; (800260c <HAL_RCC_GetHCLKFreq+0x8>)
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000000 	.word	0x20000000

08002610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002610:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002612:	f7ff fff7 	bl	8002604 <HAL_RCC_GetHCLKFreq>
 8002616:	4b04      	ldr	r3, [pc, #16]	; (8002628 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800261e:	4a03      	ldr	r2, [pc, #12]	; (800262c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002620:	5cd3      	ldrb	r3, [r2, r3]
}
 8002622:	40d8      	lsrs	r0, r3
 8002624:	bd08      	pop	{r3, pc}
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800
 800262c:	0800ce28 	.word	0x0800ce28

08002630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002630:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002632:	f7ff ffe7 	bl	8002604 <HAL_RCC_GetHCLKFreq>
 8002636:	4b04      	ldr	r3, [pc, #16]	; (8002648 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800263e:	4a03      	ldr	r2, [pc, #12]	; (800264c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002640:	5cd3      	ldrb	r3, [r2, r3]
}
 8002642:	40d8      	lsrs	r0, r3
 8002644:	bd08      	pop	{r3, pc}
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800
 800264c:	0800ce28 	.word	0x0800ce28

08002650 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002652:	b083      	sub	sp, #12
 8002654:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002656:	6806      	ldr	r6, [r0, #0]
 8002658:	f016 0601 	ands.w	r6, r6, #1
 800265c:	d00d      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800265e:	4bb6      	ldr	r3, [pc, #728]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800266c:	430a      	orrs	r2, r1
 800266e:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002670:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 8139 	beq.w	80028ea <HAL_RCCEx_PeriphCLKConfig+0x29a>
  uint32_t plli2sused = 0;
 8002678:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800267a:	6825      	ldr	r5, [r4, #0]
 800267c:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 8002680:	d011      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002682:	4aad      	ldr	r2, [pc, #692]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002684:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002688:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800268c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800268e:	430b      	orrs	r3, r1
 8002690:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002694:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800269a:	f000 8128 	beq.w	80028ee <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 8127 	beq.w	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  uint32_t pllsaiused = 0;
 80026a4:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80026ac:	d00f      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026ae:	4aa2      	ldr	r2, [pc, #648]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026b0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80026b4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80026b8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80026ba:	430b      	orrs	r3, r1
 80026bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026c6:	f000 8116 	beq.w	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026ca:	b903      	cbnz	r3, 80026ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 80026cc:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80026d4:	d000      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 80026d6:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026d8:	f013 0f20 	tst.w	r3, #32
 80026dc:	f040 810d 	bne.w	80028fa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026e0:	6823      	ldr	r3, [r4, #0]
 80026e2:	f013 0f10 	tst.w	r3, #16
 80026e6:	d00c      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80026e8:	4b93      	ldr	r3, [pc, #588]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026ea:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80026ee:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80026f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80026f6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80026fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80026fc:	430a      	orrs	r2, r1
 80026fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002702:	6823      	ldr	r3, [r4, #0]
 8002704:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002708:	d008      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800270a:	4a8b      	ldr	r2, [pc, #556]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800270c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002710:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002714:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002716:	430b      	orrs	r3, r1
 8002718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002722:	d008      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002724:	4a84      	ldr	r2, [pc, #528]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002726:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800272a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800272e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002730:	430b      	orrs	r3, r1
 8002732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002736:	6823      	ldr	r3, [r4, #0]
 8002738:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800273c:	d008      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800273e:	4a7e      	ldr	r2, [pc, #504]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002740:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002744:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002748:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800274a:	430b      	orrs	r3, r1
 800274c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002756:	d008      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002758:	4a77      	ldr	r2, [pc, #476]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800275a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800275e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002762:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002764:	430b      	orrs	r3, r1
 8002766:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800276a:	6823      	ldr	r3, [r4, #0]
 800276c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002770:	d008      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002772:	4a71      	ldr	r2, [pc, #452]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002774:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002778:	f023 0303 	bic.w	r3, r3, #3
 800277c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800277e:	430b      	orrs	r3, r1
 8002780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002784:	6823      	ldr	r3, [r4, #0]
 8002786:	f013 0f80 	tst.w	r3, #128	; 0x80
 800278a:	d008      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800278c:	4a6a      	ldr	r2, [pc, #424]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800278e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002792:	f023 030c 	bic.w	r3, r3, #12
 8002796:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002798:	430b      	orrs	r3, r1
 800279a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800279e:	6823      	ldr	r3, [r4, #0]
 80027a0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80027a4:	d008      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027a6:	4a64      	ldr	r2, [pc, #400]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027a8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80027ac:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80027b0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80027b2:	430b      	orrs	r3, r1
 80027b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027b8:	6823      	ldr	r3, [r4, #0]
 80027ba:	f413 7f00 	tst.w	r3, #512	; 0x200
 80027be:	d008      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027c0:	4a5d      	ldr	r2, [pc, #372]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027c2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80027c6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80027ca:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80027cc:	430b      	orrs	r3, r1
 80027ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80027d8:	d008      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027da:	4a57      	ldr	r2, [pc, #348]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027dc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80027e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80027e6:	430b      	orrs	r3, r1
 80027e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80027ec:	6823      	ldr	r3, [r4, #0]
 80027ee:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80027f2:	d008      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80027f4:	4a50      	ldr	r2, [pc, #320]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027f6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80027fa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80027fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002800:	430b      	orrs	r3, r1
 8002802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800280c:	d008      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800280e:	4a4a      	ldr	r2, [pc, #296]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002810:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002814:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002818:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800281a:	430b      	orrs	r3, r1
 800281c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002820:	6823      	ldr	r3, [r4, #0]
 8002822:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002826:	d008      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002828:	4a43      	ldr	r2, [pc, #268]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800282a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800282e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002832:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002834:	430b      	orrs	r3, r1
 8002836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800283a:	6823      	ldr	r3, [r4, #0]
 800283c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002840:	d008      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002842:	4a3d      	ldr	r2, [pc, #244]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002844:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002848:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800284c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800284e:	430b      	orrs	r3, r1
 8002850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002854:	6823      	ldr	r3, [r4, #0]
 8002856:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800285a:	d00d      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800285c:	4a36      	ldr	r2, [pc, #216]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800285e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002862:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002866:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002868:	430b      	orrs	r3, r1
 800286a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800286e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002870:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002874:	f000 80ac 	beq.w	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x380>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002878:	6823      	ldr	r3, [r4, #0]
 800287a:	f013 0f08 	tst.w	r3, #8
 800287e:	d000      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 8002880:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002882:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002886:	d008      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002888:	4a2b      	ldr	r2, [pc, #172]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800288a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800288e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002892:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002894:	430b      	orrs	r3, r1
 8002896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800289a:	6823      	ldr	r3, [r4, #0]
 800289c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80028a0:	d009      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028a2:	4a25      	ldr	r2, [pc, #148]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80028a4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80028a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ac:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80028b0:	430b      	orrs	r3, r1
 80028b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80028b6:	b926      	cbnz	r6, 80028c2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80028b8:	6823      	ldr	r3, [r4, #0]
 80028ba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80028be:	f000 8107 	beq.w	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x480>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028c2:	4a1d      	ldr	r2, [pc, #116]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80028c4:	6813      	ldr	r3, [r2, #0]
 80028c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028cc:	f7fe fbe8 	bl	80010a0 <HAL_GetTick>
 80028d0:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028d2:	4b19      	ldr	r3, [pc, #100]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80028da:	d07b      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028dc:	f7fe fbe0 	bl	80010a0 <HAL_GetTick>
 80028e0:	1b80      	subs	r0, r0, r6
 80028e2:	2864      	cmp	r0, #100	; 0x64
 80028e4:	d9f5      	bls.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x282>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028e6:	2003      	movs	r0, #3
 80028e8:	e0f5      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x486>
      plli2sused = 1;
 80028ea:	2601      	movs	r6, #1
 80028ec:	e6c5      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 80028ee:	2601      	movs	r6, #1
 80028f0:	e6d5      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 80028f2:	2501      	movs	r5, #1
 80028f4:	e6d7      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 80028f6:	2601      	movs	r6, #1
 80028f8:	e6e7      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_PWR_CLK_ENABLE();
 80028fa:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80028fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002902:	641a      	str	r2, [r3, #64]	; 0x40
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290a:	9301      	str	r3, [sp, #4]
 800290c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800290e:	4a0b      	ldr	r2, [pc, #44]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002910:	6813      	ldr	r3, [r2, #0]
 8002912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002916:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002918:	f7fe fbc2 	bl	80010a0 <HAL_GetTick>
 800291c:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800291e:	4b07      	ldr	r3, [pc, #28]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002926:	d10b      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002928:	f7fe fbba 	bl	80010a0 <HAL_GetTick>
 800292c:	1bc0      	subs	r0, r0, r7
 800292e:	2864      	cmp	r0, #100	; 0x64
 8002930:	d9f5      	bls.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
        return HAL_TIMEOUT;
 8002932:	2003      	movs	r0, #3
 8002934:	e0cf      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800
 800293c:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002940:	4bab      	ldr	r3, [pc, #684]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002944:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002948:	d015      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800294a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800294c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002950:	429a      	cmp	r2, r3
 8002952:	d010      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x326>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002954:	4ba6      	ldr	r3, [pc, #664]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002956:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002958:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800295c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800295e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002962:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002964:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002966:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800296a:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800296c:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800296e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002970:	f013 0f01 	tst.w	r3, #1
 8002974:	d112      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x34c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002976:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002978:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800297c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002980:	d01d      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002982:	4a9b      	ldr	r2, [pc, #620]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002984:	6893      	ldr	r3, [r2, #8]
 8002986:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800298a:	6093      	str	r3, [r2, #8]
 800298c:	4998      	ldr	r1, [pc, #608]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 800298e:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8002990:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002992:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002996:	4313      	orrs	r3, r2
 8002998:	670b      	str	r3, [r1, #112]	; 0x70
 800299a:	e6a1      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 800299c:	f7fe fb80 	bl	80010a0 <HAL_GetTick>
 80029a0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a2:	4b93      	ldr	r3, [pc, #588]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a6:	f013 0f02 	tst.w	r3, #2
 80029aa:	d1e4      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x326>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ac:	f7fe fb78 	bl	80010a0 <HAL_GetTick>
 80029b0:	1bc0      	subs	r0, r0, r7
 80029b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80029b6:	4298      	cmp	r0, r3
 80029b8:	d9f3      	bls.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x352>
            return HAL_TIMEOUT;
 80029ba:	2003      	movs	r0, #3
 80029bc:	e08b      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x486>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029be:	488c      	ldr	r0, [pc, #560]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80029c0:	6882      	ldr	r2, [r0, #8]
 80029c2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80029c6:	498b      	ldr	r1, [pc, #556]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80029c8:	4019      	ands	r1, r3
 80029ca:	430a      	orrs	r2, r1
 80029cc:	6082      	str	r2, [r0, #8]
 80029ce:	e7dd      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      pllsaiused = 1;
 80029d0:	2501      	movs	r5, #1
 80029d2:	e751      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x228>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	f013 0f01 	tst.w	r3, #1
 80029da:	d013      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 80029dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029de:	b98b      	cbnz	r3, 8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029e0:	4a83      	ldr	r2, [pc, #524]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80029e2:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029e6:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80029ea:	6860      	ldr	r0, [r4, #4]
 80029ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029f0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80029f4:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80029f8:	430b      	orrs	r3, r1
 80029fa:	68a1      	ldr	r1, [r4, #8]
 80029fc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002a00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002a0a:	d003      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8002a0c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002a0e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002a12:	d006      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8002a14:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002a18:	d01e      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x408>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a20:	d11a      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x408>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a22:	4a73      	ldr	r2, [pc, #460]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002a24:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a28:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a2c:	6860      	ldr	r0, [r4, #4]
 8002a2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a32:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002a36:	68e0      	ldr	r0, [r4, #12]
 8002a38:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002a3c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002a40:	430b      	orrs	r3, r1
 8002a42:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a46:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002a4a:	f023 031f 	bic.w	r3, r3, #31
 8002a4e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002a50:	3901      	subs	r1, #1
 8002a52:	430b      	orrs	r3, r1
 8002a54:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a58:	6823      	ldr	r3, [r4, #0]
 8002a5a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002a5e:	d011      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a60:	4a63      	ldr	r2, [pc, #396]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002a62:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a66:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a6a:	6866      	ldr	r6, [r4, #4]
 8002a6c:	6923      	ldr	r3, [r4, #16]
 8002a6e:	041b      	lsls	r3, r3, #16
 8002a70:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8002a74:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8002a78:	4303      	orrs	r3, r0
 8002a7a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002a7e:	430b      	orrs	r3, r1
 8002a80:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a84:	6823      	ldr	r3, [r4, #0]
 8002a86:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002a8a:	d00d      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x458>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a8c:	6862      	ldr	r2, [r4, #4]
 8002a8e:	6923      	ldr	r3, [r4, #16]
 8002a90:	041b      	lsls	r3, r3, #16
 8002a92:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002a96:	68e2      	ldr	r2, [r4, #12]
 8002a98:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002a9c:	68a2      	ldr	r2, [r4, #8]
 8002a9e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002aa2:	4a53      	ldr	r2, [pc, #332]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002aa4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002aa8:	4a51      	ldr	r2, [pc, #324]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002aaa:	6813      	ldr	r3, [r2, #0]
 8002aac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ab0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ab2:	f7fe faf5 	bl	80010a0 <HAL_GetTick>
 8002ab6:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ab8:	4b4d      	ldr	r3, [pc, #308]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002ac0:	d106      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ac2:	f7fe faed 	bl	80010a0 <HAL_GetTick>
 8002ac6:	1b80      	subs	r0, r0, r6
 8002ac8:	2864      	cmp	r0, #100	; 0x64
 8002aca:	d9f5      	bls.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x468>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002acc:	2003      	movs	r0, #3
 8002ace:	e002      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x486>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ad0:	2d01      	cmp	r5, #1
 8002ad2:	d002      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x48a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002ad4:	2000      	movs	r0, #0
}
 8002ad6:	b003      	add	sp, #12
 8002ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8002ada:	4a45      	ldr	r2, [pc, #276]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002adc:	6813      	ldr	r3, [r2, #0]
 8002ade:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002ae4:	f7fe fadc 	bl	80010a0 <HAL_GetTick>
 8002ae8:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002aea:	4b41      	ldr	r3, [pc, #260]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002af2:	d006      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002af4:	f7fe fad4 	bl	80010a0 <HAL_GetTick>
 8002af8:	1b40      	subs	r0, r0, r5
 8002afa:	2864      	cmp	r0, #100	; 0x64
 8002afc:	d9f5      	bls.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x49a>
        return HAL_TIMEOUT;
 8002afe:	2003      	movs	r0, #3
 8002b00:	e7e9      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x486>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002b08:	d001      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8002b0a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002b0c:	b122      	cbz	r2, 8002b18 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 8002b0e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002b12:	d01d      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x500>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b16:	b9db      	cbnz	r3, 8002b50 <HAL_RCCEx_PeriphCLKConfig+0x500>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b18:	4a35      	ldr	r2, [pc, #212]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002b1a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b1e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b22:	6960      	ldr	r0, [r4, #20]
 8002b24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b28:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002b2c:	69a0      	ldr	r0, [r4, #24]
 8002b2e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002b32:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002b36:	430b      	orrs	r3, r1
 8002b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b3c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002b40:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002b44:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002b46:	3901      	subs	r1, #1
 8002b48:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b4c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b50:	6823      	ldr	r3, [r4, #0]
 8002b52:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002b56:	d003      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8002b58:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002b5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b5e:	d031      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x574>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	f013 0f08 	tst.w	r3, #8
 8002b66:	d019      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x54c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b68:	4a21      	ldr	r2, [pc, #132]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002b6a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b6e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b72:	6960      	ldr	r0, [r4, #20]
 8002b74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b78:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002b7c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002b80:	430b      	orrs	r3, r1
 8002b82:	69e1      	ldr	r1, [r4, #28]
 8002b84:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b8c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002b90:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002b94:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002b96:	430b      	orrs	r3, r1
 8002b98:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8002b9c:	4a14      	ldr	r2, [pc, #80]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002b9e:	6813      	ldr	r3, [r2, #0]
 8002ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002ba6:	f7fe fa7b 	bl	80010a0 <HAL_GetTick>
 8002baa:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bac:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002bb4:	d119      	bne.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x59a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bb6:	f7fe fa73 	bl	80010a0 <HAL_GetTick>
 8002bba:	1b00      	subs	r0, r0, r4
 8002bbc:	2864      	cmp	r0, #100	; 0x64
 8002bbe:	d9f5      	bls.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x55c>
        return HAL_TIMEOUT;
 8002bc0:	2003      	movs	r0, #3
 8002bc2:	e788      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x486>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bc4:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002bc6:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002bca:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002bce:	6965      	ldr	r5, [r4, #20]
 8002bd0:	6a23      	ldr	r3, [r4, #32]
 8002bd2:	041b      	lsls	r3, r3, #16
 8002bd4:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8002bd8:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8002bdc:	4303      	orrs	r3, r0
 8002bde:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002be2:	430b      	orrs	r3, r1
 8002be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002be8:	e7ba      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x510>
  return HAL_OK;
 8002bea:	2000      	movs	r0, #0
 8002bec:	e773      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002bee:	bf00      	nop
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	0ffffcff 	.word	0x0ffffcff

08002bf8 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bf8:	2800      	cmp	r0, #0
 8002bfa:	d06f      	beq.n	8002cdc <HAL_SPI_Init+0xe4>
{
 8002bfc:	b510      	push	{r4, lr}
 8002bfe:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c00:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c02:	b933      	cbnz	r3, 8002c12 <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c04:	6843      	ldr	r3, [r0, #4]
 8002c06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c0a:	d005      	beq.n	8002c18 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61c3      	str	r3, [r0, #28]
 8002c10:	e002      	b.n	8002c18 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c12:	2300      	movs	r3, #0
 8002c14:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c16:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c1c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d052      	beq.n	8002cca <HAL_SPI_Init+0xd2>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c24:	2302      	movs	r3, #2
 8002c26:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c2a:	6822      	ldr	r2, [r4, #0]
 8002c2c:	6813      	ldr	r3, [r2, #0]
 8002c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c32:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c34:	68e3      	ldr	r3, [r4, #12]
 8002c36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c3a:	d94c      	bls.n	8002cd6 <HAL_SPI_Init+0xde>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c3c:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c3e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c42:	bf18      	it	ne
 8002c44:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 8002c48:	d001      	beq.n	8002c4e <HAL_SPI_Init+0x56>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c4e:	6863      	ldr	r3, [r4, #4]
 8002c50:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8002c54:	68a1      	ldr	r1, [r4, #8]
 8002c56:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8002c5a:	430b      	orrs	r3, r1
 8002c5c:	6921      	ldr	r1, [r4, #16]
 8002c5e:	f001 0102 	and.w	r1, r1, #2
 8002c62:	430b      	orrs	r3, r1
 8002c64:	6961      	ldr	r1, [r4, #20]
 8002c66:	f001 0101 	and.w	r1, r1, #1
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	69a1      	ldr	r1, [r4, #24]
 8002c6e:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8002c72:	430b      	orrs	r3, r1
 8002c74:	69e1      	ldr	r1, [r4, #28]
 8002c76:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8002c7a:	430b      	orrs	r3, r1
 8002c7c:	6a21      	ldr	r1, [r4, #32]
 8002c7e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002c82:	430b      	orrs	r3, r1
 8002c84:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002c86:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8002c8a:	6820      	ldr	r0, [r4, #0]
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c90:	8b63      	ldrh	r3, [r4, #26]
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002c98:	f001 0110 	and.w	r1, r1, #16
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ca0:	f001 0108 	and.w	r1, r1, #8
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	68e1      	ldr	r1, [r4, #12]
 8002ca8:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8002cac:	430b      	orrs	r3, r1
 8002cae:	6821      	ldr	r1, [r4, #0]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cb4:	6822      	ldr	r2, [r4, #0]
 8002cb6:	69d3      	ldr	r3, [r2, #28]
 8002cb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cbc:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8002cc8:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002cca:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8002cce:	4620      	mov	r0, r4
 8002cd0:	f7fe f8bc 	bl	8000e4c <HAL_SPI_MspInit>
 8002cd4:	e7a6      	b.n	8002c24 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002cd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cda:	e7b0      	b.n	8002c3e <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8002cdc:	2001      	movs	r0, #1
}
 8002cde:	4770      	bx	lr

08002ce0 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002ce0:	6802      	ldr	r2, [r0, #0]
 8002ce2:	6813      	ldr	r3, [r2, #0]
 8002ce4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002ce8:	6013      	str	r3, [r2, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cea:	2320      	movs	r3, #32
 8002cec:	6783      	str	r3, [r0, #120]	; 0x78
}
 8002cee:	4770      	bx	lr

08002cf0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cf0:	6802      	ldr	r2, [r0, #0]
 8002cf2:	6813      	ldr	r3, [r2, #0]
 8002cf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cf8:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cfa:	6802      	ldr	r2, [r0, #0]
 8002cfc:	6893      	ldr	r3, [r2, #8]
 8002cfe:	f023 0301 	bic.w	r3, r3, #1
 8002d02:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d04:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d005      	beq.n	8002d16 <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d0a:	2320      	movs	r3, #32
 8002d0c:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d12:	6643      	str	r3, [r0, #100]	; 0x64
}
 8002d14:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d16:	6802      	ldr	r2, [r0, #0]
 8002d18:	6813      	ldr	r3, [r2, #0]
 8002d1a:	f023 0310 	bic.w	r3, r3, #16
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	e7f3      	b.n	8002d0a <UART_EndRxTransfer+0x1a>
	...

08002d24 <HAL_UART_Transmit_DMA>:
{
 8002d24:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002d26:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8002d28:	2a20      	cmp	r2, #32
 8002d2a:	d144      	bne.n	8002db6 <HAL_UART_Transmit_DMA+0x92>
{
 8002d2c:	b510      	push	{r4, lr}
 8002d2e:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8002d30:	fab3 f283 	clz	r2, r3
 8002d34:	0952      	lsrs	r2, r2, #5
 8002d36:	2900      	cmp	r1, #0
 8002d38:	bf08      	it	eq
 8002d3a:	2201      	moveq	r2, #1
 8002d3c:	2a00      	cmp	r2, #0
 8002d3e:	d13c      	bne.n	8002dba <HAL_UART_Transmit_DMA+0x96>
    __HAL_LOCK(huart);
 8002d40:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
 8002d44:	2a01      	cmp	r2, #1
 8002d46:	d03a      	beq.n	8002dbe <HAL_UART_Transmit_DMA+0x9a>
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
    huart->pTxBuffPtr  = pData;
 8002d4e:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002d50:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 8002d54:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d5e:	2221      	movs	r2, #33	; 0x21
 8002d60:	6782      	str	r2, [r0, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8002d62:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8002d64:	b1da      	cbz	r2, 8002d9e <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002d66:	4917      	ldr	r1, [pc, #92]	; (8002dc4 <HAL_UART_Transmit_DMA+0xa0>)
 8002d68:	63d1      	str	r1, [r2, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002d6a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8002d6c:	4916      	ldr	r1, [pc, #88]	; (8002dc8 <HAL_UART_Transmit_DMA+0xa4>)
 8002d6e:	6411      	str	r1, [r2, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002d70:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8002d72:	4916      	ldr	r1, [pc, #88]	; (8002dcc <HAL_UART_Transmit_DMA+0xa8>)
 8002d74:	64d1      	str	r1, [r2, #76]	; 0x4c
      huart->hdmatx->XferAbortCallback = NULL;
 8002d76:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8002d78:	2100      	movs	r1, #0
 8002d7a:	6511      	str	r1, [r2, #80]	; 0x50
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002d7c:	6802      	ldr	r2, [r0, #0]
 8002d7e:	3228      	adds	r2, #40	; 0x28
 8002d80:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8002d82:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8002d84:	f7fe fa10 	bl	80011a8 <HAL_DMA_Start_IT>
 8002d88:	b148      	cbz	r0, 8002d9e <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002d8a:	2310      	movs	r3, #16
 8002d8c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        __HAL_UNLOCK(huart);
 8002d90:	2300      	movs	r3, #0
 8002d92:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
        huart->gState = HAL_UART_STATE_READY;
 8002d96:	2320      	movs	r3, #32
 8002d98:	67a3      	str	r3, [r4, #120]	; 0x78
        return HAL_ERROR;
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	e00a      	b.n	8002db4 <HAL_UART_Transmit_DMA+0x90>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002d9e:	6823      	ldr	r3, [r4, #0]
 8002da0:	2240      	movs	r2, #64	; 0x40
 8002da2:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8002da4:	2000      	movs	r0, #0
 8002da6:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002daa:	6822      	ldr	r2, [r4, #0]
 8002dac:	6893      	ldr	r3, [r2, #8]
 8002dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db2:	6093      	str	r3, [r2, #8]
}
 8002db4:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8002db6:	2002      	movs	r0, #2
}
 8002db8:	4770      	bx	lr
      return HAL_ERROR;
 8002dba:	2001      	movs	r0, #1
 8002dbc:	e7fa      	b.n	8002db4 <HAL_UART_Transmit_DMA+0x90>
    __HAL_LOCK(huart);
 8002dbe:	2002      	movs	r0, #2
 8002dc0:	e7f8      	b.n	8002db4 <HAL_UART_Transmit_DMA+0x90>
 8002dc2:	bf00      	nop
 8002dc4:	08002dd3 	.word	0x08002dd3
 8002dc8:	08002e05 	.word	0x08002e05
 8002dcc:	08002e11 	.word	0x08002e11

08002dd0 <HAL_UART_TxCpltCallback>:
}
 8002dd0:	4770      	bx	lr

08002dd2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002dd2:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002dd4:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002dd6:	69c2      	ldr	r2, [r0, #28]
 8002dd8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002ddc:	d00d      	beq.n	8002dfa <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0U;
 8002dde:	2200      	movs	r2, #0
 8002de0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002de4:	6819      	ldr	r1, [r3, #0]
 8002de6:	688a      	ldr	r2, [r1, #8]
 8002de8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dec:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	6813      	ldr	r3, [r2, #0]
 8002df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002df6:	6013      	str	r3, [r2, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002df8:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff ffe8 	bl	8002dd0 <HAL_UART_TxCpltCallback>
}
 8002e00:	e7fa      	b.n	8002df8 <UART_DMATransmitCplt+0x26>

08002e02 <HAL_UART_TxHalfCpltCallback>:
}
 8002e02:	4770      	bx	lr

08002e04 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e04:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002e06:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002e08:	f7ff fffb 	bl	8002e02 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e0c:	bd08      	pop	{r3, pc}

08002e0e <HAL_UART_ErrorCallback>:
}
 8002e0e:	4770      	bx	lr

08002e10 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e10:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e12:	6b84      	ldr	r4, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002e14:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002e16:	6fe5      	ldr	r5, [r4, #124]	; 0x7c

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002e18:	6823      	ldr	r3, [r4, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002e20:	d001      	beq.n	8002e26 <UART_DMAError+0x16>
 8002e22:	2a21      	cmp	r2, #33	; 0x21
 8002e24:	d010      	beq.n	8002e48 <UART_DMAError+0x38>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002e2e:	d001      	beq.n	8002e34 <UART_DMAError+0x24>
 8002e30:	2d22      	cmp	r5, #34	; 0x22
 8002e32:	d010      	beq.n	8002e56 <UART_DMAError+0x46>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002e34:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8002e38:	f043 0310 	orr.w	r3, r3, #16
 8002e3c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e40:	4620      	mov	r0, r4
 8002e42:	f7ff ffe4 	bl	8002e0e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e46:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8002e4e:	4620      	mov	r0, r4
 8002e50:	f7ff ff46 	bl	8002ce0 <UART_EndTxTransfer>
 8002e54:	e7e7      	b.n	8002e26 <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f7ff ff47 	bl	8002cf0 <UART_EndRxTransfer>
 8002e62:	e7e7      	b.n	8002e34 <UART_DMAError+0x24>

08002e64 <UART_SetConfig>:
{
 8002e64:	b510      	push	{r4, lr}
 8002e66:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e68:	6883      	ldr	r3, [r0, #8]
 8002e6a:	6902      	ldr	r2, [r0, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	6942      	ldr	r2, [r0, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	69c2      	ldr	r2, [r0, #28]
 8002e74:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e76:	6801      	ldr	r1, [r0, #0]
 8002e78:	6808      	ldr	r0, [r1, #0]
 8002e7a:	4aa0      	ldr	r2, [pc, #640]	; (80030fc <UART_SetConfig+0x298>)
 8002e7c:	4002      	ands	r2, r0
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e82:	6822      	ldr	r2, [r4, #0]
 8002e84:	6853      	ldr	r3, [r2, #4]
 8002e86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e8a:	68e1      	ldr	r1, [r4, #12]
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e90:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8002e92:	6a23      	ldr	r3, [r4, #32]
 8002e94:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e96:	6821      	ldr	r1, [r4, #0]
 8002e98:	688b      	ldr	r3, [r1, #8]
 8002e9a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	4a96      	ldr	r2, [pc, #600]	; (8003100 <UART_SetConfig+0x29c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d019      	beq.n	8002ede <UART_SetConfig+0x7a>
 8002eaa:	4a96      	ldr	r2, [pc, #600]	; (8003104 <UART_SetConfig+0x2a0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d029      	beq.n	8002f04 <UART_SetConfig+0xa0>
 8002eb0:	4a95      	ldr	r2, [pc, #596]	; (8003108 <UART_SetConfig+0x2a4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d03e      	beq.n	8002f34 <UART_SetConfig+0xd0>
 8002eb6:	4a95      	ldr	r2, [pc, #596]	; (800310c <UART_SetConfig+0x2a8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d062      	beq.n	8002f82 <UART_SetConfig+0x11e>
 8002ebc:	4a94      	ldr	r2, [pc, #592]	; (8003110 <UART_SetConfig+0x2ac>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d071      	beq.n	8002fa6 <UART_SetConfig+0x142>
 8002ec2:	4a94      	ldr	r2, [pc, #592]	; (8003114 <UART_SetConfig+0x2b0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	f000 8083 	beq.w	8002fd0 <UART_SetConfig+0x16c>
 8002eca:	4a93      	ldr	r2, [pc, #588]	; (8003118 <UART_SetConfig+0x2b4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	f000 8094 	beq.w	8002ffa <UART_SetConfig+0x196>
 8002ed2:	4a92      	ldr	r2, [pc, #584]	; (800311c <UART_SetConfig+0x2b8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	f000 80a5 	beq.w	8003024 <UART_SetConfig+0x1c0>
 8002eda:	2310      	movs	r3, #16
 8002edc:	e03a      	b.n	8002f54 <UART_SetConfig+0xf0>
 8002ede:	4b90      	ldr	r3, [pc, #576]	; (8003120 <UART_SetConfig+0x2bc>)
 8002ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d809      	bhi.n	8002f00 <UART_SetConfig+0x9c>
 8002eec:	e8df f003 	tbb	[pc, r3]
 8002ef0:	06ae0402 	.word	0x06ae0402
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e02d      	b.n	8002f54 <UART_SetConfig+0xf0>
 8002ef8:	2304      	movs	r3, #4
 8002efa:	e02b      	b.n	8002f54 <UART_SetConfig+0xf0>
 8002efc:	2308      	movs	r3, #8
 8002efe:	e029      	b.n	8002f54 <UART_SetConfig+0xf0>
 8002f00:	2310      	movs	r3, #16
 8002f02:	e027      	b.n	8002f54 <UART_SetConfig+0xf0>
 8002f04:	4b86      	ldr	r3, [pc, #536]	; (8003120 <UART_SetConfig+0x2bc>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	2b0c      	cmp	r3, #12
 8002f10:	d80e      	bhi.n	8002f30 <UART_SetConfig+0xcc>
 8002f12:	e8df f003 	tbb	[pc, r3]
 8002f16:	0d07      	.short	0x0d07
 8002f18:	0d090d0d 	.word	0x0d090d0d
 8002f1c:	0d9d0d0d 	.word	0x0d9d0d0d
 8002f20:	0d0d      	.short	0x0d0d
 8002f22:	0b          	.byte	0x0b
 8002f23:	00          	.byte	0x00
 8002f24:	2300      	movs	r3, #0
 8002f26:	e015      	b.n	8002f54 <UART_SetConfig+0xf0>
 8002f28:	2304      	movs	r3, #4
 8002f2a:	e013      	b.n	8002f54 <UART_SetConfig+0xf0>
 8002f2c:	2308      	movs	r3, #8
 8002f2e:	e011      	b.n	8002f54 <UART_SetConfig+0xf0>
 8002f30:	2310      	movs	r3, #16
 8002f32:	e00f      	b.n	8002f54 <UART_SetConfig+0xf0>
 8002f34:	4b7a      	ldr	r3, [pc, #488]	; (8003120 <UART_SetConfig+0x2bc>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	f000 8088 	beq.w	8003054 <UART_SetConfig+0x1f0>
 8002f44:	d819      	bhi.n	8002f7a <UART_SetConfig+0x116>
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 8086 	beq.w	8003058 <UART_SetConfig+0x1f4>
 8002f4c:	2b10      	cmp	r3, #16
 8002f4e:	f040 8085 	bne.w	800305c <UART_SetConfig+0x1f8>
 8002f52:	2304      	movs	r3, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f54:	69e0      	ldr	r0, [r4, #28]
 8002f56:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002f5a:	f000 80ab 	beq.w	80030b4 <UART_SetConfig+0x250>
    switch (clocksource)
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	f200 810c 	bhi.w	800317c <UART_SetConfig+0x318>
 8002f64:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002f68:	00fb00e8 	.word	0x00fb00e8
 8002f6c:	010a00e6 	.word	0x010a00e6
 8002f70:	010a00fe 	.word	0x010a00fe
 8002f74:	010a010a 	.word	0x010a010a
 8002f78:	0101      	.short	0x0101
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f7a:	2b30      	cmp	r3, #48	; 0x30
 8002f7c:	d170      	bne.n	8003060 <UART_SetConfig+0x1fc>
 8002f7e:	2308      	movs	r3, #8
 8002f80:	e7e8      	b.n	8002f54 <UART_SetConfig+0xf0>
 8002f82:	4b67      	ldr	r3, [pc, #412]	; (8003120 <UART_SetConfig+0x2bc>)
 8002f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f88:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f8c:	2b80      	cmp	r3, #128	; 0x80
 8002f8e:	d069      	beq.n	8003064 <UART_SetConfig+0x200>
 8002f90:	d805      	bhi.n	8002f9e <UART_SetConfig+0x13a>
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d068      	beq.n	8003068 <UART_SetConfig+0x204>
 8002f96:	2b40      	cmp	r3, #64	; 0x40
 8002f98:	d168      	bne.n	800306c <UART_SetConfig+0x208>
 8002f9a:	2304      	movs	r3, #4
 8002f9c:	e7da      	b.n	8002f54 <UART_SetConfig+0xf0>
 8002f9e:	2bc0      	cmp	r3, #192	; 0xc0
 8002fa0:	d166      	bne.n	8003070 <UART_SetConfig+0x20c>
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	e7d6      	b.n	8002f54 <UART_SetConfig+0xf0>
 8002fa6:	4b5e      	ldr	r3, [pc, #376]	; (8003120 <UART_SetConfig+0x2bc>)
 8002fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fb4:	d05e      	beq.n	8003074 <UART_SetConfig+0x210>
 8002fb6:	d806      	bhi.n	8002fc6 <UART_SetConfig+0x162>
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d05d      	beq.n	8003078 <UART_SetConfig+0x214>
 8002fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fc0:	d15c      	bne.n	800307c <UART_SetConfig+0x218>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	e7c6      	b.n	8002f54 <UART_SetConfig+0xf0>
 8002fc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fca:	d159      	bne.n	8003080 <UART_SetConfig+0x21c>
 8002fcc:	2308      	movs	r3, #8
 8002fce:	e7c1      	b.n	8002f54 <UART_SetConfig+0xf0>
 8002fd0:	4b53      	ldr	r3, [pc, #332]	; (8003120 <UART_SetConfig+0x2bc>)
 8002fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fde:	d051      	beq.n	8003084 <UART_SetConfig+0x220>
 8002fe0:	d806      	bhi.n	8002ff0 <UART_SetConfig+0x18c>
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d050      	beq.n	8003088 <UART_SetConfig+0x224>
 8002fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fea:	d14f      	bne.n	800308c <UART_SetConfig+0x228>
 8002fec:	2304      	movs	r3, #4
 8002fee:	e7b1      	b.n	8002f54 <UART_SetConfig+0xf0>
 8002ff0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff4:	d14c      	bne.n	8003090 <UART_SetConfig+0x22c>
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	e7ac      	b.n	8002f54 <UART_SetConfig+0xf0>
 8002ffa:	4b49      	ldr	r3, [pc, #292]	; (8003120 <UART_SetConfig+0x2bc>)
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003000:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003008:	d044      	beq.n	8003094 <UART_SetConfig+0x230>
 800300a:	d806      	bhi.n	800301a <UART_SetConfig+0x1b6>
 800300c:	2b00      	cmp	r3, #0
 800300e:	d043      	beq.n	8003098 <UART_SetConfig+0x234>
 8003010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003014:	d142      	bne.n	800309c <UART_SetConfig+0x238>
 8003016:	2304      	movs	r3, #4
 8003018:	e79c      	b.n	8002f54 <UART_SetConfig+0xf0>
 800301a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800301e:	d13f      	bne.n	80030a0 <UART_SetConfig+0x23c>
 8003020:	2308      	movs	r3, #8
 8003022:	e797      	b.n	8002f54 <UART_SetConfig+0xf0>
 8003024:	4b3e      	ldr	r3, [pc, #248]	; (8003120 <UART_SetConfig+0x2bc>)
 8003026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800302e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003032:	d037      	beq.n	80030a4 <UART_SetConfig+0x240>
 8003034:	d805      	bhi.n	8003042 <UART_SetConfig+0x1de>
 8003036:	b3bb      	cbz	r3, 80030a8 <UART_SetConfig+0x244>
 8003038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800303c:	d136      	bne.n	80030ac <UART_SetConfig+0x248>
 800303e:	2304      	movs	r3, #4
 8003040:	e788      	b.n	8002f54 <UART_SetConfig+0xf0>
 8003042:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003046:	d133      	bne.n	80030b0 <UART_SetConfig+0x24c>
 8003048:	2308      	movs	r3, #8
 800304a:	e783      	b.n	8002f54 <UART_SetConfig+0xf0>
 800304c:	2302      	movs	r3, #2
 800304e:	e781      	b.n	8002f54 <UART_SetConfig+0xf0>
 8003050:	2302      	movs	r3, #2
 8003052:	e77f      	b.n	8002f54 <UART_SetConfig+0xf0>
 8003054:	2302      	movs	r3, #2
 8003056:	e77d      	b.n	8002f54 <UART_SetConfig+0xf0>
 8003058:	2300      	movs	r3, #0
 800305a:	e77b      	b.n	8002f54 <UART_SetConfig+0xf0>
 800305c:	2310      	movs	r3, #16
 800305e:	e779      	b.n	8002f54 <UART_SetConfig+0xf0>
 8003060:	2310      	movs	r3, #16
 8003062:	e777      	b.n	8002f54 <UART_SetConfig+0xf0>
 8003064:	2302      	movs	r3, #2
 8003066:	e775      	b.n	8002f54 <UART_SetConfig+0xf0>
 8003068:	2300      	movs	r3, #0
 800306a:	e773      	b.n	8002f54 <UART_SetConfig+0xf0>
 800306c:	2310      	movs	r3, #16
 800306e:	e771      	b.n	8002f54 <UART_SetConfig+0xf0>
 8003070:	2310      	movs	r3, #16
 8003072:	e76f      	b.n	8002f54 <UART_SetConfig+0xf0>
 8003074:	2302      	movs	r3, #2
 8003076:	e76d      	b.n	8002f54 <UART_SetConfig+0xf0>
 8003078:	2300      	movs	r3, #0
 800307a:	e76b      	b.n	8002f54 <UART_SetConfig+0xf0>
 800307c:	2310      	movs	r3, #16
 800307e:	e769      	b.n	8002f54 <UART_SetConfig+0xf0>
 8003080:	2310      	movs	r3, #16
 8003082:	e767      	b.n	8002f54 <UART_SetConfig+0xf0>
 8003084:	2302      	movs	r3, #2
 8003086:	e765      	b.n	8002f54 <UART_SetConfig+0xf0>
 8003088:	2301      	movs	r3, #1
 800308a:	e763      	b.n	8002f54 <UART_SetConfig+0xf0>
 800308c:	2310      	movs	r3, #16
 800308e:	e761      	b.n	8002f54 <UART_SetConfig+0xf0>
 8003090:	2310      	movs	r3, #16
 8003092:	e75f      	b.n	8002f54 <UART_SetConfig+0xf0>
 8003094:	2302      	movs	r3, #2
 8003096:	e75d      	b.n	8002f54 <UART_SetConfig+0xf0>
 8003098:	2300      	movs	r3, #0
 800309a:	e75b      	b.n	8002f54 <UART_SetConfig+0xf0>
 800309c:	2310      	movs	r3, #16
 800309e:	e759      	b.n	8002f54 <UART_SetConfig+0xf0>
 80030a0:	2310      	movs	r3, #16
 80030a2:	e757      	b.n	8002f54 <UART_SetConfig+0xf0>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e755      	b.n	8002f54 <UART_SetConfig+0xf0>
 80030a8:	2300      	movs	r3, #0
 80030aa:	e753      	b.n	8002f54 <UART_SetConfig+0xf0>
 80030ac:	2310      	movs	r3, #16
 80030ae:	e751      	b.n	8002f54 <UART_SetConfig+0xf0>
 80030b0:	2310      	movs	r3, #16
 80030b2:	e74f      	b.n	8002f54 <UART_SetConfig+0xf0>
    switch (clocksource)
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d85b      	bhi.n	8003170 <UART_SetConfig+0x30c>
 80030b8:	e8df f003 	tbb	[pc, r3]
 80030bc:	5a3a3405 	.word	0x5a3a3405
 80030c0:	5a5a5a37 	.word	0x5a5a5a37
 80030c4:	09          	.byte	0x09
 80030c5:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 80030c6:	f7ff faa3 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80030ca:	2800      	cmp	r0, #0
 80030cc:	d052      	beq.n	8003174 <UART_SetConfig+0x310>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030ce:	6862      	ldr	r2, [r4, #4]
 80030d0:	0853      	lsrs	r3, r2, #1
 80030d2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80030d6:	fbb0 f0f2 	udiv	r0, r0, r2
 80030da:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030dc:	f1a0 0210 	sub.w	r2, r0, #16
 80030e0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d847      	bhi.n	8003178 <UART_SetConfig+0x314>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030e8:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030ec:	f3c0 0042 	ubfx	r0, r0, #1, #3
 80030f0:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	60d8      	str	r0, [r3, #12]
 80030f6:	2000      	movs	r0, #0
 80030f8:	e045      	b.n	8003186 <UART_SetConfig+0x322>
 80030fa:	bf00      	nop
 80030fc:	efff69f3 	.word	0xefff69f3
 8003100:	40011000 	.word	0x40011000
 8003104:	40004400 	.word	0x40004400
 8003108:	40004800 	.word	0x40004800
 800310c:	40004c00 	.word	0x40004c00
 8003110:	40005000 	.word	0x40005000
 8003114:	40011400 	.word	0x40011400
 8003118:	40007800 	.word	0x40007800
 800311c:	40007c00 	.word	0x40007c00
 8003120:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK2Freq();
 8003124:	f7ff fa84 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
        break;
 8003128:	e7cf      	b.n	80030ca <UART_SetConfig+0x266>
        pclk = HAL_RCC_GetSysClockFreq();
 800312a:	f7ff f965 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
        break;
 800312e:	e7cc      	b.n	80030ca <UART_SetConfig+0x266>
        pclk = (uint32_t) HSI_VALUE;
 8003130:	4817      	ldr	r0, [pc, #92]	; (8003190 <UART_SetConfig+0x32c>)
 8003132:	e7cc      	b.n	80030ce <UART_SetConfig+0x26a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003134:	4816      	ldr	r0, [pc, #88]	; (8003190 <UART_SetConfig+0x32c>)
 8003136:	e002      	b.n	800313e <UART_SetConfig+0x2da>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003138:	f7ff fa6a 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800313c:	b300      	cbz	r0, 8003180 <UART_SetConfig+0x31c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800313e:	6863      	ldr	r3, [r4, #4]
 8003140:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003144:	fbb0 f0f3 	udiv	r0, r0, r3
 8003148:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800314a:	f1a0 0210 	sub.w	r2, r0, #16
 800314e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003152:	429a      	cmp	r2, r3
 8003154:	d816      	bhi.n	8003184 <UART_SetConfig+0x320>
        huart->Instance->BRR = usartdiv;
 8003156:	6823      	ldr	r3, [r4, #0]
 8003158:	60d8      	str	r0, [r3, #12]
 800315a:	2000      	movs	r0, #0
 800315c:	e013      	b.n	8003186 <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetPCLK2Freq();
 800315e:	f7ff fa67 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
        break;
 8003162:	e7eb      	b.n	800313c <UART_SetConfig+0x2d8>
        pclk = HAL_RCC_GetSysClockFreq();
 8003164:	f7ff f948 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
        break;
 8003168:	e7e8      	b.n	800313c <UART_SetConfig+0x2d8>
        pclk = (uint32_t) LSE_VALUE;
 800316a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800316e:	e7e6      	b.n	800313e <UART_SetConfig+0x2da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003170:	2001      	movs	r0, #1
 8003172:	e008      	b.n	8003186 <UART_SetConfig+0x322>
 8003174:	2000      	movs	r0, #0
 8003176:	e006      	b.n	8003186 <UART_SetConfig+0x322>
        ret = HAL_ERROR;
 8003178:	2001      	movs	r0, #1
 800317a:	e004      	b.n	8003186 <UART_SetConfig+0x322>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800317c:	2001      	movs	r0, #1
 800317e:	e002      	b.n	8003186 <UART_SetConfig+0x322>
 8003180:	2000      	movs	r0, #0
 8003182:	e000      	b.n	8003186 <UART_SetConfig+0x322>
        ret = HAL_ERROR;
 8003184:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8003186:	2300      	movs	r3, #0
 8003188:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 800318a:	66a3      	str	r3, [r4, #104]	; 0x68
}
 800318c:	bd10      	pop	{r4, pc}
 800318e:	bf00      	nop
 8003190:	00f42400 	.word	0x00f42400

08003194 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003194:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003196:	f013 0f01 	tst.w	r3, #1
 800319a:	d006      	beq.n	80031aa <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800319c:	6802      	ldr	r2, [r0, #0]
 800319e:	6853      	ldr	r3, [r2, #4]
 80031a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80031a4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80031a6:	430b      	orrs	r3, r1
 80031a8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80031ac:	f013 0f02 	tst.w	r3, #2
 80031b0:	d006      	beq.n	80031c0 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031b2:	6802      	ldr	r2, [r0, #0]
 80031b4:	6853      	ldr	r3, [r2, #4]
 80031b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ba:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80031bc:	430b      	orrs	r3, r1
 80031be:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80031c2:	f013 0f04 	tst.w	r3, #4
 80031c6:	d006      	beq.n	80031d6 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031c8:	6802      	ldr	r2, [r0, #0]
 80031ca:	6853      	ldr	r3, [r2, #4]
 80031cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80031d2:	430b      	orrs	r3, r1
 80031d4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80031d8:	f013 0f08 	tst.w	r3, #8
 80031dc:	d006      	beq.n	80031ec <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031de:	6802      	ldr	r2, [r0, #0]
 80031e0:	6853      	ldr	r3, [r2, #4]
 80031e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80031e6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80031e8:	430b      	orrs	r3, r1
 80031ea:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80031ee:	f013 0f10 	tst.w	r3, #16
 80031f2:	d006      	beq.n	8003202 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031f4:	6802      	ldr	r2, [r0, #0]
 80031f6:	6893      	ldr	r3, [r2, #8]
 80031f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031fc:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80031fe:	430b      	orrs	r3, r1
 8003200:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003202:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003204:	f013 0f20 	tst.w	r3, #32
 8003208:	d006      	beq.n	8003218 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800320a:	6802      	ldr	r2, [r0, #0]
 800320c:	6893      	ldr	r3, [r2, #8]
 800320e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003212:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003214:	430b      	orrs	r3, r1
 8003216:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003218:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800321a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800321e:	d00a      	beq.n	8003236 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003220:	6802      	ldr	r2, [r0, #0]
 8003222:	6853      	ldr	r3, [r2, #4]
 8003224:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003228:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800322a:	430b      	orrs	r3, r1
 800322c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800322e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003230:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003234:	d00b      	beq.n	800324e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003236:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003238:	f013 0f80 	tst.w	r3, #128	; 0x80
 800323c:	d006      	beq.n	800324c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800323e:	6802      	ldr	r2, [r0, #0]
 8003240:	6853      	ldr	r3, [r2, #4]
 8003242:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003246:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003248:	430b      	orrs	r3, r1
 800324a:	6053      	str	r3, [r2, #4]
}
 800324c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800324e:	6802      	ldr	r2, [r0, #0]
 8003250:	6853      	ldr	r3, [r2, #4]
 8003252:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003256:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003258:	430b      	orrs	r3, r1
 800325a:	6053      	str	r3, [r2, #4]
 800325c:	e7eb      	b.n	8003236 <UART_AdvFeatureConfig+0xa2>

0800325e <UART_WaitOnFlagUntilTimeout>:
{
 800325e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003262:	4605      	mov	r5, r0
 8003264:	460f      	mov	r7, r1
 8003266:	4616      	mov	r6, r2
 8003268:	4699      	mov	r9, r3
 800326a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800326e:	682c      	ldr	r4, [r5, #0]
 8003270:	69e4      	ldr	r4, [r4, #28]
 8003272:	ea37 0304 	bics.w	r3, r7, r4
 8003276:	bf0c      	ite	eq
 8003278:	2401      	moveq	r4, #1
 800327a:	2400      	movne	r4, #0
 800327c:	42b4      	cmp	r4, r6
 800327e:	d13d      	bne.n	80032fc <UART_WaitOnFlagUntilTimeout+0x9e>
    if (Timeout != HAL_MAX_DELAY)
 8003280:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003284:	d0f3      	beq.n	800326e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003286:	f7fd ff0b 	bl	80010a0 <HAL_GetTick>
 800328a:	eba0 0009 	sub.w	r0, r0, r9
 800328e:	4540      	cmp	r0, r8
 8003290:	d822      	bhi.n	80032d8 <UART_WaitOnFlagUntilTimeout+0x7a>
 8003292:	f1b8 0f00 	cmp.w	r8, #0
 8003296:	d01f      	beq.n	80032d8 <UART_WaitOnFlagUntilTimeout+0x7a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003298:	682b      	ldr	r3, [r5, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	f012 0f04 	tst.w	r2, #4
 80032a0:	d0e5      	beq.n	800326e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80032a8:	d0e1      	beq.n	800326e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032ae:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032b0:	682a      	ldr	r2, [r5, #0]
 80032b2:	6813      	ldr	r3, [r2, #0]
 80032b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032b8:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ba:	682a      	ldr	r2, [r5, #0]
 80032bc:	6893      	ldr	r3, [r2, #8]
 80032be:	f023 0301 	bic.w	r3, r3, #1
 80032c2:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 80032c4:	2320      	movs	r3, #32
 80032c6:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80032c8:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032ca:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
          __HAL_UNLOCK(huart);
 80032ce:	2300      	movs	r3, #0
 80032d0:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
          return HAL_TIMEOUT;
 80032d4:	2003      	movs	r0, #3
 80032d6:	e012      	b.n	80032fe <UART_WaitOnFlagUntilTimeout+0xa0>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032d8:	682a      	ldr	r2, [r5, #0]
 80032da:	6813      	ldr	r3, [r2, #0]
 80032dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032e0:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e2:	682a      	ldr	r2, [r5, #0]
 80032e4:	6893      	ldr	r3, [r2, #8]
 80032e6:	f023 0301 	bic.w	r3, r3, #1
 80032ea:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80032ec:	2320      	movs	r3, #32
 80032ee:	67ab      	str	r3, [r5, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80032f0:	67eb      	str	r3, [r5, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 80032f2:	2300      	movs	r3, #0
 80032f4:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
        return HAL_TIMEOUT;
 80032f8:	2003      	movs	r0, #3
 80032fa:	e000      	b.n	80032fe <UART_WaitOnFlagUntilTimeout+0xa0>
  return HAL_OK;
 80032fc:	2000      	movs	r0, #0
}
 80032fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003302 <HAL_UART_Transmit>:
{
 8003302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800330a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800330c:	2b20      	cmp	r3, #32
 800330e:	d15a      	bne.n	80033c6 <HAL_UART_Transmit+0xc4>
 8003310:	4604      	mov	r4, r0
 8003312:	460d      	mov	r5, r1
 8003314:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8003316:	fab2 f382 	clz	r3, r2
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	2900      	cmp	r1, #0
 800331e:	bf08      	it	eq
 8003320:	2301      	moveq	r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d153      	bne.n	80033ce <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8003326:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 800332a:	2b01      	cmp	r3, #1
 800332c:	d051      	beq.n	80033d2 <HAL_UART_Transmit+0xd0>
 800332e:	2301      	movs	r3, #1
 8003330:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003334:	2300      	movs	r3, #0
 8003336:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800333a:	2321      	movs	r3, #33	; 0x21
 800333c:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 800333e:	f7fd feaf 	bl	80010a0 <HAL_GetTick>
 8003342:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8003344:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8003348:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800334c:	68a3      	ldr	r3, [r4, #8]
 800334e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003352:	d005      	beq.n	8003360 <HAL_UART_Transmit+0x5e>
      pdata16bits = NULL;
 8003354:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8003358:	2300      	movs	r3, #0
 800335a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 800335e:	e014      	b.n	800338a <HAL_UART_Transmit+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003360:	6923      	ldr	r3, [r4, #16]
 8003362:	b113      	cbz	r3, 800336a <HAL_UART_Transmit+0x68>
      pdata16bits = NULL;
 8003364:	f04f 0800 	mov.w	r8, #0
 8003368:	e7f6      	b.n	8003358 <HAL_UART_Transmit+0x56>
      pdata16bits = (uint16_t *) pData;
 800336a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800336c:	2500      	movs	r5, #0
 800336e:	e7f3      	b.n	8003358 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003370:	f838 3b02 	ldrh.w	r3, [r8], #2
 8003374:	6822      	ldr	r2, [r4, #0]
 8003376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800337a:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800337c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8003380:	b292      	uxth	r2, r2
 8003382:	3a01      	subs	r2, #1
 8003384:	b292      	uxth	r2, r2
 8003386:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800338a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800338e:	b29b      	uxth	r3, r3
 8003390:	b173      	cbz	r3, 80033b0 <HAL_UART_Transmit+0xae>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003392:	9600      	str	r6, [sp, #0]
 8003394:	463b      	mov	r3, r7
 8003396:	2200      	movs	r2, #0
 8003398:	2180      	movs	r1, #128	; 0x80
 800339a:	4620      	mov	r0, r4
 800339c:	f7ff ff5f 	bl	800325e <UART_WaitOnFlagUntilTimeout>
 80033a0:	b9c8      	cbnz	r0, 80033d6 <HAL_UART_Transmit+0xd4>
      if (pdata8bits == NULL)
 80033a2:	2d00      	cmp	r5, #0
 80033a4:	d0e4      	beq.n	8003370 <HAL_UART_Transmit+0x6e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033a6:	f815 2b01 	ldrb.w	r2, [r5], #1
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033ae:	e7e5      	b.n	800337c <HAL_UART_Transmit+0x7a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033b0:	9600      	str	r6, [sp, #0]
 80033b2:	463b      	mov	r3, r7
 80033b4:	2200      	movs	r2, #0
 80033b6:	2140      	movs	r1, #64	; 0x40
 80033b8:	4620      	mov	r0, r4
 80033ba:	f7ff ff50 	bl	800325e <UART_WaitOnFlagUntilTimeout>
 80033be:	b960      	cbnz	r0, 80033da <HAL_UART_Transmit+0xd8>
    huart->gState = HAL_UART_STATE_READY;
 80033c0:	2320      	movs	r3, #32
 80033c2:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80033c4:	e000      	b.n	80033c8 <HAL_UART_Transmit+0xc6>
    return HAL_BUSY;
 80033c6:	2002      	movs	r0, #2
}
 80033c8:	b002      	add	sp, #8
 80033ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80033ce:	2001      	movs	r0, #1
 80033d0:	e7fa      	b.n	80033c8 <HAL_UART_Transmit+0xc6>
    __HAL_LOCK(huart);
 80033d2:	2002      	movs	r0, #2
 80033d4:	e7f8      	b.n	80033c8 <HAL_UART_Transmit+0xc6>
        return HAL_TIMEOUT;
 80033d6:	2003      	movs	r0, #3
 80033d8:	e7f6      	b.n	80033c8 <HAL_UART_Transmit+0xc6>
      return HAL_TIMEOUT;
 80033da:	2003      	movs	r0, #3
 80033dc:	e7f4      	b.n	80033c8 <HAL_UART_Transmit+0xc6>

080033de <UART_CheckIdleState>:
{
 80033de:	b510      	push	{r4, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e4:	2300      	movs	r3, #0
 80033e6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80033ea:	f7fd fe59 	bl	80010a0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f013 0f08 	tst.w	r3, #8
 80033f6:	d108      	bne.n	800340a <UART_CheckIdleState+0x2c>
  huart->gState = HAL_UART_STATE_READY;
 80033f8:	2320      	movs	r3, #32
 80033fa:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80033fc:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033fe:	2000      	movs	r0, #0
 8003400:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8003402:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
}
 8003406:	b002      	add	sp, #8
 8003408:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800340a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	4603      	mov	r3, r0
 8003412:	2200      	movs	r2, #0
 8003414:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003418:	4620      	mov	r0, r4
 800341a:	f7ff ff20 	bl	800325e <UART_WaitOnFlagUntilTimeout>
 800341e:	2800      	cmp	r0, #0
 8003420:	d0ea      	beq.n	80033f8 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003422:	2003      	movs	r0, #3
 8003424:	e7ef      	b.n	8003406 <UART_CheckIdleState+0x28>

08003426 <HAL_UART_Init>:
  if (huart == NULL)
 8003426:	b368      	cbz	r0, 8003484 <HAL_UART_Init+0x5e>
{
 8003428:	b510      	push	{r4, lr}
 800342a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800342c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800342e:	b303      	cbz	r3, 8003472 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8003430:	2324      	movs	r3, #36	; 0x24
 8003432:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8003434:	6822      	ldr	r2, [r4, #0]
 8003436:	6813      	ldr	r3, [r2, #0]
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800343e:	4620      	mov	r0, r4
 8003440:	f7ff fd10 	bl	8002e64 <UART_SetConfig>
 8003444:	2801      	cmp	r0, #1
 8003446:	d013      	beq.n	8003470 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003448:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800344a:	b9bb      	cbnz	r3, 800347c <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800344c:	6822      	ldr	r2, [r4, #0]
 800344e:	6853      	ldr	r3, [r2, #4]
 8003450:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003454:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003456:	6822      	ldr	r2, [r4, #0]
 8003458:	6893      	ldr	r3, [r2, #8]
 800345a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800345e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003460:	6822      	ldr	r2, [r4, #0]
 8003462:	6813      	ldr	r3, [r2, #0]
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800346a:	4620      	mov	r0, r4
 800346c:	f7ff ffb7 	bl	80033de <UART_CheckIdleState>
}
 8003470:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003472:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8003476:	f7fd fd33 	bl	8000ee0 <HAL_UART_MspInit>
 800347a:	e7d9      	b.n	8003430 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 800347c:	4620      	mov	r0, r4
 800347e:	f7ff fe89 	bl	8003194 <UART_AdvFeatureConfig>
 8003482:	e7e3      	b.n	800344c <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8003484:	2001      	movs	r0, #1
}
 8003486:	4770      	bx	lr

08003488 <_ZN22ButtonEventsLedFlasher20onButtonShortPressedEh>:
		leds[i]->startBehavior();
	}
}

void ButtonEventsLedFlasher::onButtonShortPressed(
		interface::ButtonEventsHandlerObserver::ButtonIndex buttonIndex) {
 8003488:	b508      	push	{r3, lr}
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 800348a:	6843      	ldr	r3, [r0, #4]
	leds[buttonIndex]->onShortPress();
 800348c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003490:	f001 ff20 	bl	80052d4 <_ZN10LedStateSm12onShortPressEv>
}
 8003494:	bd08      	pop	{r3, pc}

08003496 <_ZN22ButtonEventsLedFlasher19onButtonLongPressedEh>:

void ButtonEventsLedFlasher::onButtonLongPressed(
		interface::ButtonEventsHandlerObserver::ButtonIndex buttonIndex) {
 8003496:	b508      	push	{r3, lr}
 8003498:	6843      	ldr	r3, [r0, #4]
	leds[buttonIndex]->onLongPress();
 800349a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800349e:	f001 ff28 	bl	80052f2 <_ZN10LedStateSm11onLongPressEv>
}
 80034a2:	bd08      	pop	{r3, pc}

080034a4 <_ZN22ButtonEventsLedFlasher17startLedsBehaviorEv>:
void ButtonEventsLedFlasher::startLedsBehavior() {
 80034a4:	b538      	push	{r3, r4, r5, lr}
 80034a6:	4605      	mov	r5, r0
	for(int i = 0; i < 4; i++) {
 80034a8:	2400      	movs	r4, #0
 80034aa:	e006      	b.n	80034ba <_ZN22ButtonEventsLedFlasher17startLedsBehaviorEv+0x16>
 80034ac:	686b      	ldr	r3, [r5, #4]
		leds[i]->startBehavior();
 80034ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80034b2:	6803      	ldr	r3, [r0, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	4798      	blx	r3
	for(int i = 0; i < 4; i++) {
 80034b8:	3401      	adds	r4, #1
 80034ba:	2c03      	cmp	r4, #3
 80034bc:	ddf6      	ble.n	80034ac <_ZN22ButtonEventsLedFlasher17startLedsBehaviorEv+0x8>
}
 80034be:	bd38      	pop	{r3, r4, r5, pc}

080034c0 <_ZNSt6vectorIP10LedStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80034c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034c4:	b083      	sub	sp, #12
 80034c6:	4688      	mov	r8, r1
 80034c8:	4693      	mov	fp, r2
 80034ca:	2301      	movs	r3, #1
 80034cc:	9300      	str	r3, [sp, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80034ce:	6842      	ldr	r2, [r0, #4]
 80034d0:	6803      	ldr	r3, [r0, #0]
 80034d2:	1ad3      	subs	r3, r2, r3

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 80034d4:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
 80034d8:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
 80034dc:	d038      	beq.n	8003550 <_ZNSt6vectorIP10LedStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x90>
 80034de:	4604      	mov	r4, r0
 80034e0:	109e      	asrs	r6, r3, #2
	  __throw_length_error(__N(__s));

	const size_type __len = size() + (std::max)(size(), __n);
 80034e2:	9601      	str	r6, [sp, #4]
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80034e4:	2e00      	cmp	r6, #0
 80034e6:	d036      	beq.n	8003556 <_ZNSt6vectorIP10LedStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x96>
	return __b;
      return __a;
 80034e8:	ab01      	add	r3, sp, #4
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	4406      	add	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80034ee:	6823      	ldr	r3, [r4, #0]
 80034f0:	1ad2      	subs	r2, r2, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80034f2:	ebb6 0fa2 	cmp.w	r6, r2, asr #2
 80034f6:	d330      	bcc.n	800355a <_ZNSt6vectorIP10LedStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
 80034f8:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 80034fc:	d230      	bcs.n	8003560 <_ZNSt6vectorIP10LedStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 80034fe:	f8d4 9000 	ldr.w	r9, [r4]
      pointer __old_finish = this->_M_impl._M_finish;
 8003502:	f8d4 a004 	ldr.w	sl, [r4, #4]
  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8003506:	eba8 0509 	sub.w	r5, r8, r9
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800350a:	b376      	cbz	r6, 800356a <_ZNSt6vectorIP10LedStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xaa>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD pointer
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
	if (__n > this->max_size())
 800350c:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 8003510:	d229      	bcs.n	8003566 <_ZNSt6vectorIP10LedStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa6>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003512:	00b0      	lsls	r0, r6, #2
 8003514:	f007 ff8d 	bl	800b432 <_Znwj>
 8003518:	4607      	mov	r7, r0
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800351a:	f8db 3000 	ldr.w	r3, [fp]
 800351e:	517b      	str	r3, [r7, r5]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
 8003520:	2d00      	cmp	r5, #0
 8003522:	dc24      	bgt.n	800356e <_ZNSt6vectorIP10LedStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xae>
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 8003524:	3504      	adds	r5, #4
 8003526:	443d      	add	r5, r7
      ptrdiff_t __count = __last - __first;
 8003528:	ebaa 0a08 	sub.w	sl, sl, r8
      if (__count > 0)
 800352c:	f1ba 0f00 	cmp.w	sl, #0
 8003530:	dc23      	bgt.n	800357a <_ZNSt6vectorIP10LedStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xba>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
      return __result + __count;
 8003532:	4455      	add	r5, sl
	if (__p)
 8003534:	f1b9 0f00 	cmp.w	r9, #0
 8003538:	d002      	beq.n	8003540 <_ZNSt6vectorIP10LedStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x80>
	::operator delete(__p);
 800353a:	4648      	mov	r0, r9
 800353c:	f007 ff66 	bl	800b40c <_ZdlPv>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
 8003540:	6027      	str	r7, [r4, #0]
      this->_M_impl._M_finish = __new_finish;
 8003542:	6065      	str	r5, [r4, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003544:	eb07 0686 	add.w	r6, r7, r6, lsl #2
 8003548:	60a6      	str	r6, [r4, #8]
    }
 800354a:	b003      	add	sp, #12
 800354c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  __throw_length_error(__N(__s));
 8003550:	480d      	ldr	r0, [pc, #52]	; (8003588 <_ZNSt6vectorIP10LedStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xc8>)
 8003552:	f007 ff94 	bl	800b47e <_ZSt20__throw_length_errorPKc>
	return __b;
 8003556:	466b      	mov	r3, sp
 8003558:	e7c7      	b.n	80034ea <_ZNSt6vectorIP10LedStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800355a:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
 800355e:	e7ce      	b.n	80034fe <_ZNSt6vectorIP10LedStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
 8003560:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
 8003564:	e7cb      	b.n	80034fe <_ZNSt6vectorIP10LedStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	  std::__throw_bad_alloc();
 8003566:	f007 ff84 	bl	800b472 <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800356a:	2700      	movs	r7, #0
 800356c:	e7d5      	b.n	800351a <_ZNSt6vectorIP10LedStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800356e:	462a      	mov	r2, r5
 8003570:	4649      	mov	r1, r9
 8003572:	4638      	mov	r0, r7
 8003574:	f008 fa08 	bl	800b988 <memmove>
 8003578:	e7d4      	b.n	8003524 <_ZNSt6vectorIP10LedStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x64>
 800357a:	4652      	mov	r2, sl
 800357c:	4641      	mov	r1, r8
 800357e:	4628      	mov	r0, r5
 8003580:	f008 fa02 	bl	800b988 <memmove>
 8003584:	e7d5      	b.n	8003532 <_ZNSt6vectorIP10LedStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x72>
 8003586:	bf00      	nop
 8003588:	0800d23c 	.word	0x0800d23c

0800358c <_ZNSt6vectorIP10LedStateSmSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800358c:	b508      	push	{r3, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800358e:	6843      	ldr	r3, [r0, #4]
 8003590:	6882      	ldr	r2, [r0, #8]
 8003592:	4293      	cmp	r3, r2
 8003594:	d005      	beq.n	80035a2 <_ZNSt6vectorIP10LedStateSmSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x16>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003596:	680a      	ldr	r2, [r1, #0]
 8003598:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish;
 800359a:	6843      	ldr	r3, [r0, #4]
 800359c:	3304      	adds	r3, #4
 800359e:	6043      	str	r3, [r0, #4]
      }
 80035a0:	bd08      	pop	{r3, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80035a2:	460a      	mov	r2, r1
 80035a4:	4619      	mov	r1, r3
 80035a6:	f7ff ff8b 	bl	80034c0 <_ZNSt6vectorIP10LedStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80035aa:	e7f9      	b.n	80035a0 <_ZNSt6vectorIP10LedStateSmSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x14>

080035ac <_ZN22ButtonEventsLedFlasherC1Ev>:
ButtonEventsLedFlasher::ButtonEventsLedFlasher() {
 80035ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ae:	b083      	sub	sp, #12
 80035b0:	4606      	mov	r6, r0
 80035b2:	4607      	mov	r7, r0
 80035b4:	4b0e      	ldr	r3, [pc, #56]	; (80035f0 <_ZN22ButtonEventsLedFlasherC1Ev+0x44>)
 80035b6:	f847 3b04 	str.w	r3, [r7], #4
	: _M_start(), _M_finish(), _M_end_of_storage()
 80035ba:	2400      	movs	r4, #0
 80035bc:	6044      	str	r4, [r0, #4]
 80035be:	6084      	str	r4, [r0, #8]
 80035c0:	60c4      	str	r4, [r0, #12]
 80035c2:	3010      	adds	r0, #16
 80035c4:	f002 f884 	bl	80056d0 <_ZN13LedControllerC1Ev>
	for(int i = 0; i < 4; i++) {
 80035c8:	e00d      	b.n	80035e6 <_ZN22ButtonEventsLedFlasherC1Ev+0x3a>
		leds.push_back(new LedStateSm(i, this));
 80035ca:	2020      	movs	r0, #32
 80035cc:	f007 ff31 	bl	800b432 <_Znwj>
 80035d0:	4605      	mov	r5, r0
 80035d2:	4632      	mov	r2, r6
 80035d4:	4621      	mov	r1, r4
 80035d6:	f001 fe6b 	bl	80052b0 <_ZN10LedStateSmC1EiP22ButtonEventsLedFlasher>
 80035da:	9501      	str	r5, [sp, #4]
      { emplace_back(std::move(__x)); }
 80035dc:	a901      	add	r1, sp, #4
 80035de:	4638      	mov	r0, r7
 80035e0:	f7ff ffd4 	bl	800358c <_ZNSt6vectorIP10LedStateSmSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
	for(int i = 0; i < 4; i++) {
 80035e4:	3401      	adds	r4, #1
 80035e6:	2c03      	cmp	r4, #3
 80035e8:	ddef      	ble.n	80035ca <_ZN22ButtonEventsLedFlasherC1Ev+0x1e>
}
 80035ea:	4630      	mov	r0, r6
 80035ec:	b003      	add	sp, #12
 80035ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035f0:	0800ce38 	.word	0x0800ce38

080035f4 <_ZN22ButtonEventsLedFlasher11getInstanceEv>:
	static ButtonEventsLedFlasher ledFlash;
 80035f4:	4b0d      	ldr	r3, [pc, #52]	; (800362c <_ZN22ButtonEventsLedFlasher11getInstanceEv+0x38>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	f3bf 8f5b 	dmb	ish
 80035fc:	f013 0f01 	tst.w	r3, #1
 8003600:	d001      	beq.n	8003606 <_ZN22ButtonEventsLedFlasher11getInstanceEv+0x12>
}
 8003602:	480b      	ldr	r0, [pc, #44]	; (8003630 <_ZN22ButtonEventsLedFlasher11getInstanceEv+0x3c>)
 8003604:	4770      	bx	lr
ButtonEventsLedFlasher* ButtonEventsLedFlasher::getInstance() {
 8003606:	b510      	push	{r4, lr}
	static ButtonEventsLedFlasher ledFlash;
 8003608:	4808      	ldr	r0, [pc, #32]	; (800362c <_ZN22ButtonEventsLedFlasher11getInstanceEv+0x38>)
 800360a:	f007 ff03 	bl	800b414 <__cxa_guard_acquire>
 800360e:	b908      	cbnz	r0, 8003614 <_ZN22ButtonEventsLedFlasher11getInstanceEv+0x20>
}
 8003610:	4807      	ldr	r0, [pc, #28]	; (8003630 <_ZN22ButtonEventsLedFlasher11getInstanceEv+0x3c>)
 8003612:	bd10      	pop	{r4, pc}
	static ButtonEventsLedFlasher ledFlash;
 8003614:	4c05      	ldr	r4, [pc, #20]	; (800362c <_ZN22ButtonEventsLedFlasher11getInstanceEv+0x38>)
 8003616:	1d20      	adds	r0, r4, #4
 8003618:	f7ff ffc8 	bl	80035ac <_ZN22ButtonEventsLedFlasherC1Ev>
 800361c:	4620      	mov	r0, r4
 800361e:	f007 ff05 	bl	800b42c <__cxa_guard_release>
 8003622:	4804      	ldr	r0, [pc, #16]	; (8003634 <_ZN22ButtonEventsLedFlasher11getInstanceEv+0x40>)
 8003624:	f008 f956 	bl	800b8d4 <atexit>
 8003628:	e7f2      	b.n	8003610 <_ZN22ButtonEventsLedFlasher11getInstanceEv+0x1c>
 800362a:	bf00      	nop
 800362c:	200000c4 	.word	0x200000c4
 8003630:	200000c8 	.word	0x200000c8
 8003634:	08003659 	.word	0x08003659

08003638 <_ZN22ButtonEventsLedFlasherD1Ev>:
ButtonEventsLedFlasher::~ButtonEventsLedFlasher() {
 8003638:	b510      	push	{r4, lr}
 800363a:	4604      	mov	r4, r0
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <_ZN22ButtonEventsLedFlasherD1Ev+0x1c>)
 800363e:	f840 3b10 	str.w	r3, [r0], #16
 8003642:	f001 ffc0 	bl	80055c6 <_ZN13LedControllerD1Ev>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003646:	6860      	ldr	r0, [r4, #4]
	if (__p)
 8003648:	b108      	cbz	r0, 800364e <_ZN22ButtonEventsLedFlasherD1Ev+0x16>
	::operator delete(__p);
 800364a:	f007 fedf 	bl	800b40c <_ZdlPv>
}
 800364e:	4620      	mov	r0, r4
 8003650:	bd10      	pop	{r4, pc}
 8003652:	bf00      	nop
 8003654:	0800ce38 	.word	0x0800ce38

08003658 <__tcf_0>:
	static ButtonEventsLedFlasher ledFlash;
 8003658:	b508      	push	{r3, lr}
 800365a:	4802      	ldr	r0, [pc, #8]	; (8003664 <__tcf_0+0xc>)
 800365c:	f7ff ffec 	bl	8003638 <_ZN22ButtonEventsLedFlasherD1Ev>
 8003660:	bd08      	pop	{r3, pc}
 8003662:	bf00      	nop
 8003664:	200000c8 	.word	0x200000c8

08003668 <_ZN22ButtonEventsLedFlasherD0Ev>:
ButtonEventsLedFlasher::~ButtonEventsLedFlasher() {
 8003668:	b510      	push	{r4, lr}
 800366a:	4604      	mov	r4, r0
}
 800366c:	f7ff ffe4 	bl	8003638 <_ZN22ButtonEventsLedFlasherD1Ev>
 8003670:	2134      	movs	r1, #52	; 0x34
 8003672:	4620      	mov	r0, r4
 8003674:	f007 fecc 	bl	800b410 <_ZdlPvj>
 8003678:	4620      	mov	r0, r4
 800367a:	bd10      	pop	{r4, pc}

0800367c <_ZN3app18ButtonEventsLoggerD1Ev>:
	// TODO Auto-generated constructor stub
}

ButtonEventsLogger::~ButtonEventsLogger() {
	// TODO Auto-generated destructor stub
}
 800367c:	4770      	bx	lr

0800367e <_ZN3app18ButtonEventsLoggerD0Ev>:
ButtonEventsLogger::~ButtonEventsLogger() {
 800367e:	b510      	push	{r4, lr}
 8003680:	4604      	mov	r4, r0
}
 8003682:	2104      	movs	r1, #4
 8003684:	f007 fec4 	bl	800b410 <_ZdlPvj>
 8003688:	4620      	mov	r0, r4
 800368a:	bd10      	pop	{r4, pc}

0800368c <_ZN3app18ButtonEventsLoggerC1Ev>:
ButtonEventsLogger::ButtonEventsLogger() {
 800368c:	4b01      	ldr	r3, [pc, #4]	; (8003694 <_ZN3app18ButtonEventsLoggerC1Ev+0x8>)
 800368e:	6003      	str	r3, [r0, #0]
}
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	0800ce50 	.word	0x0800ce50

08003698 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8003698:	b570      	push	{r4, r5, r6, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	4605      	mov	r5, r0
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 800369e:	460e      	mov	r6, r1
 80036a0:	b161      	cbz	r1, 80036bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x24>
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80036a2:	1b94      	subs	r4, r2, r6
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80036a4:	9401      	str	r4, [sp, #4]

	if (__dnew > size_type(_S_local_capacity))
 80036a6:	2c0f      	cmp	r4, #15
 80036a8:	d80d      	bhi.n	80036c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2e>
      _M_length(size_type __length)
      { _M_string_length = __length; }

      pointer
      _M_data() const
      { return _M_dataplus._M_p; }
 80036aa:	6828      	ldr	r0, [r5, #0]
      // When __n = 1 way faster than the general multichar
      // traits_type::copy/move/assign.
      static void
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
	if (__n == 1)
 80036ac:	2c01      	cmp	r4, #1
 80036ae:	d013      	beq.n	80036d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x40>
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
	if (__n == 0)
 80036b0:	b1a4      	cbz	r4, 80036dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>
	  return __s1;
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 80036b2:	4622      	mov	r2, r4
 80036b4:	4631      	mov	r1, r6
 80036b6:	f008 f959 	bl	800b96c <memcpy>
 80036ba:	e00f      	b.n	80036dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 80036bc:	4291      	cmp	r1, r2
 80036be:	d0f0      	beq.n	80036a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0xa>
	  std::__throw_logic_error(__N("basic_string::"
 80036c0:	480a      	ldr	r0, [pc, #40]	; (80036ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x54>)
 80036c2:	f007 fed9 	bl	800b478 <_ZSt19__throw_logic_errorPKc>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 80036c6:	2200      	movs	r2, #0
 80036c8:	a901      	add	r1, sp, #4
 80036ca:	4628      	mov	r0, r5
 80036cc:	f007 ff8e 	bl	800b5ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_dataplus._M_p = __p; }
 80036d0:	6028      	str	r0, [r5, #0]
	    _M_capacity(__dnew);
 80036d2:	9b01      	ldr	r3, [sp, #4]
      { _M_allocated_capacity = __capacity; }
 80036d4:	60ab      	str	r3, [r5, #8]
 80036d6:	e7e8      	b.n	80036aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
      { __c1 = __c2; }
 80036d8:	7833      	ldrb	r3, [r6, #0]
 80036da:	7003      	strb	r3, [r0, #0]
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 80036dc:	9b01      	ldr	r3, [sp, #4]
      { _M_string_length = __length; }
 80036de:	606b      	str	r3, [r5, #4]
      { return _M_dataplus._M_p; }
 80036e0:	682a      	ldr	r2, [r5, #0]
 80036e2:	2100      	movs	r1, #0
 80036e4:	54d1      	strb	r1, [r2, r3]
      }
 80036e6:	b002      	add	sp, #8
 80036e8:	bd70      	pop	{r4, r5, r6, pc}
 80036ea:	bf00      	nop
 80036ec:	0800d258 	.word	0x0800d258

080036f0 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 80036f0:	b408      	push	{r3}
 80036f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	4604      	mov	r4, r0
 80036fa:	460e      	mov	r6, r1
 80036fc:	4611      	mov	r1, r2
 80036fe:	f107 031c 	add.w	r3, r7, #28
 8003702:	f853 2b04 	ldr.w	r2, [r3], #4
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8003706:	1dc8      	adds	r0, r1, #7
 8003708:	f020 0007 	bic.w	r0, r0, #7
 800370c:	ebad 0d00 	sub.w	sp, sp, r0
 8003710:	466d      	mov	r5, sp
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8003712:	607b      	str	r3, [r7, #4]

      const int __len = __convf(__s, __n, __fmt, __args);
 8003714:	4628      	mov	r0, r5
 8003716:	47b0      	blx	r6
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8003718:	f104 0308 	add.w	r3, r4, #8
	: allocator_type(__a), _M_p(__dat) { }
 800371c:	6023      	str	r3, [r4, #0]
          _M_construct(__beg, __end, _Tag());
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	182a      	adds	r2, r5, r0
 8003724:	4629      	mov	r1, r5
 8003726:	4620      	mov	r0, r4
 8003728:	f7ff ffb6 	bl	8003698 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
    }
 800372c:	4620      	mov	r0, r4
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003736:	b001      	add	sp, #4
 8003738:	4770      	bx	lr
	...

0800373c <_ZN3app18ButtonEventsLogger20onButtonShortPressedEh>:

void ButtonEventsLogger::onButtonShortPressed(interface::ButtonEventsHandlerObserver::ButtonIndex buttonIndex) {
 800373c:	b570      	push	{r4, r5, r6, lr}
 800373e:	b094      	sub	sp, #80	; 0x50

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
					   "%d", __val); }
 8003740:	9100      	str	r1, [sp, #0]
 8003742:	4b34      	ldr	r3, [pc, #208]	; (8003814 <_ZN3app18ButtonEventsLogger20onButtonShortPressedEh+0xd8>)
 8003744:	2210      	movs	r2, #16
 8003746:	4934      	ldr	r1, [pc, #208]	; (8003818 <_ZN3app18ButtonEventsLogger20onButtonShortPressedEh+0xdc>)
 8003748:	a80e      	add	r0, sp, #56	; 0x38
 800374a:	f7ff ffd1 	bl	80036f0 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
      { return _M_string_length; }
 800374e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
	return __testoff ? __off : this->size() - __pos;
 8003750:	b102      	cbz	r2, 8003754 <_ZN3app18ButtonEventsLogger20onButtonShortPressedEh+0x18>
 8003752:	2200      	movs	r2, #0
			  _M_limit(__pos, __n1), __s, __n2);
 8003754:	2307      	movs	r3, #7
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	4b30      	ldr	r3, [pc, #192]	; (800381c <_ZN3app18ButtonEventsLogger20onButtonShortPressedEh+0xe0>)
 800375a:	2100      	movs	r1, #0
 800375c:	a80e      	add	r0, sp, #56	; 0x38
 800375e:	f007 ffd9 	bl	800b714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8003762:	4604      	mov	r4, r0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8003764:	ab0a      	add	r3, sp, #40	; 0x28
 8003766:	9308      	str	r3, [sp, #32]
      { return _M_dataplus._M_p; }
 8003768:	4605      	mov	r5, r0
 800376a:	f855 3b08 	ldr.w	r3, [r5], #8
	if (__str._M_is_local())
 800376e:	42ab      	cmp	r3, r5
 8003770:	d03f      	beq.n	80037f2 <_ZN3app18ButtonEventsLogger20onButtonShortPressedEh+0xb6>
      { _M_dataplus._M_p = __p; }
 8003772:	9308      	str	r3, [sp, #32]
	    _M_capacity(__str._M_allocated_capacity);
 8003774:	6883      	ldr	r3, [r0, #8]
      { _M_allocated_capacity = __capacity; }
 8003776:	930a      	str	r3, [sp, #40]	; 0x28
      { return _M_string_length; }
 8003778:	6863      	ldr	r3, [r4, #4]
      { _M_string_length = __length; }
 800377a:	9309      	str	r3, [sp, #36]	; 0x24
      { _M_dataplus._M_p = __p; }
 800377c:	6025      	str	r5, [r4, #0]
      { _M_string_length = __length; }
 800377e:	2300      	movs	r3, #0
 8003780:	6063      	str	r3, [r4, #4]
 8003782:	7223      	strb	r3, [r4, #8]
	if (this->max_size() - (this->size() - __n1) < __n2)
 8003784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003786:	f1c3 537f 	rsb	r3, r3, #1069547520	; 0x3fc00000
 800378a:	f503 137f 	add.w	r3, r3, #4177920	; 0x3fc000
 800378e:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8003792:	333f      	adds	r3, #63	; 0x3f
 8003794:	2b0d      	cmp	r3, #13
 8003796:	d933      	bls.n	8003800 <_ZN3app18ButtonEventsLogger20onButtonShortPressedEh+0xc4>
	return _M_append(__s, __n);
 8003798:	220e      	movs	r2, #14
 800379a:	4921      	ldr	r1, [pc, #132]	; (8003820 <_ZN3app18ButtonEventsLogger20onButtonShortPressedEh+0xe4>)
 800379c:	a808      	add	r0, sp, #32
 800379e:	f008 f837 	bl	800b810 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80037a2:	4604      	mov	r4, r0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 80037a4:	ab04      	add	r3, sp, #16
 80037a6:	9302      	str	r3, [sp, #8]
      { return _M_dataplus._M_p; }
 80037a8:	4605      	mov	r5, r0
 80037aa:	f855 3b08 	ldr.w	r3, [r5], #8
	if (__str._M_is_local())
 80037ae:	42ab      	cmp	r3, r5
 80037b0:	d029      	beq.n	8003806 <_ZN3app18ButtonEventsLogger20onButtonShortPressedEh+0xca>
      { _M_dataplus._M_p = __p; }
 80037b2:	9302      	str	r3, [sp, #8]
	    _M_capacity(__str._M_allocated_capacity);
 80037b4:	6883      	ldr	r3, [r0, #8]
      { _M_allocated_capacity = __capacity; }
 80037b6:	9304      	str	r3, [sp, #16]
      { return _M_string_length; }
 80037b8:	6863      	ldr	r3, [r4, #4]
      { _M_string_length = __length; }
 80037ba:	9303      	str	r3, [sp, #12]
      { _M_dataplus._M_p = __p; }
 80037bc:	6025      	str	r5, [r4, #0]
      { _M_string_length = __length; }
 80037be:	2300      	movs	r3, #0
 80037c0:	6063      	str	r3, [r4, #4]
 80037c2:	7223      	strb	r3, [r4, #8]
	Trace::out("Button " + to_string(buttonIndex) + " short pressed");
 80037c4:	a802      	add	r0, sp, #8
 80037c6:	f002 f83d 	bl	8005844 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
      { return _M_dataplus._M_p; }
 80037ca:	9802      	ldr	r0, [sp, #8]
	if (!_M_is_local())
 80037cc:	ab04      	add	r3, sp, #16
 80037ce:	4298      	cmp	r0, r3
 80037d0:	d001      	beq.n	80037d6 <_ZN3app18ButtonEventsLogger20onButtonShortPressedEh+0x9a>
 80037d2:	f007 fe1b 	bl	800b40c <_ZdlPv>
      { return _M_dataplus._M_p; }
 80037d6:	9808      	ldr	r0, [sp, #32]
	if (!_M_is_local())
 80037d8:	ab0a      	add	r3, sp, #40	; 0x28
 80037da:	4298      	cmp	r0, r3
 80037dc:	d001      	beq.n	80037e2 <_ZN3app18ButtonEventsLogger20onButtonShortPressedEh+0xa6>
 80037de:	f007 fe15 	bl	800b40c <_ZdlPv>
      { return _M_dataplus._M_p; }
 80037e2:	980e      	ldr	r0, [sp, #56]	; 0x38
	if (!_M_is_local())
 80037e4:	ab10      	add	r3, sp, #64	; 0x40
 80037e6:	4298      	cmp	r0, r3
 80037e8:	d001      	beq.n	80037ee <_ZN3app18ButtonEventsLogger20onButtonShortPressedEh+0xb2>
 80037ea:	f007 fe0f 	bl	800b40c <_ZdlPv>
}
 80037ee:	b014      	add	sp, #80	; 0x50
 80037f0:	bd70      	pop	{r4, r5, r6, pc}
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 80037f2:	ae0a      	add	r6, sp, #40	; 0x28
 80037f4:	6828      	ldr	r0, [r5, #0]
 80037f6:	6869      	ldr	r1, [r5, #4]
 80037f8:	68aa      	ldr	r2, [r5, #8]
 80037fa:	68eb      	ldr	r3, [r5, #12]
 80037fc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80037fe:	e7bb      	b.n	8003778 <_ZN3app18ButtonEventsLogger20onButtonShortPressedEh+0x3c>
	  __throw_length_error(__N(__s));
 8003800:	4808      	ldr	r0, [pc, #32]	; (8003824 <_ZN3app18ButtonEventsLogger20onButtonShortPressedEh+0xe8>)
 8003802:	f007 fe3c 	bl	800b47e <_ZSt20__throw_length_errorPKc>
 8003806:	ae04      	add	r6, sp, #16
 8003808:	6828      	ldr	r0, [r5, #0]
 800380a:	6869      	ldr	r1, [r5, #4]
 800380c:	68aa      	ldr	r2, [r5, #8]
 800380e:	68eb      	ldr	r3, [r5, #12]
 8003810:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003812:	e7d1      	b.n	80037b8 <_ZN3app18ButtonEventsLogger20onButtonShortPressedEh+0x7c>
 8003814:	0800d284 	.word	0x0800d284
 8003818:	0800c1fd 	.word	0x0800c1fd
 800381c:	0800d288 	.word	0x0800d288
 8003820:	0800d2a8 	.word	0x0800d2a8
 8003824:	0800d290 	.word	0x0800d290

08003828 <_ZN3app18ButtonEventsLogger19onButtonLongPressedEh>:

void ButtonEventsLogger::onButtonLongPressed(interface::ButtonEventsHandlerObserver::ButtonIndex buttonIndex) {
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	b094      	sub	sp, #80	; 0x50
					   "%d", __val); }
 800382c:	9100      	str	r1, [sp, #0]
 800382e:	4b34      	ldr	r3, [pc, #208]	; (8003900 <_ZN3app18ButtonEventsLogger19onButtonLongPressedEh+0xd8>)
 8003830:	2210      	movs	r2, #16
 8003832:	4934      	ldr	r1, [pc, #208]	; (8003904 <_ZN3app18ButtonEventsLogger19onButtonLongPressedEh+0xdc>)
 8003834:	a80e      	add	r0, sp, #56	; 0x38
 8003836:	f7ff ff5b 	bl	80036f0 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
      { return _M_string_length; }
 800383a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
	return __testoff ? __off : this->size() - __pos;
 800383c:	b102      	cbz	r2, 8003840 <_ZN3app18ButtonEventsLogger19onButtonLongPressedEh+0x18>
 800383e:	2200      	movs	r2, #0
			  _M_limit(__pos, __n1), __s, __n2);
 8003840:	2307      	movs	r3, #7
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	4b30      	ldr	r3, [pc, #192]	; (8003908 <_ZN3app18ButtonEventsLogger19onButtonLongPressedEh+0xe0>)
 8003846:	2100      	movs	r1, #0
 8003848:	a80e      	add	r0, sp, #56	; 0x38
 800384a:	f007 ff63 	bl	800b714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800384e:	4604      	mov	r4, r0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8003850:	ab0a      	add	r3, sp, #40	; 0x28
 8003852:	9308      	str	r3, [sp, #32]
      { return _M_dataplus._M_p; }
 8003854:	4605      	mov	r5, r0
 8003856:	f855 3b08 	ldr.w	r3, [r5], #8
	if (__str._M_is_local())
 800385a:	42ab      	cmp	r3, r5
 800385c:	d03f      	beq.n	80038de <_ZN3app18ButtonEventsLogger19onButtonLongPressedEh+0xb6>
      { _M_dataplus._M_p = __p; }
 800385e:	9308      	str	r3, [sp, #32]
	    _M_capacity(__str._M_allocated_capacity);
 8003860:	6883      	ldr	r3, [r0, #8]
      { _M_allocated_capacity = __capacity; }
 8003862:	930a      	str	r3, [sp, #40]	; 0x28
      { return _M_string_length; }
 8003864:	6863      	ldr	r3, [r4, #4]
      { _M_string_length = __length; }
 8003866:	9309      	str	r3, [sp, #36]	; 0x24
      { _M_dataplus._M_p = __p; }
 8003868:	6025      	str	r5, [r4, #0]
      { _M_string_length = __length; }
 800386a:	2300      	movs	r3, #0
 800386c:	6063      	str	r3, [r4, #4]
      { __c1 = __c2; }
 800386e:	7223      	strb	r3, [r4, #8]
	if (this->max_size() - (this->size() - __n1) < __n2)
 8003870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003872:	f1c3 537f 	rsb	r3, r3, #1069547520	; 0x3fc00000
 8003876:	f503 137f 	add.w	r3, r3, #4177920	; 0x3fc000
 800387a:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 800387e:	333f      	adds	r3, #63	; 0x3f
 8003880:	2b0c      	cmp	r3, #12
 8003882:	d933      	bls.n	80038ec <_ZN3app18ButtonEventsLogger19onButtonLongPressedEh+0xc4>
	return _M_append(__s, __n);
 8003884:	220d      	movs	r2, #13
 8003886:	4921      	ldr	r1, [pc, #132]	; (800390c <_ZN3app18ButtonEventsLogger19onButtonLongPressedEh+0xe4>)
 8003888:	a808      	add	r0, sp, #32
 800388a:	f007 ffc1 	bl	800b810 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800388e:	4604      	mov	r4, r0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8003890:	ab04      	add	r3, sp, #16
 8003892:	9302      	str	r3, [sp, #8]
      { return _M_dataplus._M_p; }
 8003894:	4605      	mov	r5, r0
 8003896:	f855 3b08 	ldr.w	r3, [r5], #8
	if (__str._M_is_local())
 800389a:	42ab      	cmp	r3, r5
 800389c:	d029      	beq.n	80038f2 <_ZN3app18ButtonEventsLogger19onButtonLongPressedEh+0xca>
      { _M_dataplus._M_p = __p; }
 800389e:	9302      	str	r3, [sp, #8]
	    _M_capacity(__str._M_allocated_capacity);
 80038a0:	6883      	ldr	r3, [r0, #8]
      { _M_allocated_capacity = __capacity; }
 80038a2:	9304      	str	r3, [sp, #16]
      { return _M_string_length; }
 80038a4:	6863      	ldr	r3, [r4, #4]
      { _M_string_length = __length; }
 80038a6:	9303      	str	r3, [sp, #12]
      { _M_dataplus._M_p = __p; }
 80038a8:	6025      	str	r5, [r4, #0]
      { _M_string_length = __length; }
 80038aa:	2300      	movs	r3, #0
 80038ac:	6063      	str	r3, [r4, #4]
 80038ae:	7223      	strb	r3, [r4, #8]
	Trace::out("Button " + to_string(buttonIndex) + " long pressed");
 80038b0:	a802      	add	r0, sp, #8
 80038b2:	f001 ffc7 	bl	8005844 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
      { return _M_dataplus._M_p; }
 80038b6:	9802      	ldr	r0, [sp, #8]
	if (!_M_is_local())
 80038b8:	ab04      	add	r3, sp, #16
 80038ba:	4298      	cmp	r0, r3
 80038bc:	d001      	beq.n	80038c2 <_ZN3app18ButtonEventsLogger19onButtonLongPressedEh+0x9a>
 80038be:	f007 fda5 	bl	800b40c <_ZdlPv>
      { return _M_dataplus._M_p; }
 80038c2:	9808      	ldr	r0, [sp, #32]
	if (!_M_is_local())
 80038c4:	ab0a      	add	r3, sp, #40	; 0x28
 80038c6:	4298      	cmp	r0, r3
 80038c8:	d001      	beq.n	80038ce <_ZN3app18ButtonEventsLogger19onButtonLongPressedEh+0xa6>
 80038ca:	f007 fd9f 	bl	800b40c <_ZdlPv>
      { return _M_dataplus._M_p; }
 80038ce:	980e      	ldr	r0, [sp, #56]	; 0x38
	if (!_M_is_local())
 80038d0:	ab10      	add	r3, sp, #64	; 0x40
 80038d2:	4298      	cmp	r0, r3
 80038d4:	d001      	beq.n	80038da <_ZN3app18ButtonEventsLogger19onButtonLongPressedEh+0xb2>
 80038d6:	f007 fd99 	bl	800b40c <_ZdlPv>
}
 80038da:	b014      	add	sp, #80	; 0x50
 80038dc:	bd70      	pop	{r4, r5, r6, pc}
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 80038de:	ae0a      	add	r6, sp, #40	; 0x28
 80038e0:	6828      	ldr	r0, [r5, #0]
 80038e2:	6869      	ldr	r1, [r5, #4]
 80038e4:	68aa      	ldr	r2, [r5, #8]
 80038e6:	68eb      	ldr	r3, [r5, #12]
 80038e8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80038ea:	e7bb      	b.n	8003864 <_ZN3app18ButtonEventsLogger19onButtonLongPressedEh+0x3c>
	  __throw_length_error(__N(__s));
 80038ec:	4808      	ldr	r0, [pc, #32]	; (8003910 <_ZN3app18ButtonEventsLogger19onButtonLongPressedEh+0xe8>)
 80038ee:	f007 fdc6 	bl	800b47e <_ZSt20__throw_length_errorPKc>
 80038f2:	ae04      	add	r6, sp, #16
 80038f4:	6828      	ldr	r0, [r5, #0]
 80038f6:	6869      	ldr	r1, [r5, #4]
 80038f8:	68aa      	ldr	r2, [r5, #8]
 80038fa:	68eb      	ldr	r3, [r5, #12]
 80038fc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80038fe:	e7d1      	b.n	80038a4 <_ZN3app18ButtonEventsLogger19onButtonLongPressedEh+0x7c>
 8003900:	0800d284 	.word	0x0800d284
 8003904:	0800c1fd 	.word	0x0800c1fd
 8003908:	0800d288 	.word	0x0800d288
 800390c:	0800d2b8 	.word	0x0800d2b8
 8003910:	0800d290 	.word	0x0800d290

08003914 <_ZN3app7Factory10initializeEv>:

}

// static
void Factory::initialize()
{
 8003914:	b538      	push	{r3, r4, r5, lr}
    Trace::initialize();
 8003916:	f001 ff8d 	bl	8005834 <_ZN5Trace10initializeEv>

    // TODO: Initialize factory attributes here
    btnEvLog = new ButtonEventsLogger();
 800391a:	2004      	movs	r0, #4
 800391c:	f007 fd89 	bl	800b432 <_Znwj>
 8003920:	4605      	mov	r5, r0
 8003922:	f7ff feb3 	bl	800368c <_ZN3app18ButtonEventsLoggerC1Ev>
 8003926:	4c0b      	ldr	r4, [pc, #44]	; (8003954 <_ZN3app7Factory10initializeEv+0x40>)
 8003928:	6025      	str	r5, [r4, #0]
    btnEvHand = ButtonEventsHandler::getInstance();
 800392a:	f001 fae9 	bl	8004f00 <_ZN19ButtonEventsHandler11getInstanceEv>
 800392e:	6060      	str	r0, [r4, #4]
    ledFlash = ButtonEventsLedFlasher::getInstance();
 8003930:	f7ff fe60 	bl	80035f4 <_ZN22ButtonEventsLedFlasher11getInstanceEv>
 8003934:	60a0      	str	r0, [r4, #8]
    btnEvHand->subscribe(btnEvLog);
 8003936:	6860      	ldr	r0, [r4, #4]
 8003938:	6803      	ldr	r3, [r0, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	6821      	ldr	r1, [r4, #0]
 800393e:	4798      	blx	r3
    btnEvHand->subscribe(ledFlash);
 8003940:	6860      	ldr	r0, [r4, #4]
 8003942:	6803      	ldr	r3, [r0, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	68a1      	ldr	r1, [r4, #8]
 8003948:	4798      	blx	r3
    btnCtrl = ButtonsController::getInstance();
 800394a:	f001 fd65 	bl	8005418 <_ZN17ButtonsController11getInstanceEv>
 800394e:	60e0      	str	r0, [r4, #12]

#if defined(TOUCHGFX_ENABLED) && (TOUCHGFX_ENABLED != 0)
    getTouchGfxTask().initialize(_buttonEventsHandler);
#endif
}
 8003950:	bd38      	pop	{r3, r4, r5, pc}
 8003952:	bf00      	nop
 8003954:	200000fc 	.word	0x200000fc

08003958 <_ZN3app7Factory5buildEv>:

// static
void Factory::build()
{
 8003958:	b510      	push	{r4, lr}
//    Trace::out("Factory: Creating app components...");

    // Start state machine(s)
	btnEvHand->startButtonsBehavior();
 800395a:	4c06      	ldr	r4, [pc, #24]	; (8003974 <_ZN3app7Factory5buildEv+0x1c>)
 800395c:	6860      	ldr	r0, [r4, #4]
 800395e:	f001 f990 	bl	8004c82 <_ZN19ButtonEventsHandler20startButtonsBehaviorEv>
	ledFlash->startLedsBehavior();
 8003962:	68a0      	ldr	r0, [r4, #8]
 8003964:	f7ff fd9e 	bl	80034a4 <_ZN22ButtonEventsLedFlasher17startLedsBehaviorEv>
	btnCtrl->startBehavior();
 8003968:	68e0      	ldr	r0, [r4, #12]
 800396a:	6883      	ldr	r3, [r0, #8]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	3008      	adds	r0, #8
 8003970:	4798      	blx	r3
    // TODO: Start state-machines here

#if defined(TOUCHGFX_ENABLED) && (TOUCHGFX_ENABLED != 0)
    getTouchGfxTask().start();
#endif
}
 8003972:	bd10      	pop	{r4, pc}
 8003974:	200000fc 	.word	0x200000fc

08003978 <Factory_initialize>:
#endif // TOUCHGFX_ENABLED

} /* namespace app */

void Factory_initialize()
{
 8003978:	b508      	push	{r3, lr}
    app::Factory::initialize();
 800397a:	f7ff ffcb 	bl	8003914 <_ZN3app7Factory10initializeEv>
}
 800397e:	bd08      	pop	{r3, pc}

08003980 <Factory_build>:

void Factory_build()
{
 8003980:	b508      	push	{r3, lr}
    app::Factory::build();
 8003982:	f7ff ffe9 	bl	8003958 <_ZN3app7Factory5buildEv>
}
 8003986:	bd08      	pop	{r3, pc}

08003988 <_ZNK13XFCustomEvent18deleteAfterConsumeEv>:

    /**
     * @brief Tells the XF if the event should be deleted after processing.
     * @return True if the event should be deleted.
     */
    bool deleteAfterConsume() const override { return bDeleteAfterConsume_; }
 8003988:	7c00      	ldrb	r0, [r0, #16]
 800398a:	4770      	bx	lr

0800398c <_ZN11evButtonIrqD1Ev>:
/**
 * @brief Event used in GPIO ISR (interrupt service routine).
 *
 * Is send on rising and falling edge of the signal.
 */
class evButtonIrq : public XFCustomEvent
 800398c:	4770      	bx	lr

0800398e <_ZN11evButtonIrqD0Ev>:
 800398e:	b510      	push	{r4, lr}
 8003990:	4604      	mov	r4, r0
 8003992:	2114      	movs	r1, #20
 8003994:	f007 fd3c 	bl	800b410 <_ZdlPvj>
 8003998:	4620      	mov	r0, r4
 800399a:	bd10      	pop	{r4, pc}

0800399c <_ZN11evButtonIrqC1Ev>:
#include "events.h"
#include "evbuttonirq.h"

evButtonIrq::evButtonIrq() :
 800399c:	b510      	push	{r4, lr}
 800399e:	4604      	mov	r4, r0
    XFCustomEvent(evButtonIrqId)
 80039a0:	2200      	movs	r2, #0
 80039a2:	2101      	movs	r1, #1
 80039a4:	f002 f922 	bl	8005bec <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>
 80039a8:	4b02      	ldr	r3, [pc, #8]	; (80039b4 <_ZN11evButtonIrqC1Ev+0x18>)
 80039aa:	6023      	str	r3, [r4, #0]
protected:
    /**
     * @brief Setter for #_bDeleteAfterConsume attribute.
     * @param bDeleteAfterConsume Parameter to be assigned. Default: true.
     */
    void setDeleteAfterConsume(bool bDeleteAfterConsume = true) { bDeleteAfterConsume_ = bDeleteAfterConsume; }
 80039ac:	2300      	movs	r3, #0
 80039ae:	7423      	strb	r3, [r4, #16]
{
	setDeleteAfterConsume(false);
}
 80039b0:	4620      	mov	r0, r4
 80039b2:	bd10      	pop	{r4, pc}
 80039b4:	0800d2d0 	.word	0x0800d2d0

080039b8 <_ZN17evButtonLongPressD1Ev>:
/**
 * @brief Event send when button is pressed.
 *
 * Used internally in state-machine handling one particular button.
 */
class evButtonLongPress : public XFCustomEvent
 80039b8:	4770      	bx	lr

080039ba <_ZN17evButtonLongPressD0Ev>:
 80039ba:	b510      	push	{r4, lr}
 80039bc:	4604      	mov	r4, r0
 80039be:	2114      	movs	r1, #20
 80039c0:	f007 fd26 	bl	800b410 <_ZdlPvj>
 80039c4:	4620      	mov	r0, r4
 80039c6:	bd10      	pop	{r4, pc}

080039c8 <_ZN17evButtonLongPressC1Ev>:
#include "events.h"
#include "evbuttonlongpress.h"

evButtonLongPress::evButtonLongPress() :
 80039c8:	b510      	push	{r4, lr}
 80039ca:	4604      	mov	r4, r0
    XFCustomEvent(evButtonLongPressId)
 80039cc:	2200      	movs	r2, #0
 80039ce:	2105      	movs	r1, #5
 80039d0:	f002 f90c 	bl	8005bec <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>
 80039d4:	4b01      	ldr	r3, [pc, #4]	; (80039dc <_ZN17evButtonLongPressC1Ev+0x14>)
 80039d6:	6023      	str	r3, [r4, #0]
{

}
 80039d8:	4620      	mov	r0, r4
 80039da:	bd10      	pop	{r4, pc}
 80039dc:	0800d2e4 	.word	0x0800d2e4

080039e0 <_ZN15evButtonPressedD1Ev>:
/**
 * @brief Event send when button is pressed.
 *
 * Used internally in state-machine handling one particular button.
 */
class evButtonPressed : public XFCustomEvent
 80039e0:	4770      	bx	lr

080039e2 <_ZN15evButtonPressedD0Ev>:
 80039e2:	b510      	push	{r4, lr}
 80039e4:	4604      	mov	r4, r0
 80039e6:	2114      	movs	r1, #20
 80039e8:	f007 fd12 	bl	800b410 <_ZdlPvj>
 80039ec:	4620      	mov	r0, r4
 80039ee:	bd10      	pop	{r4, pc}

080039f0 <_ZN15evButtonPressedC1Ev>:
#include "events.h"
#include "evbuttonpressed.h"

evButtonPressed::evButtonPressed() :
 80039f0:	b510      	push	{r4, lr}
 80039f2:	4604      	mov	r4, r0
    XFCustomEvent(evButtonPressedId)
 80039f4:	2200      	movs	r2, #0
 80039f6:	2102      	movs	r1, #2
 80039f8:	f002 f8f8 	bl	8005bec <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>
 80039fc:	4b01      	ldr	r3, [pc, #4]	; (8003a04 <_ZN15evButtonPressedC1Ev+0x14>)
 80039fe:	6023      	str	r3, [r4, #0]
{

}
 8003a00:	4620      	mov	r0, r4
 8003a02:	bd10      	pop	{r4, pc}
 8003a04:	0800d2f8 	.word	0x0800d2f8

08003a08 <_ZN16evButtonReleasedD1Ev>:
/**
 * @brief Event send when button is released.
 *
 * Used internally in state-machine handling one particular button.
 */
class evButtonReleased : public XFCustomEvent
 8003a08:	4770      	bx	lr

08003a0a <_ZN16evButtonReleasedD0Ev>:
 8003a0a:	b510      	push	{r4, lr}
 8003a0c:	4604      	mov	r4, r0
 8003a0e:	2114      	movs	r1, #20
 8003a10:	f007 fcfe 	bl	800b410 <_ZdlPvj>
 8003a14:	4620      	mov	r0, r4
 8003a16:	bd10      	pop	{r4, pc}

08003a18 <_ZN16evButtonReleasedC1Ev>:
#include "events.h"
#include "event/evbuttonreleased.h"

evButtonReleased::evButtonReleased() :
 8003a18:	b510      	push	{r4, lr}
 8003a1a:	4604      	mov	r4, r0
    XFCustomEvent(evButtonReleasedId)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2103      	movs	r1, #3
 8003a20:	f002 f8e4 	bl	8005bec <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>
 8003a24:	4b01      	ldr	r3, [pc, #4]	; (8003a2c <_ZN16evButtonReleasedC1Ev+0x14>)
 8003a26:	6023      	str	r3, [r4, #0]
{

}
 8003a28:	4620      	mov	r0, r4
 8003a2a:	bd10      	pop	{r4, pc}
 8003a2c:	0800d30c 	.word	0x0800d30c

08003a30 <_ZN18evButtonShortPressD1Ev>:
/**
 * @brief Event send when button is pressed.
 *
 * Used internally in state-machine handling one particular button.
 */
class evButtonShortPress : public XFCustomEvent
 8003a30:	4770      	bx	lr

08003a32 <_ZN18evButtonShortPressD0Ev>:
 8003a32:	b510      	push	{r4, lr}
 8003a34:	4604      	mov	r4, r0
 8003a36:	2114      	movs	r1, #20
 8003a38:	f007 fcea 	bl	800b410 <_ZdlPvj>
 8003a3c:	4620      	mov	r0, r4
 8003a3e:	bd10      	pop	{r4, pc}

08003a40 <_ZN18evButtonShortPressC1Ev>:
#include "events.h"
#include "evbuttonshortpress.h"

evButtonShortPress::evButtonShortPress() :
 8003a40:	b510      	push	{r4, lr}
 8003a42:	4604      	mov	r4, r0
    XFCustomEvent(evButtonShortPressId)
 8003a44:	2200      	movs	r2, #0
 8003a46:	2104      	movs	r1, #4
 8003a48:	f002 f8d0 	bl	8005bec <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>
 8003a4c:	4b01      	ldr	r3, [pc, #4]	; (8003a54 <_ZN18evButtonShortPressC1Ev+0x14>)
 8003a4e:	6023      	str	r3, [r4, #0]
{

}
 8003a50:	4620      	mov	r0, r4
 8003a52:	bd10      	pop	{r4, pc}
 8003a54:	0800d320 	.word	0x0800d320

08003a58 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8003a58:	4770      	bx	lr

08003a5a <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	4770      	bx	lr

08003a5e <ft5336_TS_ClearIT>:
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
  /* Nothing to be done here for FT5336 */
}
 8003a5e:	4770      	bx	lr

08003a60 <ft5336_Get_I2C_InitializedStatus>:
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
}
 8003a60:	4b01      	ldr	r3, [pc, #4]	; (8003a68 <ft5336_Get_I2C_InitializedStatus+0x8>)
 8003a62:	7818      	ldrb	r0, [r3, #0]
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	2000010c 	.word	0x2000010c

08003a6c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8003a6c:	b508      	push	{r3, lr}
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8003a6e:	f7ff fff7 	bl	8003a60 <ft5336_Get_I2C_InitializedStatus>
 8003a72:	b910      	cbnz	r0, 8003a7a <ft5336_I2C_InitializeIfRequired+0xe>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8003a74:	4b01      	ldr	r3, [pc, #4]	; (8003a7c <ft5336_I2C_InitializeIfRequired+0x10>)
 8003a76:	2201      	movs	r2, #1
 8003a78:	701a      	strb	r2, [r3, #0]
  }
}
 8003a7a:	bd08      	pop	{r3, pc}
 8003a7c:	2000010c 	.word	0x2000010c

08003a80 <ft5336_Init>:
{
 8003a80:	b508      	push	{r3, lr}
  ft5336_I2C_InitializeIfRequired();
 8003a82:	f7ff fff3 	bl	8003a6c <ft5336_I2C_InitializeIfRequired>
}
 8003a86:	bd08      	pop	{r3, pc}

08003a88 <ft5336_ReadID>:
{
 8003a88:	b570      	push	{r4, r5, r6, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	4606      	mov	r6, r0
  volatile uint8_t ucReadId = 0;
 8003a8e:	2400      	movs	r4, #0
 8003a90:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_I2C_InitializeIfRequired();
 8003a94:	f7ff ffea 	bl	8003a6c <ft5336_I2C_InitializeIfRequired>
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8003a98:	4625      	mov	r5, r4
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8003a9a:	e001      	b.n	8003aa0 <ft5336_ReadID+0x18>
 8003a9c:	3401      	adds	r4, #1
 8003a9e:	b2e4      	uxtb	r4, r4
 8003aa0:	f085 0301 	eor.w	r3, r5, #1
 8003aa4:	2c02      	cmp	r4, #2
 8003aa6:	bf8c      	ite	hi
 8003aa8:	2300      	movhi	r3, #0
 8003aaa:	f003 0301 	andls.w	r3, r3, #1
 8003aae:	b163      	cbz	r3, 8003aca <ft5336_ReadID+0x42>
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8003ab0:	21a8      	movs	r1, #168	; 0xa8
 8003ab2:	b2f0      	uxtb	r0, r6
 8003ab4:	f000 fb8c 	bl	80041d0 <TS_IO_Read>
 8003ab8:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 8003abc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b51      	cmp	r3, #81	; 0x51
 8003ac4:	d1ea      	bne.n	8003a9c <ft5336_ReadID+0x14>
      bFoundDevice = 1;
 8003ac6:	2501      	movs	r5, #1
 8003ac8:	e7e8      	b.n	8003a9c <ft5336_ReadID+0x14>
  return (ucReadId);
 8003aca:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8003ace:	b002      	add	sp, #8
 8003ad0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003ad4 <ft5336_TS_DetectTouch>:
{
 8003ad4:	b500      	push	{lr}
 8003ad6:	b083      	sub	sp, #12
  volatile uint8_t nbTouch = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f88d 3007 	strb.w	r3, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8003ade:	2102      	movs	r1, #2
 8003ae0:	b2c0      	uxtb	r0, r0
 8003ae2:	f000 fb75 	bl	80041d0 <TS_IO_Read>
 8003ae6:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 8003aea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8003af6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b05      	cmp	r3, #5
 8003afe:	d902      	bls.n	8003b06 <ft5336_TS_DetectTouch+0x32>
    nbTouch = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	f88d 3007 	strb.w	r3, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8003b06:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003b0a:	4b04      	ldr	r3, [pc, #16]	; (8003b1c <ft5336_TS_DetectTouch+0x48>)
 8003b0c:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8003b0e:	2200      	movs	r2, #0
 8003b10:	709a      	strb	r2, [r3, #2]
  return(nbTouch);
 8003b12:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8003b16:	b003      	add	sp, #12
 8003b18:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b1c:	2000010c 	.word	0x2000010c

08003b20 <ft5336_TS_GetXY>:
{
 8003b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b24:	b082      	sub	sp, #8
 8003b26:	4616      	mov	r6, r2
  volatile uint8_t ucReadData = 0;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8003b2e:	4a4e      	ldr	r2, [pc, #312]	; (8003c68 <ft5336_TS_GetXY+0x148>)
 8003b30:	7893      	ldrb	r3, [r2, #2]
 8003b32:	7852      	ldrb	r2, [r2, #1]
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d24c      	bcs.n	8003bd2 <ft5336_TS_GetXY+0xb2>
 8003b38:	460f      	mov	r7, r1
    switch(ft5336_handle.currActiveTouchIdx)
 8003b3a:	2b09      	cmp	r3, #9
 8003b3c:	d806      	bhi.n	8003b4c <ft5336_TS_GetXY+0x2c>
 8003b3e:	e8df f003 	tbb	[pc, r3]
 8003b42:	0b8b      	.short	0x0b8b
 8003b44:	635b534b 	.word	0x635b534b
 8003b48:	837b736b 	.word	0x837b736b
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8003b4c:	f04f 0800 	mov.w	r8, #0
 8003b50:	46c1      	mov	r9, r8
 8003b52:	46c2      	mov	sl, r8
 8003b54:	4641      	mov	r1, r8
 8003b56:	e006      	b.n	8003b66 <ft5336_TS_GetXY+0x46>
      regAddressYHigh = FT5336_P2_YH_REG;
 8003b58:	f04f 080b 	mov.w	r8, #11
      regAddressYLow  = FT5336_P2_YL_REG;
 8003b5c:	f04f 090c 	mov.w	r9, #12
      regAddressXHigh = FT5336_P2_XH_REG;
 8003b60:	f04f 0a09 	mov.w	sl, #9
      regAddressXLow  = FT5336_P2_XL_REG;
 8003b64:	210a      	movs	r1, #10
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8003b66:	b2c4      	uxtb	r4, r0
 8003b68:	4620      	mov	r0, r4
 8003b6a:	f000 fb31 	bl	80041d0 <TS_IO_Read>
 8003b6e:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003b72:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003b76:	4d3c      	ldr	r5, [pc, #240]	; (8003c68 <ft5336_TS_GetXY+0x148>)
 8003b78:	80ab      	strh	r3, [r5, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8003b7a:	4651      	mov	r1, sl
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	f000 fb27 	bl	80041d0 <TS_IO_Read>
 8003b82:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003b86:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003b8a:	021b      	lsls	r3, r3, #8
 8003b8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b90:	88aa      	ldrh	r2, [r5, #4]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	80ab      	strh	r3, [r5, #4]
    *X = coord;
 8003b98:	803b      	strh	r3, [r7, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8003b9a:	4649      	mov	r1, r9
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	f000 fb17 	bl	80041d0 <TS_IO_Read>
 8003ba2:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003ba6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003baa:	80ab      	strh	r3, [r5, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8003bac:	4641      	mov	r1, r8
 8003bae:	4620      	mov	r0, r4
 8003bb0:	f000 fb0e 	bl	80041d0 <TS_IO_Read>
 8003bb4:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003bb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003bbc:	021b      	lsls	r3, r3, #8
 8003bbe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003bc2:	88aa      	ldrh	r2, [r5, #4]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	80ab      	strh	r3, [r5, #4]
    *Y = coord;
 8003bca:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8003bcc:	78ab      	ldrb	r3, [r5, #2]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	70ab      	strb	r3, [r5, #2]
}
 8003bd2:	b002      	add	sp, #8
 8003bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      regAddressYHigh = FT5336_P3_YH_REG;
 8003bd8:	f04f 0811 	mov.w	r8, #17
      regAddressYLow  = FT5336_P3_YL_REG;
 8003bdc:	f04f 0912 	mov.w	r9, #18
      regAddressXHigh = FT5336_P3_XH_REG;
 8003be0:	f04f 0a0f 	mov.w	sl, #15
      regAddressXLow  = FT5336_P3_XL_REG;
 8003be4:	2110      	movs	r1, #16
      break;
 8003be6:	e7be      	b.n	8003b66 <ft5336_TS_GetXY+0x46>
      regAddressYHigh = FT5336_P4_YH_REG;
 8003be8:	f04f 0817 	mov.w	r8, #23
      regAddressYLow  = FT5336_P4_YL_REG;
 8003bec:	f04f 0918 	mov.w	r9, #24
      regAddressXHigh = FT5336_P4_XH_REG;
 8003bf0:	f04f 0a15 	mov.w	sl, #21
      regAddressXLow  = FT5336_P4_XL_REG;
 8003bf4:	2116      	movs	r1, #22
      break;
 8003bf6:	e7b6      	b.n	8003b66 <ft5336_TS_GetXY+0x46>
      regAddressYHigh = FT5336_P5_YH_REG;
 8003bf8:	f04f 081d 	mov.w	r8, #29
      regAddressYLow  = FT5336_P5_YL_REG;
 8003bfc:	f04f 091e 	mov.w	r9, #30
      regAddressXHigh = FT5336_P5_XH_REG;
 8003c00:	f04f 0a1b 	mov.w	sl, #27
      regAddressXLow  = FT5336_P5_XL_REG;
 8003c04:	211c      	movs	r1, #28
      break;
 8003c06:	e7ae      	b.n	8003b66 <ft5336_TS_GetXY+0x46>
      regAddressYHigh = FT5336_P6_YH_REG;
 8003c08:	f04f 0823 	mov.w	r8, #35	; 0x23
      regAddressYLow  = FT5336_P6_YL_REG;
 8003c0c:	f04f 0924 	mov.w	r9, #36	; 0x24
      regAddressXHigh = FT5336_P6_XH_REG;
 8003c10:	f04f 0a21 	mov.w	sl, #33	; 0x21
      regAddressXLow  = FT5336_P6_XL_REG;
 8003c14:	2122      	movs	r1, #34	; 0x22
      break;
 8003c16:	e7a6      	b.n	8003b66 <ft5336_TS_GetXY+0x46>
      regAddressYHigh = FT5336_P7_YH_REG;
 8003c18:	f04f 0829 	mov.w	r8, #41	; 0x29
      regAddressYLow  = FT5336_P7_YL_REG;
 8003c1c:	f04f 092a 	mov.w	r9, #42	; 0x2a
      regAddressXHigh = FT5336_P7_XH_REG;
 8003c20:	f04f 0a27 	mov.w	sl, #39	; 0x27
      regAddressXLow  = FT5336_P7_XL_REG;
 8003c24:	2128      	movs	r1, #40	; 0x28
      break;
 8003c26:	e79e      	b.n	8003b66 <ft5336_TS_GetXY+0x46>
      regAddressYHigh = FT5336_P8_YH_REG;
 8003c28:	f04f 082f 	mov.w	r8, #47	; 0x2f
      regAddressYLow  = FT5336_P8_YL_REG;
 8003c2c:	f04f 0930 	mov.w	r9, #48	; 0x30
      regAddressXHigh = FT5336_P8_XH_REG;
 8003c30:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
      regAddressXLow  = FT5336_P8_XL_REG;
 8003c34:	212e      	movs	r1, #46	; 0x2e
      break;
 8003c36:	e796      	b.n	8003b66 <ft5336_TS_GetXY+0x46>
      regAddressYHigh = FT5336_P9_YH_REG;
 8003c38:	f04f 0835 	mov.w	r8, #53	; 0x35
      regAddressYLow  = FT5336_P9_YL_REG;
 8003c3c:	f04f 0936 	mov.w	r9, #54	; 0x36
      regAddressXHigh = FT5336_P9_XH_REG;
 8003c40:	f04f 0a33 	mov.w	sl, #51	; 0x33
      regAddressXLow  = FT5336_P9_XL_REG;
 8003c44:	2134      	movs	r1, #52	; 0x34
      break;
 8003c46:	e78e      	b.n	8003b66 <ft5336_TS_GetXY+0x46>
      regAddressYHigh = FT5336_P10_YH_REG;
 8003c48:	f04f 083b 	mov.w	r8, #59	; 0x3b
      regAddressYLow  = FT5336_P10_YL_REG;
 8003c4c:	f04f 093c 	mov.w	r9, #60	; 0x3c
      regAddressXHigh = FT5336_P10_XH_REG;
 8003c50:	f04f 0a39 	mov.w	sl, #57	; 0x39
      regAddressXLow  = FT5336_P10_XL_REG;
 8003c54:	213a      	movs	r1, #58	; 0x3a
      break;
 8003c56:	e786      	b.n	8003b66 <ft5336_TS_GetXY+0x46>
      regAddressYHigh = FT5336_P1_YH_REG;
 8003c58:	f04f 0805 	mov.w	r8, #5
      regAddressYLow  = FT5336_P1_YL_REG;
 8003c5c:	f04f 0906 	mov.w	r9, #6
      regAddressXHigh = FT5336_P1_XH_REG;
 8003c60:	f04f 0a03 	mov.w	sl, #3
      regAddressXLow  = FT5336_P1_XL_REG;
 8003c64:	2104      	movs	r1, #4
 8003c66:	e77e      	b.n	8003b66 <ft5336_TS_GetXY+0x46>
 8003c68:	2000010c 	.word	0x2000010c

08003c6c <ft5336_TS_EnableIT>:
{
 8003c6c:	b508      	push	{r3, lr}
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8003c6e:	2201      	movs	r2, #1
 8003c70:	21a4      	movs	r1, #164	; 0xa4
 8003c72:	b2c0      	uxtb	r0, r0
 8003c74:	f000 fa98 	bl	80041a8 <TS_IO_Write>
}
 8003c78:	bd08      	pop	{r3, pc}

08003c7a <ft5336_TS_DisableIT>:
{
 8003c7a:	b508      	push	{r3, lr}
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	21a4      	movs	r1, #164	; 0xa4
 8003c80:	b2c0      	uxtb	r0, r0
 8003c82:	f000 fa91 	bl	80041a8 <TS_IO_Write>
}
 8003c86:	bd08      	pop	{r3, pc}

08003c88 <ft5336_TS_Start>:
{
 8003c88:	b508      	push	{r3, lr}
  ft5336_TS_DisableIT(DeviceAddr);
 8003c8a:	f7ff fff6 	bl	8003c7a <ft5336_TS_DisableIT>
}
 8003c8e:	bd08      	pop	{r3, pc}

08003c90 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
    {
        return Event::EVENT_CLICK;
    }
 8003c90:	2000      	movs	r0, #0
 8003c92:	4770      	bx	lr

08003c94 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
    {
        return Event::EVENT_DRAG;
    }
 8003c94:	2001      	movs	r0, #1
 8003c96:	4770      	bx	lr

08003c98 <_ZN8touchgfx9DragEventD1Ev>:
class DragEvent : public Event
 8003c98:	4770      	bx	lr

08003c9a <_ZN8touchgfx10ClickEventD1Ev>:
class ClickEvent : public Event
 8003c9a:	4770      	bx	lr

08003c9c <_ZN8touchgfx10ClickEventD0Ev>:
 8003c9c:	b510      	push	{r4, lr}
 8003c9e:	4604      	mov	r4, r0
 8003ca0:	210c      	movs	r1, #12
 8003ca2:	f007 fbb5 	bl	800b410 <_ZdlPvj>
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	bd10      	pop	{r4, pc}

08003caa <_ZN8touchgfx9DragEventD0Ev>:
 8003caa:	b510      	push	{r4, lr}
 8003cac:	4604      	mov	r4, r0
 8003cae:	2110      	movs	r1, #16
 8003cb0:	f007 fbae 	bl	800b410 <_ZdlPvj>
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	bd10      	pop	{r4, pc}

08003cb8 <MX_TouchGFX_Init>:
{
#if defined(TOUCHGFX_ENABLED) && (TOUCHGFX_ENABLED != 0)
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
#endif
}
 8003cb8:	4770      	bx	lr

08003cba <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
 8003cba:	b169      	cbz	r1, 8003cd8 <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003cbc:	b530      	push	{r4, r5, lr}
 8003cbe:	b083      	sub	sp, #12
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	9301      	str	r3, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003cc4:	f88d 3003 	strb.w	r3, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003cc8:	6803      	ldr	r3, [r0, #0]
 8003cca:	689d      	ldr	r5, [r3, #8]
 8003ccc:	f10d 0303 	add.w	r3, sp, #3
 8003cd0:	aa01      	add	r2, sp, #4
 8003cd2:	47a8      	blx	r5
        return glyph;
    }
 8003cd4:	b003      	add	sp, #12
 8003cd6:	bd30      	pop	{r4, r5, pc}
            return 0;
 8003cd8:	2000      	movs	r0, #0
    }
 8003cda:	4770      	bx	lr

08003cdc <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003cdc:	8940      	ldrh	r0, [r0, #10]
 8003cde:	4770      	bx	lr

08003ce0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003ce0:	8980      	ldrh	r0, [r0, #12]
 8003ce2:	4770      	bx	lr

08003ce4 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8003ce4:	8880      	ldrh	r0, [r0, #4]
 8003ce6:	4770      	bx	lr

08003ce8 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 8003ce8:	8883      	ldrh	r3, [r0, #4]
 8003cea:	7980      	ldrb	r0, [r0, #6]
 8003cec:	4418      	add	r0, r3
    }
 8003cee:	b280      	uxth	r0, r0
 8003cf0:	4770      	bx	lr

08003cf2 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003cf2:	79c0      	ldrb	r0, [r0, #7]
    }
 8003cf4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003cf8:	4770      	bx	lr

08003cfa <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003cfa:	79c0      	ldrb	r0, [r0, #7]
    }
 8003cfc:	09c0      	lsrs	r0, r0, #7
 8003cfe:	4770      	bx	lr

08003d00 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003d00:	6a00      	ldr	r0, [r0, #32]
 8003d02:	4770      	bx	lr

08003d04 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003d04:	4770      	bx	lr

08003d06 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
{
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8003d06:	6982      	ldr	r2, [r0, #24]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8003d08:	888b      	ldrh	r3, [r1, #4]
 8003d0a:	0adb      	lsrs	r3, r3, #11
 8003d0c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003d10:	680b      	ldr	r3, [r1, #0]
}
 8003d12:	4418      	add	r0, r3
 8003d14:	4770      	bx	lr

08003d16 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
 8003d16:	b1e2      	cbz	r2, 8003d52 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3c>
{
 8003d18:	b410      	push	{r4}
 8003d1a:	4614      	mov	r4, r2
    if (!glyph || glyph->kerningTableSize == 0)
 8003d1c:	7b13      	ldrb	r3, [r2, #12]
 8003d1e:	b1d3      	cbz	r3, 8003d56 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x40>
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003d20:	69c2      	ldr	r2, [r0, #28]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003d22:	7b60      	ldrb	r0, [r4, #13]
 8003d24:	0200      	lsls	r0, r0, #8
 8003d26:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8003d2a:	7ae4      	ldrb	r4, [r4, #11]
 8003d2c:	4320      	orrs	r0, r4
 8003d2e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	e005      	b.n	8003d42 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
    {
        if (prevChar == kerndata->unicodePrevChar)
        {
            return kerndata->distance;
 8003d36:	f992 0002 	ldrsb.w	r0, [r2, #2]
 8003d3a:	e00d      	b.n	8003d58 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x42>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3204      	adds	r2, #4
 8003d42:	b163      	cbz	r3, 8003d5e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x48>
        if (prevChar == kerndata->unicodePrevChar)
 8003d44:	8810      	ldrh	r0, [r2, #0]
 8003d46:	4288      	cmp	r0, r1
 8003d48:	d0f5      	beq.n	8003d36 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8003d4a:	4288      	cmp	r0, r1
 8003d4c:	d9f6      	bls.n	8003d3c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        {
            break;
        }
    }
    return 0;
 8003d4e:	2000      	movs	r0, #0
 8003d50:	e002      	b.n	8003d58 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x42>
        return 0;
 8003d52:	2000      	movs	r0, #0
}
 8003d54:	4770      	bx	lr
        return 0;
 8003d56:	2000      	movs	r0, #0
}
 8003d58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d5c:	4770      	bx	lr
    return 0;
 8003d5e:	2000      	movs	r0, #0
 8003d60:	e7fa      	b.n	8003d58 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x42>

08003d62 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003d62:	b510      	push	{r4, lr}
 8003d64:	4604      	mov	r4, r0
 8003d66:	2124      	movs	r1, #36	; 0x24
 8003d68:	f007 fb52 	bl	800b410 <_ZdlPvj>
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	bd10      	pop	{r4, pc}

08003d70 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 8003d70:	b530      	push	{r4, r5, lr}
 8003d72:	b089      	sub	sp, #36	; 0x24
 8003d74:	4604      	mov	r4, r0
    gsubTable(gsubData)
 8003d76:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8003d7a:	9506      	str	r5, [sp, #24]
 8003d7c:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8003d80:	9505      	str	r5, [sp, #20]
 8003d82:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8003d86:	9504      	str	r5, [sp, #16]
 8003d88:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8003d8c:	9503      	str	r5, [sp, #12]
 8003d8e:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8003d92:	9502      	str	r5, [sp, #8]
 8003d94:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8003d98:	9501      	str	r5, [sp, #4]
 8003d9a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8003d9e:	9500      	str	r5, [sp, #0]
 8003da0:	f004 fbbc 	bl	800851c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8003da4:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x4c>)
 8003da6:	6023      	str	r3, [r4, #0]
 8003da8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003daa:	61a3      	str	r3, [r4, #24]
 8003dac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003dae:	61e3      	str	r3, [r4, #28]
 8003db0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003db2:	6223      	str	r3, [r4, #32]
}
 8003db4:	4620      	mov	r0, r4
 8003db6:	b009      	add	sp, #36	; 0x24
 8003db8:	bd30      	pop	{r4, r5, pc}
 8003dba:	bf00      	nop
 8003dbc:	0800ce68 	.word	0x0800ce68

08003dc0 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 68, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 8003dc0:	4770      	bx	lr
	...

08003dc4 <_Z23getFont_verdana_10_4bppv>:
 8003dc4:	4b18      	ldr	r3, [pc, #96]	; (8003e28 <_Z23getFont_verdana_10_4bppv+0x64>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	f3bf 8f5b 	dmb	ish
 8003dcc:	f013 0f01 	tst.w	r3, #1
 8003dd0:	d001      	beq.n	8003dd6 <_Z23getFont_verdana_10_4bppv+0x12>
    return verdana_10_4bpp;
}
 8003dd2:	4816      	ldr	r0, [pc, #88]	; (8003e2c <_Z23getFont_verdana_10_4bppv+0x68>)
 8003dd4:	4770      	bx	lr
{
 8003dd6:	b510      	push	{r4, lr}
 8003dd8:	b08a      	sub	sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 68, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 8003dda:	4813      	ldr	r0, [pc, #76]	; (8003e28 <_Z23getFont_verdana_10_4bppv+0x64>)
 8003ddc:	f007 fb1a 	bl	800b414 <__cxa_guard_acquire>
 8003de0:	b910      	cbnz	r0, 8003de8 <_Z23getFont_verdana_10_4bppv+0x24>
}
 8003de2:	4812      	ldr	r0, [pc, #72]	; (8003e2c <_Z23getFont_verdana_10_4bppv+0x68>)
 8003de4:	b00a      	add	sp, #40	; 0x28
 8003de6:	bd10      	pop	{r4, pc}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 68, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 8003de8:	4c0f      	ldr	r4, [pc, #60]	; (8003e28 <_Z23getFont_verdana_10_4bppv+0x64>)
 8003dea:	2300      	movs	r3, #0
 8003dec:	9309      	str	r3, [sp, #36]	; 0x24
 8003dee:	9308      	str	r3, [sp, #32]
 8003df0:	233f      	movs	r3, #63	; 0x3f
 8003df2:	9307      	str	r3, [sp, #28]
 8003df4:	4b0e      	ldr	r3, [pc, #56]	; (8003e30 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8003df6:	9306      	str	r3, [sp, #24]
 8003df8:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <_Z23getFont_verdana_10_4bppv+0x70>)
 8003dfa:	9305      	str	r3, [sp, #20]
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	9304      	str	r3, [sp, #16]
 8003e00:	9303      	str	r3, [sp, #12]
 8003e02:	9302      	str	r3, [sp, #8]
 8003e04:	2304      	movs	r3, #4
 8003e06:	9301      	str	r3, [sp, #4]
 8003e08:	2302      	movs	r3, #2
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	230a      	movs	r3, #10
 8003e0e:	2244      	movs	r2, #68	; 0x44
 8003e10:	4909      	ldr	r1, [pc, #36]	; (8003e38 <_Z23getFont_verdana_10_4bppv+0x74>)
 8003e12:	1d20      	adds	r0, r4, #4
 8003e14:	f7ff ffac 	bl	8003d70 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f007 fb07 	bl	800b42c <__cxa_guard_release>
 8003e1e:	4807      	ldr	r0, [pc, #28]	; (8003e3c <_Z23getFont_verdana_10_4bppv+0x78>)
 8003e20:	f007 fd58 	bl	800b8d4 <atexit>
 8003e24:	e7dd      	b.n	8003de2 <_Z23getFont_verdana_10_4bppv+0x1e>
 8003e26:	bf00      	nop
 8003e28:	20000114 	.word	0x20000114
 8003e2c:	20000118 	.word	0x20000118
 8003e30:	08010008 	.word	0x08010008
 8003e34:	0800ceb4 	.word	0x0800ceb4
 8003e38:	0800fc30 	.word	0x0800fc30
 8003e3c:	08003dc1 	.word	0x08003dc1

08003e40 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8003e40:	4770      	bx	lr
	...

08003e44 <_Z23getFont_verdana_20_4bppv>:
 8003e44:	4b17      	ldr	r3, [pc, #92]	; (8003ea4 <_Z23getFont_verdana_20_4bppv+0x60>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	f3bf 8f5b 	dmb	ish
 8003e4c:	f013 0f01 	tst.w	r3, #1
 8003e50:	d001      	beq.n	8003e56 <_Z23getFont_verdana_20_4bppv+0x12>
    return verdana_20_4bpp;
}
 8003e52:	4815      	ldr	r0, [pc, #84]	; (8003ea8 <_Z23getFont_verdana_20_4bppv+0x64>)
 8003e54:	4770      	bx	lr
{
 8003e56:	b510      	push	{r4, lr}
 8003e58:	b08a      	sub	sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8003e5a:	4812      	ldr	r0, [pc, #72]	; (8003ea4 <_Z23getFont_verdana_20_4bppv+0x60>)
 8003e5c:	f007 fada 	bl	800b414 <__cxa_guard_acquire>
 8003e60:	b910      	cbnz	r0, 8003e68 <_Z23getFont_verdana_20_4bppv+0x24>
}
 8003e62:	4811      	ldr	r0, [pc, #68]	; (8003ea8 <_Z23getFont_verdana_20_4bppv+0x64>)
 8003e64:	b00a      	add	sp, #40	; 0x28
 8003e66:	bd10      	pop	{r4, pc}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8003e68:	4c0e      	ldr	r4, [pc, #56]	; (8003ea4 <_Z23getFont_verdana_20_4bppv+0x60>)
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e6e:	9308      	str	r3, [sp, #32]
 8003e70:	223f      	movs	r2, #63	; 0x3f
 8003e72:	9207      	str	r2, [sp, #28]
 8003e74:	4a0d      	ldr	r2, [pc, #52]	; (8003eac <_Z23getFont_verdana_20_4bppv+0x68>)
 8003e76:	9206      	str	r2, [sp, #24]
 8003e78:	4a0d      	ldr	r2, [pc, #52]	; (8003eb0 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8003e7a:	9205      	str	r2, [sp, #20]
 8003e7c:	9304      	str	r3, [sp, #16]
 8003e7e:	9303      	str	r3, [sp, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	9202      	str	r2, [sp, #8]
 8003e84:	2104      	movs	r1, #4
 8003e86:	9101      	str	r1, [sp, #4]
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	2314      	movs	r3, #20
 8003e8c:	4909      	ldr	r1, [pc, #36]	; (8003eb4 <_Z23getFont_verdana_20_4bppv+0x70>)
 8003e8e:	1d20      	adds	r0, r4, #4
 8003e90:	f7ff ff6e 	bl	8003d70 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8003e94:	4620      	mov	r0, r4
 8003e96:	f007 fac9 	bl	800b42c <__cxa_guard_release>
 8003e9a:	4807      	ldr	r0, [pc, #28]	; (8003eb8 <_Z23getFont_verdana_20_4bppv+0x74>)
 8003e9c:	f007 fd1a 	bl	800b8d4 <atexit>
 8003ea0:	e7df      	b.n	8003e62 <_Z23getFont_verdana_20_4bppv+0x1e>
 8003ea2:	bf00      	nop
 8003ea4:	2000013c 	.word	0x2000013c
 8003ea8:	20000140 	.word	0x20000140
 8003eac:	08010020 	.word	0x08010020
 8003eb0:	0800ceb8 	.word	0x0800ceb8
 8003eb4:	0800ffe8 	.word	0x0800ffe8
 8003eb8:	08003e41 	.word	0x08003e41

08003ebc <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8003ebc:	4770      	bx	lr
	...

08003ec0 <_Z23getFont_verdana_40_4bppv>:
 8003ec0:	4b17      	ldr	r3, [pc, #92]	; (8003f20 <_Z23getFont_verdana_40_4bppv+0x60>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	f3bf 8f5b 	dmb	ish
 8003ec8:	f013 0f01 	tst.w	r3, #1
 8003ecc:	d001      	beq.n	8003ed2 <_Z23getFont_verdana_40_4bppv+0x12>
    return verdana_40_4bpp;
}
 8003ece:	4815      	ldr	r0, [pc, #84]	; (8003f24 <_Z23getFont_verdana_40_4bppv+0x64>)
 8003ed0:	4770      	bx	lr
{
 8003ed2:	b510      	push	{r4, lr}
 8003ed4:	b08a      	sub	sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8003ed6:	4812      	ldr	r0, [pc, #72]	; (8003f20 <_Z23getFont_verdana_40_4bppv+0x60>)
 8003ed8:	f007 fa9c 	bl	800b414 <__cxa_guard_acquire>
 8003edc:	b910      	cbnz	r0, 8003ee4 <_Z23getFont_verdana_40_4bppv+0x24>
}
 8003ede:	4811      	ldr	r0, [pc, #68]	; (8003f24 <_Z23getFont_verdana_40_4bppv+0x64>)
 8003ee0:	b00a      	add	sp, #40	; 0x28
 8003ee2:	bd10      	pop	{r4, pc}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8003ee4:	4c0e      	ldr	r4, [pc, #56]	; (8003f20 <_Z23getFont_verdana_40_4bppv+0x60>)
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8003eea:	9308      	str	r3, [sp, #32]
 8003eec:	223f      	movs	r2, #63	; 0x3f
 8003eee:	9207      	str	r2, [sp, #28]
 8003ef0:	4a0d      	ldr	r2, [pc, #52]	; (8003f28 <_Z23getFont_verdana_40_4bppv+0x68>)
 8003ef2:	9206      	str	r2, [sp, #24]
 8003ef4:	4a0d      	ldr	r2, [pc, #52]	; (8003f2c <_Z23getFont_verdana_40_4bppv+0x6c>)
 8003ef6:	9205      	str	r2, [sp, #20]
 8003ef8:	9304      	str	r3, [sp, #16]
 8003efa:	9303      	str	r3, [sp, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	9202      	str	r2, [sp, #8]
 8003f00:	2104      	movs	r1, #4
 8003f02:	9101      	str	r1, [sp, #4]
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	2328      	movs	r3, #40	; 0x28
 8003f08:	4909      	ldr	r1, [pc, #36]	; (8003f30 <_Z23getFont_verdana_40_4bppv+0x70>)
 8003f0a:	1d20      	adds	r0, r4, #4
 8003f0c:	f7ff ff30 	bl	8003d70 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8003f10:	4620      	mov	r0, r4
 8003f12:	f007 fa8b 	bl	800b42c <__cxa_guard_release>
 8003f16:	4807      	ldr	r0, [pc, #28]	; (8003f34 <_Z23getFont_verdana_40_4bppv+0x74>)
 8003f18:	f007 fcdc 	bl	800b8d4 <atexit>
 8003f1c:	e7df      	b.n	8003ede <_Z23getFont_verdana_40_4bppv+0x1e>
 8003f1e:	bf00      	nop
 8003f20:	20000164 	.word	0x20000164
 8003f24:	20000168 	.word	0x20000168
 8003f28:	08010024 	.word	0x08010024
 8003f2c:	0800cebc 	.word	0x0800cebc
 8003f30:	0800fff8 	.word	0x0800fff8
 8003f34:	08003ebd 	.word	0x08003ebd

08003f38 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8003f38:	2000      	movs	r0, #0
 8003f3a:	4770      	bx	lr

08003f3c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003f3c:	b40e      	push	{r1, r2, r3}
 8003f3e:	b500      	push	{lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	ab03      	add	r3, sp, #12
 8003f44:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003f48:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	f004 f9dc 	bl	8008308 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003f50:	b002      	add	sp, #8
 8003f52:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f56:	b003      	add	sp, #12
 8003f58:	4770      	bx	lr

08003f5a <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003f5a:	b40c      	push	{r2, r3}
 8003f5c:	b500      	push	{lr}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	ab04      	add	r3, sp, #16
 8003f62:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003f66:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003f68:	f004 f9ce 	bl	8008308 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003f6c:	b003      	add	sp, #12
 8003f6e:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f72:	b002      	add	sp, #8
 8003f74:	4770      	bx	lr
	...

08003f78 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8003f78:	b538      	push	{r3, r4, r5, lr}
 8003f7a:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003f7c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003f7e:	b133      	cbz	r3, 8003f8e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003f80:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8003f82:	b143      	cbz	r3, 8003f96 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1e>
            return buffer[pos];
 8003f84:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003f86:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003f8a:	8b5b      	ldrh	r3, [r3, #26]
 8003f8c:	b94b      	cbnz	r3, 8003fa2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003f8e:	4620      	mov	r0, r4
 8003f90:	f004 ff38 	bl	8008e04 <_ZN8touchgfx12TextProvider11getNextCharEv>
}
 8003f94:	bd38      	pop	{r3, r4, r5, pc}
            assert(used > 0);
 8003f96:	4b1b      	ldr	r3, [pc, #108]	; (8004004 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x8c>)
 8003f98:	4a1b      	ldr	r2, [pc, #108]	; (8004008 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 8003f9a:	21c0      	movs	r1, #192	; 0xc0
 8003f9c:	481b      	ldr	r0, [pc, #108]	; (800400c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 8003f9e:	f007 fc7b 	bl	800b898 <__assert_func>
        substituteGlyphs();
 8003fa2:	f005 f84b 	bl	800903c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8003fa6:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8003fa8:	2801      	cmp	r0, #1
 8003faa:	d91c      	bls.n	8003fe6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
            const uint16_t index = pos + offset;
 8003fac:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8003fae:	1c4b      	adds	r3, r1, #1
 8003fb0:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003fb2:	2b09      	cmp	r3, #9
 8003fb4:	d81d      	bhi.n	8003ff2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7a>
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003fbc:	8b55      	ldrh	r5, [r2, #26]
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 8003fbe:	f640 123f 	movw	r2, #2367	; 0x93f
 8003fc2:	4295      	cmp	r5, r2
 8003fc4:	d1e3      	bne.n	8003f8e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(used > 0);
 8003fc6:	b1b8      	cbz	r0, 8003ff8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>
            return buffer[pos];
 8003fc8:	eb04 0241 	add.w	r2, r4, r1, lsl #1
 8003fcc:	8b52      	ldrh	r2, [r2, #26]
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003fce:	2b09      	cmp	r3, #9
 8003fd0:	d900      	bls.n	8003fd4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5c>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003fd8:	835a      	strh	r2, [r3, #26]
            buffer[pos] = newChar;
 8003fda:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003fde:	f640 133f 	movw	r3, #2367	; 0x93f
 8003fe2:	834b      	strh	r3, [r1, #26]
        }
 8003fe4:	e7d3      	b.n	8003f8e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(offset < used);
 8003fe6:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 8003fe8:	4a0a      	ldr	r2, [pc, #40]	; (8004014 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
 8003fea:	21c5      	movs	r1, #197	; 0xc5
 8003fec:	4807      	ldr	r0, [pc, #28]	; (800400c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 8003fee:	f007 fc53 	bl	800b898 <__assert_func>
            return buffer[index < size ? index : index - size];
 8003ff2:	f1a3 020a 	sub.w	r2, r3, #10
 8003ff6:	e7df      	b.n	8003fb8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>
            assert(used > 0);
 8003ff8:	4b02      	ldr	r3, [pc, #8]	; (8004004 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x8c>)
 8003ffa:	4a03      	ldr	r2, [pc, #12]	; (8004008 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 8003ffc:	21c0      	movs	r1, #192	; 0xc0
 8003ffe:	4803      	ldr	r0, [pc, #12]	; (800400c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 8004000:	f007 fc4a 	bl	800b898 <__assert_func>
 8004004:	0800d354 	.word	0x0800d354
 8004008:	0800d360 	.word	0x0800d360
 800400c:	0800d40c 	.word	0x0800d40c
 8004010:	0800d484 	.word	0x0800d484
 8004014:	0800d494 	.word	0x0800d494

08004018 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8004018:	b508      	push	{r3, lr}
    fillInputBuffer();
 800401a:	f004 fead 	bl	8008d78 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800401e:	bd08      	pop	{r3, pc}

08004020 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8004020:	2801      	cmp	r0, #1
 8004022:	d000      	beq.n	8004026 <_Z41__static_initialization_and_destruction_0ii+0x6>
 8004024:	4770      	bx	lr
 8004026:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800402a:	4299      	cmp	r1, r3
 800402c:	d1fa      	bne.n	8004024 <_Z41__static_initialization_and_destruction_0ii+0x4>
 800402e:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 8004030:	f7ff ff08 	bl	8003e44 <_Z23getFont_verdana_20_4bppv>
};
 8004034:	4c04      	ldr	r4, [pc, #16]	; (8004048 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8004036:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8004038:	f7ff ff42 	bl	8003ec0 <_Z23getFont_verdana_40_4bppv>
};
 800403c:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 800403e:	f7ff fec1 	bl	8003dc4 <_Z23getFont_verdana_10_4bppv>
};
 8004042:	60a0      	str	r0, [r4, #8]
}  // namespace TypedTextDatabase
 8004044:	bd10      	pop	{r4, pc}
 8004046:	bf00      	nop
 8004048:	2000018c 	.word	0x2000018c

0800404c <_GLOBAL__sub_I_touchgfx_fonts>:
 800404c:	b508      	push	{r3, lr}
 800404e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004052:	2001      	movs	r0, #1
 8004054:	f7ff ffe4 	bl	8004020 <_Z41__static_initialization_and_destruction_0ii>
 8004058:	bd08      	pop	{r3, pc}

0800405a <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 800405a:	6840      	ldr	r0, [r0, #4]
    }
 800405c:	4770      	bx	lr

0800405e <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 800405e:	6041      	str	r1, [r0, #4]
    }
 8004060:	4770      	bx	lr
	...

08004064 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8004064:	4a09      	ldr	r2, [pc, #36]	; (800408c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8004066:	6813      	ldr	r3, [r2, #0]
 8004068:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800406c:	6013      	str	r3, [r2, #0]
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 800406e:	f5a2 424e 	sub.w	r2, r2, #52736	; 0xce00
 8004072:	3a4c      	subs	r2, #76	; 0x4c
 8004074:	6811      	ldr	r1, [r2, #0]
 8004076:	4b06      	ldr	r3, [pc, #24]	; (8004090 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8004078:	430b      	orrs	r3, r1
 800407a:	6013      	str	r3, [r2, #0]
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 800407c:	f5a2 627b 	sub.w	r2, r2, #4016	; 0xfb0
 8004080:	6813      	ldr	r3, [r2, #0]
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	6013      	str	r3, [r2, #0]
}
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	e000edfc 	.word	0xe000edfc
 8004090:	c5acce55 	.word	0xc5acce55

08004094 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8004094:	1a52      	subs	r2, r2, r1
 8004096:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 800409a:	fbb2 f0f3 	udiv	r0, r2, r3
 800409e:	4770      	bx	lr

080040a0 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 80040a0:	4b01      	ldr	r3, [pc, #4]	; (80040a8 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 80040a2:	6818      	ldr	r0, [r3, #0]
}
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	e0001004 	.word	0xe0001004

080040ac <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
 80040ac:	b510      	push	{r4, lr}
 80040ae:	4604      	mov	r4, r0
    if (active) //idle task sched out
 80040b0:	b141      	cbz	r1, 80040c4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80040b2:	6803      	ldr	r3, [r0, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	4798      	blx	r3
 80040b8:	68a3      	ldr	r3, [r4, #8]
 80040ba:	1ac3      	subs	r3, r0, r3
        cc_consumed += cc_temp;
 80040bc:	6860      	ldr	r0, [r4, #4]
 80040be:	4418      	add	r0, r3
 80040c0:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80040c2:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 80040c4:	6803      	ldr	r3, [r0, #0]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	4798      	blx	r3
 80040ca:	60a0      	str	r0, [r4, #8]
}
 80040cc:	e7f9      	b.n	80040c2 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

080040ce <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 80040ce:	4770      	bx	lr

080040d0 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 80040d0:	b510      	push	{r4, lr}
 80040d2:	4604      	mov	r4, r0
 80040d4:	210c      	movs	r1, #12
 80040d6:	f007 f99b 	bl	800b410 <_ZdlPvj>
 80040da:	4620      	mov	r0, r4
 80040dc:	bd10      	pop	{r4, pc}
	...

080040e0 <_ZN20STM32TouchController4initEv>:

static TS_DrvTypeDef* tsDriver;
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
 80040e0:	b508      	push	{r3, lr}
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80040e2:	4b03      	ldr	r3, [pc, #12]	; (80040f0 <_ZN20STM32TouchController4initEv+0x10>)
 80040e4:	4a03      	ldr	r2, [pc, #12]	; (80040f4 <_ZN20STM32TouchController4initEv+0x14>)
 80040e6:	6013      	str	r3, [r2, #0]

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	2070      	movs	r0, #112	; 0x70
 80040ec:	4798      	blx	r3
}
 80040ee:	bd08      	pop	{r3, pc}
 80040f0:	2000000c 	.word	0x2000000c
 80040f4:	20000198 	.word	0x20000198

080040f8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80040f8:	b538      	push	{r3, r4, r5, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (tsDriver)
 80040fa:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	b183      	cbz	r3, 8004122 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>
 8004100:	460d      	mov	r5, r1
 8004102:	4614      	mov	r4, r2
    {
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	2070      	movs	r0, #112	; 0x70
 8004108:	4798      	blx	r3
 800410a:	b908      	cbnz	r0, 8004110 <_ZN20STM32TouchController11sampleTouchERlS0_+0x18>
            /* Get each touch coordinates */
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
            return true;
        }
    }
    return false;
 800410c:	2000      	movs	r0, #0
}
 800410e:	bd38      	pop	{r3, r4, r5, pc}
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	462a      	mov	r2, r5
 8004118:	4621      	mov	r1, r4
 800411a:	2070      	movs	r0, #112	; 0x70
 800411c:	4798      	blx	r3
            return true;
 800411e:	2001      	movs	r0, #1
 8004120:	e7f5      	b.n	800410e <_ZN20STM32TouchController11sampleTouchERlS0_+0x16>
    return false;
 8004122:	2000      	movs	r0, #0
 8004124:	e7f3      	b.n	800410e <_ZN20STM32TouchController11sampleTouchERlS0_+0x16>
 8004126:	bf00      	nop
 8004128:	20000198 	.word	0x20000198

0800412c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800412c:	4770      	bx	lr

0800412e <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef* i2c_handler, uint8_t Addr)
{
 800412e:	b508      	push	{r3, lr}
    /* De-initialize the I2C communication bus */
    HAL_I2C_DeInit(i2c_handler);
 8004130:	f7fd fc90 	bl	8001a54 <HAL_I2C_DeInit>

    /* Re-Initialize the I2C communication bus */
    //I2Cx_Init(i2c_handler);
}
 8004134:	bd08      	pop	{r3, pc}

08004136 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t* Buffer,
                                            uint16_t Length)
{
 8004136:	b570      	push	{r4, r5, r6, lr}
 8004138:	b084      	sub	sp, #16
 800413a:	4605      	mov	r5, r0
 800413c:	460c      	mov	r4, r1
    HAL_StatusTypeDef status = HAL_OK;

    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800413e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004142:	9102      	str	r1, [sp, #8]
 8004144:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8004148:	9101      	str	r1, [sp, #4]
 800414a:	9908      	ldr	r1, [sp, #32]
 800414c:	9100      	str	r1, [sp, #0]
 800414e:	4621      	mov	r1, r4
 8004150:	f7fd fc99 	bl	8001a86 <HAL_I2C_Mem_Write>

    /* Check the communication status */
    if (status != HAL_OK)
 8004154:	4606      	mov	r6, r0
 8004156:	b910      	cbnz	r0, 800415e <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht+0x28>
    {
        /* Re-Initiaize the I2C Bus */
        I2Cx_Error(i2c_handler, Addr);
    }
    return status;
}
 8004158:	4630      	mov	r0, r6
 800415a:	b004      	add	sp, #16
 800415c:	bd70      	pop	{r4, r5, r6, pc}
        I2Cx_Error(i2c_handler, Addr);
 800415e:	4621      	mov	r1, r4
 8004160:	4628      	mov	r0, r5
 8004162:	f7ff ffe4 	bl	800412e <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>
 8004166:	e7f7      	b.n	8004158 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht+0x22>

08004168 <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht>:
{
 8004168:	b570      	push	{r4, r5, r6, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	4605      	mov	r5, r0
 800416e:	460c      	mov	r4, r1
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004170:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004174:	9102      	str	r1, [sp, #8]
 8004176:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800417a:	9101      	str	r1, [sp, #4]
 800417c:	9908      	ldr	r1, [sp, #32]
 800417e:	9100      	str	r1, [sp, #0]
 8004180:	4621      	mov	r1, r4
 8004182:	f7fd fd57 	bl	8001c34 <HAL_I2C_Mem_Read>
    if (status != HAL_OK)
 8004186:	4606      	mov	r6, r0
 8004188:	b910      	cbnz	r0, 8004190 <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht+0x28>
}
 800418a:	4630      	mov	r0, r6
 800418c:	b004      	add	sp, #16
 800418e:	bd70      	pop	{r4, r5, r6, pc}
        I2Cx_Error(i2c_handler, Addr);
 8004190:	4621      	mov	r1, r4
 8004192:	4628      	mov	r0, r5
 8004194:	f7ff ffcb 	bl	800412e <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>
 8004198:	e7f7      	b.n	800418a <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht+0x22>

0800419a <_ZN20STM32TouchControllerD0Ev>:
 800419a:	b510      	push	{r4, lr}
 800419c:	4604      	mov	r4, r0
 800419e:	2104      	movs	r1, #4
 80041a0:	f007 f936 	bl	800b410 <_ZdlPvj>
 80041a4:	4620      	mov	r0, r4
 80041a6:	bd10      	pop	{r4, pc}

080041a8 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80041a8:	b500      	push	{lr}
 80041aa:	b085      	sub	sp, #20
 80041ac:	f88d 200f 	strb.w	r2, [sp, #15]
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
 80041b0:	2301      	movs	r3, #1
 80041b2:	9301      	str	r3, [sp, #4]
 80041b4:	f10d 020f 	add.w	r2, sp, #15
 80041b8:	9200      	str	r2, [sp, #0]
 80041ba:	460a      	mov	r2, r1
 80041bc:	4601      	mov	r1, r0
 80041be:	4803      	ldr	r0, [pc, #12]	; (80041cc <TS_IO_Write+0x24>)
 80041c0:	f7ff ffb9 	bl	8004136 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht>
}
 80041c4:	b005      	add	sp, #20
 80041c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80041ca:	bf00      	nop
 80041cc:	2000149c 	.word	0x2000149c

080041d0 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80041d0:	b500      	push	{lr}
 80041d2:	b085      	sub	sp, #20
 80041d4:	460a      	mov	r2, r1
    uint8_t read_value = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	f88d 300f 	strb.w	r3, [sp, #15]

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80041dc:	2301      	movs	r3, #1
 80041de:	9301      	str	r3, [sp, #4]
 80041e0:	f10d 010f 	add.w	r1, sp, #15
 80041e4:	9100      	str	r1, [sp, #0]
 80041e6:	4601      	mov	r1, r0
 80041e8:	4803      	ldr	r0, [pc, #12]	; (80041f8 <TS_IO_Read+0x28>)
 80041ea:	f7ff ffbd 	bl	8004168 <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht>

    return read_value;
}
 80041ee:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80041f2:	b005      	add	sp, #20
 80041f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80041f8:	2000149c 	.word	0x2000149c

080041fc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{

}
 80041fc:	4770      	bx	lr

080041fe <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{

}
 80041fe:	4770      	bx	lr

08004200 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{

}
 8004200:	4770      	bx	lr

08004202 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
 8004202:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8004206:	2301      	movs	r3, #1
 8004208:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 800420c:	4770      	bx	lr

0800420e <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800420e:	b508      	push	{r3, lr}
    {
        if (useDMAAcceleration)
 8004210:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8004214:	b123      	cbz	r3, 8004220 <_ZN8touchgfx3HAL11getBlitCapsEv+0x12>
        {
            return dma.getBlitCaps();
 8004216:	6840      	ldr	r0, [r0, #4]
 8004218:	6803      	ldr	r3, [r0, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4798      	blx	r3
        }
        else
        {
            return static_cast<BlitOperations>(0);
        }
    }
 800421e:	bd08      	pop	{r3, pc}
            return static_cast<BlitOperations>(0);
 8004220:	2000      	movs	r0, #0
 8004222:	e7fc      	b.n	800421e <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>

08004224 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
    {
        return false;
    }
 8004224:	2000      	movs	r0, #0
 8004226:	4770      	bx	lr

08004228 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8004228:	2000      	movs	r0, #0
 800422a:	4770      	bx	lr

0800422c <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800422c:	b508      	push	{r3, lr}
    {
        if (taskDelayFunc)
 800422e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004230:	b10b      	cbz	r3, 8004236 <_ZN8touchgfx3HAL9taskDelayEt+0xa>
        {
            taskDelayFunc(ms);
 8004232:	4608      	mov	r0, r1
 8004234:	4798      	blx	r3
        }
    }
 8004236:	bd08      	pop	{r3, pc}

08004238 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8004238:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800423c:	4770      	bx	lr

0800423e <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800423e:	b508      	push	{r3, lr}
    {
        return dma.getDMAType();
 8004240:	6840      	ldr	r0, [r0, #4]
 8004242:	6803      	ldr	r3, [r0, #0]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	4798      	blx	r3
    }
 8004248:	bd08      	pop	{r3, pc}
	...

0800424c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800424c:	b410      	push	{r4}
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800424e:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
 8004252:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8004256:	429a      	cmp	r2, r3
 8004258:	d012      	beq.n	8004280 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x34>
        {
            if (DISPLAY_ROTATION == rotate0)
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	b963      	cbnz	r3, 800427a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2e>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8004260:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5c>)
 8004262:	8818      	ldrh	r0, [r3, #0]
 8004264:	4a11      	ldr	r2, [pc, #68]	; (80042ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x60>)
 8004266:	8010      	strh	r0, [r2, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8004268:	4911      	ldr	r1, [pc, #68]	; (80042b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x64>)
 800426a:	880a      	ldrh	r2, [r1, #0]
 800426c:	4c11      	ldr	r4, [pc, #68]	; (80042b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x68>)
 800426e:	8022      	strh	r2, [r4, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8004270:	8008      	strh	r0, [r1, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8004272:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8004274:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
 8004276:	2201      	movs	r2, #1
 8004278:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800427a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800427e:	4770      	bx	lr
        else if (DISPLAY_ROTATION != rotate0)
 8004280:	4b08      	ldr	r3, [pc, #32]	; (80042a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0f8      	beq.n	800427a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2e>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8004288:	4909      	ldr	r1, [pc, #36]	; (80042b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x64>)
 800428a:	880a      	ldrh	r2, [r1, #0]
 800428c:	4b07      	ldr	r3, [pc, #28]	; (80042ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x60>)
 800428e:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8004290:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5c>)
 8004292:	8818      	ldrh	r0, [r3, #0]
 8004294:	4c07      	ldr	r4, [pc, #28]	; (80042b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x68>)
 8004296:	8020      	strh	r0, [r4, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8004298:	8008      	strh	r0, [r1, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 800429a:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 800429c:	4b01      	ldr	r3, [pc, #4]	; (80042a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
 800429e:	2200      	movs	r2, #0
 80042a0:	701a      	strb	r2, [r3, #0]
    }
 80042a2:	e7ea      	b.n	800427a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2e>
 80042a4:	2000114c 	.word	0x2000114c
 80042a8:	20001148 	.word	0x20001148
 80042ac:	2000114e 	.word	0x2000114e
 80042b0:	2000114a 	.word	0x2000114a
 80042b4:	20001150 	.word	0x20001150

080042b8 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80042b8:	4770      	bx	lr
	...

080042bc <_Z41__static_initialization_and_destruction_0ii>:
//        {
//            touchgfx::HAL::getInstance()->setMCUActive(false);
//        }
//        return pdTRUE;
//    }
}
 80042bc:	2801      	cmp	r0, #1
 80042be:	d000      	beq.n	80042c2 <_Z41__static_initialization_and_destruction_0ii+0x6>
 80042c0:	4770      	bx	lr
 80042c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042c6:	4299      	cmp	r1, r3
 80042c8:	d1fa      	bne.n	80042c0 <_Z41__static_initialization_and_destruction_0ii+0x4>
          cc_in(0)
 80042ca:	4b03      	ldr	r3, [pc, #12]	; (80042d8 <_Z41__static_initialization_and_destruction_0ii+0x1c>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	605a      	str	r2, [r3, #4]
 80042d0:	609a      	str	r2, [r3, #8]
 80042d2:	4a02      	ldr	r2, [pc, #8]	; (80042dc <_Z41__static_initialization_and_destruction_0ii+0x20>)
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	e7f3      	b.n	80042c0 <_Z41__static_initialization_and_destruction_0ii+0x4>
 80042d8:	2000019c 	.word	0x2000019c
 80042dc:	0800cec8 	.word	0x0800cec8

080042e0 <_ZN11TouchGFXHAL9taskEntryEv>:
{
 80042e0:	b510      	push	{r4, lr}
    if (firstCall)
 80042e2:	4b08      	ldr	r3, [pc, #32]	; (8004304 <_ZN11TouchGFXHAL9taskEntryEv+0x24>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	b153      	cbz	r3, 80042fe <_ZN11TouchGFXHAL9taskEntryEv+0x1e>
 80042e8:	4604      	mov	r4, r0
        firstCall = false;
 80042ea:	4b06      	ldr	r3, [pc, #24]	; (8004304 <_ZN11TouchGFXHAL9taskEntryEv+0x24>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	701a      	strb	r2, [r3, #0]
        enableLCDControllerInterrupt();
 80042f0:	6803      	ldr	r3, [r0, #0]
 80042f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042f4:	4798      	blx	r3
        enableInterrupts();
 80042f6:	6823      	ldr	r3, [r4, #0]
 80042f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042fa:	4620      	mov	r0, r4
 80042fc:	4798      	blx	r3
    OSWrappers::waitForVSync();
 80042fe:	f000 f8af 	bl	8004460 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
}
 8004302:	bd10      	pop	{r4, pc}
 8004304:	20000034 	.word	0x20000034

08004308 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
{
 8004308:	b508      	push	{r3, lr}
    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800430a:	f000 fbbd 	bl	8004a88 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
}
 800430e:	bd08      	pop	{r3, pc}

08004310 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
{
 8004310:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8004312:	f000 fbbf 	bl	8004a94 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8004316:	bd08      	pop	{r3, pc}

08004318 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8004318:	b510      	push	{r4, lr}
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800431a:	f000 fbc3 	bl	8004aa4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800431e:	4b11      	ldr	r3, [pc, #68]	; (8004364 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 8004320:	2200      	movs	r2, #0
 8004322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004326:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800432a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800432e:	f3c0 324e 	ubfx	r2, r0, #13, #15
 8004332:	e000      	b.n	8004336 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1e>
    } while(sets-- != 0U);
 8004334:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004336:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800433a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800433e:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 8004342:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 8004346:	4c07      	ldr	r4, [pc, #28]	; (8004364 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 8004348:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
      } while (ways-- != 0U);
 800434c:	460b      	mov	r3, r1
 800434e:	3901      	subs	r1, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1f2      	bne.n	800433a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x22>
    } while(sets-- != 0U);
 8004354:	1e53      	subs	r3, r2, #1
 8004356:	2a00      	cmp	r2, #0
 8004358:	d1ec      	bne.n	8004334 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1c>
 800435a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800435e:	f3bf 8f6f 	isb	sy
}
 8004362:	bd10      	pop	{r4, pc}
 8004364:	e000ed00 	.word	0xe000ed00

08004368 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:
{
 8004368:	b508      	push	{r3, lr}
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800436a:	f000 fbc3 	bl	8004af4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
}
 800436e:	bd08      	pop	{r3, pc}

08004370 <_ZN11TouchGFXHAL19configureInterruptsEv>:
{
 8004370:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::configureInterrupts();
 8004372:	f000 fb49 	bl	8004a08 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8004376:	bd08      	pop	{r3, pc}

08004378 <_ZN11TouchGFXHAL16enableInterruptsEv>:
{
 8004378:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::enableInterrupts();
 800437a:	f000 fb4f 	bl	8004a1c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800437e:	bd08      	pop	{r3, pc}

08004380 <_ZN11TouchGFXHAL17disableInterruptsEv>:
{
 8004380:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::disableInterrupts();
 8004382:	f000 fb55 	bl	8004a30 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8004386:	bd08      	pop	{r3, pc}

08004388 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8004388:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800438a:	f000 fb65 	bl	8004a58 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800438e:	bd08      	pop	{r3, pc}

08004390 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8004390:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8004392:	b169      	cbz	r1, 80043b0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x20>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8004394:	63c1      	str	r1, [r0, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8004396:	6402      	str	r2, [r0, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8004398:	6443      	str	r3, [r0, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800439a:	3a00      	subs	r2, #0
 800439c:	bf18      	it	ne
 800439e:	2201      	movne	r2, #1
 80043a0:	4907      	ldr	r1, [pc, #28]	; (80043c0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80043a2:	700a      	strb	r2, [r1, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80043a4:	3b00      	subs	r3, #0
 80043a6:	bf18      	it	ne
 80043a8:	2301      	movne	r3, #1
 80043aa:	4a06      	ldr	r2, [pc, #24]	; (80043c4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80043ac:	7013      	strb	r3, [r2, #0]
    }
 80043ae:	bd10      	pop	{r4, pc}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80043b0:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80043b2:	4a06      	ldr	r2, [pc, #24]	; (80043cc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 80043b4:	f240 216b 	movw	r1, #619	; 0x26b
 80043b8:	4805      	ldr	r0, [pc, #20]	; (80043d0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
 80043ba:	f007 fa6d 	bl	800b898 <__assert_func>
 80043be:	bf00      	nop
 80043c0:	20001152 	.word	0x20001152
 80043c4:	20001153 	.word	0x20001153
 80043c8:	0800d568 	.word	0x0800d568
 80043cc:	0800d5a0 	.word	0x0800d5a0
 80043d0:	0800d5f0 	.word	0x0800d5f0

080043d4 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 80043d4:	b510      	push	{r4, lr}
 80043d6:	4604      	mov	r4, r0
        swapFrameBuffers();
 80043d8:	f002 ff5a 	bl	8007290 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80043dc:	6823      	ldr	r3, [r4, #0]
 80043de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e2:	4620      	mov	r0, r4
 80043e4:	4798      	blx	r3
    }
 80043e6:	bd10      	pop	{r4, pc}

080043e8 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80043e8:	b508      	push	{r3, lr}
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 80043ea:	f002 f99b 	bl	8006724 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
    }
 80043ee:	bd08      	pop	{r3, pc}

080043f0 <_ZN11TouchGFXHALD0Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80043f0:	b510      	push	{r4, lr}
 80043f2:	4604      	mov	r4, r0
 80043f4:	217c      	movs	r1, #124	; 0x7c
 80043f6:	f007 f80b 	bl	800b410 <_ZdlPvj>
 80043fa:	4620      	mov	r0, r4
 80043fc:	bd10      	pop	{r4, pc}

080043fe <_GLOBAL__sub_I_instrumentation>:
}
 80043fe:	b508      	push	{r3, lr}
 8004400:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004404:	2001      	movs	r0, #1
 8004406:	f7ff ff59 	bl	80042bc <_Z41__static_initialization_and_destruction_0ii>
 800440a:	bd08      	pop	{r3, pc}

0800440c <_GLOBAL__sub_D_instrumentation>:
 800440c:	b508      	push	{r3, lr}
 800440e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004412:	2000      	movs	r0, #0
 8004414:	f7ff ff52 	bl	80042bc <_Z41__static_initialization_and_destruction_0ii>
 8004418:	bd08      	pop	{r3, pc}
	...

0800441c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
  while(fb_sem);
 800441c:	4b03      	ldr	r3, [pc, #12]	; (800442c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x10>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1fb      	bne.n	800441c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
  fb_sem = 1;
 8004424:	4b01      	ldr	r3, [pc, #4]	; (800442c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x10>)
 8004426:	2201      	movs	r2, #1
 8004428:	601a      	str	r2, [r3, #0]
}
 800442a:	4770      	bx	lr
 800442c:	200001a8 	.word	0x200001a8

08004430 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
  fb_sem = 0;
 8004430:	4b01      	ldr	r3, [pc, #4]	; (8004438 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
}
 8004436:	4770      	bx	lr
 8004438:	200001a8 	.word	0x200001a8

0800443c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
  fb_sem = 1;
 800443c:	4b01      	ldr	r3, [pc, #4]	; (8004444 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x8>)
 800443e:	2201      	movs	r2, #1
 8004440:	601a      	str	r2, [r3, #0]
}
 8004442:	4770      	bx	lr
 8004444:	200001a8 	.word	0x200001a8

08004448 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
  fb_sem = 0;
 8004448:	4b01      	ldr	r3, [pc, #4]	; (8004450 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x8>)
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
}
 800444e:	4770      	bx	lr
 8004450:	200001a8 	.word	0x200001a8

08004454 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
  vsync_sem = 1;
 8004454:	4b01      	ldr	r3, [pc, #4]	; (800445c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x8>)
 8004456:	2201      	movs	r2, #1
 8004458:	605a      	str	r2, [r3, #4]
}
 800445a:	4770      	bx	lr
 800445c:	200001a8 	.word	0x200001a8

08004460 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
/*
 * This function check if a VSYNC has occured.
 * If VSYNC has occured, signal TouchGFX to start a rendering
 */
void OSWrappers::waitForVSync()
{
 8004460:	b508      	push	{r3, lr}
  if(vsync_sem)
 8004462:	4b06      	ldr	r3, [pc, #24]	; (800447c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1c>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	b13b      	cbz	r3, 8004478 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x18>
  {
    vsync_sem = 0;
 8004468:	4b04      	ldr	r3, [pc, #16]	; (800447c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1c>)
 800446a:	2200      	movs	r2, #0
 800446c:	605a      	str	r2, [r3, #4]
        return instance;
 800446e:	4b04      	ldr	r3, [pc, #16]	; (8004480 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x20>)
 8004470:	6818      	ldr	r0, [r3, #0]
    HAL::getInstance()->backPorchExited();
 8004472:	6803      	ldr	r3, [r0, #0]
 8004474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004476:	4798      	blx	r3
  }
}
 8004478:	bd08      	pop	{r3, pc}
 800447a:	bf00      	nop
 800447c:	200001a8 	.word	0x200001a8
 8004480:	20001154 	.word	0x20001154

08004484 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8004484:	b508      	push	{r3, lr}
    {
        waitForFrameBufferSemaphore();
 8004486:	6803      	ldr	r3, [r0, #0]
 8004488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448a:	4798      	blx	r3
    }
 800448c:	bd08      	pop	{r3, pc}

0800448e <_ZN10STM32F7DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 800448e:	2001      	movs	r0, #1
 8004490:	4770      	bx	lr

08004492 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8004492:	b508      	push	{r3, lr}
    {
        executeCompleted();
 8004494:	6803      	ldr	r3, [r0, #0]
 8004496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004498:	4798      	blx	r3
    }
 800449a:	bd08      	pop	{r3, pc}

0800449c <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 800449c:	b508      	push	{r3, lr}
 800449e:	4b03      	ldr	r3, [pc, #12]	; (80044ac <DMA2D_XferCpltCallback+0x10>)
 80044a0:	681b      	ldr	r3, [r3, #0]
        dma.signalDMAInterrupt();
 80044a2:	6858      	ldr	r0, [r3, #4]
 80044a4:	6803      	ldr	r3, [r0, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	4798      	blx	r3
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
    }
 80044aa:	bd08      	pop	{r3, pc}
 80044ac:	20001154 	.word	0x20001154

080044b0 <_ZN10STM32F7DMAD1Ev>:
STM32F7DMA::STM32F7DMA()
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
{
}

STM32F7DMA::~STM32F7DMA()
 80044b0:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <_ZN10STM32F7DMAD1Ev+0x18>)
 80044b2:	6003      	str	r3, [r0, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044b4:	4b05      	ldr	r3, [pc, #20]	; (80044cc <_ZN10STM32F7DMAD1Ev+0x1c>)
 80044b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80044ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80044be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80044c2:	f3bf 8f6f 	isb	sy
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
 80044c6:	4770      	bx	lr
 80044c8:	0800cfc4 	.word	0x0800cfc4
 80044cc:	e000e100 	.word	0xe000e100

080044d0 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 80044d0:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80044d2:	4b0d      	ldr	r3, [pc, #52]	; (8004508 <_ZN10STM32F7DMA10initializeEv+0x38>)
 80044d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044d6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80044da:	631a      	str	r2, [r3, #48]	; 0x30
 80044dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044de:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80044e2:	9201      	str	r2, [sp, #4]
 80044e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80044ec:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80044f4:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80044f6:	4b05      	ldr	r3, [pc, #20]	; (800450c <_ZN10STM32F7DMA10initializeEv+0x3c>)
 80044f8:	4a05      	ldr	r2, [pc, #20]	; (8004510 <_ZN10STM32F7DMA10initializeEv+0x40>)
 80044fa:	611a      	str	r2, [r3, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044fc:	4b05      	ldr	r3, [pc, #20]	; (8004514 <_ZN10STM32F7DMA10initializeEv+0x44>)
 80044fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004502:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8004504:	b002      	add	sp, #8
 8004506:	4770      	bx	lr
 8004508:	40023800 	.word	0x40023800
 800450c:	2000145c 	.word	0x2000145c
 8004510:	0800449d 	.word	0x0800449d
 8004514:	e000e100 	.word	0xe000e100

08004518 <_ZN10STM32F7DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8004518:	f240 10ef 	movw	r0, #495	; 0x1ef
 800451c:	4770      	bx	lr

0800451e <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 800451e:	b510      	push	{r4, lr}
 8004520:	4604      	mov	r4, r0
}
 8004522:	f7ff ffc5 	bl	80044b0 <_ZN10STM32F7DMAD1Ev>
 8004526:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 800452a:	4620      	mov	r0, r4
 800452c:	f006 ff70 	bl	800b410 <_ZdlPvj>
 8004530:	4620      	mov	r0, r4
 8004532:	bd10      	pop	{r4, pc}

08004534 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F7DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8004534:	b510      	push	{r4, lr}
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8004536:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8004538:	2b0a      	cmp	r3, #10
 800453a:	d809      	bhi.n	8004550 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>
 800453c:	e8df f003 	tbb	[pc, r3]
 8004540:	080e1006 	.word	0x080e1006
 8004544:	10080808 	.word	0x10080808
 8004548:	1010      	.short	0x1010
 800454a:	10          	.byte	0x10
 800454b:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800454c:	2002      	movs	r0, #2
        break;
 800454e:	e008      	b.n	8004562 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        assert(0 && "Unsupported Format!");
 8004550:	4b2f      	ldr	r3, [pc, #188]	; (8004610 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8004552:	4a30      	ldr	r2, [pc, #192]	; (8004614 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 8004554:	2186      	movs	r1, #134	; 0x86
 8004556:	4830      	ldr	r0, [pc, #192]	; (8004618 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 8004558:	f007 f99e 	bl	800b898 <__assert_func>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800455c:	2000      	movs	r0, #0
 800455e:	e000      	b.n	8004562 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8004560:	2001      	movs	r0, #1

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8004562:	4b2e      	ldr	r3, [pc, #184]	; (800461c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe8>)
 8004564:	6358      	str	r0, [r3, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8004566:	8a4a      	ldrh	r2, [r1, #18]
 8004568:	8a0c      	ldrh	r4, [r1, #16]
 800456a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800456e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8004570:	68ca      	ldr	r2, [r1, #12]
 8004572:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8004574:	8aca      	ldrh	r2, [r1, #22]
 8004576:	8a0c      	ldrh	r4, [r1, #16]
 8004578:	1b12      	subs	r2, r2, r4
 800457a:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800457c:	680b      	ldr	r3, [r1, #0]
 800457e:	2b08      	cmp	r3, #8
 8004580:	d00d      	beq.n	800459e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6a>
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
    }
    else
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8004582:	4b26      	ldr	r3, [pc, #152]	; (800461c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe8>)
 8004584:	61d8      	str	r0, [r3, #28]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, 0);
 8004586:	2200      	movs	r2, #0
 8004588:	611a      	str	r2, [r3, #16]

        if (blitOp.dstFormat == Bitmap::RGB565)
 800458a:	7f8b      	ldrb	r3, [r1, #30]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d12d      	bne.n	80045ec <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb8>
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8004590:	698a      	ldr	r2, [r1, #24]
        {
            // set color
            WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8004592:	4b22      	ldr	r3, [pc, #136]	; (800461c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe8>)
 8004594:	639a      	str	r2, [r3, #56]	; 0x38
            // set color
            WRITE_REG(DMA2D->OCOLR, (blitOp.alpha << 24) | (blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
        }

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8004596:	4b21      	ldr	r3, [pc, #132]	; (800461c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe8>)
 8004598:	4a21      	ldr	r2, [pc, #132]	; (8004620 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xec>)
 800459a:	601a      	str	r2, [r3, #0]
    }
}
 800459c:	bd10      	pop	{r4, pc}
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800459e:	8acb      	ldrh	r3, [r1, #22]
 80045a0:	8a0a      	ldrh	r2, [r1, #16]
 80045a2:	1a9b      	subs	r3, r3, r2
 80045a4:	4a1d      	ldr	r2, [pc, #116]	; (800461c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe8>)
 80045a6:	6193      	str	r3, [r2, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80045a8:	8acb      	ldrh	r3, [r1, #22]
 80045aa:	8a0c      	ldrh	r4, [r1, #16]
 80045ac:	1b1b      	subs	r3, r3, r4
 80045ae:	6113      	str	r3, [r2, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80045b0:	6250      	str	r0, [r2, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 80045b2:	7f08      	ldrb	r0, [r1, #28]
 80045b4:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf0>)
 80045b6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80045ba:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3)) & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 80045bc:	7f0c      	ldrb	r4, [r1, #28]
 80045be:	6988      	ldr	r0, [r1, #24]
 80045c0:	0203      	lsls	r3, r0, #8
 80045c2:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 80045c6:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80045ca:	0144      	lsls	r4, r0, #5
 80045cc:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 80045d0:	4323      	orrs	r3, r4
 80045d2:	00c0      	lsls	r0, r0, #3
 80045d4:	b2c0      	uxtb	r0, r0
 80045d6:	4303      	orrs	r3, r0
 80045d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80045dc:	6213      	str	r3, [r2, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80045de:	68cb      	ldr	r3, [r1, #12]
 80045e0:	6153      	str	r3, [r2, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80045e2:	68cb      	ldr	r3, [r1, #12]
 80045e4:	60d3      	str	r3, [r2, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80045e6:	4b10      	ldr	r3, [pc, #64]	; (8004628 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf4>)
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	e7d7      	b.n	800459c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>
            WRITE_REG(DMA2D->OCOLR, (blitOp.alpha << 24) | (blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 80045ec:	7f08      	ldrb	r0, [r1, #28]
 80045ee:	698a      	ldr	r2, [r1, #24]
 80045f0:	0213      	lsls	r3, r2, #8
 80045f2:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 80045f6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80045fa:	0151      	lsls	r1, r2, #5
 80045fc:	f401 417c 	and.w	r1, r1, #64512	; 0xfc00
 8004600:	430b      	orrs	r3, r1
 8004602:	00d2      	lsls	r2, r2, #3
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	4313      	orrs	r3, r2
 8004608:	4a04      	ldr	r2, [pc, #16]	; (800461c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe8>)
 800460a:	6393      	str	r3, [r2, #56]	; 0x38
 800460c:	e7c3      	b.n	8004596 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x62>
 800460e:	bf00      	nop
 8004610:	0800d660 	.word	0x0800d660
 8004614:	0800d67c 	.word	0x0800d67c
 8004618:	0800d6cc 	.word	0x0800d6cc
 800461c:	4002b000 	.word	0x4002b000
 8004620:	00030201 	.word	0x00030201
 8004624:	00010009 	.word	0x00010009
 8004628:	00020201 	.word	0x00020201

0800462c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 800462c:	b570      	push	{r4, r5, r6, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800462e:	7f4b      	ldrb	r3, [r1, #29]
    switch (format)
 8004630:	2b0b      	cmp	r3, #11
 8004632:	d815      	bhi.n	8004660 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x34>
 8004634:	e8df f003 	tbb	[pc, r3]
 8004638:	141a1c06 	.word	0x141a1c06
 800463c:	12141414 	.word	0x12141414
 8004640:	12121212 	.word	0x12121212
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8004644:	2002      	movs	r0, #2
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8004646:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8004648:	2b0b      	cmp	r3, #11
 800464a:	d820      	bhi.n	800468e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x62>
 800464c:	e8df f003 	tbb	[pc, r3]
 8004650:	1f252712 	.word	0x1f252712
 8004654:	1d1f1f1f 	.word	0x1d1f1f1f
 8004658:	1d1d1d1d 	.word	0x1d1d1d1d
        dma2dColorMode = DMA2D_INPUT_L8;
 800465c:	2005      	movs	r0, #5
        break;
 800465e:	e7f2      	b.n	8004646 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
 8004660:	4b7f      	ldr	r3, [pc, #508]	; (8004860 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x234>)
 8004662:	4a80      	ldr	r2, [pc, #512]	; (8004864 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8004664:	2165      	movs	r1, #101	; 0x65
 8004666:	4880      	ldr	r0, [pc, #512]	; (8004868 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>)
 8004668:	f007 f916 	bl	800b898 <__assert_func>
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800466c:	2000      	movs	r0, #0
 800466e:	e7ea      	b.n	8004646 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8004670:	2001      	movs	r0, #1
 8004672:	e7e8      	b.n	8004646 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8004674:	2402      	movs	r4, #2
    switch (format)
 8004676:	2b0a      	cmp	r3, #10
 8004678:	d815      	bhi.n	80046a6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
 800467a:	e8df f003 	tbb	[pc, r3]
 800467e:	1c12      	.short	0x1c12
 8004680:	1414141a 	.word	0x1414141a
 8004684:	1c1c1c14 	.word	0x1c1c1c14
 8004688:	1c          	.byte	0x1c
 8004689:	00          	.byte	0x00
        dma2dColorMode = DMA2D_INPUT_L8;
 800468a:	2405      	movs	r4, #5
        break;
 800468c:	e7f3      	b.n	8004676 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        assert(0 && "Unsupported Format!");
 800468e:	4b74      	ldr	r3, [pc, #464]	; (8004860 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x234>)
 8004690:	4a74      	ldr	r2, [pc, #464]	; (8004864 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8004692:	2165      	movs	r1, #101	; 0x65
 8004694:	4874      	ldr	r0, [pc, #464]	; (8004868 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>)
 8004696:	f007 f8ff 	bl	800b898 <__assert_func>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800469a:	2400      	movs	r4, #0
 800469c:	e7eb      	b.n	8004676 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 800469e:	2401      	movs	r4, #1
 80046a0:	e7e9      	b.n	8004676 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80046a2:	2602      	movs	r6, #2
        break;
 80046a4:	e008      	b.n	80046b8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        assert(0 && "Unsupported Format!");
 80046a6:	4b6e      	ldr	r3, [pc, #440]	; (8004860 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x234>)
 80046a8:	4a70      	ldr	r2, [pc, #448]	; (800486c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x240>)
 80046aa:	2186      	movs	r1, #134	; 0x86
 80046ac:	486e      	ldr	r0, [pc, #440]	; (8004868 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>)
 80046ae:	f007 f8f3 	bl	800b898 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 80046b2:	2600      	movs	r6, #0
 80046b4:	e000      	b.n	80046b8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
 80046b6:	2601      	movs	r6, #1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80046b8:	8aca      	ldrh	r2, [r1, #22]
 80046ba:	8a0b      	ldrh	r3, [r1, #16]
 80046bc:	1ad2      	subs	r2, r2, r3
 80046be:	4b6c      	ldr	r3, [pc, #432]	; (8004870 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 80046c0:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80046c2:	8aca      	ldrh	r2, [r1, #22]
 80046c4:	8a0d      	ldrh	r5, [r1, #16]
 80046c6:	1b52      	subs	r2, r2, r5
 80046c8:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80046ca:	8a8a      	ldrh	r2, [r1, #20]
 80046cc:	8a0d      	ldrh	r5, [r1, #16]
 80046ce:	1b52      	subs	r2, r2, r5
 80046d0:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80046d2:	635e      	str	r6, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80046d4:	8a4a      	ldrh	r2, [r1, #18]
 80046d6:	8a0d      	ldrh	r5, [r1, #16]
 80046d8:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80046dc:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80046de:	68ca      	ldr	r2, [r1, #12]
 80046e0:	63da      	str	r2, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80046e2:	684a      	ldr	r2, [r1, #4]
 80046e4:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 80046e6:	680b      	ldr	r3, [r1, #0]
 80046e8:	2b80      	cmp	r3, #128	; 0x80
 80046ea:	d033      	beq.n	8004754 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 80046ec:	d817      	bhi.n	800471e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 80046ee:	2b20      	cmp	r3, #32
 80046f0:	d07b      	beq.n	80047ea <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1be>
 80046f2:	2b40      	cmp	r3, #64	; 0x40
 80046f4:	d079      	beq.n	80047ea <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1be>
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	f040 8084 	bne.w	8004804 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80046fc:	7f0b      	ldrb	r3, [r1, #28]
 80046fe:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004702:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8004706:	4b5a      	ldr	r3, [pc, #360]	; (8004870 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8004708:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800470a:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800470c:	68ca      	ldr	r2, [r1, #12]
 800470e:	615a      	str	r2, [r3, #20]
        if (blitOp.srcFormat == Bitmap::L8)
 8004710:	7f4b      	ldrb	r3, [r1, #29]
 8004712:	2b0b      	cmp	r3, #11
 8004714:	d036      	beq.n	8004784 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8004716:	4b56      	ldr	r3, [pc, #344]	; (8004870 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8004718:	4a56      	ldr	r2, [pc, #344]	; (8004874 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x248>)
 800471a:	601a      	str	r2, [r3, #0]
        break;
 800471c:	e031      	b.n	8004782 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x156>
    switch (blitOp.operation)
 800471e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004722:	d16f      	bne.n	8004804 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8004724:	7f0a      	ldrb	r2, [r1, #28]
 8004726:	4b54      	ldr	r3, [pc, #336]	; (8004878 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x24c>)
 8004728:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800472c:	4850      	ldr	r0, [pc, #320]	; (8004870 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 800472e:	61c3      	str	r3, [r0, #28]
 8004730:	698a      	ldr	r2, [r1, #24]
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 8004732:	0213      	lsls	r3, r2, #8
 8004734:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 8004738:	0155      	lsls	r5, r2, #5
 800473a:	f405 457c 	and.w	r5, r5, #64512	; 0xfc00
 800473e:	432b      	orrs	r3, r5
 8004740:	00d2      	lsls	r2, r2, #3
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	4313      	orrs	r3, r2
 8004746:	6203      	str	r3, [r0, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8004748:	6244      	str	r4, [r0, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800474a:	68cb      	ldr	r3, [r1, #12]
 800474c:	6143      	str	r3, [r0, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800474e:	4b49      	ldr	r3, [pc, #292]	; (8004874 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x248>)
 8004750:	6003      	str	r3, [r0, #0]
        break;
 8004752:	e016      	b.n	8004782 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x156>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8004754:	7f0a      	ldrb	r2, [r1, #28]
 8004756:	4b49      	ldr	r3, [pc, #292]	; (800487c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>)
 8004758:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800475c:	4844      	ldr	r0, [pc, #272]	; (8004870 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 800475e:	61c3      	str	r3, [r0, #28]
 8004760:	698a      	ldr	r2, [r1, #24]
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 8004762:	0213      	lsls	r3, r2, #8
 8004764:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 8004768:	0155      	lsls	r5, r2, #5
 800476a:	f405 457c 	and.w	r5, r5, #64512	; 0xfc00
 800476e:	432b      	orrs	r3, r5
 8004770:	00d2      	lsls	r2, r2, #3
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	4313      	orrs	r3, r2
 8004776:	6203      	str	r3, [r0, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8004778:	6244      	str	r4, [r0, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800477a:	68cb      	ldr	r3, [r1, #12]
 800477c:	6143      	str	r3, [r0, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800477e:	4b3d      	ldr	r3, [pc, #244]	; (8004874 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x248>)
 8004780:	6003      	str	r3, [r0, #0]
}
 8004782:	bd70      	pop	{r4, r5, r6, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8004784:	688b      	ldr	r3, [r1, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8004786:	1d19      	adds	r1, r3, #4
 8004788:	4a39      	ldr	r2, [pc, #228]	; (8004870 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 800478a:	62d1      	str	r1, [r2, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 800478c:	781a      	ldrb	r2, [r3, #0]
 800478e:	b16a      	cbz	r2, 80047ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 8004790:	2a01      	cmp	r2, #1
 8004792:	d120      	bne.n	80047d6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1aa>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8004794:	4936      	ldr	r1, [pc, #216]	; (8004870 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8004796:	69c8      	ldr	r0, [r1, #28]
 8004798:	4a39      	ldr	r2, [pc, #228]	; (8004880 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x254>)
 800479a:	4002      	ands	r2, r0
 800479c:	885b      	ldrh	r3, [r3, #2]
 800479e:	3b01      	subs	r3, #1
 80047a0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80047a4:	f042 0210 	orr.w	r2, r2, #16
 80047a8:	61ca      	str	r2, [r1, #28]
                break;
 80047aa:	e008      	b.n	80047be <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x192>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80047ac:	4930      	ldr	r1, [pc, #192]	; (8004870 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 80047ae:	69c8      	ldr	r0, [r1, #28]
 80047b0:	4a33      	ldr	r2, [pc, #204]	; (8004880 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x254>)
 80047b2:	4002      	ands	r2, r0
 80047b4:	885b      	ldrh	r3, [r3, #2]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80047bc:	61ca      	str	r2, [r1, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80047be:	4a2c      	ldr	r2, [pc, #176]	; (8004870 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 80047c0:	69d3      	ldr	r3, [r2, #28]
 80047c2:	f043 0320 	orr.w	r3, r3, #32
 80047c6:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80047c8:	4b29      	ldr	r3, [pc, #164]	; (8004870 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	f013 0f20 	tst.w	r3, #32
 80047d0:	d007      	beq.n	80047e2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b6>
                __NOP();
 80047d2:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80047d4:	e7f8      	b.n	80047c8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19c>
                assert(0 && "Unsupported format");
 80047d6:	4b2b      	ldr	r3, [pc, #172]	; (8004884 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x258>)
 80047d8:	4a2b      	ldr	r2, [pc, #172]	; (8004888 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25c>)
 80047da:	21fc      	movs	r1, #252	; 0xfc
 80047dc:	4822      	ldr	r0, [pc, #136]	; (8004868 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>)
 80047de:	f007 f85b 	bl	800b898 <__assert_func>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80047e2:	4b23      	ldr	r3, [pc, #140]	; (8004870 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 80047e4:	2210      	movs	r2, #16
 80047e6:	609a      	str	r2, [r3, #8]
 80047e8:	e795      	b.n	8004716 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xea>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80047ea:	7f0b      	ldrb	r3, [r1, #28]
 80047ec:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80047f0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80047f4:	4b1e      	ldr	r3, [pc, #120]	; (8004870 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 80047f6:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80047f8:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80047fa:	68ca      	ldr	r2, [r1, #12]
 80047fc:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80047fe:	4a1d      	ldr	r2, [pc, #116]	; (8004874 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x248>)
 8004800:	601a      	str	r2, [r3, #0]
        break;
 8004802:	e7be      	b.n	8004782 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x156>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8004804:	7f0b      	ldrb	r3, [r1, #28]
 8004806:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800480a:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800480e:	4b18      	ldr	r3, [pc, #96]	; (8004870 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8004810:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat == Bitmap::L8)
 8004812:	7f4b      	ldrb	r3, [r1, #29]
 8004814:	2b0b      	cmp	r3, #11
 8004816:	d004      	beq.n	8004822 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8004818:	4b15      	ldr	r3, [pc, #84]	; (8004870 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 800481a:	f240 2201 	movw	r2, #513	; 0x201
 800481e:	601a      	str	r2, [r3, #0]
}
 8004820:	e7af      	b.n	8004782 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x156>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8004822:	6889      	ldr	r1, [r1, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8004824:	1d0b      	adds	r3, r1, #4
 8004826:	4a12      	ldr	r2, [pc, #72]	; (8004870 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8004828:	62d3      	str	r3, [r2, #44]	; 0x2c
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800482a:	69d0      	ldr	r0, [r2, #28]
 800482c:	4b14      	ldr	r3, [pc, #80]	; (8004880 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x254>)
 800482e:	4003      	ands	r3, r0
 8004830:	8849      	ldrh	r1, [r1, #2]
 8004832:	3901      	subs	r1, #1
 8004834:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004838:	f043 0310 	orr.w	r3, r3, #16
 800483c:	61d3      	str	r3, [r2, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800483e:	69d3      	ldr	r3, [r2, #28]
 8004840:	f043 0320 	orr.w	r3, r3, #32
 8004844:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8004846:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	f013 0f20 	tst.w	r3, #32
 800484e:	d001      	beq.n	8004854 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>
                __NOP();
 8004850:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8004852:	e7f8      	b.n	8004846 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21a>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8004854:	4b06      	ldr	r3, [pc, #24]	; (8004870 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8004856:	2210      	movs	r2, #16
 8004858:	609a      	str	r2, [r3, #8]
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800485a:	4a0c      	ldr	r2, [pc, #48]	; (800488c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x260>)
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	e790      	b.n	8004782 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x156>
 8004860:	0800d660 	.word	0x0800d660
 8004864:	0800d724 	.word	0x0800d724
 8004868:	0800d6cc 	.word	0x0800d6cc
 800486c:	0800d67c 	.word	0x0800d67c
 8004870:	4002b000 	.word	0x4002b000
 8004874:	00020201 	.word	0x00020201
 8004878:	00020009 	.word	0x00020009
 800487c:	0002000a 	.word	0x0002000a
 8004880:	ffff00ef 	.word	0xffff00ef
 8004884:	0800d770 	.word	0x0800d770
 8004888:	0800d78c 	.word	0x0800d78c
 800488c:	00010201 	.word	0x00010201

08004890 <_ZN10STM32F7DMAC1Ev>:
STM32F7DMA::STM32F7DMA()
 8004890:	b538      	push	{r3, r4, r5, lr}
 8004892:	4605      	mov	r5, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8004894:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8004896:	6068      	str	r0, [r5, #4]
 8004898:	2300      	movs	r3, #0
 800489a:	722b      	strb	r3, [r5, #8]
 800489c:	726b      	strb	r3, [r5, #9]
 800489e:	462c      	mov	r4, r5
 80048a0:	4b08      	ldr	r3, [pc, #32]	; (80048c4 <_ZN10STM32F7DMAC1Ev+0x34>)
 80048a2:	f844 3b20 	str.w	r3, [r4], #32
 80048a6:	2260      	movs	r2, #96	; 0x60
 80048a8:	4621      	mov	r1, r4
 80048aa:	f002 fe55 	bl	8007558 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80048ae:	235f      	movs	r3, #95	; 0x5f
 80048b0:	e003      	b.n	80048ba <_ZN10STM32F7DMAC1Ev+0x2a>
        : color(0)
 80048b2:	2200      	movs	r2, #0
 80048b4:	61a2      	str	r2, [r4, #24]
 80048b6:	3420      	adds	r4, #32
 80048b8:	3b01      	subs	r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	daf9      	bge.n	80048b2 <_ZN10STM32F7DMAC1Ev+0x22>
}
 80048be:	4628      	mov	r0, r5
 80048c0:	bd38      	pop	{r3, r4, r5, pc}
 80048c2:	bf00      	nop
 80048c4:	0800cfc4 	.word	0x0800cfc4

080048c8 <_Z41__static_initialization_and_destruction_0ii>:
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
}
 80048c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048cc:	4604      	mov	r4, r0
 80048ce:	460e      	mov	r6, r1
 80048d0:	2801      	cmp	r0, #1
 80048d2:	d006      	beq.n	80048e2 <_Z41__static_initialization_and_destruction_0ii+0x1a>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80048d4:	b91c      	cbnz	r4, 80048de <_Z41__static_initialization_and_destruction_0ii+0x16>
 80048d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048da:	429e      	cmp	r6, r3
 80048dc:	d06d      	beq.n	80049ba <_Z41__static_initialization_and_destruction_0ii+0xf2>
}
 80048de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048e6:	4299      	cmp	r1, r3
 80048e8:	d1f4      	bne.n	80048d4 <_Z41__static_initialization_and_destruction_0ii+0xc>
{
public:

    STM32TouchController() {}
 80048ea:	4d36      	ldr	r5, [pc, #216]	; (80049c4 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80048ec:	4b36      	ldr	r3, [pc, #216]	; (80049c8 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 80048ee:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
static STM32F7DMA dma;
 80048f2:	f105 0884 	add.w	r8, r5, #132	; 0x84
 80048f6:	4640      	mov	r0, r8
 80048f8:	f7ff ffca 	bl	8004890 <_ZN10STM32F7DMAC1Ev>
static LCD16bpp display;
 80048fc:	f605 47a4 	addw	r7, r5, #3236	; 0xca4
 8004900:	4638      	mov	r0, r7
 8004902:	f005 fbd7 	bl	800a0b4 <_ZN8touchgfx8LCD16bppC1Ev>
          lastRenderVariant(HARDWARE)
 8004906:	f8c5 8008 	str.w	r8, [r5, #8]
 800490a:	60ef      	str	r7, [r5, #12]
 800490c:	f105 0380 	add.w	r3, r5, #128	; 0x80
 8004910:	612b      	str	r3, [r5, #16]
 8004912:	2300      	movs	r3, #0
 8004914:	616b      	str	r3, [r5, #20]
 8004916:	61ab      	str	r3, [r5, #24]
 8004918:	61eb      	str	r3, [r5, #28]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 800491a:	842b      	strh	r3, [r5, #32]
 800491c:	846b      	strh	r3, [r5, #34]	; 0x22
 800491e:	84ab      	strh	r3, [r5, #36]	; 0x24
 8004920:	84eb      	strh	r3, [r5, #38]	; 0x26
 8004922:	852b      	strh	r3, [r5, #40]	; 0x28
 8004924:	856b      	strh	r3, [r5, #42]	; 0x2a
 8004926:	85ab      	strh	r3, [r5, #44]	; 0x2c
 8004928:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : listener(0), dragThresholdValue(0)
 800492c:	632b      	str	r3, [r5, #48]	; 0x30
 800492e:	86ab      	strh	r3, [r5, #52]	; 0x34
 8004930:	63eb      	str	r3, [r5, #60]	; 0x3c
 8004932:	642b      	str	r3, [r5, #64]	; 0x40
 8004934:	646b      	str	r3, [r5, #68]	; 0x44
 8004936:	64ab      	str	r3, [r5, #72]	; 0x48
 8004938:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
 800493c:	2201      	movs	r2, #1
 800493e:	f885 204d 	strb.w	r2, [r5, #77]	; 0x4d
 8004942:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
 8004946:	652b      	str	r3, [r5, #80]	; 0x50
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
    {
        x = 0;
 8004948:	f8a5 3054 	strh.w	r3, [r5, #84]	; 0x54
        y = 0;
 800494c:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
        width = 0;
 8004950:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
        height = 0;
 8004954:	f8a5 305a 	strh.w	r3, [r5, #90]	; 0x5a
 8004958:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
 800495c:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
 8004960:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
 8004964:	f885 206b 	strb.w	r2, [r5, #107]	; 0x6b
 8004968:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
 800496c:	f885 306d 	strb.w	r3, [r5, #109]	; 0x6d
 8004970:	f885 306e 	strb.w	r3, [r5, #110]	; 0x6e
 8004974:	f885 306f 	strb.w	r3, [r5, #111]	; 0x6f
 8004978:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
 800497c:	676b      	str	r3, [r5, #116]	; 0x74
 800497e:	f885 3079 	strb.w	r3, [r5, #121]	; 0x79
 8004982:	f885 307a 	strb.w	r3, [r5, #122]	; 0x7a
 8004986:	f885 207b 	strb.w	r2, [r5, #123]	; 0x7b
 800498a:	f885 207c 	strb.w	r2, [r5, #124]	; 0x7c
        instance = this;
 800498e:	1d29      	adds	r1, r5, #4
 8004990:	4a0e      	ldr	r2, [pc, #56]	; (80049cc <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8004992:	6011      	str	r1, [r2, #0]
        DISPLAY_WIDTH = width;
 8004994:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004998:	4a0d      	ldr	r2, [pc, #52]	; (80049d0 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 800499a:	8011      	strh	r1, [r2, #0]
        DISPLAY_HEIGHT = height;
 800499c:	f44f 7288 	mov.w	r2, #272	; 0x110
 80049a0:	480c      	ldr	r0, [pc, #48]	; (80049d4 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80049a2:	8002      	strh	r2, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 80049a4:	480c      	ldr	r0, [pc, #48]	; (80049d8 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80049a6:	7003      	strb	r3, [r0, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80049a8:	480c      	ldr	r0, [pc, #48]	; (80049dc <_Z41__static_initialization_and_destruction_0ii+0x114>)
 80049aa:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80049ac:	490c      	ldr	r1, [pc, #48]	; (80049e0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 80049ae:	800a      	strh	r2, [r1, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80049b0:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80049b4:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80049b6:	606b      	str	r3, [r5, #4]
    }
 80049b8:	e78c      	b.n	80048d4 <_Z41__static_initialization_and_destruction_0ii+0xc>
static STM32F7DMA dma;
 80049ba:	480b      	ldr	r0, [pc, #44]	; (80049e8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80049bc:	f7ff fd78 	bl	80044b0 <_ZN10STM32F7DMAD1Ev>
}
 80049c0:	e78d      	b.n	80048de <_Z41__static_initialization_and_destruction_0ii+0x16>
 80049c2:	bf00      	nop
 80049c4:	200001b0 	.word	0x200001b0
 80049c8:	0800cef0 	.word	0x0800cef0
 80049cc:	20001154 	.word	0x20001154
 80049d0:	20001148 	.word	0x20001148
 80049d4:	2000114a 	.word	0x2000114a
 80049d8:	2000114c 	.word	0x2000114c
 80049dc:	2000114e 	.word	0x2000114e
 80049e0:	20001150 	.word	0x20001150
 80049e4:	0800cf08 	.word	0x0800cf08
 80049e8:	20000234 	.word	0x20000234

080049ec <_GLOBAL__sub_I_touchgfx_init>:
 80049ec:	b508      	push	{r3, lr}
 80049ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049f2:	2001      	movs	r0, #1
 80049f4:	f7ff ff68 	bl	80048c8 <_Z41__static_initialization_and_destruction_0ii>
 80049f8:	bd08      	pop	{r3, pc}

080049fa <_GLOBAL__sub_D_touchgfx_init>:
 80049fa:	b508      	push	{r3, lr}
 80049fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004a00:	2000      	movs	r0, #0
 8004a02:	f7ff ff61 	bl	80048c8 <_Z41__static_initialization_and_destruction_0ii>
 8004a06:	bd08      	pop	{r3, pc}

08004a08 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a08:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8004a0a:	2290      	movs	r2, #144	; 0x90
 8004a0c:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8004a10:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	e000e100 	.word	0xe000e100

08004a1c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a1c:	4b03      	ldr	r3, [pc, #12]	; (8004a2c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8004a1e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004a22:	609a      	str	r2, [r3, #8]
 8004a24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a28:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
    NVIC_EnableIRQ(LTDC_IRQn);
}
 8004a2a:	4770      	bx	lr
 8004a2c:	e000e100 	.word	0xe000e100

08004a30 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a30:	4b08      	ldr	r3, [pc, #32]	; (8004a54 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8004a32:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004a36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8004a3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8004a4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004a4e:	f3bf 8f6f 	isb	sy

void TouchGFXGeneratedHAL::disableInterrupts()
{
    NVIC_DisableIRQ(DMA2D_IRQn);
    NVIC_DisableIRQ(LTDC_IRQn);
}
 8004a52:	4770      	bx	lr
 8004a54:	e000e100 	.word	0xe000e100

08004a58 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8004a58:	4a09      	ldr	r2, [pc, #36]	; (8004a80 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8004a5a:	68d3      	ldr	r3, [r2, #12]
 8004a5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	4807      	ldr	r0, [pc, #28]	; (8004a84 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8004a66:	8003      	strh	r3, [r0, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8004a68:	6911      	ldr	r1, [r2, #16]
 8004a6a:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8004a6e:	3901      	subs	r1, #1
 8004a70:	8041      	strh	r1, [r0, #2]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8004a72:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8004a74:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	6353      	str	r3, [r2, #52]	; 0x34
}
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40016800 	.word	0x40016800
 8004a84:	20000ecc 	.word	0x20000ecc

08004a88 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8004a88:	4b01      	ldr	r3, [pc, #4]	; (8004a90 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8004a8a:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	40016884 	.word	0x40016884

08004a94 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8004a94:	4b02      	ldr	r3, [pc, #8]	; (8004aa0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)
 8004a96:	6299      	str	r1, [r3, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8004a98:	3b84      	subs	r3, #132	; 0x84
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004a9e:	4770      	bx	lr
 8004aa0:	40016884 	.word	0x40016884

08004aa4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8004aa4:	b510      	push	{r4, lr}
    HAL::flushFrameBuffer(rect);
 8004aa6:	f001 fe43 	bl	8006730 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8004aaa:	4b11      	ldr	r3, [pc, #68]	; (8004af0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004ab2:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8004ab6:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004aba:	f3c0 324e 	ubfx	r2, r0, #13, #15
 8004abe:	e000      	b.n	8004ac2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x1e>
    } while(sets-- != 0U);
 8004ac0:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004ac2:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004ac6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8004aca:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 8004ace:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 8004ad2:	4c07      	ldr	r4, [pc, #28]	; (8004af0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 8004ad4:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
      } while (ways-- != 0U);
 8004ad8:	460b      	mov	r3, r1
 8004ada:	3901      	subs	r1, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f2      	bne.n	8004ac6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x22>
    } while(sets-- != 0U);
 8004ae0:	1e53      	subs	r3, r2, #1
 8004ae2:	2a00      	cmp	r2, #0
 8004ae4:	d1ec      	bne.n	8004ac0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x1c>
 8004ae6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004aea:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanInvalidateDCache().
    SCB_CleanInvalidateDCache();
}
 8004aee:	bd10      	pop	{r4, pc}
 8004af0:	e000ed00 	.word	0xe000ed00

08004af4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8004af4:	b508      	push	{r3, lr}
    return HAL::blockCopy(dest, src, numBytes);
 8004af6:	f001 ff42 	bl	800697e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
}
 8004afa:	bd08      	pop	{r3, pc}

08004afc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // using SCB_CleanInvalidateDCache().
    SCB_CleanInvalidateDCache();
}

void TouchGFXGeneratedHAL::FlushCache()
{
 8004afc:	b410      	push	{r4}
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8004afe:	4b12      	ldr	r3, [pc, #72]	; (8004b48 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004b06:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8004b0a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004b0e:	f3c0 324e 	ubfx	r2, r0, #13, #15
 8004b12:	e000      	b.n	8004b16 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x1a>
    } while(sets-- != 0U);
 8004b14:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004b16:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004b1a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8004b1e:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 8004b22:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 8004b26:	4c08      	ldr	r4, [pc, #32]	; (8004b48 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 8004b28:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
      } while (ways-- != 0U);
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	3901      	subs	r1, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f2      	bne.n	8004b1a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x1e>
    } while(sets-- != 0U);
 8004b34:	1e53      	subs	r3, r2, #1
 8004b36:	2a00      	cmp	r2, #0
 8004b38:	d1ec      	bne.n	8004b14 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x18>
 8004b3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b3e:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanInvalidateDCache().
    SCB_CleanInvalidateDCache();
}
 8004b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	e000ed00 	.word	0xe000ed00

08004b4c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:
{
 8004b4c:	b410      	push	{r4}
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8004b4e:	4b12      	ldr	r3, [pc, #72]	; (8004b98 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x4c>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004b56:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8004b5a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004b5e:	f3c0 324e 	ubfx	r2, r0, #13, #15
 8004b62:	e000      	b.n	8004b66 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x1a>
    } while(sets-- != 0U);
 8004b64:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004b66:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004b6a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8004b6e:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 8004b72:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 8004b76:	4c08      	ldr	r4, [pc, #32]	; (8004b98 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x4c>)
 8004b78:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
      } while (ways-- != 0U);
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	3901      	subs	r1, #1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1f2      	bne.n	8004b6a <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x1e>
    } while(sets-- != 0U);
 8004b84:	1e53      	subs	r3, r2, #1
 8004b86:	2a00      	cmp	r2, #0
 8004b88:	d1ec      	bne.n	8004b64 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x18>
 8004b8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b8e:	f3bf 8f6f 	isb	sy
}
 8004b92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	e000ed00 	.word	0xe000ed00

08004b9c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8004b9c:	b510      	push	{r4, lr}
        if (LTDC->LIPCR == lcd_int_active_line)
 8004b9e:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <HAL_LTDC_LineEventCallback+0x4c>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	4a12      	ldr	r2, [pc, #72]	; (8004bec <HAL_LTDC_LineEventCallback+0x50>)
 8004ba4:	8811      	ldrh	r1, [r2, #0]
 8004ba6:	428b      	cmp	r3, r1
 8004ba8:	d00a      	beq.n	8004bc0 <HAL_LTDC_LineEventCallback+0x24>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8004baa:	f7fd f9e7 	bl	8001f7c <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8004bae:	2000      	movs	r0, #0
 8004bb0:	f7ff fb25 	bl	80041fe <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        return instance;
 8004bb4:	4b0e      	ldr	r3, [pc, #56]	; (8004bf0 <HAL_LTDC_LineEventCallback+0x54>)
 8004bb6:	6818      	ldr	r0, [r3, #0]
        allowDMATransfers();
 8004bb8:	6803      	ldr	r3, [r0, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	4798      	blx	r3
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8004bbe:	bd10      	pop	{r4, pc}
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8004bc0:	8851      	ldrh	r1, [r2, #2]
 8004bc2:	f7fd f9db 	bl	8001f7c <HAL_LTDC_ProgramLineEvent>
        return instance;
 8004bc6:	4c0a      	ldr	r4, [pc, #40]	; (8004bf0 <HAL_LTDC_LineEventCallback+0x54>)
 8004bc8:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8004bca:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8004bce:	3301      	adds	r3, #1
 8004bd0:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
 8004bd4:	f7ff fc3e 	bl	8004454 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
 8004bd8:	6820      	ldr	r0, [r4, #0]
 8004bda:	f002 fb59 	bl	8007290 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8004bde:	2000      	movs	r0, #0
 8004be0:	f7ff fb0c 	bl	80041fc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8004be4:	e7eb      	b.n	8004bbe <HAL_LTDC_LineEventCallback+0x22>
 8004be6:	bf00      	nop
 8004be8:	40016800 	.word	0x40016800
 8004bec:	20000ecc 	.word	0x20000ecc
 8004bf0:	20001154 	.word	0x20001154

08004bf4 <_ZN19ButtonEventsHandler24notifyButtonShortPressedEh>:

void ButtonEventsHandler::unsubscribe(interface::ButtonEventsHandlerObserver *observer) {
	observers.remove(observer);
}

void ButtonEventsHandler::notifyButtonShortPressed(ButtonIndex buttonIndex) {
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	460e      	mov	r6, r1
       *  Returns a read/write iterator that points to the first element in the
       *  %list.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
      { return iterator(this->_M_impl._M_node._M_next); }
 8004bf8:	4605      	mov	r5, r0
	for(interface::ButtonEventsHandlerObserver* observer : observers) {
 8004bfa:	f855 4f08 	ldr.w	r4, [r5, #8]!
 8004bfe:	42a5      	cmp	r5, r4
 8004c00:	d006      	beq.n	8004c10 <_ZN19ButtonEventsHandler24notifyButtonShortPressedEh+0x1c>
 8004c02:	68a0      	ldr	r0, [r4, #8]
		observer->onButtonShortPressed(buttonIndex);
 8004c04:	6803      	ldr	r3, [r0, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	4631      	mov	r1, r6
 8004c0a:	4798      	blx	r3
	_M_node = _M_node->_M_next;
 8004c0c:	6824      	ldr	r4, [r4, #0]
	return *this;
 8004c0e:	e7f6      	b.n	8004bfe <_ZN19ButtonEventsHandler24notifyButtonShortPressedEh+0xa>
	}
}
 8004c10:	bd70      	pop	{r4, r5, r6, pc}

08004c12 <_ZThn4_N19ButtonEventsHandler24notifyButtonShortPressedEh>:
public:
	bool subscribe(interface::ButtonEventsHandlerObserver * observer);			    ///< @brief Registers a new observer. Returns true on success.
	void unsubscribe(interface::ButtonEventsHandlerObserver * observer);	        ///< @brief Un-subscribes a registered observer.

protected:
	void notifyButtonShortPressed(ButtonIndex buttonIndex);	            ///< @brief Notifies observers about a button short pressed.
 8004c12:	f1a0 0004 	sub.w	r0, r0, #4
 8004c16:	f7ff bfed 	b.w	8004bf4 <_ZN19ButtonEventsHandler24notifyButtonShortPressedEh>

08004c1a <_ZN19ButtonEventsHandler23notifyButtonLongPressedEh>:

void ButtonEventsHandler::notifyButtonLongPressed(ButtonIndex buttonIndex) {
 8004c1a:	b570      	push	{r4, r5, r6, lr}
 8004c1c:	460e      	mov	r6, r1
      { return iterator(this->_M_impl._M_node._M_next); }
 8004c1e:	4605      	mov	r5, r0
	for(interface::ButtonEventsHandlerObserver* observer : observers) {
 8004c20:	f855 4f08 	ldr.w	r4, [r5, #8]!
 8004c24:	42a5      	cmp	r5, r4
 8004c26:	d006      	beq.n	8004c36 <_ZN19ButtonEventsHandler23notifyButtonLongPressedEh+0x1c>
 8004c28:	68a0      	ldr	r0, [r4, #8]
		observer->onButtonLongPressed(buttonIndex);
 8004c2a:	6803      	ldr	r3, [r0, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	4631      	mov	r1, r6
 8004c30:	4798      	blx	r3
	_M_node = _M_node->_M_next;
 8004c32:	6824      	ldr	r4, [r4, #0]
	return *this;
 8004c34:	e7f6      	b.n	8004c24 <_ZN19ButtonEventsHandler23notifyButtonLongPressedEh+0xa>
	}
}
 8004c36:	bd70      	pop	{r4, r5, r6, pc}

08004c38 <_ZThn4_N19ButtonEventsHandler23notifyButtonLongPressedEh>:
    void notifyButtonLongPressed(ButtonIndex buttonIndex);              ///< @brief Notifies observers about a button long pressed.
 8004c38:	f1a0 0004 	sub.w	r0, r0, #4
 8004c3c:	f7ff bfed 	b.w	8004c1a <_ZN19ButtonEventsHandler23notifyButtonLongPressedEh>

08004c40 <_ZN19ButtonEventsHandler15onButtonChangedEhb>:
void ButtonEventsHandler::onButtonChanged(ButtonIndex buttonIndex, bool pressed) {
 8004c40:	b510      	push	{r4, lr}
 8004c42:	460c      	mov	r4, r1
	return *(this->_M_impl._M_start + __n);
 8004c44:	6943      	ldr	r3, [r0, #20]
	buttons[buttonIndex]->onChanged(pressed);
 8004c46:	4611      	mov	r1, r2
 8004c48:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004c4c:	f000 fa3e 	bl	80050cc <_ZN13ButtonStateSm9onChangedEb>
}
 8004c50:	bd10      	pop	{r4, pc}

08004c52 <_ZN19ButtonEventsHandler9subscribeEPN9interface27ButtonEventsHandlerObserverE>:
	if(observer != nullptr) {
 8004c52:	b909      	cbnz	r1, 8004c58 <_ZN19ButtonEventsHandler9subscribeEPN9interface27ButtonEventsHandlerObserverE+0x6>
	return false;
 8004c54:	2000      	movs	r0, #0
}
 8004c56:	4770      	bx	lr
bool ButtonEventsHandler::subscribe(interface::ButtonEventsHandlerObserver *observer) {
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	460c      	mov	r4, r1
		observers.push_front(observer);
 8004c5c:	f100 0508 	add.w	r5, r0, #8
      { return iterator(this->_M_impl._M_node._M_next); }
 8004c60:	6886      	ldr	r6, [r0, #8]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004c62:	200c      	movs	r0, #12
 8004c64:	f006 fbe5 	bl	800b432 <_Znwj>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004c68:	6084      	str	r4, [r0, #8]
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
	 __tmp->_M_hook(__position._M_node);
 8004c6a:	4631      	mov	r1, r6
 8004c6c:	f006 fbf5 	bl	800b45a <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8004c70:	68ab      	ldr	r3, [r5, #8]
 8004c72:	3301      	adds	r3, #1
 8004c74:	60ab      	str	r3, [r5, #8]
		return true;
 8004c76:	2001      	movs	r0, #1
}
 8004c78:	bd70      	pop	{r4, r5, r6, pc}

08004c7a <_ZThn4_N19ButtonEventsHandler9subscribeEPN9interface27ButtonEventsHandlerObserverE>:
	bool subscribe(interface::ButtonEventsHandlerObserver * observer);			    ///< @brief Registers a new observer. Returns true on success.
 8004c7a:	f1a0 0004 	sub.w	r0, r0, #4
 8004c7e:	f7ff bfe8 	b.w	8004c52 <_ZN19ButtonEventsHandler9subscribeEPN9interface27ButtonEventsHandlerObserverE>

08004c82 <_ZN19ButtonEventsHandler20startButtonsBehaviorEv>:
void ButtonEventsHandler::startButtonsBehavior() {
 8004c82:	b538      	push	{r3, r4, r5, lr}
	for(ButtonStateSm* button : buttons) {
 8004c84:	6944      	ldr	r4, [r0, #20]
      : _M_current(__i) { }
 8004c86:	6985      	ldr	r5, [r0, #24]
 8004c88:	42a5      	cmp	r5, r4
 8004c8a:	d005      	beq.n	8004c98 <_ZN19ButtonEventsHandler20startButtonsBehaviorEv+0x16>
 8004c8c:	f854 0b04 	ldr.w	r0, [r4], #4
		button->startBehavior();
 8004c90:	6803      	ldr	r3, [r0, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	4798      	blx	r3
	return *this;
 8004c96:	e7f7      	b.n	8004c88 <_ZN19ButtonEventsHandler20startButtonsBehaviorEv+0x6>
}
 8004c98:	bd38      	pop	{r3, r4, r5, pc}

08004c9a <_ZNSt7__cxx114listIPN9interface27ButtonEventsHandlerObserverESaIS3_EE6removeERKS3_>:
# define _GLIBCXX20_ONLY(__expr)
#endif

  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::__remove_return_type
    list<_Tp, _Alloc>::
 8004c9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c9e:	4607      	mov	r7, r0
 8004ca0:	460e      	mov	r6, r1
    remove(const value_type& __value)
    {
      size_type __removed __attribute__((__unused__)) = 0;
      iterator __first = begin();
 8004ca2:	6803      	ldr	r3, [r0, #0]
      { return iterator(&this->_M_impl._M_node); }
 8004ca4:	4680      	mov	r8, r0
      iterator __last = end();
      iterator __extra = __last;
 8004ca6:	4681      	mov	r9, r0
 8004ca8:	e009      	b.n	8004cbe <_ZNSt7__cxx114listIPN9interface27ButtonEventsHandlerObserverESaIS3_EE6removeERKS3_+0x24>
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	3b01      	subs	r3, #1
 8004cae:	60bb      	str	r3, [r7, #8]
      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
      {
	this->_M_dec_size(1);
	__position._M_node->_M_unhook();
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	f006 fbd9 	bl	800b468 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	::operator delete(__p);
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	f006 fba8 	bl	800b40c <_ZdlPv>
		  _GLIBCXX20_ONLY( __removed++ );
		}
	      else
		__extra = __first;
	    }
	  __first = __next;
 8004cbc:	4623      	mov	r3, r4
      { return __x._M_node != __y._M_node; }
 8004cbe:	461d      	mov	r5, r3
      while (__first != __last)
 8004cc0:	4598      	cmp	r8, r3
 8004cc2:	d00a      	beq.n	8004cda <_ZNSt7__cxx114listIPN9interface27ButtonEventsHandlerObserverESaIS3_EE6removeERKS3_+0x40>
	_M_node = _M_node->_M_next;
 8004cc4:	681c      	ldr	r4, [r3, #0]
	  if (*__first == __value)
 8004cc6:	6899      	ldr	r1, [r3, #8]
 8004cc8:	6832      	ldr	r2, [r6, #0]
 8004cca:	4291      	cmp	r1, r2
 8004ccc:	d1f6      	bne.n	8004cbc <_ZNSt7__cxx114listIPN9interface27ButtonEventsHandlerObserverESaIS3_EE6removeERKS3_+0x22>
      // Can be used to avoid value-initialization zeroing _M_storage.
      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      { return static_cast<void*>(&_M_storage); }
 8004cce:	f103 0208 	add.w	r2, r3, #8
	      if (std::__addressof(*__first) != std::__addressof(__value))
 8004cd2:	4296      	cmp	r6, r2
 8004cd4:	d1e9      	bne.n	8004caa <_ZNSt7__cxx114listIPN9interface27ButtonEventsHandlerObserverESaIS3_EE6removeERKS3_+0x10>
		__extra = __first;
 8004cd6:	4699      	mov	r9, r3
 8004cd8:	e7f0      	b.n	8004cbc <_ZNSt7__cxx114listIPN9interface27ButtonEventsHandlerObserverESaIS3_EE6removeERKS3_+0x22>
	}
      if (__extra != __last)
 8004cda:	454f      	cmp	r7, r9
 8004cdc:	d008      	beq.n	8004cf0 <_ZNSt7__cxx114listIPN9interface27ButtonEventsHandlerObserverESaIS3_EE6removeERKS3_+0x56>
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	60bb      	str	r3, [r7, #8]
	__position._M_node->_M_unhook();
 8004ce4:	4648      	mov	r0, r9
 8004ce6:	f006 fbbf 	bl	800b468 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
 8004cea:	4648      	mov	r0, r9
 8004cec:	f006 fb8e 	bl	800b40c <_ZdlPv>
	{
	  _M_erase(__extra);
	  _GLIBCXX20_ONLY( __removed++ );
	}
      return _GLIBCXX20_ONLY( __removed );
    }
 8004cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004cf4 <_ZN19ButtonEventsHandler11unsubscribeEPN9interface27ButtonEventsHandlerObserverE>:
void ButtonEventsHandler::unsubscribe(interface::ButtonEventsHandlerObserver *observer) {
 8004cf4:	b500      	push	{lr}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	9101      	str	r1, [sp, #4]
	observers.remove(observer);
 8004cfa:	a901      	add	r1, sp, #4
 8004cfc:	3008      	adds	r0, #8
 8004cfe:	f7ff ffcc 	bl	8004c9a <_ZNSt7__cxx114listIPN9interface27ButtonEventsHandlerObserverESaIS3_EE6removeERKS3_>
}
 8004d02:	b003      	add	sp, #12
 8004d04:	f85d fb04 	ldr.w	pc, [sp], #4

08004d08 <_ZThn4_N19ButtonEventsHandler11unsubscribeEPN9interface27ButtonEventsHandlerObserverE>:
	void unsubscribe(interface::ButtonEventsHandlerObserver * observer);	        ///< @brief Un-subscribes a registered observer.
 8004d08:	f1a0 0004 	sub.w	r0, r0, #4
 8004d0c:	f7ff bff2 	b.w	8004cf4 <_ZN19ButtonEventsHandler11unsubscribeEPN9interface27ButtonEventsHandlerObserverE>

08004d10 <_ZNSt7__cxx1110_List_baseIPN9interface27ButtonEventsHandlerObserverESaIS3_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 8004d10:	b538      	push	{r3, r4, r5, lr}
 8004d12:	4605      	mov	r5, r0
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8004d14:	6800      	ldr	r0, [r0, #0]
      while (__cur != &_M_impl._M_node)
 8004d16:	4285      	cmp	r5, r0
 8004d18:	d004      	beq.n	8004d24 <_ZNSt7__cxx1110_List_baseIPN9interface27ButtonEventsHandlerObserverESaIS3_EE8_M_clearEv+0x14>
	  __cur = __tmp->_M_next;
 8004d1a:	6804      	ldr	r4, [r0, #0]
 8004d1c:	f006 fb76 	bl	800b40c <_ZdlPv>
 8004d20:	4620      	mov	r0, r4
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 8004d22:	e7f8      	b.n	8004d16 <_ZNSt7__cxx1110_List_baseIPN9interface27ButtonEventsHandlerObserverESaIS3_EE8_M_clearEv+0x6>
    }
 8004d24:	bd38      	pop	{r3, r4, r5, pc}
	...

08004d28 <_ZN19ButtonEventsHandlerD1Ev>:
ButtonEventsHandler::~ButtonEventsHandler() {
 8004d28:	b570      	push	{r4, r5, r6, lr}
 8004d2a:	4606      	mov	r6, r0
 8004d2c:	4b0e      	ldr	r3, [pc, #56]	; (8004d68 <_ZN19ButtonEventsHandlerD1Ev+0x40>)
 8004d2e:	f103 0208 	add.w	r2, r3, #8
 8004d32:	6002      	str	r2, [r0, #0]
 8004d34:	3328      	adds	r3, #40	; 0x28
 8004d36:	6043      	str	r3, [r0, #4]
	for(ButtonStateSm* button : buttons) {
 8004d38:	6943      	ldr	r3, [r0, #20]
      : _M_current(__i) { }
 8004d3a:	6985      	ldr	r5, [r0, #24]
 8004d3c:	e000      	b.n	8004d40 <_ZN19ButtonEventsHandlerD1Ev+0x18>
	++_M_current;
 8004d3e:	1d23      	adds	r3, r4, #4
    { return __lhs.base() != __rhs.base(); }
 8004d40:	461c      	mov	r4, r3
 8004d42:	429d      	cmp	r5, r3
 8004d44:	d006      	beq.n	8004d54 <_ZN19ButtonEventsHandlerD1Ev+0x2c>
 8004d46:	6818      	ldr	r0, [r3, #0]
		delete button;
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d0f8      	beq.n	8004d3e <_ZN19ButtonEventsHandlerD1Ev+0x16>
 8004d4c:	6803      	ldr	r3, [r0, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	4798      	blx	r3
 8004d52:	e7f4      	b.n	8004d3e <_ZN19ButtonEventsHandlerD1Ev+0x16>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004d54:	6970      	ldr	r0, [r6, #20]
	if (__p)
 8004d56:	b108      	cbz	r0, 8004d5c <_ZN19ButtonEventsHandlerD1Ev+0x34>
 8004d58:	f006 fb58 	bl	800b40c <_ZdlPv>
      { _M_clear(); }
 8004d5c:	f106 0008 	add.w	r0, r6, #8
 8004d60:	f7ff ffd6 	bl	8004d10 <_ZNSt7__cxx1110_List_baseIPN9interface27ButtonEventsHandlerObserverESaIS3_EE8_M_clearEv>
}
 8004d64:	4630      	mov	r0, r6
 8004d66:	bd70      	pop	{r4, r5, r6, pc}
 8004d68:	0800d00c 	.word	0x0800d00c

08004d6c <_ZThn4_N19ButtonEventsHandlerD1Ev>:
	virtual ~ButtonEventsHandler();
 8004d6c:	f1a0 0004 	sub.w	r0, r0, #4
 8004d70:	f7ff bfda 	b.w	8004d28 <_ZN19ButtonEventsHandlerD1Ev>

08004d74 <__tcf_0>:
	static ButtonEventsHandler beh;
 8004d74:	b508      	push	{r3, lr}
 8004d76:	4802      	ldr	r0, [pc, #8]	; (8004d80 <__tcf_0+0xc>)
 8004d78:	f7ff ffd6 	bl	8004d28 <_ZN19ButtonEventsHandlerD1Ev>
 8004d7c:	bd08      	pop	{r3, pc}
 8004d7e:	bf00      	nop
 8004d80:	20000ed0 	.word	0x20000ed0

08004d84 <_ZN19ButtonEventsHandlerD0Ev>:
ButtonEventsHandler::~ButtonEventsHandler() {
 8004d84:	b510      	push	{r4, lr}
 8004d86:	4604      	mov	r4, r0
}
 8004d88:	f7ff ffce 	bl	8004d28 <_ZN19ButtonEventsHandlerD1Ev>
 8004d8c:	2120      	movs	r1, #32
 8004d8e:	4620      	mov	r0, r4
 8004d90:	f006 fb3e 	bl	800b410 <_ZdlPvj>
 8004d94:	4620      	mov	r0, r4
 8004d96:	bd10      	pop	{r4, pc}

08004d98 <_ZThn4_N19ButtonEventsHandlerD0Ev>:
 8004d98:	f1a0 0004 	sub.w	r0, r0, #4
 8004d9c:	f7ff bff2 	b.w	8004d84 <_ZN19ButtonEventsHandlerD0Ev>

08004da0 <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8004da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da4:	b083      	sub	sp, #12
 8004da6:	4688      	mov	r8, r1
 8004da8:	4693      	mov	fp, r2
 8004daa:	2301      	movs	r3, #1
 8004dac:	9300      	str	r3, [sp, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004dae:	6842      	ldr	r2, [r0, #4]
 8004db0:	6803      	ldr	r3, [r0, #0]
 8004db2:	1ad3      	subs	r3, r2, r3
	if (max_size() - size() < __n)
 8004db4:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
 8004db8:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
 8004dbc:	d038      	beq.n	8004e30 <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x90>
 8004dbe:	4604      	mov	r4, r0
 8004dc0:	109e      	asrs	r6, r3, #2
	const size_type __len = size() + (std::max)(size(), __n);
 8004dc2:	9601      	str	r6, [sp, #4]
      if (__a < __b)
 8004dc4:	2e00      	cmp	r6, #0
 8004dc6:	d036      	beq.n	8004e36 <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x96>
      return __a;
 8004dc8:	ab01      	add	r3, sp, #4
 8004dca:	6818      	ldr	r0, [r3, #0]
 8004dcc:	4406      	add	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	1ad2      	subs	r2, r2, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8004dd2:	ebb6 0fa2 	cmp.w	r6, r2, asr #2
 8004dd6:	d330      	bcc.n	8004e3a <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
 8004dd8:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 8004ddc:	d230      	bcs.n	8004e40 <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>
      pointer __old_start = this->_M_impl._M_start;
 8004dde:	f8d4 9000 	ldr.w	r9, [r4]
      pointer __old_finish = this->_M_impl._M_finish;
 8004de2:	f8d4 a004 	ldr.w	sl, [r4, #4]
    { return __lhs.base() - __rhs.base(); }
 8004de6:	eba8 0509 	sub.w	r5, r8, r9
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8004dea:	b376      	cbz	r6, 8004e4a <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xaa>
	if (__n > this->max_size())
 8004dec:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 8004df0:	d229      	bcs.n	8004e46 <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa6>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004df2:	00b0      	lsls	r0, r6, #2
 8004df4:	f006 fb1d 	bl	800b432 <_Znwj>
 8004df8:	4607      	mov	r7, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004dfa:	f8db 3000 	ldr.w	r3, [fp]
 8004dfe:	517b      	str	r3, [r7, r5]
      if (__count > 0)
 8004e00:	2d00      	cmp	r5, #0
 8004e02:	dc24      	bgt.n	8004e4e <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xae>
	      ++__new_finish;
 8004e04:	3504      	adds	r5, #4
 8004e06:	443d      	add	r5, r7
      ptrdiff_t __count = __last - __first;
 8004e08:	ebaa 0a08 	sub.w	sl, sl, r8
      if (__count > 0)
 8004e0c:	f1ba 0f00 	cmp.w	sl, #0
 8004e10:	dc23      	bgt.n	8004e5a <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xba>
      return __result + __count;
 8004e12:	4455      	add	r5, sl
	if (__p)
 8004e14:	f1b9 0f00 	cmp.w	r9, #0
 8004e18:	d002      	beq.n	8004e20 <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x80>
	::operator delete(__p);
 8004e1a:	4648      	mov	r0, r9
 8004e1c:	f006 faf6 	bl	800b40c <_ZdlPv>
      this->_M_impl._M_start = __new_start;
 8004e20:	6027      	str	r7, [r4, #0]
      this->_M_impl._M_finish = __new_finish;
 8004e22:	6065      	str	r5, [r4, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8004e24:	eb07 0686 	add.w	r6, r7, r6, lsl #2
 8004e28:	60a6      	str	r6, [r4, #8]
    }
 8004e2a:	b003      	add	sp, #12
 8004e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  __throw_length_error(__N(__s));
 8004e30:	480d      	ldr	r0, [pc, #52]	; (8004e68 <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xc8>)
 8004e32:	f006 fb24 	bl	800b47e <_ZSt20__throw_length_errorPKc>
	return __b;
 8004e36:	466b      	mov	r3, sp
 8004e38:	e7c7      	b.n	8004dca <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8004e3a:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
 8004e3e:	e7ce      	b.n	8004dde <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
 8004e40:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
 8004e44:	e7cb      	b.n	8004dde <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	  std::__throw_bad_alloc();
 8004e46:	f006 fb14 	bl	800b472 <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8004e4a:	2700      	movs	r7, #0
 8004e4c:	e7d5      	b.n	8004dfa <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8004e4e:	462a      	mov	r2, r5
 8004e50:	4649      	mov	r1, r9
 8004e52:	4638      	mov	r0, r7
 8004e54:	f006 fd98 	bl	800b988 <memmove>
 8004e58:	e7d4      	b.n	8004e04 <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x64>
 8004e5a:	4652      	mov	r2, sl
 8004e5c:	4641      	mov	r1, r8
 8004e5e:	4628      	mov	r0, r5
 8004e60:	f006 fd92 	bl	800b988 <memmove>
 8004e64:	e7d5      	b.n	8004e12 <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x72>
 8004e66:	bf00      	nop
 8004e68:	0800d23c 	.word	0x0800d23c

08004e6c <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8004e6c:	b508      	push	{r3, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8004e6e:	6843      	ldr	r3, [r0, #4]
 8004e70:	6882      	ldr	r2, [r0, #8]
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d005      	beq.n	8004e82 <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x16>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004e76:	680a      	ldr	r2, [r1, #0]
 8004e78:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish;
 8004e7a:	6843      	ldr	r3, [r0, #4]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	6043      	str	r3, [r0, #4]
      }
 8004e80:	bd08      	pop	{r3, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8004e82:	460a      	mov	r2, r1
 8004e84:	4619      	mov	r1, r3
 8004e86:	f7ff ff8b 	bl	8004da0 <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8004e8a:	e7f9      	b.n	8004e80 <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x14>

08004e8c <_ZN19ButtonEventsHandlerC1Ev>:
ButtonEventsHandler::ButtonEventsHandler() {
 8004e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	4605      	mov	r5, r0
 8004e92:	4b19      	ldr	r3, [pc, #100]	; (8004ef8 <_ZN19ButtonEventsHandlerC1Ev+0x6c>)
 8004e94:	f103 0208 	add.w	r2, r3, #8
 8004e98:	6002      	str	r2, [r0, #0]
 8004e9a:	3328      	adds	r3, #40	; 0x28
 8004e9c:	6043      	str	r3, [r0, #4]
	this->_M_next = this->_M_prev = this;
 8004e9e:	f100 0308 	add.w	r3, r0, #8
 8004ea2:	60c3      	str	r3, [r0, #12]
 8004ea4:	6083      	str	r3, [r0, #8]
	this->_M_size = 0;
 8004ea6:	2400      	movs	r4, #0
 8004ea8:	6104      	str	r4, [r0, #16]
 8004eaa:	f100 0714 	add.w	r7, r0, #20
	: _M_start(), _M_finish(), _M_end_of_storage()
 8004eae:	6144      	str	r4, [r0, #20]
 8004eb0:	6184      	str	r4, [r0, #24]
 8004eb2:	61c4      	str	r4, [r0, #28]
	for(int i = 0; i < 4; i++) {
 8004eb4:	e00d      	b.n	8004ed2 <_ZN19ButtonEventsHandlerC1Ev+0x46>
		buttons.push_back(new ButtonStateSm(i, this));
 8004eb6:	201c      	movs	r0, #28
 8004eb8:	f006 fabb 	bl	800b432 <_Znwj>
 8004ebc:	4606      	mov	r6, r0
 8004ebe:	462a      	mov	r2, r5
 8004ec0:	b2e1      	uxtb	r1, r4
 8004ec2:	f000 f8f1 	bl	80050a8 <_ZN13ButtonStateSmC1EhP19ButtonEventsHandler>
 8004ec6:	9601      	str	r6, [sp, #4]
      { emplace_back(std::move(__x)); }
 8004ec8:	a901      	add	r1, sp, #4
 8004eca:	4638      	mov	r0, r7
 8004ecc:	f7ff ffce 	bl	8004e6c <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
	for(int i = 0; i < 4; i++) {
 8004ed0:	3401      	adds	r4, #1
 8004ed2:	2c03      	cmp	r4, #3
 8004ed4:	ddef      	ble.n	8004eb6 <_ZN19ButtonEventsHandlerC1Ev+0x2a>
	ButtonsController::getInstance()->registerCallback(this,
 8004ed6:	f000 fa9f 	bl	8005418 <_ZN17ButtonsController11getInstanceEv>
			(interface::ButtonsControllerCallbackProvider::CallbackMethod)&ButtonEventsHandler::onButtonChanged);
 8004eda:	6803      	ldr	r3, [r0, #0]
 8004edc:	68dc      	ldr	r4, [r3, #12]
	ButtonsController::getInstance()->registerCallback(this,
 8004ede:	4b07      	ldr	r3, [pc, #28]	; (8004efc <_ZN19ButtonEventsHandlerC1Ev+0x70>)
 8004ee0:	9302      	str	r3, [sp, #8]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	9303      	str	r3, [sp, #12]
 8004ee6:	ab04      	add	r3, sp, #16
 8004ee8:	e913 000c 	ldmdb	r3, {r2, r3}
 8004eec:	4629      	mov	r1, r5
 8004eee:	47a0      	blx	r4
}
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	b005      	add	sp, #20
 8004ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	0800d00c 	.word	0x0800d00c
 8004efc:	08004c41 	.word	0x08004c41

08004f00 <_ZN19ButtonEventsHandler11getInstanceEv>:
	static ButtonEventsHandler beh;
 8004f00:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <_ZN19ButtonEventsHandler11getInstanceEv+0x3c>)
 8004f02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f06:	f3bf 8f5b 	dmb	ish
 8004f0a:	f013 0f01 	tst.w	r3, #1
 8004f0e:	d001      	beq.n	8004f14 <_ZN19ButtonEventsHandler11getInstanceEv+0x14>
}
 8004f10:	480a      	ldr	r0, [pc, #40]	; (8004f3c <_ZN19ButtonEventsHandler11getInstanceEv+0x3c>)
 8004f12:	4770      	bx	lr
ButtonEventsHandler* ButtonEventsHandler::getInstance() {
 8004f14:	b510      	push	{r4, lr}
	static ButtonEventsHandler beh;
 8004f16:	480a      	ldr	r0, [pc, #40]	; (8004f40 <_ZN19ButtonEventsHandler11getInstanceEv+0x40>)
 8004f18:	f006 fa7c 	bl	800b414 <__cxa_guard_acquire>
 8004f1c:	b908      	cbnz	r0, 8004f22 <_ZN19ButtonEventsHandler11getInstanceEv+0x22>
}
 8004f1e:	4807      	ldr	r0, [pc, #28]	; (8004f3c <_ZN19ButtonEventsHandler11getInstanceEv+0x3c>)
 8004f20:	bd10      	pop	{r4, pc}
	static ButtonEventsHandler beh;
 8004f22:	4c06      	ldr	r4, [pc, #24]	; (8004f3c <_ZN19ButtonEventsHandler11getInstanceEv+0x3c>)
 8004f24:	4620      	mov	r0, r4
 8004f26:	f7ff ffb1 	bl	8004e8c <_ZN19ButtonEventsHandlerC1Ev>
 8004f2a:	f104 0020 	add.w	r0, r4, #32
 8004f2e:	f006 fa7d 	bl	800b42c <__cxa_guard_release>
 8004f32:	4804      	ldr	r0, [pc, #16]	; (8004f44 <_ZN19ButtonEventsHandler11getInstanceEv+0x44>)
 8004f34:	f006 fcce 	bl	800b8d4 <atexit>
 8004f38:	e7f1      	b.n	8004f1e <_ZN19ButtonEventsHandler11getInstanceEv+0x1e>
 8004f3a:	bf00      	nop
 8004f3c:	20000ed0 	.word	0x20000ed0
 8004f40:	20000ef0 	.word	0x20000ef0
 8004f44:	08004d75 	.word	0x08004d75

08004f48 <_ZN13ButtonStateSmD1Ev>:
	currentState = STATE_INITIAL;
	this->parent = parent;
	this->buttonIndex = buttonIndex;
}

ButtonStateSm::~ButtonStateSm() {
 8004f48:	b510      	push	{r4, lr}
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	4b02      	ldr	r3, [pc, #8]	; (8004f58 <_ZN13ButtonStateSmD1Ev+0x10>)
 8004f4e:	6003      	str	r3, [r0, #0]
 8004f50:	f000 fe06 	bl	8005b60 <_ZN10XFBehaviorD1Ev>
	// TODO Auto-generated destructor stub
}
 8004f54:	4620      	mov	r0, r4
 8004f56:	bd10      	pop	{r4, pc}
 8004f58:	0800d054 	.word	0x0800d054

08004f5c <_ZN13ButtonStateSmD0Ev>:
ButtonStateSm::~ButtonStateSm() {
 8004f5c:	b510      	push	{r4, lr}
 8004f5e:	4604      	mov	r4, r0
}
 8004f60:	f7ff fff2 	bl	8004f48 <_ZN13ButtonStateSmD1Ev>
 8004f64:	211c      	movs	r1, #28
 8004f66:	4620      	mov	r0, r4
 8004f68:	f006 fa52 	bl	800b410 <_ZdlPvj>
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	bd10      	pop	{r4, pc}

08004f70 <_ZN13ButtonStateSm12processEventEv>:
		pushEvent(new evButtonPressed(), false);
	else
		pushEvent(new evButtonReleased(), false);
}

XFEventStatus ButtonStateSm::processEvent() {
 8004f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f72:	4604      	mov	r4, r0
	/**
	 * Constructor
	 *
	 * \param eventStatus Initial value of the event status.
	 */
    XFEventStatus(eEventStatus eventStatus = Unknown) : status_(eventStatus) {}
 8004f74:	f04f 0602 	mov.w	r6, #2
	XFEventStatus eventStatus = XFEventStatus::NotConsumed;

	eState oldState = currentState;
 8004f78:	7c05      	ldrb	r5, [r0, #16]

	// Switch conditions
	switch(currentState) {
 8004f7a:	f1a5 030d 	sub.w	r3, r5, #13
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d815      	bhi.n	8004fae <_ZN13ButtonStateSm12processEventEv+0x3e>
 8004f82:	e8df f003 	tbb	[pc, r3]
 8004f86:	0e03      	.short	0x0e03
 8004f88:	4d2a      	.short	0x4d2a
 8004f8a:	4d          	.byte	0x4d
 8004f8b:	00          	.byte	0x00
	case STATE_INITIAL:
		if(getCurrentEvent()->getEventType() == XFEvent::Initial) {
 8004f8c:	f000 fe23 	bl	8005bd6 <_ZNK10XFBehavior15getCurrentEventEv>

    /** \brief Returns the type of the event.
     *
     * Can be used to distinguish between an event or a timeout.
     */
    inline XFEventType getEventType() const { return eventType_; }
 8004f90:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d10a      	bne.n	8004fae <_ZN13ButtonStateSm12processEventEv+0x3e>
			currentState = STATE_WAIT_PRESS;
 8004f98:	230e      	movs	r3, #14
 8004f9a:	7423      	strb	r3, [r4, #16]
			eventStatus = XFEventStatus::Consumed;
 8004f9c:	f04f 0601 	mov.w	r6, #1
 8004fa0:	e005      	b.n	8004fae <_ZN13ButtonStateSm12processEventEv+0x3e>
		}
		break;
	case STATE_WAIT_PRESS:
		if(getCurrentEvent()->getEventType() == XFEvent::Event
 8004fa2:	f000 fe18 	bl	8005bd6 <_ZNK10XFBehavior15getCurrentEventEv>
 8004fa6:	f990 3004 	ldrsb.w	r3, [r0, #4]
				&& getCurrentEvent()->getId() == EventIds::evButtonPressedId) {
 8004faa:	2b03      	cmp	r3, #3
 8004fac:	d00a      	beq.n	8004fc4 <_ZN13ButtonStateSm12processEventEv+0x54>
	default:
		break;
	}


	if(oldState != currentState) {
 8004fae:	7c23      	ldrb	r3, [r4, #16]
 8004fb0:	42ab      	cmp	r3, r5
 8004fb2:	d005      	beq.n	8004fc0 <_ZN13ButtonStateSm12processEventEv+0x50>
		default:
			break;
		}

		// onEntry actions
		switch(currentState) {
 8004fb4:	2b10      	cmp	r3, #16
 8004fb6:	d049      	beq.n	800504c <_ZN13ButtonStateSm12processEventEv+0xdc>
 8004fb8:	2b11      	cmp	r3, #17
 8004fba:	d062      	beq.n	8005082 <_ZN13ButtonStateSm12processEventEv+0x112>
 8004fbc:	2b0f      	cmp	r3, #15
 8004fbe:	d03a      	beq.n	8005036 <_ZN13ButtonStateSm12processEventEv+0xc6>
			break;
		}
	}

	return eventStatus;
}
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				&& getCurrentEvent()->getId() == EventIds::evButtonPressedId) {
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	f000 fe06 	bl	8005bd6 <_ZNK10XFBehavior15getCurrentEventEv>
    /** \brief Sets pointer to behavioral class (see #_pBehavior).
     * Sets the behavior in which the event should be executed.
     */
    inline void setBehavior(interface::XFReactive * pBehavior) { pBehavior_ = pBehavior; }

    inline int getId() const { return id_; }		///< Returns #_id identifying the event in the behaviors context.
 8004fca:	6883      	ldr	r3, [r0, #8]
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d1ee      	bne.n	8004fae <_ZN13ButtonStateSm12processEventEv+0x3e>
			currentState = STATE_PRESSED;
 8004fd0:	230f      	movs	r3, #15
 8004fd2:	7423      	strb	r3, [r4, #16]
			eventStatus = XFEventStatus::Consumed;
 8004fd4:	f04f 0601 	mov.w	r6, #1
 8004fd8:	e7e9      	b.n	8004fae <_ZN13ButtonStateSm12processEventEv+0x3e>
		if(getCurrentEvent()->getEventType() == XFEvent::Event
 8004fda:	f000 fdfc 	bl	8005bd6 <_ZNK10XFBehavior15getCurrentEventEv>
    inline XFEventType getEventType() const { return eventType_; }
 8004fde:	f990 3004 	ldrsb.w	r3, [r0, #4]
				&& getCurrentEvent()->getId() == EventIds::evButtonReleasedId) {
 8004fe2:	2b03      	cmp	r3, #3
 8004fe4:	d011      	beq.n	800500a <_ZN13ButtonStateSm12processEventEv+0x9a>
		} else if (getCurrentEvent()->getEventType() == XFEvent::Timeout
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f000 fdf5 	bl	8005bd6 <_ZNK10XFBehavior15getCurrentEventEv>
 8004fec:	f990 3004 	ldrsb.w	r3, [r0, #4]
				&& getCurrentEvent()->getId() == TIMEOUT_LONG_PRESS){
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	d1dc      	bne.n	8004fae <_ZN13ButtonStateSm12processEventEv+0x3e>
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f000 fdee 	bl	8005bd6 <_ZNK10XFBehavior15getCurrentEventEv>
    inline int getId() const { return id_; }		///< Returns #_id identifying the event in the behaviors context.
 8004ffa:	6883      	ldr	r3, [r0, #8]
 8004ffc:	2b0b      	cmp	r3, #11
 8004ffe:	d1d6      	bne.n	8004fae <_ZN13ButtonStateSm12processEventEv+0x3e>
			currentState = STATE_LONG_PRESS;
 8005000:	2311      	movs	r3, #17
 8005002:	7423      	strb	r3, [r4, #16]
			eventStatus = XFEventStatus::Consumed;
 8005004:	f04f 0601 	mov.w	r6, #1
 8005008:	e7d1      	b.n	8004fae <_ZN13ButtonStateSm12processEventEv+0x3e>
				&& getCurrentEvent()->getId() == EventIds::evButtonReleasedId) {
 800500a:	4620      	mov	r0, r4
 800500c:	f000 fde3 	bl	8005bd6 <_ZNK10XFBehavior15getCurrentEventEv>
 8005010:	6883      	ldr	r3, [r0, #8]
 8005012:	2b03      	cmp	r3, #3
 8005014:	d1e7      	bne.n	8004fe6 <_ZN13ButtonStateSm12processEventEv+0x76>
			currentState = STATE_SHORT_PRESS;
 8005016:	2310      	movs	r3, #16
 8005018:	7423      	strb	r3, [r4, #16]
			eventStatus = XFEventStatus::Consumed;
 800501a:	f04f 0601 	mov.w	r6, #1
 800501e:	e7c6      	b.n	8004fae <_ZN13ButtonStateSm12processEventEv+0x3e>
		if(getCurrentEvent()->getEventType() == XFEvent::NullTransition) {
 8005020:	f000 fdd9 	bl	8005bd6 <_ZNK10XFBehavior15getCurrentEventEv>
    inline XFEventType getEventType() const { return eventType_; }
 8005024:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8005028:	2b02      	cmp	r3, #2
 800502a:	d1c0      	bne.n	8004fae <_ZN13ButtonStateSm12processEventEv+0x3e>
			currentState = STATE_WAIT_PRESS;
 800502c:	230e      	movs	r3, #14
 800502e:	7423      	strb	r3, [r4, #16]
			eventStatus = XFEventStatus::Consumed;
 8005030:	f04f 0601 	mov.w	r6, #1
 8005034:	e7bb      	b.n	8004fae <_ZN13ButtonStateSm12processEventEv+0x3e>
     *
     * Will work only if the current event is of type IXFEvent::Timeout.
     */
    const XFTimeout * getCurrentTimeout();

    inline void scheduleTimeout(int timeoutId, int interval) { getDispatcher()->scheduleTimeout(timeoutId, interval, this); }	///< @brief Schedules a timeout for this state machine.
 8005036:	4620      	mov	r0, r4
 8005038:	f000 fd93 	bl	8005b62 <_ZN10XFBehavior13getDispatcherEv>
 800503c:	6803      	ldr	r3, [r0, #0]
 800503e:	699d      	ldr	r5, [r3, #24]
 8005040:	4623      	mov	r3, r4
 8005042:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005046:	210b      	movs	r1, #11
 8005048:	47a8      	blx	r5
 800504a:	e7b9      	b.n	8004fc0 <_ZN13ButtonStateSm12processEventEv+0x50>
    inline void unscheduleTimeout(int timeoutId) { getDispatcher()->unscheduleTimeout(timeoutId, this); }						///< @brief Unschedules a timeout for this state machine.
 800504c:	4620      	mov	r0, r4
 800504e:	f000 fd88 	bl	8005b62 <_ZN10XFBehavior13getDispatcherEv>
 8005052:	6803      	ldr	r3, [r0, #0]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	4622      	mov	r2, r4
 8005058:	210b      	movs	r1, #11
 800505a:	4798      	blx	r3
			parent->notifyButtonShortPressed(this->buttonIndex);
 800505c:	6960      	ldr	r0, [r4, #20]
 800505e:	6803      	ldr	r3, [r0, #0]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	7e21      	ldrb	r1, [r4, #24]
 8005064:	4798      	blx	r3
			GEN(XFNullTransition);
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	68df      	ldr	r7, [r3, #12]
 800506a:	2010      	movs	r0, #16
 800506c:	f006 f9e1 	bl	800b432 <_Znwj>
 8005070:	4605      	mov	r5, r0
 8005072:	2100      	movs	r1, #0
 8005074:	f000 fde6 	bl	8005c44 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 8005078:	2200      	movs	r2, #0
 800507a:	4629      	mov	r1, r5
 800507c:	4620      	mov	r0, r4
 800507e:	47b8      	blx	r7
			break;
 8005080:	e79e      	b.n	8004fc0 <_ZN13ButtonStateSm12processEventEv+0x50>
			parent->notifyButtonLongPressed(this->buttonIndex);
 8005082:	6960      	ldr	r0, [r4, #20]
 8005084:	6803      	ldr	r3, [r0, #0]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	7e21      	ldrb	r1, [r4, #24]
 800508a:	4798      	blx	r3
			GEN(XFNullTransition);
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	68df      	ldr	r7, [r3, #12]
 8005090:	2010      	movs	r0, #16
 8005092:	f006 f9ce 	bl	800b432 <_Znwj>
 8005096:	4605      	mov	r5, r0
 8005098:	2100      	movs	r1, #0
 800509a:	f000 fdd3 	bl	8005c44 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 800509e:	2200      	movs	r2, #0
 80050a0:	4629      	mov	r1, r5
 80050a2:	4620      	mov	r0, r4
 80050a4:	47b8      	blx	r7
			break;
 80050a6:	e78b      	b.n	8004fc0 <_ZN13ButtonStateSm12processEventEv+0x50>

080050a8 <_ZN13ButtonStateSmC1EhP19ButtonEventsHandler>:
ButtonStateSm::ButtonStateSm(ButtonIndex buttonIndex, ButtonEventsHandler* parent) {
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	4604      	mov	r4, r0
 80050ac:	460d      	mov	r5, r1
 80050ae:	4616      	mov	r6, r2
 80050b0:	2100      	movs	r1, #0
 80050b2:	f000 fd2f 	bl	8005b14 <_ZN10XFBehaviorC1Eb>
 80050b6:	4b04      	ldr	r3, [pc, #16]	; (80050c8 <_ZN13ButtonStateSmC1EhP19ButtonEventsHandler+0x20>)
 80050b8:	6023      	str	r3, [r4, #0]
	currentState = STATE_INITIAL;
 80050ba:	230d      	movs	r3, #13
 80050bc:	7423      	strb	r3, [r4, #16]
	this->parent = parent;
 80050be:	6166      	str	r6, [r4, #20]
	this->buttonIndex = buttonIndex;
 80050c0:	7625      	strb	r5, [r4, #24]
}
 80050c2:	4620      	mov	r0, r4
 80050c4:	bd70      	pop	{r4, r5, r6, pc}
 80050c6:	bf00      	nop
 80050c8:	0800d054 	.word	0x0800d054

080050cc <_ZN13ButtonStateSm9onChangedEb>:
void ButtonStateSm::onChanged(bool pressed) {
 80050cc:	b570      	push	{r4, r5, r6, lr}
 80050ce:	4604      	mov	r4, r0
	if(pressed)
 80050d0:	b161      	cbz	r1, 80050ec <_ZN13ButtonStateSm9onChangedEb+0x20>
		pushEvent(new evButtonPressed(), false);
 80050d2:	6803      	ldr	r3, [r0, #0]
 80050d4:	68de      	ldr	r6, [r3, #12]
 80050d6:	2014      	movs	r0, #20
 80050d8:	f006 f9ab 	bl	800b432 <_Znwj>
 80050dc:	4605      	mov	r5, r0
 80050de:	f7fe fc87 	bl	80039f0 <_ZN15evButtonPressedC1Ev>
 80050e2:	2200      	movs	r2, #0
 80050e4:	4629      	mov	r1, r5
 80050e6:	4620      	mov	r0, r4
 80050e8:	47b0      	blx	r6
}
 80050ea:	bd70      	pop	{r4, r5, r6, pc}
		pushEvent(new evButtonReleased(), false);
 80050ec:	6803      	ldr	r3, [r0, #0]
 80050ee:	68de      	ldr	r6, [r3, #12]
 80050f0:	2014      	movs	r0, #20
 80050f2:	f006 f99e 	bl	800b432 <_Znwj>
 80050f6:	4605      	mov	r5, r0
 80050f8:	f7fe fc8e 	bl	8003a18 <_ZN16evButtonReleasedC1Ev>
 80050fc:	2200      	movs	r2, #0
 80050fe:	4629      	mov	r1, r5
 8005100:	4620      	mov	r0, r4
 8005102:	47b0      	blx	r6
}
 8005104:	e7f1      	b.n	80050ea <_ZN13ButtonStateSm9onChangedEb+0x1e>
	...

08005108 <_ZN10LedStateSmD1Ev>:
	this->ledIndex = index;
	this->parent = parent;
	currentState = STATE_INITIAL;
}

LedStateSm::~LedStateSm() {
 8005108:	b510      	push	{r4, lr}
 800510a:	4604      	mov	r4, r0
 800510c:	4b02      	ldr	r3, [pc, #8]	; (8005118 <_ZN10LedStateSmD1Ev+0x10>)
 800510e:	6003      	str	r3, [r0, #0]
 8005110:	f000 fd26 	bl	8005b60 <_ZN10XFBehaviorD1Ev>
	// TODO Auto-generated destructor stub
}
 8005114:	4620      	mov	r0, r4
 8005116:	bd10      	pop	{r4, pc}
 8005118:	0800d07c 	.word	0x0800d07c

0800511c <_ZN10LedStateSmD0Ev>:
LedStateSm::~LedStateSm() {
 800511c:	b510      	push	{r4, lr}
 800511e:	4604      	mov	r4, r0
}
 8005120:	f7ff fff2 	bl	8005108 <_ZN10LedStateSmD1Ev>
 8005124:	2120      	movs	r1, #32
 8005126:	4620      	mov	r0, r4
 8005128:	f006 f972 	bl	800b410 <_ZdlPvj>
 800512c:	4620      	mov	r0, r4
 800512e:	bd10      	pop	{r4, pc}

08005130 <_ZN10LedStateSm12processEventEv>:

XFEventStatus LedStateSm::processEvent() {
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	4604      	mov	r4, r0
 8005134:	f04f 0602 	mov.w	r6, #2
	XFEventStatus eventStatus = XFEventStatus::NotConsumed;

	eState oldState = currentState;
 8005138:	7c05      	ldrb	r5, [r0, #16]

	// Switch conditions
	switch(currentState) {
 800513a:	f1a5 0371 	sub.w	r3, r5, #113	; 0x71
 800513e:	2b03      	cmp	r3, #3
 8005140:	d83b      	bhi.n	80051ba <_ZN10LedStateSm12processEventEv+0x8a>
 8005142:	e8df f003 	tbb	[pc, r3]
 8005146:	0d02      	.short	0x0d02
 8005148:	4e34      	.short	0x4e34
	case STATE_INITIAL:
		if(getCurrentEvent()->getEventType() == XFEvent::Initial) {
 800514a:	f000 fd44 	bl	8005bd6 <_ZNK10XFBehavior15getCurrentEventEv>
 800514e:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d131      	bne.n	80051ba <_ZN10LedStateSm12processEventEv+0x8a>
			currentState = STATE_WAIT_PRESS;
 8005156:	2372      	movs	r3, #114	; 0x72
 8005158:	7423      	strb	r3, [r4, #16]
			eventStatus = XFEventStatus::Consumed;
 800515a:	f04f 0601 	mov.w	r6, #1
 800515e:	e02c      	b.n	80051ba <_ZN10LedStateSm12processEventEv+0x8a>
		}
		break;
	case STATE_WAIT_PRESS:
		if(getCurrentEvent()->getEventType() == XFEvent::Event
 8005160:	f000 fd39 	bl	8005bd6 <_ZNK10XFBehavior15getCurrentEventEv>
 8005164:	f990 3004 	ldrsb.w	r3, [r0, #4]
				&& getCurrentEvent()->getId() == EventIds::evButtonShortPressId) {
 8005168:	2b03      	cmp	r3, #3
 800516a:	d013      	beq.n	8005194 <_ZN10LedStateSm12processEventEv+0x64>
			nBlink = SHORT_BLINK;
			currentState = STATE_ON;
			eventStatus = XFEventStatus::Consumed;
		} else if(getCurrentEvent()->getEventType() == XFEvent::Event
 800516c:	4620      	mov	r0, r4
 800516e:	f000 fd32 	bl	8005bd6 <_ZNK10XFBehavior15getCurrentEventEv>
 8005172:	f990 3004 	ldrsb.w	r3, [r0, #4]
				&& getCurrentEvent()->getId() == EventIds::evButtonLongPressId) {
 8005176:	2b03      	cmp	r3, #3
 8005178:	d11f      	bne.n	80051ba <_ZN10LedStateSm12processEventEv+0x8a>
 800517a:	4620      	mov	r0, r4
 800517c:	f000 fd2b 	bl	8005bd6 <_ZNK10XFBehavior15getCurrentEventEv>
    inline int getId() const { return id_; }		///< Returns #_id identifying the event in the behaviors context.
 8005180:	6883      	ldr	r3, [r0, #8]
 8005182:	2b05      	cmp	r3, #5
 8005184:	d119      	bne.n	80051ba <_ZN10LedStateSm12processEventEv+0x8a>
			nBlink = LONG_BLINK;
 8005186:	2304      	movs	r3, #4
 8005188:	6163      	str	r3, [r4, #20]
			currentState = STATE_ON;
 800518a:	2373      	movs	r3, #115	; 0x73
 800518c:	7423      	strb	r3, [r4, #16]
			eventStatus = XFEventStatus::Consumed;
 800518e:	f04f 0601 	mov.w	r6, #1
 8005192:	e012      	b.n	80051ba <_ZN10LedStateSm12processEventEv+0x8a>
				&& getCurrentEvent()->getId() == EventIds::evButtonShortPressId) {
 8005194:	4620      	mov	r0, r4
 8005196:	f000 fd1e 	bl	8005bd6 <_ZNK10XFBehavior15getCurrentEventEv>
 800519a:	6883      	ldr	r3, [r0, #8]
 800519c:	2b04      	cmp	r3, #4
 800519e:	d1e5      	bne.n	800516c <_ZN10LedStateSm12processEventEv+0x3c>
			nBlink = SHORT_BLINK;
 80051a0:	2302      	movs	r3, #2
 80051a2:	6163      	str	r3, [r4, #20]
			currentState = STATE_ON;
 80051a4:	2373      	movs	r3, #115	; 0x73
 80051a6:	7423      	strb	r3, [r4, #16]
			eventStatus = XFEventStatus::Consumed;
 80051a8:	f04f 0601 	mov.w	r6, #1
 80051ac:	e005      	b.n	80051ba <_ZN10LedStateSm12processEventEv+0x8a>
		}
		break;
	case STATE_ON:
		if(getCurrentEvent()->getEventType() == XFEvent::Timeout
 80051ae:	f000 fd12 	bl	8005bd6 <_ZNK10XFBehavior15getCurrentEventEv>
    inline XFEventType getEventType() const { return eventType_; }
 80051b2:	f990 3004 	ldrsb.w	r3, [r0, #4]
				&& getCurrentEvent()->getId() == TIMEOUT_BLINK) {
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d008      	beq.n	80051cc <_ZN10LedStateSm12processEventEv+0x9c>
	default:
		break;
	}


	if(oldState != currentState) {
 80051ba:	7c23      	ldrb	r3, [r4, #16]
 80051bc:	42ab      	cmp	r3, r5
 80051be:	d003      	beq.n	80051c8 <_ZN10LedStateSm12processEventEv+0x98>
		default:
			break;
		}

		// onEntry actions
		switch(currentState) {
 80051c0:	2b73      	cmp	r3, #115	; 0x73
 80051c2:	d02b      	beq.n	800521c <_ZN10LedStateSm12processEventEv+0xec>
 80051c4:	2b74      	cmp	r3, #116	; 0x74
 80051c6:	d040      	beq.n	800524a <_ZN10LedStateSm12processEventEv+0x11a>
			break;
		}
	}

	return eventStatus;
}
 80051c8:	4630      	mov	r0, r6
 80051ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				&& getCurrentEvent()->getId() == TIMEOUT_BLINK) {
 80051cc:	4620      	mov	r0, r4
 80051ce:	f000 fd02 	bl	8005bd6 <_ZNK10XFBehavior15getCurrentEventEv>
    inline int getId() const { return id_; }		///< Returns #_id identifying the event in the behaviors context.
 80051d2:	6883      	ldr	r3, [r0, #8]
 80051d4:	2b6f      	cmp	r3, #111	; 0x6f
 80051d6:	d1f0      	bne.n	80051ba <_ZN10LedStateSm12processEventEv+0x8a>
			currentState = STATE_OFF;
 80051d8:	2374      	movs	r3, #116	; 0x74
 80051da:	7423      	strb	r3, [r4, #16]
			eventStatus = XFEventStatus::Consumed;
 80051dc:	f04f 0601 	mov.w	r6, #1
 80051e0:	e7eb      	b.n	80051ba <_ZN10LedStateSm12processEventEv+0x8a>
		if(getCurrentEvent()->getEventType() == XFEvent::Timeout
 80051e2:	f000 fcf8 	bl	8005bd6 <_ZNK10XFBehavior15getCurrentEventEv>
    inline XFEventType getEventType() const { return eventType_; }
 80051e6:	f990 3004 	ldrsb.w	r3, [r0, #4]
				&& getCurrentEvent()->getId() == TIMEOUT_BLINK) {
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d00b      	beq.n	8005206 <_ZN10LedStateSm12processEventEv+0xd6>
		} else if(getCurrentEvent()->getEventType() == XFEvent::NullTransition) {
 80051ee:	4620      	mov	r0, r4
 80051f0:	f000 fcf1 	bl	8005bd6 <_ZNK10XFBehavior15getCurrentEventEv>
 80051f4:	f990 3004 	ldrsb.w	r3, [r0, #4]
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d1de      	bne.n	80051ba <_ZN10LedStateSm12processEventEv+0x8a>
			currentState = STATE_WAIT_PRESS;
 80051fc:	2372      	movs	r3, #114	; 0x72
 80051fe:	7423      	strb	r3, [r4, #16]
			eventStatus = XFEventStatus::Consumed;
 8005200:	f04f 0601 	mov.w	r6, #1
 8005204:	e7d9      	b.n	80051ba <_ZN10LedStateSm12processEventEv+0x8a>
				&& getCurrentEvent()->getId() == TIMEOUT_BLINK) {
 8005206:	4620      	mov	r0, r4
 8005208:	f000 fce5 	bl	8005bd6 <_ZNK10XFBehavior15getCurrentEventEv>
    inline int getId() const { return id_; }		///< Returns #_id identifying the event in the behaviors context.
 800520c:	6883      	ldr	r3, [r0, #8]
 800520e:	2b6f      	cmp	r3, #111	; 0x6f
 8005210:	d1ed      	bne.n	80051ee <_ZN10LedStateSm12processEventEv+0xbe>
			currentState = STATE_ON;
 8005212:	2373      	movs	r3, #115	; 0x73
 8005214:	7423      	strb	r3, [r4, #16]
			eventStatus = XFEventStatus::Consumed;
 8005216:	f04f 0601 	mov.w	r6, #1
 800521a:	e7ce      	b.n	80051ba <_ZN10LedStateSm12processEventEv+0x8a>

public:
	LedController();
	virtual ~LedController();

	inline static LedController & getInstance() { assert(_pInstance); return *_pInstance; }
 800521c:	4b20      	ldr	r3, [pc, #128]	; (80052a0 <_ZN10LedStateSm12processEventEv+0x170>)
 800521e:	6818      	ldr	r0, [r3, #0]
 8005220:	b168      	cbz	r0, 800523e <_ZN10LedStateSm12processEventEv+0x10e>
			LedController::getInstance().setLed(ledIndex, true);
 8005222:	2201      	movs	r2, #1
 8005224:	7e21      	ldrb	r1, [r4, #24]
 8005226:	f000 faaf 	bl	8005788 <_ZN13LedController6setLedEhb>
    inline void scheduleTimeout(int timeoutId, int interval) { getDispatcher()->scheduleTimeout(timeoutId, interval, this); }	///< @brief Schedules a timeout for this state machine.
 800522a:	4620      	mov	r0, r4
 800522c:	f000 fc99 	bl	8005b62 <_ZN10XFBehavior13getDispatcherEv>
 8005230:	6803      	ldr	r3, [r0, #0]
 8005232:	699d      	ldr	r5, [r3, #24]
 8005234:	4623      	mov	r3, r4
 8005236:	22c8      	movs	r2, #200	; 0xc8
 8005238:	216f      	movs	r1, #111	; 0x6f
 800523a:	47a8      	blx	r5
 800523c:	e7c4      	b.n	80051c8 <_ZN10LedStateSm12processEventEv+0x98>
 800523e:	4b19      	ldr	r3, [pc, #100]	; (80052a4 <_ZN10LedStateSm12processEventEv+0x174>)
 8005240:	4a19      	ldr	r2, [pc, #100]	; (80052a8 <_ZN10LedStateSm12processEventEv+0x178>)
 8005242:	2113      	movs	r1, #19
 8005244:	4819      	ldr	r0, [pc, #100]	; (80052ac <_ZN10LedStateSm12processEventEv+0x17c>)
 8005246:	f006 fb27 	bl	800b898 <__assert_func>
 800524a:	4b15      	ldr	r3, [pc, #84]	; (80052a0 <_ZN10LedStateSm12processEventEv+0x170>)
 800524c:	6818      	ldr	r0, [r3, #0]
 800524e:	b190      	cbz	r0, 8005276 <_ZN10LedStateSm12processEventEv+0x146>
			LedController::getInstance().setLed(ledIndex, false);
 8005250:	2200      	movs	r2, #0
 8005252:	7e21      	ldrb	r1, [r4, #24]
 8005254:	f000 fa98 	bl	8005788 <_ZN13LedController6setLedEhb>
			nBlink--;
 8005258:	6963      	ldr	r3, [r4, #20]
 800525a:	3b01      	subs	r3, #1
 800525c:	6163      	str	r3, [r4, #20]
			if (nBlink <= 0) {
 800525e:	2b00      	cmp	r3, #0
 8005260:	dd0f      	ble.n	8005282 <_ZN10LedStateSm12processEventEv+0x152>
 8005262:	4620      	mov	r0, r4
 8005264:	f000 fc7d 	bl	8005b62 <_ZN10XFBehavior13getDispatcherEv>
 8005268:	6803      	ldr	r3, [r0, #0]
 800526a:	699d      	ldr	r5, [r3, #24]
 800526c:	4623      	mov	r3, r4
 800526e:	22c8      	movs	r2, #200	; 0xc8
 8005270:	216f      	movs	r1, #111	; 0x6f
 8005272:	47a8      	blx	r5
 8005274:	e7a8      	b.n	80051c8 <_ZN10LedStateSm12processEventEv+0x98>
 8005276:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <_ZN10LedStateSm12processEventEv+0x174>)
 8005278:	4a0b      	ldr	r2, [pc, #44]	; (80052a8 <_ZN10LedStateSm12processEventEv+0x178>)
 800527a:	2113      	movs	r1, #19
 800527c:	480b      	ldr	r0, [pc, #44]	; (80052ac <_ZN10LedStateSm12processEventEv+0x17c>)
 800527e:	f006 fb0b 	bl	800b898 <__assert_func>
				GEN(XFNullTransition());
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	68df      	ldr	r7, [r3, #12]
 8005286:	2010      	movs	r0, #16
 8005288:	f006 f8d3 	bl	800b432 <_Znwj>
 800528c:	4605      	mov	r5, r0
 800528e:	2100      	movs	r1, #0
 8005290:	f000 fcd8 	bl	8005c44 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 8005294:	2200      	movs	r2, #0
 8005296:	4629      	mov	r1, r5
 8005298:	4620      	mov	r0, r4
 800529a:	47b8      	blx	r7
 800529c:	e794      	b.n	80051c8 <_ZN10LedStateSm12processEventEv+0x98>
 800529e:	bf00      	nop
 80052a0:	20000f28 	.word	0x20000f28
 80052a4:	0800d7cc 	.word	0x0800d7cc
 80052a8:	0800d7d8 	.word	0x0800d7d8
 80052ac:	0800d80c 	.word	0x0800d80c

080052b0 <_ZN10LedStateSmC1EiP22ButtonEventsLedFlasher>:
LedStateSm::LedStateSm(int index, ButtonEventsLedFlasher* parent) {
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	4604      	mov	r4, r0
 80052b4:	460e      	mov	r6, r1
 80052b6:	4615      	mov	r5, r2
 80052b8:	2100      	movs	r1, #0
 80052ba:	f000 fc2b 	bl	8005b14 <_ZN10XFBehaviorC1Eb>
 80052be:	4b04      	ldr	r3, [pc, #16]	; (80052d0 <_ZN10LedStateSmC1EiP22ButtonEventsLedFlasher+0x20>)
 80052c0:	6023      	str	r3, [r4, #0]
	this->ledIndex = index;
 80052c2:	61a6      	str	r6, [r4, #24]
	this->parent = parent;
 80052c4:	61e5      	str	r5, [r4, #28]
	currentState = STATE_INITIAL;
 80052c6:	2371      	movs	r3, #113	; 0x71
 80052c8:	7423      	strb	r3, [r4, #16]
}
 80052ca:	4620      	mov	r0, r4
 80052cc:	bd70      	pop	{r4, r5, r6, pc}
 80052ce:	bf00      	nop
 80052d0:	0800d07c 	.word	0x0800d07c

080052d4 <_ZN10LedStateSm12onShortPressEv>:

void LedStateSm::onShortPress() {
 80052d4:	b570      	push	{r4, r5, r6, lr}
 80052d6:	4604      	mov	r4, r0
	GEN(evButtonShortPress());
 80052d8:	6803      	ldr	r3, [r0, #0]
 80052da:	68de      	ldr	r6, [r3, #12]
 80052dc:	2014      	movs	r0, #20
 80052de:	f006 f8a8 	bl	800b432 <_Znwj>
 80052e2:	4605      	mov	r5, r0
 80052e4:	f7fe fbac 	bl	8003a40 <_ZN18evButtonShortPressC1Ev>
 80052e8:	2200      	movs	r2, #0
 80052ea:	4629      	mov	r1, r5
 80052ec:	4620      	mov	r0, r4
 80052ee:	47b0      	blx	r6
}
 80052f0:	bd70      	pop	{r4, r5, r6, pc}

080052f2 <_ZN10LedStateSm11onLongPressEv>:

void LedStateSm::onLongPress() {
 80052f2:	b570      	push	{r4, r5, r6, lr}
 80052f4:	4604      	mov	r4, r0
	GEN(evButtonLongPress());
 80052f6:	6803      	ldr	r3, [r0, #0]
 80052f8:	68de      	ldr	r6, [r3, #12]
 80052fa:	2014      	movs	r0, #20
 80052fc:	f006 f899 	bl	800b432 <_Znwj>
 8005300:	4605      	mov	r5, r0
 8005302:	f7fe fb61 	bl	80039c8 <_ZN17evButtonLongPressC1Ev>
 8005306:	2200      	movs	r2, #0
 8005308:	4629      	mov	r1, r5
 800530a:	4620      	mov	r0, r4
 800530c:	47b0      	blx	r6
}
 800530e:	bd70      	pop	{r4, r5, r6, pc}

08005310 <_ZN17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE>:
	// TODO Auto-generated destructor stub
}

bool ButtonsController::registerCallback(
		interface::ButtonsControllerCallbackProvider *callbackProvider,
		interface::ButtonsControllerCallbackProvider::CallbackMethod callbackMethod) {
 8005310:	b082      	sub	sp, #8
 8005312:	f10d 0c08 	add.w	ip, sp, #8
 8005316:	e90c 000c 	stmdb	ip, {r2, r3}

	if(callbackProvider != nullptr && callbackMethod != nullptr) {
 800531a:	b199      	cbz	r1, 8005344 <_ZN17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE+0x34>
 800531c:	460b      	mov	r3, r1
 800531e:	9a00      	ldr	r2, [sp, #0]
 8005320:	b152      	cbz	r2, 8005338 <_ZN17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE+0x28>
		_callbackProvider = callbackProvider;
 8005322:	61c3      	str	r3, [r0, #28]
		_callbackMethod = callbackMethod;
 8005324:	f100 0320 	add.w	r3, r0, #32
 8005328:	aa02      	add	r2, sp, #8
 800532a:	e912 0003 	ldmdb	r2, {r0, r1}
 800532e:	e883 0003 	stmia.w	r3, {r0, r1}
		return true;
 8005332:	2001      	movs	r0, #1
	}

	return false;
}
 8005334:	b002      	add	sp, #8
 8005336:	4770      	bx	lr
	if(callbackProvider != nullptr && callbackMethod != nullptr) {
 8005338:	9a01      	ldr	r2, [sp, #4]
 800533a:	f012 0f01 	tst.w	r2, #1
 800533e:	d1f0      	bne.n	8005322 <_ZN17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE+0x12>
	return false;
 8005340:	2000      	movs	r0, #0
 8005342:	e7f7      	b.n	8005334 <_ZN17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE+0x24>
 8005344:	2000      	movs	r0, #0
 8005346:	e7f5      	b.n	8005334 <_ZN17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE+0x24>

08005348 <_ZThn4_N17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE>:
    /**
     * @brief Registers a callback method with its called pointer (callback provider).
     *
     * @return Returns true of the callback provider could be registered, otherwise false.
     */
    bool registerCallback(interface::ButtonsControllerCallbackProvider * callbackProvider,
 8005348:	f1a0 0004 	sub.w	r0, r0, #4
 800534c:	f7ff bfe0 	b.w	8005310 <_ZN17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE>

08005350 <_ZN17ButtonsController5onIrqEv>:

void ButtonsController::onIrq() {
 8005350:	b508      	push	{r3, lr}
	//GEN(evButtonIrq::evButtonIrq(EVENT_IRQ));
	pushEvent(btnInterrupt, true);
 8005352:	6883      	ldr	r3, [r0, #8]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	2201      	movs	r2, #1
 8005358:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800535a:	3008      	adds	r0, #8
 800535c:	4798      	blx	r3
}
 800535e:	bd08      	pop	{r3, pc}

08005360 <_ZN17ButtonsControllerD1Ev>:
ButtonsController::~ButtonsController() {
 8005360:	b510      	push	{r4, lr}
 8005362:	4604      	mov	r4, r0
 8005364:	4b06      	ldr	r3, [pc, #24]	; (8005380 <_ZN17ButtonsControllerD1Ev+0x20>)
 8005366:	f103 0208 	add.w	r2, r3, #8
 800536a:	6002      	str	r2, [r0, #0]
 800536c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8005370:	6042      	str	r2, [r0, #4]
 8005372:	3338      	adds	r3, #56	; 0x38
 8005374:	f840 3f08 	str.w	r3, [r0, #8]!
 8005378:	f000 fbf2 	bl	8005b60 <_ZN10XFBehaviorD1Ev>
}
 800537c:	4620      	mov	r0, r4
 800537e:	bd10      	pop	{r4, pc}
 8005380:	0800d09c 	.word	0x0800d09c

08005384 <_ZThn4_N17ButtonsControllerD1Ev>:
	virtual ~ButtonsController();
 8005384:	f1a0 0004 	sub.w	r0, r0, #4
 8005388:	f7ff bfea 	b.w	8005360 <_ZN17ButtonsControllerD1Ev>

0800538c <_ZThn8_N17ButtonsControllerD1Ev>:
 800538c:	f1a0 0008 	sub.w	r0, r0, #8
 8005390:	f7ff bfe6 	b.w	8005360 <_ZN17ButtonsControllerD1Ev>

08005394 <__tcf_0>:
	static ButtonsController bc;
 8005394:	b508      	push	{r3, lr}
 8005396:	4802      	ldr	r0, [pc, #8]	; (80053a0 <__tcf_0+0xc>)
 8005398:	f7ff ffe2 	bl	8005360 <_ZN17ButtonsControllerD1Ev>
 800539c:	bd08      	pop	{r3, pc}
 800539e:	bf00      	nop
 80053a0:	20000ef4 	.word	0x20000ef4

080053a4 <_ZN17ButtonsControllerD0Ev>:
ButtonsController::~ButtonsController() {
 80053a4:	b510      	push	{r4, lr}
 80053a6:	4604      	mov	r4, r0
}
 80053a8:	f7ff ffda 	bl	8005360 <_ZN17ButtonsControllerD1Ev>
 80053ac:	212c      	movs	r1, #44	; 0x2c
 80053ae:	4620      	mov	r0, r4
 80053b0:	f006 f82e 	bl	800b410 <_ZdlPvj>
 80053b4:	4620      	mov	r0, r4
 80053b6:	bd10      	pop	{r4, pc}

080053b8 <_ZThn8_N17ButtonsControllerD0Ev>:
 80053b8:	f1a0 0008 	sub.w	r0, r0, #8
 80053bc:	f7ff bff2 	b.w	80053a4 <_ZN17ButtonsControllerD0Ev>

080053c0 <_ZThn4_N17ButtonsControllerD0Ev>:
 80053c0:	f1a0 0004 	sub.w	r0, r0, #4
 80053c4:	f7ff bfee 	b.w	80053a4 <_ZN17ButtonsControllerD0Ev>

080053c8 <_ZN17ButtonsControllerC1Ev>:
ButtonsController::ButtonsController() {
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	4604      	mov	r4, r0
    virtual ~ButtonIrq() {}

	virtual void onIrq() = 0;	///< @brief Called by the ISR.

protected:
	ButtonIrq() {}              ///< Not allowing to instantiate object of interface.
 80053cc:	4b0f      	ldr	r3, [pc, #60]	; (800540c <_ZN17ButtonsControllerC1Ev+0x44>)
 80053ce:	6003      	str	r3, [r0, #0]
     */
    virtual bool registerCallback(ButtonsControllerCallbackProvider * callbackProvider,
                                  ButtonsControllerCallbackProvider::CallbackMethod callbackMethod) = 0;

protected:
    ButtonsControllerCallbackCaller() {}                        ///< Not allowing to instantiate object of interface.
 80053d0:	4b0f      	ldr	r3, [pc, #60]	; (8005410 <_ZN17ButtonsControllerC1Ev+0x48>)
 80053d2:	6043      	str	r3, [r0, #4]
 80053d4:	2100      	movs	r1, #0
 80053d6:	3008      	adds	r0, #8
 80053d8:	f000 fb9c 	bl	8005b14 <_ZN10XFBehaviorC1Eb>
 80053dc:	4b0d      	ldr	r3, [pc, #52]	; (8005414 <_ZN17ButtonsControllerC1Ev+0x4c>)
 80053de:	f103 0208 	add.w	r2, r3, #8
 80053e2:	6022      	str	r2, [r4, #0]
 80053e4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80053e8:	6062      	str	r2, [r4, #4]
 80053ea:	3338      	adds	r3, #56	; 0x38
 80053ec:	60a3      	str	r3, [r4, #8]
	currentState = STATE_INITIAL;
 80053ee:	2301      	movs	r3, #1
 80053f0:	7623      	strb	r3, [r4, #24]
	_callbackProvider = nullptr;
 80053f2:	2300      	movs	r3, #0
 80053f4:	61e3      	str	r3, [r4, #28]
	_callbackMethod = nullptr;
 80053f6:	6223      	str	r3, [r4, #32]
 80053f8:	6263      	str	r3, [r4, #36]	; 0x24
	btnInterrupt = new evButtonIrq();
 80053fa:	2014      	movs	r0, #20
 80053fc:	f006 f819 	bl	800b432 <_Znwj>
 8005400:	4605      	mov	r5, r0
 8005402:	f7fe facb 	bl	800399c <_ZN11evButtonIrqC1Ev>
 8005406:	62a5      	str	r5, [r4, #40]	; 0x28
}
 8005408:	4620      	mov	r0, r4
 800540a:	bd38      	pop	{r3, r4, r5, pc}
 800540c:	0800d864 	.word	0x0800d864
 8005410:	0800d878 	.word	0x0800d878
 8005414:	0800d09c 	.word	0x0800d09c

08005418 <_ZN17ButtonsController11getInstanceEv>:
	static ButtonsController bc;
 8005418:	4b0e      	ldr	r3, [pc, #56]	; (8005454 <_ZN17ButtonsController11getInstanceEv+0x3c>)
 800541a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800541e:	f3bf 8f5b 	dmb	ish
 8005422:	f013 0f01 	tst.w	r3, #1
 8005426:	d001      	beq.n	800542c <_ZN17ButtonsController11getInstanceEv+0x14>
}
 8005428:	480a      	ldr	r0, [pc, #40]	; (8005454 <_ZN17ButtonsController11getInstanceEv+0x3c>)
 800542a:	4770      	bx	lr
ButtonsController* ButtonsController::getInstance() {
 800542c:	b510      	push	{r4, lr}
	static ButtonsController bc;
 800542e:	480a      	ldr	r0, [pc, #40]	; (8005458 <_ZN17ButtonsController11getInstanceEv+0x40>)
 8005430:	f005 fff0 	bl	800b414 <__cxa_guard_acquire>
 8005434:	b908      	cbnz	r0, 800543a <_ZN17ButtonsController11getInstanceEv+0x22>
}
 8005436:	4807      	ldr	r0, [pc, #28]	; (8005454 <_ZN17ButtonsController11getInstanceEv+0x3c>)
 8005438:	bd10      	pop	{r4, pc}
	static ButtonsController bc;
 800543a:	4c06      	ldr	r4, [pc, #24]	; (8005454 <_ZN17ButtonsController11getInstanceEv+0x3c>)
 800543c:	4620      	mov	r0, r4
 800543e:	f7ff ffc3 	bl	80053c8 <_ZN17ButtonsControllerC1Ev>
 8005442:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8005446:	f005 fff1 	bl	800b42c <__cxa_guard_release>
 800544a:	4804      	ldr	r0, [pc, #16]	; (800545c <_ZN17ButtonsController11getInstanceEv+0x44>)
 800544c:	f006 fa42 	bl	800b8d4 <atexit>
 8005450:	e7f1      	b.n	8005436 <_ZN17ButtonsController11getInstanceEv+0x1e>
 8005452:	bf00      	nop
 8005454:	20000ef4 	.word	0x20000ef4
 8005458:	20000f20 	.word	0x20000f20
 800545c:	08005395 	.word	0x08005395

08005460 <_ZN17ButtonsController14doCheckButtonsEv>:


	return eventStatus;
}

void ButtonsController::doCheckButtons() {
 8005460:	b570      	push	{r4, r5, r6, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	4605      	mov	r5, r0
	static bool btnState[4] = {false, false, false, false};

	bool newBtnState[4];

	newBtnState[0] = !HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin);
 8005466:	4c27      	ldr	r4, [pc, #156]	; (8005504 <_ZN17ButtonsController14doCheckButtonsEv+0xa4>)
 8005468:	2104      	movs	r1, #4
 800546a:	4620      	mov	r0, r4
 800546c:	f7fc f90c 	bl	8001688 <HAL_GPIO_ReadPin>
 8005470:	fab0 f080 	clz	r0, r0
 8005474:	0940      	lsrs	r0, r0, #5
 8005476:	f88d 0004 	strb.w	r0, [sp, #4]
	newBtnState[1] = !HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 800547a:	2108      	movs	r1, #8
 800547c:	4620      	mov	r0, r4
 800547e:	f7fc f903 	bl	8001688 <HAL_GPIO_ReadPin>
 8005482:	fab0 f080 	clz	r0, r0
 8005486:	0940      	lsrs	r0, r0, #5
 8005488:	f88d 0005 	strb.w	r0, [sp, #5]
	newBtnState[2] = !HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 800548c:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8005490:	2180      	movs	r1, #128	; 0x80
 8005492:	4620      	mov	r0, r4
 8005494:	f7fc f8f8 	bl	8001688 <HAL_GPIO_ReadPin>
 8005498:	fab0 f080 	clz	r0, r0
 800549c:	0940      	lsrs	r0, r0, #5
 800549e:	f88d 0006 	strb.w	r0, [sp, #6]
	newBtnState[3] = !HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 80054a2:	2140      	movs	r1, #64	; 0x40
 80054a4:	4620      	mov	r0, r4
 80054a6:	f7fc f8ef 	bl	8001688 <HAL_GPIO_ReadPin>
 80054aa:	fab0 f080 	clz	r0, r0
 80054ae:	0940      	lsrs	r0, r0, #5
 80054b0:	f88d 0007 	strb.w	r0, [sp, #7]

	uint16_t i = 0;
	for(i = 0; i < 4; i++) {
 80054b4:	2400      	movs	r4, #0
 80054b6:	e006      	b.n	80054c6 <_ZN17ButtonsController14doCheckButtonsEv+0x66>
		if(btnState[i] != newBtnState[i]) {
			btnState[i] = newBtnState[i];
			if(_callbackProvider != nullptr) {
				(_callbackProvider->*_callbackMethod)(i, btnState[i]);
 80054b8:	5999      	ldr	r1, [r3, r6]
 80054ba:	6a2b      	ldr	r3, [r5, #32]
 80054bc:	58cb      	ldr	r3, [r1, r3]
 80054be:	4621      	mov	r1, r4
 80054c0:	4798      	blx	r3
	for(i = 0; i < 4; i++) {
 80054c2:	3401      	adds	r4, #1
 80054c4:	b2a4      	uxth	r4, r4
 80054c6:	2c03      	cmp	r4, #3
 80054c8:	d819      	bhi.n	80054fe <_ZN17ButtonsController14doCheckButtonsEv+0x9e>
		if(btnState[i] != newBtnState[i]) {
 80054ca:	4b0f      	ldr	r3, [pc, #60]	; (8005508 <_ZN17ButtonsController14doCheckButtonsEv+0xa8>)
 80054cc:	4423      	add	r3, r4
 80054ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054d2:	aa02      	add	r2, sp, #8
 80054d4:	4422      	add	r2, r4
 80054d6:	f812 2c04 	ldrb.w	r2, [r2, #-4]
 80054da:	4293      	cmp	r3, r2
 80054dc:	d0f1      	beq.n	80054c2 <_ZN17ButtonsController14doCheckButtonsEv+0x62>
			btnState[i] = newBtnState[i];
 80054de:	4b0a      	ldr	r3, [pc, #40]	; (8005508 <_ZN17ButtonsController14doCheckButtonsEv+0xa8>)
 80054e0:	4423      	add	r3, r4
 80054e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			if(_callbackProvider != nullptr) {
 80054e6:	69eb      	ldr	r3, [r5, #28]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0ea      	beq.n	80054c2 <_ZN17ButtonsController14doCheckButtonsEv+0x62>
				(_callbackProvider->*_callbackMethod)(i, btnState[i]);
 80054ec:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80054ee:	104e      	asrs	r6, r1, #1
 80054f0:	eb03 0061 	add.w	r0, r3, r1, asr #1
 80054f4:	f011 0f01 	tst.w	r1, #1
 80054f8:	d1de      	bne.n	80054b8 <_ZN17ButtonsController14doCheckButtonsEv+0x58>
 80054fa:	6a2b      	ldr	r3, [r5, #32]
 80054fc:	e7df      	b.n	80054be <_ZN17ButtonsController14doCheckButtonsEv+0x5e>
			}
			//Trace::out("Button %d %s", i, btnState[i]?"pressed":"released");
		}
	}
}
 80054fe:	b002      	add	sp, #8
 8005500:	bd70      	pop	{r4, r5, r6, pc}
 8005502:	bf00      	nop
 8005504:	40022000 	.word	0x40022000
 8005508:	20000ef4 	.word	0x20000ef4

0800550c <_ZN17ButtonsController12processEventEv>:
XFEventStatus ButtonsController::processEvent() {
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	4604      	mov	r4, r0
 8005510:	f04f 0602 	mov.w	r6, #2
	eState oldState = currentState;
 8005514:	7e05      	ldrb	r5, [r0, #24]
	switch(currentState) {
 8005516:	2d02      	cmp	r5, #2
 8005518:	d018      	beq.n	800554c <_ZN17ButtonsController12processEventEv+0x40>
 800551a:	2d03      	cmp	r5, #3
 800551c:	d02a      	beq.n	8005574 <_ZN17ButtonsController12processEventEv+0x68>
 800551e:	2d01      	cmp	r5, #1
 8005520:	d008      	beq.n	8005534 <_ZN17ButtonsController12processEventEv+0x28>
	if(oldState != currentState) {
 8005522:	7e23      	ldrb	r3, [r4, #24]
 8005524:	42ab      	cmp	r3, r5
 8005526:	d003      	beq.n	8005530 <_ZN17ButtonsController12processEventEv+0x24>
		switch(currentState) {
 8005528:	2b02      	cmp	r3, #2
 800552a:	d037      	beq.n	800559c <_ZN17ButtonsController12processEventEv+0x90>
 800552c:	2b03      	cmp	r3, #3
 800552e:	d03b      	beq.n	80055a8 <_ZN17ButtonsController12processEventEv+0x9c>
}
 8005530:	4630      	mov	r0, r6
 8005532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(getCurrentEvent()->getEventType() == XFEvent::Initial) {
 8005534:	3008      	adds	r0, #8
 8005536:	f000 fb4e 	bl	8005bd6 <_ZNK10XFBehavior15getCurrentEventEv>
    inline XFEventType getEventType() const { return eventType_; }
 800553a:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d1ef      	bne.n	8005522 <_ZN17ButtonsController12processEventEv+0x16>
			currentState = STATE_CHECK_BUTTONS;
 8005542:	2302      	movs	r3, #2
 8005544:	7623      	strb	r3, [r4, #24]
			eventStatus = XFEventStatus::Consumed;
 8005546:	f04f 0601 	mov.w	r6, #1
 800554a:	e7ea      	b.n	8005522 <_ZN17ButtonsController12processEventEv+0x16>
		if(getCurrentEvent()->getEventType() == XFEvent::Event
 800554c:	f100 0708 	add.w	r7, r0, #8
 8005550:	4638      	mov	r0, r7
 8005552:	f000 fb40 	bl	8005bd6 <_ZNK10XFBehavior15getCurrentEventEv>
 8005556:	f990 3004 	ldrsb.w	r3, [r0, #4]
				&& getCurrentEvent()->getId() == EventIds::evButtonIrqId) {
 800555a:	2b03      	cmp	r3, #3
 800555c:	d1e1      	bne.n	8005522 <_ZN17ButtonsController12processEventEv+0x16>
 800555e:	4638      	mov	r0, r7
 8005560:	f000 fb39 	bl	8005bd6 <_ZNK10XFBehavior15getCurrentEventEv>
    inline int getId() const { return id_; }		///< Returns #_id identifying the event in the behaviors context.
 8005564:	6883      	ldr	r3, [r0, #8]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d1db      	bne.n	8005522 <_ZN17ButtonsController12processEventEv+0x16>
			currentState = STATE_DEBOUNCE;
 800556a:	2303      	movs	r3, #3
 800556c:	7623      	strb	r3, [r4, #24]
			eventStatus = XFEventStatus::Consumed;
 800556e:	f04f 0601 	mov.w	r6, #1
 8005572:	e7d6      	b.n	8005522 <_ZN17ButtonsController12processEventEv+0x16>
		if (getCurrentEvent()->getEventType() == XFEvent::Timeout
 8005574:	f100 0708 	add.w	r7, r0, #8
 8005578:	4638      	mov	r0, r7
 800557a:	f000 fb2c 	bl	8005bd6 <_ZNK10XFBehavior15getCurrentEventEv>
    inline XFEventType getEventType() const { return eventType_; }
 800557e:	f990 3004 	ldrsb.w	r3, [r0, #4]
				&& getCurrentEvent()->getId() == TIMEOUT_DEBOUNCE) {
 8005582:	2b04      	cmp	r3, #4
 8005584:	d1cd      	bne.n	8005522 <_ZN17ButtonsController12processEventEv+0x16>
 8005586:	4638      	mov	r0, r7
 8005588:	f000 fb25 	bl	8005bd6 <_ZNK10XFBehavior15getCurrentEventEv>
    inline int getId() const { return id_; }		///< Returns #_id identifying the event in the behaviors context.
 800558c:	6883      	ldr	r3, [r0, #8]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d1c7      	bne.n	8005522 <_ZN17ButtonsController12processEventEv+0x16>
			currentState = STATE_CHECK_BUTTONS;
 8005592:	2302      	movs	r3, #2
 8005594:	7623      	strb	r3, [r4, #24]
			eventStatus = XFEventStatus::Consumed;
 8005596:	f04f 0601 	mov.w	r6, #1
 800559a:	e7c2      	b.n	8005522 <_ZN17ButtonsController12processEventEv+0x16>
			if(oldState == STATE_DEBOUNCE) {
 800559c:	2d03      	cmp	r5, #3
 800559e:	d1c7      	bne.n	8005530 <_ZN17ButtonsController12processEventEv+0x24>
				doCheckButtons();
 80055a0:	4620      	mov	r0, r4
 80055a2:	f7ff ff5d 	bl	8005460 <_ZN17ButtonsController14doCheckButtonsEv>
 80055a6:	e7c3      	b.n	8005530 <_ZN17ButtonsController12processEventEv+0x24>
			scheduleTimeout(TIMEOUT_DEBOUNCE, DEBOUNCE_TIME);
 80055a8:	3408      	adds	r4, #8
 80055aa:	4620      	mov	r0, r4
 80055ac:	f000 fad9 	bl	8005b62 <_ZN10XFBehavior13getDispatcherEv>
 80055b0:	6803      	ldr	r3, [r0, #0]
 80055b2:	699d      	ldr	r5, [r3, #24]
 80055b4:	4623      	mov	r3, r4
 80055b6:	2264      	movs	r2, #100	; 0x64
 80055b8:	2101      	movs	r1, #1
 80055ba:	47a8      	blx	r5
 80055bc:	e7b8      	b.n	8005530 <_ZN17ButtonsController12processEventEv+0x24>

080055be <_ZThn8_N17ButtonsController12processEventEv>:
		STATE_DEBOUNCE = 3
	} eState;

	eState currentState;

	XFEventStatus processEvent();
 80055be:	f1a0 0008 	sub.w	r0, r0, #8
 80055c2:	f7ff bfa3 	b.w	800550c <_ZN17ButtonsController12processEventEv>

080055c6 <_ZN13LedControllerD1Ev>:
	 */
}

LedController::~LedController()
{
}
 80055c6:	4770      	bx	lr

080055c8 <_ZN13LedControllerD0Ev>:
LedController::~LedController()
 80055c8:	b510      	push	{r4, lr}
 80055ca:	4604      	mov	r4, r0
}
 80055cc:	2124      	movs	r1, #36	; 0x24
 80055ce:	f005 ff1f 	bl	800b410 <_ZdlPvj>
 80055d2:	4620      	mov	r0, r4
 80055d4:	bd10      	pop	{r4, pc}
	...

080055d8 <_ZN13LedController7setLed0Eb>:
		}
	}
}

void LedController::setLed0(bool bOn /* = true */)
{
 80055d8:	b510      	push	{r4, lr}
	if (bOn)
 80055da:	460c      	mov	r4, r1
 80055dc:	b151      	cbz	r1, 80055f4 <_ZN13LedController7setLed0Eb+0x1c>
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80055de:	2201      	movs	r2, #1
 80055e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055e4:	4809      	ldr	r0, [pc, #36]	; (800560c <_ZN13LedController7setLed0Eb+0x34>)
 80055e6:	f7fc f856 	bl	8001696 <HAL_GPIO_WritePin>
	{
	    HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
	}

#if (LEDCONTROLLER_TRACE_ENABLE != 0)
	if (bOn)
 80055ea:	b154      	cbz	r4, 8005602 <_ZN13LedController7setLed0Eb+0x2a>
	{
		// Not using "%s" here (bug in gcc c-library!)
		Trace::out(" LED0: on");
 80055ec:	4808      	ldr	r0, [pc, #32]	; (8005610 <_ZN13LedController7setLed0Eb+0x38>)
 80055ee:	f000 f97d 	bl	80058ec <_ZN5Trace3outEPKcz>
	else
	{
		Trace::out(" LED0: off");
	}
#endif // LEDCONTROLLER_TRACE_ENABLE
}
 80055f2:	bd10      	pop	{r4, pc}
	    HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80055f4:	2200      	movs	r2, #0
 80055f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055fa:	4804      	ldr	r0, [pc, #16]	; (800560c <_ZN13LedController7setLed0Eb+0x34>)
 80055fc:	f7fc f84b 	bl	8001696 <HAL_GPIO_WritePin>
 8005600:	e7f3      	b.n	80055ea <_ZN13LedController7setLed0Eb+0x12>
		Trace::out(" LED0: off");
 8005602:	4804      	ldr	r0, [pc, #16]	; (8005614 <_ZN13LedController7setLed0Eb+0x3c>)
 8005604:	f000 f972 	bl	80058ec <_ZN5Trace3outEPKcz>
}
 8005608:	e7f3      	b.n	80055f2 <_ZN13LedController7setLed0Eb+0x1a>
 800560a:	bf00      	nop
 800560c:	40020000 	.word	0x40020000
 8005610:	0800d884 	.word	0x0800d884
 8005614:	0800d890 	.word	0x0800d890

08005618 <_ZN13LedController7setLed1Eb>:

void LedController::setLed1(bool bOn /* = true */)
{
 8005618:	b510      	push	{r4, lr}
    if (bOn)
 800561a:	460c      	mov	r4, r1
 800561c:	b149      	cbz	r1, 8005632 <_ZN13LedController7setLed1Eb+0x1a>
    {
        HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800561e:	2201      	movs	r2, #1
 8005620:	2140      	movs	r1, #64	; 0x40
 8005622:	4809      	ldr	r0, [pc, #36]	; (8005648 <_ZN13LedController7setLed1Eb+0x30>)
 8005624:	f7fc f837 	bl	8001696 <HAL_GPIO_WritePin>
    {
        HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
    }

#if (LEDCONTROLLER_TRACE_ENABLE != 0)
    if (bOn)
 8005628:	b14c      	cbz	r4, 800563e <_ZN13LedController7setLed1Eb+0x26>
	{
		Trace::out("  LED1: on");
 800562a:	4808      	ldr	r0, [pc, #32]	; (800564c <_ZN13LedController7setLed1Eb+0x34>)
 800562c:	f000 f95e 	bl	80058ec <_ZN5Trace3outEPKcz>
	else
	{
		Trace::out("  LED1: off");
	}
#endif // LEDCONTROLLER_TRACE_ENABLE
}
 8005630:	bd10      	pop	{r4, pc}
        HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8005632:	2200      	movs	r2, #0
 8005634:	2140      	movs	r1, #64	; 0x40
 8005636:	4804      	ldr	r0, [pc, #16]	; (8005648 <_ZN13LedController7setLed1Eb+0x30>)
 8005638:	f7fc f82d 	bl	8001696 <HAL_GPIO_WritePin>
 800563c:	e7f4      	b.n	8005628 <_ZN13LedController7setLed1Eb+0x10>
		Trace::out("  LED1: off");
 800563e:	4804      	ldr	r0, [pc, #16]	; (8005650 <_ZN13LedController7setLed1Eb+0x38>)
 8005640:	f000 f954 	bl	80058ec <_ZN5Trace3outEPKcz>
}
 8005644:	e7f4      	b.n	8005630 <_ZN13LedController7setLed1Eb+0x18>
 8005646:	bf00      	nop
 8005648:	40021c00 	.word	0x40021c00
 800564c:	0800d89c 	.word	0x0800d89c
 8005650:	0800d8a8 	.word	0x0800d8a8

08005654 <_ZN13LedController7setLed2Eb>:

void LedController::setLed2(bool bOn /* = true */)
{
 8005654:	b510      	push	{r4, lr}
    if (bOn)
 8005656:	460c      	mov	r4, r1
 8005658:	b151      	cbz	r1, 8005670 <_ZN13LedController7setLed2Eb+0x1c>
    {
        HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800565a:	2201      	movs	r2, #1
 800565c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005660:	4809      	ldr	r0, [pc, #36]	; (8005688 <_ZN13LedController7setLed2Eb+0x34>)
 8005662:	f7fc f818 	bl	8001696 <HAL_GPIO_WritePin>
    {
        HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
    }

#if (LEDCONTROLLER_TRACE_ENABLE != 0)
    if (bOn)
 8005666:	b154      	cbz	r4, 800567e <_ZN13LedController7setLed2Eb+0x2a>
	{
		Trace::out("   LED2: on");
 8005668:	4808      	ldr	r0, [pc, #32]	; (800568c <_ZN13LedController7setLed2Eb+0x38>)
 800566a:	f000 f93f 	bl	80058ec <_ZN5Trace3outEPKcz>
	else
	{
		Trace::out("   LED2: off");
	}
#endif // LEDCONTROLLER_TRACE_ENABLE
}
 800566e:	bd10      	pop	{r4, pc}
        HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8005670:	2200      	movs	r2, #0
 8005672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005676:	4804      	ldr	r0, [pc, #16]	; (8005688 <_ZN13LedController7setLed2Eb+0x34>)
 8005678:	f7fc f80d 	bl	8001696 <HAL_GPIO_WritePin>
 800567c:	e7f3      	b.n	8005666 <_ZN13LedController7setLed2Eb+0x12>
		Trace::out("   LED2: off");
 800567e:	4804      	ldr	r0, [pc, #16]	; (8005690 <_ZN13LedController7setLed2Eb+0x3c>)
 8005680:	f000 f934 	bl	80058ec <_ZN5Trace3outEPKcz>
}
 8005684:	e7f3      	b.n	800566e <_ZN13LedController7setLed2Eb+0x1a>
 8005686:	bf00      	nop
 8005688:	40020000 	.word	0x40020000
 800568c:	0800d8b4 	.word	0x0800d8b4
 8005690:	0800d8c0 	.word	0x0800d8c0

08005694 <_ZN13LedController7setLed3Eb>:

void LedController::setLed3(bool bOn /* = true */)
{
 8005694:	b510      	push	{r4, lr}
    if (bOn)
 8005696:	460c      	mov	r4, r1
 8005698:	b149      	cbz	r1, 80056ae <_ZN13LedController7setLed3Eb+0x1a>
    {
        HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 800569a:	2201      	movs	r2, #1
 800569c:	2110      	movs	r1, #16
 800569e:	4809      	ldr	r0, [pc, #36]	; (80056c4 <_ZN13LedController7setLed3Eb+0x30>)
 80056a0:	f7fb fff9 	bl	8001696 <HAL_GPIO_WritePin>
    {
        HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
    }

#if (LEDCONTROLLER_TRACE_ENABLE != 0)
    if (bOn)
 80056a4:	b14c      	cbz	r4, 80056ba <_ZN13LedController7setLed3Eb+0x26>
	{
		Trace::out("    LED3: on");
 80056a6:	4808      	ldr	r0, [pc, #32]	; (80056c8 <_ZN13LedController7setLed3Eb+0x34>)
 80056a8:	f000 f920 	bl	80058ec <_ZN5Trace3outEPKcz>
	else
	{
		Trace::out("    LED3: off");
	}
#endif // LEDCONTROLLER_TRACE_ENABLE
}
 80056ac:	bd10      	pop	{r4, pc}
        HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80056ae:	2200      	movs	r2, #0
 80056b0:	2110      	movs	r1, #16
 80056b2:	4804      	ldr	r0, [pc, #16]	; (80056c4 <_ZN13LedController7setLed3Eb+0x30>)
 80056b4:	f7fb ffef 	bl	8001696 <HAL_GPIO_WritePin>
 80056b8:	e7f4      	b.n	80056a4 <_ZN13LedController7setLed3Eb+0x10>
		Trace::out("    LED3: off");
 80056ba:	4804      	ldr	r0, [pc, #16]	; (80056cc <_ZN13LedController7setLed3Eb+0x38>)
 80056bc:	f000 f916 	bl	80058ec <_ZN5Trace3outEPKcz>
}
 80056c0:	e7f4      	b.n	80056ac <_ZN13LedController7setLed3Eb+0x18>
 80056c2:	bf00      	nop
 80056c4:	40020400 	.word	0x40020400
 80056c8:	0800d8d0 	.word	0x0800d8d0
 80056cc:	0800d8e0 	.word	0x0800d8e0

080056d0 <_ZN13LedControllerC1Ev>:
LedController::LedController()
 80056d0:	b508      	push	{r3, lr}
 80056d2:	4b0d      	ldr	r3, [pc, #52]	; (8005708 <_ZN13LedControllerC1Ev+0x38>)
 80056d4:	6003      	str	r3, [r0, #0]
  	assert(!_pInstance);	// Only one instance of this class allowed!
 80056d6:	4b0d      	ldr	r3, [pc, #52]	; (800570c <_ZN13LedControllerC1Ev+0x3c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	b97b      	cbnz	r3, 80056fc <_ZN13LedControllerC1Ev+0x2c>
	_pInstance = this;
 80056dc:	4b0b      	ldr	r3, [pc, #44]	; (800570c <_ZN13LedControllerC1Ev+0x3c>)
 80056de:	6018      	str	r0, [r3, #0]
	_ledOperation[0] = &LedController::setLed0;
 80056e0:	4b0b      	ldr	r3, [pc, #44]	; (8005710 <_ZN13LedControllerC1Ev+0x40>)
 80056e2:	6043      	str	r3, [r0, #4]
 80056e4:	2300      	movs	r3, #0
 80056e6:	6083      	str	r3, [r0, #8]
	_ledOperation[1] = &LedController::setLed1;
 80056e8:	4a0a      	ldr	r2, [pc, #40]	; (8005714 <_ZN13LedControllerC1Ev+0x44>)
 80056ea:	60c2      	str	r2, [r0, #12]
 80056ec:	6103      	str	r3, [r0, #16]
	_ledOperation[2] = &LedController::setLed2;
 80056ee:	4a0a      	ldr	r2, [pc, #40]	; (8005718 <_ZN13LedControllerC1Ev+0x48>)
 80056f0:	6142      	str	r2, [r0, #20]
 80056f2:	6183      	str	r3, [r0, #24]
	_ledOperation[3] = &LedController::setLed3;
 80056f4:	4a09      	ldr	r2, [pc, #36]	; (800571c <_ZN13LedControllerC1Ev+0x4c>)
 80056f6:	61c2      	str	r2, [r0, #28]
 80056f8:	6203      	str	r3, [r0, #32]
}
 80056fa:	bd08      	pop	{r3, pc}
  	assert(!_pInstance);	// Only one instance of this class allowed!
 80056fc:	4b08      	ldr	r3, [pc, #32]	; (8005720 <_ZN13LedControllerC1Ev+0x50>)
 80056fe:	4a09      	ldr	r2, [pc, #36]	; (8005724 <_ZN13LedControllerC1Ev+0x54>)
 8005700:	210c      	movs	r1, #12
 8005702:	4809      	ldr	r0, [pc, #36]	; (8005728 <_ZN13LedControllerC1Ev+0x58>)
 8005704:	f006 f8c8 	bl	800b898 <__assert_func>
 8005708:	0800d0fc 	.word	0x0800d0fc
 800570c:	20000f28 	.word	0x20000f28
 8005710:	080055d9 	.word	0x080055d9
 8005714:	08005619 	.word	0x08005619
 8005718:	08005655 	.word	0x08005655
 800571c:	08005695 	.word	0x08005695
 8005720:	0800d8f0 	.word	0x0800d8f0
 8005724:	0800d8fc 	.word	0x0800d8fc
 8005728:	0800d91c 	.word	0x0800d91c

0800572c <_ZN13LedController7setLedsEhb>:
{
 800572c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005730:	4606      	mov	r6, r0
 8005732:	460f      	mov	r7, r1
 8005734:	4690      	mov	r8, r2
	for (uint8_t i = 0; i < ledCount(); i++, mask <<= 1)
 8005736:	2400      	movs	r4, #0
	uint8_t mask = 0x01;
 8005738:	2501      	movs	r5, #1
 800573a:	e00c      	b.n	8005756 <_ZN13LedController7setLedsEhb+0x2a>
		if ((ledMask & mask) == mask && _ledOperation[i])
 800573c:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 8005740:	6889      	ldr	r1, [r1, #8]
 8005742:	f011 0f01 	tst.w	r1, #1
 8005746:	d002      	beq.n	800574e <_ZN13LedController7setLedsEhb+0x22>
 8005748:	e010      	b.n	800576c <_ZN13LedController7setLedsEhb+0x40>
			(this->*_ledOperation[i])(bOn);
 800574a:	4641      	mov	r1, r8
 800574c:	4798      	blx	r3
	for (uint8_t i = 0; i < ledCount(); i++, mask <<= 1)
 800574e:	3401      	adds	r4, #1
 8005750:	b2e4      	uxtb	r4, r4
 8005752:	006d      	lsls	r5, r5, #1
 8005754:	b2ed      	uxtb	r5, r5
 8005756:	2c03      	cmp	r4, #3
 8005758:	d814      	bhi.n	8005784 <_ZN13LedController7setLedsEhb+0x58>
		if ((ledMask & mask) == mask && _ledOperation[i])
 800575a:	ea35 0307 	bics.w	r3, r5, r7
 800575e:	d1f6      	bne.n	800574e <_ZN13LedController7setLedsEhb+0x22>
 8005760:	4622      	mov	r2, r4
 8005762:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0e7      	beq.n	800573c <_ZN13LedController7setLedsEhb+0x10>
			(this->*_ledOperation[i])(bOn);
 800576c:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8005770:	6892      	ldr	r2, [r2, #8]
 8005772:	1051      	asrs	r1, r2, #1
 8005774:	eb06 0062 	add.w	r0, r6, r2, asr #1
 8005778:	f012 0f01 	tst.w	r2, #1
 800577c:	d0e5      	beq.n	800574a <_ZN13LedController7setLedsEhb+0x1e>
 800577e:	5872      	ldr	r2, [r6, r1]
 8005780:	58d3      	ldr	r3, [r2, r3]
 8005782:	e7e2      	b.n	800574a <_ZN13LedController7setLedsEhb+0x1e>
}
 8005784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005788 <_ZN13LedController6setLedEhb>:
{
 8005788:	b508      	push	{r3, lr}
	setLeds(0x01 << index, bOn);
 800578a:	2301      	movs	r3, #1
 800578c:	fa03 f101 	lsl.w	r1, r3, r1
 8005790:	b2c9      	uxtb	r1, r1
 8005792:	f7ff ffcb 	bl	800572c <_ZN13LedController7setLedsEhb>
}
 8005796:	bd08      	pop	{r3, pc}

08005798 <_ZL17checkStringEndingPcm>:
	traceUart.initialize(TRACE_UART_BAUD_RATE);
}

static int32_t checkStringEnding(char * str, uint32_t len)
{
	if (!len)
 8005798:	b1f1      	cbz	r1, 80057d8 <_ZL17checkStringEndingPcm+0x40>
{
 800579a:	b510      	push	{r4, lr}
 800579c:	460b      	mov	r3, r1
	{
		return 0;
	}

	if (str[len-1] != '\n')
 800579e:	1e4a      	subs	r2, r1, #1
 80057a0:	1884      	adds	r4, r0, r2
 80057a2:	5c81      	ldrb	r1, [r0, r2]
 80057a4:	290a      	cmp	r1, #10
 80057a6:	d00a      	beq.n	80057be <_ZL17checkStringEndingPcm+0x26>
	{
#if (TRACE_ADD_CRLF_SEQU != 0)
		// Add "\r\n" at the end of the string
		str[len] = '\r';
 80057a8:	220d      	movs	r2, #13
 80057aa:	54c2      	strb	r2, [r0, r3]
		str[len+1] = '\n';
 80057ac:	1c5a      	adds	r2, r3, #1
 80057ae:	210a      	movs	r1, #10
 80057b0:	5481      	strb	r1, [r0, r2]
		str[len+2] = '\0';
 80057b2:	3302      	adds	r3, #2
 80057b4:	2200      	movs	r2, #0
 80057b6:	54c2      	strb	r2, [r0, r3]
			memmove(&str[len], &str[len-1], 2);
			str[len-1] = '\r';
		}
	}
#endif // TRACE_ADD_CRLF_SEQU
	return strlen(str);
 80057b8:	f7fa fd7a 	bl	80002b0 <strlen>
}
 80057bc:	bd10      	pop	{r4, pc}
		if (len == 1 ||
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d005      	beq.n	80057ce <_ZL17checkStringEndingPcm+0x36>
 80057c2:	d9f9      	bls.n	80057b8 <_ZL17checkStringEndingPcm+0x20>
			(len >= 2 && str[len-2] != '\r'))
 80057c4:	18c1      	adds	r1, r0, r3
 80057c6:	f811 1c02 	ldrb.w	r1, [r1, #-2]
 80057ca:	290d      	cmp	r1, #13
 80057cc:	d0f4      	beq.n	80057b8 <_ZL17checkStringEndingPcm+0x20>
			memmove(&str[len], &str[len-1], 2);
 80057ce:	8821      	ldrh	r1, [r4, #0]
 80057d0:	52c1      	strh	r1, [r0, r3]
			str[len-1] = '\r';
 80057d2:	230d      	movs	r3, #13
 80057d4:	5483      	strb	r3, [r0, r2]
 80057d6:	e7ef      	b.n	80057b8 <_ZL17checkStringEndingPcm+0x20>
		return 0;
 80057d8:	2000      	movs	r0, #0
}
 80057da:	4770      	bx	lr

080057dc <_ZL10traceMutexv>:
{
 80057dc:	b508      	push	{r3, lr}
	static XFMutex * mutex = XFResourceFactory::getInstance()->createMutex();
 80057de:	4b0d      	ldr	r3, [pc, #52]	; (8005814 <_ZL10traceMutexv+0x38>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	f3bf 8f5b 	dmb	ish
 80057e6:	f013 0f01 	tst.w	r3, #1
 80057ea:	d002      	beq.n	80057f2 <_ZL10traceMutexv+0x16>
}
 80057ec:	4b09      	ldr	r3, [pc, #36]	; (8005814 <_ZL10traceMutexv+0x38>)
 80057ee:	6858      	ldr	r0, [r3, #4]
 80057f0:	bd08      	pop	{r3, pc}
	static XFMutex * mutex = XFResourceFactory::getInstance()->createMutex();
 80057f2:	4808      	ldr	r0, [pc, #32]	; (8005814 <_ZL10traceMutexv+0x38>)
 80057f4:	f005 fe0e 	bl	800b414 <__cxa_guard_acquire>
 80057f8:	2800      	cmp	r0, #0
 80057fa:	d0f7      	beq.n	80057ec <_ZL10traceMutexv+0x10>
 80057fc:	f000 fba0 	bl	8005f40 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8005800:	6803      	ldr	r3, [r0, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	4798      	blx	r3
 8005806:	4b03      	ldr	r3, [pc, #12]	; (8005814 <_ZL10traceMutexv+0x38>)
 8005808:	6058      	str	r0, [r3, #4]
 800580a:	4618      	mov	r0, r3
 800580c:	f005 fe0e 	bl	800b42c <__cxa_guard_release>
 8005810:	e7ec      	b.n	80057ec <_ZL10traceMutexv+0x10>
 8005812:	bf00      	nop
 8005814:	20000f2c 	.word	0x20000f2c

08005818 <_ZL14traceMutexLockv>:
{
 8005818:	b508      	push	{r3, lr}
    traceMutex().lock();
 800581a:	f7ff ffdf 	bl	80057dc <_ZL10traceMutexv>
 800581e:	6803      	ldr	r3, [r0, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	4798      	blx	r3
}
 8005824:	bd08      	pop	{r3, pc}

08005826 <_ZL16traceMutexUnlockv>:
{
 8005826:	b508      	push	{r3, lr}
    traceMutex().unlock();
 8005828:	f7ff ffd8 	bl	80057dc <_ZL10traceMutexv>
 800582c:	6803      	ldr	r3, [r0, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	4798      	blx	r3
}
 8005832:	bd08      	pop	{r3, pc}

08005834 <_ZN5Trace10initializeEv>:
{
 8005834:	b508      	push	{r3, lr}
	traceUart.initialize(TRACE_UART_BAUD_RATE);
 8005836:	4802      	ldr	r0, [pc, #8]	; (8005840 <_ZN5Trace10initializeEv+0xc>)
 8005838:	f000 f904 	bl	8005a44 <_ZN4Uart10initializeEv>
}
 800583c:	bd08      	pop	{r3, pc}
 800583e:	bf00      	nop
 8005840:	20001034 	.word	0x20001034

08005844 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Trace::out(string str)
{
 8005844:	b570      	push	{r4, r5, r6, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	4604      	mov	r4, r0
	traceMutexLock();
 800584a:	f7ff ffe5 	bl	8005818 <_ZL14traceMutexLockv>
      { return _M_string_length; }
 800584e:	6863      	ldr	r3, [r4, #4]
	if (str[str.length()-1] != '\n')
 8005850:	3b01      	subs	r3, #1
      { return _M_dataplus._M_p; }
 8005852:	6822      	ldr	r2, [r4, #0]
 8005854:	5cd3      	ldrb	r3, [r2, r3]
 8005856:	2b0a      	cmp	r3, #10
 8005858:	d10e      	bne.n	8005878 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>
      { return _M_string_length; }
 800585a:	6861      	ldr	r1, [r4, #4]
	{
		str += '\n';
	}

#if defined(TRACE_ADD_CRLF_SEQU) && (TRACE_ADD_CRLF_SEQU != 0)
	if(str[str.length()-2] != '\r'){
 800585c:	1e8b      	subs	r3, r1, #2
      { return _M_dataplus._M_p; }
 800585e:	6822      	ldr	r2, [r4, #0]
 8005860:	5cd3      	ldrb	r3, [r2, r3]
 8005862:	2b0d      	cmp	r3, #13
 8005864:	d125      	bne.n	80058b2 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e>
		str.insert(str.length()-1, "\r");
	}
#endif // TRACE_ADD_CRLF_SEQU

	traceUart.write(str.data(), str.length());
 8005866:	6862      	ldr	r2, [r4, #4]
 8005868:	6821      	ldr	r1, [r4, #0]
 800586a:	481c      	ldr	r0, [pc, #112]	; (80058dc <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x98>)
 800586c:	f000 f90c 	bl	8005a88 <_ZN4Uart5writeEPKcj>
	traceMutexUnlock();
 8005870:	f7ff ffd9 	bl	8005826 <_ZL16traceMutexUnlockv>
}
 8005874:	b002      	add	sp, #8
 8005876:	bd70      	pop	{r4, r5, r6, pc}
      { return _M_string_length; }
 8005878:	6866      	ldr	r6, [r4, #4]
	if (__size + 1 > this->capacity())
 800587a:	1c75      	adds	r5, r6, #1
      { return _M_dataplus._M_p; }
 800587c:	4623      	mov	r3, r4
 800587e:	f853 2b08 	ldr.w	r2, [r3], #8
	return _M_is_local() ? size_type(_S_local_capacity)
 8005882:	429a      	cmp	r2, r3
 8005884:	d00a      	beq.n	800589c <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x58>
 8005886:	68a3      	ldr	r3, [r4, #8]
	if (__size + 1 > this->capacity())
 8005888:	429d      	cmp	r5, r3
 800588a:	d809      	bhi.n	80058a0 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>
      { return _M_dataplus._M_p; }
 800588c:	6823      	ldr	r3, [r4, #0]
      { __c1 = __c2; }
 800588e:	220a      	movs	r2, #10
 8005890:	559a      	strb	r2, [r3, r6]
      { _M_string_length = __length; }
 8005892:	6065      	str	r5, [r4, #4]
      { return _M_dataplus._M_p; }
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	2200      	movs	r2, #0
 8005898:	555a      	strb	r2, [r3, r5]
      }
 800589a:	e7de      	b.n	800585a <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16>
	return _M_is_local() ? size_type(_S_local_capacity)
 800589c:	230f      	movs	r3, #15
 800589e:	e7f3      	b.n	8005888 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44>
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
 80058a0:	2301      	movs	r3, #1
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	2300      	movs	r3, #0
 80058a6:	461a      	mov	r2, r3
 80058a8:	4631      	mov	r1, r6
 80058aa:	4620      	mov	r0, r4
 80058ac:	f005 fef5 	bl	800b69a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80058b0:	e7ec      	b.n	800588c <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x48>
		str.insert(str.length()-1, "\r");
 80058b2:	3901      	subs	r1, #1
      { return _M_string_length; }
 80058b4:	6862      	ldr	r2, [r4, #4]
	if (__pos > this->size())
 80058b6:	4291      	cmp	r1, r2
 80058b8:	d809      	bhi.n	80058ce <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8a>
	return __testoff ? __off : this->size() - __pos;
 80058ba:	1a52      	subs	r2, r2, r1
 80058bc:	d000      	beq.n	80058c0 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7c>
 80058be:	2200      	movs	r2, #0
			  _M_limit(__pos, __n1), __s, __n2);
 80058c0:	2301      	movs	r3, #1
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	4b06      	ldr	r3, [pc, #24]	; (80058e0 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c>)
 80058c6:	4620      	mov	r0, r4
 80058c8:	f005 ff24 	bl	800b714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
			     traits_type::length(__s));
 80058cc:	e7cb      	b.n	8005866 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22>
	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
 80058ce:	4613      	mov	r3, r2
 80058d0:	460a      	mov	r2, r1
 80058d2:	4904      	ldr	r1, [pc, #16]	; (80058e4 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa0>)
 80058d4:	4804      	ldr	r0, [pc, #16]	; (80058e8 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa4>)
 80058d6:	f005 fdd5 	bl	800b484 <_ZSt24__throw_out_of_range_fmtPKcz>
 80058da:	bf00      	nop
 80058dc:	20001034 	.word	0x20001034
 80058e0:	0800d9c0 	.word	0x0800d9c0
 80058e4:	0800d970 	.word	0x0800d970
 80058e8:	0800d988 	.word	0x0800d988

080058ec <_ZN5Trace3outEPKcz>:

void Trace::out(const char * format, ...)
{
 80058ec:	b40f      	push	{r0, r1, r2, r3}
 80058ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058f0:	b083      	sub	sp, #12
 80058f2:	ad08      	add	r5, sp, #32
 80058f4:	f855 7b04 	ldr.w	r7, [r5], #4
	traceMutexLock();
 80058f8:	f7ff ff8e 	bl	8005818 <_ZL14traceMutexLockv>
	va_list args;

	// Format string
	va_start(args, format);
 80058fc:	9501      	str	r5, [sp, #4]
	vsprintf(strTrace, format, args);
 80058fe:	4e0e      	ldr	r6, [pc, #56]	; (8005938 <_ZN5Trace3outEPKcz+0x4c>)
 8005900:	f106 0408 	add.w	r4, r6, #8
 8005904:	462a      	mov	r2, r5
 8005906:	4639      	mov	r1, r7
 8005908:	4620      	mov	r0, r4
 800590a:	f006 fc9b 	bl	800c244 <vsiprintf>
	va_end(args);

	checkStringEnding(strTrace, strlen(strTrace));
 800590e:	4620      	mov	r0, r4
 8005910:	f7fa fcce 	bl	80002b0 <strlen>
 8005914:	4601      	mov	r1, r0
 8005916:	4620      	mov	r0, r4
 8005918:	f7ff ff3e 	bl	8005798 <_ZL17checkStringEndingPcm>

	traceUart.write(strTrace);
 800591c:	2200      	movs	r2, #0
 800591e:	4621      	mov	r1, r4
 8005920:	f506 7084 	add.w	r0, r6, #264	; 0x108
 8005924:	f000 f8b0 	bl	8005a88 <_ZN4Uart5writeEPKcj>
	traceMutexUnlock();
 8005928:	f7ff ff7d 	bl	8005826 <_ZL16traceMutexUnlockv>
}
 800592c:	b003      	add	sp, #12
 800592e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005932:	b004      	add	sp, #16
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	20000f2c 	.word	0x20000f2c

0800593c <_Z41__static_initialization_and_destruction_0ii>:

//static
void Trace::unlock()
{
    traceMutexUnlock();
}
 800593c:	b538      	push	{r3, r4, r5, lr}
 800593e:	4604      	mov	r4, r0
 8005940:	460d      	mov	r5, r1
 8005942:	2801      	cmp	r0, #1
 8005944:	d005      	beq.n	8005952 <_Z41__static_initialization_and_destruction_0ii+0x16>
static Uart traceUart(TRACE_UART_CONSTRUCTOR_PARAMETERS);
 8005946:	b91c      	cbnz	r4, 8005950 <_Z41__static_initialization_and_destruction_0ii+0x14>
 8005948:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800594c:	429d      	cmp	r5, r3
 800594e:	d00b      	beq.n	8005968 <_Z41__static_initialization_and_destruction_0ii+0x2c>
}
 8005950:	bd38      	pop	{r3, r4, r5, pc}
 8005952:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005956:	4299      	cmp	r1, r3
 8005958:	d1f5      	bne.n	8005946 <_Z41__static_initialization_and_destruction_0ii+0xa>
static Uart traceUart(TRACE_UART_CONSTRUCTOR_PARAMETERS);
 800595a:	2300      	movs	r3, #0
 800595c:	4a04      	ldr	r2, [pc, #16]	; (8005970 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800595e:	4619      	mov	r1, r3
 8005960:	4804      	ldr	r0, [pc, #16]	; (8005974 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8005962:	f000 f843 	bl	80059ec <_ZN4UartC1EhP20__UART_HandleTypeDefb>
 8005966:	e7ee      	b.n	8005946 <_Z41__static_initialization_and_destruction_0ii+0xa>
 8005968:	4802      	ldr	r0, [pc, #8]	; (8005974 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800596a:	f000 f837 	bl	80059dc <_ZN4UartD1Ev>
}
 800596e:	e7ef      	b.n	8005950 <_Z41__static_initialization_and_destruction_0ii+0x14>
 8005970:	200014e8 	.word	0x200014e8
 8005974:	20001034 	.word	0x20001034

08005978 <_GLOBAL__sub_I_trace_initialize>:
 8005978:	b508      	push	{r3, lr}
 800597a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800597e:	2001      	movs	r0, #1
 8005980:	f7ff ffdc 	bl	800593c <_Z41__static_initialization_and_destruction_0ii>
 8005984:	bd08      	pop	{r3, pc}

08005986 <_GLOBAL__sub_D_trace_initialize>:
 8005986:	b508      	push	{r3, lr}
 8005988:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800598c:	2000      	movs	r0, #0
 800598e:	f7ff ffd5 	bl	800593c <_Z41__static_initialization_and_destruction_0ii>
 8005992:	bd08      	pop	{r3, pc}

08005994 <_Z5inISRv>:

int inISR()
{
	// Variable must be put to TRUE in every ISR to indicate execution
	// of an ISR and need to put back to FALSE before leaving ISR.
	return bInISR;
 8005994:	4b01      	ldr	r3, [pc, #4]	; (800599c <_Z5inISRv+0x8>)
 8005996:	6818      	ldr	r0, [r3, #0]
}
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	200010c4 	.word	0x200010c4

080059a0 <_Z13enterCriticalv>:

void enterCritical()
{
 80059a0:	b508      	push	{r3, lr}
	// Only disable interrupts when not calling from an ISR
	if (!inISR())
 80059a2:	f7ff fff7 	bl	8005994 <_Z5inISRv>
 80059a6:	b938      	cbnz	r0, 80059b8 <_Z13enterCriticalv+0x18>
	{
		if (!bOMEnterCriticalRegionNested)
 80059a8:	4b04      	ldr	r3, [pc, #16]	; (80059bc <_Z13enterCriticalv+0x1c>)
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	b903      	cbnz	r3, 80059b0 <_Z13enterCriticalv+0x10>
  __ASM volatile ("cpsid i" : : : "memory");
 80059ae:	b672      	cpsid	i
		{
			// Turn off the priority configurable interrupts
		    __disable_irq();
		}
		bOMEnterCriticalRegionNested++;
 80059b0:	4a02      	ldr	r2, [pc, #8]	; (80059bc <_Z13enterCriticalv+0x1c>)
 80059b2:	6853      	ldr	r3, [r2, #4]
 80059b4:	3301      	adds	r3, #1
 80059b6:	6053      	str	r3, [r2, #4]
	}
}
 80059b8:	bd08      	pop	{r3, pc}
 80059ba:	bf00      	nop
 80059bc:	200010c4 	.word	0x200010c4

080059c0 <_Z12exitCriticalv>:

void exitCritical()
{
 80059c0:	b508      	push	{r3, lr}
	// Only enable interrupts when not calling from an ISR
	if (!inISR())
 80059c2:	f7ff ffe7 	bl	8005994 <_Z5inISRv>
 80059c6:	b930      	cbnz	r0, 80059d6 <_Z12exitCriticalv+0x16>
	{
		bOMEnterCriticalRegionNested--;
 80059c8:	4b03      	ldr	r3, [pc, #12]	; (80059d8 <_Z12exitCriticalv+0x18>)
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	3a01      	subs	r2, #1
 80059ce:	605a      	str	r2, [r3, #4]

		if (!bOMEnterCriticalRegionNested)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	b903      	cbnz	r3, 80059d6 <_Z12exitCriticalv+0x16>
  __ASM volatile ("cpsie i" : : : "memory");
 80059d4:	b662      	cpsie	i
		{
			// Turn on the interrupts with configurable priority
		    __enable_irq();
		}
	}
}
 80059d6:	bd08      	pop	{r3, pc}
 80059d8:	200010c4 	.word	0x200010c4

080059dc <_ZN4UartD1Ev>:
}

Uart::~Uart()
{

}
 80059dc:	4770      	bx	lr

080059de <_ZN4UartD0Ev>:
Uart::~Uart()
 80059de:	b510      	push	{r4, lr}
 80059e0:	4604      	mov	r4, r0
}
 80059e2:	2190      	movs	r1, #144	; 0x90
 80059e4:	f005 fd14 	bl	800b410 <_ZdlPvj>
 80059e8:	4620      	mov	r0, r4
 80059ea:	bd10      	pop	{r4, pc}

080059ec <_ZN4UartC1EhP20__UART_HandleTypeDefb>:
Uart::Uart(const unsigned char uartNbr, UART_HandleTypeDef * uartHandle, bool bTxDMA /* = false */)
 80059ec:	b510      	push	{r4, lr}
   _bTxDMA(bTxDMA)
 80059ee:	4c0f      	ldr	r4, [pc, #60]	; (8005a2c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x40>)
 80059f0:	6004      	str	r4, [r0, #0]
 80059f2:	24ff      	movs	r4, #255	; 0xff
 80059f4:	7104      	strb	r4, [r0, #4]
 80059f6:	2400      	movs	r4, #0
 80059f8:	6084      	str	r4, [r0, #8]
 80059fa:	7303      	strb	r3, [r0, #12]
	assert(uartNbr < UART_COUNT);
 80059fc:	2902      	cmp	r1, #2
 80059fe:	d809      	bhi.n	8005a14 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x28>
        if (!_sUart[uartNbr])
 8005a00:	4b0b      	ldr	r3, [pc, #44]	; (8005a30 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x44>)
 8005a02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005a06:	b95b      	cbnz	r3, 8005a20 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x34>
            _sUart[uartNbr] = this;
 8005a08:	4b09      	ldr	r3, [pc, #36]	; (8005a30 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x44>)
 8005a0a:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
            _uartNbr = uartNbr;
 8005a0e:	7101      	strb	r1, [r0, #4]
            _pUartHandle = uartHandle;
 8005a10:	6082      	str	r2, [r0, #8]
}
 8005a12:	bd10      	pop	{r4, pc}
	assert(uartNbr < UART_COUNT);
 8005a14:	4b07      	ldr	r3, [pc, #28]	; (8005a34 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x48>)
 8005a16:	4a08      	ldr	r2, [pc, #32]	; (8005a38 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x4c>)
 8005a18:	2111      	movs	r1, #17
 8005a1a:	4808      	ldr	r0, [pc, #32]	; (8005a3c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x50>)
 8005a1c:	f005 ff3c 	bl	800b898 <__assert_func>
            assert(false);  // Error: Instance for specified UART already exists.
 8005a20:	4b07      	ldr	r3, [pc, #28]	; (8005a40 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x54>)
 8005a22:	4a05      	ldr	r2, [pc, #20]	; (8005a38 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x4c>)
 8005a24:	211f      	movs	r1, #31
 8005a26:	4805      	ldr	r0, [pc, #20]	; (8005a3c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x50>)
 8005a28:	f005 ff36 	bl	800b898 <__assert_func>
 8005a2c:	0800d10c 	.word	0x0800d10c
 8005a30:	200010cc 	.word	0x200010cc
 8005a34:	0800d9c4 	.word	0x0800d9c4
 8005a38:	0800d9dc 	.word	0x0800d9dc
 8005a3c:	0800da14 	.word	0x0800da14
 8005a40:	0800da60 	.word	0x0800da60

08005a44 <_ZN4Uart10initializeEv>:

bool Uart::initialize()
{
	return true;
}
 8005a44:	2001      	movs	r0, #1
 8005a46:	4770      	bx	lr

08005a48 <_ZN4Uart13writeUsingDMAEPKhm>:
        writeUsingDMA((const uint8_t *)str, length);
    }
}

void Uart::writeUsingDMA(const uint8_t * str, uint32_t length)
{
 8005a48:	b570      	push	{r4, r5, r6, lr}
    assert(length <= sizeof(_pTxDmaBuffer));
 8005a4a:	2a80      	cmp	r2, #128	; 0x80
 8005a4c:	d80f      	bhi.n	8005a6e <_ZN4Uart13writeUsingDMAEPKhm+0x26>
 8005a4e:	4605      	mov	r5, r0
 8005a50:	4614      	mov	r4, r2

    // Copy data to TX DMA buffer
    ::memcpy(_pTxDmaBuffer, str, length);
 8005a52:	f100 060d 	add.w	r6, r0, #13
 8005a56:	4630      	mov	r0, r6
 8005a58:	f005 ff88 	bl	800b96c <memcpy>

    // Check that a Tx process is not already ongoing
    // (should never happen, but who knows!)
    while (_pUartHandle->gState != HAL_UART_STATE_READY)
 8005a5c:	68a8      	ldr	r0, [r5, #8]
 8005a5e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005a60:	2b20      	cmp	r3, #32
 8005a62:	d1fb      	bne.n	8005a5c <_ZN4Uart13writeUsingDMAEPKhm+0x14>
    { continue; }

    // Give data to TX DMA
    HAL_UART_Transmit_DMA(_pUartHandle, _pTxDmaBuffer, length);
 8005a64:	b2a2      	uxth	r2, r4
 8005a66:	4631      	mov	r1, r6
 8005a68:	f7fd f95c 	bl	8002d24 <HAL_UART_Transmit_DMA>
}
 8005a6c:	bd70      	pop	{r4, r5, r6, pc}
    assert(length <= sizeof(_pTxDmaBuffer));
 8005a6e:	4b03      	ldr	r3, [pc, #12]	; (8005a7c <_ZN4Uart13writeUsingDMAEPKhm+0x34>)
 8005a70:	4a03      	ldr	r2, [pc, #12]	; (8005a80 <_ZN4Uart13writeUsingDMAEPKhm+0x38>)
 8005a72:	2150      	movs	r1, #80	; 0x50
 8005a74:	4803      	ldr	r0, [pc, #12]	; (8005a84 <_ZN4Uart13writeUsingDMAEPKhm+0x3c>)
 8005a76:	f005 ff0f 	bl	800b898 <__assert_func>
 8005a7a:	bf00      	nop
 8005a7c:	0800da68 	.word	0x0800da68
 8005a80:	0800da88 	.word	0x0800da88
 8005a84:	0800da14 	.word	0x0800da14

08005a88 <_ZN4Uart5writeEPKcj>:
{
 8005a88:	b538      	push	{r3, r4, r5, lr}
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	460d      	mov	r5, r1
	if (!length)
 8005a8e:	4610      	mov	r0, r2
 8005a90:	b912      	cbnz	r2, 8005a98 <_ZN4Uart5writeEPKcj+0x10>
		length = strlen(str);
 8005a92:	4608      	mov	r0, r1
 8005a94:	f7fa fc0c 	bl	80002b0 <strlen>
    if (!_bTxDMA)
 8005a98:	7b23      	ldrb	r3, [r4, #12]
 8005a9a:	b933      	cbnz	r3, 8005aaa <_ZN4Uart5writeEPKcj+0x22>
        HAL_UART_Transmit(_pUartHandle, (uint8_t *)str, length, 50);
 8005a9c:	2332      	movs	r3, #50	; 0x32
 8005a9e:	b282      	uxth	r2, r0
 8005aa0:	4629      	mov	r1, r5
 8005aa2:	68a0      	ldr	r0, [r4, #8]
 8005aa4:	f7fd fc2d 	bl	8003302 <HAL_UART_Transmit>
}
 8005aa8:	bd38      	pop	{r3, r4, r5, pc}
        writeUsingDMA((const uint8_t *)str, length);
 8005aaa:	4602      	mov	r2, r0
 8005aac:	4629      	mov	r1, r5
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f7ff ffca 	bl	8005a48 <_ZN4Uart13writeUsingDMAEPKhm>
}
 8005ab4:	e7f8      	b.n	8005aa8 <_ZN4Uart5writeEPKcj+0x20>
	...

08005ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005af0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005abc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005abe:	e003      	b.n	8005ac8 <LoopCopyDataInit>

08005ac0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005ac0:	4b0c      	ldr	r3, [pc, #48]	; (8005af4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005ac2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005ac4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005ac6:	3104      	adds	r1, #4

08005ac8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005ac8:	480b      	ldr	r0, [pc, #44]	; (8005af8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005aca:	4b0c      	ldr	r3, [pc, #48]	; (8005afc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005acc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005ace:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005ad0:	d3f6      	bcc.n	8005ac0 <CopyDataInit>
  ldr  r2, =_sbss
 8005ad2:	4a0b      	ldr	r2, [pc, #44]	; (8005b00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005ad4:	e002      	b.n	8005adc <LoopFillZerobss>

08005ad6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005ad6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005ad8:	f842 3b04 	str.w	r3, [r2], #4

08005adc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005adc:	4b09      	ldr	r3, [pc, #36]	; (8005b04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005ade:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005ae0:	d3f9      	bcc.n	8005ad6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005ae2:	f7fb fa89 	bl	8000ff8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005ae6:	f005 ff0d 	bl	800b904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005aea:	f7fb f8ed 	bl	8000cc8 <main>
  bx  lr    
 8005aee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005af0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005af4:	0801005c 	.word	0x0801005c
  ldr  r0, =_sdata
 8005af8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005afc:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 8005b00:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 8005b04:	200015d8 	.word	0x200015d8

08005b08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b08:	e7fe      	b.n	8005b08 <ADC_IRQHandler>

08005b0a <_ZNK10XFBehavior17deleteOnTerminateEv>:
}

bool XFBehavior::deleteOnTerminate() const
{
    return deleteOnTerminate_;
}
 8005b0a:	7a40      	ldrb	r0, [r0, #9]
 8005b0c:	4770      	bx	lr

08005b0e <_ZN10XFBehavior20setDeleteOnTerminateEb>:

void XFBehavior::setDeleteOnTerminate(bool deleteBehaviour)
{
    deleteOnTerminate_ = deleteBehaviour;
 8005b0e:	7241      	strb	r1, [r0, #9]
}
 8005b10:	4770      	bx	lr
	...

08005b14 <_ZN10XFBehaviorC1Eb>:
XFBehavior::XFBehavior(bool ownDispatcher /* = false */) :
 8005b14:	b538      	push	{r3, r4, r5, lr}
 8005b16:	4604      	mov	r4, r0
    pCurrentEvent_(nullptr)
 8005b18:	4b10      	ldr	r3, [pc, #64]	; (8005b5c <_ZN10XFBehaviorC1Eb+0x48>)
 8005b1a:	6003      	str	r3, [r0, #0]
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	6043      	str	r3, [r0, #4]
 8005b20:	7201      	strb	r1, [r0, #8]
 8005b22:	7243      	strb	r3, [r0, #9]
 8005b24:	60c3      	str	r3, [r0, #12]
    if (ownDispatcher)
 8005b26:	b179      	cbz	r1, 8005b48 <_ZN10XFBehaviorC1Eb+0x34>
        pDispatcher_ = XFResourceFactory::getInstance()->createDispatcher();
 8005b28:	f000 fa0a 	bl	8005f40 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8005b2c:	6803      	ldr	r3, [r0, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	4798      	blx	r3
 8005b32:	6060      	str	r0, [r4, #4]
    if (pDispatcher_ == XFResourceFactory::getInstance()->getDefaultDispatcher())
 8005b34:	6865      	ldr	r5, [r4, #4]
 8005b36:	f000 fa03 	bl	8005f40 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8005b3a:	6803      	ldr	r3, [r0, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4798      	blx	r3
 8005b40:	4285      	cmp	r5, r0
 8005b42:	d008      	beq.n	8005b56 <_ZN10XFBehaviorC1Eb+0x42>
}
 8005b44:	4620      	mov	r0, r4
 8005b46:	bd38      	pop	{r3, r4, r5, pc}
        pDispatcher_ = XFResourceFactory::getInstance()->getDefaultDispatcher();
 8005b48:	f000 f9fa 	bl	8005f40 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8005b4c:	6803      	ldr	r3, [r0, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4798      	blx	r3
 8005b52:	6060      	str	r0, [r4, #4]
 8005b54:	e7ee      	b.n	8005b34 <_ZN10XFBehaviorC1Eb+0x20>
        hasOwnDispatcher_ = false;
 8005b56:	2300      	movs	r3, #0
 8005b58:	7223      	strb	r3, [r4, #8]
 8005b5a:	e7f3      	b.n	8005b44 <_ZN10XFBehaviorC1Eb+0x30>
 8005b5c:	0800d11c 	.word	0x0800d11c

08005b60 <_ZN10XFBehaviorD1Ev>:
}
 8005b60:	4770      	bx	lr

08005b62 <_ZN10XFBehavior13getDispatcherEv>:
}

interface::XFDispatcher * XFBehavior::getDispatcher()
{
    return pDispatcher_;
}
 8005b62:	6840      	ldr	r0, [r0, #4]
 8005b64:	4770      	bx	lr

08005b66 <_ZN10XFBehavior13startBehaviorEv>:
{
 8005b66:	b570      	push	{r4, r5, r6, lr}
 8005b68:	4604      	mov	r4, r0
    GEN(XFInitialEvent());
 8005b6a:	6803      	ldr	r3, [r0, #0]
 8005b6c:	68de      	ldr	r6, [r3, #12]
 8005b6e:	2010      	movs	r0, #16
 8005b70:	f005 fc5f 	bl	800b432 <_Znwj>
 8005b74:	4605      	mov	r5, r0
 8005b76:	f000 f851 	bl	8005c1c <_ZN14XFInitialEventC1Ev>
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	4629      	mov	r1, r5
 8005b7e:	4620      	mov	r0, r4
 8005b80:	47b0      	blx	r6
    inline bool hasOwnDispatcher() const { return hasOwnDispatcher_; }	///< True if behavior has its own dispatcher.
 8005b82:	7a23      	ldrb	r3, [r4, #8]
    if (hasOwnDispatcher())
 8005b84:	b12b      	cbz	r3, 8005b92 <_ZN10XFBehavior13startBehaviorEv+0x2c>
        getDispatcher()->start();
 8005b86:	4620      	mov	r0, r4
 8005b88:	f7ff ffeb 	bl	8005b62 <_ZN10XFBehavior13getDispatcherEv>
 8005b8c:	6803      	ldr	r3, [r0, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	4798      	blx	r3
}
 8005b92:	bd70      	pop	{r4, r5, r6, pc}

08005b94 <_ZN10XFBehavior9pushEventEP7XFEventb>:
{
 8005b94:	b538      	push	{r3, r4, r5, lr}
 8005b96:	460c      	mov	r4, r1
 8005b98:	4615      	mov	r5, r2
    inline void setBehavior(interface::XFReactive * pBehavior) { pBehavior_ = pBehavior; }
 8005b9a:	60c8      	str	r0, [r1, #12]
    getDispatcher()->pushEvent(pEvent, fromISR);
 8005b9c:	f7ff ffe1 	bl	8005b62 <_ZN10XFBehavior13getDispatcherEv>
 8005ba0:	6803      	ldr	r3, [r0, #0]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	462a      	mov	r2, r5
 8005ba6:	4621      	mov	r1, r4
 8005ba8:	4798      	blx	r3
}
 8005baa:	bd38      	pop	{r3, r4, r5, pc}

08005bac <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>:

void XFBehavior::setCurrentEvent(const XFEvent * pEvent)
{
    pCurrentEvent_ = pEvent;
 8005bac:	60c1      	str	r1, [r0, #12]
}
 8005bae:	4770      	bx	lr

08005bb0 <_ZN10XFBehavior7processEPK7XFEvent>:
{
 8005bb0:	b538      	push	{r3, r4, r5, lr}
 8005bb2:	4605      	mov	r5, r0
    setCurrentEvent(pEvent);
 8005bb4:	f7ff fffa 	bl	8005bac <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>
    eventStatus = processEvent();
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	4798      	blx	r3
 8005bc0:	4604      	mov	r4, r0
    setCurrentEvent(nullptr);
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	f7ff fff1 	bl	8005bac <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>
	/**
	 * Checks if both variables contain the same event status.
	 */
    bool operator == (const XFEventStatus::eEventStatus & eventStatus) const
	{
        return (this->status_ == eventStatus);
 8005bca:	b2e0      	uxtb	r0, r4
}
 8005bcc:	2808      	cmp	r0, #8
 8005bce:	bf14      	ite	ne
 8005bd0:	2000      	movne	r0, #0
 8005bd2:	2001      	moveq	r0, #1
 8005bd4:	bd38      	pop	{r3, r4, r5, pc}

08005bd6 <_ZNK10XFBehavior15getCurrentEventEv>:

const XFEvent * XFBehavior::getCurrentEvent() const
{
    return pCurrentEvent_;
}
 8005bd6:	68c0      	ldr	r0, [r0, #12]
 8005bd8:	4770      	bx	lr

08005bda <_ZN13XFCustomEventD1Ev>:
class XFCustomEvent : public XFEvent
 8005bda:	4770      	bx	lr

08005bdc <_ZN13XFCustomEventD0Ev>:
 8005bdc:	b510      	push	{r4, lr}
 8005bde:	4604      	mov	r4, r0
 8005be0:	2114      	movs	r1, #20
 8005be2:	f005 fc15 	bl	800b410 <_ZdlPvj>
 8005be6:	4620      	mov	r0, r4
 8005be8:	bd10      	pop	{r4, pc}
	...

08005bec <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>:
#include "xf/customevent.h"

XFCustomEvent::XFCustomEvent(int id, interface::XFReactive * pBehavior)
 8005bec:	b410      	push	{r4}
    XFEvent(XFEventType eventType, int id, interface::XFReactive * pBehavior) : eventType_(eventType), id_(id), pBehavior_(pBehavior) {}
 8005bee:	2403      	movs	r4, #3
 8005bf0:	7104      	strb	r4, [r0, #4]
 8005bf2:	6081      	str	r1, [r0, #8]
 8005bf4:	60c2      	str	r2, [r0, #12]
    : XFEvent(XFEvent::Event, id, pBehavior),
      bDeleteAfterConsume_(true)
 8005bf6:	4a03      	ldr	r2, [pc, #12]	; (8005c04 <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE+0x18>)
 8005bf8:	6002      	str	r2, [r0, #0]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	7402      	strb	r2, [r0, #16]
{

}
 8005bfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	0800dac4 	.word	0x0800dac4

08005c08 <_ZNK14XFInitialEvent18deleteAfterConsumeEv>:
}

bool XFInitialEvent::deleteAfterConsume() const
{
    return true;
}
 8005c08:	2001      	movs	r0, #1
 8005c0a:	4770      	bx	lr

08005c0c <_ZN14XFInitialEventD1Ev>:
 * @brief Initial event to start a behavior.
 *
 * Represents for example the first transition executed
 * in a state machine.
 */
class XFInitialEvent : public XFEvent
 8005c0c:	4770      	bx	lr

08005c0e <_ZN14XFInitialEventD0Ev>:
 8005c0e:	b510      	push	{r4, lr}
 8005c10:	4604      	mov	r4, r0
 8005c12:	2110      	movs	r1, #16
 8005c14:	f005 fbfc 	bl	800b410 <_ZdlPvj>
 8005c18:	4620      	mov	r0, r4
 8005c1a:	bd10      	pop	{r4, pc}

08005c1c <_ZN14XFInitialEventC1Ev>:
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	7102      	strb	r2, [r0, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	6082      	str	r2, [r0, #8]
 8005c24:	60c2      	str	r2, [r0, #12]
    : XFEvent(XFEvent::Initial, 0, nullptr)
 8005c26:	4a01      	ldr	r2, [pc, #4]	; (8005c2c <_ZN14XFInitialEventC1Ev+0x10>)
 8005c28:	6002      	str	r2, [r0, #0]
}
 8005c2a:	4770      	bx	lr
 8005c2c:	0800d144 	.word	0x0800d144

08005c30 <_ZNK16XFNullTransition18deleteAfterConsumeEv>:
}

bool XFNullTransition::deleteAfterConsume() const
{
    return true;
}
 8005c30:	2001      	movs	r0, #1
 8005c32:	4770      	bx	lr

08005c34 <_ZN16XFNullTransitionD1Ev>:
 * Represents a transition in a state machine having no trigger.
 *
 * In case one wants to directly transition from one state to
 * an other (without a trigger) a null transition must be pushed.
 */
class XFNullTransition : public XFEvent
 8005c34:	4770      	bx	lr

08005c36 <_ZN16XFNullTransitionD0Ev>:
 8005c36:	b510      	push	{r4, lr}
 8005c38:	4604      	mov	r4, r0
 8005c3a:	2110      	movs	r1, #16
 8005c3c:	f005 fbe8 	bl	800b410 <_ZdlPvj>
 8005c40:	4620      	mov	r0, r4
 8005c42:	bd10      	pop	{r4, pc}

08005c44 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>:
 8005c44:	2202      	movs	r2, #2
 8005c46:	7102      	strb	r2, [r0, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	6082      	str	r2, [r0, #8]
 8005c4c:	60c1      	str	r1, [r0, #12]
 : XFEvent(XFEvent::NullTransition, 0, pBehavior)
 8005c4e:	4a01      	ldr	r2, [pc, #4]	; (8005c54 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE+0x10>)
 8005c50:	6002      	str	r2, [r0, #0]
}
 8005c52:	4770      	bx	lr
 8005c54:	0800d158 	.word	0x0800d158

08005c58 <_ZNK9XFTimeout18deleteAfterConsumeEv>:
}

bool XFTimeout::deleteAfterConsume() const
{
    return true;
}
 8005c58:	2001      	movs	r0, #1
 8005c5a:	4770      	bx	lr

08005c5c <_ZN9XFTimeoutD1Ev>:
 * the `getEventType()` method.
 *
 * XFTimeout is inheriting from XFEvent, so every timeout is
 * also an event.
 */
class XFTimeout : public XFEvent
 8005c5c:	4770      	bx	lr

08005c5e <_ZN9XFTimeoutD0Ev>:
 8005c5e:	b510      	push	{r4, lr}
 8005c60:	4604      	mov	r4, r0
 8005c62:	2118      	movs	r1, #24
 8005c64:	f005 fbd4 	bl	800b410 <_ZdlPvj>
 8005c68:	4620      	mov	r0, r4
 8005c6a:	bd10      	pop	{r4, pc}

08005c6c <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>:
XFTimeout::XFTimeout(int id, int interval, interface::XFReactive * pBehavior)
 8005c6c:	b430      	push	{r4, r5}
 8005c6e:	2504      	movs	r5, #4
 8005c70:	7105      	strb	r5, [r0, #4]
 8005c72:	6081      	str	r1, [r0, #8]
 8005c74:	60c3      	str	r3, [r0, #12]
   relTicks_(interval)
 8005c76:	4b03      	ldr	r3, [pc, #12]	; (8005c84 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE+0x18>)
 8005c78:	6003      	str	r3, [r0, #0]
 8005c7a:	6102      	str	r2, [r0, #16]
 8005c7c:	6142      	str	r2, [r0, #20]
}
 8005c7e:	bc30      	pop	{r4, r5}
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	0800d16c 	.word	0x0800d16c

08005c88 <_ZNK9XFTimeouteqERKS_>:
    return (pBehavior_ == timeout.pBehavior_ && getId() == timeout.getId()) ? true : false;
 8005c88:	68c2      	ldr	r2, [r0, #12]
 8005c8a:	68cb      	ldr	r3, [r1, #12]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d001      	beq.n	8005c94 <_ZNK9XFTimeouteqERKS_+0xc>
 8005c90:	2000      	movs	r0, #0
 8005c92:	4770      	bx	lr
    inline int getId() const { return id_; }		///< Returns #_id identifying the event in the behaviors context.
 8005c94:	6882      	ldr	r2, [r0, #8]
 8005c96:	688b      	ldr	r3, [r1, #8]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d001      	beq.n	8005ca0 <_ZNK9XFTimeouteqERKS_+0x18>
 8005c9c:	2000      	movs	r0, #0
}
 8005c9e:	4770      	bx	lr
    return (pBehavior_ == timeout.pBehavior_ && getId() == timeout.getId()) ? true : false;
 8005ca0:	2001      	movs	r0, #1
 8005ca2:	4770      	bx	lr

08005ca4 <_ZNK9interface12XFDispatcher9getThreadEv>:
     * @brief Returns pointer to thread executing the behavior.
     *
     * Within an IDF no threads are present and this method returns
     * always null.
     */
    virtual interface::XFThread * getThread() const { return nullptr; }
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	4770      	bx	lr

08005ca8 <_ZNK19XFDispatcherDefault8isActiveEv>:
{
public:
	XFDispatcherDefault();
	virtual  ~XFDispatcherDefault();

	virtual bool isActive() const { return false; }		///< Default dispatcher does not have a composite thread.
 8005ca8:	2000      	movs	r0, #0
 8005caa:	4770      	bx	lr

08005cac <_ZN19XFDispatcherDefault4stopEv>:
	_bExecuting = true;
}

void XFDispatcherDefault::stop()
{
	_bExecuting = false;
 8005cac:	2300      	movs	r3, #0
 8005cae:	7103      	strb	r3, [r0, #4]
}
 8005cb0:	4770      	bx	lr

08005cb2 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent>:

    return _bExecuting;
}

void XFDispatcherDefault::dispatchEvent(const XFEvent * pEvent) const
{
 8005cb2:	b510      	push	{r4, lr}
 8005cb4:	460c      	mov	r4, r1
    inline interface::XFReactive * getBehavior() const { return pBehavior_; }
 8005cb6:	68c8      	ldr	r0, [r1, #12]
    XFReactive::TerminateBehavior terminateBehavior;

	terminateBehavior = pEvent->getBehavior()->process(pEvent);
 8005cb8:	6803      	ldr	r3, [r0, #0]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	4798      	blx	r3

	// Check if behavior should be deleted
	if (terminateBehavior and pEvent->getBehavior()->deleteOnTerminate())
 8005cbe:	b148      	cbz	r0, 8005cd4 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x22>
 8005cc0:	68e0      	ldr	r0, [r4, #12]
 8005cc2:	6803      	ldr	r3, [r0, #0]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	4798      	blx	r3
 8005cc8:	b120      	cbz	r0, 8005cd4 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x22>
 8005cca:	68e0      	ldr	r0, [r4, #12]
	{
		delete pEvent->getBehavior();
 8005ccc:	b110      	cbz	r0, 8005cd4 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x22>
 8005cce:	6803      	ldr	r3, [r0, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	4798      	blx	r3
	}
}
 8005cd4:	bd10      	pop	{r4, pc}
	...

08005cd8 <_ZN19XFDispatcherDefault5startEv>:
{
 8005cd8:	b508      	push	{r3, lr}
        assert(_pMutex);
 8005cda:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005cdc:	b113      	cbz	r3, 8005ce4 <_ZN19XFDispatcherDefault5startEv+0xc>
	_bExecuting = true;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	7103      	strb	r3, [r0, #4]
}
 8005ce2:	bd08      	pop	{r3, pc}
        assert(_pMutex);
 8005ce4:	4b02      	ldr	r3, [pc, #8]	; (8005cf0 <_ZN19XFDispatcherDefault5startEv+0x18>)
 8005ce6:	4a03      	ldr	r2, [pc, #12]	; (8005cf4 <_ZN19XFDispatcherDefault5startEv+0x1c>)
 8005ce8:	2122      	movs	r1, #34	; 0x22
 8005cea:	4803      	ldr	r0, [pc, #12]	; (8005cf8 <_ZN19XFDispatcherDefault5startEv+0x20>)
 8005cec:	f005 fdd4 	bl	800b898 <__assert_func>
 8005cf0:	0800dad0 	.word	0x0800dad0
 8005cf4:	0800dad8 	.word	0x0800dad8
 8005cf8:	0800db04 	.word	0x0800db04

08005cfc <_ZN19XFDispatcherDefault15scheduleTimeoutEiiPN9interface10XFReactiveE>:
{
 8005cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfe:	460c      	mov	r4, r1
 8005d00:	4615      	mov	r5, r2
 8005d02:	461e      	mov	r6, r3
	XFTimeoutManager::getInstance()->scheduleTimeout(timeoutId, interval, pReactive);
 8005d04:	f000 f996 	bl	8006034 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8005d08:	6803      	ldr	r3, [r0, #0]
 8005d0a:	695f      	ldr	r7, [r3, #20]
 8005d0c:	4633      	mov	r3, r6
 8005d0e:	462a      	mov	r2, r5
 8005d10:	4621      	mov	r1, r4
 8005d12:	47b8      	blx	r7
}
 8005d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005d16 <_ZN19XFDispatcherDefault17unscheduleTimeoutEiPN9interface10XFReactiveE>:
{
 8005d16:	b538      	push	{r3, r4, r5, lr}
 8005d18:	460c      	mov	r4, r1
 8005d1a:	4615      	mov	r5, r2
	XFTimeoutManager::getInstance()->unscheduleTimeout(timeoutId, pReactive);
 8005d1c:	f000 f98a 	bl	8006034 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8005d20:	6803      	ldr	r3, [r0, #0]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	462a      	mov	r2, r5
 8005d26:	4621      	mov	r1, r4
 8005d28:	4798      	blx	r3
}
 8005d2a:	bd38      	pop	{r3, r4, r5, pc}

08005d2c <_ZN19XFDispatcherDefaultC1Ev>:
XFDispatcherDefault::XFDispatcherDefault() :
 8005d2c:	b538      	push	{r3, r4, r5, lr}
 8005d2e:	4604      	mov	r4, r0
	_pMutex(nullptr)
 8005d30:	4b09      	ldr	r3, [pc, #36]	; (8005d58 <_ZN19XFDispatcherDefaultC1Ev+0x2c>)
 8005d32:	6003      	str	r3, [r0, #0]
 8005d34:	2500      	movs	r5, #0
 8005d36:	7105      	strb	r5, [r0, #4]
 8005d38:	3008      	adds	r0, #8
 8005d3a:	f000 fb83 	bl	8006444 <_ZN19XFEventQueueDefaultC1Ev>
 8005d3e:	63a5      	str	r5, [r4, #56]	; 0x38
	_pMutex = XFMutex::create();
 8005d40:	f000 fcbc 	bl	80066bc <_ZN9interface7XFMutex6createEv>
 8005d44:	63a0      	str	r0, [r4, #56]	; 0x38
	assert(_pMutex);
 8005d46:	b108      	cbz	r0, 8005d4c <_ZN19XFDispatcherDefaultC1Ev+0x20>
}
 8005d48:	4620      	mov	r0, r4
 8005d4a:	bd38      	pop	{r3, r4, r5, pc}
	assert(_pMutex);
 8005d4c:	4b03      	ldr	r3, [pc, #12]	; (8005d5c <_ZN19XFDispatcherDefaultC1Ev+0x30>)
 8005d4e:	4a04      	ldr	r2, [pc, #16]	; (8005d60 <_ZN19XFDispatcherDefaultC1Ev+0x34>)
 8005d50:	2118      	movs	r1, #24
 8005d52:	4804      	ldr	r0, [pc, #16]	; (8005d64 <_ZN19XFDispatcherDefaultC1Ev+0x38>)
 8005d54:	f005 fda0 	bl	800b898 <__assert_func>
 8005d58:	0800d180 	.word	0x0800d180
 8005d5c:	0800dad0 	.word	0x0800dad0
 8005d60:	0800db50 	.word	0x0800db50
 8005d64:	0800db04 	.word	0x0800db04

08005d68 <_ZN19XFDispatcherDefaultD1Ev>:
XFDispatcherDefault::~XFDispatcherDefault()
 8005d68:	b510      	push	{r4, lr}
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	4b03      	ldr	r3, [pc, #12]	; (8005d7c <_ZN19XFDispatcherDefaultD1Ev+0x14>)
 8005d6e:	f840 3b08 	str.w	r3, [r0], #8
 8005d72:	f000 fc31 	bl	80065d8 <_ZN19XFEventQueueDefaultD1Ev>
}
 8005d76:	4620      	mov	r0, r4
 8005d78:	bd10      	pop	{r4, pc}
 8005d7a:	bf00      	nop
 8005d7c:	0800d180 	.word	0x0800d180

08005d80 <_ZN19XFDispatcherDefaultD0Ev>:
XFDispatcherDefault::~XFDispatcherDefault()
 8005d80:	b510      	push	{r4, lr}
 8005d82:	4604      	mov	r4, r0
}
 8005d84:	f7ff fff0 	bl	8005d68 <_ZN19XFDispatcherDefaultD1Ev>
 8005d88:	213c      	movs	r1, #60	; 0x3c
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	f005 fb40 	bl	800b410 <_ZdlPvj>
 8005d90:	4620      	mov	r0, r4
 8005d92:	bd10      	pop	{r4, pc}

08005d94 <_ZN19XFDispatcherDefault9pushEventEP7XFEventb>:
{
 8005d94:	b538      	push	{r3, r4, r5, lr}
 8005d96:	4604      	mov	r4, r0
 8005d98:	460d      	mov	r5, r1
	_pMutex->lock();
 8005d9a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005d9c:	6803      	ldr	r3, [r0, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	4798      	blx	r3
		_events.push(pEvent);
 8005da2:	2200      	movs	r2, #0
 8005da4:	4629      	mov	r1, r5
 8005da6:	f104 0008 	add.w	r0, r4, #8
 8005daa:	f000 fc2d 	bl	8006608 <_ZN19XFEventQueueDefault4pushEPK7XFEventb>
	_pMutex->unlock();
 8005dae:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005db0:	6803      	ldr	r3, [r0, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	4798      	blx	r3
}
 8005db6:	bd38      	pop	{r3, r4, r5, pc}

08005db8 <_ZN19XFDispatcherDefault7executeEPKv>:
{
 8005db8:	b510      	push	{r4, lr}
 8005dba:	4604      	mov	r4, r0
 8005dbc:	e003      	b.n	8005dc6 <_ZN19XFDispatcherDefault7executeEPKv+0xe>
		executeOnce();  // Dispatch next event
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	4798      	blx	r3
	while(_bExecuting)
 8005dc6:	7923      	ldrb	r3, [r4, #4]
 8005dc8:	b14b      	cbz	r3, 8005dde <_ZN19XFDispatcherDefault7executeEPKv+0x26>
		while (_events.empty() && _bExecuting)
 8005dca:	f104 0008 	add.w	r0, r4, #8
 8005dce:	f000 fab9 	bl	8006344 <_ZNK19XFEventQueueDefault5emptyEv>
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	d0f3      	beq.n	8005dbe <_ZN19XFDispatcherDefault7executeEPKv+0x6>
 8005dd6:	7923      	ldrb	r3, [r4, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d0f0      	beq.n	8005dbe <_ZN19XFDispatcherDefault7executeEPKv+0x6>
 8005ddc:	e7f5      	b.n	8005dca <_ZN19XFDispatcherDefault7executeEPKv+0x12>
}
 8005dde:	2000      	movs	r0, #0
 8005de0:	bd10      	pop	{r4, pc}

08005de2 <_ZN19XFDispatcherDefault11executeOnceEv>:
{
 8005de2:	b570      	push	{r4, r5, r6, lr}
 8005de4:	4604      	mov	r4, r0
    if (!_events.empty() and _bExecuting)
 8005de6:	f100 0508 	add.w	r5, r0, #8
 8005dea:	4628      	mov	r0, r5
 8005dec:	f000 faaa 	bl	8006344 <_ZNK19XFEventQueueDefault5emptyEv>
 8005df0:	bb20      	cbnz	r0, 8005e3c <_ZN19XFDispatcherDefault11executeOnceEv+0x5a>
 8005df2:	7923      	ldrb	r3, [r4, #4]
 8005df4:	b313      	cbz	r3, 8005e3c <_ZN19XFDispatcherDefault11executeOnceEv+0x5a>
        _pMutex->lock();
 8005df6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005df8:	6803      	ldr	r3, [r0, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	4798      	blx	r3
        	pEvent = _events.front(); _events.pop();
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f000 fc20 	bl	8006644 <_ZN19XFEventQueueDefault5frontEv>
 8005e04:	4606      	mov	r6, r0
 8005e06:	4628      	mov	r0, r5
 8005e08:	f000 fc29 	bl	800665e <_ZN19XFEventQueueDefault3popEv>
    	_pMutex->unlock();
 8005e0c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005e0e:	6803      	ldr	r3, [r0, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	4798      	blx	r3
        if (pEvent)
 8005e14:	b196      	cbz	r6, 8005e3c <_ZN19XFDispatcherDefault11executeOnceEv+0x5a>
            dispatchEvent(pEvent);
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	4798      	blx	r3
    inline XFEventType getEventType() const { return eventType_; }
 8005e20:	f996 3004 	ldrsb.w	r3, [r6, #4]
            if (pEvent->getEventType() == XFEvent::Terminate)
 8005e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e28:	d00a      	beq.n	8005e40 <_ZN19XFDispatcherDefault11executeOnceEv+0x5e>
            if (pEvent->deleteAfterConsume())
 8005e2a:	6833      	ldr	r3, [r6, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	4630      	mov	r0, r6
 8005e30:	4798      	blx	r3
 8005e32:	b118      	cbz	r0, 8005e3c <_ZN19XFDispatcherDefault11executeOnceEv+0x5a>
                delete pEvent;
 8005e34:	6833      	ldr	r3, [r6, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	4630      	mov	r0, r6
 8005e3a:	4798      	blx	r3
}
 8005e3c:	7920      	ldrb	r0, [r4, #4]
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}
                _bExecuting = false;
 8005e40:	2300      	movs	r3, #0
 8005e42:	7123      	strb	r3, [r4, #4]
 8005e44:	e7f1      	b.n	8005e2a <_ZN19XFDispatcherDefault11executeOnceEv+0x48>

08005e46 <__tcf_0>:
}

//static
interface::XFResourceFactory * XFResourceFactoryDefault::getInstance()
{
    static XFResourceFactoryDefault theResourceFactory;
 8005e46:	4770      	bx	lr

08005e48 <_ZN24XFResourceFactoryDefault16createDispatcherEv>:

	return &mainDispatcher;
}

interface::XFDispatcher * XFResourceFactoryDefault::createDispatcher()
{
 8005e48:	b508      	push	{r3, lr}
	// Default implementation cannot create new dispatcher. Return the default dispatcher
	return getDefaultDispatcher();
 8005e4a:	6803      	ldr	r3, [r0, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4798      	blx	r3
}
 8005e50:	bd08      	pop	{r3, pc}

08005e52 <_ZN24XFResourceFactoryDefault12createThreadEPN9interface26XFThreadEntryPointProviderEMS1_FvPKvEPKcm>:

interface::XFThread * XFResourceFactoryDefault::createThread(interface::XFThreadEntryPointProvider * pProvider,
												  	  	     interface::XFThread::EntryMethodBody entryMethod,
														     const char * threadName,
														     const uint32_t stackSize /* = 0 */)
{
 8005e52:	b082      	sub	sp, #8
 8005e54:	a902      	add	r1, sp, #8
 8005e56:	e901 000c 	stmdb	r1, {r2, r3}
	// Default implementation cannot create threads (no underlying OS present)
	return nullptr;
}
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	b002      	add	sp, #8
 8005e5e:	4770      	bx	lr

08005e60 <_ZN24XFResourceFactoryDefaultD1Ev>:
 * @brief Default implementation of the XF resource factory.
 */
class XFResourceFactoryDefault : public interface::XFResourceFactory
{
public:
	virtual ~XFResourceFactoryDefault() = default;
 8005e60:	4770      	bx	lr

08005e62 <_ZN24XFResourceFactoryDefaultD0Ev>:
 8005e62:	b510      	push	{r4, lr}
 8005e64:	4604      	mov	r4, r0
 8005e66:	2104      	movs	r1, #4
 8005e68:	f005 fad2 	bl	800b410 <_ZdlPvj>
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	bd10      	pop	{r4, pc}

08005e70 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv>:
	static XFDispatcherDefault mainDispatcher;
 8005e70:	4b0d      	ldr	r3, [pc, #52]	; (8005ea8 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x38>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	f3bf 8f5b 	dmb	ish
 8005e78:	f013 0f01 	tst.w	r3, #1
 8005e7c:	d001      	beq.n	8005e82 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x12>
}
 8005e7e:	480b      	ldr	r0, [pc, #44]	; (8005eac <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x3c>)
 8005e80:	4770      	bx	lr
{
 8005e82:	b510      	push	{r4, lr}
	static XFDispatcherDefault mainDispatcher;
 8005e84:	4808      	ldr	r0, [pc, #32]	; (8005ea8 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x38>)
 8005e86:	f005 fac5 	bl	800b414 <__cxa_guard_acquire>
 8005e8a:	b908      	cbnz	r0, 8005e90 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x20>
}
 8005e8c:	4807      	ldr	r0, [pc, #28]	; (8005eac <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x3c>)
 8005e8e:	bd10      	pop	{r4, pc}
	static XFDispatcherDefault mainDispatcher;
 8005e90:	4c05      	ldr	r4, [pc, #20]	; (8005ea8 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x38>)
 8005e92:	1d20      	adds	r0, r4, #4
 8005e94:	f7ff ff4a 	bl	8005d2c <_ZN19XFDispatcherDefaultC1Ev>
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f005 fac7 	bl	800b42c <__cxa_guard_release>
 8005e9e:	4804      	ldr	r0, [pc, #16]	; (8005eb0 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x40>)
 8005ea0:	f005 fd18 	bl	800b8d4 <atexit>
 8005ea4:	e7f2      	b.n	8005e8c <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x1c>
 8005ea6:	bf00      	nop
 8005ea8:	200010dc 	.word	0x200010dc
 8005eac:	200010e0 	.word	0x200010e0
 8005eb0:	08005f49 	.word	0x08005f49

08005eb4 <_ZN24XFResourceFactoryDefault11createMutexEv>:

interface::XFMutex * XFResourceFactoryDefault::createMutex()
{
	static XFMutexDefault mutex;
 8005eb4:	4b0e      	ldr	r3, [pc, #56]	; (8005ef0 <_ZN24XFResourceFactoryDefault11createMutexEv+0x3c>)
 8005eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005eba:	f3bf 8f5b 	dmb	ish
 8005ebe:	f013 0f01 	tst.w	r3, #1
 8005ec2:	d001      	beq.n	8005ec8 <_ZN24XFResourceFactoryDefault11createMutexEv+0x14>

	return &mutex;
}
 8005ec4:	480b      	ldr	r0, [pc, #44]	; (8005ef4 <_ZN24XFResourceFactoryDefault11createMutexEv+0x40>)
 8005ec6:	4770      	bx	lr
{
 8005ec8:	b510      	push	{r4, lr}
	static XFMutexDefault mutex;
 8005eca:	480b      	ldr	r0, [pc, #44]	; (8005ef8 <_ZN24XFResourceFactoryDefault11createMutexEv+0x44>)
 8005ecc:	f005 faa2 	bl	800b414 <__cxa_guard_acquire>
 8005ed0:	b908      	cbnz	r0, 8005ed6 <_ZN24XFResourceFactoryDefault11createMutexEv+0x22>
}
 8005ed2:	4808      	ldr	r0, [pc, #32]	; (8005ef4 <_ZN24XFResourceFactoryDefault11createMutexEv+0x40>)
 8005ed4:	bd10      	pop	{r4, pc}
	static XFMutexDefault mutex;
 8005ed6:	4c06      	ldr	r4, [pc, #24]	; (8005ef0 <_ZN24XFResourceFactoryDefault11createMutexEv+0x3c>)
 8005ed8:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8005edc:	f000 fbe8 	bl	80066b0 <_ZN14XFMutexDefaultC1Ev>
 8005ee0:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8005ee4:	f005 faa2 	bl	800b42c <__cxa_guard_release>
 8005ee8:	4804      	ldr	r0, [pc, #16]	; (8005efc <_ZN24XFResourceFactoryDefault11createMutexEv+0x48>)
 8005eea:	f005 fcf3 	bl	800b8d4 <atexit>
 8005eee:	e7f0      	b.n	8005ed2 <_ZN24XFResourceFactoryDefault11createMutexEv+0x1e>
 8005ef0:	200010dc 	.word	0x200010dc
 8005ef4:	20001120 	.word	0x20001120
 8005ef8:	2000111c 	.word	0x2000111c
 8005efc:	08005f59 	.word	0x08005f59

08005f00 <_ZN24XFResourceFactoryDefault11getInstanceEv>:
{
 8005f00:	b508      	push	{r3, lr}
    static XFResourceFactoryDefault theResourceFactory;
 8005f02:	4b0b      	ldr	r3, [pc, #44]	; (8005f30 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x30>)
 8005f04:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005f08:	f3bf 8f5b 	dmb	ish
 8005f0c:	f013 0f01 	tst.w	r3, #1
 8005f10:	d001      	beq.n	8005f16 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x16>
}
 8005f12:	4808      	ldr	r0, [pc, #32]	; (8005f34 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x34>)
 8005f14:	bd08      	pop	{r3, pc}
    static XFResourceFactoryDefault theResourceFactory;
 8005f16:	4808      	ldr	r0, [pc, #32]	; (8005f38 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x38>)
 8005f18:	f005 fa7c 	bl	800b414 <__cxa_guard_acquire>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d0f8      	beq.n	8005f12 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x12>
 8005f20:	4805      	ldr	r0, [pc, #20]	; (8005f38 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x38>)
 8005f22:	f005 fa83 	bl	800b42c <__cxa_guard_release>
 8005f26:	4805      	ldr	r0, [pc, #20]	; (8005f3c <_ZN24XFResourceFactoryDefault11getInstanceEv+0x3c>)
 8005f28:	f005 fcd4 	bl	800b8d4 <atexit>
 8005f2c:	e7f1      	b.n	8005f12 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x12>
 8005f2e:	bf00      	nop
 8005f30:	200010dc 	.word	0x200010dc
 8005f34:	20000038 	.word	0x20000038
 8005f38:	20001124 	.word	0x20001124
 8005f3c:	08005e47 	.word	0x08005e47

08005f40 <_ZN9interface17XFResourceFactory11getInstanceEv>:
{
 8005f40:	b508      	push	{r3, lr}
	return XFResourceFactoryDefault::getInstance();
 8005f42:	f7ff ffdd 	bl	8005f00 <_ZN24XFResourceFactoryDefault11getInstanceEv>
}
 8005f46:	bd08      	pop	{r3, pc}

08005f48 <__tcf_1>:
	static XFDispatcherDefault mainDispatcher;
 8005f48:	b508      	push	{r3, lr}
 8005f4a:	4802      	ldr	r0, [pc, #8]	; (8005f54 <__tcf_1+0xc>)
 8005f4c:	f7ff ff0c 	bl	8005d68 <_ZN19XFDispatcherDefaultD1Ev>
 8005f50:	bd08      	pop	{r3, pc}
 8005f52:	bf00      	nop
 8005f54:	200010e0 	.word	0x200010e0

08005f58 <__tcf_2>:
	static XFMutexDefault mutex;
 8005f58:	b508      	push	{r3, lr}
 8005f5a:	4802      	ldr	r0, [pc, #8]	; (8005f64 <__tcf_2+0xc>)
 8005f5c:	f000 fb95 	bl	800668a <_ZN14XFMutexDefaultD1Ev>
 8005f60:	bd08      	pop	{r3, pc}
 8005f62:	bf00      	nop
 8005f64:	20001120 	.word	0x20001120

08005f68 <_ZN9interface16XFTimeoutManager10initializeEl>:
     * Sets the time interval in milliseconds in which the timeout manager
     * should handle the timeouts.
     */
    virtual void initialize(int32_t tickInterval)
    {
        tickInterval_ = tickInterval;
 8005f68:	6041      	str	r1, [r0, #4]
    }
 8005f6a:	4770      	bx	lr

08005f6c <_ZNK9interface16XFTimeoutManager15getTickIntervalEv>:
     * @brief Returns tick interval in milliseconds.
     */
    virtual int32_t getTickInterval() const
    {
        return tickInterval_;
    }
 8005f6c:	6840      	ldr	r0, [r0, #4]
 8005f6e:	4770      	bx	lr

08005f70 <_ZN23XFTimeoutManagerDefault5startEv>:
XFTimeoutManagerDefault::~XFTimeoutManagerDefault()
{
}

void XFTimeoutManagerDefault::start()
{
 8005f70:	b508      	push	{r3, lr}
    // Check tickInterval. Set default value if not set
    if (tickInterval_ == 0)
 8005f72:	6843      	ldr	r3, [r0, #4]
 8005f74:	b90b      	cbnz	r3, 8005f7a <_ZN23XFTimeoutManagerDefault5startEv+0xa>
    {
        tickInterval_ = 10;
 8005f76:	230a      	movs	r3, #10
 8005f78:	6043      	str	r3, [r0, #4]
    }

    XF_startTimeoutManagerTimer(uint32_t(tickInterval_));
 8005f7a:	6840      	ldr	r0, [r0, #4]
 8005f7c:	f000 fba7 	bl	80066ce <XF_startTimeoutManagerTimer>
}
 8005f80:	bd08      	pop	{r3, pc}

08005f82 <_ZN23XFTimeoutManagerDefault15scheduleTimeoutEllPN9interface10XFReactiveE>:

void XFTimeoutManagerDefault::scheduleTimeout(int32_t timeoutId, int32_t interval, interface::XFReactive * pReactive)
{
 8005f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f86:	4605      	mov	r5, r0
 8005f88:	460e      	mov	r6, r1
 8005f8a:	4617      	mov	r7, r2
 8005f8c:	4698      	mov	r8, r3
    XFTimeout * pTimeout = new XFTimeout(timeoutId, interval, pReactive);
 8005f8e:	2018      	movs	r0, #24
 8005f90:	f005 fa4f 	bl	800b432 <_Znwj>
 8005f94:	4604      	mov	r4, r0
 8005f96:	4643      	mov	r3, r8
 8005f98:	463a      	mov	r2, r7
 8005f9a:	4631      	mov	r1, r6
 8005f9c:	f7ff fe66 	bl	8005c6c <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>

    if (pTimeout)
 8005fa0:	b124      	cbz	r4, 8005fac <_ZN23XFTimeoutManagerDefault15scheduleTimeoutEllPN9interface10XFReactiveE+0x2a>
    {
        addTimeout(pTimeout);
 8005fa2:	682b      	ldr	r3, [r5, #0]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	4628      	mov	r0, r5
 8005faa:	4798      	blx	r3
    }
}
 8005fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005fb0 <_ZN23XFTimeoutManagerDefaultC1Ev>:
XFTimeoutManagerDefault::XFTimeoutManagerDefault() :
 8005fb0:	b510      	push	{r4, lr}
 8005fb2:	4604      	mov	r4, r0
     */
    virtual void tick() = 0;

protected:
    XFTimeoutManager() :
        tickInterval_(0)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	6042      	str	r2, [r0, #4]
    pMutex_(nullptr)
 8005fb8:	4603      	mov	r3, r0
 8005fba:	4909      	ldr	r1, [pc, #36]	; (8005fe0 <_ZN23XFTimeoutManagerDefaultC1Ev+0x30>)
 8005fbc:	f843 1b08 	str.w	r1, [r3], #8
	this->_M_next = this->_M_prev = this;
 8005fc0:	60c3      	str	r3, [r0, #12]
 8005fc2:	6083      	str	r3, [r0, #8]
	this->_M_size = 0;
 8005fc4:	6102      	str	r2, [r0, #16]
 8005fc6:	6142      	str	r2, [r0, #20]
    pMutex_ = XFMutex::create();
 8005fc8:	f000 fb78 	bl	80066bc <_ZN9interface7XFMutex6createEv>
 8005fcc:	6160      	str	r0, [r4, #20]
    assert(pMutex_);
 8005fce:	b108      	cbz	r0, 8005fd4 <_ZN23XFTimeoutManagerDefaultC1Ev+0x24>
}
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	bd10      	pop	{r4, pc}
    assert(pMutex_);
 8005fd4:	4b03      	ldr	r3, [pc, #12]	; (8005fe4 <_ZN23XFTimeoutManagerDefaultC1Ev+0x34>)
 8005fd6:	4a04      	ldr	r2, [pc, #16]	; (8005fe8 <_ZN23XFTimeoutManagerDefaultC1Ev+0x38>)
 8005fd8:	211d      	movs	r1, #29
 8005fda:	4804      	ldr	r0, [pc, #16]	; (8005fec <_ZN23XFTimeoutManagerDefaultC1Ev+0x3c>)
 8005fdc:	f005 fc5c 	bl	800b898 <__assert_func>
 8005fe0:	0800d1d8 	.word	0x0800d1d8
 8005fe4:	0800db7c 	.word	0x0800db7c
 8005fe8:	0800db84 	.word	0x0800db84
 8005fec:	0800dbb8 	.word	0x0800dbb8

08005ff0 <_ZN23XFTimeoutManagerDefault11getInstanceEv>:
    static XFTimeoutManagerDefault timeoutManager;
 8005ff0:	4b0d      	ldr	r3, [pc, #52]	; (8006028 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x38>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	f3bf 8f5b 	dmb	ish
 8005ff8:	f013 0f01 	tst.w	r3, #1
 8005ffc:	d001      	beq.n	8006002 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x12>
}
 8005ffe:	480b      	ldr	r0, [pc, #44]	; (800602c <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x3c>)
 8006000:	4770      	bx	lr
{
 8006002:	b510      	push	{r4, lr}
    static XFTimeoutManagerDefault timeoutManager;
 8006004:	4808      	ldr	r0, [pc, #32]	; (8006028 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x38>)
 8006006:	f005 fa05 	bl	800b414 <__cxa_guard_acquire>
 800600a:	b908      	cbnz	r0, 8006010 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x20>
}
 800600c:	4807      	ldr	r0, [pc, #28]	; (800602c <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x3c>)
 800600e:	bd10      	pop	{r4, pc}
    static XFTimeoutManagerDefault timeoutManager;
 8006010:	4c05      	ldr	r4, [pc, #20]	; (8006028 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x38>)
 8006012:	1d20      	adds	r0, r4, #4
 8006014:	f7ff ffcc 	bl	8005fb0 <_ZN23XFTimeoutManagerDefaultC1Ev>
 8006018:	4620      	mov	r0, r4
 800601a:	f005 fa07 	bl	800b42c <__cxa_guard_release>
 800601e:	4804      	ldr	r0, [pc, #16]	; (8006030 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x40>)
 8006020:	f005 fc58 	bl	800b8d4 <atexit>
 8006024:	e7f2      	b.n	800600c <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x1c>
 8006026:	bf00      	nop
 8006028:	20001128 	.word	0x20001128
 800602c:	2000112c 	.word	0x2000112c
 8006030:	0800628d 	.word	0x0800628d

08006034 <_ZN9interface16XFTimeoutManager11getInstanceEv>:
{
 8006034:	b508      	push	{r3, lr}
    return XFTimeoutManagerDefault::getInstance();
 8006036:	f7ff ffdb 	bl	8005ff0 <_ZN23XFTimeoutManagerDefault11getInstanceEv>
}
 800603a:	bd08      	pop	{r3, pc}

0800603c <_ZN23XFTimeoutManagerDefault13returnTimeoutEP9XFTimeout>:
        timeouts_.push_front(pNewTimeout);
    }
}

void XFTimeoutManagerDefault::returnTimeout(XFTimeout * pTimeout)
{
 800603c:	b508      	push	{r3, lr}
    inline interface::XFReactive * getBehavior() const { return pBehavior_; }
 800603e:	68c8      	ldr	r0, [r1, #12]
    pTimeout->getBehavior()->pushEvent(pTimeout);
 8006040:	6803      	ldr	r3, [r0, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	4798      	blx	r3
}
 8006048:	bd08      	pop	{r3, pc}

0800604a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>:
    list<_Tp, _Alloc>::
 800604a:	b538      	push	{r3, r4, r5, lr}
 800604c:	460c      	mov	r4, r1
      iterator __ret = iterator(__position._M_node->_M_next);
 800604e:	680d      	ldr	r5, [r1, #0]
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8006050:	6883      	ldr	r3, [r0, #8]
 8006052:	3b01      	subs	r3, #1
 8006054:	6083      	str	r3, [r0, #8]
	__position._M_node->_M_unhook();
 8006056:	4608      	mov	r0, r1
 8006058:	f005 fa06 	bl	800b468 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	::operator delete(__p);
 800605c:	4620      	mov	r0, r4
 800605e:	f005 f9d5 	bl	800b40c <_ZdlPv>
    }
 8006062:	4628      	mov	r0, r5
 8006064:	bd38      	pop	{r3, r4, r5, pc}
	...

08006068 <_ZN23XFTimeoutManagerDefault4tickEv>:
{
 8006068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606a:	4604      	mov	r4, r0
    assert(tickInterval_);      // Did you call start()?!
 800606c:	6845      	ldr	r5, [r0, #4]
 800606e:	b955      	cbnz	r5, 8006086 <_ZN23XFTimeoutManagerDefault4tickEv+0x1e>
 8006070:	4b23      	ldr	r3, [pc, #140]	; (8006100 <_ZN23XFTimeoutManagerDefault4tickEv+0x98>)
 8006072:	4a24      	ldr	r2, [pc, #144]	; (8006104 <_ZN23XFTimeoutManagerDefault4tickEv+0x9c>)
 8006074:	2161      	movs	r1, #97	; 0x61
 8006076:	4824      	ldr	r0, [pc, #144]	; (8006108 <_ZN23XFTimeoutManagerDefault4tickEv+0xa0>)
 8006078:	f005 fc0e 	bl	800b898 <__assert_func>
        pMutex_->unlock();
 800607c:	6960      	ldr	r0, [r4, #20]
 800607e:	6803      	ldr	r3, [r0, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	4798      	blx	r3
            intervalToSubtract = 0;
 8006084:	2500      	movs	r5, #0
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8006086:	4626      	mov	r6, r4
 8006088:	f856 3f08 	ldr.w	r3, [r6, #8]!
    while (!timeouts_.empty())
 800608c:	429e      	cmp	r6, r3
 800608e:	d036      	beq.n	80060fe <_ZN23XFTimeoutManagerDefault4tickEv+0x96>
        pMutex_->lock();
 8006090:	6960      	ldr	r0, [r4, #20]
 8006092:	6803      	ldr	r3, [r0, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	4798      	blx	r3
      { return iterator(this->_M_impl._M_node._M_next); }
 8006098:	68a3      	ldr	r3, [r4, #8]
            XFTimeout * pFirstTimeout = timeouts_.front();
 800609a:	6899      	ldr	r1, [r3, #8]

    bool deleteAfterConsume() const override;                                                       ///< Tells the dispatcher if the event must be deleted or not.

    inline void setRelTicks(int relTicks) { relTicks_ = relTicks; }                                 ///< Sets remaining ticks.
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
    inline void substractFromRelTicks(int ticksToSubstract) { relTicks_ -= ticksToSubstract; }      ///< Substracts `ticksToSubstract` from remaining ticks.
 800609c:	694b      	ldr	r3, [r1, #20]
 800609e:	1b5b      	subs	r3, r3, r5
 80060a0:	614b      	str	r3, [r1, #20]
            if (pFirstTimeout->getRelTicks() <= 0)
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	dc27      	bgt.n	80060f6 <_ZN23XFTimeoutManagerDefault4tickEv+0x8e>
      size_t _M_get_size() const { return _M_impl._M_node._M_size; }
 80060a6:	6922      	ldr	r2, [r4, #16]
                if (timeouts_.size() > 1)
 80060a8:	2a01      	cmp	r2, #1
 80060aa:	d905      	bls.n	80060b8 <_ZN23XFTimeoutManagerDefault4tickEv+0x50>
      { return iterator(this->_M_impl._M_node._M_next); }
 80060ac:	68a2      	ldr	r2, [r4, #8]
	_M_node = _M_node->_M_next;
 80060ae:	6812      	ldr	r2, [r2, #0]
                    (*i)->substractFromRelTicks(pFirstTimeout->getRelTicks());
 80060b0:	6890      	ldr	r0, [r2, #8]
 80060b2:	6942      	ldr	r2, [r0, #20]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	6143      	str	r3, [r0, #20]
                returnTimeout(pFirstTimeout);
 80060b8:	4620      	mov	r0, r4
 80060ba:	f7ff ffbf 	bl	800603c <_ZN23XFTimeoutManagerDefault13returnTimeoutEP9XFTimeout>
                timeouts_.pop_front();
 80060be:	f104 0708 	add.w	r7, r4, #8
      { return iterator(this->_M_impl._M_node._M_next); }
 80060c2:	68a5      	ldr	r5, [r4, #8]
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	60bb      	str	r3, [r7, #8]
	__position._M_node->_M_unhook();
 80060ca:	4628      	mov	r0, r5
 80060cc:	f005 f9cc 	bl	800b468 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
 80060d0:	4628      	mov	r0, r5
 80060d2:	f005 f99b 	bl	800b40c <_ZdlPv>
                for (TimeoutList::iterator it = timeouts_.begin(); it != timeouts_.end(); /*Do not increment here!*/)
 80060d6:	68a0      	ldr	r0, [r4, #8]
      { return __x._M_node != __y._M_node; }
 80060d8:	4605      	mov	r5, r0
 80060da:	4286      	cmp	r6, r0
 80060dc:	d0ce      	beq.n	800607c <_ZN23XFTimeoutManagerDefault4tickEv+0x14>
                    if ((*it)->getRelTicks() == 0)
 80060de:	6881      	ldr	r1, [r0, #8]
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
 80060e0:	694b      	ldr	r3, [r1, #20]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1ca      	bne.n	800607c <_ZN23XFTimeoutManagerDefault4tickEv+0x14>
                        returnTimeout(*it);			// Return them true
 80060e6:	4620      	mov	r0, r4
 80060e8:	f7ff ffa8 	bl	800603c <_ZN23XFTimeoutManagerDefault13returnTimeoutEP9XFTimeout>
                        it = timeouts_.erase(it);	// Remove timeout and adjust iterator to next element
 80060ec:	4629      	mov	r1, r5
 80060ee:	4638      	mov	r0, r7
 80060f0:	f7ff ffab 	bl	800604a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
                for (TimeoutList::iterator it = timeouts_.begin(); it != timeouts_.end(); /*Do not increment here!*/)
 80060f4:	e7f0      	b.n	80060d8 <_ZN23XFTimeoutManagerDefault4tickEv+0x70>
                pMutex_->unlock();
 80060f6:	6960      	ldr	r0, [r4, #20]
 80060f8:	6803      	ldr	r3, [r0, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	4798      	blx	r3
}
 80060fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006100:	0800dc08 	.word	0x0800dc08
 8006104:	0800dc18 	.word	0x0800dc18
 8006108:	0800dbb8 	.word	0x0800dbb8

0800610c <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE>:
{
 800610c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006110:	b086      	sub	sp, #24
 8006112:	4680      	mov	r8, r0
 8006114:	4613      	mov	r3, r2
    const XFTimeout timeout(timeoutId, 0, pReactive);
 8006116:	2200      	movs	r2, #0
 8006118:	4668      	mov	r0, sp
 800611a:	f7ff fda7 	bl	8005c6c <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>
    pMutex_->lock();
 800611e:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8006122:	6803      	ldr	r3, [r0, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	4798      	blx	r3
        for (TimeoutList::iterator i = timeouts_.begin();
 8006128:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800612c:	e000      	b.n	8006130 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x24>
	_M_node = _M_node->_M_next;
 800612e:	6824      	ldr	r4, [r4, #0]
      { return iterator(&this->_M_impl._M_node); }
 8006130:	f108 0608 	add.w	r6, r8, #8
      { return __x._M_node != __y._M_node; }
 8006134:	4627      	mov	r7, r4
             i != timeouts_.end(); /*Do not increment here!*/)
 8006136:	42a6      	cmp	r6, r4
 8006138:	d01b      	beq.n	8006172 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x66>
            pTimeout = *i;
 800613a:	68a5      	ldr	r5, [r4, #8]
            if (*pTimeout == timeout)
 800613c:	4669      	mov	r1, sp
 800613e:	4628      	mov	r0, r5
 8006140:	f7ff fda2 	bl	8005c88 <_ZNK9XFTimeouteqERKS_>
 8006144:	2800      	cmp	r0, #0
 8006146:	d0f2      	beq.n	800612e <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x22>
	_M_node = _M_node->_M_next;
 8006148:	6823      	ldr	r3, [r4, #0]
                if (++next != timeouts_.end())
 800614a:	429e      	cmp	r6, r3
 800614c:	d004      	beq.n	8006158 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x4c>
                    (*next)->addToRelTicks(pTimeout->getRelTicks());
 800614e:	689a      	ldr	r2, [r3, #8]
 8006150:	6969      	ldr	r1, [r5, #20]
    inline void addToRelTicks(int ticksToAdd) { relTicks_ += ticksToAdd; }                          ///< Adds `ticksToAdd` to remaining ticks.
 8006152:	6953      	ldr	r3, [r2, #20]
 8006154:	440b      	add	r3, r1
 8006156:	6153      	str	r3, [r2, #20]
                i = timeouts_.erase(i);
 8006158:	4639      	mov	r1, r7
 800615a:	f108 0008 	add.w	r0, r8, #8
 800615e:	f7ff ff74 	bl	800604a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
 8006162:	4604      	mov	r4, r0
                delete pTimeout;
 8006164:	2d00      	cmp	r5, #0
 8006166:	d0e3      	beq.n	8006130 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x24>
 8006168:	682b      	ldr	r3, [r5, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	4628      	mov	r0, r5
 800616e:	4798      	blx	r3
 8006170:	e7de      	b.n	8006130 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x24>
    pMutex_->unlock();
 8006172:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8006176:	6803      	ldr	r3, [r0, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	4798      	blx	r3
}
 800617c:	b006      	add	sp, #24
 800617e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006182 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>:
    list<_Tp, _Alloc>::
 8006182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006184:	4605      	mov	r5, r0
 8006186:	460e      	mov	r6, r1
 8006188:	4617      	mov	r7, r2
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800618a:	200c      	movs	r0, #12
 800618c:	f005 f951 	bl	800b432 <_Znwj>
 8006190:	4604      	mov	r4, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	6083      	str	r3, [r0, #8]
      __tmp->_M_hook(__position._M_const_cast()._M_node);
 8006196:	4631      	mov	r1, r6
 8006198:	f005 f95f 	bl	800b45a <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 800619c:	68ab      	ldr	r3, [r5, #8]
 800619e:	3301      	adds	r3, #1
 80061a0:	60ab      	str	r3, [r5, #8]
    }
 80061a2:	4620      	mov	r0, r4
 80061a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080061a6 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout>:
{
 80061a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061a8:	b083      	sub	sp, #12
 80061aa:	4606      	mov	r6, r0
 80061ac:	9101      	str	r1, [sp, #4]
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 80061ae:	4605      	mov	r5, r0
 80061b0:	f855 4f08 	ldr.w	r4, [r5, #8]!
    if (!timeouts_.empty())
 80061b4:	42a5      	cmp	r5, r4
 80061b6:	d045      	beq.n	8006244 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x9e>
        pMutex_->lock();
 80061b8:	6940      	ldr	r0, [r0, #20]
 80061ba:	6803      	ldr	r3, [r0, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	4798      	blx	r3
            TimeoutList::iterator i = timeouts_.begin();
 80061c0:	68b3      	ldr	r3, [r6, #8]
      { return __x._M_node != __y._M_node; }
 80061c2:	461c      	mov	r4, r3
            while (i != timeouts_.end() &&
 80061c4:	42ab      	cmp	r3, r5
 80061c6:	d009      	beq.n	80061dc <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x36>
                   (*i)->getRelTicks() < pNewTimeout->getRelTicks())
 80061c8:	689b      	ldr	r3, [r3, #8]
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
 80061ca:	6959      	ldr	r1, [r3, #20]
 80061cc:	9a01      	ldr	r2, [sp, #4]
 80061ce:	6953      	ldr	r3, [r2, #20]
            while (i != timeouts_.end() &&
 80061d0:	4299      	cmp	r1, r3
 80061d2:	da03      	bge.n	80061dc <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x36>
    inline void substractFromRelTicks(int ticksToSubstract) { relTicks_ -= ticksToSubstract; }      ///< Substracts `ticksToSubstract` from remaining ticks.
 80061d4:	1a5b      	subs	r3, r3, r1
 80061d6:	6153      	str	r3, [r2, #20]
	_M_node = _M_node->_M_next;
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	e7f2      	b.n	80061c2 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x1c>
            if (i != timeouts_.end())
 80061dc:	42ac      	cmp	r4, r5
 80061de:	d02a      	beq.n	8006236 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x90>
                if ((*i)->getRelTicks() != pNewTimeout->getRelTicks())
 80061e0:	68a3      	ldr	r3, [r4, #8]
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
 80061e2:	695f      	ldr	r7, [r3, #20]
 80061e4:	9b01      	ldr	r3, [sp, #4]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	42bb      	cmp	r3, r7
 80061ea:	d108      	bne.n	80061fe <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x58>
 80061ec:	6823      	ldr	r3, [r4, #0]
      { return __x._M_node != __y._M_node; }
 80061ee:	4619      	mov	r1, r3
                    while(i != timeouts_.end() && (*i)->getRelTicks() == 0)
 80061f0:	429d      	cmp	r5, r3
 80061f2:	d011      	beq.n	8006218 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x72>
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	b973      	cbnz	r3, 8006218 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x72>
	_M_node = _M_node->_M_next;
 80061fa:	680b      	ldr	r3, [r1, #0]
	return __tmp;
 80061fc:	e7f7      	b.n	80061ee <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x48>
                    timeouts_.insert(i, pNewTimeout);
 80061fe:	aa01      	add	r2, sp, #4
 8006200:	4621      	mov	r1, r4
 8006202:	f106 0008 	add.w	r0, r6, #8
 8006206:	f7ff ffbc 	bl	8006182 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
                    (*i)->substractFromRelTicks(pNewTimeout->getRelTicks());
 800620a:	68a2      	ldr	r2, [r4, #8]
 800620c:	9b01      	ldr	r3, [sp, #4]
 800620e:	6959      	ldr	r1, [r3, #20]
    inline void substractFromRelTicks(int ticksToSubstract) { relTicks_ -= ticksToSubstract; }      ///< Substracts `ticksToSubstract` from remaining ticks.
 8006210:	6953      	ldr	r3, [r2, #20]
 8006212:	1a5b      	subs	r3, r3, r1
 8006214:	6153      	str	r3, [r2, #20]
 8006216:	e008      	b.n	800622a <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x84>
                    timeouts_.insert(i, pNewTimeout);
 8006218:	aa01      	add	r2, sp, #4
 800621a:	f106 0008 	add.w	r0, r6, #8
 800621e:	f7ff ffb0 	bl	8006182 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
                    pNewTimeout->substractFromRelTicks(relTicks);
 8006222:	9a01      	ldr	r2, [sp, #4]
 8006224:	6953      	ldr	r3, [r2, #20]
 8006226:	1bdf      	subs	r7, r3, r7
 8006228:	6157      	str	r7, [r2, #20]
        pMutex_->unlock();
 800622a:	6970      	ldr	r0, [r6, #20]
 800622c:	6803      	ldr	r3, [r0, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	4798      	blx	r3
}
 8006232:	b003      	add	sp, #12
 8006234:	bdf0      	pop	{r4, r5, r6, r7, pc}
                timeouts_.insert(timeouts_.end(), pNewTimeout);
 8006236:	aa01      	add	r2, sp, #4
 8006238:	4629      	mov	r1, r5
 800623a:	f106 0008 	add.w	r0, r6, #8
 800623e:	f7ff ffa0 	bl	8006182 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
 8006242:	e7f2      	b.n	800622a <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x84>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006244:	200c      	movs	r0, #12
 8006246:	f005 f8f4 	bl	800b432 <_Znwj>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800624a:	9b01      	ldr	r3, [sp, #4]
 800624c:	6083      	str	r3, [r0, #8]
	 __tmp->_M_hook(__position._M_node);
 800624e:	4621      	mov	r1, r4
 8006250:	f005 f903 	bl	800b45a <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8006254:	6933      	ldr	r3, [r6, #16]
 8006256:	3301      	adds	r3, #1
 8006258:	6133      	str	r3, [r6, #16]
}
 800625a:	e7ea      	b.n	8006232 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x8c>

0800625c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 800625c:	b538      	push	{r3, r4, r5, lr}
 800625e:	4605      	mov	r5, r0
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8006260:	6800      	ldr	r0, [r0, #0]
      while (__cur != &_M_impl._M_node)
 8006262:	4285      	cmp	r5, r0
 8006264:	d004      	beq.n	8006270 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0x14>
	  __cur = __tmp->_M_next;
 8006266:	6804      	ldr	r4, [r0, #0]
	::operator delete(__p);
 8006268:	f005 f8d0 	bl	800b40c <_ZdlPv>
 800626c:	4620      	mov	r0, r4
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 800626e:	e7f8      	b.n	8006262 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0x6>
    }
 8006270:	bd38      	pop	{r3, r4, r5, pc}
	...

08006274 <_ZN23XFTimeoutManagerDefaultD1Ev>:
XFTimeoutManagerDefault::~XFTimeoutManagerDefault()
 8006274:	b510      	push	{r4, lr}
 8006276:	4604      	mov	r4, r0
 8006278:	4b03      	ldr	r3, [pc, #12]	; (8006288 <_ZN23XFTimeoutManagerDefaultD1Ev+0x14>)
 800627a:	f840 3b08 	str.w	r3, [r0], #8
      { _M_clear(); }
 800627e:	f7ff ffed 	bl	800625c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>
}
 8006282:	4620      	mov	r0, r4
 8006284:	bd10      	pop	{r4, pc}
 8006286:	bf00      	nop
 8006288:	0800d1d8 	.word	0x0800d1d8

0800628c <__tcf_0>:
    static XFTimeoutManagerDefault timeoutManager;
 800628c:	b508      	push	{r3, lr}
 800628e:	4802      	ldr	r0, [pc, #8]	; (8006298 <__tcf_0+0xc>)
 8006290:	f7ff fff0 	bl	8006274 <_ZN23XFTimeoutManagerDefaultD1Ev>
 8006294:	bd08      	pop	{r3, pc}
 8006296:	bf00      	nop
 8006298:	2000112c 	.word	0x2000112c

0800629c <_ZN23XFTimeoutManagerDefaultD0Ev>:
XFTimeoutManagerDefault::~XFTimeoutManagerDefault()
 800629c:	b510      	push	{r4, lr}
 800629e:	4604      	mov	r4, r0
}
 80062a0:	f7ff ffe8 	bl	8006274 <_ZN23XFTimeoutManagerDefaultD1Ev>
 80062a4:	2118      	movs	r1, #24
 80062a6:	4620      	mov	r0, r4
 80062a8:	f005 f8b2 	bl	800b410 <_ZdlPvj>
 80062ac:	4620      	mov	r0, r4
 80062ae:	bd10      	pop	{r4, pc}

080062b0 <_ZN2XF10initializeEiiPPc>:
    XF::execOnce();
}

void XF::initialize(int timeInterval /* = 10 */, int argc /* = 0 */, char * argv[] /* = nullptr */)
{
    if (!isInitialized_)
 80062b0:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <_ZN2XF10initializeEiiPPc+0x20>)
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	b103      	cbz	r3, 80062b8 <_ZN2XF10initializeEiiPPc+0x8>
 80062b6:	4770      	bx	lr
{
 80062b8:	b510      	push	{r4, lr}
 80062ba:	4604      	mov	r4, r0
    {
        // Create and initialize TimeoutManager
        XFTimeoutManager::getInstance()->initialize(timeInterval);
 80062bc:	f7ff feba 	bl	8006034 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 80062c0:	6803      	ldr	r3, [r0, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	4621      	mov	r1, r4
 80062c6:	4798      	blx	r3

        isInitialized_ = true;
 80062c8:	4b01      	ldr	r3, [pc, #4]	; (80062d0 <_ZN2XF10initializeEiiPPc+0x20>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	701a      	strb	r2, [r3, #0]
    }
}
 80062ce:	bd10      	pop	{r4, pc}
 80062d0:	20001144 	.word	0x20001144

080062d4 <XF_initialize>:
{
 80062d4:	b508      	push	{r3, lr}
    XF::initialize(timeInterval);
 80062d6:	2200      	movs	r2, #0
 80062d8:	4611      	mov	r1, r2
 80062da:	f7ff ffe9 	bl	80062b0 <_ZN2XF10initializeEiiPPc>
}
 80062de:	bd08      	pop	{r3, pc}

080062e0 <_ZN2XF4execEv>:

int XF::exec()
{
 80062e0:	b508      	push	{r3, lr}
	// Start timeout manager
	XFTimeoutManager::getInstance()->start();
 80062e2:	f7ff fea7 	bl	8006034 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 80062e6:	6803      	ldr	r3, [r0, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	4798      	blx	r3

	// Start default dispatcher
	XFResourceFactory::getInstance()->getDefaultDispatcher()->start();
 80062ec:	f7ff fe28 	bl	8005f40 <_ZN9interface17XFResourceFactory11getInstanceEv>
 80062f0:	6803      	ldr	r3, [r0, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4798      	blx	r3
 80062f6:	6803      	ldr	r3, [r0, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	4798      	blx	r3

	isRunning_ = true;     // From here the XF is running
 80062fc:	4b0b      	ldr	r3, [pc, #44]	; (800632c <_ZN2XF4execEv+0x4c>)
 80062fe:	2201      	movs	r2, #1
 8006300:	705a      	strb	r2, [r3, #1]

	// In case default dispatcher does not have a thread executing it,
	// call it with this thread
	if (!XFResourceFactory::getInstance()->getDefaultDispatcher()->isActive())
 8006302:	f7ff fe1d 	bl	8005f40 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8006306:	6803      	ldr	r3, [r0, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4798      	blx	r3
 800630c:	6803      	ldr	r3, [r0, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	4798      	blx	r3
 8006312:	b108      	cbz	r0, 8006318 <_ZN2XF4execEv+0x38>
	{
		XFResourceFactory::getInstance()->getDefaultDispatcher()->execute();
	}
    return 0;
}
 8006314:	2000      	movs	r0, #0
 8006316:	bd08      	pop	{r3, pc}
		XFResourceFactory::getInstance()->getDefaultDispatcher()->execute();
 8006318:	f7ff fe12 	bl	8005f40 <_ZN9interface17XFResourceFactory11getInstanceEv>
 800631c:	6803      	ldr	r3, [r0, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4798      	blx	r3
 8006322:	6803      	ldr	r3, [r0, #0]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	2100      	movs	r1, #0
 8006328:	4798      	blx	r3
 800632a:	e7f3      	b.n	8006314 <_ZN2XF4execEv+0x34>
 800632c:	20001144 	.word	0x20001144

08006330 <XF_exec>:
{
 8006330:	b508      	push	{r3, lr}
    XF::exec();
 8006332:	f7ff ffd5 	bl	80062e0 <_ZN2XF4execEv>
}
 8006336:	bd08      	pop	{r3, pc}

08006338 <_ZN2XF9isRunningEv>:
}

bool XF::isRunning()
{
    return isRunning_;
}
 8006338:	4b01      	ldr	r3, [pc, #4]	; (8006340 <_ZN2XF9isRunningEv+0x8>)
 800633a:	7858      	ldrb	r0, [r3, #1]
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	20001144 	.word	0x20001144

08006344 <_ZNK19XFEventQueueDefault5emptyEv>:
  // are in scope (for additional details, see libstdc++/3628)
  template<typename _Tp, typename _Ref, typename _Ptr>
    inline bool
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    { return __x._M_cur == __y._M_cur; }
 8006344:	6a03      	ldr	r3, [r0, #32]
 8006346:	6900      	ldr	r0, [r0, #16]
}

bool XFEventQueueDefault::empty() const
{
    return _queue.empty();
}
 8006348:	4298      	cmp	r0, r3
 800634a:	bf14      	ite	ne
 800634c:	2000      	movne	r0, #0
 800634e:	2001      	moveq	r0, #1
 8006350:	4770      	bx	lr

08006352 <_ZN19XFEventQueueDefault4pendEv>:
bool XFEventQueueDefault::pend()
{
    // Method cannot be used in an IDF! Waiting within
    // this method would block the whole XF
    return false;
}
 8006352:	2000      	movs	r0, #0
 8006354:	4770      	bx	lr

08006356 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_>:
	}
    }

  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
 8006356:	b538      	push	{r3, r4, r5, lr}
 8006358:	460c      	mov	r4, r1
 800635a:	4615      	mov	r5, r2
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800635c:	42ac      	cmp	r4, r5
 800635e:	d204      	bcs.n	800636a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x14>
 8006360:	f854 0b04 	ldr.w	r0, [r4], #4
 8006364:	f005 f852 	bl	800b40c <_ZdlPv>
 8006368:	e7f8      	b.n	800635c <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x6>
	_M_deallocate_node(*__n);
    }
 800636a:	bd38      	pop	{r3, r4, r5, pc}

0800636c <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800636c:	b510      	push	{r4, lr}
 800636e:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
 8006370:	6803      	ldr	r3, [r0, #0]
 8006372:	b13b      	cbz	r3, 8006384 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev+0x18>
			   this->_M_impl._M_finish._M_node + 1);
 8006374:	6a42      	ldr	r2, [r0, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8006376:	3204      	adds	r2, #4
 8006378:	6941      	ldr	r1, [r0, #20]
 800637a:	f7ff ffec 	bl	8006356 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_>
 800637e:	6820      	ldr	r0, [r4, #0]
 8006380:	f005 f844 	bl	800b40c <_ZdlPv>
    }
 8006384:	4620      	mov	r0, r4
 8006386:	bd10      	pop	{r4, pc}

08006388 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8006388:	b510      	push	{r4, lr}
 800638a:	4604      	mov	r4, r0
 800638c:	68c0      	ldr	r0, [r0, #12]
 800638e:	f005 f83d 	bl	800b40c <_ZdlPv>
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8006392:	6963      	ldr	r3, [r4, #20]
 8006394:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
 8006396:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800639c:	f503 7200 	add.w	r2, r3, #512	; 0x200
 80063a0:	6122      	str	r2, [r4, #16]
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80063a2:	60a3      	str	r3, [r4, #8]
    }
 80063a4:	bd10      	pop	{r4, pc}

080063a6 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_>:
    _Deque_base<_Tp, _Alloc>::
 80063a6:	b538      	push	{r3, r4, r5, lr}
 80063a8:	460c      	mov	r4, r1
 80063aa:	4615      	mov	r5, r2
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80063ac:	42ac      	cmp	r4, r5
 80063ae:	d206      	bcs.n	80063be <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_+0x18>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80063b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80063b4:	f005 f83d 	bl	800b432 <_Znwj>
	    *__cur = this->_M_allocate_node();
 80063b8:	f844 0b04 	str.w	r0, [r4], #4
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80063bc:	e7f6      	b.n	80063ac <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_+0x6>
    }
 80063be:	bd38      	pop	{r3, r4, r5, pc}

080063c0 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80063c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063c4:	b083      	sub	sp, #12
 80063c6:	4604      	mov	r4, r0
 80063c8:	460d      	mov	r5, r1
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 80063ca:	09cb      	lsrs	r3, r1, #7
 80063cc:	1c5e      	adds	r6, r3, #1
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80063ce:	2208      	movs	r2, #8
 80063d0:	9200      	str	r2, [sp, #0]
					   size_t(__num_nodes + 2));
 80063d2:	3303      	adds	r3, #3
 80063d4:	9301      	str	r3, [sp, #4]
      if (__a < __b)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d82f      	bhi.n	800643a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj+0x7a>
      return __a;
 80063da:	466b      	mov	r3, sp
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	6060      	str	r0, [r4, #4]
	if (__n > this->max_size())
 80063e0:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 80063e4:	d22b      	bcs.n	800643e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj+0x7e>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80063e6:	0080      	lsls	r0, r0, #2
 80063e8:	f005 f823 	bl	800b432 <_Znwj>
 80063ec:	4680      	mov	r8, r0
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80063ee:	6020      	str	r0, [r4, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80063f0:	6867      	ldr	r7, [r4, #4]
 80063f2:	1bbf      	subs	r7, r7, r6
 80063f4:	087f      	lsrs	r7, r7, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
 80063f6:	eb00 0987 	add.w	r9, r0, r7, lsl #2
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80063fa:	eb09 0686 	add.w	r6, r9, r6, lsl #2
	{ _M_create_nodes(__nstart, __nfinish); }
 80063fe:	4632      	mov	r2, r6
 8006400:	4649      	mov	r1, r9
 8006402:	4620      	mov	r0, r4
 8006404:	f7ff ffcf 	bl	80063a6 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_>
	_M_node = __new_node;
 8006408:	f8c4 9014 	str.w	r9, [r4, #20]
	_M_first = *__new_node;
 800640c:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
 8006410:	60e2      	str	r2, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8006412:	f502 7300 	add.w	r3, r2, #512	; 0x200
 8006416:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8006418:	1f33      	subs	r3, r6, #4
	_M_node = __new_node;
 800641a:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
 800641c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006420:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8006422:	f503 7100 	add.w	r1, r3, #512	; 0x200
 8006426:	6221      	str	r1, [r4, #32]
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8006428:	60a2      	str	r2, [r4, #8]
					% __deque_buf_size(sizeof(_Tp)));
 800642a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
					+ __num_elements
 800642e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8006432:	61a3      	str	r3, [r4, #24]
    }
 8006434:	b003      	add	sp, #12
 8006436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return __b;
 800643a:	ab01      	add	r3, sp, #4
 800643c:	e7ce      	b.n	80063dc <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj+0x1c>
	  std::__throw_bad_alloc();
 800643e:	f005 f818 	bl	800b472 <_ZSt17__throw_bad_allocv>
	...

08006444 <_ZN19XFEventQueueDefaultC1Ev>:
XFEventQueueDefault::XFEventQueueDefault()
 8006444:	b510      	push	{r4, lr}
 8006446:	4604      	mov	r4, r0
 8006448:	4b0a      	ldr	r3, [pc, #40]	; (8006474 <_ZN19XFEventQueueDefaultC1Ev+0x30>)
 800644a:	f840 3b04 	str.w	r3, [r0], #4
 800644e:	f000 f92f 	bl	80066b0 <_ZN14XFMutexDefaultC1Ev>
	  _M_start(), _M_finish()
 8006452:	2100      	movs	r1, #0
 8006454:	60a1      	str	r1, [r4, #8]
 8006456:	60e1      	str	r1, [r4, #12]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8006458:	6121      	str	r1, [r4, #16]
 800645a:	6161      	str	r1, [r4, #20]
 800645c:	61a1      	str	r1, [r4, #24]
 800645e:	61e1      	str	r1, [r4, #28]
 8006460:	6221      	str	r1, [r4, #32]
 8006462:	6261      	str	r1, [r4, #36]	; 0x24
 8006464:	62a1      	str	r1, [r4, #40]	; 0x28
 8006466:	62e1      	str	r1, [r4, #44]	; 0x2c
      { _M_initialize_map(0); }
 8006468:	f104 0008 	add.w	r0, r4, #8
 800646c:	f7ff ffa8 	bl	80063c0 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj>
}
 8006470:	4620      	mov	r0, r4
 8006472:	bd10      	pop	{r4, pc}
 8006474:	0800d204 	.word	0x0800d204

08006478 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8006478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800647c:	b082      	sub	sp, #8
 800647e:	4606      	mov	r6, r0
 8006480:	9101      	str	r1, [sp, #4]
 8006482:	4690      	mov	r8, r2
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8006484:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8006486:	6940      	ldr	r0, [r0, #20]
 8006488:	1a17      	subs	r7, r2, r0
 800648a:	10bd      	asrs	r5, r7, #2
 800648c:	3501      	adds	r5, #1
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 800648e:	440d      	add	r5, r1

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8006490:	6873      	ldr	r3, [r6, #4]
 8006492:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
 8006496:	d922      	bls.n	80064de <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x66>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006498:	f8d6 c000 	ldr.w	ip, [r6]
					 - __new_num_nodes) / 2
 800649c:	1b5c      	subs	r4, r3, r5
 800649e:	0864      	lsrs	r4, r4, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80064a0:	00a4      	lsls	r4, r4, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 80064a2:	f1b8 0f00 	cmp.w	r8, #0
 80064a6:	d001      	beq.n	80064ac <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x34>
 80064a8:	0089      	lsls	r1, r1, #2
 80064aa:	e000      	b.n	80064ae <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x36>
 80064ac:	2100      	movs	r1, #0
 80064ae:	440c      	add	r4, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80064b0:	4464      	add	r4, ip
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80064b2:	42a0      	cmp	r0, r4
 80064b4:	d908      	bls.n	80064c8 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x50>
	    std::copy(this->_M_impl._M_start._M_node,
 80064b6:	1d13      	adds	r3, r2, #4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 80064b8:	1a1a      	subs	r2, r3, r0
	  if (_Num)
 80064ba:	4298      	cmp	r0, r3
 80064bc:	d039      	beq.n	8006532 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xba>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80064be:	4601      	mov	r1, r0
 80064c0:	4620      	mov	r0, r4
 80064c2:	f005 fa61 	bl	800b988 <memmove>
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80064c6:	e034      	b.n	8006532 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xba>
		      this->_M_impl._M_finish._M_node + 1,
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80064c8:	1d13      	adds	r3, r2, #4
 80064ca:	1d3a      	adds	r2, r7, #4
 80064cc:	18a5      	adds	r5, r4, r2
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 80064ce:	1a1a      	subs	r2, r3, r0
	  if (_Num)
 80064d0:	4298      	cmp	r0, r3
 80064d2:	d02e      	beq.n	8006532 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xba>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80064d4:	4601      	mov	r1, r0
 80064d6:	1aa8      	subs	r0, r5, r2
 80064d8:	f005 fa56 	bl	800b988 <memmove>
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80064dc:	e029      	b.n	8006532 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xba>
			       __new_nstart + __old_num_nodes);
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
 80064de:	1d32      	adds	r2, r6, #4
      if (__a < __b)
 80064e0:	4299      	cmp	r1, r3
 80064e2:	d836      	bhi.n	8006552 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xda>
 80064e4:	6812      	ldr	r2, [r2, #0]
 80064e6:	4413      	add	r3, r2
	  size_type __new_map_size = this->_M_impl._M_map_size
 80064e8:	f103 0902 	add.w	r9, r3, #2
	if (__n > this->max_size())
 80064ec:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
 80064f0:	d231      	bcs.n	8006556 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xde>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80064f2:	ea4f 0089 	mov.w	r0, r9, lsl #2
 80064f6:	f004 ff9c 	bl	800b432 <_Znwj>
 80064fa:	4682      	mov	sl, r0
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80064fc:	eba9 0405 	sub.w	r4, r9, r5
 8006500:	0864      	lsrs	r4, r4, #1
 8006502:	00a4      	lsls	r4, r4, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8006504:	f1b8 0f00 	cmp.w	r8, #0
 8006508:	d027      	beq.n	800655a <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xe2>
 800650a:	9d01      	ldr	r5, [sp, #4]
 800650c:	00ad      	lsls	r5, r5, #2
 800650e:	442c      	add	r4, r5
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8006510:	4454      	add	r4, sl
	  std::copy(this->_M_impl._M_start._M_node,
 8006512:	6971      	ldr	r1, [r6, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8006514:	6a73      	ldr	r3, [r6, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8006516:	3304      	adds	r3, #4
	  const ptrdiff_t _Num = __last - __first;
 8006518:	1a5a      	subs	r2, r3, r1
	  if (_Num)
 800651a:	4299      	cmp	r1, r3
 800651c:	d002      	beq.n	8006524 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xac>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800651e:	4620      	mov	r0, r4
 8006520:	f005 fa32 	bl	800b988 <memmove>
	::operator delete(__p);
 8006524:	6830      	ldr	r0, [r6, #0]
 8006526:	f004 ff71 	bl	800b40c <_ZdlPv>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);

	  this->_M_impl._M_map = __new_map;
 800652a:	f8c6 a000 	str.w	sl, [r6]
	  this->_M_impl._M_map_size = __new_map_size;
 800652e:	f8c6 9004 	str.w	r9, [r6, #4]
	_M_node = __new_node;
 8006532:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
 8006534:	6823      	ldr	r3, [r4, #0]
 8006536:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8006538:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800653c:	6133      	str	r3, [r6, #16]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 800653e:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
 8006540:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
 8006542:	59e3      	ldr	r3, [r4, r7]
 8006544:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8006546:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800654a:	6233      	str	r3, [r6, #32]
    }
 800654c:	b002      	add	sp, #8
 800654e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return __b;
 8006552:	aa01      	add	r2, sp, #4
 8006554:	e7c6      	b.n	80064e4 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x6c>
	  std::__throw_bad_alloc();
 8006556:	f004 ff8c 	bl	800b472 <_ZSt17__throw_bad_allocv>
	                 + (__add_at_front ? __nodes_to_add : 0);
 800655a:	2500      	movs	r5, #0
 800655c:	e7d7      	b.n	800650e <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x96>
	...

08006560 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8006560:	b570      	push	{r4, r5, r6, lr}
 8006562:	460d      	mov	r5, r1
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8006564:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006566:	6942      	ldr	r2, [r0, #20]
 8006568:	1a9b      	subs	r3, r3, r2
 800656a:	109b      	asrs	r3, r3, #2
 800656c:	1e5a      	subs	r2, r3, #1
 800656e:	6983      	ldr	r3, [r0, #24]
 8006570:	69c1      	ldr	r1, [r0, #28]
 8006572:	1a5b      	subs	r3, r3, r1
 8006574:	109b      	asrs	r3, r3, #2
 8006576:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
 800657a:	6902      	ldr	r2, [r0, #16]
 800657c:	6881      	ldr	r1, [r0, #8]
 800657e:	1a52      	subs	r2, r2, r1
 8006580:	eb03 03a2 	add.w	r3, r3, r2, asr #2
	if (size() == max_size())
 8006584:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8006588:	4293      	cmp	r3, r2
 800658a:	d01b      	beq.n	80065c4 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x64>
 800658c:	4604      	mov	r4, r0
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800658e:	6843      	ldr	r3, [r0, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8006590:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8006592:	6801      	ldr	r1, [r0, #0]
 8006594:	1a52      	subs	r2, r2, r1
 8006596:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800659a:	2b01      	cmp	r3, #1
 800659c:	d915      	bls.n	80065ca <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x6a>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800659e:	6a66      	ldr	r6, [r4, #36]	; 0x24
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80065a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80065a4:	f004 ff45 	bl	800b432 <_Znwj>
 80065a8:	6070      	str	r0, [r6, #4]
	    _Alloc_traits::construct(this->_M_impl,
 80065aa:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80065ac:	682a      	ldr	r2, [r5, #0]
 80065ae:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80065b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065b2:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
 80065b4:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80065ba:	f503 7200 	add.w	r2, r3, #512	; 0x200
 80065be:	6222      	str	r2, [r4, #32]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80065c0:	61a3      	str	r3, [r4, #24]
      }
 80065c2:	bd70      	pop	{r4, r5, r6, pc}
	  __throw_length_error(
 80065c4:	4803      	ldr	r0, [pc, #12]	; (80065d4 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x74>)
 80065c6:	f004 ff5a 	bl	800b47e <_ZSt20__throw_length_errorPKc>
	  _M_reallocate_map(__nodes_to_add, false);
 80065ca:	2200      	movs	r2, #0
 80065cc:	2101      	movs	r1, #1
 80065ce:	f7ff ff53 	bl	8006478 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb>
 80065d2:	e7e4      	b.n	800659e <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x3e>
 80065d4:	0800dc48 	.word	0x0800dc48

080065d8 <_ZN19XFEventQueueDefaultD1Ev>:
XFEventQueueDefault::~XFEventQueueDefault()
 80065d8:	b510      	push	{r4, lr}
 80065da:	4604      	mov	r4, r0
 80065dc:	4b04      	ldr	r3, [pc, #16]	; (80065f0 <_ZN19XFEventQueueDefaultD1Ev+0x18>)
 80065de:	f840 3b08 	str.w	r3, [r0], #8
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80065e2:	f7ff fec3 	bl	800636c <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>
 80065e6:	1d20      	adds	r0, r4, #4
 80065e8:	f000 f84f 	bl	800668a <_ZN14XFMutexDefaultD1Ev>
}
 80065ec:	4620      	mov	r0, r4
 80065ee:	bd10      	pop	{r4, pc}
 80065f0:	0800d204 	.word	0x0800d204

080065f4 <_ZN19XFEventQueueDefaultD0Ev>:
XFEventQueueDefault::~XFEventQueueDefault()
 80065f4:	b510      	push	{r4, lr}
 80065f6:	4604      	mov	r4, r0
}
 80065f8:	f7ff ffee 	bl	80065d8 <_ZN19XFEventQueueDefaultD1Ev>
 80065fc:	2130      	movs	r1, #48	; 0x30
 80065fe:	4620      	mov	r0, r4
 8006600:	f004 ff06 	bl	800b410 <_ZdlPvj>
 8006604:	4620      	mov	r0, r4
 8006606:	bd10      	pop	{r4, pc}

08006608 <_ZN19XFEventQueueDefault4pushEPK7XFEventb>:
{
 8006608:	b530      	push	{r4, r5, lr}
 800660a:	b083      	sub	sp, #12
 800660c:	4604      	mov	r4, r0
 800660e:	9101      	str	r1, [sp, #4]
    _mutex.lock();
 8006610:	1d05      	adds	r5, r0, #4
 8006612:	4628      	mov	r0, r5
 8006614:	f000 f843 	bl	800669e <_ZN14XFMutexDefault4lockEv>
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
      { c.push_back(__x); }
 8006618:	f104 0008 	add.w	r0, r4, #8
	if (this->_M_impl._M_finish._M_cur
 800661c:	6982      	ldr	r2, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 800661e:	6a03      	ldr	r3, [r0, #32]
 8006620:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 8006622:	429a      	cmp	r2, r3
 8006624:	d00a      	beq.n	800663c <_ZN19XFEventQueueDefault4pushEPK7XFEventb+0x34>
 8006626:	9b01      	ldr	r3, [sp, #4]
 8006628:	6013      	str	r3, [r2, #0]
	    ++this->_M_impl._M_finish._M_cur;
 800662a:	6983      	ldr	r3, [r0, #24]
 800662c:	3304      	adds	r3, #4
 800662e:	6183      	str	r3, [r0, #24]
    _mutex.unlock();
 8006630:	4628      	mov	r0, r5
 8006632:	f000 f838 	bl	80066a6 <_ZN14XFMutexDefault6unlockEv>
}
 8006636:	2001      	movs	r0, #1
 8006638:	b003      	add	sp, #12
 800663a:	bd30      	pop	{r4, r5, pc}
	  _M_push_back_aux(__x);
 800663c:	a901      	add	r1, sp, #4
 800663e:	f7ff ff8f 	bl	8006560 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>
 8006642:	e7f5      	b.n	8006630 <_ZN19XFEventQueueDefault4pushEPK7XFEventb+0x28>

08006644 <_ZN19XFEventQueueDefault5frontEv>:
{
 8006644:	b538      	push	{r3, r4, r5, lr}
 8006646:	4604      	mov	r4, r0
    _mutex.lock();
 8006648:	1d05      	adds	r5, r0, #4
 800664a:	4628      	mov	r0, r5
 800664c:	f000 f827 	bl	800669e <_ZN14XFMutexDefault4lockEv>
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8006650:	6923      	ldr	r3, [r4, #16]
        event =  _queue.front();
 8006652:	681c      	ldr	r4, [r3, #0]
    _mutex.unlock();
 8006654:	4628      	mov	r0, r5
 8006656:	f000 f826 	bl	80066a6 <_ZN14XFMutexDefault6unlockEv>
}
 800665a:	4620      	mov	r0, r4
 800665c:	bd38      	pop	{r3, r4, r5, pc}

0800665e <_ZN19XFEventQueueDefault3popEv>:
{
 800665e:	b538      	push	{r3, r4, r5, lr}
 8006660:	4604      	mov	r4, r0
    _mutex.lock();
 8006662:	1d05      	adds	r5, r0, #4
 8006664:	4628      	mov	r0, r5
 8006666:	f000 f81a 	bl	800669e <_ZN14XFMutexDefault4lockEv>
	if (this->_M_impl._M_start._M_cur
 800666a:	6923      	ldr	r3, [r4, #16]
	    != this->_M_impl._M_start._M_last - 1)
 800666c:	69a2      	ldr	r2, [r4, #24]
 800666e:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
 8006670:	4293      	cmp	r3, r2
 8006672:	d005      	beq.n	8006680 <_ZN19XFEventQueueDefault3popEv+0x22>
	    ++this->_M_impl._M_start._M_cur;
 8006674:	3304      	adds	r3, #4
 8006676:	6123      	str	r3, [r4, #16]
    _mutex.unlock();
 8006678:	4628      	mov	r0, r5
 800667a:	f000 f814 	bl	80066a6 <_ZN14XFMutexDefault6unlockEv>
}
 800667e:	bd38      	pop	{r3, r4, r5, pc}
 8006680:	f104 0008 	add.w	r0, r4, #8
	  _M_pop_front_aux();
 8006684:	f7ff fe80 	bl	8006388 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_pop_front_auxEv>
 8006688:	e7f6      	b.n	8006678 <_ZN19XFEventQueueDefault3popEv+0x1a>

0800668a <_ZN14XFMutexDefaultD1Ev>:
{
}

XFMutexDefault::~XFMutexDefault()
{
}
 800668a:	4770      	bx	lr

0800668c <_ZN14XFMutexDefault7tryLockEl>:
}

bool XFMutexDefault::tryLock(int32_t timeout /* = 0 */)
{
	return true;	// Always allow
}
 800668c:	2001      	movs	r0, #1
 800668e:	4770      	bx	lr

08006690 <_ZN14XFMutexDefaultD0Ev>:
XFMutexDefault::~XFMutexDefault()
 8006690:	b510      	push	{r4, lr}
 8006692:	4604      	mov	r4, r0
}
 8006694:	2104      	movs	r1, #4
 8006696:	f004 febb 	bl	800b410 <_ZdlPvj>
 800669a:	4620      	mov	r0, r4
 800669c:	bd10      	pop	{r4, pc}

0800669e <_ZN14XFMutexDefault4lockEv>:
{
 800669e:	b508      	push	{r3, lr}
	enterCritical();
 80066a0:	f7ff f97e 	bl	80059a0 <_Z13enterCriticalv>
}
 80066a4:	bd08      	pop	{r3, pc}

080066a6 <_ZN14XFMutexDefault6unlockEv>:
{
 80066a6:	b508      	push	{r3, lr}
	exitCritical();
 80066a8:	f7ff f98a 	bl	80059c0 <_Z12exitCriticalv>
}
 80066ac:	bd08      	pop	{r3, pc}
	...

080066b0 <_ZN14XFMutexDefaultC1Ev>:
XFMutexDefault::XFMutexDefault()
 80066b0:	4b01      	ldr	r3, [pc, #4]	; (80066b8 <_ZN14XFMutexDefaultC1Ev+0x8>)
 80066b2:	6003      	str	r3, [r0, #0]
}
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	0800d228 	.word	0x0800d228

080066bc <_ZN9interface7XFMutex6createEv>:
{
 80066bc:	b510      	push	{r4, lr}
    return new XFMutexDefault;
 80066be:	2004      	movs	r0, #4
 80066c0:	f004 feb7 	bl	800b432 <_Znwj>
 80066c4:	4604      	mov	r4, r0
 80066c6:	f7ff fff3 	bl	80066b0 <_ZN14XFMutexDefaultC1Ev>
}
 80066ca:	4620      	mov	r0, r4
 80066cc:	bd10      	pop	{r4, pc}

080066ce <XF_startTimeoutManagerTimer>:
{
    (void)tickInterval;

    // SysTick gets already started by the STM32CubeMX HAL.
    // So nothing to do here.
}
 80066ce:	4770      	bx	lr

080066d0 <XF_tick>:
 * SysTick_Handler() function is already implemented in the STM32CubeMX generated
 * code (see Src/stm32fxxx_it.c file). Therefore, we must provide here a function
 * which can be explicitly called in SysTick_Handler() to tick the XF.
 */
void XF_tick()
{
 80066d0:	b508      	push	{r3, lr}
	bInISR = true;								// Tell critical section we are in an ISR
 80066d2:	4b08      	ldr	r3, [pc, #32]	; (80066f4 <XF_tick+0x24>)
 80066d4:	2201      	movs	r2, #1
 80066d6:	601a      	str	r2, [r3, #0]
	if (XF::isRunning())                        // Call tick only if XF is running
 80066d8:	f7ff fe2e 	bl	8006338 <_ZN2XF9isRunningEv>
 80066dc:	b918      	cbnz	r0, 80066e6 <XF_tick+0x16>
	{
	    XFTimeoutManager::getInstance()->tick();    // Call framework hook tick function
	}
	bInISR = false;
 80066de:	4b05      	ldr	r3, [pc, #20]	; (80066f4 <XF_tick+0x24>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	601a      	str	r2, [r3, #0]
}
 80066e4:	bd08      	pop	{r3, pc}
	    XFTimeoutManager::getInstance()->tick();    // Call framework hook tick function
 80066e6:	f7ff fca5 	bl	8006034 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 80066ea:	6803      	ldr	r3, [r0, #0]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	4798      	blx	r3
 80066f0:	e7f5      	b.n	80066de <XF_tick+0xe>
 80066f2:	bf00      	nop
 80066f4:	200010c4 	.word	0x200010c4

080066f8 <XF_tickIntervalInMilliseconds>:

/**
 * C function wrapping getTickInterval() method of XFTimeoutManager.
 */
int32_t XF_tickIntervalInMilliseconds()
{
 80066f8:	b508      	push	{r3, lr}
    return XFTimeoutManager::getInstance()->getTickInterval();
 80066fa:	f7ff fc9b 	bl	8006034 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 80066fe:	6803      	ldr	r3, [r0, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	4798      	blx	r3
}
 8006704:	bd08      	pop	{r3, pc}

08006706 <XF_isRunning>:

bool XF_isRunning()
{
 8006706:	b508      	push	{r3, lr}
    return XF::isRunning();
 8006708:	f7ff fe16 	bl	8006338 <_ZN2XF9isRunningEv>
}
 800670c:	bd08      	pop	{r3, pc}

0800670e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800670e:	6803      	ldr	r3, [r0, #0]
 8006710:	b513      	push	{r0, r1, r4, lr}
 8006712:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8006716:	2300      	movs	r3, #0
 8006718:	e9cd 3300 	strd	r3, r3, [sp]
 800671c:	466b      	mov	r3, sp
 800671e:	47a0      	blx	r4
 8006720:	b002      	add	sp, #8
 8006722:	bd10      	pop	{r4, pc}

08006724 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8006724:	2301      	movs	r3, #1
 8006726:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800672a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800672e:	4770      	bx	lr

08006730 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8006730:	2301      	movs	r3, #1
 8006732:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8006736:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800673a:	4770      	bx	lr

0800673c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800673c:	6843      	ldr	r3, [r0, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	725a      	strb	r2, [r3, #9]
 8006742:	6840      	ldr	r0, [r0, #4]
 8006744:	6803      	ldr	r3, [r0, #0]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	4718      	bx	r3

0800674a <_ZN8touchgfx3HAL8flushDMAEv>:
 800674a:	6840      	ldr	r0, [r0, #4]
 800674c:	6803      	ldr	r3, [r0, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	4718      	bx	r3
	...

08006754 <_ZN8touchgfx3HAL10beginFrameEv>:
 8006754:	4b04      	ldr	r3, [pc, #16]	; (8006768 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	b123      	cbz	r3, 8006764 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800675a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800675e:	f080 0001 	eor.w	r0, r0, #1
 8006762:	4770      	bx	lr
 8006764:	2001      	movs	r0, #1
 8006766:	4770      	bx	lr
 8006768:	20001152 	.word	0x20001152

0800676c <_ZN8touchgfx3HAL8endFrameEv>:
 800676c:	b510      	push	{r4, lr}
 800676e:	4604      	mov	r4, r0
 8006770:	6840      	ldr	r0, [r0, #4]
 8006772:	6803      	ldr	r3, [r0, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	4798      	blx	r3
 8006778:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800677c:	b113      	cbz	r3, 8006784 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800677e:	2301      	movs	r3, #1
 8006780:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8006784:	bd10      	pop	{r4, pc}
	...

08006788 <_ZN8touchgfx3HAL4tickEv>:
 8006788:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800678a:	6803      	ldr	r3, [r0, #0]
 800678c:	4604      	mov	r4, r0
 800678e:	4d5c      	ldr	r5, [pc, #368]	; (8006900 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8006790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006794:	4798      	blx	r3
 8006796:	2800      	cmp	r0, #0
 8006798:	f000 8097 	beq.w	80068ca <_ZN8touchgfx3HAL4tickEv+0x142>
 800679c:	2001      	movs	r0, #1
 800679e:	2600      	movs	r6, #0
 80067a0:	f7fd fd2c 	bl	80041fc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80067a4:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80067a8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80067ac:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80067b0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80067b4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80067b8:	b133      	cbz	r3, 80067c8 <_ZN8touchgfx3HAL4tickEv+0x40>
 80067ba:	6823      	ldr	r3, [r4, #0]
 80067bc:	4620      	mov	r0, r4
 80067be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80067c2:	4798      	blx	r3
 80067c4:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80067c8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80067cc:	2601      	movs	r6, #1
 80067ce:	6862      	ldr	r2, [r4, #4]
 80067d0:	f083 0301 	eor.w	r3, r3, #1
 80067d4:	702e      	strb	r6, [r5, #0]
 80067d6:	7253      	strb	r3, [r2, #9]
 80067d8:	f001 fd86 	bl	80082e8 <_ZN8touchgfx11Application11getInstanceEv>
 80067dc:	6803      	ldr	r3, [r0, #0]
 80067de:	4631      	mov	r1, r6
 80067e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e2:	4798      	blx	r3
 80067e4:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80067e8:	b90b      	cbnz	r3, 80067ee <_ZN8touchgfx3HAL4tickEv+0x66>
 80067ea:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80067ee:	f001 fd7b 	bl	80082e8 <_ZN8touchgfx11Application11getInstanceEv>
 80067f2:	6803      	ldr	r3, [r0, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	4798      	blx	r3
 80067f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067fa:	6803      	ldr	r3, [r0, #0]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	4798      	blx	r3
 8006800:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8006804:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8006808:	3b01      	subs	r3, #1
 800680a:	b2db      	uxtb	r3, r3
 800680c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8006810:	b10a      	cbz	r2, 8006816 <_ZN8touchgfx3HAL4tickEv+0x8e>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1eb      	bne.n	80067ee <_ZN8touchgfx3HAL4tickEv+0x66>
 8006816:	4a3b      	ldr	r2, [pc, #236]	; (8006904 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8006818:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800681c:	7813      	ldrb	r3, [r2, #0]
 800681e:	3301      	adds	r3, #1
 8006820:	b25b      	sxtb	r3, r3
 8006822:	4299      	cmp	r1, r3
 8006824:	7013      	strb	r3, [r2, #0]
 8006826:	dc10      	bgt.n	800684a <_ZN8touchgfx3HAL4tickEv+0xc2>
 8006828:	2300      	movs	r3, #0
 800682a:	68e0      	ldr	r0, [r4, #12]
 800682c:	a902      	add	r1, sp, #8
 800682e:	7013      	strb	r3, [r2, #0]
 8006830:	aa03      	add	r2, sp, #12
 8006832:	6803      	ldr	r3, [r0, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	4798      	blx	r3
 8006838:	6823      	ldr	r3, [r4, #0]
 800683a:	2800      	cmp	r0, #0
 800683c:	d051      	beq.n	80068e2 <_ZN8touchgfx3HAL4tickEv+0x15a>
 800683e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006842:	4620      	mov	r0, r4
 8006844:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006848:	4798      	blx	r3
 800684a:	2300      	movs	r3, #0
 800684c:	6960      	ldr	r0, [r4, #20]
 800684e:	f88d 3007 	strb.w	r3, [sp, #7]
 8006852:	b158      	cbz	r0, 800686c <_ZN8touchgfx3HAL4tickEv+0xe4>
 8006854:	6803      	ldr	r3, [r0, #0]
 8006856:	f10d 0107 	add.w	r1, sp, #7
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	4798      	blx	r3
 800685e:	b128      	cbz	r0, 800686c <_ZN8touchgfx3HAL4tickEv+0xe4>
 8006860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006862:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8006866:	6803      	ldr	r3, [r0, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	4798      	blx	r3
 800686c:	f104 001c 	add.w	r0, r4, #28
 8006870:	f004 fd18 	bl	800b2a4 <_ZN8touchgfx8Gestures4tickEv>
 8006874:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8006878:	b30b      	cbz	r3, 80068be <_ZN8touchgfx3HAL4tickEv+0x136>
 800687a:	6920      	ldr	r0, [r4, #16]
 800687c:	6803      	ldr	r3, [r0, #0]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	4798      	blx	r3
 8006882:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006884:	4606      	mov	r6, r0
 8006886:	b903      	cbnz	r3, 800688a <_ZN8touchgfx3HAL4tickEv+0x102>
 8006888:	6720      	str	r0, [r4, #112]	; 0x70
 800688a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800688c:	4a1e      	ldr	r2, [pc, #120]	; (8006908 <_ZN8touchgfx3HAL4tickEv+0x180>)
 800688e:	1af3      	subs	r3, r6, r3
 8006890:	4293      	cmp	r3, r2
 8006892:	d914      	bls.n	80068be <_ZN8touchgfx3HAL4tickEv+0x136>
 8006894:	6920      	ldr	r0, [r4, #16]
 8006896:	6803      	ldr	r3, [r0, #0]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	4798      	blx	r3
 800689c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800689e:	2264      	movs	r2, #100	; 0x64
 80068a0:	1af3      	subs	r3, r6, r3
 80068a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80068a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80068aa:	2800      	cmp	r0, #0
 80068ac:	dc1e      	bgt.n	80068ec <_ZN8touchgfx3HAL4tickEv+0x164>
 80068ae:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80068b2:	6920      	ldr	r0, [r4, #16]
 80068b4:	2100      	movs	r1, #0
 80068b6:	6803      	ldr	r3, [r0, #0]
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	4798      	blx	r3
 80068bc:	6726      	str	r6, [r4, #112]	; 0x70
 80068be:	f001 fd13 	bl	80082e8 <_ZN8touchgfx11Application11getInstanceEv>
 80068c2:	6803      	ldr	r3, [r0, #0]
 80068c4:	2100      	movs	r1, #0
 80068c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c8:	4798      	blx	r3
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	4620      	mov	r0, r4
 80068ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068d2:	4798      	blx	r3
 80068d4:	2001      	movs	r0, #1
 80068d6:	f7fd fc92 	bl	80041fe <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80068da:	2300      	movs	r3, #0
 80068dc:	702b      	strb	r3, [r5, #0]
 80068de:	b004      	add	sp, #16
 80068e0:	bd70      	pop	{r4, r5, r6, pc}
 80068e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80068e6:	4620      	mov	r0, r4
 80068e8:	4798      	blx	r3
 80068ea:	e7ae      	b.n	800684a <_ZN8touchgfx3HAL4tickEv+0xc2>
 80068ec:	2863      	cmp	r0, #99	; 0x63
 80068ee:	bfcb      	itete	gt
 80068f0:	2300      	movgt	r3, #0
 80068f2:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80068f6:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80068fa:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80068fe:	e7d8      	b.n	80068b2 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8006900:	20001158 	.word	0x20001158
 8006904:	20001159 	.word	0x20001159
 8006908:	05f5e100 	.word	0x05f5e100

0800690c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800690c:	f7fd bd90 	b.w	8004430 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08006910 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8006910:	6581      	str	r1, [r0, #88]	; 0x58
 8006912:	301c      	adds	r0, #28
 8006914:	f004 bcc4 	b.w	800b2a0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08006918 <_ZN8touchgfx3HAL5touchEll>:
 8006918:	b530      	push	{r4, r5, lr}
 800691a:	b087      	sub	sp, #28
 800691c:	4604      	mov	r4, r0
 800691e:	a804      	add	r0, sp, #16
 8006920:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8006924:	f001 fc28 	bl	8008178 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8006928:	9b04      	ldr	r3, [sp, #16]
 800692a:	a906      	add	r1, sp, #24
 800692c:	a803      	add	r0, sp, #12
 800692e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006932:	9b05      	ldr	r3, [sp, #20]
 8006934:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8006938:	f001 fc5c 	bl	80081f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800693c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8006940:	f104 001c 	add.w	r0, r4, #28
 8006944:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8006948:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800694c:	b189      	cbz	r1, 8006972 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800694e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	4613      	mov	r3, r2
 8006956:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800695a:	462a      	mov	r2, r5
 800695c:	f004 fcb0 	bl	800b2c0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8006960:	b128      	cbz	r0, 800696e <_ZN8touchgfx3HAL5touchEll+0x56>
 8006962:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8006966:	65e3      	str	r3, [r4, #92]	; 0x5c
 8006968:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800696c:	6623      	str	r3, [r4, #96]	; 0x60
 800696e:	b007      	add	sp, #28
 8006970:	bd30      	pop	{r4, r5, pc}
 8006972:	f004 fce9 	bl	800b348 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8006976:	2301      	movs	r3, #1
 8006978:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800697c:	e7f1      	b.n	8006962 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800697e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800697e:	b570      	push	{r4, r5, r6, lr}
 8006980:	2b00      	cmp	r3, #0
 8006982:	d050      	beq.n	8006a26 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8006984:	ea81 0002 	eor.w	r0, r1, r2
 8006988:	07c6      	lsls	r6, r0, #31
 800698a:	d508      	bpl.n	800699e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800698c:	3a01      	subs	r2, #1
 800698e:	18cc      	adds	r4, r1, r3
 8006990:	42a1      	cmp	r1, r4
 8006992:	d048      	beq.n	8006a26 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8006994:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8006998:	f801 0b01 	strb.w	r0, [r1], #1
 800699c:	e7f8      	b.n	8006990 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800699e:	07d5      	lsls	r5, r2, #31
 80069a0:	bf42      	ittt	mi
 80069a2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80069a6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80069aa:	f801 0b01 	strbmi.w	r0, [r1], #1
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d915      	bls.n	80069de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80069b2:	ea82 0001 	eor.w	r0, r2, r1
 80069b6:	0784      	lsls	r4, r0, #30
 80069b8:	d02d      	beq.n	8006a16 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 80069ba:	1e94      	subs	r4, r2, #2
 80069bc:	4608      	mov	r0, r1
 80069be:	18ce      	adds	r6, r1, r3
 80069c0:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 80069c4:	f820 5b02 	strh.w	r5, [r0], #2
 80069c8:	1a35      	subs	r5, r6, r0
 80069ca:	2d01      	cmp	r5, #1
 80069cc:	d8f8      	bhi.n	80069c0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 80069ce:	1e98      	subs	r0, r3, #2
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	f020 0001 	bic.w	r0, r0, #1
 80069d8:	3002      	adds	r0, #2
 80069da:	4401      	add	r1, r0
 80069dc:	4402      	add	r2, r0
 80069de:	1f14      	subs	r4, r2, #4
 80069e0:	4608      	mov	r0, r1
 80069e2:	18ce      	adds	r6, r1, r3
 80069e4:	1a35      	subs	r5, r6, r0
 80069e6:	2d03      	cmp	r5, #3
 80069e8:	d810      	bhi.n	8006a0c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 80069ea:	089c      	lsrs	r4, r3, #2
 80069ec:	00a0      	lsls	r0, r4, #2
 80069ee:	4401      	add	r1, r0
 80069f0:	3801      	subs	r0, #1
 80069f2:	4402      	add	r2, r0
 80069f4:	f06f 0003 	mvn.w	r0, #3
 80069f8:	fb00 3404 	mla	r4, r0, r4, r3
 80069fc:	440c      	add	r4, r1
 80069fe:	42a1      	cmp	r1, r4
 8006a00:	d011      	beq.n	8006a26 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8006a02:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006a06:	f801 3b01 	strb.w	r3, [r1], #1
 8006a0a:	e7f8      	b.n	80069fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8006a0c:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8006a10:	f840 5b04 	str.w	r5, [r0], #4
 8006a14:	e7e6      	b.n	80069e4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8006a16:	0790      	lsls	r0, r2, #30
 8006a18:	d0e1      	beq.n	80069de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8006a1a:	f832 0b02 	ldrh.w	r0, [r2], #2
 8006a1e:	3b02      	subs	r3, #2
 8006a20:	f821 0b02 	strh.w	r0, [r1], #2
 8006a24:	e7db      	b.n	80069de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8006a26:	2001      	movs	r0, #1
 8006a28:	bd70      	pop	{r4, r5, r6, pc}

08006a2a <_ZN8touchgfx3HAL7noTouchEv>:
 8006a2a:	b510      	push	{r4, lr}
 8006a2c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8006a30:	4604      	mov	r4, r0
 8006a32:	b153      	cbz	r3, 8006a4a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8006a34:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8006a38:	2101      	movs	r1, #1
 8006a3a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8006a3e:	301c      	adds	r0, #28
 8006a40:	f004 fc82 	bl	800b348 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8006a44:	2300      	movs	r3, #0
 8006a46:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8006a4a:	bd10      	pop	{r4, pc}

08006a4c <_ZN8touchgfx4RectaNERKS0_>:
 8006a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a50:	f9b1 7000 	ldrsh.w	r7, [r1]
 8006a54:	888c      	ldrh	r4, [r1, #4]
 8006a56:	f9b0 9000 	ldrsh.w	r9, [r0]
 8006a5a:	443c      	add	r4, r7
 8006a5c:	b2a4      	uxth	r4, r4
 8006a5e:	fa0f f884 	sxth.w	r8, r4
 8006a62:	45c1      	cmp	r9, r8
 8006a64:	da2f      	bge.n	8006ac6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8006a66:	8882      	ldrh	r2, [r0, #4]
 8006a68:	444a      	add	r2, r9
 8006a6a:	b292      	uxth	r2, r2
 8006a6c:	fa0f fe82 	sxth.w	lr, r2
 8006a70:	4577      	cmp	r7, lr
 8006a72:	da28      	bge.n	8006ac6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8006a74:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8006a78:	88cb      	ldrh	r3, [r1, #6]
 8006a7a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8006a7e:	442b      	add	r3, r5
 8006a80:	b21b      	sxth	r3, r3
 8006a82:	429e      	cmp	r6, r3
 8006a84:	da1f      	bge.n	8006ac6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8006a86:	88c3      	ldrh	r3, [r0, #6]
 8006a88:	4433      	add	r3, r6
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	fa0f fc83 	sxth.w	ip, r3
 8006a90:	4565      	cmp	r5, ip
 8006a92:	da18      	bge.n	8006ac6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8006a94:	454f      	cmp	r7, r9
 8006a96:	bfb8      	it	lt
 8006a98:	464f      	movlt	r7, r9
 8006a9a:	42b5      	cmp	r5, r6
 8006a9c:	bfb8      	it	lt
 8006a9e:	4635      	movlt	r5, r6
 8006aa0:	45f0      	cmp	r8, lr
 8006aa2:	bfd8      	it	le
 8006aa4:	4622      	movle	r2, r4
 8006aa6:	1bd2      	subs	r2, r2, r7
 8006aa8:	8082      	strh	r2, [r0, #4]
 8006aaa:	884a      	ldrh	r2, [r1, #2]
 8006aac:	88c9      	ldrh	r1, [r1, #6]
 8006aae:	8007      	strh	r7, [r0, #0]
 8006ab0:	440a      	add	r2, r1
 8006ab2:	8045      	strh	r5, [r0, #2]
 8006ab4:	b292      	uxth	r2, r2
 8006ab6:	b211      	sxth	r1, r2
 8006ab8:	458c      	cmp	ip, r1
 8006aba:	bfa8      	it	ge
 8006abc:	4613      	movge	r3, r2
 8006abe:	1b5b      	subs	r3, r3, r5
 8006ac0:	80c3      	strh	r3, [r0, #6]
 8006ac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	8003      	strh	r3, [r0, #0]
 8006aca:	8043      	strh	r3, [r0, #2]
 8006acc:	8083      	strh	r3, [r0, #4]
 8006ace:	80c3      	strh	r3, [r0, #6]
 8006ad0:	e7f7      	b.n	8006ac2 <_ZN8touchgfx4RectaNERKS0_+0x76>

08006ad2 <_ZN8touchgfx8Drawable5setXYEss>:
 8006ad2:	b570      	push	{r4, r5, r6, lr}
 8006ad4:	6803      	ldr	r3, [r0, #0]
 8006ad6:	4604      	mov	r4, r0
 8006ad8:	4615      	mov	r5, r2
 8006ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006adc:	4798      	blx	r3
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006aea:	4718      	bx	r3

08006aec <_ZN8touchgfx3HAL3lcdEv>:
 8006aec:	4b04      	ldr	r3, [pc, #16]	; (8006b00 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8006af4:	b10a      	cbz	r2, 8006afa <_ZN8touchgfx3HAL3lcdEv+0xe>
 8006af6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006af8:	b900      	cbnz	r0, 8006afc <_ZN8touchgfx3HAL3lcdEv+0x10>
 8006afa:	6898      	ldr	r0, [r3, #8]
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	20001154 	.word	0x20001154

08006b04 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8006b04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b08:	4604      	mov	r4, r0
 8006b0a:	6980      	ldr	r0, [r0, #24]
 8006b0c:	b085      	sub	sp, #20
 8006b0e:	460f      	mov	r7, r1
 8006b10:	4690      	mov	r8, r2
 8006b12:	4699      	mov	r9, r3
 8006b14:	b930      	cbnz	r0, 8006b24 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8006b16:	4b1c      	ldr	r3, [pc, #112]	; (8006b88 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8006b18:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8006b1c:	4a1b      	ldr	r2, [pc, #108]	; (8006b8c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8006b1e:	481c      	ldr	r0, [pc, #112]	; (8006b90 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8006b20:	f004 feba 	bl	800b898 <__assert_func>
 8006b24:	ad04      	add	r5, sp, #16
 8006b26:	2600      	movs	r6, #0
 8006b28:	f845 6d04 	str.w	r6, [r5, #-4]!
 8006b2c:	6806      	ldr	r6, [r0, #0]
 8006b2e:	9501      	str	r5, [sp, #4]
 8006b30:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8006b34:	9500      	str	r5, [sp, #0]
 8006b36:	6835      	ldr	r5, [r6, #0]
 8006b38:	47a8      	blx	r5
 8006b3a:	4d16      	ldr	r5, [pc, #88]	; (8006b94 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8006b3c:	4606      	mov	r6, r0
 8006b3e:	f8a5 9000 	strh.w	r9, [r5]
 8006b42:	f7ff ffd3 	bl	8006aec <_ZN8touchgfx3HAL3lcdEv>
 8006b46:	6803      	ldr	r3, [r0, #0]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	4798      	blx	r3
 8006b4c:	2801      	cmp	r0, #1
 8006b4e:	d012      	beq.n	8006b76 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8006b50:	d306      	bcc.n	8006b60 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8006b52:	280d      	cmp	r0, #13
 8006b54:	d80b      	bhi.n	8006b6e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8006b56:	4b10      	ldr	r3, [pc, #64]	; (8006b98 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8006b58:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8006b5c:	4a0b      	ldr	r2, [pc, #44]	; (8006b8c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8006b5e:	e7de      	b.n	8006b1e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8006b60:	882b      	ldrh	r3, [r5, #0]
 8006b62:	fb08 7203 	mla	r2, r8, r3, r7
 8006b66:	9b03      	ldr	r3, [sp, #12]
 8006b68:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8006b6c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8006b6e:	4630      	mov	r0, r6
 8006b70:	b005      	add	sp, #20
 8006b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b76:	882a      	ldrh	r2, [r5, #0]
 8006b78:	9b03      	ldr	r3, [sp, #12]
 8006b7a:	fb08 7202 	mla	r2, r8, r2, r7
 8006b7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006b82:	1a9a      	subs	r2, r3, r2
 8006b84:	63e2      	str	r2, [r4, #60]	; 0x3c
 8006b86:	e7f2      	b.n	8006b6e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8006b88:	0800dce6 	.word	0x0800dce6
 8006b8c:	0800df40 	.word	0x0800df40
 8006b90:	0800dd2b 	.word	0x0800dd2b
 8006b94:	2000114e 	.word	0x2000114e
 8006b98:	0800dd51 	.word	0x0800dd51

08006b9c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8006b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ba0:	4698      	mov	r8, r3
 8006ba2:	6803      	ldr	r3, [r0, #0]
 8006ba4:	b087      	sub	sp, #28
 8006ba6:	460e      	mov	r6, r1
 8006ba8:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8006baa:	4617      	mov	r7, r2
 8006bac:	4b0d      	ldr	r3, [pc, #52]	; (8006be4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8006bae:	4604      	mov	r4, r0
 8006bb0:	f8b3 9000 	ldrh.w	r9, [r3]
 8006bb4:	f7ff ff9a 	bl	8006aec <_ZN8touchgfx3HAL3lcdEv>
 8006bb8:	6803      	ldr	r3, [r0, #0]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	4798      	blx	r3
 8006bbe:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8006bc2:	463a      	mov	r2, r7
 8006bc4:	4631      	mov	r1, r6
 8006bc6:	9302      	str	r3, [sp, #8]
 8006bc8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8006bcc:	9301      	str	r3, [sp, #4]
 8006bce:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8006bd2:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	4620      	mov	r0, r4
 8006bda:	4643      	mov	r3, r8
 8006bdc:	47a8      	blx	r5
 8006bde:	b007      	add	sp, #28
 8006be0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006be4:	2000114e 	.word	0x2000114e

08006be8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8006be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bec:	4604      	mov	r4, r0
 8006bee:	b08b      	sub	sp, #44	; 0x2c
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	460d      	mov	r5, r1
 8006bf4:	4691      	mov	r9, r2
 8006bf6:	461e      	mov	r6, r3
 8006bf8:	f002 fc78 	bl	80094ec <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	f000 80a0 	beq.w	8006d42 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	4620      	mov	r0, r4
 8006c06:	f8df b170 	ldr.w	fp, [pc, #368]	; 8006d78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>
 8006c0a:	af0a      	add	r7, sp, #40	; 0x28
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	4798      	blx	r3
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	4620      	mov	r0, r4
 8006c14:	f8df a164 	ldr.w	sl, [pc, #356]	; 8006d7c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	4798      	blx	r3
 8006c1c:	f8bb 3000 	ldrh.w	r3, [fp]
 8006c20:	f827 9d0c 	strh.w	r9, [r7, #-12]!
 8006c24:	4638      	mov	r0, r7
 8006c26:	9301      	str	r3, [sp, #4]
 8006c28:	f8ba 3000 	ldrh.w	r3, [sl]
 8006c2c:	9302      	str	r3, [sp, #8]
 8006c2e:	4b4f      	ldr	r3, [pc, #316]	; (8006d6c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 8006c30:	881a      	ldrh	r2, [r3, #0]
 8006c32:	4698      	mov	r8, r3
 8006c34:	9203      	str	r2, [sp, #12]
 8006c36:	4a4e      	ldr	r2, [pc, #312]	; (8006d70 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8006c38:	8812      	ldrh	r2, [r2, #0]
 8006c3a:	9204      	str	r2, [sp, #16]
 8006c3c:	4a4d      	ldr	r2, [pc, #308]	; (8006d74 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x18c>)
 8006c3e:	7812      	ldrb	r2, [r2, #0]
 8006c40:	2a00      	cmp	r2, #0
 8006c42:	f040 8081 	bne.w	8006d48 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x160>
 8006c46:	f002 fc5d 	bl	8009504 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8006c4a:	f8ab 0000 	strh.w	r0, [fp]
 8006c4e:	4638      	mov	r0, r7
 8006c50:	f002 fc92 	bl	8009578 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8006c54:	f8aa 0000 	strh.w	r0, [sl]
 8006c58:	4638      	mov	r0, r7
 8006c5a:	f002 fc53 	bl	8009504 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8006c5e:	f8a8 0000 	strh.w	r0, [r8]
 8006c62:	4638      	mov	r0, r7
 8006c64:	f002 fc88 	bl	8009578 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8006c68:	4b41      	ldr	r3, [pc, #260]	; (8006d70 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8006c6a:	8018      	strh	r0, [r3, #0]
 8006c6c:	4648      	mov	r0, r9
 8006c6e:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8006c72:	f002 fc3b 	bl	80094ec <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8006c76:	2200      	movs	r2, #0
 8006c78:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	4628      	mov	r0, r5
 8006c80:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8006c84:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8006c88:	f7ff ff23 	bl	8006ad2 <_ZN8touchgfx8Drawable5setXYEss>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8006c92:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8006c96:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	dd5c      	ble.n	8006d58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 8006c9e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	dd58      	ble.n	8006d58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 8006ca6:	462a      	mov	r2, r5
 8006ca8:	ab08      	add	r3, sp, #32
 8006caa:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8006cae:	6851      	ldr	r1, [r2, #4]
 8006cb0:	c303      	stmia	r3!, {r0, r1}
 8006cb2:	4631      	mov	r1, r6
 8006cb4:	a808      	add	r0, sp, #32
 8006cb6:	f7ff fec9 	bl	8006a4c <_ZN8touchgfx4RectaNERKS0_>
 8006cba:	a807      	add	r0, sp, #28
 8006cbc:	f002 fdb4 	bl	8009828 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8006cc0:	4606      	mov	r6, r0
 8006cc2:	f7ff ff13 	bl	8006aec <_ZN8touchgfx3HAL3lcdEv>
 8006cc6:	6803      	ldr	r3, [r0, #0]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	4798      	blx	r3
 8006ccc:	4286      	cmp	r6, r0
 8006cce:	d04a      	beq.n	8006d66 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x17e>
 8006cd0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006cd2:	b150      	cbz	r0, 8006cea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 8006cd4:	a807      	add	r0, sp, #28
 8006cd6:	f002 fda7 	bl	8009828 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8006cda:	4606      	mov	r6, r0
 8006cdc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006cde:	6803      	ldr	r3, [r0, #0]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	4798      	blx	r3
 8006ce4:	1a33      	subs	r3, r6, r0
 8006ce6:	4258      	negs	r0, r3
 8006ce8:	4158      	adcs	r0, r3
 8006cea:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8006cee:	2600      	movs	r6, #0
 8006cf0:	696b      	ldr	r3, [r5, #20]
 8006cf2:	a908      	add	r1, sp, #32
 8006cf4:	682a      	ldr	r2, [r5, #0]
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	9305      	str	r3, [sp, #20]
 8006cfa:	616e      	str	r6, [r5, #20]
 8006cfc:	6892      	ldr	r2, [r2, #8]
 8006cfe:	4790      	blx	r2
 8006d00:	9b05      	ldr	r3, [sp, #20]
 8006d02:	4652      	mov	r2, sl
 8006d04:	4649      	mov	r1, r9
 8006d06:	616b      	str	r3, [r5, #20]
 8006d08:	4628      	mov	r0, r5
 8006d0a:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8006d0e:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8006d12:	f7ff fede 	bl	8006ad2 <_ZN8touchgfx8Drawable5setXYEss>
 8006d16:	9a01      	ldr	r2, [sp, #4]
 8006d18:	4b17      	ldr	r3, [pc, #92]	; (8006d78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>)
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	801a      	strh	r2, [r3, #0]
 8006d1e:	9a02      	ldr	r2, [sp, #8]
 8006d20:	4b16      	ldr	r3, [pc, #88]	; (8006d7c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>)
 8006d22:	801a      	strh	r2, [r3, #0]
 8006d24:	9a03      	ldr	r2, [sp, #12]
 8006d26:	4b11      	ldr	r3, [pc, #68]	; (8006d6c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 8006d28:	801a      	strh	r2, [r3, #0]
 8006d2a:	4b11      	ldr	r3, [pc, #68]	; (8006d70 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8006d2c:	9a04      	ldr	r2, [sp, #16]
 8006d2e:	801a      	strh	r2, [r3, #0]
 8006d30:	6823      	ldr	r3, [r4, #0]
 8006d32:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	4798      	blx	r3
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	4798      	blx	r3
 8006d42:	b00b      	add	sp, #44	; 0x2c
 8006d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d48:	f002 fc16 	bl	8009578 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8006d4c:	f8ab 0000 	strh.w	r0, [fp]
 8006d50:	4638      	mov	r0, r7
 8006d52:	f002 fbd7 	bl	8009504 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8006d56:	e77d      	b.n	8006c54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x6c>
 8006d58:	462a      	mov	r2, r5
 8006d5a:	ab08      	add	r3, sp, #32
 8006d5c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8006d60:	6851      	ldr	r1, [r2, #4]
 8006d62:	c303      	stmia	r3!, {r0, r1}
 8006d64:	e7a9      	b.n	8006cba <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xd2>
 8006d66:	2000      	movs	r0, #0
 8006d68:	e7bf      	b.n	8006cea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 8006d6a:	bf00      	nop
 8006d6c:	20001148 	.word	0x20001148
 8006d70:	2000114a 	.word	0x2000114a
 8006d74:	2000114c 	.word	0x2000114c
 8006d78:	2000114e 	.word	0x2000114e
 8006d7c:	20001150 	.word	0x20001150

08006d80 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8006d80:	4b07      	ldr	r3, [pc, #28]	; (8006da0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8006d82:	b510      	push	{r4, lr}
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	4604      	mov	r4, r0
 8006d88:	b13b      	cbz	r3, 8006d9a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8006d8a:	6803      	ldr	r3, [r0, #0]
 8006d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8e:	4798      	blx	r3
 8006d90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006d92:	4283      	cmp	r3, r0
 8006d94:	d101      	bne.n	8006d9a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8006d96:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006d98:	bd10      	pop	{r4, pc}
 8006d9a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006d9c:	e7fc      	b.n	8006d98 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8006d9e:	bf00      	nop
 8006da0:	20001152 	.word	0x20001152

08006da4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8006da4:	b508      	push	{r3, lr}
 8006da6:	290d      	cmp	r1, #13
 8006da8:	d817      	bhi.n	8006dda <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8006daa:	e8df f001 	tbb	[pc, r1]
 8006dae:	090b      	.short	0x090b
 8006db0:	0d0d0d07 	.word	0x0d0d0d07
 8006db4:	1414140d 	.word	0x1414140d
 8006db8:	0d0d1414 	.word	0x0d0d1414
 8006dbc:	2020      	movs	r0, #32
 8006dbe:	bd08      	pop	{r3, pc}
 8006dc0:	2018      	movs	r0, #24
 8006dc2:	e7fc      	b.n	8006dbe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8006dc4:	2010      	movs	r0, #16
 8006dc6:	e7fa      	b.n	8006dbe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8006dc8:	4b05      	ldr	r3, [pc, #20]	; (8006de0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8006dca:	f44f 7111 	mov.w	r1, #580	; 0x244
 8006dce:	4a05      	ldr	r2, [pc, #20]	; (8006de4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8006dd0:	4805      	ldr	r0, [pc, #20]	; (8006de8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8006dd2:	f004 fd61 	bl	800b898 <__assert_func>
 8006dd6:	2008      	movs	r0, #8
 8006dd8:	e7f1      	b.n	8006dbe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8006dda:	2000      	movs	r0, #0
 8006ddc:	e7ef      	b.n	8006dbe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8006dde:	bf00      	nop
 8006de0:	0800de24 	.word	0x0800de24
 8006de4:	0800e102 	.word	0x0800e102
 8006de8:	0800dd2b 	.word	0x0800dd2b

08006dec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8006dec:	b570      	push	{r4, r5, r6, lr}
 8006dee:	460d      	mov	r5, r1
 8006df0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8006df4:	4616      	mov	r6, r2
 8006df6:	461c      	mov	r4, r3
 8006df8:	f7ff ffd4 	bl	8006da4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8006dfc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8006e00:	10c0      	asrs	r0, r0, #3
 8006e02:	fb06 5101 	mla	r1, r6, r1, r5
 8006e06:	fb00 4001 	mla	r0, r0, r1, r4
 8006e0a:	bd70      	pop	{r4, r5, r6, pc}

08006e0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8006e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e10:	b08a      	sub	sp, #40	; 0x28
 8006e12:	f04f 0c00 	mov.w	ip, #0
 8006e16:	4604      	mov	r4, r0
 8006e18:	469a      	mov	sl, r3
 8006e1a:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8006e1e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8006e22:	f1b8 0f02 	cmp.w	r8, #2
 8006e26:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8006e2a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8006e2e:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8006e32:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8006e36:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8006e3a:	f8cd c020 	str.w	ip, [sp, #32]
 8006e3e:	d030      	beq.n	8006ea2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8006e40:	2bff      	cmp	r3, #255	; 0xff
 8006e42:	d12c      	bne.n	8006e9e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8006e44:	4560      	cmp	r0, ip
 8006e46:	bf14      	ite	ne
 8006e48:	2004      	movne	r0, #4
 8006e4a:	2001      	moveq	r0, #1
 8006e4c:	9204      	str	r2, [sp, #16]
 8006e4e:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8006e52:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8006e56:	f8ad 201c 	strh.w	r2, [sp, #28]
 8006e5a:	f8ad 6018 	strh.w	r6, [sp, #24]
 8006e5e:	f8ad 501a 	strh.w	r5, [sp, #26]
 8006e62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e66:	4620      	mov	r0, r4
 8006e68:	f7ff ff8a 	bl	8006d80 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8006e6c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8006e70:	4603      	mov	r3, r0
 8006e72:	4651      	mov	r1, sl
 8006e74:	4620      	mov	r0, r4
 8006e76:	e9cd 9700 	strd	r9, r7, [sp]
 8006e7a:	f7ff ffb7 	bl	8006dec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8006e7e:	f8ad 901e 	strh.w	r9, [sp, #30]
 8006e82:	9005      	str	r0, [sp, #20]
 8006e84:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8006e88:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8006e8c:	b106      	cbz	r6, 8006e90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8006e8e:	b98d      	cbnz	r5, 8006eb4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8006e90:	4b12      	ldr	r3, [pc, #72]	; (8006edc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8006e92:	f240 11c3 	movw	r1, #451	; 0x1c3
 8006e96:	4a12      	ldr	r2, [pc, #72]	; (8006ee0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8006e98:	4812      	ldr	r0, [pc, #72]	; (8006ee4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8006e9a:	f004 fcfd 	bl	800b898 <__assert_func>
 8006e9e:	2004      	movs	r0, #4
 8006ea0:	e7d4      	b.n	8006e4c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8006ea2:	2bff      	cmp	r3, #255	; 0xff
 8006ea4:	d104      	bne.n	8006eb0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	bf14      	ite	ne
 8006eaa:	2040      	movne	r0, #64	; 0x40
 8006eac:	2020      	moveq	r0, #32
 8006eae:	e7cd      	b.n	8006e4c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8006eb0:	2040      	movs	r0, #64	; 0x40
 8006eb2:	e7cb      	b.n	8006e4c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	9d02      	ldr	r5, [sp, #8]
 8006eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebc:	4798      	blx	r3
 8006ebe:	4228      	tst	r0, r5
 8006ec0:	d104      	bne.n	8006ecc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8006ec2:	4b09      	ldr	r3, [pc, #36]	; (8006ee8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8006ec4:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8006ec8:	4a05      	ldr	r2, [pc, #20]	; (8006ee0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8006eca:	e7e5      	b.n	8006e98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8006ecc:	6860      	ldr	r0, [r4, #4]
 8006ece:	a902      	add	r1, sp, #8
 8006ed0:	6803      	ldr	r3, [r0, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	4798      	blx	r3
 8006ed6:	b00a      	add	sp, #40	; 0x28
 8006ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006edc:	0800dda7 	.word	0x0800dda7
 8006ee0:	0800dfa4 	.word	0x0800dfa4
 8006ee4:	0800dd2b 	.word	0x0800dd2b
 8006ee8:	0800dddf 	.word	0x0800dddf

08006eec <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8006eec:	b510      	push	{r4, lr}
 8006eee:	b08a      	sub	sp, #40	; 0x28
 8006ef0:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8006ef4:	9408      	str	r4, [sp, #32]
 8006ef6:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8006efa:	9407      	str	r4, [sp, #28]
 8006efc:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8006f00:	9406      	str	r4, [sp, #24]
 8006f02:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8006f06:	9405      	str	r4, [sp, #20]
 8006f08:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8006f0c:	9404      	str	r4, [sp, #16]
 8006f0e:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8006f12:	9403      	str	r4, [sp, #12]
 8006f14:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8006f18:	9402      	str	r4, [sp, #8]
 8006f1a:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8006f1e:	e9cd 3400 	strd	r3, r4, [sp]
 8006f22:	4613      	mov	r3, r2
 8006f24:	2200      	movs	r2, #0
 8006f26:	f7ff ff71 	bl	8006e0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8006f2a:	b00a      	add	sp, #40	; 0x28
 8006f2c:	bd10      	pop	{r4, pc}
	...

08006f30 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8006f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f32:	b08b      	sub	sp, #44	; 0x2c
 8006f34:	4616      	mov	r6, r2
 8006f36:	460d      	mov	r5, r1
 8006f38:	461f      	mov	r7, r3
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	f7ff fdd6 	bl	8006aec <_ZN8touchgfx3HAL3lcdEv>
 8006f40:	6803      	ldr	r3, [r0, #0]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	4798      	blx	r3
 8006f46:	4b0e      	ldr	r3, [pc, #56]	; (8006f80 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	4629      	mov	r1, r5
 8006f4c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	4620      	mov	r0, r4
 8006f54:	9306      	str	r3, [sp, #24]
 8006f56:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8006f5a:	9305      	str	r3, [sp, #20]
 8006f5c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8006f60:	9304      	str	r3, [sp, #16]
 8006f62:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8006f66:	9303      	str	r3, [sp, #12]
 8006f68:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8006f6c:	9302      	str	r3, [sp, #8]
 8006f6e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8006f72:	e9cd 7300 	strd	r7, r3, [sp]
 8006f76:	4633      	mov	r3, r6
 8006f78:	f7ff ff48 	bl	8006e0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8006f7c:	b00b      	add	sp, #44	; 0x2c
 8006f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f80:	2000114e 	.word	0x2000114e

08006f84 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8006f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f88:	461f      	mov	r7, r3
 8006f8a:	4b14      	ldr	r3, [pc, #80]	; (8006fdc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8006f8c:	b08a      	sub	sp, #40	; 0x28
 8006f8e:	4616      	mov	r6, r2
 8006f90:	f8b3 8000 	ldrh.w	r8, [r3]
 8006f94:	460d      	mov	r5, r1
 8006f96:	4604      	mov	r4, r0
 8006f98:	f7ff fda8 	bl	8006aec <_ZN8touchgfx3HAL3lcdEv>
 8006f9c:	6803      	ldr	r3, [r0, #0]
 8006f9e:	6a1b      	ldr	r3, [r3, #32]
 8006fa0:	4798      	blx	r3
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	9008      	str	r0, [sp, #32]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	4629      	mov	r1, r5
 8006faa:	4620      	mov	r0, r4
 8006fac:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	9305      	str	r3, [sp, #20]
 8006fb4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8006fb8:	9304      	str	r3, [sp, #16]
 8006fba:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8006fbe:	9303      	str	r3, [sp, #12]
 8006fc0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8006fc4:	9302      	str	r3, [sp, #8]
 8006fc6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8006fca:	e9cd 7300 	strd	r7, r3, [sp]
 8006fce:	4633      	mov	r3, r6
 8006fd0:	f7ff ff1c 	bl	8006e0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8006fd4:	b00a      	add	sp, #40	; 0x28
 8006fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fda:	bf00      	nop
 8006fdc:	2000114e 	.word	0x2000114e

08006fe0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8006fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe4:	b08b      	sub	sp, #44	; 0x2c
 8006fe6:	469b      	mov	fp, r3
 8006fe8:	4604      	mov	r4, r0
 8006fea:	4692      	mov	sl, r2
 8006fec:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8006ff0:	2600      	movs	r6, #0
 8006ff2:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8006ff6:	4689      	mov	r9, r1
 8006ff8:	2fff      	cmp	r7, #255	; 0xff
 8006ffa:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8006ffe:	9608      	str	r6, [sp, #32]
 8007000:	bf14      	ite	ne
 8007002:	2308      	movne	r3, #8
 8007004:	2302      	moveq	r3, #2
 8007006:	e9cd 3602 	strd	r3, r6, [sp, #8]
 800700a:	f7ff feb9 	bl	8006d80 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800700e:	465a      	mov	r2, fp
 8007010:	4603      	mov	r3, r0
 8007012:	4651      	mov	r1, sl
 8007014:	4620      	mov	r0, r4
 8007016:	e9cd 8500 	strd	r8, r5, [sp]
 800701a:	f7ff fee7 	bl	8006dec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800701e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8007022:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8007026:	f8ad 3018 	strh.w	r3, [sp, #24]
 800702a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800702e:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8007032:	f8ad 301a 	strh.w	r3, [sp, #26]
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	9d02      	ldr	r5, [sp, #8]
 800703a:	9005      	str	r0, [sp, #20]
 800703c:	4620      	mov	r0, r4
 800703e:	f8ad 601c 	strh.w	r6, [sp, #28]
 8007042:	f8ad 801e 	strh.w	r8, [sp, #30]
 8007046:	f8cd 9020 	str.w	r9, [sp, #32]
 800704a:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 800704e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007050:	4798      	blx	r3
 8007052:	4228      	tst	r0, r5
 8007054:	d106      	bne.n	8007064 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8007056:	4b07      	ldr	r3, [pc, #28]	; (8007074 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8007058:	f240 11fb 	movw	r1, #507	; 0x1fb
 800705c:	4a06      	ldr	r2, [pc, #24]	; (8007078 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 800705e:	4807      	ldr	r0, [pc, #28]	; (800707c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8007060:	f004 fc1a 	bl	800b898 <__assert_func>
 8007064:	6860      	ldr	r0, [r4, #4]
 8007066:	a902      	add	r1, sp, #8
 8007068:	6803      	ldr	r3, [r0, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	4798      	blx	r3
 800706e:	b00b      	add	sp, #44	; 0x2c
 8007070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007074:	0800dddf 	.word	0x0800dddf
 8007078:	0800e06d 	.word	0x0800e06d
 800707c:	0800dd2b 	.word	0x0800dd2b

08007080 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8007080:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007084:	461f      	mov	r7, r3
 8007086:	4b0b      	ldr	r3, [pc, #44]	; (80070b4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8007088:	460d      	mov	r5, r1
 800708a:	4616      	mov	r6, r2
 800708c:	f8b3 8000 	ldrh.w	r8, [r3]
 8007090:	4604      	mov	r4, r0
 8007092:	f7ff fd2b 	bl	8006aec <_ZN8touchgfx3HAL3lcdEv>
 8007096:	6803      	ldr	r3, [r0, #0]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	4798      	blx	r3
 800709c:	463b      	mov	r3, r7
 800709e:	4632      	mov	r2, r6
 80070a0:	4629      	mov	r1, r5
 80070a2:	e9cd 8000 	strd	r8, r0, [sp]
 80070a6:	4620      	mov	r0, r4
 80070a8:	f7ff fea0 	bl	8006dec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80070ac:	b002      	add	sp, #8
 80070ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070b2:	bf00      	nop
 80070b4:	2000114e 	.word	0x2000114e

080070b8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 80070b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070bc:	4698      	mov	r8, r3
 80070be:	b088      	sub	sp, #32
 80070c0:	2300      	movs	r3, #0
 80070c2:	4617      	mov	r7, r2
 80070c4:	4604      	mov	r4, r0
 80070c6:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80070ca:	9306      	str	r3, [sp, #24]
 80070cc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80070d0:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80070d4:	f8ad 6010 	strh.w	r6, [sp, #16]
 80070d8:	f8ad 5012 	strh.w	r5, [sp, #18]
 80070dc:	e9cd 3100 	strd	r3, r1, [sp]
 80070e0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80070e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80070e8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80070ec:	f88d 301c 	strb.w	r3, [sp, #28]
 80070f0:	f7ff fe46 	bl	8006d80 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80070f4:	4642      	mov	r2, r8
 80070f6:	4603      	mov	r3, r0
 80070f8:	4639      	mov	r1, r7
 80070fa:	4620      	mov	r0, r4
 80070fc:	f7ff ffc0 	bl	8007080 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8007100:	4b16      	ldr	r3, [pc, #88]	; (800715c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8007102:	9003      	str	r0, [sp, #12]
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	f8ad 3016 	strh.w	r3, [sp, #22]
 800710a:	f7ff fcef 	bl	8006aec <_ZN8touchgfx3HAL3lcdEv>
 800710e:	6803      	ldr	r3, [r0, #0]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	4798      	blx	r3
 8007114:	f88d 001e 	strb.w	r0, [sp, #30]
 8007118:	f88d 001d 	strb.w	r0, [sp, #29]
 800711c:	b106      	cbz	r6, 8007120 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 800711e:	b935      	cbnz	r5, 800712e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8007120:	4b0f      	ldr	r3, [pc, #60]	; (8007160 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8007122:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8007126:	4a0f      	ldr	r2, [pc, #60]	; (8007164 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8007128:	480f      	ldr	r0, [pc, #60]	; (8007168 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 800712a:	f004 fbb5 	bl	800b898 <__assert_func>
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	4620      	mov	r0, r4
 8007132:	9d00      	ldr	r5, [sp, #0]
 8007134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007136:	4798      	blx	r3
 8007138:	4228      	tst	r0, r5
 800713a:	d104      	bne.n	8007146 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 800713c:	4b0b      	ldr	r3, [pc, #44]	; (800716c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 800713e:	f240 11e1 	movw	r1, #481	; 0x1e1
 8007142:	4a08      	ldr	r2, [pc, #32]	; (8007164 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8007144:	e7f0      	b.n	8007128 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8007146:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007148:	4669      	mov	r1, sp
 800714a:	6860      	ldr	r0, [r4, #4]
 800714c:	9306      	str	r3, [sp, #24]
 800714e:	6803      	ldr	r3, [r0, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	4798      	blx	r3
 8007154:	b008      	add	sp, #32
 8007156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800715a:	bf00      	nop
 800715c:	2000114e 	.word	0x2000114e
 8007160:	0800dda7 	.word	0x0800dda7
 8007164:	0800de56 	.word	0x0800de56
 8007168:	0800dd2b 	.word	0x0800dd2b
 800716c:	0800dddf 	.word	0x0800dddf

08007170 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8007170:	b570      	push	{r4, r5, r6, lr}
 8007172:	b08a      	sub	sp, #40	; 0x28
 8007174:	4604      	mov	r4, r0
 8007176:	466b      	mov	r3, sp
 8007178:	e883 0006 	stmia.w	r3, {r1, r2}
 800717c:	4b1f      	ldr	r3, [pc, #124]	; (80071fc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	b933      	cbnz	r3, 8007190 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8007182:	4b1f      	ldr	r3, [pc, #124]	; (8007200 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8007184:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8007188:	4a1e      	ldr	r2, [pc, #120]	; (8007204 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 800718a:	481f      	ldr	r0, [pc, #124]	; (8007208 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 800718c:	f004 fb84 	bl	800b898 <__assert_func>
 8007190:	2300      	movs	r3, #0
 8007192:	f8bd 5000 	ldrh.w	r5, [sp]
 8007196:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 800719a:	9308      	str	r3, [sp, #32]
 800719c:	2301      	movs	r3, #1
 800719e:	9302      	str	r3, [sp, #8]
 80071a0:	6803      	ldr	r3, [r0, #0]
 80071a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a4:	4798      	blx	r3
 80071a6:	4632      	mov	r2, r6
 80071a8:	4629      	mov	r1, r5
 80071aa:	4603      	mov	r3, r0
 80071ac:	4620      	mov	r0, r4
 80071ae:	f7ff ff67 	bl	8007080 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80071b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80071b4:	9003      	str	r0, [sp, #12]
 80071b6:	9305      	str	r3, [sp, #20]
 80071b8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80071bc:	f8ad 3018 	strh.w	r3, [sp, #24]
 80071c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80071c4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80071c8:	4b10      	ldr	r3, [pc, #64]	; (800720c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80071ca:	881b      	ldrh	r3, [r3, #0]
 80071cc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80071d0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80071d4:	f7ff fc8a 	bl	8006aec <_ZN8touchgfx3HAL3lcdEv>
 80071d8:	6803      	ldr	r3, [r0, #0]
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	4798      	blx	r3
 80071de:	23ff      	movs	r3, #255	; 0xff
 80071e0:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80071e4:	a902      	add	r1, sp, #8
 80071e6:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80071ea:	6860      	ldr	r0, [r4, #4]
 80071ec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80071f0:	6803      	ldr	r3, [r0, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	4798      	blx	r3
 80071f6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80071f8:	b00a      	add	sp, #40	; 0x28
 80071fa:	bd70      	pop	{r4, r5, r6, pc}
 80071fc:	20001153 	.word	0x20001153
 8007200:	0800dc78 	.word	0x0800dc78
 8007204:	0800defa 	.word	0x0800defa
 8007208:	0800dd2b 	.word	0x0800dd2b
 800720c:	2000114e 	.word	0x2000114e

08007210 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8007210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007212:	b08b      	sub	sp, #44	; 0x2c
 8007214:	4604      	mov	r4, r0
 8007216:	466d      	mov	r5, sp
 8007218:	e885 0006 	stmia.w	r5, {r1, r2}
 800721c:	461d      	mov	r5, r3
 800721e:	2300      	movs	r3, #0
 8007220:	f8bd 6000 	ldrh.w	r6, [sp]
 8007224:	9308      	str	r3, [sp, #32]
 8007226:	2301      	movs	r3, #1
 8007228:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800722c:	9302      	str	r3, [sp, #8]
 800722e:	6803      	ldr	r3, [r0, #0]
 8007230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007232:	4798      	blx	r3
 8007234:	463a      	mov	r2, r7
 8007236:	4631      	mov	r1, r6
 8007238:	4603      	mov	r3, r0
 800723a:	4620      	mov	r0, r4
 800723c:	f7ff ff20 	bl	8007080 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8007240:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007244:	9003      	str	r0, [sp, #12]
 8007246:	f8ad 3018 	strh.w	r3, [sp, #24]
 800724a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800724e:	9505      	str	r5, [sp, #20]
 8007250:	f8ad 301a 	strh.w	r3, [sp, #26]
 8007254:	4b0d      	ldr	r3, [pc, #52]	; (800728c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	f8ad 301c 	strh.w	r3, [sp, #28]
 800725c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800725e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007262:	f7ff fc43 	bl	8006aec <_ZN8touchgfx3HAL3lcdEv>
 8007266:	6803      	ldr	r3, [r0, #0]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	4798      	blx	r3
 800726c:	23ff      	movs	r3, #255	; 0xff
 800726e:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8007272:	a902      	add	r1, sp, #8
 8007274:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8007278:	6860      	ldr	r0, [r4, #4]
 800727a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800727e:	6803      	ldr	r3, [r0, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	4798      	blx	r3
 8007284:	4628      	mov	r0, r5
 8007286:	b00b      	add	sp, #44	; 0x2c
 8007288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800728a:	bf00      	nop
 800728c:	2000114e 	.word	0x2000114e

08007290 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8007290:	b570      	push	{r4, r5, r6, lr}
 8007292:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8007296:	4604      	mov	r4, r0
 8007298:	b19b      	cbz	r3, 80072c2 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800729a:	2002      	movs	r0, #2
 800729c:	f7fc ffb0 	bl	8004200 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80072a0:	2300      	movs	r3, #0
 80072a2:	4620      	mov	r0, r4
 80072a4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80072a8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 80072b2:	f7ff fd65 	bl	8006d80 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80072b6:	4601      	mov	r1, r0
 80072b8:	4620      	mov	r0, r4
 80072ba:	462b      	mov	r3, r5
 80072bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80072c0:	4718      	bx	r3
 80072c2:	bd70      	pop	{r4, r5, r6, pc}

080072c4 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>:
 80072c4:	b538      	push	{r3, r4, r5, lr}
 80072c6:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 80072ca:	4604      	mov	r4, r0
 80072cc:	460d      	mov	r5, r1
 80072ce:	428a      	cmp	r2, r1
 80072d0:	d008      	beq.n	80072e4 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x20>
 80072d2:	2a01      	cmp	r2, #1
 80072d4:	6803      	ldr	r3, [r0, #0]
 80072d6:	d106      	bne.n	80072e6 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 80072d8:	b929      	cbnz	r1, 80072e6 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 80072da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072de:	4798      	blx	r3
 80072e0:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 80072e4:	bd38      	pop	{r3, r4, r5, pc}
 80072e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072ea:	4620      	mov	r0, r4
 80072ec:	e7f7      	b.n	80072de <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x1a>
	...

080072f0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80072f0:	4b0d      	ldr	r3, [pc, #52]	; (8007328 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80072f2:	b510      	push	{r4, lr}
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	4604      	mov	r4, r0
 80072f8:	b95b      	cbnz	r3, 8007312 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80072fa:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d007      	beq.n	8007312 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8007302:	6840      	ldr	r0, [r0, #4]
 8007304:	f000 f934 	bl	8007570 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8007308:	b118      	cbz	r0, 8007312 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800730a:	6862      	ldr	r2, [r4, #4]
 800730c:	7a53      	ldrb	r3, [r2, #9]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d0fc      	beq.n	800730c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8007312:	f7fd f883 	bl	800441c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8007316:	4620      	mov	r0, r4
 8007318:	2100      	movs	r1, #0
 800731a:	f7ff ffd3 	bl	80072c4 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 800731e:	4620      	mov	r0, r4
 8007320:	f7ff fd2e 	bl	8006d80 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8007324:	bd10      	pop	{r4, pc}
 8007326:	bf00      	nop
 8007328:	20001152 	.word	0x20001152

0800732c <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800732c:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8007330:	1a13      	subs	r3, r2, r0
 8007332:	4258      	negs	r0, r3
 8007334:	4158      	adcs	r0, r3
 8007336:	4770      	bx	lr

08007338 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8007338:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800733c:	1a9b      	subs	r3, r3, r2
 800733e:	2b00      	cmp	r3, #0
 8007340:	bfdc      	itt	le
 8007342:	6882      	ldrle	r2, [r0, #8]
 8007344:	189b      	addle	r3, r3, r2
 8007346:	2b01      	cmp	r3, #1
 8007348:	bfcc      	ite	gt
 800734a:	2000      	movgt	r0, #0
 800734c:	2001      	movle	r0, #1
 800734e:	4770      	bx	lr

08007350 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8007350:	6902      	ldr	r2, [r0, #16]
 8007352:	6840      	ldr	r0, [r0, #4]
 8007354:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8007358:	4770      	bx	lr

0800735a <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800735a:	6803      	ldr	r3, [r0, #0]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	4718      	bx	r3

08007360 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8007360:	4770      	bx	lr

08007362 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8007362:	4770      	bx	lr

08007364 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8007364:	4770      	bx	lr
	...

08007368 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8007368:	2301      	movs	r3, #1
 800736a:	b570      	push	{r4, r5, r6, lr}
 800736c:	7203      	strb	r3, [r0, #8]
 800736e:	4604      	mov	r4, r0
 8007370:	6840      	ldr	r0, [r0, #4]
 8007372:	6803      	ldr	r3, [r0, #0]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	4798      	blx	r3
 8007378:	6803      	ldr	r3, [r0, #0]
 800737a:	4605      	mov	r5, r0
 800737c:	2b08      	cmp	r3, #8
 800737e:	d01e      	beq.n	80073be <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8007380:	d80b      	bhi.n	800739a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8007382:	2b02      	cmp	r3, #2
 8007384:	d027      	beq.n	80073d6 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8007386:	2b04      	cmp	r3, #4
 8007388:	d011      	beq.n	80073ae <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800738a:	2b01      	cmp	r3, #1
 800738c:	d028      	beq.n	80073e0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800738e:	4b17      	ldr	r3, [pc, #92]	; (80073ec <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8007390:	218c      	movs	r1, #140	; 0x8c
 8007392:	4a17      	ldr	r2, [pc, #92]	; (80073f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8007394:	4817      	ldr	r0, [pc, #92]	; (80073f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8007396:	f004 fa7f 	bl	800b898 <__assert_func>
 800739a:	2b40      	cmp	r3, #64	; 0x40
 800739c:	d020      	beq.n	80073e0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800739e:	d801      	bhi.n	80073a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80073a0:	2b20      	cmp	r3, #32
 80073a2:	e7f3      	b.n	800738c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80073a4:	2b80      	cmp	r3, #128	; 0x80
 80073a6:	d01b      	beq.n	80073e0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80073a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ac:	e7ee      	b.n	800738c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	7f01      	ldrb	r1, [r0, #28]
 80073b2:	4620      	mov	r0, r4
 80073b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b6:	4798      	blx	r3
 80073b8:	6823      	ldr	r3, [r4, #0]
 80073ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073bc:	e006      	b.n	80073cc <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	7f01      	ldrb	r1, [r0, #28]
 80073c2:	4620      	mov	r0, r4
 80073c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c6:	4798      	blx	r3
 80073c8:	6823      	ldr	r3, [r4, #0]
 80073ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073cc:	4629      	mov	r1, r5
 80073ce:	4620      	mov	r0, r4
 80073d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80073d4:	4718      	bx	r3
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	4620      	mov	r0, r4
 80073da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073dc:	4798      	blx	r3
 80073de:	e7f3      	b.n	80073c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 80073e0:	6823      	ldr	r3, [r4, #0]
 80073e2:	4620      	mov	r0, r4
 80073e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e6:	4798      	blx	r3
 80073e8:	e7e6      	b.n	80073b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 80073ea:	bf00      	nop
 80073ec:	0800e14b 	.word	0x0800e14b
 80073f0:	0800e20c 	.word	0x0800e20c
 80073f4:	0800e170 	.word	0x0800e170

080073f8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80073f8:	b570      	push	{r4, r5, r6, lr}
 80073fa:	4604      	mov	r4, r0
 80073fc:	460e      	mov	r6, r1
 80073fe:	6860      	ldr	r0, [r4, #4]
 8007400:	6803      	ldr	r3, [r0, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	4798      	blx	r3
 8007406:	2800      	cmp	r0, #0
 8007408:	d1f9      	bne.n	80073fe <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800740a:	4d0d      	ldr	r5, [pc, #52]	; (8007440 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800740c:	6828      	ldr	r0, [r5, #0]
 800740e:	6803      	ldr	r3, [r0, #0]
 8007410:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007412:	4798      	blx	r3
 8007414:	f7fd f812 	bl	800443c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8007418:	6828      	ldr	r0, [r5, #0]
 800741a:	2101      	movs	r1, #1
 800741c:	f7ff ff52 	bl	80072c4 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 8007420:	6860      	ldr	r0, [r4, #4]
 8007422:	4631      	mov	r1, r6
 8007424:	6803      	ldr	r3, [r0, #0]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	4798      	blx	r3
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	4620      	mov	r0, r4
 800742e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007430:	4798      	blx	r3
 8007432:	6828      	ldr	r0, [r5, #0]
 8007434:	6803      	ldr	r3, [r0, #0]
 8007436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800743a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800743c:	4718      	bx	r3
 800743e:	bf00      	nop
 8007440:	20001154 	.word	0x20001154

08007444 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8007444:	b508      	push	{r3, lr}
 8007446:	f7fc ffe9 	bl	800441c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800744a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800744e:	f7fc bfef 	b.w	8004430 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08007452 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8007452:	b510      	push	{r4, lr}
 8007454:	4604      	mov	r4, r0
 8007456:	2114      	movs	r1, #20
 8007458:	f003 ffda 	bl	800b410 <_ZdlPvj>
 800745c:	4620      	mov	r0, r4
 800745e:	bd10      	pop	{r4, pc}

08007460 <_ZN8touchgfx13DMA_Interface5startEv>:
 8007460:	b510      	push	{r4, lr}
 8007462:	4604      	mov	r4, r0
 8007464:	6840      	ldr	r0, [r0, #4]
 8007466:	6803      	ldr	r3, [r0, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4798      	blx	r3
 800746c:	b948      	cbnz	r0, 8007482 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800746e:	7a63      	ldrb	r3, [r4, #9]
 8007470:	b13b      	cbz	r3, 8007482 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8007472:	7a23      	ldrb	r3, [r4, #8]
 8007474:	b92b      	cbnz	r3, 8007482 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	4620      	mov	r0, r4
 800747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007480:	4718      	bx	r3
 8007482:	bd10      	pop	{r4, pc}

08007484 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8007484:	b510      	push	{r4, lr}
 8007486:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 800748a:	1b12      	subs	r2, r2, r4
 800748c:	2a00      	cmp	r2, #0
 800748e:	bfdc      	itt	le
 8007490:	6883      	ldrle	r3, [r0, #8]
 8007492:	18d2      	addle	r2, r2, r3
 8007494:	2a01      	cmp	r2, #1
 8007496:	dd18      	ble.n	80074ca <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8007498:	6843      	ldr	r3, [r0, #4]
 800749a:	f101 021c 	add.w	r2, r1, #28
 800749e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80074a2:	f851 4b04 	ldr.w	r4, [r1], #4
 80074a6:	4291      	cmp	r1, r2
 80074a8:	f843 4b04 	str.w	r4, [r3], #4
 80074ac:	d1f9      	bne.n	80074a2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 80074ae:	880a      	ldrh	r2, [r1, #0]
 80074b0:	801a      	strh	r2, [r3, #0]
 80074b2:	788a      	ldrb	r2, [r1, #2]
 80074b4:	709a      	strb	r2, [r3, #2]
 80074b6:	68c3      	ldr	r3, [r0, #12]
 80074b8:	6882      	ldr	r2, [r0, #8]
 80074ba:	f3bf 8f5b 	dmb	ish
 80074be:	3301      	adds	r3, #1
 80074c0:	429a      	cmp	r2, r3
 80074c2:	bfd8      	it	le
 80074c4:	1a9b      	suble	r3, r3, r2
 80074c6:	60c3      	str	r3, [r0, #12]
 80074c8:	bd10      	pop	{r4, pc}
 80074ca:	4b03      	ldr	r3, [pc, #12]	; (80074d8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80074cc:	2139      	movs	r1, #57	; 0x39
 80074ce:	4a03      	ldr	r2, [pc, #12]	; (80074dc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 80074d0:	4803      	ldr	r0, [pc, #12]	; (80074e0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 80074d2:	f004 f9e1 	bl	800b898 <__assert_func>
 80074d6:	bf00      	nop
 80074d8:	0800e196 	.word	0x0800e196
 80074dc:	0800e23c 	.word	0x0800e23c
 80074e0:	0800e170 	.word	0x0800e170

080074e4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80074e4:	b510      	push	{r4, lr}
 80074e6:	6803      	ldr	r3, [r0, #0]
 80074e8:	4604      	mov	r4, r0
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4798      	blx	r3
 80074ee:	b128      	cbz	r0, 80074fc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80074f0:	4b07      	ldr	r3, [pc, #28]	; (8007510 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80074f2:	213f      	movs	r1, #63	; 0x3f
 80074f4:	4a07      	ldr	r2, [pc, #28]	; (8007514 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80074f6:	4808      	ldr	r0, [pc, #32]	; (8007518 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80074f8:	f004 f9ce 	bl	800b898 <__assert_func>
 80074fc:	6923      	ldr	r3, [r4, #16]
 80074fe:	68a2      	ldr	r2, [r4, #8]
 8007500:	f3bf 8f5b 	dmb	ish
 8007504:	3301      	adds	r3, #1
 8007506:	429a      	cmp	r2, r3
 8007508:	bfd8      	it	le
 800750a:	1a9b      	suble	r3, r3, r2
 800750c:	6123      	str	r3, [r4, #16]
 800750e:	bd10      	pop	{r4, pc}
 8007510:	0800e1b9 	.word	0x0800e1b9
 8007514:	0800e28a 	.word	0x0800e28a
 8007518:	0800e170 	.word	0x0800e170

0800751c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800751c:	b570      	push	{r4, r5, r6, lr}
 800751e:	4604      	mov	r4, r0
 8007520:	6840      	ldr	r0, [r0, #4]
 8007522:	6803      	ldr	r3, [r0, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4798      	blx	r3
 8007528:	4605      	mov	r5, r0
 800752a:	b930      	cbnz	r0, 800753a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800752c:	7a23      	ldrb	r3, [r4, #8]
 800752e:	b123      	cbz	r3, 800753a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8007530:	6860      	ldr	r0, [r4, #4]
 8007532:	6803      	ldr	r3, [r0, #0]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	4798      	blx	r3
 8007538:	7225      	strb	r5, [r4, #8]
 800753a:	6860      	ldr	r0, [r4, #4]
 800753c:	6803      	ldr	r3, [r0, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4798      	blx	r3
 8007542:	b928      	cbnz	r0, 8007550 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	4620      	mov	r0, r4
 8007548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800754e:	4718      	bx	r3
 8007550:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007554:	f7fc bf78 	b.w	8004448 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08007558 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8007558:	b510      	push	{r4, lr}
 800755a:	6082      	str	r2, [r0, #8]
 800755c:	2200      	movs	r2, #0
 800755e:	4c03      	ldr	r4, [pc, #12]	; (800756c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8007560:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8007564:	e9c0 4100 	strd	r4, r1, [r0]
 8007568:	bd10      	pop	{r4, pc}
 800756a:	bf00      	nop
 800756c:	0800e1f0 	.word	0x0800e1f0

08007570 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8007570:	6840      	ldr	r0, [r0, #4]
 8007572:	6803      	ldr	r3, [r0, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4718      	bx	r3

08007578 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8007578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757c:	4696      	mov	lr, r2
 800757e:	b097      	sub	sp, #92	; 0x5c
 8007580:	4605      	mov	r5, r0
 8007582:	4614      	mov	r4, r2
 8007584:	460e      	mov	r6, r1
 8007586:	461f      	mov	r7, r3
 8007588:	f10d 0c1c 	add.w	ip, sp, #28
 800758c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8007590:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8007594:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8007598:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800759c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80075a0:	f8de 3000 	ldr.w	r3, [lr]
 80075a4:	f104 0e14 	add.w	lr, r4, #20
 80075a8:	f8cc 3000 	str.w	r3, [ip]
 80075ac:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80075b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80075b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80075b8:	f8de 3000 	ldr.w	r3, [lr]
 80075bc:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80075c0:	f8cc 3000 	str.w	r3, [ip]
 80075c4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80075c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80075cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80075d0:	f8de 3000 	ldr.w	r3, [lr]
 80075d4:	4631      	mov	r1, r6
 80075d6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80075d8:	4628      	mov	r0, r5
 80075da:	f8cc 3000 	str.w	r3, [ip]
 80075de:	682b      	ldr	r3, [r5, #0]
 80075e0:	9201      	str	r2, [sp, #4]
 80075e2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80075e4:	f8cd 8008 	str.w	r8, [sp, #8]
 80075e8:	9200      	str	r2, [sp, #0]
 80075ea:	aa07      	add	r2, sp, #28
 80075ec:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80075f0:	f8d3 b038 	ldr.w	fp, [r3, #56]	; 0x38
 80075f4:	463b      	mov	r3, r7
 80075f6:	47d8      	blx	fp
 80075f8:	46a6      	mov	lr, r4
 80075fa:	f10d 0c1c 	add.w	ip, sp, #28
 80075fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8007602:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007606:	f8de 3000 	ldr.w	r3, [lr]
 800760a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800760e:	343c      	adds	r4, #60	; 0x3c
 8007610:	f8cc 3000 	str.w	r3, [ip]
 8007614:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8007618:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800761c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007620:	f8de 3000 	ldr.w	r3, [lr]
 8007624:	f8cc 3000 	str.w	r3, [ip]
 8007628:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800762c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800762e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	4631      	mov	r1, r6
 8007636:	4628      	mov	r0, r5
 8007638:	f8cc 3000 	str.w	r3, [ip]
 800763c:	682b      	ldr	r3, [r5, #0]
 800763e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8007642:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007644:	f8cd 8008 	str.w	r8, [sp, #8]
 8007648:	9201      	str	r2, [sp, #4]
 800764a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800764c:	9200      	str	r2, [sp, #0]
 800764e:	aa07      	add	r2, sp, #28
 8007650:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8007652:	463b      	mov	r3, r7
 8007654:	47a0      	blx	r4
 8007656:	b017      	add	sp, #92	; 0x5c
 8007658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800765c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800765c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007660:	b08d      	sub	sp, #52	; 0x34
 8007662:	4688      	mov	r8, r1
 8007664:	f8d3 c000 	ldr.w	ip, [r3]
 8007668:	9916      	ldr	r1, [sp, #88]	; 0x58
 800766a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800766e:	680f      	ldr	r7, [r1, #0]
 8007670:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8007674:	eba7 070c 	sub.w	r7, r7, ip
 8007678:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800767c:	edd3 6a07 	vldr	s13, [r3, #28]
 8007680:	42bc      	cmp	r4, r7
 8007682:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007684:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8007688:	bfa8      	it	ge
 800768a:	463c      	movge	r4, r7
 800768c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8007690:	f9ba 1000 	ldrsh.w	r1, [sl]
 8007694:	ee07 4a90 	vmov	s15, r4
 8007698:	eb09 0e0c 	add.w	lr, r9, ip
 800769c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 80076a0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80076a4:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80076a8:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 80076ac:	4571      	cmp	r1, lr
 80076ae:	ee25 4a04 	vmul.f32	s8, s10, s8
 80076b2:	ee65 4a24 	vmul.f32	s9, s10, s9
 80076b6:	ee25 5a27 	vmul.f32	s10, s10, s15
 80076ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80076be:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80076c2:	ee32 1a05 	vadd.f32	s2, s4, s10
 80076c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80076ca:	ee36 0a84 	vadd.f32	s0, s13, s8
 80076ce:	ee61 1a87 	vmul.f32	s3, s3, s14
 80076d2:	ee22 2a07 	vmul.f32	s4, s4, s14
 80076d6:	f340 808c 	ble.w	80077f2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80076da:	eba1 060e 	sub.w	r6, r1, lr
 80076de:	fb96 f5f4 	sdiv	r5, r6, r4
 80076e2:	ee07 5a10 	vmov	s14, r5
 80076e6:	2d00      	cmp	r5, #0
 80076e8:	fb04 6615 	mls	r6, r4, r5, r6
 80076ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80076f0:	eea7 0a04 	vfma.f32	s0, s14, s8
 80076f4:	eee7 0a24 	vfma.f32	s1, s14, s9
 80076f8:	eea7 1a05 	vfma.f32	s2, s14, s10
 80076fc:	dd12      	ble.n	8007724 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80076fe:	ee70 6a44 	vsub.f32	s13, s0, s8
 8007702:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8007706:	ee31 2a45 	vsub.f32	s4, s2, s10
 800770a:	eef5 6a40 	vcmp.f32	s13, #0.0
 800770e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007712:	bf14      	ite	ne
 8007714:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8007718:	eeb0 7a67 	vmoveq.f32	s14, s15
 800771c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8007720:	ee22 2a07 	vmul.f32	s4, s4, s14
 8007724:	fb05 f204 	mul.w	r2, r5, r4
 8007728:	1abf      	subs	r7, r7, r2
 800772a:	4494      	add	ip, r2
 800772c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8007730:	4411      	add	r1, r2
 8007732:	eb09 020c 	add.w	r2, r9, ip
 8007736:	b209      	sxth	r1, r1
 8007738:	443a      	add	r2, r7
 800773a:	428a      	cmp	r2, r1
 800773c:	bfc4      	itt	gt
 800773e:	eba1 0209 	subgt.w	r2, r1, r9
 8007742:	eba2 070c 	subgt.w	r7, r2, ip
 8007746:	2f00      	cmp	r7, #0
 8007748:	dd50      	ble.n	80077ec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800774a:	fb97 f1f4 	sdiv	r1, r7, r4
 800774e:	fb04 7211 	mls	r2, r4, r1, r7
 8007752:	b90a      	cbnz	r2, 8007758 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8007754:	3901      	subs	r1, #1
 8007756:	4622      	mov	r2, r4
 8007758:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800775c:	6840      	ldr	r0, [r0, #4]
 800775e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8007762:	44b6      	add	lr, r6
 8007764:	f8d0 a000 	ldr.w	sl, [r0]
 8007768:	2900      	cmp	r1, #0
 800776a:	bfcc      	ite	gt
 800776c:	46a1      	movgt	r9, r4
 800776e:	4691      	movle	r9, r2
 8007770:	900b      	str	r0, [sp, #44]	; 0x2c
 8007772:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007774:	fb04 e505 	mla	r5, r4, r5, lr
 8007778:	eef0 6a42 	vmov.f32	s13, s4
 800777c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8007780:	9008      	str	r0, [sp, #32]
 8007782:	eeb0 7a61 	vmov.f32	s14, s3
 8007786:	9818      	ldr	r0, [sp, #96]	; 0x60
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800778e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8007792:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8007796:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007798:	445b      	add	r3, fp
 800779a:	9307      	str	r3, [sp, #28]
 800779c:	ee16 3a90 	vmov	r3, s13
 80077a0:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80077a4:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80077a8:	ee21 3a23 	vmul.f32	s6, s2, s7
 80077ac:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80077b0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80077b4:	ee17 7a90 	vmov	r7, s15
 80077b8:	ee73 7a42 	vsub.f32	s15, s6, s4
 80077bc:	fb97 f7f4 	sdiv	r7, r7, r4
 80077c0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80077c4:	ee17 ca90 	vmov	ip, s15
 80077c8:	fb9c fcf4 	sdiv	ip, ip, r4
 80077cc:	fb0c 3306 	mla	r3, ip, r6, r3
 80077d0:	9302      	str	r3, [sp, #8]
 80077d2:	ee17 3a10 	vmov	r3, s14
 80077d6:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80077da:	fb07 3706 	mla	r7, r7, r6, r3
 80077de:	eba9 0306 	sub.w	r3, r9, r6
 80077e2:	e9cd 4700 	strd	r4, r7, [sp]
 80077e6:	f8da 4008 	ldr.w	r4, [sl, #8]
 80077ea:	47a0      	blx	r4
 80077ec:	b00d      	add	sp, #52	; 0x34
 80077ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f2:	2500      	movs	r5, #0
 80077f4:	462e      	mov	r6, r5
 80077f6:	e799      	b.n	800772c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080077f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80077f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fc:	b0db      	sub	sp, #364	; 0x16c
 80077fe:	461d      	mov	r5, r3
 8007800:	4614      	mov	r4, r2
 8007802:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8007806:	910f      	str	r1, [sp, #60]	; 0x3c
 8007808:	4629      	mov	r1, r5
 800780a:	930a      	str	r3, [sp, #40]	; 0x28
 800780c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8007810:	9009      	str	r0, [sp, #36]	; 0x24
 8007812:	930b      	str	r3, [sp, #44]	; 0x2c
 8007814:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8007818:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800781c:	9310      	str	r3, [sp, #64]	; 0x40
 800781e:	6803      	ldr	r3, [r0, #0]
 8007820:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 8007822:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007826:	47b8      	blx	r7
 8007828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800782a:	6058      	str	r0, [r3, #4]
 800782c:	2800      	cmp	r0, #0
 800782e:	f000 83a1 	beq.w	8007f74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8007832:	682b      	ldr	r3, [r5, #0]
 8007834:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8007838:	ed94 7a02 	vldr	s14, [r4, #8]
 800783c:	9314      	str	r3, [sp, #80]	; 0x50
 800783e:	686b      	ldr	r3, [r5, #4]
 8007840:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007844:	9315      	str	r3, [sp, #84]	; 0x54
 8007846:	4bc1      	ldr	r3, [pc, #772]	; (8007b4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8007848:	7819      	ldrb	r1, [r3, #0]
 800784a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800784e:	2900      	cmp	r1, #0
 8007850:	bf16      	itet	ne
 8007852:	4619      	movne	r1, r3
 8007854:	4611      	moveq	r1, r2
 8007856:	4613      	movne	r3, r2
 8007858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800785c:	9116      	str	r1, [sp, #88]	; 0x58
 800785e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8007862:	f240 8387 	bls.w	8007f74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8007866:	ed94 7a07 	vldr	s14, [r4, #28]
 800786a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800786e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007872:	f240 837f 	bls.w	8007f74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8007876:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800787a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800787e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007882:	f240 8377 	bls.w	8007f74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8007886:	6822      	ldr	r2, [r4, #0]
 8007888:	4bb1      	ldr	r3, [pc, #708]	; (8007b50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800788a:	429a      	cmp	r2, r3
 800788c:	f2c0 8372 	blt.w	8007f74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8007890:	49b0      	ldr	r1, [pc, #704]	; (8007b54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8007892:	6963      	ldr	r3, [r4, #20]
 8007894:	428a      	cmp	r2, r1
 8007896:	f300 836d 	bgt.w	8007f74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800789a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800789e:	48ae      	ldr	r0, [pc, #696]	; (8007b58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80078a0:	33ff      	adds	r3, #255	; 0xff
 80078a2:	4283      	cmp	r3, r0
 80078a4:	f200 8366 	bhi.w	8007f74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80078a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80078aa:	4dac      	ldr	r5, [pc, #688]	; (8007b5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80078ac:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80078b0:	33ff      	adds	r3, #255	; 0xff
 80078b2:	42ab      	cmp	r3, r5
 80078b4:	f200 835e 	bhi.w	8007f74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80078b8:	6862      	ldr	r2, [r4, #4]
 80078ba:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 80078be:	33ff      	adds	r3, #255	; 0xff
 80078c0:	4283      	cmp	r3, r0
 80078c2:	f200 8357 	bhi.w	8007f74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80078c6:	69a1      	ldr	r1, [r4, #24]
 80078c8:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 80078cc:	33ff      	adds	r3, #255	; 0xff
 80078ce:	4283      	cmp	r3, r0
 80078d0:	f200 8350 	bhi.w	8007f74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80078d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80078d6:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 80078da:	30ff      	adds	r0, #255	; 0xff
 80078dc:	42a8      	cmp	r0, r5
 80078de:	f200 8349 	bhi.w	8007f74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80078e2:	428a      	cmp	r2, r1
 80078e4:	f280 8110 	bge.w	8007b08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80078e8:	429a      	cmp	r2, r3
 80078ea:	f300 8119 	bgt.w	8007b20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80078ee:	4299      	cmp	r1, r3
 80078f0:	f280 811d 	bge.w	8007b2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80078f4:	2502      	movs	r5, #2
 80078f6:	2701      	movs	r7, #1
 80078f8:	46a9      	mov	r9, r5
 80078fa:	46b8      	mov	r8, r7
 80078fc:	f04f 0a00 	mov.w	sl, #0
 8007900:	4621      	mov	r1, r4
 8007902:	a849      	add	r0, sp, #292	; 0x124
 8007904:	f001 fc00 	bl	8009108 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8007908:	4622      	mov	r2, r4
 800790a:	4653      	mov	r3, sl
 800790c:	a949      	add	r1, sp, #292	; 0x124
 800790e:	f8cd 9000 	str.w	r9, [sp]
 8007912:	a819      	add	r0, sp, #100	; 0x64
 8007914:	f001 fd28 	bl	8009368 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8007918:	4622      	mov	r2, r4
 800791a:	4653      	mov	r3, sl
 800791c:	a949      	add	r1, sp, #292	; 0x124
 800791e:	f8cd 8000 	str.w	r8, [sp]
 8007922:	a829      	add	r0, sp, #164	; 0xa4
 8007924:	f001 fd20 	bl	8009368 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8007928:	4643      	mov	r3, r8
 800792a:	4622      	mov	r2, r4
 800792c:	a949      	add	r1, sp, #292	; 0x124
 800792e:	f8cd 9000 	str.w	r9, [sp]
 8007932:	a839      	add	r0, sp, #228	; 0xe4
 8007934:	f001 fd18 	bl	8009368 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8007938:	42af      	cmp	r7, r5
 800793a:	af12      	add	r7, sp, #72	; 0x48
 800793c:	bfb7      	itett	lt
 800793e:	2300      	movlt	r3, #0
 8007940:	2301      	movge	r3, #1
 8007942:	ad29      	addlt	r5, sp, #164	; 0xa4
 8007944:	ac19      	addlt	r4, sp, #100	; 0x64
 8007946:	bfb1      	iteee	lt
 8007948:	930e      	strlt	r3, [sp, #56]	; 0x38
 800794a:	ad19      	addge	r5, sp, #100	; 0x64
 800794c:	930e      	strge	r3, [sp, #56]	; 0x38
 800794e:	ac29      	addge	r4, sp, #164	; 0xa4
 8007950:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007952:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007956:	e887 0003 	stmia.w	r7, {r0, r1}
 800795a:	b928      	cbnz	r0, 8007968 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800795c:	4b80      	ldr	r3, [pc, #512]	; (8007b60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800795e:	6818      	ldr	r0, [r3, #0]
 8007960:	6803      	ldr	r3, [r0, #0]
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	4798      	blx	r3
 8007966:	6038      	str	r0, [r7, #0]
 8007968:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800796a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800796e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007972:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8007974:	930c      	str	r3, [sp, #48]	; 0x30
 8007976:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007978:	6963      	ldr	r3, [r4, #20]
 800797a:	440b      	add	r3, r1
 800797c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8007980:	4408      	add	r0, r1
 8007982:	b200      	sxth	r0, r0
 8007984:	4283      	cmp	r3, r0
 8007986:	900d      	str	r0, [sp, #52]	; 0x34
 8007988:	f280 80dd 	bge.w	8007b46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800798c:	428b      	cmp	r3, r1
 800798e:	da08      	bge.n	80079a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8007990:	2a00      	cmp	r2, #0
 8007992:	dd06      	ble.n	80079a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8007994:	1acb      	subs	r3, r1, r3
 8007996:	429a      	cmp	r2, r3
 8007998:	f2c0 80e4 	blt.w	8007b64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800799c:	2b00      	cmp	r3, #0
 800799e:	f300 80e2 	bgt.w	8007b66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80079a2:	6967      	ldr	r7, [r4, #20]
 80079a4:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80079a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079aa:	443b      	add	r3, r7
 80079ac:	461f      	mov	r7, r3
 80079ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079b0:	1bdf      	subs	r7, r3, r7
 80079b2:	4297      	cmp	r7, r2
 80079b4:	bfa8      	it	ge
 80079b6:	4617      	movge	r7, r2
 80079b8:	2f00      	cmp	r7, #0
 80079ba:	f340 8166 	ble.w	8007c8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80079be:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80079c0:	6829      	ldr	r1, [r5, #0]
 80079c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80079c6:	f9bb 3000 	ldrsh.w	r3, [fp]
 80079ca:	4411      	add	r1, r2
 80079cc:	6820      	ldr	r0, [r4, #0]
 80079ce:	4299      	cmp	r1, r3
 80079d0:	dd1a      	ble.n	8007a08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80079d2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80079d6:	4402      	add	r2, r0
 80079d8:	440b      	add	r3, r1
 80079da:	b21b      	sxth	r3, r3
 80079dc:	429a      	cmp	r2, r3
 80079de:	dc13      	bgt.n	8007a08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80079e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80079e2:	a912      	add	r1, sp, #72	; 0x48
 80079e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	9206      	str	r2, [sp, #24]
 80079ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079ee:	9500      	str	r5, [sp, #0]
 80079f0:	9205      	str	r2, [sp, #20]
 80079f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079f4:	e9cd b203 	strd	fp, r2, [sp, #12]
 80079f8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80079fa:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80079fe:	aa49      	add	r2, sp, #292	; 0x124
 8007a00:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 8007a04:	4623      	mov	r3, r4
 8007a06:	47c8      	blx	r9
 8007a08:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8007a0c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8007a10:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8007a14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a18:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8007a1c:	68a1      	ldr	r1, [r4, #8]
 8007a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a22:	ed94 6a08 	vldr	s12, [r4, #32]
 8007a26:	edd4 6a07 	vldr	s13, [r4, #28]
 8007a2a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8007a2e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007a32:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8007a36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007a3a:	edc4 6a07 	vstr	s13, [r4, #28]
 8007a3e:	441a      	add	r2, r3
 8007a40:	6963      	ldr	r3, [r4, #20]
 8007a42:	3301      	adds	r3, #1
 8007a44:	6022      	str	r2, [r4, #0]
 8007a46:	6163      	str	r3, [r4, #20]
 8007a48:	69a3      	ldr	r3, [r4, #24]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	61a3      	str	r3, [r4, #24]
 8007a4e:	6923      	ldr	r3, [r4, #16]
 8007a50:	440b      	add	r3, r1
 8007a52:	68e1      	ldr	r1, [r4, #12]
 8007a54:	428b      	cmp	r3, r1
 8007a56:	6123      	str	r3, [r4, #16]
 8007a58:	db15      	blt.n	8007a86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8007a5a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8007a5e:	3201      	adds	r2, #1
 8007a60:	1a5b      	subs	r3, r3, r1
 8007a62:	ee76 6a26 	vadd.f32	s13, s12, s13
 8007a66:	6022      	str	r2, [r4, #0]
 8007a68:	6123      	str	r3, [r4, #16]
 8007a6a:	edc4 6a07 	vstr	s13, [r4, #28]
 8007a6e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8007a72:	ee36 7a87 	vadd.f32	s14, s13, s14
 8007a76:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8007a7a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8007a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a82:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8007a86:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8007a8a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8007a8e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8007a92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a96:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8007a9a:	68a9      	ldr	r1, [r5, #8]
 8007a9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aa0:	ed95 6a08 	vldr	s12, [r5, #32]
 8007aa4:	edd5 6a07 	vldr	s13, [r5, #28]
 8007aa8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8007aac:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007ab0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8007ab4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ab8:	edc5 6a07 	vstr	s13, [r5, #28]
 8007abc:	441a      	add	r2, r3
 8007abe:	696b      	ldr	r3, [r5, #20]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	602a      	str	r2, [r5, #0]
 8007ac4:	616b      	str	r3, [r5, #20]
 8007ac6:	69ab      	ldr	r3, [r5, #24]
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	61ab      	str	r3, [r5, #24]
 8007acc:	692b      	ldr	r3, [r5, #16]
 8007ace:	440b      	add	r3, r1
 8007ad0:	68e9      	ldr	r1, [r5, #12]
 8007ad2:	428b      	cmp	r3, r1
 8007ad4:	612b      	str	r3, [r5, #16]
 8007ad6:	db15      	blt.n	8007b04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8007ad8:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8007adc:	3201      	adds	r2, #1
 8007ade:	1a5b      	subs	r3, r3, r1
 8007ae0:	ee76 6a26 	vadd.f32	s13, s12, s13
 8007ae4:	602a      	str	r2, [r5, #0]
 8007ae6:	612b      	str	r3, [r5, #16]
 8007ae8:	edc5 6a07 	vstr	s13, [r5, #28]
 8007aec:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8007af0:	ee36 7a87 	vadd.f32	s14, s13, s14
 8007af4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8007af8:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8007afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b00:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8007b04:	3f01      	subs	r7, #1
 8007b06:	e757      	b.n	80079b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8007b08:	4299      	cmp	r1, r3
 8007b0a:	dc13      	bgt.n	8007b34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	da14      	bge.n	8007b3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8007b10:	2502      	movs	r5, #2
 8007b12:	2703      	movs	r7, #3
 8007b14:	f04f 0800 	mov.w	r8, #0
 8007b18:	46a9      	mov	r9, r5
 8007b1a:	f04f 0a01 	mov.w	sl, #1
 8007b1e:	e6ef      	b.n	8007900 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8007b20:	2501      	movs	r5, #1
 8007b22:	2700      	movs	r7, #0
 8007b24:	46a9      	mov	r9, r5
 8007b26:	46b8      	mov	r8, r7
 8007b28:	f04f 0a02 	mov.w	sl, #2
 8007b2c:	e6e8      	b.n	8007900 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8007b2e:	2501      	movs	r5, #1
 8007b30:	2702      	movs	r7, #2
 8007b32:	e6e1      	b.n	80078f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8007b34:	2500      	movs	r5, #0
 8007b36:	2701      	movs	r7, #1
 8007b38:	e7f4      	b.n	8007b24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8007b3a:	2702      	movs	r7, #2
 8007b3c:	2503      	movs	r5, #3
 8007b3e:	f04f 0900 	mov.w	r9, #0
 8007b42:	46b8      	mov	r8, r7
 8007b44:	e7e9      	b.n	8007b1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8007b46:	4613      	mov	r3, r2
 8007b48:	e728      	b.n	800799c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8007b4a:	bf00      	nop
 8007b4c:	2000114c 	.word	0x2000114c
 8007b50:	fffd8f01 	.word	0xfffd8f01
 8007b54:	00027100 	.word	0x00027100
 8007b58:	0004e1ff 	.word	0x0004e1ff
 8007b5c:	0004e1fe 	.word	0x0004e1fe
 8007b60:	20001154 	.word	0x20001154
 8007b64:	4613      	mov	r3, r2
 8007b66:	992b      	ldr	r1, [sp, #172]	; 0xac
 8007b68:	469e      	mov	lr, r3
 8007b6a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8007b6c:	469c      	mov	ip, r3
 8007b6e:	9111      	str	r1, [sp, #68]	; 0x44
 8007b70:	f04f 0900 	mov.w	r9, #0
 8007b74:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8007b78:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8007b7c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8007b80:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8007b84:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8007b88:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8007b8c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8007b90:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8007b94:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8007b98:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8007b9c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8007ba0:	f1bc 0f00 	cmp.w	ip, #0
 8007ba4:	d147      	bne.n	8007c36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8007ba6:	eb03 0c07 	add.w	ip, r3, r7
 8007baa:	1ad7      	subs	r7, r2, r3
 8007bac:	f1b9 0f00 	cmp.w	r9, #0
 8007bb0:	d009      	beq.n	8007bc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8007bb2:	9029      	str	r0, [sp, #164]	; 0xa4
 8007bb4:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8007bb8:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8007bbc:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8007bc0:	912d      	str	r1, [sp, #180]	; 0xb4
 8007bc2:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8007bc6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8007bc8:	f04f 0800 	mov.w	r8, #0
 8007bcc:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8007bd0:	9111      	str	r1, [sp, #68]	; 0x44
 8007bd2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8007bd6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8007bda:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8007bde:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8007be2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8007be6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8007bea:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8007bee:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8007bf2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8007bf6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8007bfa:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8007bfe:	f1be 0f00 	cmp.w	lr, #0
 8007c02:	d031      	beq.n	8007c68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8007c04:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8007c06:	4450      	add	r0, sl
 8007c08:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007c0c:	4431      	add	r1, r6
 8007c0e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8007c12:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8007c16:	4549      	cmp	r1, r9
 8007c18:	db08      	blt.n	8007c2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8007c1a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8007c1e:	3001      	adds	r0, #1
 8007c20:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8007c24:	eba1 0109 	sub.w	r1, r1, r9
 8007c28:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007c2c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007c30:	f04f 0801 	mov.w	r8, #1
 8007c34:	e7e3      	b.n	8007bfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8007c36:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8007c38:	4450      	add	r0, sl
 8007c3a:	ee37 7a24 	vadd.f32	s14, s14, s9
 8007c3e:	4431      	add	r1, r6
 8007c40:	ee77 7a84 	vadd.f32	s15, s15, s8
 8007c44:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8007c48:	4541      	cmp	r1, r8
 8007c4a:	db08      	blt.n	8007c5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8007c4c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8007c50:	3001      	adds	r0, #1
 8007c52:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007c56:	eba1 0108 	sub.w	r1, r1, r8
 8007c5a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007c5e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007c62:	f04f 0901 	mov.w	r9, #1
 8007c66:	e79b      	b.n	8007ba0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8007c68:	449c      	add	ip, r3
 8007c6a:	1aff      	subs	r7, r7, r3
 8007c6c:	f1b8 0f00 	cmp.w	r8, #0
 8007c70:	d009      	beq.n	8007c86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8007c72:	9019      	str	r0, [sp, #100]	; 0x64
 8007c74:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8007c78:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8007c7c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8007c80:	911d      	str	r1, [sp, #116]	; 0x74
 8007c82:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8007c86:	1ad2      	subs	r2, r2, r3
 8007c88:	e68b      	b.n	80079a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8007c8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c8c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 80d1 	beq.w	8007e36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8007c94:	ad19      	add	r5, sp, #100	; 0x64
 8007c96:	ac39      	add	r4, sp, #228	; 0xe4
 8007c98:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8007c9a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8007c9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007ca2:	930c      	str	r3, [sp, #48]	; 0x30
 8007ca4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007ca6:	6963      	ldr	r3, [r4, #20]
 8007ca8:	440b      	add	r3, r1
 8007caa:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8007cae:	4408      	add	r0, r1
 8007cb0:	b200      	sxth	r0, r0
 8007cb2:	4283      	cmp	r3, r0
 8007cb4:	900d      	str	r0, [sp, #52]	; 0x34
 8007cb6:	f280 80c1 	bge.w	8007e3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8007cba:	428b      	cmp	r3, r1
 8007cbc:	da08      	bge.n	8007cd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8007cbe:	2a00      	cmp	r2, #0
 8007cc0:	dd06      	ble.n	8007cd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8007cc2:	1acb      	subs	r3, r1, r3
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	f2c0 80bb 	blt.w	8007e40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f300 80b9 	bgt.w	8007e42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8007cd0:	6967      	ldr	r7, [r4, #20]
 8007cd2:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8007cd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cd8:	443b      	add	r3, r7
 8007cda:	461f      	mov	r7, r3
 8007cdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cde:	1bdf      	subs	r7, r3, r7
 8007ce0:	4297      	cmp	r7, r2
 8007ce2:	bfa8      	it	ge
 8007ce4:	4617      	movge	r7, r2
 8007ce6:	2f00      	cmp	r7, #0
 8007ce8:	f340 813c 	ble.w	8007f64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8007cec:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8007cee:	6829      	ldr	r1, [r5, #0]
 8007cf0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007cf4:	f9bb 3000 	ldrsh.w	r3, [fp]
 8007cf8:	4411      	add	r1, r2
 8007cfa:	6820      	ldr	r0, [r4, #0]
 8007cfc:	4299      	cmp	r1, r3
 8007cfe:	dd1a      	ble.n	8007d36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8007d00:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8007d04:	4402      	add	r2, r0
 8007d06:	440b      	add	r3, r1
 8007d08:	b21b      	sxth	r3, r3
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	dc13      	bgt.n	8007d36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8007d0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d10:	a912      	add	r1, sp, #72	; 0x48
 8007d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	9206      	str	r2, [sp, #24]
 8007d1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d1c:	9500      	str	r5, [sp, #0]
 8007d1e:	9205      	str	r2, [sp, #20]
 8007d20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d22:	e9cd b203 	strd	fp, r2, [sp, #12]
 8007d26:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007d28:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8007d2c:	aa49      	add	r2, sp, #292	; 0x124
 8007d2e:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 8007d32:	4623      	mov	r3, r4
 8007d34:	47c8      	blx	r9
 8007d36:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8007d3a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8007d3e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8007d42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d46:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8007d4a:	68a1      	ldr	r1, [r4, #8]
 8007d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d50:	ed94 6a08 	vldr	s12, [r4, #32]
 8007d54:	edd4 6a07 	vldr	s13, [r4, #28]
 8007d58:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8007d5c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007d60:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8007d64:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007d68:	edc4 6a07 	vstr	s13, [r4, #28]
 8007d6c:	441a      	add	r2, r3
 8007d6e:	6963      	ldr	r3, [r4, #20]
 8007d70:	3301      	adds	r3, #1
 8007d72:	6022      	str	r2, [r4, #0]
 8007d74:	6163      	str	r3, [r4, #20]
 8007d76:	69a3      	ldr	r3, [r4, #24]
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	61a3      	str	r3, [r4, #24]
 8007d7c:	6923      	ldr	r3, [r4, #16]
 8007d7e:	440b      	add	r3, r1
 8007d80:	68e1      	ldr	r1, [r4, #12]
 8007d82:	428b      	cmp	r3, r1
 8007d84:	6123      	str	r3, [r4, #16]
 8007d86:	db15      	blt.n	8007db4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8007d88:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8007d8c:	3201      	adds	r2, #1
 8007d8e:	1a5b      	subs	r3, r3, r1
 8007d90:	ee76 6a26 	vadd.f32	s13, s12, s13
 8007d94:	6022      	str	r2, [r4, #0]
 8007d96:	6123      	str	r3, [r4, #16]
 8007d98:	edc4 6a07 	vstr	s13, [r4, #28]
 8007d9c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8007da0:	ee36 7a87 	vadd.f32	s14, s13, s14
 8007da4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8007da8:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8007dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007db0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8007db4:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8007db8:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8007dbc:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8007dc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007dc4:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8007dc8:	68a9      	ldr	r1, [r5, #8]
 8007dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dce:	ed95 6a08 	vldr	s12, [r5, #32]
 8007dd2:	edd5 6a07 	vldr	s13, [r5, #28]
 8007dd6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8007dda:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007dde:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8007de2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007de6:	edc5 6a07 	vstr	s13, [r5, #28]
 8007dea:	441a      	add	r2, r3
 8007dec:	696b      	ldr	r3, [r5, #20]
 8007dee:	3301      	adds	r3, #1
 8007df0:	602a      	str	r2, [r5, #0]
 8007df2:	616b      	str	r3, [r5, #20]
 8007df4:	69ab      	ldr	r3, [r5, #24]
 8007df6:	3b01      	subs	r3, #1
 8007df8:	61ab      	str	r3, [r5, #24]
 8007dfa:	692b      	ldr	r3, [r5, #16]
 8007dfc:	440b      	add	r3, r1
 8007dfe:	68e9      	ldr	r1, [r5, #12]
 8007e00:	428b      	cmp	r3, r1
 8007e02:	612b      	str	r3, [r5, #16]
 8007e04:	db15      	blt.n	8007e32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8007e06:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8007e0a:	3201      	adds	r2, #1
 8007e0c:	1a5b      	subs	r3, r3, r1
 8007e0e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8007e12:	602a      	str	r2, [r5, #0]
 8007e14:	612b      	str	r3, [r5, #16]
 8007e16:	edc5 6a07 	vstr	s13, [r5, #28]
 8007e1a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8007e1e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8007e22:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8007e26:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8007e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e2e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8007e32:	3f01      	subs	r7, #1
 8007e34:	e757      	b.n	8007ce6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8007e36:	ad39      	add	r5, sp, #228	; 0xe4
 8007e38:	ac19      	add	r4, sp, #100	; 0x64
 8007e3a:	e72d      	b.n	8007c98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	e744      	b.n	8007cca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8007e40:	4613      	mov	r3, r2
 8007e42:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8007e44:	469e      	mov	lr, r3
 8007e46:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8007e4a:	461f      	mov	r7, r3
 8007e4c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8007e50:	f04f 0900 	mov.w	r9, #0
 8007e54:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8007e58:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8007e5c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8007e60:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8007e64:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8007e68:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8007e6a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8007e6e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8007e72:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8007e76:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8007e7a:	960e      	str	r6, [sp, #56]	; 0x38
 8007e7c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8007e80:	2f00      	cmp	r7, #0
 8007e82:	d146      	bne.n	8007f12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8007e84:	449c      	add	ip, r3
 8007e86:	1ad7      	subs	r7, r2, r3
 8007e88:	f1b9 0f00 	cmp.w	r9, #0
 8007e8c:	d009      	beq.n	8007ea2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8007e8e:	9039      	str	r0, [sp, #228]	; 0xe4
 8007e90:	913d      	str	r1, [sp, #244]	; 0xf4
 8007e92:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8007e96:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8007e9a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8007e9e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8007ea2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8007ea4:	f04f 0800 	mov.w	r8, #0
 8007ea8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8007eac:	910e      	str	r1, [sp, #56]	; 0x38
 8007eae:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8007eb2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8007eb6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8007eba:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8007ebe:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8007ec2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8007ec6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8007eca:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8007ece:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8007ed2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8007ed6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8007eda:	f1be 0f00 	cmp.w	lr, #0
 8007ede:	d030      	beq.n	8007f42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8007ee0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007ee2:	4450      	add	r0, sl
 8007ee4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007ee8:	4431      	add	r1, r6
 8007eea:	ee37 7a04 	vadd.f32	s14, s14, s8
 8007eee:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8007ef2:	4549      	cmp	r1, r9
 8007ef4:	db08      	blt.n	8007f08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8007ef6:	ee77 7a85 	vadd.f32	s15, s15, s10
 8007efa:	3001      	adds	r0, #1
 8007efc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8007f00:	eba1 0109 	sub.w	r1, r1, r9
 8007f04:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007f08:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007f0c:	f04f 0801 	mov.w	r8, #1
 8007f10:	e7e3      	b.n	8007eda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8007f12:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007f14:	4450      	add	r0, sl
 8007f16:	ee37 7a24 	vadd.f32	s14, s14, s9
 8007f1a:	4431      	add	r1, r6
 8007f1c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8007f20:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8007f24:	4541      	cmp	r1, r8
 8007f26:	db08      	blt.n	8007f3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8007f28:	ee76 6a85 	vadd.f32	s13, s13, s10
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007f32:	eba1 0108 	sub.w	r1, r1, r8
 8007f36:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007f3a:	3f01      	subs	r7, #1
 8007f3c:	f04f 0901 	mov.w	r9, #1
 8007f40:	e79e      	b.n	8007e80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8007f42:	449c      	add	ip, r3
 8007f44:	1aff      	subs	r7, r7, r3
 8007f46:	f1b8 0f00 	cmp.w	r8, #0
 8007f4a:	d009      	beq.n	8007f60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8007f4c:	9019      	str	r0, [sp, #100]	; 0x64
 8007f4e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8007f52:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8007f56:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8007f5a:	911d      	str	r1, [sp, #116]	; 0x74
 8007f5c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8007f60:	1ad2      	subs	r2, r2, r3
 8007f62:	e6b5      	b.n	8007cd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8007f64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	b923      	cbnz	r3, 8007f74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8007f6a:	4b04      	ldr	r3, [pc, #16]	; (8007f7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8007f6c:	6818      	ldr	r0, [r3, #0]
 8007f6e:	6803      	ldr	r3, [r0, #0]
 8007f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f72:	4798      	blx	r3
 8007f74:	b05b      	add	sp, #364	; 0x16c
 8007f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7a:	bf00      	nop
 8007f7c:	20001154 	.word	0x20001154

08007f80 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	b510      	push	{r4, lr}
 8007f84:	f9b0 4000 	ldrsh.w	r4, [r0]
 8007f88:	d00b      	beq.n	8007fa2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	d00e      	beq.n	8007fac <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d001      	beq.n	8007f96 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8007f92:	1860      	adds	r0, r4, r1
 8007f94:	bd10      	pop	{r4, pc}
 8007f96:	8880      	ldrh	r0, [r0, #4]
 8007f98:	4420      	add	r0, r4
 8007f9a:	b200      	sxth	r0, r0
 8007f9c:	1a80      	subs	r0, r0, r2
 8007f9e:	3801      	subs	r0, #1
 8007fa0:	e7f8      	b.n	8007f94 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8007fa2:	8880      	ldrh	r0, [r0, #4]
 8007fa4:	4420      	add	r0, r4
 8007fa6:	b200      	sxth	r0, r0
 8007fa8:	1a40      	subs	r0, r0, r1
 8007faa:	e7f8      	b.n	8007f9e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8007fac:	18a0      	adds	r0, r4, r2
 8007fae:	e7f1      	b.n	8007f94 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08007fb0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	b510      	push	{r4, lr}
 8007fb4:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8007fb8:	d006      	beq.n	8007fc8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	d00a      	beq.n	8007fd4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	bf14      	ite	ne
 8007fc2:	18a0      	addne	r0, r4, r2
 8007fc4:	1860      	addeq	r0, r4, r1
 8007fc6:	bd10      	pop	{r4, pc}
 8007fc8:	88c0      	ldrh	r0, [r0, #6]
 8007fca:	4420      	add	r0, r4
 8007fcc:	b200      	sxth	r0, r0
 8007fce:	1a80      	subs	r0, r0, r2
 8007fd0:	3801      	subs	r0, #1
 8007fd2:	e7f8      	b.n	8007fc6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8007fd4:	88c0      	ldrh	r0, [r0, #6]
 8007fd6:	4420      	add	r0, r4
 8007fd8:	b200      	sxth	r0, r0
 8007fda:	1a40      	subs	r0, r0, r1
 8007fdc:	e7f8      	b.n	8007fd0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08007fe0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8007fe0:	4b01      	ldr	r3, [pc, #4]	; (8007fe8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]
 8007fe6:	4770      	bx	lr
 8007fe8:	2000115c 	.word	0x2000115c

08007fec <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8007fec:	4603      	mov	r3, r0
 8007fee:	b1c8      	cbz	r0, 8008024 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8007ff0:	0c02      	lsrs	r2, r0, #16
 8007ff2:	0412      	lsls	r2, r2, #16
 8007ff4:	b9a2      	cbnz	r2, 8008020 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8007ff6:	0403      	lsls	r3, r0, #16
 8007ff8:	2010      	movs	r0, #16
 8007ffa:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007ffe:	bf04      	itt	eq
 8008000:	021b      	lsleq	r3, r3, #8
 8008002:	3008      	addeq	r0, #8
 8008004:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008008:	bf04      	itt	eq
 800800a:	011b      	lsleq	r3, r3, #4
 800800c:	3004      	addeq	r0, #4
 800800e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008012:	bf04      	itt	eq
 8008014:	009b      	lsleq	r3, r3, #2
 8008016:	3002      	addeq	r0, #2
 8008018:	2b00      	cmp	r3, #0
 800801a:	db04      	blt.n	8008026 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800801c:	3001      	adds	r0, #1
 800801e:	4770      	bx	lr
 8008020:	2000      	movs	r0, #0
 8008022:	e7ea      	b.n	8007ffa <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8008024:	2020      	movs	r0, #32
 8008026:	4770      	bx	lr

08008028 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8008028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800802c:	b087      	sub	sp, #28
 800802e:	4681      	mov	r9, r0
 8008030:	4698      	mov	r8, r3
 8008032:	4610      	mov	r0, r2
 8008034:	460d      	mov	r5, r1
 8008036:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 800803a:	b981      	cbnz	r1, 800805e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 800803c:	b14b      	cbz	r3, 8008052 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 800803e:	460b      	mov	r3, r1
 8008040:	464a      	mov	r2, r9
 8008042:	4641      	mov	r1, r8
 8008044:	e9cd 4700 	strd	r4, r7, [sp]
 8008048:	f7ff ffee 	bl	8008028 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800804c:	b007      	add	sp, #28
 800804e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008052:	f04f 33ff 	mov.w	r3, #4294967295
 8008056:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800805a:	603b      	str	r3, [r7, #0]
 800805c:	e7f6      	b.n	800804c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800805e:	fa32 fa01 	lsrs.w	sl, r2, r1
 8008062:	d107      	bne.n	8008074 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8008064:	fb09 f602 	mul.w	r6, r9, r2
 8008068:	fbb6 f0f4 	udiv	r0, r6, r4
 800806c:	fb04 6610 	mls	r6, r4, r0, r6
 8008070:	603e      	str	r6, [r7, #0]
 8008072:	e7eb      	b.n	800804c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8008074:	2601      	movs	r6, #1
 8008076:	fa09 fb01 	lsl.w	fp, r9, r1
 800807a:	408e      	lsls	r6, r1
 800807c:	fbbb f3f4 	udiv	r3, fp, r4
 8008080:	3e01      	subs	r6, #1
 8008082:	9302      	str	r3, [sp, #8]
 8008084:	fb0a f303 	mul.w	r3, sl, r3
 8008088:	4016      	ands	r6, r2
 800808a:	9303      	str	r3, [sp, #12]
 800808c:	4630      	mov	r0, r6
 800808e:	f7ff ffad 	bl	8007fec <_ZN8touchgfx16TouchCalibration4clzuEm>
 8008092:	464a      	mov	r2, r9
 8008094:	460b      	mov	r3, r1
 8008096:	4601      	mov	r1, r0
 8008098:	4630      	mov	r0, r6
 800809a:	e9cd 4700 	strd	r4, r7, [sp]
 800809e:	f7ff ffc3 	bl	8008028 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80080a2:	9b02      	ldr	r3, [sp, #8]
 80080a4:	4606      	mov	r6, r0
 80080a6:	eb05 0108 	add.w	r1, r5, r8
 80080aa:	fb04 bb13 	mls	fp, r4, r3, fp
 80080ae:	4658      	mov	r0, fp
 80080b0:	f7ff ff9c 	bl	8007fec <_ZN8touchgfx16TouchCalibration4clzuEm>
 80080b4:	ab05      	add	r3, sp, #20
 80080b6:	465a      	mov	r2, fp
 80080b8:	e9cd 4300 	strd	r4, r3, [sp]
 80080bc:	4603      	mov	r3, r0
 80080be:	4650      	mov	r0, sl
 80080c0:	f7ff ffb2 	bl	8008028 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	9a05      	ldr	r2, [sp, #20]
 80080c8:	9b03      	ldr	r3, [sp, #12]
 80080ca:	4411      	add	r1, r2
 80080cc:	fbb1 f2f4 	udiv	r2, r1, r4
 80080d0:	18d3      	adds	r3, r2, r3
 80080d2:	fb04 1412 	mls	r4, r4, r2, r1
 80080d6:	441e      	add	r6, r3
 80080d8:	603c      	str	r4, [r7, #0]
 80080da:	4430      	add	r0, r6
 80080dc:	e7b6      	b.n	800804c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

080080de <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80080de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080e2:	b085      	sub	sp, #20
 80080e4:	f1b0 0900 	subs.w	r9, r0, #0
 80080e8:	461d      	mov	r5, r3
 80080ea:	4617      	mov	r7, r2
 80080ec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80080ee:	bfbb      	ittet	lt
 80080f0:	f1c9 0900 	rsblt	r9, r9, #0
 80080f4:	f04f 36ff 	movlt.w	r6, #4294967295
 80080f8:	2601      	movge	r6, #1
 80080fa:	6823      	ldrlt	r3, [r4, #0]
 80080fc:	bfbc      	itt	lt
 80080fe:	425b      	neglt	r3, r3
 8008100:	6023      	strlt	r3, [r4, #0]
 8008102:	2a00      	cmp	r2, #0
 8008104:	da04      	bge.n	8008110 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	4257      	negs	r7, r2
 800810a:	4276      	negs	r6, r6
 800810c:	425b      	negs	r3, r3
 800810e:	6023      	str	r3, [r4, #0]
 8008110:	2d00      	cmp	r5, #0
 8008112:	4638      	mov	r0, r7
 8008114:	bfba      	itte	lt
 8008116:	426d      	neglt	r5, r5
 8008118:	f04f 38ff 	movlt.w	r8, #4294967295
 800811c:	f04f 0801 	movge.w	r8, #1
 8008120:	f7ff ff64 	bl	8007fec <_ZN8touchgfx16TouchCalibration4clzuEm>
 8008124:	ab03      	add	r3, sp, #12
 8008126:	463a      	mov	r2, r7
 8008128:	e9cd 5300 	strd	r5, r3, [sp]
 800812c:	4603      	mov	r3, r0
 800812e:	4648      	mov	r0, r9
 8008130:	f7ff ff7a 	bl	8008028 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8008134:	6823      	ldr	r3, [r4, #0]
 8008136:	9a03      	ldr	r2, [sp, #12]
 8008138:	4546      	cmp	r6, r8
 800813a:	441a      	add	r2, r3
 800813c:	fb92 f3f5 	sdiv	r3, r2, r5
 8008140:	4418      	add	r0, r3
 8008142:	fb05 2313 	mls	r3, r5, r3, r2
 8008146:	bf18      	it	ne
 8008148:	4240      	negne	r0, r0
 800814a:	1c72      	adds	r2, r6, #1
 800814c:	6023      	str	r3, [r4, #0]
 800814e:	d105      	bne.n	800815c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8008150:	2b00      	cmp	r3, #0
 8008152:	f1c3 0200 	rsb	r2, r3, #0
 8008156:	db0b      	blt.n	8008170 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8008158:	6022      	str	r2, [r4, #0]
 800815a:	e006      	b.n	800816a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800815c:	2e01      	cmp	r6, #1
 800815e:	d104      	bne.n	800816a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8008160:	2b00      	cmp	r3, #0
 8008162:	da02      	bge.n	800816a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8008164:	442b      	add	r3, r5
 8008166:	3801      	subs	r0, #1
 8008168:	6023      	str	r3, [r4, #0]
 800816a:	b005      	add	sp, #20
 800816c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008170:	3801      	subs	r0, #1
 8008172:	1b52      	subs	r2, r2, r5
 8008174:	e7f0      	b.n	8008158 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08008178 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8008178:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800817c:	4c1c      	ldr	r4, [pc, #112]	; (80081f0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800817e:	4605      	mov	r5, r0
 8008180:	6807      	ldr	r7, [r0, #0]
 8008182:	69a3      	ldr	r3, [r4, #24]
 8008184:	b92b      	cbnz	r3, 8008192 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8008186:	6840      	ldr	r0, [r0, #4]
 8008188:	e9c5 7000 	strd	r7, r0, [r5]
 800818c:	b004      	add	sp, #16
 800818e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008192:	f04f 0802 	mov.w	r8, #2
 8008196:	68a2      	ldr	r2, [r4, #8]
 8008198:	ae04      	add	r6, sp, #16
 800819a:	6820      	ldr	r0, [r4, #0]
 800819c:	fb93 f1f8 	sdiv	r1, r3, r8
 80081a0:	440a      	add	r2, r1
 80081a2:	69e1      	ldr	r1, [r4, #28]
 80081a4:	f846 2d04 	str.w	r2, [r6, #-4]!
 80081a8:	463a      	mov	r2, r7
 80081aa:	9600      	str	r6, [sp, #0]
 80081ac:	f7ff ff97 	bl	80080de <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80081b0:	69a3      	ldr	r3, [r4, #24]
 80081b2:	4607      	mov	r7, r0
 80081b4:	686a      	ldr	r2, [r5, #4]
 80081b6:	6a21      	ldr	r1, [r4, #32]
 80081b8:	9600      	str	r6, [sp, #0]
 80081ba:	6860      	ldr	r0, [r4, #4]
 80081bc:	f7ff ff8f 	bl	80080de <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80081c0:	69a3      	ldr	r3, [r4, #24]
 80081c2:	6962      	ldr	r2, [r4, #20]
 80081c4:	4407      	add	r7, r0
 80081c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80081c8:	9600      	str	r6, [sp, #0]
 80081ca:	68e0      	ldr	r0, [r4, #12]
 80081cc:	fb93 f8f8 	sdiv	r8, r3, r8
 80081d0:	4442      	add	r2, r8
 80081d2:	9203      	str	r2, [sp, #12]
 80081d4:	682a      	ldr	r2, [r5, #0]
 80081d6:	f7ff ff82 	bl	80080de <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80081da:	4680      	mov	r8, r0
 80081dc:	9600      	str	r6, [sp, #0]
 80081de:	69a3      	ldr	r3, [r4, #24]
 80081e0:	686a      	ldr	r2, [r5, #4]
 80081e2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80081e4:	6920      	ldr	r0, [r4, #16]
 80081e6:	f7ff ff7a 	bl	80080de <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80081ea:	4440      	add	r0, r8
 80081ec:	e7cc      	b.n	8008188 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80081ee:	bf00      	nop
 80081f0:	20001160 	.word	0x20001160

080081f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80081f4:	4b07      	ldr	r3, [pc, #28]	; (8008214 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80081f6:	b510      	push	{r4, lr}
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d108      	bne.n	8008210 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80081fe:	4b06      	ldr	r3, [pc, #24]	; (8008218 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8008200:	880c      	ldrh	r4, [r1, #0]
 8008202:	881b      	ldrh	r3, [r3, #0]
 8008204:	f9b0 2000 	ldrsh.w	r2, [r0]
 8008208:	3b01      	subs	r3, #1
 800820a:	1b1b      	subs	r3, r3, r4
 800820c:	8003      	strh	r3, [r0, #0]
 800820e:	800a      	strh	r2, [r1, #0]
 8008210:	bd10      	pop	{r4, pc}
 8008212:	bf00      	nop
 8008214:	2000114c 	.word	0x2000114c
 8008218:	20001150 	.word	0x20001150

0800821c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800821c:	4b07      	ldr	r3, [pc, #28]	; (800823c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800821e:	b510      	push	{r4, lr}
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d108      	bne.n	8008238 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8008226:	f9b1 3000 	ldrsh.w	r3, [r1]
 800822a:	f9b0 4000 	ldrsh.w	r4, [r0]
 800822e:	8003      	strh	r3, [r0, #0]
 8008230:	8893      	ldrh	r3, [r2, #4]
 8008232:	3b01      	subs	r3, #1
 8008234:	1b1b      	subs	r3, r3, r4
 8008236:	800b      	strh	r3, [r1, #0]
 8008238:	bd10      	pop	{r4, pc}
 800823a:	bf00      	nop
 800823c:	2000114c 	.word	0x2000114c

08008240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8008240:	4b08      	ldr	r3, [pc, #32]	; (8008264 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8008242:	b513      	push	{r0, r1, r4, lr}
 8008244:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008248:	2400      	movs	r4, #0
 800824a:	4b07      	ldr	r3, [pc, #28]	; (8008268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 800824c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8008250:	466a      	mov	r2, sp
 8008252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008256:	9400      	str	r4, [sp, #0]
 8008258:	f8ad 3006 	strh.w	r3, [sp, #6]
 800825c:	f7ff ffde 	bl	800821c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8008260:	b002      	add	sp, #8
 8008262:	bd10      	pop	{r4, pc}
 8008264:	20001148 	.word	0x20001148
 8008268:	2000114a 	.word	0x2000114a

0800826c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800826c:	4b0a      	ldr	r3, [pc, #40]	; (8008298 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800826e:	460a      	mov	r2, r1
 8008270:	b510      	push	{r4, lr}
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	2b01      	cmp	r3, #1
 8008276:	d10d      	bne.n	8008294 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8008278:	8881      	ldrh	r1, [r0, #4]
 800827a:	8803      	ldrh	r3, [r0, #0]
 800827c:	440b      	add	r3, r1
 800827e:	4601      	mov	r1, r0
 8008280:	3b01      	subs	r3, #1
 8008282:	f821 3b02 	strh.w	r3, [r1], #2
 8008286:	f7ff ffc9 	bl	800821c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800828a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800828e:	88c2      	ldrh	r2, [r0, #6]
 8008290:	80c3      	strh	r3, [r0, #6]
 8008292:	8082      	strh	r2, [r0, #4]
 8008294:	bd10      	pop	{r4, pc}
 8008296:	bf00      	nop
 8008298:	2000114c 	.word	0x2000114c

0800829c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800829c:	4b09      	ldr	r3, [pc, #36]	; (80082c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800829e:	b507      	push	{r0, r1, r2, lr}
 80082a0:	2100      	movs	r1, #0
 80082a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80082a6:	4b08      	ldr	r3, [pc, #32]	; (80082c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 80082a8:	9100      	str	r1, [sp, #0]
 80082aa:	4669      	mov	r1, sp
 80082ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082b0:	f8ad 2004 	strh.w	r2, [sp, #4]
 80082b4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80082b8:	f7ff ffd8 	bl	800826c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80082bc:	b003      	add	sp, #12
 80082be:	f85d fb04 	ldr.w	pc, [sp], #4
 80082c2:	bf00      	nop
 80082c4:	20001148 	.word	0x20001148
 80082c8:	2000114a 	.word	0x2000114a

080082cc <_ZNK8touchgfx4Rect7isEmptyEv>:
 80082cc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	dd06      	ble.n	80082e2 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80082d4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80082d8:	2800      	cmp	r0, #0
 80082da:	bfcc      	ite	gt
 80082dc:	2000      	movgt	r0, #0
 80082de:	2001      	movle	r0, #1
 80082e0:	4770      	bx	lr
 80082e2:	2001      	movs	r0, #1
 80082e4:	4770      	bx	lr
	...

080082e8 <_ZN8touchgfx11Application11getInstanceEv>:
 80082e8:	4b01      	ldr	r3, [pc, #4]	; (80082f0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80082ea:	6818      	ldr	r0, [r3, #0]
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	20001194 	.word	0x20001194

080082f4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80082f4:	4b03      	ldr	r3, [pc, #12]	; (8008304 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80082f6:	2200      	movs	r2, #0
 80082f8:	801a      	strh	r2, [r3, #0]
 80082fa:	805a      	strh	r2, [r3, #2]
 80082fc:	809a      	strh	r2, [r3, #4]
 80082fe:	80da      	strh	r2, [r3, #6]
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	2000118c 	.word	0x2000118c

08008308 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8008308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800830c:	b099      	sub	sp, #100	; 0x64
 800830e:	4607      	mov	r7, r0
 8008310:	4614      	mov	r4, r2
 8008312:	461d      	mov	r5, r3
 8008314:	a802      	add	r0, sp, #8
 8008316:	468a      	mov	sl, r1
 8008318:	f000 f996 	bl	8008648 <_ZN8touchgfx12TextProviderC1Ev>
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	4638      	mov	r0, r7
 8008320:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8008324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008326:	4798      	blx	r3
 8008328:	462a      	mov	r2, r5
 800832a:	2500      	movs	r5, #0
 800832c:	4621      	mov	r1, r4
 800832e:	4603      	mov	r3, r0
 8008330:	a802      	add	r0, sp, #8
 8008332:	462c      	mov	r4, r5
 8008334:	46a9      	mov	r9, r5
 8008336:	46a8      	mov	r8, r5
 8008338:	f000 f9cb 	bl	80086d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800833c:	2300      	movs	r3, #0
 800833e:	9301      	str	r3, [sp, #4]
 8008340:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8008344:	429c      	cmp	r4, r3
 8008346:	d002      	beq.n	800834e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 8008348:	455c      	cmp	r4, fp
 800834a:	bf18      	it	ne
 800834c:	4625      	movne	r5, r4
 800834e:	ab01      	add	r3, sp, #4
 8008350:	463a      	mov	r2, r7
 8008352:	4651      	mov	r1, sl
 8008354:	a802      	add	r0, sp, #8
 8008356:	f000 fcb7 	bl	8008cc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800835a:	4604      	mov	r4, r0
 800835c:	b108      	cbz	r0, 8008362 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 800835e:	280a      	cmp	r0, #10
 8008360:	d10a      	bne.n	8008378 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 8008362:	45c1      	cmp	r9, r8
 8008364:	bf38      	it	cc
 8008366:	46c1      	movcc	r9, r8
 8008368:	f04f 0800 	mov.w	r8, #0
 800836c:	2c00      	cmp	r4, #0
 800836e:	d1e5      	bne.n	800833c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8008370:	4648      	mov	r0, r9
 8008372:	b019      	add	sp, #100	; 0x64
 8008374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008378:	9a01      	ldr	r2, [sp, #4]
 800837a:	2a00      	cmp	r2, #0
 800837c:	d0de      	beq.n	800833c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 800837e:	7b56      	ldrb	r6, [r2, #13]
 8008380:	4629      	mov	r1, r5
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	0076      	lsls	r6, r6, #1
 8008386:	8894      	ldrh	r4, [r2, #4]
 8008388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800838a:	f406 7080 	and.w	r0, r6, #256	; 0x100
 800838e:	7a96      	ldrb	r6, [r2, #10]
 8008390:	4306      	orrs	r6, r0
 8008392:	4638      	mov	r0, r7
 8008394:	4798      	blx	r3
 8008396:	4430      	add	r0, r6
 8008398:	4480      	add	r8, r0
 800839a:	fa1f f888 	uxth.w	r8, r8
 800839e:	e7e5      	b.n	800836c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

080083a0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80083a0:	b508      	push	{r3, lr}
 80083a2:	6803      	ldr	r3, [r0, #0]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	4798      	blx	r3
 80083a8:	b128      	cbz	r0, 80083b6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80083aa:	7b43      	ldrb	r3, [r0, #13]
 80083ac:	7a80      	ldrb	r0, [r0, #10]
 80083ae:	005b      	lsls	r3, r3, #1
 80083b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b4:	4318      	orrs	r0, r3
 80083b6:	bd08      	pop	{r3, pc}

080083b8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80083b8:	b40e      	push	{r1, r2, r3}
 80083ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083bc:	b098      	sub	sp, #96	; 0x60
 80083be:	4605      	mov	r5, r0
 80083c0:	ab1d      	add	r3, sp, #116	; 0x74
 80083c2:	a802      	add	r0, sp, #8
 80083c4:	ae18      	add	r6, sp, #96	; 0x60
 80083c6:	f853 4b04 	ldr.w	r4, [r3], #4
 80083ca:	9300      	str	r3, [sp, #0]
 80083cc:	f000 f93c 	bl	8008648 <_ZN8touchgfx12TextProviderC1Ev>
 80083d0:	682b      	ldr	r3, [r5, #0]
 80083d2:	4628      	mov	r0, r5
 80083d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083d6:	4798      	blx	r3
 80083d8:	4621      	mov	r1, r4
 80083da:	2400      	movs	r4, #0
 80083dc:	4603      	mov	r3, r0
 80083de:	9a00      	ldr	r2, [sp, #0]
 80083e0:	a802      	add	r0, sp, #8
 80083e2:	f000 f976 	bl	80086d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80083e6:	f846 4d5c 	str.w	r4, [r6, #-92]!
 80083ea:	462a      	mov	r2, r5
 80083ec:	4633      	mov	r3, r6
 80083ee:	4621      	mov	r1, r4
 80083f0:	a802      	add	r0, sp, #8
 80083f2:	f000 fc69 	bl	8008cc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80083f6:	b300      	cbz	r0, 800843a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 80083f8:	280a      	cmp	r0, #10
 80083fa:	d01a      	beq.n	8008432 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 80083fc:	9f01      	ldr	r7, [sp, #4]
 80083fe:	b1c7      	cbz	r7, 8008432 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 8008400:	7b78      	ldrb	r0, [r7, #13]
 8008402:	7a3b      	ldrb	r3, [r7, #8]
 8008404:	00c1      	lsls	r1, r0, #3
 8008406:	88aa      	ldrh	r2, [r5, #4]
 8008408:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800840c:	4319      	orrs	r1, r3
 800840e:	0643      	lsls	r3, r0, #25
 8008410:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8008414:	bf48      	it	mi
 8008416:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 800841a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800841e:	bf48      	it	mi
 8008420:	b219      	sxthmi	r1, r3
 8008422:	79fb      	ldrb	r3, [r7, #7]
 8008424:	4303      	orrs	r3, r0
 8008426:	4413      	add	r3, r2
 8008428:	1a5b      	subs	r3, r3, r1
 800842a:	b29b      	uxth	r3, r3
 800842c:	42a3      	cmp	r3, r4
 800842e:	bfc8      	it	gt
 8008430:	b21c      	sxthgt	r4, r3
 8008432:	4633      	mov	r3, r6
 8008434:	462a      	mov	r2, r5
 8008436:	2100      	movs	r1, #0
 8008438:	e7da      	b.n	80083f0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 800843a:	b2a0      	uxth	r0, r4
 800843c:	b018      	add	sp, #96	; 0x60
 800843e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008442:	b003      	add	sp, #12
 8008444:	4770      	bx	lr

08008446 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8008446:	b40e      	push	{r1, r2, r3}
 8008448:	b530      	push	{r4, r5, lr}
 800844a:	b098      	sub	sp, #96	; 0x60
 800844c:	4604      	mov	r4, r0
 800844e:	ab1b      	add	r3, sp, #108	; 0x6c
 8008450:	a802      	add	r0, sp, #8
 8008452:	f853 5b04 	ldr.w	r5, [r3], #4
 8008456:	9301      	str	r3, [sp, #4]
 8008458:	f000 f8f6 	bl	8008648 <_ZN8touchgfx12TextProviderC1Ev>
 800845c:	6823      	ldr	r3, [r4, #0]
 800845e:	4620      	mov	r0, r4
 8008460:	2401      	movs	r4, #1
 8008462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008464:	4798      	blx	r3
 8008466:	9a01      	ldr	r2, [sp, #4]
 8008468:	4603      	mov	r3, r0
 800846a:	4629      	mov	r1, r5
 800846c:	a802      	add	r0, sp, #8
 800846e:	f000 f930 	bl	80086d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8008472:	a802      	add	r0, sp, #8
 8008474:	f000 fcc6 	bl	8008e04 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8008478:	b2a3      	uxth	r3, r4
 800847a:	b138      	cbz	r0, 800848c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 800847c:	280a      	cmp	r0, #10
 800847e:	a802      	add	r0, sp, #8
 8008480:	bf04      	itt	eq
 8008482:	3301      	addeq	r3, #1
 8008484:	b21c      	sxtheq	r4, r3
 8008486:	f000 fcbd 	bl	8008e04 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800848a:	e7f5      	b.n	8008478 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 800848c:	4618      	mov	r0, r3
 800848e:	b018      	add	sp, #96	; 0x60
 8008490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008494:	b003      	add	sp, #12
 8008496:	4770      	bx	lr

08008498 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8008498:	b40e      	push	{r1, r2, r3}
 800849a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800849c:	b098      	sub	sp, #96	; 0x60
 800849e:	4604      	mov	r4, r0
 80084a0:	26ff      	movs	r6, #255	; 0xff
 80084a2:	ab1d      	add	r3, sp, #116	; 0x74
 80084a4:	a802      	add	r0, sp, #8
 80084a6:	f853 5b04 	ldr.w	r5, [r3], #4
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	f000 f8cc 	bl	8008648 <_ZN8touchgfx12TextProviderC1Ev>
 80084b0:	6823      	ldr	r3, [r4, #0]
 80084b2:	4620      	mov	r0, r4
 80084b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b6:	4798      	blx	r3
 80084b8:	4629      	mov	r1, r5
 80084ba:	4603      	mov	r3, r0
 80084bc:	9a00      	ldr	r2, [sp, #0]
 80084be:	a802      	add	r0, sp, #8
 80084c0:	ad18      	add	r5, sp, #96	; 0x60
 80084c2:	f000 f906 	bl	80086d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80084c6:	2100      	movs	r1, #0
 80084c8:	4622      	mov	r2, r4
 80084ca:	a802      	add	r0, sp, #8
 80084cc:	f845 1d5c 	str.w	r1, [r5, #-92]!
 80084d0:	462b      	mov	r3, r5
 80084d2:	f000 fbf9 	bl	8008cc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80084d6:	b1d8      	cbz	r0, 8008510 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80084d8:	280a      	cmp	r0, #10
 80084da:	d012      	beq.n	8008502 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 80084dc:	9801      	ldr	r0, [sp, #4]
 80084de:	b180      	cbz	r0, 8008502 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 80084e0:	7b47      	ldrb	r7, [r0, #13]
 80084e2:	7922      	ldrb	r2, [r4, #4]
 80084e4:	00fb      	lsls	r3, r7, #3
 80084e6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80084ea:	7a03      	ldrb	r3, [r0, #8]
 80084ec:	430b      	orrs	r3, r1
 80084ee:	0679      	lsls	r1, r7, #25
 80084f0:	bf44      	itt	mi
 80084f2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80084f6:	b21b      	sxthmi	r3, r3
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	429e      	cmp	r6, r3
 80084fe:	bf28      	it	cs
 8008500:	461e      	movcs	r6, r3
 8008502:	462b      	mov	r3, r5
 8008504:	4622      	mov	r2, r4
 8008506:	2100      	movs	r1, #0
 8008508:	a802      	add	r0, sp, #8
 800850a:	f000 fbdd 	bl	8008cc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800850e:	e7e2      	b.n	80084d6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8008510:	4630      	mov	r0, r6
 8008512:	b018      	add	sp, #96	; 0x60
 8008514:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008518:	b003      	add	sp, #12
 800851a:	4770      	bx	lr

0800851c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 800851c:	b530      	push	{r4, r5, lr}
 800851e:	8083      	strh	r3, [r0, #4]
 8008520:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008524:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8008528:	7183      	strb	r3, [r0, #6]
 800852a:	79c3      	ldrb	r3, [r0, #7]
 800852c:	6101      	str	r1, [r0, #16]
 800852e:	f365 0306 	bfi	r3, r5, #0, #7
 8008532:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8008536:	8282      	strh	r2, [r0, #20]
 8008538:	f365 13c7 	bfi	r3, r5, #7, #1
 800853c:	71c3      	strb	r3, [r0, #7]
 800853e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8008542:	7203      	strb	r3, [r0, #8]
 8008544:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8008548:	7243      	strb	r3, [r0, #9]
 800854a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800854e:	8143      	strh	r3, [r0, #10]
 8008550:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8008554:	8183      	strh	r3, [r0, #12]
 8008556:	4b01      	ldr	r3, [pc, #4]	; (800855c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8008558:	6003      	str	r3, [r0, #0]
 800855a:	bd30      	pop	{r4, r5, pc}
 800855c:	0800e2c4 	.word	0x0800e2c4

08008560 <_ZNK8touchgfx9ConstFont4findEt>:
 8008560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008562:	6904      	ldr	r4, [r0, #16]
 8008564:	b3bc      	cbz	r4, 80085d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8008566:	88a3      	ldrh	r3, [r4, #4]
 8008568:	8a82      	ldrh	r2, [r0, #20]
 800856a:	1acb      	subs	r3, r1, r3
 800856c:	f102 32ff 	add.w	r2, r2, #4294967295
 8008570:	d431      	bmi.n	80085d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8008572:	4293      	cmp	r3, r2
 8008574:	dd0c      	ble.n	8008590 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8008576:	230e      	movs	r3, #14
 8008578:	fb03 4302 	mla	r3, r3, r2, r4
 800857c:	889b      	ldrh	r3, [r3, #4]
 800857e:	1a5b      	subs	r3, r3, r1
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	429a      	cmp	r2, r3
 8008584:	db27      	blt.n	80085d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8008586:	2b00      	cmp	r3, #0
 8008588:	bfbc      	itt	lt
 800858a:	2302      	movlt	r3, #2
 800858c:	fb92 f3f3 	sdivlt	r3, r2, r3
 8008590:	2500      	movs	r5, #0
 8008592:	260e      	movs	r6, #14
 8008594:	4295      	cmp	r5, r2
 8008596:	dc1e      	bgt.n	80085d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8008598:	fb06 4003 	mla	r0, r6, r3, r4
 800859c:	8887      	ldrh	r7, [r0, #4]
 800859e:	42b9      	cmp	r1, r7
 80085a0:	d01a      	beq.n	80085d8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80085a2:	d20d      	bcs.n	80085c0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80085a4:	1e5a      	subs	r2, r3, #1
 80085a6:	4295      	cmp	r5, r2
 80085a8:	dc15      	bgt.n	80085d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80085aa:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80085ae:	1a5b      	subs	r3, r3, r1
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	429a      	cmp	r2, r3
 80085b4:	db0f      	blt.n	80085d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80085b6:	429d      	cmp	r5, r3
 80085b8:	ddec      	ble.n	8008594 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80085ba:	1953      	adds	r3, r2, r5
 80085bc:	105b      	asrs	r3, r3, #1
 80085be:	e7e9      	b.n	8008594 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80085c0:	1c5d      	adds	r5, r3, #1
 80085c2:	42aa      	cmp	r2, r5
 80085c4:	db07      	blt.n	80085d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80085c6:	8a43      	ldrh	r3, [r0, #18]
 80085c8:	1acb      	subs	r3, r1, r3
 80085ca:	442b      	add	r3, r5
 80085cc:	429d      	cmp	r5, r3
 80085ce:	dc02      	bgt.n	80085d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80085d0:	429a      	cmp	r2, r3
 80085d2:	dadf      	bge.n	8008594 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80085d4:	e7f1      	b.n	80085ba <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80085d6:	2000      	movs	r0, #0
 80085d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080085da <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80085da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085dc:	4604      	mov	r4, r0
 80085de:	4617      	mov	r7, r2
 80085e0:	461e      	mov	r6, r3
 80085e2:	b911      	cbnz	r1, 80085ea <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80085e4:	2500      	movs	r5, #0
 80085e6:	4628      	mov	r0, r5
 80085e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ea:	290a      	cmp	r1, #10
 80085ec:	d0fa      	beq.n	80085e4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80085ee:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80085f2:	4291      	cmp	r1, r2
 80085f4:	d0f6      	beq.n	80085e4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80085f6:	f242 020b 	movw	r2, #8203	; 0x200b
 80085fa:	4291      	cmp	r1, r2
 80085fc:	d0f2      	beq.n	80085e4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80085fe:	f7ff ffaf 	bl	8008560 <_ZNK8touchgfx9ConstFont4findEt>
 8008602:	4605      	mov	r5, r0
 8008604:	b950      	cbnz	r0, 800861c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	4620      	mov	r0, r4
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	4798      	blx	r3
 800860e:	4601      	mov	r1, r0
 8008610:	4620      	mov	r0, r4
 8008612:	f7ff ffa5 	bl	8008560 <_ZNK8touchgfx9ConstFont4findEt>
 8008616:	4605      	mov	r5, r0
 8008618:	2800      	cmp	r0, #0
 800861a:	d0e3      	beq.n	80085e4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800861c:	6823      	ldr	r3, [r4, #0]
 800861e:	4629      	mov	r1, r5
 8008620:	4620      	mov	r0, r4
 8008622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008624:	4798      	blx	r3
 8008626:	6038      	str	r0, [r7, #0]
 8008628:	6823      	ldr	r3, [r4, #0]
 800862a:	4620      	mov	r0, r4
 800862c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800862e:	4798      	blx	r3
 8008630:	7030      	strb	r0, [r6, #0]
 8008632:	e7d8      	b.n	80085e6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08008634 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8008634:	2002      	movs	r0, #2
 8008636:	4770      	bx	lr

08008638 <_ZN8touchgfx12GestureEventD1Ev>:
 8008638:	4770      	bx	lr

0800863a <_ZN8touchgfx12GestureEventD0Ev>:
 800863a:	b510      	push	{r4, lr}
 800863c:	4604      	mov	r4, r0
 800863e:	210c      	movs	r1, #12
 8008640:	f002 fee6 	bl	800b410 <_ZdlPvj>
 8008644:	4620      	mov	r0, r4
 8008646:	bd10      	pop	{r4, pc}

08008648 <_ZN8touchgfx12TextProviderC1Ev>:
 8008648:	2300      	movs	r3, #0
 800864a:	2201      	movs	r2, #1
 800864c:	b510      	push	{r4, lr}
 800864e:	4604      	mov	r4, r0
 8008650:	60c3      	str	r3, [r0, #12]
 8008652:	7403      	strb	r3, [r0, #16]
 8008654:	82c3      	strh	r3, [r0, #22]
 8008656:	8303      	strh	r3, [r0, #24]
 8008658:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800865a:	8603      	strh	r3, [r0, #48]	; 0x30
 800865c:	86c3      	strh	r3, [r0, #54]	; 0x36
 800865e:	8703      	strh	r3, [r0, #56]	; 0x38
 8008660:	63c3      	str	r3, [r0, #60]	; 0x3c
 8008662:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8008666:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 800866a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 800866e:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 8008672:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 8008676:	e9c0 3300 	strd	r3, r3, [r0]
 800867a:	f7fb fccd 	bl	8004018 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800867e:	4620      	mov	r0, r4
 8008680:	bd10      	pop	{r4, pc}

08008682 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8008682:	b530      	push	{r4, r5, lr}
 8008684:	2500      	movs	r5, #0
 8008686:	2401      	movs	r4, #1
 8008688:	6843      	ldr	r3, [r0, #4]
 800868a:	b913      	cbnz	r3, 8008692 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800868c:	6803      	ldr	r3, [r0, #0]
 800868e:	b1f3      	cbz	r3, 80086ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8008690:	6043      	str	r3, [r0, #4]
 8008692:	7c03      	ldrb	r3, [r0, #16]
 8008694:	b143      	cbz	r3, 80086a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8008696:	68c3      	ldr	r3, [r0, #12]
 8008698:	b12b      	cbz	r3, 80086a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800869a:	881a      	ldrh	r2, [r3, #0]
 800869c:	b11a      	cbz	r2, 80086a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800869e:	1c9a      	adds	r2, r3, #2
 80086a0:	60c2      	str	r2, [r0, #12]
 80086a2:	8818      	ldrh	r0, [r3, #0]
 80086a4:	bd30      	pop	{r4, r5, pc}
 80086a6:	7405      	strb	r5, [r0, #16]
 80086a8:	6843      	ldr	r3, [r0, #4]
 80086aa:	8819      	ldrh	r1, [r3, #0]
 80086ac:	b179      	cbz	r1, 80086ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 80086ae:	1c9a      	adds	r2, r3, #2
 80086b0:	2902      	cmp	r1, #2
 80086b2:	6042      	str	r2, [r0, #4]
 80086b4:	d1f5      	bne.n	80086a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80086b6:	6883      	ldr	r3, [r0, #8]
 80086b8:	1d1a      	adds	r2, r3, #4
 80086ba:	6082      	str	r2, [r0, #8]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	60c3      	str	r3, [r0, #12]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d0e1      	beq.n	8008688 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80086c4:	881b      	ldrh	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d0de      	beq.n	8008688 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80086ca:	7404      	strb	r4, [r0, #16]
 80086cc:	e7dc      	b.n	8008688 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80086ce:	2000      	movs	r0, #0
 80086d0:	e7e8      	b.n	80086a4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080086d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 80086d2:	63c3      	str	r3, [r0, #60]	; 0x3c
 80086d4:	2300      	movs	r3, #0
 80086d6:	6082      	str	r2, [r0, #8]
 80086d8:	6001      	str	r1, [r0, #0]
 80086da:	6043      	str	r3, [r0, #4]
 80086dc:	60c3      	str	r3, [r0, #12]
 80086de:	7403      	strb	r3, [r0, #16]
 80086e0:	8603      	strh	r3, [r0, #48]	; 0x30
 80086e2:	8303      	strh	r3, [r0, #24]
 80086e4:	8703      	strh	r3, [r0, #56]	; 0x38
 80086e6:	b410      	push	{r4}
 80086e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086ec:	f7fb bc94 	b.w	8004018 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080086f0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80086f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086f2:	4605      	mov	r5, r0
 80086f4:	4608      	mov	r0, r1
 80086f6:	b1f1      	cbz	r1, 8008736 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80086f8:	f105 0440 	add.w	r4, r5, #64	; 0x40
 80086fc:	460b      	mov	r3, r1
 80086fe:	f101 0708 	add.w	r7, r1, #8
 8008702:	4622      	mov	r2, r4
 8008704:	6818      	ldr	r0, [r3, #0]
 8008706:	3308      	adds	r3, #8
 8008708:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800870c:	4626      	mov	r6, r4
 800870e:	42bb      	cmp	r3, r7
 8008710:	c603      	stmia	r6!, {r0, r1}
 8008712:	4634      	mov	r4, r6
 8008714:	d1f6      	bne.n	8008704 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8008716:	6818      	ldr	r0, [r3, #0]
 8008718:	6030      	str	r0, [r6, #0]
 800871a:	4610      	mov	r0, r2
 800871c:	889b      	ldrh	r3, [r3, #4]
 800871e:	80b3      	strh	r3, [r6, #4]
 8008720:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 8008724:	015b      	lsls	r3, r3, #5
 8008726:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800872a:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 800872e:	430b      	orrs	r3, r1
 8008730:	425b      	negs	r3, r3
 8008732:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 8008736:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008738 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	460c      	mov	r4, r1
 800873c:	6811      	ldr	r1, [r2, #0]
 800873e:	4610      	mov	r0, r2
 8008740:	68cd      	ldr	r5, [r1, #12]
 8008742:	4619      	mov	r1, r3
 8008744:	47a8      	blx	r5
 8008746:	2800      	cmp	r0, #0
 8008748:	bf08      	it	eq
 800874a:	4620      	moveq	r0, r4
 800874c:	bd38      	pop	{r3, r4, r5, pc}
	...

08008750 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8008750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008752:	4604      	mov	r4, r0
 8008754:	4615      	mov	r5, r2
 8008756:	4608      	mov	r0, r1
 8008758:	b93a      	cbnz	r2, 800876a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 800875a:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 800875e:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 8008762:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8008766:	4628      	mov	r0, r5
 8008768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800876a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800876e:	8893      	ldrh	r3, [r2, #4]
 8008770:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8008774:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8008778:	79ee      	ldrb	r6, [r5, #7]
 800877a:	4316      	orrs	r6, r2
 800877c:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8008780:	189a      	adds	r2, r3, r2
 8008782:	b2b7      	uxth	r7, r6
 8008784:	b291      	uxth	r1, r2
 8008786:	291d      	cmp	r1, #29
 8008788:	f200 8084 	bhi.w	8008894 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 800878c:	2201      	movs	r2, #1
 800878e:	10f6      	asrs	r6, r6, #3
 8008790:	408a      	lsls	r2, r1
 8008792:	4978      	ldr	r1, [pc, #480]	; (8008974 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 8008794:	420a      	tst	r2, r1
 8008796:	d12e      	bne.n	80087f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8008798:	f412 7f60 	tst.w	r2, #896	; 0x380
 800879c:	d07a      	beq.n	8008894 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 800879e:	f104 0240 	add.w	r2, r4, #64	; 0x40
 80087a2:	462b      	mov	r3, r5
 80087a4:	f105 0e08 	add.w	lr, r5, #8
 80087a8:	4615      	mov	r5, r2
 80087aa:	6818      	ldr	r0, [r3, #0]
 80087ac:	3308      	adds	r3, #8
 80087ae:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80087b2:	4694      	mov	ip, r2
 80087b4:	4573      	cmp	r3, lr
 80087b6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80087ba:	4662      	mov	r2, ip
 80087bc:	d1f5      	bne.n	80087aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 80087be:	6818      	ldr	r0, [r3, #0]
 80087c0:	f8cc 0000 	str.w	r0, [ip]
 80087c4:	889b      	ldrh	r3, [r3, #4]
 80087c6:	f8ac 3004 	strh.w	r3, [ip, #4]
 80087ca:	b2b3      	uxth	r3, r6
 80087cc:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 80087d0:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 80087d4:	1aca      	subs	r2, r1, r3
 80087d6:	1bcf      	subs	r7, r1, r7
 80087d8:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80087dc:	b292      	uxth	r2, r2
 80087de:	1afb      	subs	r3, r7, r3
 80087e0:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 80087e4:	10d2      	asrs	r2, r2, #3
 80087e6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80087ea:	4302      	orrs	r2, r0
 80087ec:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 80087f0:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 80087f4:	e7b7      	b.n	8008766 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80087f6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80087f8:	b92b      	cbnz	r3, 8008806 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 80087fa:	4b5f      	ldr	r3, [pc, #380]	; (8008978 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 80087fc:	21c0      	movs	r1, #192	; 0xc0
 80087fe:	4a5f      	ldr	r2, [pc, #380]	; (800897c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8008800:	485f      	ldr	r0, [pc, #380]	; (8008980 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 8008802:	f003 f849 	bl	800b898 <__assert_func>
 8008806:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8008808:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800880c:	8b59      	ldrh	r1, [r3, #26]
 800880e:	f640 6333 	movw	r3, #3635	; 0xe33
 8008812:	4299      	cmp	r1, r3
 8008814:	d110      	bne.n	8008838 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 8008816:	6803      	ldr	r3, [r0, #0]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	4798      	blx	r3
 800881c:	7b41      	ldrb	r1, [r0, #13]
 800881e:	00cb      	lsls	r3, r1, #3
 8008820:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8008824:	7a03      	ldrb	r3, [r0, #8]
 8008826:	0648      	lsls	r0, r1, #25
 8008828:	ea43 0302 	orr.w	r3, r3, r2
 800882c:	bf44      	itt	mi
 800882e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8008832:	b21b      	sxthmi	r3, r3
 8008834:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8008838:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 800883c:	462a      	mov	r2, r5
 800883e:	f105 0c08 	add.w	ip, r5, #8
 8008842:	443b      	add	r3, r7
 8008844:	4433      	add	r3, r6
 8008846:	f104 0640 	add.w	r6, r4, #64	; 0x40
 800884a:	b29b      	uxth	r3, r3
 800884c:	4635      	mov	r5, r6
 800884e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8008852:	6810      	ldr	r0, [r2, #0]
 8008854:	3208      	adds	r2, #8
 8008856:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800885a:	4637      	mov	r7, r6
 800885c:	4562      	cmp	r2, ip
 800885e:	c703      	stmia	r7!, {r0, r1}
 8008860:	463e      	mov	r6, r7
 8008862:	d1f6      	bne.n	8008852 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8008864:	6810      	ldr	r0, [r2, #0]
 8008866:	6038      	str	r0, [r7, #0]
 8008868:	8892      	ldrh	r2, [r2, #4]
 800886a:	80ba      	strh	r2, [r7, #4]
 800886c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8008870:	10db      	asrs	r3, r3, #3
 8008872:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8008876:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800887a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800887e:	4313      	orrs	r3, r2
 8008880:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8008884:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8008888:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 800888c:	1a9b      	subs	r3, r3, r2
 800888e:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 8008892:	e768      	b.n	8008766 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8008894:	f023 0204 	bic.w	r2, r3, #4
 8008898:	f640 611b 	movw	r1, #3611	; 0xe1b
 800889c:	428a      	cmp	r2, r1
 800889e:	d003      	beq.n	80088a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 80088a0:	f640 621d 	movw	r2, #3613	; 0xe1d
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d120      	bne.n	80088ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 80088a8:	3b01      	subs	r3, #1
 80088aa:	4602      	mov	r2, r0
 80088ac:	4629      	mov	r1, r5
 80088ae:	4620      	mov	r0, r4
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	f7ff ff41 	bl	8008738 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80088b6:	7b41      	ldrb	r1, [r0, #13]
 80088b8:	00cb      	lsls	r3, r1, #3
 80088ba:	0649      	lsls	r1, r1, #25
 80088bc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80088c0:	7a03      	ldrb	r3, [r0, #8]
 80088c2:	ea43 0302 	orr.w	r3, r3, r2
 80088c6:	bf44      	itt	mi
 80088c8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80088cc:	b21b      	sxthmi	r3, r3
 80088ce:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 80088d2:	7b6b      	ldrb	r3, [r5, #13]
 80088d4:	7aaa      	ldrb	r2, [r5, #10]
 80088d6:	005b      	lsls	r3, r3, #1
 80088d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088dc:	4313      	orrs	r3, r2
 80088de:	115a      	asrs	r2, r3, #5
 80088e0:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80088e4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80088e8:	e035      	b.n	8008956 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 80088ea:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80088ee:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80088f2:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80088f6:	7a2a      	ldrb	r2, [r5, #8]
 80088f8:	ea42 0201 	orr.w	r2, r2, r1
 80088fc:	f640 6109 	movw	r1, #3593	; 0xe09
 8008900:	bf1c      	itt	ne
 8008902:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8008906:	b212      	sxthne	r2, r2
 8008908:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 800890c:	f023 0210 	bic.w	r2, r3, #16
 8008910:	428a      	cmp	r2, r1
 8008912:	d003      	beq.n	800891c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 8008914:	f640 6213 	movw	r2, #3603	; 0xe13
 8008918:	4293      	cmp	r3, r2
 800891a:	d129      	bne.n	8008970 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 800891c:	7b6e      	ldrb	r6, [r5, #13]
 800891e:	4629      	mov	r1, r5
 8008920:	0076      	lsls	r6, r6, #1
 8008922:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8008926:	7aae      	ldrb	r6, [r5, #10]
 8008928:	4316      	orrs	r6, r2
 800892a:	f640 6213 	movw	r2, #3603	; 0xe13
 800892e:	4293      	cmp	r3, r2
 8008930:	4602      	mov	r2, r0
 8008932:	4620      	mov	r0, r4
 8008934:	bf16      	itet	ne
 8008936:	f103 33ff 	addne.w	r3, r3, #4294967295
 800893a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 800893e:	b29b      	uxthne	r3, r3
 8008940:	f7ff fefa 	bl	8008738 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8008944:	7b43      	ldrb	r3, [r0, #13]
 8008946:	7a82      	ldrb	r2, [r0, #10]
 8008948:	005b      	lsls	r3, r3, #1
 800894a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800894e:	4313      	orrs	r3, r2
 8008950:	1af6      	subs	r6, r6, r3
 8008952:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 8008956:	7b69      	ldrb	r1, [r5, #13]
 8008958:	00cb      	lsls	r3, r1, #3
 800895a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800895e:	7a2b      	ldrb	r3, [r5, #8]
 8008960:	4313      	orrs	r3, r2
 8008962:	064a      	lsls	r2, r1, #25
 8008964:	bf44      	itt	mi
 8008966:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800896a:	b21b      	sxthmi	r3, r3
 800896c:	1bdb      	subs	r3, r3, r7
 800896e:	e73f      	b.n	80087f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8008970:	2300      	movs	r3, #0
 8008972:	e7b7      	b.n	80088e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 8008974:	3fc00079 	.word	0x3fc00079
 8008978:	0800e324 	.word	0x0800e324
 800897c:	0800e596 	.word	0x0800e596
 8008980:	0800e32d 	.word	0x0800e32d

08008984 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8008984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008988:	4604      	mov	r4, r0
 800898a:	b942      	cbnz	r2, 800899e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800898c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008990:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8008994:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8008998:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800899c:	e046      	b.n	8008a2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 800899e:	7b51      	ldrb	r1, [r2, #13]
 80089a0:	8893      	ldrh	r3, [r2, #4]
 80089a2:	010f      	lsls	r7, r1, #4
 80089a4:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80089a8:	79d7      	ldrb	r7, [r2, #7]
 80089aa:	4307      	orrs	r7, r0
 80089ac:	2f04      	cmp	r7, #4
 80089ae:	b2bd      	uxth	r5, r7
 80089b0:	bfcc      	ite	gt
 80089b2:	08bf      	lsrgt	r7, r7, #2
 80089b4:	2701      	movle	r7, #1
 80089b6:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80089ba:	f200 80ab 	bhi.w	8008b14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 80089be:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80089c2:	4283      	cmp	r3, r0
 80089c4:	d216      	bcs.n	80089f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80089c6:	f240 605b 	movw	r0, #1627	; 0x65b
 80089ca:	4283      	cmp	r3, r0
 80089cc:	d859      	bhi.n	8008a82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 80089ce:	f240 6057 	movw	r0, #1623	; 0x657
 80089d2:	4283      	cmp	r3, r0
 80089d4:	d20e      	bcs.n	80089f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80089d6:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80089da:	d24a      	bcs.n	8008a72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 80089dc:	f240 604e 	movw	r0, #1614	; 0x64e
 80089e0:	4283      	cmp	r3, r0
 80089e2:	d207      	bcs.n	80089f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80089e4:	f240 601a 	movw	r0, #1562	; 0x61a
 80089e8:	4283      	cmp	r3, r0
 80089ea:	d02a      	beq.n	8008a42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80089ec:	d821      	bhi.n	8008a32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 80089ee:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80089f2:	d35b      	bcc.n	8008aac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80089f4:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 80089f8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80089fc:	f040 80d0 	bne.w	8008ba0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8008a00:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 8008a04:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8008a08:	f040 80ca 	bne.w	8008ba0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8008a0c:	00cb      	lsls	r3, r1, #3
 8008a0e:	0649      	lsls	r1, r1, #25
 8008a10:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8008a14:	7a13      	ldrb	r3, [r2, #8]
 8008a16:	ea43 0300 	orr.w	r3, r3, r0
 8008a1a:	bf44      	itt	mi
 8008a1c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8008a20:	b21b      	sxthmi	r3, r3
 8008a22:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8008a26:	1b5d      	subs	r5, r3, r5
 8008a28:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a32:	f240 604b 	movw	r0, #1611	; 0x64b
 8008a36:	4283      	cmp	r3, r0
 8008a38:	d338      	bcc.n	8008aac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8008a3a:	f240 604c 	movw	r0, #1612	; 0x64c
 8008a3e:	4283      	cmp	r3, r0
 8008a40:	d9d8      	bls.n	80089f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008a42:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 8008a46:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 8008a4a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8008a4e:	f040 80f2 	bne.w	8008c36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8008a52:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8008a56:	f040 80ee 	bne.w	8008c36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8008a5a:	00cb      	lsls	r3, r1, #3
 8008a5c:	064e      	lsls	r6, r1, #25
 8008a5e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8008a62:	7a13      	ldrb	r3, [r2, #8]
 8008a64:	ea43 0300 	orr.w	r3, r3, r0
 8008a68:	bf44      	itt	mi
 8008a6a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8008a6e:	b21b      	sxthmi	r3, r3
 8008a70:	e7d9      	b.n	8008a26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8008a72:	f240 6054 	movw	r0, #1620	; 0x654
 8008a76:	4283      	cmp	r3, r0
 8008a78:	d8e3      	bhi.n	8008a42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8008a7a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8008a7e:	d9e0      	bls.n	8008a42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8008a80:	e7b8      	b.n	80089f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008a82:	f240 6074 	movw	r0, #1652	; 0x674
 8008a86:	4283      	cmp	r3, r0
 8008a88:	d0b4      	beq.n	80089f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008a8a:	d82d      	bhi.n	8008ae8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 8008a8c:	f240 605e 	movw	r0, #1630	; 0x65e
 8008a90:	4283      	cmp	r3, r0
 8008a92:	d804      	bhi.n	8008a9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8008a94:	f240 605d 	movw	r0, #1629	; 0x65d
 8008a98:	4283      	cmp	r3, r0
 8008a9a:	d3d2      	bcc.n	8008a42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8008a9c:	e7aa      	b.n	80089f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008a9e:	f240 605f 	movw	r0, #1631	; 0x65f
 8008aa2:	4283      	cmp	r3, r0
 8008aa4:	d0cd      	beq.n	8008a42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8008aa6:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8008aaa:	d0a3      	beq.n	80089f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008aac:	00cb      	lsls	r3, r1, #3
 8008aae:	0649      	lsls	r1, r1, #25
 8008ab0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8008ab4:	7a13      	ldrb	r3, [r2, #8]
 8008ab6:	ea43 0300 	orr.w	r3, r3, r0
 8008aba:	bf44      	itt	mi
 8008abc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8008ac0:	b21b      	sxthmi	r3, r3
 8008ac2:	1b5d      	subs	r5, r3, r5
 8008ac4:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8008ac8:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8008acc:	7b53      	ldrb	r3, [r2, #13]
 8008ace:	015b      	lsls	r3, r3, #5
 8008ad0:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8008ad4:	7993      	ldrb	r3, [r2, #6]
 8008ad6:	430b      	orrs	r3, r1
 8008ad8:	2105      	movs	r1, #5
 8008ada:	005b      	lsls	r3, r3, #1
 8008adc:	fb93 f3f1 	sdiv	r3, r3, r1
 8008ae0:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8008ae4:	440b      	add	r3, r1
 8008ae6:	e757      	b.n	8008998 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8008ae8:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8008aec:	4283      	cmp	r3, r0
 8008aee:	d809      	bhi.n	8008b04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8008af0:	f240 60df 	movw	r0, #1759	; 0x6df
 8008af4:	4283      	cmp	r3, r0
 8008af6:	f4bf af7d 	bcs.w	80089f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008afa:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8008afe:	2b05      	cmp	r3, #5
 8008b00:	d8d4      	bhi.n	8008aac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8008b02:	e777      	b.n	80089f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008b04:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8008b08:	4283      	cmp	r3, r0
 8008b0a:	d09a      	beq.n	8008a42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8008b0c:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8008b10:	4283      	cmp	r3, r0
 8008b12:	e7ca      	b.n	8008aaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8008b14:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8008b18:	d22b      	bcs.n	8008b72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 8008b1a:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8008b1e:	4283      	cmp	r3, r0
 8008b20:	d28f      	bcs.n	8008a42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8008b22:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8008b26:	4283      	cmp	r3, r0
 8008b28:	d816      	bhi.n	8008b58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 8008b2a:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8008b2e:	4283      	cmp	r3, r0
 8008b30:	f4bf af60 	bcs.w	80089f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008b34:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8008b38:	4283      	cmp	r3, r0
 8008b3a:	d80a      	bhi.n	8008b52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8008b3c:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8008b40:	4283      	cmp	r3, r0
 8008b42:	f4bf af57 	bcs.w	80089f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008b46:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8008b4a:	4283      	cmp	r3, r0
 8008b4c:	f43f af79 	beq.w	8008a42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8008b50:	e7ac      	b.n	8008aac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8008b52:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8008b56:	e7f8      	b.n	8008b4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8008b58:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8008b5c:	4283      	cmp	r3, r0
 8008b5e:	d802      	bhi.n	8008b66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8008b60:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8008b64:	e798      	b.n	8008a98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8008b66:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8008b6a:	4283      	cmp	r3, r0
 8008b6c:	f47f af42 	bne.w	80089f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008b70:	e767      	b.n	8008a42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8008b72:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8008b76:	4283      	cmp	r3, r0
 8008b78:	f43f af63 	beq.w	8008a42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8008b7c:	d802      	bhi.n	8008b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8008b7e:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8008b82:	e7f2      	b.n	8008b6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8008b84:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8008b88:	4283      	cmp	r3, r0
 8008b8a:	d805      	bhi.n	8008b98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 8008b8c:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8008b90:	4283      	cmp	r3, r0
 8008b92:	f4ff af2f 	bcc.w	80089f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008b96:	e754      	b.n	8008a42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8008b98:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8008b9c:	4283      	cmp	r3, r0
 8008b9e:	e7af      	b.n	8008b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8008ba0:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8008ba4:	4617      	mov	r7, r2
 8008ba6:	f102 0808 	add.w	r8, r2, #8
 8008baa:	4666      	mov	r6, ip
 8008bac:	6838      	ldr	r0, [r7, #0]
 8008bae:	3708      	adds	r7, #8
 8008bb0:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8008bb4:	46e6      	mov	lr, ip
 8008bb6:	4547      	cmp	r7, r8
 8008bb8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8008bbc:	46f4      	mov	ip, lr
 8008bbe:	d1f5      	bne.n	8008bac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 8008bc0:	6838      	ldr	r0, [r7, #0]
 8008bc2:	f8ce 0000 	str.w	r0, [lr]
 8008bc6:	88b9      	ldrh	r1, [r7, #4]
 8008bc8:	f8ae 1004 	strh.w	r1, [lr, #4]
 8008bcc:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8008bd0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8008bd4:	d009      	beq.n	8008bea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8008bd6:	7b51      	ldrb	r1, [r2, #13]
 8008bd8:	7992      	ldrb	r2, [r2, #6]
 8008bda:	0149      	lsls	r1, r1, #5
 8008bdc:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8008be0:	4311      	orrs	r1, r2
 8008be2:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8008be6:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 8008bea:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8008bee:	d00d      	beq.n	8008c0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 8008bf0:	442b      	add	r3, r5
 8008bf2:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008bfc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8008c00:	10db      	asrs	r3, r3, #3
 8008c02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c06:	4313      	orrs	r3, r2
 8008c08:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8008c0c:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8008c10:	00cb      	lsls	r3, r1, #3
 8008c12:	064f      	lsls	r7, r1, #25
 8008c14:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8008c18:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8008c1c:	ea43 0302 	orr.w	r3, r3, r2
 8008c20:	bf44      	itt	mi
 8008c22:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8008c26:	b21b      	sxthmi	r3, r3
 8008c28:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8008c2c:	1b5d      	subs	r5, r3, r5
 8008c2e:	4632      	mov	r2, r6
 8008c30:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8008c34:	e6fa      	b.n	8008a2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8008c36:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8008c3a:	4694      	mov	ip, r2
 8008c3c:	f102 0908 	add.w	r9, r2, #8
 8008c40:	4676      	mov	r6, lr
 8008c42:	f8dc 0000 	ldr.w	r0, [ip]
 8008c46:	f10c 0c08 	add.w	ip, ip, #8
 8008c4a:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 8008c4e:	46f0      	mov	r8, lr
 8008c50:	45cc      	cmp	ip, r9
 8008c52:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8008c56:	46c6      	mov	lr, r8
 8008c58:	d1f3      	bne.n	8008c42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 8008c5a:	f8dc 0000 	ldr.w	r0, [ip]
 8008c5e:	f8c8 0000 	str.w	r0, [r8]
 8008c62:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8008c66:	f8a8 1004 	strh.w	r1, [r8, #4]
 8008c6a:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8008c6e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8008c72:	d009      	beq.n	8008c88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 8008c74:	7b51      	ldrb	r1, [r2, #13]
 8008c76:	7992      	ldrb	r2, [r2, #6]
 8008c78:	0149      	lsls	r1, r1, #5
 8008c7a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8008c7e:	4311      	orrs	r1, r2
 8008c80:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8008c84:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 8008c88:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8008c8c:	d00d      	beq.n	8008caa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 8008c8e:	1bdb      	subs	r3, r3, r7
 8008c90:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008c9a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8008c9e:	10db      	asrs	r3, r3, #3
 8008ca0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8008caa:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8008cae:	00cb      	lsls	r3, r1, #3
 8008cb0:	0648      	lsls	r0, r1, #25
 8008cb2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8008cb6:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8008cba:	ea43 0302 	orr.w	r3, r3, r2
 8008cbe:	bf44      	itt	mi
 8008cc0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8008cc4:	b21b      	sxthmi	r3, r3
 8008cc6:	e7b1      	b.n	8008c2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

08008cc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8008cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ccc:	461e      	mov	r6, r3
 8008cce:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8008cd0:	4604      	mov	r4, r0
 8008cd2:	4617      	mov	r7, r2
 8008cd4:	b92b      	cbnz	r3, 8008ce2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 8008cd6:	4b25      	ldr	r3, [pc, #148]	; (8008d6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 8008cd8:	21c0      	movs	r1, #192	; 0xc0
 8008cda:	4a25      	ldr	r2, [pc, #148]	; (8008d70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 8008cdc:	4825      	ldr	r0, [pc, #148]	; (8008d74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 8008cde:	f002 fddb 	bl	800b898 <__assert_func>
 8008ce2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8008ce4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008ce8:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8008cec:	f7fb f944 	bl	8003f78 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8008cf0:	4605      	mov	r5, r0
 8008cf2:	b918      	cbnz	r0, 8008cfc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 8008cf4:	6030      	str	r0, [r6, #0]
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	4601      	mov	r1, r0
 8008d00:	4638      	mov	r0, r7
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	4798      	blx	r3
 8008d06:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	6030      	str	r0, [r6, #0]
 8008d0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d12:	d213      	bcs.n	8008d3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8008d14:	4643      	mov	r3, r8
 8008d16:	4639      	mov	r1, r7
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f7ff fe33 	bl	8008984 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8008d1e:	6030      	str	r0, [r6, #0]
 8008d20:	6833      	ldr	r3, [r6, #0]
 8008d22:	b143      	cbz	r3, 8008d36 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8008d24:	7b5a      	ldrb	r2, [r3, #13]
 8008d26:	7a9b      	ldrb	r3, [r3, #10]
 8008d28:	0052      	lsls	r2, r2, #1
 8008d2a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	bf0c      	ite	eq
 8008d32:	2301      	moveq	r3, #1
 8008d34:	2300      	movne	r3, #0
 8008d36:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8008d3a:	e7dc      	b.n	8008cf6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 8008d3c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	2b7f      	cmp	r3, #127	; 0x7f
 8008d44:	d804      	bhi.n	8008d50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 8008d46:	4639      	mov	r1, r7
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f7ff fd01 	bl	8008750 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8008d4e:	e7e6      	b.n	8008d1e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8008d50:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d0e3      	beq.n	8008d20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8008d58:	f640 1302 	movw	r3, #2306	; 0x902
 8008d5c:	429d      	cmp	r5, r3
 8008d5e:	d1df      	bne.n	8008d20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8008d60:	4601      	mov	r1, r0
 8008d62:	4620      	mov	r0, r4
 8008d64:	f7ff fcc4 	bl	80086f0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8008d68:	e7d9      	b.n	8008d1e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8008d6a:	bf00      	nop
 8008d6c:	0800e324 	.word	0x0800e324
 8008d70:	0800e596 	.word	0x0800e596
 8008d74:	0800e32d 	.word	0x0800e32d

08008d78 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8008d78:	b510      	push	{r4, lr}
 8008d7a:	4604      	mov	r4, r0
 8008d7c:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8008d7e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8008d80:	b9d9      	cbnz	r1, 8008dba <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 8008d82:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8008d84:	2b0a      	cmp	r3, #10
 8008d86:	d036      	beq.n	8008df6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f7ff fc7a 	bl	8008682 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8008d8e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8008d90:	2b09      	cmp	r3, #9
 8008d92:	d906      	bls.n	8008da2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 8008d94:	4b18      	ldr	r3, [pc, #96]	; (8008df8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 8008d96:	f44f 7182 	mov.w	r1, #260	; 0x104
 8008d9a:	4a18      	ldr	r2, [pc, #96]	; (8008dfc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 8008d9c:	4818      	ldr	r0, [pc, #96]	; (8008e00 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 8008d9e:	f002 fd7b 	bl	800b898 <__assert_func>
 8008da2:	1c5a      	adds	r2, r3, #1
 8008da4:	8622      	strh	r2, [r4, #48]	; 0x30
 8008da6:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8008da8:	4413      	add	r3, r2
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	2b09      	cmp	r3, #9
 8008dae:	bf88      	it	hi
 8008db0:	3b0a      	subhi	r3, #10
 8008db2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8008db6:	8358      	strh	r0, [r3, #26]
 8008db8:	e7e3      	b.n	8008d82 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 8008dba:	2b0a      	cmp	r3, #10
 8008dbc:	d01b      	beq.n	8008df6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8008dbe:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8008dc0:	3901      	subs	r1, #1
 8008dc2:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8008dc6:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 8008dc8:	8721      	strh	r1, [r4, #56]	; 0x38
 8008dca:	1c51      	adds	r1, r2, #1
 8008dcc:	b289      	uxth	r1, r1
 8008dce:	2901      	cmp	r1, #1
 8008dd0:	bf8a      	itet	hi
 8008dd2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008dd6:	86e1      	strhls	r1, [r4, #54]	; 0x36
 8008dd8:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 8008dda:	2b09      	cmp	r3, #9
 8008ddc:	d8da      	bhi.n	8008d94 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 8008dde:	1c5a      	adds	r2, r3, #1
 8008de0:	8622      	strh	r2, [r4, #48]	; 0x30
 8008de2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8008de4:	4413      	add	r3, r2
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	2b09      	cmp	r3, #9
 8008dea:	bf88      	it	hi
 8008dec:	3b0a      	subhi	r3, #10
 8008dee:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8008df2:	8358      	strh	r0, [r3, #26]
 8008df4:	e7c2      	b.n	8008d7c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8008df6:	bd10      	pop	{r4, pc}
 8008df8:	0800e359 	.word	0x0800e359
 8008dfc:	0800e6ec 	.word	0x0800e6ec
 8008e00:	0800e32d 	.word	0x0800e32d

08008e04 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8008e04:	b538      	push	{r3, r4, r5, lr}
 8008e06:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8008e08:	4604      	mov	r4, r0
 8008e0a:	b92a      	cbnz	r2, 8008e18 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8008e0c:	4b13      	ldr	r3, [pc, #76]	; (8008e5c <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8008e0e:	21d5      	movs	r1, #213	; 0xd5
 8008e10:	4a13      	ldr	r2, [pc, #76]	; (8008e60 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8008e12:	4814      	ldr	r0, [pc, #80]	; (8008e64 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 8008e14:	f002 fd40 	bl	800b898 <__assert_func>
 8008e18:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8008e1a:	3a01      	subs	r2, #1
 8008e1c:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8008e20:	8b4d      	ldrh	r5, [r1, #26]
 8008e22:	8602      	strh	r2, [r0, #48]	; 0x30
 8008e24:	1c5a      	adds	r2, r3, #1
 8008e26:	b292      	uxth	r2, r2
 8008e28:	2a09      	cmp	r2, #9
 8008e2a:	bf8a      	itet	hi
 8008e2c:	3b09      	subhi	r3, #9
 8008e2e:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 8008e30:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 8008e32:	f7ff ffa1 	bl	8008d78 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8008e36:	8b23      	ldrh	r3, [r4, #24]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	bf9c      	itt	ls
 8008e3c:	3301      	addls	r3, #1
 8008e3e:	8323      	strhls	r3, [r4, #24]
 8008e40:	8ae3      	ldrh	r3, [r4, #22]
 8008e42:	b90b      	cbnz	r3, 8008e48 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 8008e44:	2302      	movs	r3, #2
 8008e46:	82e3      	strh	r3, [r4, #22]
 8008e48:	8ae3      	ldrh	r3, [r4, #22]
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	82e3      	strh	r3, [r4, #22]
 8008e52:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8008e56:	8265      	strh	r5, [r4, #18]
 8008e58:	bd38      	pop	{r3, r4, r5, pc}
 8008e5a:	bf00      	nop
 8008e5c:	0800e324 	.word	0x0800e324
 8008e60:	0800e641 	.word	0x0800e641
 8008e64:	0800e32d 	.word	0x0800e32d

08008e68 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8008e68:	428a      	cmp	r2, r1
 8008e6a:	b538      	push	{r3, r4, r5, lr}
 8008e6c:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 8008e6e:	d90c      	bls.n	8008e8a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8008e70:	b92c      	cbnz	r4, 8008e7e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 8008e72:	4b1c      	ldr	r3, [pc, #112]	; (8008ee4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8008e74:	21e1      	movs	r1, #225	; 0xe1
 8008e76:	4a1c      	ldr	r2, [pc, #112]	; (8008ee8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8008e78:	481c      	ldr	r0, [pc, #112]	; (8008eec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8008e7a:	f002 fd0d 	bl	800b898 <__assert_func>
 8008e7e:	3c01      	subs	r4, #1
 8008e80:	4b1b      	ldr	r3, [pc, #108]	; (8008ef0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 8008e82:	4a1c      	ldr	r2, [pc, #112]	; (8008ef4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 8008e84:	21c5      	movs	r1, #197	; 0xc5
 8008e86:	8604      	strh	r4, [r0, #48]	; 0x30
 8008e88:	e7f6      	b.n	8008e78 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8008e8a:	428c      	cmp	r4, r1
 8008e8c:	d203      	bcs.n	8008e96 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 8008e8e:	4b1a      	ldr	r3, [pc, #104]	; (8008ef8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 8008e90:	21cb      	movs	r1, #203	; 0xcb
 8008e92:	4a1a      	ldr	r2, [pc, #104]	; (8008efc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 8008e94:	e7f0      	b.n	8008e78 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8008e96:	1a64      	subs	r4, r4, r1
 8008e98:	250a      	movs	r5, #10
 8008e9a:	8604      	strh	r4, [r0, #48]	; 0x30
 8008e9c:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8008e9e:	4421      	add	r1, r4
 8008ea0:	b289      	uxth	r1, r1
 8008ea2:	2909      	cmp	r1, #9
 8008ea4:	bf88      	it	hi
 8008ea6:	390a      	subhi	r1, #10
 8008ea8:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8008eaa:	b1ba      	cbz	r2, 8008edc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8008eac:	3a01      	subs	r2, #1
 8008eae:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 8008eb0:	b292      	uxth	r2, r2
 8008eb2:	2909      	cmp	r1, #9
 8008eb4:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8008eb8:	d903      	bls.n	8008ec2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8008eba:	4b11      	ldr	r3, [pc, #68]	; (8008f00 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8008ebc:	21e6      	movs	r1, #230	; 0xe6
 8008ebe:	4a11      	ldr	r2, [pc, #68]	; (8008f04 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8008ec0:	e7da      	b.n	8008e78 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8008ec2:	3101      	adds	r1, #1
 8008ec4:	8601      	strh	r1, [r0, #48]	; 0x30
 8008ec6:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8008ec8:	b901      	cbnz	r1, 8008ecc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8008eca:	85c5      	strh	r5, [r0, #46]	; 0x2e
 8008ecc:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8008ece:	3901      	subs	r1, #1
 8008ed0:	b289      	uxth	r1, r1
 8008ed2:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8008ed4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8008ed8:	834c      	strh	r4, [r1, #26]
 8008eda:	e7e6      	b.n	8008eaa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8008edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ee0:	f7ff bf4a 	b.w	8008d78 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8008ee4:	0800e324 	.word	0x0800e324
 8008ee8:	0800e41a 	.word	0x0800e41a
 8008eec:	0800e32d 	.word	0x0800e32d
 8008ef0:	0800e365 	.word	0x0800e365
 8008ef4:	0800e4c4 	.word	0x0800e4c4
 8008ef8:	0800e373 	.word	0x0800e373
 8008efc:	0800e79b 	.word	0x0800e79b
 8008f00:	0800e37f 	.word	0x0800e37f
 8008f04:	0800e392 	.word	0x0800e392

08008f08 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8008f08:	3a01      	subs	r2, #1
 8008f0a:	b570      	push	{r4, r5, r6, lr}
 8008f0c:	b292      	uxth	r2, r2
 8008f0e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8008f12:	42b2      	cmp	r2, r6
 8008f14:	d019      	beq.n	8008f4a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 8008f16:	8b04      	ldrh	r4, [r0, #24]
 8008f18:	f831 5b02 	ldrh.w	r5, [r1], #2
 8008f1c:	4294      	cmp	r4, r2
 8008f1e:	d805      	bhi.n	8008f2c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8008f20:	4b19      	ldr	r3, [pc, #100]	; (8008f88 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8008f22:	4a1a      	ldr	r2, [pc, #104]	; (8008f8c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 8008f24:	21c5      	movs	r1, #197	; 0xc5
 8008f26:	481a      	ldr	r0, [pc, #104]	; (8008f90 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8008f28:	f002 fcb6 	bl	800b898 <__assert_func>
 8008f2c:	8ac4      	ldrh	r4, [r0, #22]
 8008f2e:	4414      	add	r4, r2
 8008f30:	3a01      	subs	r2, #1
 8008f32:	b2a4      	uxth	r4, r4
 8008f34:	b292      	uxth	r2, r2
 8008f36:	2c01      	cmp	r4, #1
 8008f38:	bf88      	it	hi
 8008f3a:	3c02      	subhi	r4, #2
 8008f3c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8008f40:	8a64      	ldrh	r4, [r4, #18]
 8008f42:	42ac      	cmp	r4, r5
 8008f44:	d0e5      	beq.n	8008f12 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 8008f46:	2000      	movs	r0, #0
 8008f48:	bd70      	pop	{r4, r5, r6, pc}
 8008f4a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8008f4e:	2400      	movs	r4, #0
 8008f50:	4413      	add	r3, r2
 8008f52:	b2a2      	uxth	r2, r4
 8008f54:	429a      	cmp	r2, r3
 8008f56:	da14      	bge.n	8008f82 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8008f58:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 8008f5a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8008f5e:	4296      	cmp	r6, r2
 8008f60:	d802      	bhi.n	8008f68 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 8008f62:	4b09      	ldr	r3, [pc, #36]	; (8008f88 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8008f64:	4a0b      	ldr	r2, [pc, #44]	; (8008f94 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 8008f66:	e7dd      	b.n	8008f24 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8008f68:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 8008f6a:	3401      	adds	r4, #1
 8008f6c:	4432      	add	r2, r6
 8008f6e:	b292      	uxth	r2, r2
 8008f70:	2a09      	cmp	r2, #9
 8008f72:	bf88      	it	hi
 8008f74:	3a0a      	subhi	r2, #10
 8008f76:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8008f7a:	8b52      	ldrh	r2, [r2, #26]
 8008f7c:	42aa      	cmp	r2, r5
 8008f7e:	d0e8      	beq.n	8008f52 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 8008f80:	e7e1      	b.n	8008f46 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8008f82:	2001      	movs	r0, #1
 8008f84:	e7e0      	b.n	8008f48 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8008f86:	bf00      	nop
 8008f88:	0800e365 	.word	0x0800e365
 8008f8c:	0800e81f 	.word	0x0800e81f
 8008f90:	0800e32d 	.word	0x0800e32d
 8008f94:	0800e4c4 	.word	0x0800e4c4

08008f98 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8008f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f9c:	4605      	mov	r5, r0
 8008f9e:	4616      	mov	r6, r2
 8008fa0:	1c8c      	adds	r4, r1, #2
 8008fa2:	8809      	ldrh	r1, [r1, #0]
 8008fa4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8008fa8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8008fac:	42b3      	cmp	r3, r6
 8008fae:	d124      	bne.n	8008ffa <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8008fb0:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8008fb4:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8008fb8:	f001 070f 	and.w	r7, r1, #15
 8008fbc:	4652      	mov	r2, sl
 8008fbe:	f8cd 8000 	str.w	r8, [sp]
 8008fc2:	464b      	mov	r3, r9
 8008fc4:	4621      	mov	r1, r4
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	f7ff ff9e 	bl	8008f08 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8008fcc:	4683      	mov	fp, r0
 8008fce:	b168      	cbz	r0, 8008fec <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8008fd0:	eb0a 0109 	add.w	r1, sl, r9
 8008fd4:	463a      	mov	r2, r7
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	4441      	add	r1, r8
 8008fda:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8008fde:	4649      	mov	r1, r9
 8008fe0:	f7ff ff42 	bl	8008e68 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8008fe4:	4658      	mov	r0, fp
 8008fe6:	b003      	add	sp, #12
 8008fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fec:	eb07 010a 	add.w	r1, r7, sl
 8008ff0:	4449      	add	r1, r9
 8008ff2:	4441      	add	r1, r8
 8008ff4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8008ff8:	e7d2      	b.n	8008fa0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8008ffa:	f04f 0b00 	mov.w	fp, #0
 8008ffe:	e7f1      	b.n	8008fe4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08009000 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8009000:	b570      	push	{r4, r5, r6, lr}
 8009002:	8810      	ldrh	r0, [r2, #0]
 8009004:	4298      	cmp	r0, r3
 8009006:	d817      	bhi.n	8009038 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8009008:	1e48      	subs	r0, r1, #1
 800900a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800900e:	4298      	cmp	r0, r3
 8009010:	d312      	bcc.n	8009038 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8009012:	2400      	movs	r4, #0
 8009014:	428c      	cmp	r4, r1
 8009016:	d20f      	bcs.n	8009038 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8009018:	1860      	adds	r0, r4, r1
 800901a:	1040      	asrs	r0, r0, #1
 800901c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8009020:	0085      	lsls	r5, r0, #2
 8009022:	42b3      	cmp	r3, r6
 8009024:	d902      	bls.n	800902c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8009026:	3001      	adds	r0, #1
 8009028:	b284      	uxth	r4, r0
 800902a:	e7f3      	b.n	8009014 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800902c:	d201      	bcs.n	8009032 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800902e:	b281      	uxth	r1, r0
 8009030:	e7f0      	b.n	8009014 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8009032:	442a      	add	r2, r5
 8009034:	8850      	ldrh	r0, [r2, #2]
 8009036:	bd70      	pop	{r4, r5, r6, pc}
 8009038:	2000      	movs	r0, #0
 800903a:	e7fc      	b.n	8009036 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800903c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800903c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009040:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8009042:	4604      	mov	r4, r0
 8009044:	260b      	movs	r6, #11
 8009046:	886f      	ldrh	r7, [r5, #2]
 8009048:	087f      	lsrs	r7, r7, #1
 800904a:	3e01      	subs	r6, #1
 800904c:	d01b      	beq.n	8009086 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 800904e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8009050:	b92b      	cbnz	r3, 800905e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 8009052:	4b0e      	ldr	r3, [pc, #56]	; (800908c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 8009054:	21c0      	movs	r1, #192	; 0xc0
 8009056:	4a0e      	ldr	r2, [pc, #56]	; (8009090 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8009058:	480e      	ldr	r0, [pc, #56]	; (8009094 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 800905a:	f002 fc1d 	bl	800b898 <__assert_func>
 800905e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8009060:	462a      	mov	r2, r5
 8009062:	4639      	mov	r1, r7
 8009064:	4620      	mov	r0, r4
 8009066:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800906a:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 800906e:	4643      	mov	r3, r8
 8009070:	f7ff ffc6 	bl	8009000 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8009074:	b138      	cbz	r0, 8009086 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8009076:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800907a:	4642      	mov	r2, r8
 800907c:	4620      	mov	r0, r4
 800907e:	f7ff ff8b 	bl	8008f98 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8009082:	2800      	cmp	r0, #0
 8009084:	d1e1      	bne.n	800904a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8009086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800908a:	bf00      	nop
 800908c:	0800e324 	.word	0x0800e324
 8009090:	0800e596 	.word	0x0800e596
 8009094:	0800e32d 	.word	0x0800e32d

08009098 <_ZN8touchgfx8ceil28_4El>:
 8009098:	f110 030f 	adds.w	r3, r0, #15
 800909c:	d401      	bmi.n	80090a2 <_ZN8touchgfx8ceil28_4El+0xa>
 800909e:	1118      	asrs	r0, r3, #4
 80090a0:	4770      	bx	lr
 80090a2:	2210      	movs	r2, #16
 80090a4:	f1c0 0001 	rsb	r0, r0, #1
 80090a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80090ac:	f010 000f 	ands.w	r0, r0, #15
 80090b0:	bf18      	it	ne
 80090b2:	2001      	movne	r0, #1
 80090b4:	1a18      	subs	r0, r3, r0
 80090b6:	4770      	bx	lr

080090b8 <_ZN8touchgfx11floorDivModEllRlS0_>:
 80090b8:	2900      	cmp	r1, #0
 80090ba:	b538      	push	{r3, r4, r5, lr}
 80090bc:	dc05      	bgt.n	80090ca <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 80090be:	4b0f      	ldr	r3, [pc, #60]	; (80090fc <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 80090c0:	21fa      	movs	r1, #250	; 0xfa
 80090c2:	4a0f      	ldr	r2, [pc, #60]	; (8009100 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 80090c4:	480f      	ldr	r0, [pc, #60]	; (8009104 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 80090c6:	f002 fbe7 	bl	800b898 <__assert_func>
 80090ca:	2800      	cmp	r0, #0
 80090cc:	db06      	blt.n	80090dc <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 80090ce:	fb90 f4f1 	sdiv	r4, r0, r1
 80090d2:	fb01 0114 	mls	r1, r1, r4, r0
 80090d6:	6014      	str	r4, [r2, #0]
 80090d8:	6019      	str	r1, [r3, #0]
 80090da:	bd38      	pop	{r3, r4, r5, pc}
 80090dc:	4240      	negs	r0, r0
 80090de:	fb90 f4f1 	sdiv	r4, r0, r1
 80090e2:	4265      	negs	r5, r4
 80090e4:	fb01 0014 	mls	r0, r1, r4, r0
 80090e8:	6015      	str	r5, [r2, #0]
 80090ea:	6018      	str	r0, [r3, #0]
 80090ec:	2800      	cmp	r0, #0
 80090ee:	d0f4      	beq.n	80090da <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 80090f0:	6810      	ldr	r0, [r2, #0]
 80090f2:	3801      	subs	r0, #1
 80090f4:	6010      	str	r0, [r2, #0]
 80090f6:	6818      	ldr	r0, [r3, #0]
 80090f8:	1a09      	subs	r1, r1, r0
 80090fa:	e7ed      	b.n	80090d8 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 80090fc:	0800e8f0 	.word	0x0800e8f0
 8009100:	0800e92f 	.word	0x0800e92f
 8009104:	0800e900 	.word	0x0800e900

08009108 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8009108:	b570      	push	{r4, r5, r6, lr}
 800910a:	694a      	ldr	r2, [r1, #20]
 800910c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800910e:	684b      	ldr	r3, [r1, #4]
 8009110:	1b54      	subs	r4, r2, r5
 8009112:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8009114:	f000 8106 	beq.w	8009324 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8009118:	1b9b      	subs	r3, r3, r6
 800911a:	d003      	beq.n	8009124 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800911c:	4363      	muls	r3, r4
 800911e:	2210      	movs	r2, #16
 8009120:	fb93 f3f2 	sdiv	r3, r3, r2
 8009124:	680c      	ldr	r4, [r1, #0]
 8009126:	698a      	ldr	r2, [r1, #24]
 8009128:	1b65      	subs	r5, r4, r5
 800912a:	f000 80fd 	beq.w	8009328 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 800912e:	1b92      	subs	r2, r2, r6
 8009130:	d003      	beq.n	800913a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8009132:	436a      	muls	r2, r5
 8009134:	2410      	movs	r4, #16
 8009136:	fb92 f2f4 	sdiv	r2, r2, r4
 800913a:	1a9b      	subs	r3, r3, r2
 800913c:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8009364 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8009140:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009144:	460a      	mov	r2, r1
 8009146:	ee07 3a90 	vmov	s15, r3
 800914a:	f100 040c 	add.w	r4, r0, #12
 800914e:	4603      	mov	r3, r0
 8009150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009154:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009158:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800915c:	eeb1 6a43 	vneg.f32	s12, s6
 8009160:	edd2 7a02 	vldr	s15, [r2, #8]
 8009164:	3214      	adds	r2, #20
 8009166:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800916a:	ece3 6a01 	vstmia	r3!, {s13}
 800916e:	429c      	cmp	r4, r3
 8009170:	ed52 7a02 	vldr	s15, [r2, #-8]
 8009174:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009178:	edc3 7a02 	vstr	s15, [r3, #8]
 800917c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8009180:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009184:	edc3 7a05 	vstr	s15, [r3, #20]
 8009188:	d1ea      	bne.n	8009160 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 800918a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800918c:	698b      	ldr	r3, [r1, #24]
 800918e:	edd0 4a02 	vldr	s9, [r0, #8]
 8009192:	1a9b      	subs	r3, r3, r2
 8009194:	edd0 3a00 	vldr	s7, [r0]
 8009198:	edd0 6a01 	vldr	s13, [r0, #4]
 800919c:	ee07 3a90 	vmov	s15, r3
 80091a0:	684b      	ldr	r3, [r1, #4]
 80091a2:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80091a6:	ed90 5a05 	vldr	s10, [r0, #20]
 80091aa:	1a9b      	subs	r3, r3, r2
 80091ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091b0:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80091b4:	ed90 2a03 	vldr	s4, [r0, #12]
 80091b8:	ee07 3a10 	vmov	s14, r3
 80091bc:	edd0 5a04 	vldr	s11, [r0, #16]
 80091c0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80091c4:	ed90 1a07 	vldr	s2, [r0, #28]
 80091c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80091cc:	edd0 2a06 	vldr	s5, [r0, #24]
 80091d0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80091d4:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80091d8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80091dc:	ee32 5a45 	vsub.f32	s10, s4, s10
 80091e0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80091e4:	ee67 7a83 	vmul.f32	s15, s15, s6
 80091e8:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 80091ec:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80091ee:	694a      	ldr	r2, [r1, #20]
 80091f0:	1b13      	subs	r3, r2, r4
 80091f2:	ee07 3a10 	vmov	s14, r3
 80091f6:	680b      	ldr	r3, [r1, #0]
 80091f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80091fc:	1b1b      	subs	r3, r3, r4
 80091fe:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009202:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8009206:	ee07 3a10 	vmov	s14, r3
 800920a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800920e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009212:	eee6 4a87 	vfma.f32	s9, s13, s14
 8009216:	ee64 4a86 	vmul.f32	s9, s9, s12
 800921a:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 800921e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009220:	698b      	ldr	r3, [r1, #24]
 8009222:	1a9b      	subs	r3, r3, r2
 8009224:	ee06 3a90 	vmov	s13, r3
 8009228:	684b      	ldr	r3, [r1, #4]
 800922a:	1a9b      	subs	r3, r3, r2
 800922c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009230:	ee07 3a10 	vmov	s14, r3
 8009234:	ee66 6a84 	vmul.f32	s13, s13, s8
 8009238:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800923c:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8009240:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009244:	eee5 6a87 	vfma.f32	s13, s11, s14
 8009248:	ee66 6a83 	vmul.f32	s13, s13, s6
 800924c:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8009250:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8009252:	694a      	ldr	r2, [r1, #20]
 8009254:	1b13      	subs	r3, r2, r4
 8009256:	ee07 3a10 	vmov	s14, r3
 800925a:	680b      	ldr	r3, [r1, #0]
 800925c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009260:	1b1b      	subs	r3, r3, r4
 8009262:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009266:	ee25 5a47 	vnmul.f32	s10, s10, s14
 800926a:	ee07 3a10 	vmov	s14, r3
 800926e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009272:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009276:	eea5 5a87 	vfma.f32	s10, s11, s14
 800927a:	edd0 5a08 	vldr	s11, [r0, #32]
 800927e:	ee31 1a65 	vsub.f32	s2, s2, s11
 8009282:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8009286:	ee25 5a06 	vmul.f32	s10, s10, s12
 800928a:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 800928e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009290:	698b      	ldr	r3, [r1, #24]
 8009292:	1a9b      	subs	r3, r3, r2
 8009294:	ee07 3a10 	vmov	s14, r3
 8009298:	684b      	ldr	r3, [r1, #4]
 800929a:	1a9b      	subs	r3, r3, r2
 800929c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80092a0:	ee01 3a90 	vmov	s3, r3
 80092a4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80092a8:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80092ac:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80092b0:	ee61 1a84 	vmul.f32	s3, s3, s8
 80092b4:	eea1 7a21 	vfma.f32	s14, s2, s3
 80092b8:	ee27 7a03 	vmul.f32	s14, s14, s6
 80092bc:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80092c0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80092c2:	694a      	ldr	r2, [r1, #20]
 80092c4:	1b13      	subs	r3, r2, r4
 80092c6:	ee03 3a10 	vmov	s6, r3
 80092ca:	680b      	ldr	r3, [r1, #0]
 80092cc:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80092d0:	1b1b      	subs	r3, r3, r4
 80092d2:	ee23 3a04 	vmul.f32	s6, s6, s8
 80092d6:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80092da:	ee03 3a10 	vmov	s6, r3
 80092de:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80092e2:	ee23 4a04 	vmul.f32	s8, s6, s8
 80092e6:	eee1 5a04 	vfma.f32	s11, s2, s8
 80092ea:	ee25 6a86 	vmul.f32	s12, s11, s12
 80092ee:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80092f2:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 80092f6:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80092fa:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80092fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009302:	dd13      	ble.n	800932c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8009304:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009308:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 800930c:	63c3      	str	r3, [r0, #60]	; 0x3c
 800930e:	eee3 7a87 	vfma.f32	s15, s7, s14
 8009312:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800931a:	dd15      	ble.n	8009348 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 800931c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009320:	6403      	str	r3, [r0, #64]	; 0x40
 8009322:	bd70      	pop	{r4, r5, r6, pc}
 8009324:	4623      	mov	r3, r4
 8009326:	e6fd      	b.n	8009124 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8009328:	462a      	mov	r2, r5
 800932a:	e706      	b.n	800913a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800932c:	d502      	bpl.n	8009334 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 800932e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8009332:	e7e9      	b.n	8009308 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8009334:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8009338:	eea3 2a85 	vfma.f32	s4, s7, s10
 800933c:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8009340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009344:	dade      	bge.n	8009304 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8009346:	e7f2      	b.n	800932e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8009348:	d502      	bpl.n	8009350 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 800934a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800934e:	e7e7      	b.n	8009320 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8009350:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8009354:	eee3 4a86 	vfma.f32	s9, s7, s12
 8009358:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 800935c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009360:	dadc      	bge.n	800931c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8009362:	e7f2      	b.n	800934a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8009364:	3d800000 	.word	0x3d800000

08009368 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8009368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936c:	f04f 0814 	mov.w	r8, #20
 8009370:	4604      	mov	r4, r0
 8009372:	4617      	mov	r7, r2
 8009374:	460d      	mov	r5, r1
 8009376:	fb08 f903 	mul.w	r9, r8, r3
 800937a:	461e      	mov	r6, r3
 800937c:	eb02 0a09 	add.w	sl, r2, r9
 8009380:	f8da 0004 	ldr.w	r0, [sl, #4]
 8009384:	f7ff fe88 	bl	8009098 <_ZN8touchgfx8ceil28_4El>
 8009388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800938a:	6160      	str	r0, [r4, #20]
 800938c:	fb08 f803 	mul.w	r8, r8, r3
 8009390:	9001      	str	r0, [sp, #4]
 8009392:	eb07 0b08 	add.w	fp, r7, r8
 8009396:	f8db 0004 	ldr.w	r0, [fp, #4]
 800939a:	f7ff fe7d 	bl	8009098 <_ZN8touchgfx8ceil28_4El>
 800939e:	9a01      	ldr	r2, [sp, #4]
 80093a0:	1a80      	subs	r0, r0, r2
 80093a2:	61a0      	str	r0, [r4, #24]
 80093a4:	2800      	cmp	r0, #0
 80093a6:	f000 8088 	beq.w	80094ba <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 80093aa:	f857 3009 	ldr.w	r3, [r7, r9]
 80093ae:	f857 c008 	ldr.w	ip, [r7, r8]
 80093b2:	f8db 0004 	ldr.w	r0, [fp, #4]
 80093b6:	ebac 0c03 	sub.w	ip, ip, r3
 80093ba:	f8da 1004 	ldr.w	r1, [sl, #4]
 80093be:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 80093c2:	1a40      	subs	r0, r0, r1
 80093c4:	fb0b f202 	mul.w	r2, fp, r2
 80093c8:	ea4f 1800 	mov.w	r8, r0, lsl #4
 80093cc:	fb0c 2211 	mls	r2, ip, r1, r2
 80093d0:	4641      	mov	r1, r8
 80093d2:	fb00 2003 	mla	r0, r0, r3, r2
 80093d6:	f104 0310 	add.w	r3, r4, #16
 80093da:	4622      	mov	r2, r4
 80093dc:	3801      	subs	r0, #1
 80093de:	4440      	add	r0, r8
 80093e0:	f7ff fe6a 	bl	80090b8 <_ZN8touchgfx11floorDivModEllRlS0_>
 80093e4:	f104 0308 	add.w	r3, r4, #8
 80093e8:	1d22      	adds	r2, r4, #4
 80093ea:	4641      	mov	r1, r8
 80093ec:	4658      	mov	r0, fp
 80093ee:	f7ff fe63 	bl	80090b8 <_ZN8touchgfx11floorDivModEllRlS0_>
 80093f2:	f8c4 800c 	str.w	r8, [r4, #12]
 80093f6:	6962      	ldr	r2, [r4, #20]
 80093f8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80093fc:	eddf 6a31 	vldr	s13, [pc, #196]	; 80094c4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8009400:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8009404:	6822      	ldr	r2, [r4, #0]
 8009406:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 800940a:	ee07 3a10 	vmov	s14, r3
 800940e:	f857 3009 	ldr.w	r3, [r7, r9]
 8009412:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8009416:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800941a:	ee07 3a90 	vmov	s15, r3
 800941e:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 8009422:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800942a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800942e:	edd3 6a00 	vldr	s13, [r3]
 8009432:	eee6 6a07 	vfma.f32	s13, s12, s14
 8009436:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800943a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800943e:	edc4 6a07 	vstr	s13, [r4, #28]
 8009442:	edd4 6a01 	vldr	s13, [r4, #4]
 8009446:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 800944a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800944e:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8009452:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8009456:	ed84 6a08 	vstr	s12, [r4, #32]
 800945a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800945c:	6262      	str	r2, [r4, #36]	; 0x24
 800945e:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 8009462:	ed93 6a03 	vldr	s12, [r3, #12]
 8009466:	eea5 6a87 	vfma.f32	s12, s11, s14
 800946a:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 800946e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8009472:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 8009476:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 800947a:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 800947e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8009482:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 8009486:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8009488:	6322      	str	r2, [r4, #48]	; 0x30
 800948a:	ed93 6a06 	vldr	s12, [r3, #24]
 800948e:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 8009492:	eea5 6a87 	vfma.f32	s12, s11, s14
 8009496:	eeb0 7a46 	vmov.f32	s14, s12
 800949a:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 800949e:	eea6 7a27 	vfma.f32	s14, s12, s15
 80094a2:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 80094a6:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 80094aa:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 80094ae:	eee6 7a87 	vfma.f32	s15, s13, s14
 80094b2:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 80094b6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80094b8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80094ba:	4620      	mov	r0, r4
 80094bc:	b003      	add	sp, #12
 80094be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c2:	bf00      	nop
 80094c4:	3d800000 	.word	0x3d800000

080094c8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80094c8:	4b06      	ldr	r3, [pc, #24]	; (80094e4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80094ca:	881a      	ldrh	r2, [r3, #0]
 80094cc:	4282      	cmp	r2, r0
 80094ce:	d807      	bhi.n	80094e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80094d0:	4b05      	ldr	r3, [pc, #20]	; (80094e8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	4413      	add	r3, r2
 80094d6:	4298      	cmp	r0, r3
 80094d8:	bfac      	ite	ge
 80094da:	2000      	movge	r0, #0
 80094dc:	2001      	movlt	r0, #1
 80094de:	4770      	bx	lr
 80094e0:	2000      	movs	r0, #0
 80094e2:	4770      	bx	lr
 80094e4:	200011a0 	.word	0x200011a0
 80094e8:	200011a2 	.word	0x200011a2

080094ec <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80094ec:	b508      	push	{r3, lr}
 80094ee:	4601      	mov	r1, r0
 80094f0:	f7ff ffea 	bl	80094c8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80094f4:	b118      	cbz	r0, 80094fe <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80094f6:	4b02      	ldr	r3, [pc, #8]	; (8009500 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80094fe:	bd08      	pop	{r3, pc}
 8009500:	20001198 	.word	0x20001198

08009504 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8009504:	b508      	push	{r3, lr}
 8009506:	4b14      	ldr	r3, [pc, #80]	; (8009558 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8009508:	6819      	ldr	r1, [r3, #0]
 800950a:	b931      	cbnz	r1, 800951a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 800950c:	4b13      	ldr	r3, [pc, #76]	; (800955c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 800950e:	f240 3187 	movw	r1, #903	; 0x387
 8009512:	4a13      	ldr	r2, [pc, #76]	; (8009560 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8009514:	4813      	ldr	r0, [pc, #76]	; (8009564 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8009516:	f002 f9bf 	bl	800b898 <__assert_func>
 800951a:	4a13      	ldr	r2, [pc, #76]	; (8009568 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 800951c:	8803      	ldrh	r3, [r0, #0]
 800951e:	8812      	ldrh	r2, [r2, #0]
 8009520:	4293      	cmp	r3, r2
 8009522:	d204      	bcs.n	800952e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8009524:	2214      	movs	r2, #20
 8009526:	fb02 1303 	mla	r3, r2, r3, r1
 800952a:	8918      	ldrh	r0, [r3, #8]
 800952c:	bd08      	pop	{r3, pc}
 800952e:	490f      	ldr	r1, [pc, #60]	; (800956c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8009530:	8809      	ldrh	r1, [r1, #0]
 8009532:	4411      	add	r1, r2
 8009534:	428b      	cmp	r3, r1
 8009536:	da06      	bge.n	8009546 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8009538:	1a9b      	subs	r3, r3, r2
 800953a:	4a0d      	ldr	r2, [pc, #52]	; (8009570 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 800953c:	210e      	movs	r1, #14
 800953e:	6812      	ldr	r2, [r2, #0]
 8009540:	fb01 2303 	mla	r3, r1, r3, r2
 8009544:	e7f1      	b.n	800952a <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8009546:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800954a:	4293      	cmp	r3, r2
 800954c:	bf0a      	itet	eq
 800954e:	4b09      	ldreq	r3, [pc, #36]	; (8009574 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8009550:	2000      	movne	r0, #0
 8009552:	8818      	ldrheq	r0, [r3, #0]
 8009554:	e7ea      	b.n	800952c <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8009556:	bf00      	nop
 8009558:	200011a4 	.word	0x200011a4
 800955c:	0800e9cd 	.word	0x0800e9cd
 8009560:	0800ea70 	.word	0x0800ea70
 8009564:	0800e9a8 	.word	0x0800e9a8
 8009568:	200011a0 	.word	0x200011a0
 800956c:	200011a2 	.word	0x200011a2
 8009570:	2000119c 	.word	0x2000119c
 8009574:	20001148 	.word	0x20001148

08009578 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8009578:	b508      	push	{r3, lr}
 800957a:	4b14      	ldr	r3, [pc, #80]	; (80095cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 800957c:	6819      	ldr	r1, [r3, #0]
 800957e:	b931      	cbnz	r1, 800958e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8009580:	4b13      	ldr	r3, [pc, #76]	; (80095d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8009582:	f240 319b 	movw	r1, #923	; 0x39b
 8009586:	4a13      	ldr	r2, [pc, #76]	; (80095d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8009588:	4813      	ldr	r0, [pc, #76]	; (80095d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 800958a:	f002 f985 	bl	800b898 <__assert_func>
 800958e:	4a13      	ldr	r2, [pc, #76]	; (80095dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8009590:	8803      	ldrh	r3, [r0, #0]
 8009592:	8812      	ldrh	r2, [r2, #0]
 8009594:	4293      	cmp	r3, r2
 8009596:	d204      	bcs.n	80095a2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8009598:	2214      	movs	r2, #20
 800959a:	fb02 1303 	mla	r3, r2, r3, r1
 800959e:	8958      	ldrh	r0, [r3, #10]
 80095a0:	bd08      	pop	{r3, pc}
 80095a2:	490f      	ldr	r1, [pc, #60]	; (80095e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 80095a4:	8809      	ldrh	r1, [r1, #0]
 80095a6:	4411      	add	r1, r2
 80095a8:	428b      	cmp	r3, r1
 80095aa:	da06      	bge.n	80095ba <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 80095ac:	1a9b      	subs	r3, r3, r2
 80095ae:	4a0d      	ldr	r2, [pc, #52]	; (80095e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 80095b0:	210e      	movs	r1, #14
 80095b2:	6812      	ldr	r2, [r2, #0]
 80095b4:	fb01 2303 	mla	r3, r1, r3, r2
 80095b8:	e7f1      	b.n	800959e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 80095ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80095be:	4293      	cmp	r3, r2
 80095c0:	bf0a      	itet	eq
 80095c2:	4b09      	ldreq	r3, [pc, #36]	; (80095e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 80095c4:	2000      	movne	r0, #0
 80095c6:	8818      	ldrheq	r0, [r3, #0]
 80095c8:	e7ea      	b.n	80095a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 80095ca:	bf00      	nop
 80095cc:	200011a4 	.word	0x200011a4
 80095d0:	0800e9cd 	.word	0x0800e9cd
 80095d4:	0800ea9c 	.word	0x0800ea9c
 80095d8:	0800e9a8 	.word	0x0800e9a8
 80095dc:	200011a0 	.word	0x200011a0
 80095e0:	200011a2 	.word	0x200011a2
 80095e4:	2000119c 	.word	0x2000119c
 80095e8:	2000114a 	.word	0x2000114a

080095ec <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80095ec:	4b23      	ldr	r3, [pc, #140]	; (800967c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80095ee:	b510      	push	{r4, lr}
 80095f0:	681c      	ldr	r4, [r3, #0]
 80095f2:	b934      	cbnz	r4, 8009602 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 80095f4:	4b22      	ldr	r3, [pc, #136]	; (8009680 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80095f6:	f240 31af 	movw	r1, #943	; 0x3af
 80095fa:	4a22      	ldr	r2, [pc, #136]	; (8009684 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 80095fc:	4822      	ldr	r0, [pc, #136]	; (8009688 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 80095fe:	f002 f94b 	bl	800b898 <__assert_func>
 8009602:	4a22      	ldr	r2, [pc, #136]	; (800968c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8009604:	880b      	ldrh	r3, [r1, #0]
 8009606:	8812      	ldrh	r2, [r2, #0]
 8009608:	4293      	cmp	r3, r2
 800960a:	d211      	bcs.n	8009630 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 800960c:	2214      	movs	r2, #20
 800960e:	fb02 4303 	mla	r3, r2, r3, r4
 8009612:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8009616:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800961a:	8a1a      	ldrh	r2, [r3, #16]
 800961c:	8a5b      	ldrh	r3, [r3, #18]
 800961e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8009622:	8004      	strh	r4, [r0, #0]
 8009624:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009628:	8041      	strh	r1, [r0, #2]
 800962a:	8082      	strh	r2, [r0, #4]
 800962c:	80c3      	strh	r3, [r0, #6]
 800962e:	e00e      	b.n	800964e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8009630:	4917      	ldr	r1, [pc, #92]	; (8009690 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8009632:	8809      	ldrh	r1, [r1, #0]
 8009634:	4411      	add	r1, r2
 8009636:	428b      	cmp	r3, r1
 8009638:	da0a      	bge.n	8009650 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 800963a:	1a9b      	subs	r3, r3, r2
 800963c:	4a15      	ldr	r2, [pc, #84]	; (8009694 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 800963e:	210e      	movs	r1, #14
 8009640:	6812      	ldr	r2, [r2, #0]
 8009642:	fb01 2303 	mla	r3, r1, r3, r2
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	6002      	str	r2, [r0, #0]
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	6042      	str	r2, [r0, #4]
 800964e:	bd10      	pop	{r4, pc}
 8009650:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009654:	4293      	cmp	r3, r2
 8009656:	d10b      	bne.n	8009670 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8009658:	4b0f      	ldr	r3, [pc, #60]	; (8009698 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 800965a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800965e:	4b0f      	ldr	r3, [pc, #60]	; (800969c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8009660:	8081      	strh	r1, [r0, #4]
 8009662:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009666:	2300      	movs	r3, #0
 8009668:	80c2      	strh	r2, [r0, #6]
 800966a:	8003      	strh	r3, [r0, #0]
 800966c:	8043      	strh	r3, [r0, #2]
 800966e:	e7ee      	b.n	800964e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8009670:	2300      	movs	r3, #0
 8009672:	8003      	strh	r3, [r0, #0]
 8009674:	8043      	strh	r3, [r0, #2]
 8009676:	8083      	strh	r3, [r0, #4]
 8009678:	e7d8      	b.n	800962c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 800967a:	bf00      	nop
 800967c:	200011a4 	.word	0x200011a4
 8009680:	0800e9cd 	.word	0x0800e9cd
 8009684:	0800ea09 	.word	0x0800ea09
 8009688:	0800e9a8 	.word	0x0800e9a8
 800968c:	200011a0 	.word	0x200011a0
 8009690:	200011a2 	.word	0x200011a2
 8009694:	2000119c 	.word	0x2000119c
 8009698:	20001148 	.word	0x20001148
 800969c:	2000114a 	.word	0x2000114a

080096a0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 80096a0:	4b18      	ldr	r3, [pc, #96]	; (8009704 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	b34b      	cbz	r3, 80096fa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80096a6:	4a18      	ldr	r2, [pc, #96]	; (8009708 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80096a8:	8800      	ldrh	r0, [r0, #0]
 80096aa:	8812      	ldrh	r2, [r2, #0]
 80096ac:	4290      	cmp	r0, r2
 80096ae:	d211      	bcs.n	80096d4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 80096b0:	2214      	movs	r2, #20
 80096b2:	fb02 3300 	mla	r3, r2, r0, r3
 80096b6:	8a1a      	ldrh	r2, [r3, #16]
 80096b8:	8919      	ldrh	r1, [r3, #8]
 80096ba:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80096be:	428a      	cmp	r2, r1
 80096c0:	db1d      	blt.n	80096fe <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 80096c2:	8a58      	ldrh	r0, [r3, #18]
 80096c4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80096c8:	895b      	ldrh	r3, [r3, #10]
 80096ca:	4298      	cmp	r0, r3
 80096cc:	bfac      	ite	ge
 80096ce:	2000      	movge	r0, #0
 80096d0:	2001      	movlt	r0, #1
 80096d2:	4770      	bx	lr
 80096d4:	4b0d      	ldr	r3, [pc, #52]	; (800970c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80096d6:	881b      	ldrh	r3, [r3, #0]
 80096d8:	4413      	add	r3, r2
 80096da:	4298      	cmp	r0, r3
 80096dc:	da0d      	bge.n	80096fa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80096de:	4b0c      	ldr	r3, [pc, #48]	; (8009710 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 80096e0:	1a80      	subs	r0, r0, r2
 80096e2:	220e      	movs	r2, #14
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	fb02 3300 	mla	r3, r2, r0, r3
 80096ea:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80096ee:	891a      	ldrh	r2, [r3, #8]
 80096f0:	4291      	cmp	r1, r2
 80096f2:	db04      	blt.n	80096fe <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 80096f4:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80096f8:	e7e6      	b.n	80096c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 80096fa:	2000      	movs	r0, #0
 80096fc:	4770      	bx	lr
 80096fe:	2001      	movs	r0, #1
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	200011a4 	.word	0x200011a4
 8009708:	200011a0 	.word	0x200011a0
 800970c:	200011a2 	.word	0x200011a2
 8009710:	2000119c 	.word	0x2000119c

08009714 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8009714:	b508      	push	{r3, lr}
 8009716:	4b12      	ldr	r3, [pc, #72]	; (8009760 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8009718:	6819      	ldr	r1, [r3, #0]
 800971a:	b931      	cbnz	r1, 800972a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 800971c:	4b11      	ldr	r3, [pc, #68]	; (8009764 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800971e:	f240 31d3 	movw	r1, #979	; 0x3d3
 8009722:	4a11      	ldr	r2, [pc, #68]	; (8009768 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8009724:	4811      	ldr	r0, [pc, #68]	; (800976c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8009726:	f002 f8b7 	bl	800b898 <__assert_func>
 800972a:	8803      	ldrh	r3, [r0, #0]
 800972c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009730:	4293      	cmp	r3, r2
 8009732:	d012      	beq.n	800975a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8009734:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009738:	4293      	cmp	r3, r2
 800973a:	d103      	bne.n	8009744 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 800973c:	4b0c      	ldr	r3, [pc, #48]	; (8009770 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8009742:	bd08      	pop	{r3, pc}
 8009744:	4a0b      	ldr	r2, [pc, #44]	; (8009774 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8009746:	6812      	ldr	r2, [r2, #0]
 8009748:	b11a      	cbz	r2, 8009752 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 800974a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800974e:	2800      	cmp	r0, #0
 8009750:	d1f7      	bne.n	8009742 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8009752:	2214      	movs	r2, #20
 8009754:	4353      	muls	r3, r2
 8009756:	58c8      	ldr	r0, [r1, r3]
 8009758:	e7f3      	b.n	8009742 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 800975a:	2000      	movs	r0, #0
 800975c:	e7f1      	b.n	8009742 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 800975e:	bf00      	nop
 8009760:	200011a4 	.word	0x200011a4
 8009764:	0800e9cd 	.word	0x0800e9cd
 8009768:	0800ea3f 	.word	0x0800ea3f
 800976c:	0800e9a8 	.word	0x0800e9a8
 8009770:	20001154 	.word	0x20001154
 8009774:	20001198 	.word	0x20001198

08009778 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8009778:	8802      	ldrh	r2, [r0, #0]
 800977a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800977e:	429a      	cmp	r2, r3
 8009780:	d845      	bhi.n	800980e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8009782:	4b24      	ldr	r3, [pc, #144]	; (8009814 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8009784:	8818      	ldrh	r0, [r3, #0]
 8009786:	4282      	cmp	r2, r0
 8009788:	d221      	bcs.n	80097ce <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 800978a:	4b23      	ldr	r3, [pc, #140]	; (8009818 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 800978c:	6819      	ldr	r1, [r3, #0]
 800978e:	2314      	movs	r3, #20
 8009790:	fb03 1302 	mla	r3, r3, r2, r1
 8009794:	6858      	ldr	r0, [r3, #4]
 8009796:	2800      	cmp	r0, #0
 8009798:	d03a      	beq.n	8009810 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 800979a:	4920      	ldr	r1, [pc, #128]	; (800981c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 800979c:	6809      	ldr	r1, [r1, #0]
 800979e:	2900      	cmp	r1, #0
 80097a0:	d036      	beq.n	8009810 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 80097a2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80097a6:	2900      	cmp	r1, #0
 80097a8:	d032      	beq.n	8009810 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 80097aa:	891a      	ldrh	r2, [r3, #8]
 80097ac:	8958      	ldrh	r0, [r3, #10]
 80097ae:	4350      	muls	r0, r2
 80097b0:	7c5a      	ldrb	r2, [r3, #17]
 80097b2:	7cdb      	ldrb	r3, [r3, #19]
 80097b4:	0952      	lsrs	r2, r2, #5
 80097b6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80097ba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80097be:	2b0b      	cmp	r3, #11
 80097c0:	bf18      	it	ne
 80097c2:	0040      	lslne	r0, r0, #1
 80097c4:	3003      	adds	r0, #3
 80097c6:	f020 0003 	bic.w	r0, r0, #3
 80097ca:	4408      	add	r0, r1
 80097cc:	4770      	bx	lr
 80097ce:	4b14      	ldr	r3, [pc, #80]	; (8009820 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 80097d0:	881b      	ldrh	r3, [r3, #0]
 80097d2:	4403      	add	r3, r0
 80097d4:	429a      	cmp	r2, r3
 80097d6:	da1a      	bge.n	800980e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 80097d8:	4b12      	ldr	r3, [pc, #72]	; (8009824 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 80097da:	1a10      	subs	r0, r2, r0
 80097dc:	210e      	movs	r1, #14
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	fb01 3000 	mla	r0, r1, r0, r3
 80097e4:	7b03      	ldrb	r3, [r0, #12]
 80097e6:	f003 031f 	and.w	r3, r3, #31
 80097ea:	2b0b      	cmp	r3, #11
 80097ec:	d10b      	bne.n	8009806 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80097ee:	8903      	ldrh	r3, [r0, #8]
 80097f0:	8940      	ldrh	r0, [r0, #10]
 80097f2:	4358      	muls	r0, r3
 80097f4:	4b09      	ldr	r3, [pc, #36]	; (800981c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80097f6:	3003      	adds	r0, #3
 80097f8:	6819      	ldr	r1, [r3, #0]
 80097fa:	f020 0303 	bic.w	r3, r0, #3
 80097fe:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8009802:	4418      	add	r0, r3
 8009804:	4770      	bx	lr
 8009806:	2b0d      	cmp	r3, #13
 8009808:	d101      	bne.n	800980e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 800980a:	300d      	adds	r0, #13
 800980c:	4770      	bx	lr
 800980e:	2000      	movs	r0, #0
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	200011a0 	.word	0x200011a0
 8009818:	200011a4 	.word	0x200011a4
 800981c:	20001198 	.word	0x20001198
 8009820:	200011a2 	.word	0x200011a2
 8009824:	2000119c 	.word	0x2000119c

08009828 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8009828:	4b19      	ldr	r3, [pc, #100]	; (8009890 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 800982a:	6819      	ldr	r1, [r3, #0]
 800982c:	8803      	ldrh	r3, [r0, #0]
 800982e:	b1e9      	cbz	r1, 800986c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8009830:	4a18      	ldr	r2, [pc, #96]	; (8009894 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8009832:	8812      	ldrh	r2, [r2, #0]
 8009834:	429a      	cmp	r2, r3
 8009836:	d90a      	bls.n	800984e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8009838:	2214      	movs	r2, #20
 800983a:	fb02 1303 	mla	r3, r2, r3, r1
 800983e:	7c58      	ldrb	r0, [r3, #17]
 8009840:	0942      	lsrs	r2, r0, #5
 8009842:	7cd8      	ldrb	r0, [r3, #19]
 8009844:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8009848:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 800984c:	4770      	bx	lr
 800984e:	4912      	ldr	r1, [pc, #72]	; (8009898 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8009850:	8809      	ldrh	r1, [r1, #0]
 8009852:	4411      	add	r1, r2
 8009854:	428b      	cmp	r3, r1
 8009856:	da09      	bge.n	800986c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8009858:	1a9b      	subs	r3, r3, r2
 800985a:	4a10      	ldr	r2, [pc, #64]	; (800989c <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 800985c:	210e      	movs	r1, #14
 800985e:	6812      	ldr	r2, [r2, #0]
 8009860:	fb01 2303 	mla	r3, r1, r3, r2
 8009864:	7b18      	ldrb	r0, [r3, #12]
 8009866:	f000 001f 	and.w	r0, r0, #31
 800986a:	4770      	bx	lr
 800986c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009870:	4293      	cmp	r3, r2
 8009872:	d10a      	bne.n	800988a <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 8009874:	4b0a      	ldr	r3, [pc, #40]	; (80098a0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800987c:	b10a      	cbz	r2, 8009882 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 800987e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009880:	b900      	cbnz	r0, 8009884 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8009882:	6898      	ldr	r0, [r3, #8]
 8009884:	6803      	ldr	r3, [r0, #0]
 8009886:	6a1b      	ldr	r3, [r3, #32]
 8009888:	4718      	bx	r3
 800988a:	2000      	movs	r0, #0
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	200011a4 	.word	0x200011a4
 8009894:	200011a0 	.word	0x200011a0
 8009898:	200011a2 	.word	0x200011a2
 800989c:	2000119c 	.word	0x2000119c
 80098a0:	20001154 	.word	0x20001154

080098a4 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 80098a4:	2010      	movs	r0, #16
 80098a6:	4770      	bx	lr

080098a8 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 80098a8:	2000      	movs	r0, #0
 80098aa:	4770      	bx	lr

080098ac <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 80098ac:	00d2      	lsls	r2, r2, #3
 80098ae:	0209      	lsls	r1, r1, #8
 80098b0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80098b4:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 80098b8:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 80098bc:	4310      	orrs	r0, r2
 80098be:	4770      	bx	lr

080098c0 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 80098c0:	0a09      	lsrs	r1, r1, #8
 80098c2:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 80098c6:	4770      	bx	lr

080098c8 <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 80098c8:	08c9      	lsrs	r1, r1, #3
 80098ca:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 80098ce:	4770      	bx	lr

080098d0 <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 80098d0:	00c9      	lsls	r1, r1, #3
 80098d2:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 80098d6:	4770      	bx	lr

080098d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80098d8:	2bff      	cmp	r3, #255	; 0xff
 80098da:	d050      	beq.n	800997e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 80098dc:	2a0b      	cmp	r2, #11
 80098de:	d04a      	beq.n	8009976 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80098e0:	d80e      	bhi.n	8009900 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 80098e2:	2a03      	cmp	r2, #3
 80098e4:	d03f      	beq.n	8009966 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 80098e6:	d804      	bhi.n	80098f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80098e8:	2a01      	cmp	r2, #1
 80098ea:	d03e      	beq.n	800996a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80098ec:	d93f      	bls.n	800996e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80098ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80098f0:	4770      	bx	lr
 80098f2:	2a09      	cmp	r2, #9
 80098f4:	d03f      	beq.n	8009976 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80098f6:	d83c      	bhi.n	8009972 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80098f8:	2a08      	cmp	r2, #8
 80098fa:	d03a      	beq.n	8009972 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80098fc:	2000      	movs	r0, #0
 80098fe:	4770      	bx	lr
 8009900:	2a2f      	cmp	r2, #47	; 0x2f
 8009902:	d024      	beq.n	800994e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8009904:	d80d      	bhi.n	8009922 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8009906:	2a2d      	cmp	r2, #45	; 0x2d
 8009908:	d014      	beq.n	8009934 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 800990a:	d826      	bhi.n	800995a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 800990c:	2a2c      	cmp	r2, #44	; 0x2c
 800990e:	d1f5      	bne.n	80098fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8009910:	684b      	ldr	r3, [r1, #4]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d018      	beq.n	800994a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8009918:	d323      	bcc.n	8009962 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 800991a:	2b02      	cmp	r3, #2
 800991c:	d1ee      	bne.n	80098fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800991e:	6880      	ldr	r0, [r0, #8]
 8009920:	4770      	bx	lr
 8009922:	2a31      	cmp	r2, #49	; 0x31
 8009924:	d004      	beq.n	8009930 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8009926:	d328      	bcc.n	800997a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8009928:	2a32      	cmp	r2, #50	; 0x32
 800992a:	d026      	beq.n	800997a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 800992c:	2a33      	cmp	r2, #51	; 0x33
 800992e:	d1e5      	bne.n	80098fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8009930:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8009932:	4770      	bx	lr
 8009934:	684b      	ldr	r3, [r1, #4]
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d004      	beq.n	8009946 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 800993c:	d30b      	bcc.n	8009956 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800993e:	2b02      	cmp	r3, #2
 8009940:	d1dc      	bne.n	80098fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8009942:	6900      	ldr	r0, [r0, #16]
 8009944:	4770      	bx	lr
 8009946:	6a00      	ldr	r0, [r0, #32]
 8009948:	4770      	bx	lr
 800994a:	6980      	ldr	r0, [r0, #24]
 800994c:	4770      	bx	lr
 800994e:	684b      	ldr	r3, [r1, #4]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1d2      	bne.n	80098fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8009956:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8009958:	4770      	bx	lr
 800995a:	684b      	ldr	r3, [r1, #4]
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d1cc      	bne.n	80098fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8009962:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8009964:	4770      	bx	lr
 8009966:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8009968:	4770      	bx	lr
 800996a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800996c:	4770      	bx	lr
 800996e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8009970:	4770      	bx	lr
 8009972:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8009974:	4770      	bx	lr
 8009976:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8009978:	4770      	bx	lr
 800997a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800997c:	4770      	bx	lr
 800997e:	2a0b      	cmp	r2, #11
 8009980:	d049      	beq.n	8009a16 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8009982:	d80e      	bhi.n	80099a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8009984:	2a03      	cmp	r2, #3
 8009986:	d040      	beq.n	8009a0a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8009988:	d804      	bhi.n	8009994 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 800998a:	2a01      	cmp	r2, #1
 800998c:	d03f      	beq.n	8009a0e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 800998e:	d940      	bls.n	8009a12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8009990:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8009992:	4770      	bx	lr
 8009994:	2a09      	cmp	r2, #9
 8009996:	d03e      	beq.n	8009a16 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8009998:	d801      	bhi.n	800999e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 800999a:	2a08      	cmp	r2, #8
 800999c:	d1ae      	bne.n	80098fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800999e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80099a0:	4770      	bx	lr
 80099a2:	2a2f      	cmp	r2, #47	; 0x2f
 80099a4:	d024      	beq.n	80099f0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 80099a6:	d80d      	bhi.n	80099c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 80099a8:	2a2d      	cmp	r2, #45	; 0x2d
 80099aa:	d014      	beq.n	80099d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 80099ac:	d826      	bhi.n	80099fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 80099ae:	2a2c      	cmp	r2, #44	; 0x2c
 80099b0:	d1a4      	bne.n	80098fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80099b2:	684b      	ldr	r3, [r1, #4]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d018      	beq.n	80099ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 80099ba:	d324      	bcc.n	8009a06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 80099bc:	2b02      	cmp	r3, #2
 80099be:	d19d      	bne.n	80098fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80099c0:	68c0      	ldr	r0, [r0, #12]
 80099c2:	4770      	bx	lr
 80099c4:	2a31      	cmp	r2, #49	; 0x31
 80099c6:	d004      	beq.n	80099d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 80099c8:	d327      	bcc.n	8009a1a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 80099ca:	2a32      	cmp	r2, #50	; 0x32
 80099cc:	d025      	beq.n	8009a1a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 80099ce:	2a33      	cmp	r2, #51	; 0x33
 80099d0:	d194      	bne.n	80098fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80099d2:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80099d4:	4770      	bx	lr
 80099d6:	684b      	ldr	r3, [r1, #4]
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d004      	beq.n	80099e8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 80099de:	d30b      	bcc.n	80099f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	d18b      	bne.n	80098fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80099e4:	6940      	ldr	r0, [r0, #20]
 80099e6:	4770      	bx	lr
 80099e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80099ea:	4770      	bx	lr
 80099ec:	69c0      	ldr	r0, [r0, #28]
 80099ee:	4770      	bx	lr
 80099f0:	684b      	ldr	r3, [r1, #4]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d181      	bne.n	80098fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80099f8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80099fa:	4770      	bx	lr
 80099fc:	684b      	ldr	r3, [r1, #4]
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f47f af7b 	bne.w	80098fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8009a06:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8009a08:	4770      	bx	lr
 8009a0a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8009a0c:	4770      	bx	lr
 8009a0e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8009a10:	4770      	bx	lr
 8009a12:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8009a14:	4770      	bx	lr
 8009a16:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8009a18:	4770      	bx	lr
 8009a1a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8009a1c:	4770      	bx	lr

08009a1e <_ZN8touchgfx8LCD16bppD1Ev>:
 8009a1e:	4770      	bx	lr

08009a20 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8009a20:	b508      	push	{r3, lr}
 8009a22:	4b06      	ldr	r3, [pc, #24]	; (8009a3c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 8009a24:	8818      	ldrh	r0, [r3, #0]
 8009a26:	b928      	cbnz	r0, 8009a34 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8009a28:	4b05      	ldr	r3, [pc, #20]	; (8009a40 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 8009a2a:	2154      	movs	r1, #84	; 0x54
 8009a2c:	4a05      	ldr	r2, [pc, #20]	; (8009a44 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8009a2e:	4806      	ldr	r0, [pc, #24]	; (8009a48 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8009a30:	f001 ff32 	bl	800b898 <__assert_func>
 8009a34:	0040      	lsls	r0, r0, #1
 8009a36:	b280      	uxth	r0, r0
 8009a38:	bd08      	pop	{r3, pc}
 8009a3a:	bf00      	nop
 8009a3c:	2000114e 	.word	0x2000114e
 8009a40:	0800ee85 	.word	0x0800ee85
 8009a44:	0800f171 	.word	0x0800f171
 8009a48:	0800eec7 	.word	0x0800eec7

08009a4c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8009a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a50:	b08b      	sub	sp, #44	; 0x2c
 8009a52:	460f      	mov	r7, r1
 8009a54:	4616      	mov	r6, r2
 8009a56:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8009a5a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8009a5e:	f1bb 0f00 	cmp.w	fp, #0
 8009a62:	d046      	beq.n	8009af2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8009a64:	6810      	ldr	r0, [r2, #0]
 8009a66:	ad06      	add	r5, sp, #24
 8009a68:	6851      	ldr	r1, [r2, #4]
 8009a6a:	c503      	stmia	r5!, {r0, r1}
 8009a6c:	6818      	ldr	r0, [r3, #0]
 8009a6e:	ad08      	add	r5, sp, #32
 8009a70:	6859      	ldr	r1, [r3, #4]
 8009a72:	c503      	stmia	r5!, {r0, r1}
 8009a74:	a806      	add	r0, sp, #24
 8009a76:	f7fe fc11 	bl	800829c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8009a7a:	4631      	mov	r1, r6
 8009a7c:	a808      	add	r0, sp, #32
 8009a7e:	f7fe fbf5 	bl	800826c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8009a82:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8009a86:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8009a8a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8009a8e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8009a92:	fb16 2103 	smlabb	r1, r6, r3, r2
 8009a96:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8009a9a:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8009a9e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8009aa2:	4f5d      	ldr	r7, [pc, #372]	; (8009c18 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 8009aa4:	440a      	add	r2, r1
 8009aa6:	6838      	ldr	r0, [r7, #0]
 8009aa8:	46b9      	mov	r9, r7
 8009aaa:	f8ad 2020 	strh.w	r2, [sp, #32]
 8009aae:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8009ab8:	6803      	ldr	r3, [r0, #0]
 8009aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009abc:	4798      	blx	r3
 8009abe:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8009ac2:	d019      	beq.n	8009af8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8009ac4:	f010 0f04 	tst.w	r0, #4
 8009ac8:	d01a      	beq.n	8009b00 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8009aca:	f8d9 0000 	ldr.w	r0, [r9]
 8009ace:	b2ad      	uxth	r5, r5
 8009ad0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8009ad4:	6801      	ldr	r1, [r0, #0]
 8009ad6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8009ada:	9501      	str	r5, [sp, #4]
 8009adc:	e9cd b403 	strd	fp, r4, [sp, #12]
 8009ae0:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8009ae4:	9402      	str	r4, [sp, #8]
 8009ae6:	fa1f f488 	uxth.w	r4, r8
 8009aea:	9400      	str	r4, [sp, #0]
 8009aec:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8009aee:	4631      	mov	r1, r6
 8009af0:	47a0      	blx	r4
 8009af2:	b00b      	add	sp, #44	; 0x2c
 8009af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af8:	b914      	cbnz	r4, 8009b00 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8009afa:	f010 0f01 	tst.w	r0, #1
 8009afe:	e7e3      	b.n	8009ac8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 8009b00:	f8d9 0000 	ldr.w	r0, [r9]
 8009b04:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8009b08:	6803      	ldr	r3, [r0, #0]
 8009b0a:	6a1b      	ldr	r3, [r3, #32]
 8009b0c:	4798      	blx	r3
 8009b0e:	4b43      	ldr	r3, [pc, #268]	; (8009c1c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d0>)
 8009b10:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8009b14:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8009b18:	881a      	ldrh	r2, [r3, #0]
 8009b1a:	469a      	mov	sl, r3
 8009b1c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8009b20:	fb05 f502 	mul.w	r5, r5, r2
 8009b24:	fb02 1404 	mla	r4, r2, r4, r1
 8009b28:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8009b2c:	d058      	beq.n	8009be0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x194>
 8009b2e:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8009b32:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8009b36:	fa1f f28b 	uxth.w	r2, fp
 8009b3a:	469e      	mov	lr, r3
 8009b3c:	fa1f f989 	uxth.w	r9, r9
 8009b40:	42ac      	cmp	r4, r5
 8009b42:	d263      	bcs.n	8009c0c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 8009b44:	eb04 0a07 	add.w	sl, r4, r7
 8009b48:	4554      	cmp	r4, sl
 8009b4a:	d23c      	bcs.n	8009bc6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17a>
 8009b4c:	8821      	ldrh	r1, [r4, #0]
 8009b4e:	f836 3b02 	ldrh.w	r3, [r6], #2
 8009b52:	1208      	asrs	r0, r1, #8
 8009b54:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8009b58:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8009b5c:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8009b60:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8009b64:	00c9      	lsls	r1, r1, #3
 8009b66:	fb10 f009 	smulbb	r0, r0, r9
 8009b6a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8009b6e:	b2c9      	uxtb	r1, r1
 8009b70:	fb0c 0c02 	mla	ip, ip, r2, r0
 8009b74:	10d8      	asrs	r0, r3, #3
 8009b76:	fb11 f109 	smulbb	r1, r1, r9
 8009b7a:	00db      	lsls	r3, r3, #3
 8009b7c:	fa1f fc8c 	uxth.w	ip, ip
 8009b80:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8009b84:	fb1b fb09 	smulbb	fp, fp, r9
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	fb03 1302 	mla	r3, r3, r2, r1
 8009b8e:	f10c 0101 	add.w	r1, ip, #1
 8009b92:	fb00 b002 	mla	r0, r0, r2, fp
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8009b9c:	1c59      	adds	r1, r3, #1
 8009b9e:	b280      	uxth	r0, r0
 8009ba0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8009ba4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8009ba8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8009bac:	ea4c 0c03 	orr.w	ip, ip, r3
 8009bb0:	1c43      	adds	r3, r0, #1
 8009bb2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8009bb6:	0940      	lsrs	r0, r0, #5
 8009bb8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8009bbc:	ea4c 0c00 	orr.w	ip, ip, r0
 8009bc0:	f824 cb02 	strh.w	ip, [r4], #2
 8009bc4:	e7c0      	b.n	8009b48 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8009bc6:	f8be 3000 	ldrh.w	r3, [lr]
 8009bca:	eba3 0308 	sub.w	r3, r3, r8
 8009bce:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8009bd2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8009bd6:	eba3 0308 	sub.w	r3, r3, r8
 8009bda:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8009bde:	e7af      	b.n	8009b40 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8009be0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8009be4:	f8d9 0000 	ldr.w	r0, [r9]
 8009be8:	42ac      	cmp	r4, r5
 8009bea:	6803      	ldr	r3, [r0, #0]
 8009bec:	d20e      	bcs.n	8009c0c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 8009bee:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
 8009bf2:	4632      	mov	r2, r6
 8009bf4:	463b      	mov	r3, r7
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	47c0      	blx	r8
 8009bfa:	f8ba 3000 	ldrh.w	r3, [sl]
 8009bfe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8009c02:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8009c06:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8009c0a:	e7eb      	b.n	8009be4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 8009c0c:	4b02      	ldr	r3, [pc, #8]	; (8009c18 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 8009c0e:	6818      	ldr	r0, [r3, #0]
 8009c10:	6803      	ldr	r3, [r0, #0]
 8009c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c14:	4798      	blx	r3
 8009c16:	e76c      	b.n	8009af2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8009c18:	20001154 	.word	0x20001154
 8009c1c:	2000114e 	.word	0x2000114e

08009c20 <_ZN8touchgfx8LCD16bppD0Ev>:
 8009c20:	b510      	push	{r4, lr}
 8009c22:	4604      	mov	r4, r0
 8009c24:	2178      	movs	r1, #120	; 0x78
 8009c26:	f001 fbf3 	bl	800b410 <_ZdlPvj>
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	bd10      	pop	{r4, pc}
	...

08009c30 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8009c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c34:	460d      	mov	r5, r1
 8009c36:	b087      	sub	sp, #28
 8009c38:	4614      	mov	r4, r2
 8009c3a:	4698      	mov	r8, r3
 8009c3c:	b333      	cbz	r3, 8009c8c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8009c3e:	4608      	mov	r0, r1
 8009c40:	f7fe fb44 	bl	80082cc <_ZNK8touchgfx4Rect7isEmptyEv>
 8009c44:	bb10      	cbnz	r0, 8009c8c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8009c46:	6828      	ldr	r0, [r5, #0]
 8009c48:	ab04      	add	r3, sp, #16
 8009c4a:	6869      	ldr	r1, [r5, #4]
 8009c4c:	4e72      	ldr	r6, [pc, #456]	; (8009e18 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1e8>)
 8009c4e:	c303      	stmia	r3!, {r0, r1}
 8009c50:	a804      	add	r0, sp, #16
 8009c52:	f7fe fb23 	bl	800829c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8009c56:	6830      	ldr	r0, [r6, #0]
 8009c58:	6803      	ldr	r3, [r0, #0]
 8009c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c5c:	4798      	blx	r3
 8009c5e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8009c62:	d016      	beq.n	8009c92 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8009c64:	f010 0f08 	tst.w	r0, #8
 8009c68:	d016      	beq.n	8009c98 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 8009c6a:	f8bd 5016 	ldrh.w	r5, [sp, #22]
 8009c6e:	6830      	ldr	r0, [r6, #0]
 8009c70:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8009c74:	6801      	ldr	r1, [r0, #0]
 8009c76:	9501      	str	r5, [sp, #4]
 8009c78:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8009c7c:	f8cd 8008 	str.w	r8, [sp, #8]
 8009c80:	9500      	str	r5, [sp, #0]
 8009c82:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8009c86:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 8009c88:	4621      	mov	r1, r4
 8009c8a:	47a8      	blx	r5
 8009c8c:	b007      	add	sp, #28
 8009c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c92:	f010 0f02 	tst.w	r0, #2
 8009c96:	e7e7      	b.n	8009c68 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x38>
 8009c98:	6830      	ldr	r0, [r6, #0]
 8009c9a:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8009c9e:	6803      	ldr	r3, [r0, #0]
 8009ca0:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8009ca4:	6a1b      	ldr	r3, [r3, #32]
 8009ca6:	4798      	blx	r3
 8009ca8:	495c      	ldr	r1, [pc, #368]	; (8009e1c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ec>)
 8009caa:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8009cae:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8009cb2:	880b      	ldrh	r3, [r1, #0]
 8009cb4:	468e      	mov	lr, r1
 8009cb6:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8009cba:	fb03 c202 	mla	r2, r3, r2, ip
 8009cbe:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8009cc2:	fb07 f203 	mul.w	r2, r7, r3
 8009cc6:	d053      	beq.n	8009d70 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x140>
 8009cc8:	fa1f f388 	uxth.w	r3, r8
 8009ccc:	f1c8 07ff 	rsb	r7, r8, #255	; 0xff
 8009cd0:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8009cd4:	ea4f 2814 	mov.w	r8, r4, lsr #8
 8009cd8:	00e4      	lsls	r4, r4, #3
 8009cda:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8009cde:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8009ce2:	eb00 0142 	add.w	r1, r0, r2, lsl #1
 8009ce6:	b2e4      	uxtb	r4, r4
 8009ce8:	fb09 f903 	mul.w	r9, r9, r3
 8009cec:	fb08 f803 	mul.w	r8, r8, r3
 8009cf0:	006d      	lsls	r5, r5, #1
 8009cf2:	4363      	muls	r3, r4
 8009cf4:	b2bc      	uxth	r4, r7
 8009cf6:	4288      	cmp	r0, r1
 8009cf8:	f080 8088 	bcs.w	8009e0c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 8009cfc:	eb00 0a05 	add.w	sl, r0, r5
 8009d00:	4550      	cmp	r0, sl
 8009d02:	d22f      	bcs.n	8009d64 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 8009d04:	8802      	ldrh	r2, [r0, #0]
 8009d06:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8009d0a:	10d7      	asrs	r7, r2, #3
 8009d0c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8009d10:	00d2      	lsls	r2, r2, #3
 8009d12:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8009d16:	fb1c fc04 	smulbb	ip, ip, r4
 8009d1a:	b2d2      	uxtb	r2, r2
 8009d1c:	fb17 f704 	smulbb	r7, r7, r4
 8009d20:	fb12 f204 	smulbb	r2, r2, r4
 8009d24:	44c4      	add	ip, r8
 8009d26:	444f      	add	r7, r9
 8009d28:	fa1f fc8c 	uxth.w	ip, ip
 8009d2c:	441a      	add	r2, r3
 8009d2e:	b2bf      	uxth	r7, r7
 8009d30:	b292      	uxth	r2, r2
 8009d32:	f10c 0b01 	add.w	fp, ip, #1
 8009d36:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8009d3a:	f102 0b01 	add.w	fp, r2, #1
 8009d3e:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8009d42:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8009d46:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8009d4a:	ea4c 0202 	orr.w	r2, ip, r2
 8009d4e:	f107 0c01 	add.w	ip, r7, #1
 8009d52:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8009d56:	097f      	lsrs	r7, r7, #5
 8009d58:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8009d5c:	433a      	orrs	r2, r7
 8009d5e:	f820 2b02 	strh.w	r2, [r0], #2
 8009d62:	e7cd      	b.n	8009d00 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd0>
 8009d64:	f8be 2000 	ldrh.w	r2, [lr]
 8009d68:	ebc5 0242 	rsb	r2, r5, r2, lsl #1
 8009d6c:	4410      	add	r0, r2
 8009d6e:	e7c2      	b.n	8009cf6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xc6>
 8009d70:	07db      	lsls	r3, r3, #31
 8009d72:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8009d76:	d50e      	bpl.n	8009d96 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x166>
 8009d78:	006d      	lsls	r5, r5, #1
 8009d7a:	4290      	cmp	r0, r2
 8009d7c:	d246      	bcs.n	8009e0c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 8009d7e:	1943      	adds	r3, r0, r5
 8009d80:	4298      	cmp	r0, r3
 8009d82:	d202      	bcs.n	8009d8a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15a>
 8009d84:	f820 4b02 	strh.w	r4, [r0], #2
 8009d88:	e7fa      	b.n	8009d80 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x150>
 8009d8a:	f8be 3000 	ldrh.w	r3, [lr]
 8009d8e:	ebc5 0343 	rsb	r3, r5, r3, lsl #1
 8009d92:	4418      	add	r0, r3
 8009d94:	e7f1      	b.n	8009d7a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x14a>
 8009d96:	0787      	lsls	r7, r0, #30
 8009d98:	462b      	mov	r3, r5
 8009d9a:	d00a      	beq.n	8009db2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x182>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d205      	bcs.n	8009dae <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17e>
 8009da2:	801c      	strh	r4, [r3, #0]
 8009da4:	f8be 1000 	ldrh.w	r1, [lr]
 8009da8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8009dac:	e7f7      	b.n	8009d9e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 8009dae:	3002      	adds	r0, #2
 8009db0:	1e6b      	subs	r3, r5, #1
 8009db2:	07dd      	lsls	r5, r3, #31
 8009db4:	d50d      	bpl.n	8009dd2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a2>
 8009db6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009dba:	3901      	subs	r1, #1
 8009dbc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8009dc0:	4291      	cmp	r1, r2
 8009dc2:	d205      	bcs.n	8009dd0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a0>
 8009dc4:	800c      	strh	r4, [r1, #0]
 8009dc6:	f8be 5000 	ldrh.w	r5, [lr]
 8009dca:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 8009dce:	e7f7      	b.n	8009dc0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	b1db      	cbz	r3, 8009e0c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 8009dd4:	b2a1      	uxth	r1, r4
 8009dd6:	105b      	asrs	r3, r3, #1
 8009dd8:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	4290      	cmp	r0, r2
 8009de0:	d214      	bcs.n	8009e0c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 8009de2:	0781      	lsls	r1, r0, #30
 8009de4:	d006      	beq.n	8009df4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c4>
 8009de6:	4b0e      	ldr	r3, [pc, #56]	; (8009e20 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f0>)
 8009de8:	f44f 7162 	mov.w	r1, #904	; 0x388
 8009dec:	4a0d      	ldr	r2, [pc, #52]	; (8009e24 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f4>)
 8009dee:	480e      	ldr	r0, [pc, #56]	; (8009e28 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f8>)
 8009df0:	f001 fd52 	bl	800b898 <__assert_func>
 8009df4:	18c5      	adds	r5, r0, r3
 8009df6:	4601      	mov	r1, r0
 8009df8:	42a9      	cmp	r1, r5
 8009dfa:	d202      	bcs.n	8009e02 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1d2>
 8009dfc:	f841 4b04 	str.w	r4, [r1], #4
 8009e00:	e7fa      	b.n	8009df8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c8>
 8009e02:	f8be 1000 	ldrh.w	r1, [lr]
 8009e06:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8009e0a:	e7e8      	b.n	8009dde <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ae>
 8009e0c:	6830      	ldr	r0, [r6, #0]
 8009e0e:	6803      	ldr	r3, [r0, #0]
 8009e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e12:	4798      	blx	r3
 8009e14:	e73a      	b.n	8009c8c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8009e16:	bf00      	nop
 8009e18:	20001154 	.word	0x20001154
 8009e1c:	2000114e 	.word	0x2000114e
 8009e20:	0800ee24 	.word	0x0800ee24
 8009e24:	0800f2c9 	.word	0x0800f2c9
 8009e28:	0800ee53 	.word	0x0800ee53

08009e2c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8009e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e30:	4f97      	ldr	r7, [pc, #604]	; (800a090 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 8009e32:	4616      	mov	r6, r2
 8009e34:	b08f      	sub	sp, #60	; 0x3c
 8009e36:	4604      	mov	r4, r0
 8009e38:	683a      	ldr	r2, [r7, #0]
 8009e3a:	4689      	mov	r9, r1
 8009e3c:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8009e40:	2a02      	cmp	r2, #2
 8009e42:	d106      	bne.n	8009e52 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8009e44:	4b93      	ldr	r3, [pc, #588]	; (800a094 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 8009e46:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 8009e4a:	4a93      	ldr	r2, [pc, #588]	; (800a098 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8009e4c:	4893      	ldr	r0, [pc, #588]	; (800a09c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 8009e4e:	f001 fd23 	bl	800b898 <__assert_func>
 8009e52:	ad0e      	add	r5, sp, #56	; 0x38
 8009e54:	f825 3d24 	strh.w	r3, [r5, #-36]!
 8009e58:	4628      	mov	r0, r5
 8009e5a:	f7ff fce5 	bl	8009828 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	4680      	mov	r8, r0
 8009e62:	4620      	mov	r0, r4
 8009e64:	6a1b      	ldr	r3, [r3, #32]
 8009e66:	4798      	blx	r3
 8009e68:	4580      	cmp	r8, r0
 8009e6a:	d004      	beq.n	8009e76 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8009e6c:	4b8c      	ldr	r3, [pc, #560]	; (800a0a0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 8009e6e:	f240 21ca 	movw	r1, #714	; 0x2ca
 8009e72:	4a89      	ldr	r2, [pc, #548]	; (800a098 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8009e74:	e7ea      	b.n	8009e4c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8009e76:	4628      	mov	r0, r5
 8009e78:	f7ff fc4c 	bl	8009714 <_ZNK8touchgfx6Bitmap7getDataEv>
 8009e7c:	4680      	mov	r8, r0
 8009e7e:	b920      	cbnz	r0, 8009e8a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8009e80:	4b88      	ldr	r3, [pc, #544]	; (800a0a4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 8009e82:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8009e86:	4a84      	ldr	r2, [pc, #528]	; (800a098 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8009e88:	e7e0      	b.n	8009e4c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8009e8a:	6830      	ldr	r0, [r6, #0]
 8009e8c:	ab06      	add	r3, sp, #24
 8009e8e:	6871      	ldr	r1, [r6, #4]
 8009e90:	f10d 0b20 	add.w	fp, sp, #32
 8009e94:	f9b6 a000 	ldrsh.w	sl, [r6]
 8009e98:	c303      	stmia	r3!, {r0, r1}
 8009e9a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009e9e:	ab08      	add	r3, sp, #32
 8009ea0:	f8d9 0000 	ldr.w	r0, [r9]
 8009ea4:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8009ea8:	c303      	stmia	r3!, {r0, r1}
 8009eaa:	4628      	mov	r0, r5
 8009eac:	f7ff fb2a 	bl	8009504 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8009eb0:	4606      	mov	r6, r0
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	4d7c      	ldr	r5, [pc, #496]	; (800a0a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8009eb6:	f7ff fb5f 	bl	8009578 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8009eba:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8009ebe:	a806      	add	r0, sp, #24
 8009ec0:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8009ec4:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8009ec8:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8009ecc:	f7fe f9e6 	bl	800829c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8009ed0:	4658      	mov	r0, fp
 8009ed2:	f7fe f9e3 	bl	800829c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8009ed6:	a80a      	add	r0, sp, #40	; 0x28
 8009ed8:	f7fe f9e0 	bl	800829c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8009edc:	4b73      	ldr	r3, [pc, #460]	; (800a0ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8009ede:	2100      	movs	r1, #0
 8009ee0:	f9b5 2000 	ldrsh.w	r2, [r5]
 8009ee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ee8:	4658      	mov	r0, fp
 8009eea:	910c      	str	r1, [sp, #48]	; 0x30
 8009eec:	a90c      	add	r1, sp, #48	; 0x30
 8009eee:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8009ef2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8009ef6:	f7fc fda9 	bl	8006a4c <_ZN8touchgfx4RectaNERKS0_>
 8009efa:	4658      	mov	r0, fp
 8009efc:	f7fe f9e6 	bl	80082cc <_ZNK8touchgfx4Rect7isEmptyEv>
 8009f00:	2800      	cmp	r0, #0
 8009f02:	f040 809a 	bne.w	800a03a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8009f06:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8009f0a:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8009f0e:	4288      	cmp	r0, r1
 8009f10:	db38      	blt.n	8009f84 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8009f12:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8009f16:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	db32      	blt.n	8009f84 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8009f1e:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8009f22:	4430      	add	r0, r6
 8009f24:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8009f28:	4431      	add	r1, r6
 8009f2a:	b200      	sxth	r0, r0
 8009f2c:	b209      	sxth	r1, r1
 8009f2e:	4288      	cmp	r0, r1
 8009f30:	dc28      	bgt.n	8009f84 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8009f32:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8009f36:	440a      	add	r2, r1
 8009f38:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8009f3c:	440b      	add	r3, r1
 8009f3e:	b212      	sxth	r2, r2
 8009f40:	b21b      	sxth	r3, r3
 8009f42:	429a      	cmp	r2, r3
 8009f44:	dc1e      	bgt.n	8009f84 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8009f46:	6823      	ldr	r3, [r4, #0]
 8009f48:	4620      	mov	r0, r4
 8009f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4c:	4798      	blx	r3
 8009f4e:	4682      	mov	sl, r0
 8009f50:	6838      	ldr	r0, [r7, #0]
 8009f52:	6803      	ldr	r3, [r0, #0]
 8009f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f56:	4798      	blx	r3
 8009f58:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8009f5c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009f60:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8009f64:	1a5b      	subs	r3, r3, r1
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	b21c      	sxth	r4, r3
 8009f6a:	2c00      	cmp	r4, #0
 8009f6c:	dc0f      	bgt.n	8009f8e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 8009f6e:	bf18      	it	ne
 8009f70:	f8ad 1020 	strhne.w	r1, [sp, #32]
 8009f74:	4644      	mov	r4, r8
 8009f76:	bf1e      	ittt	ne
 8009f78:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 8009f7c:	185b      	addne	r3, r3, r1
 8009f7e:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8009f82:	e009      	b.n	8009f98 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 8009f84:	4b4a      	ldr	r3, [pc, #296]	; (800a0b0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8009f86:	f240 21da 	movw	r1, #730	; 0x2da
 8009f8a:	4a43      	ldr	r2, [pc, #268]	; (800a098 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8009f8c:	e75e      	b.n	8009e4c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8009f8e:	1ad3      	subs	r3, r2, r3
 8009f90:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8009f94:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8009f98:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 8009f9c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8009fa0:	1b9b      	subs	r3, r3, r6
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	b219      	sxth	r1, r3
 8009fa6:	2900      	cmp	r1, #0
 8009fa8:	dd4b      	ble.n	800a042 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 8009faa:	4351      	muls	r1, r2
 8009fac:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8009fb0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8009fb4:	1acb      	subs	r3, r1, r3
 8009fb6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8009fba:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8009fbe:	2e00      	cmp	r6, #0
 8009fc0:	dd3b      	ble.n	800a03a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8009fc2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	dd37      	ble.n	800a03a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8009fca:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8009fce:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8009fd2:	fb0a f90c 	mul.w	r9, sl, ip
 8009fd6:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 8009fda:	4481      	add	r9, r0
 8009fdc:	8828      	ldrh	r0, [r5, #0]
 8009fde:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 8009fe2:	1a41      	subs	r1, r0, r1
 8009fe4:	42ae      	cmp	r6, r5
 8009fe6:	bfa8      	it	ge
 8009fe8:	462e      	movge	r6, r5
 8009fea:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8009fee:	428e      	cmp	r6, r1
 8009ff0:	bfa8      	it	ge
 8009ff2:	460e      	movge	r6, r1
 8009ff4:	429d      	cmp	r5, r3
 8009ff6:	bfa8      	it	ge
 8009ff8:	461d      	movge	r5, r3
 8009ffa:	4b2c      	ldr	r3, [pc, #176]	; (800a0ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8009ffc:	881b      	ldrh	r3, [r3, #0]
 8009ffe:	eba3 030c 	sub.w	r3, r3, ip
 800a002:	429d      	cmp	r5, r3
 800a004:	bfa8      	it	ge
 800a006:	461d      	movge	r5, r3
 800a008:	42b0      	cmp	r0, r6
 800a00a:	d12c      	bne.n	800a066 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 800a00c:	4290      	cmp	r0, r2
 800a00e:	d12a      	bne.n	800a066 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 800a010:	6838      	ldr	r0, [r7, #0]
 800a012:	9203      	str	r2, [sp, #12]
 800a014:	6803      	ldr	r3, [r0, #0]
 800a016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a018:	4798      	blx	r3
 800a01a:	07c3      	lsls	r3, r0, #31
 800a01c:	d51a      	bpl.n	800a054 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 800a01e:	9a03      	ldr	r2, [sp, #12]
 800a020:	6838      	ldr	r0, [r7, #0]
 800a022:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 800a026:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800a02a:	6803      	ldr	r3, [r0, #0]
 800a02c:	9200      	str	r2, [sp, #0]
 800a02e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800a030:	4623      	mov	r3, r4
 800a032:	e89b 0006 	ldmia.w	fp, {r1, r2}
 800a036:	47a8      	blx	r5
 800a038:	4680      	mov	r8, r0
 800a03a:	4640      	mov	r0, r8
 800a03c:	b00f      	add	sp, #60	; 0x3c
 800a03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a042:	bf1f      	itttt	ne
 800a044:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 800a048:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 800a04c:	185b      	addne	r3, r3, r1
 800a04e:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 800a052:	e7b2      	b.n	8009fba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 800a054:	6838      	ldr	r0, [r7, #0]
 800a056:	464a      	mov	r2, r9
 800a058:	4621      	mov	r1, r4
 800a05a:	6803      	ldr	r3, [r0, #0]
 800a05c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800a05e:	fb05 f30a 	mul.w	r3, r5, sl
 800a062:	47b0      	blx	r6
 800a064:	e7e9      	b.n	800a03a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 800a066:	4355      	muls	r5, r2
 800a068:	0076      	lsls	r6, r6, #1
 800a06a:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 800a06e:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 800a072:	9303      	str	r3, [sp, #12]
 800a074:	9b03      	ldr	r3, [sp, #12]
 800a076:	429c      	cmp	r4, r3
 800a078:	d2df      	bcs.n	800a03a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 800a07a:	6838      	ldr	r0, [r7, #0]
 800a07c:	464a      	mov	r2, r9
 800a07e:	4621      	mov	r1, r4
 800a080:	44d1      	add	r9, sl
 800a082:	6803      	ldr	r3, [r0, #0]
 800a084:	445c      	add	r4, fp
 800a086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a088:	461d      	mov	r5, r3
 800a08a:	4633      	mov	r3, r6
 800a08c:	47a8      	blx	r5
 800a08e:	e7f1      	b.n	800a074 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 800a090:	20001154 	.word	0x20001154
 800a094:	0800ec5b 	.word	0x0800ec5b
 800a098:	0800f1ac 	.word	0x0800f1ac
 800a09c:	0800ee53 	.word	0x0800ee53
 800a0a0:	0800ed0d 	.word	0x0800ed0d
 800a0a4:	0800ed62 	.word	0x0800ed62
 800a0a8:	2000114e 	.word	0x2000114e
 800a0ac:	20001150 	.word	0x20001150
 800a0b0:	0800eda0 	.word	0x0800eda0

0800a0b4 <_ZN8touchgfx8LCD16bppC1Ev>:
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	4910      	ldr	r1, [pc, #64]	; (800a0f8 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 800a0b8:	6042      	str	r2, [r0, #4]
 800a0ba:	6001      	str	r1, [r0, #0]
 800a0bc:	e9c0 2202 	strd	r2, r2, [r0, #8]
 800a0c0:	e9c0 2204 	strd	r2, r2, [r0, #16]
 800a0c4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800a0c8:	e9c0 2208 	strd	r2, r2, [r0, #32]
 800a0cc:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 800a0d0:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 800a0d4:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 800a0d8:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 800a0dc:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 800a0e0:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 800a0e4:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 800a0e8:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 800a0ec:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 800a0f0:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	0800ef04 	.word	0x0800ef04

0800a0fc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 800a0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a100:	b08b      	sub	sp, #44	; 0x2c
 800a102:	460d      	mov	r5, r1
 800a104:	4604      	mov	r4, r0
 800a106:	4699      	mov	r9, r3
 800a108:	6808      	ldr	r0, [r1, #0]
 800a10a:	ab06      	add	r3, sp, #24
 800a10c:	6849      	ldr	r1, [r1, #4]
 800a10e:	c303      	stmia	r3!, {r0, r1}
 800a110:	6810      	ldr	r0, [r2, #0]
 800a112:	ab08      	add	r3, sp, #32
 800a114:	6851      	ldr	r1, [r2, #4]
 800a116:	c303      	stmia	r3!, {r0, r1}
 800a118:	a806      	add	r0, sp, #24
 800a11a:	f7fe f8bf 	bl	800829c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800a11e:	4629      	mov	r1, r5
 800a120:	a808      	add	r0, sp, #32
 800a122:	4d63      	ldr	r5, [pc, #396]	; (800a2b0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 800a124:	f7fe f8a2 	bl	800826c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800a128:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800a12c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800a130:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800a134:	6828      	ldr	r0, [r5, #0]
 800a136:	fb11 2103 	smlabb	r1, r1, r3, r2
 800a13a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 800a13e:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 800a142:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800a146:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 800a14a:	440a      	add	r2, r1
 800a14c:	f8ad 2020 	strh.w	r2, [sp, #32]
 800a150:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800a154:	4413      	add	r3, r2
 800a156:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800a15a:	6803      	ldr	r3, [r0, #0]
 800a15c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a15e:	4798      	blx	r3
 800a160:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800a164:	d118      	bne.n	800a198 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 800a166:	f010 0f20 	tst.w	r0, #32
 800a16a:	6828      	ldr	r0, [r5, #0]
 800a16c:	d017      	beq.n	800a19e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 800a16e:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 800a172:	b2b6      	uxth	r6, r6
 800a174:	6801      	ldr	r1, [r0, #0]
 800a176:	9502      	str	r5, [sp, #8]
 800a178:	fa1f f588 	uxth.w	r5, r8
 800a17c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a180:	9601      	str	r6, [sp, #4]
 800a182:	9500      	str	r5, [sp, #0]
 800a184:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 800a188:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 800a18a:	4621      	mov	r1, r4
 800a18c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800a190:	47a8      	blx	r5
 800a192:	b00b      	add	sp, #44	; 0x2c
 800a194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a198:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a19c:	e7e5      	b.n	800a16a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 800a19e:	6803      	ldr	r3, [r0, #0]
 800a1a0:	6a1b      	ldr	r3, [r3, #32]
 800a1a2:	4798      	blx	r3
 800a1a4:	4a43      	ldr	r2, [pc, #268]	; (800a2b4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 800a1a6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800a1aa:	f8b2 e000 	ldrh.w	lr, [r2]
 800a1ae:	4692      	mov	sl, r2
 800a1b0:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 800a1b4:	fb0e 1303 	mla	r3, lr, r3, r1
 800a1b8:	fb0e fe06 	mul.w	lr, lr, r6
 800a1bc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800a1c0:	ea4f 0348 	mov.w	r3, r8, lsl #1
 800a1c4:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 800a1c8:	9305      	str	r3, [sp, #20]
 800a1ca:	4570      	cmp	r0, lr
 800a1cc:	d26a      	bcs.n	800a2a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a8>
 800a1ce:	9b05      	ldr	r3, [sp, #20]
 800a1d0:	4621      	mov	r1, r4
 800a1d2:	eb00 0b03 	add.w	fp, r0, r3
 800a1d6:	4558      	cmp	r0, fp
 800a1d8:	d257      	bcs.n	800a28a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18e>
 800a1da:	f851 4b04 	ldr.w	r4, [r1], #4
 800a1de:	0e22      	lsrs	r2, r4, #24
 800a1e0:	d012      	beq.n	800a208 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 800a1e2:	2aff      	cmp	r2, #255	; 0xff
 800a1e4:	ea4f 2714 	mov.w	r7, r4, lsr #8
 800a1e8:	d110      	bne.n	800a20c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 800a1ea:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800a1ee:	d10d      	bne.n	800a20c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 800a1f0:	0963      	lsrs	r3, r4, #5
 800a1f2:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 800a1f6:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 800a1fa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800a1fe:	f027 0707 	bic.w	r7, r7, #7
 800a202:	431f      	orrs	r7, r3
 800a204:	433c      	orrs	r4, r7
 800a206:	8004      	strh	r4, [r0, #0]
 800a208:	3002      	adds	r0, #2
 800a20a:	e7e4      	b.n	800a1d6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xda>
 800a20c:	fb09 f302 	mul.w	r3, r9, r2
 800a210:	f8b0 c000 	ldrh.w	ip, [r0]
 800a214:	f3c4 4507 	ubfx	r5, r4, #16, #8
 800a218:	b2ff      	uxtb	r7, r7
 800a21a:	1c5a      	adds	r2, r3, #1
 800a21c:	ea4f 262c 	mov.w	r6, ip, asr #8
 800a220:	b2e4      	uxtb	r4, r4
 800a222:	eb02 2223 	add.w	r2, r2, r3, asr #8
 800a226:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 800a22a:	1212      	asrs	r2, r2, #8
 800a22c:	b293      	uxth	r3, r2
 800a22e:	43d2      	mvns	r2, r2
 800a230:	fb15 f503 	smulbb	r5, r5, r3
 800a234:	b2d2      	uxtb	r2, r2
 800a236:	fb17 f703 	smulbb	r7, r7, r3
 800a23a:	fb06 5602 	mla	r6, r6, r2, r5
 800a23e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 800a242:	fb14 f403 	smulbb	r4, r4, r3
 800a246:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800a24a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 800a24e:	b2b6      	uxth	r6, r6
 800a250:	fa5f fc8c 	uxtb.w	ip, ip
 800a254:	fb05 7702 	mla	r7, r5, r2, r7
 800a258:	1c73      	adds	r3, r6, #1
 800a25a:	fb0c 4202 	mla	r2, ip, r2, r4
 800a25e:	b2bf      	uxth	r7, r7
 800a260:	b292      	uxth	r2, r2
 800a262:	1c7d      	adds	r5, r7, #1
 800a264:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 800a268:	f102 0c01 	add.w	ip, r2, #1
 800a26c:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 800a270:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 800a274:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 800a278:	097f      	lsrs	r7, r7, #5
 800a27a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 800a27e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 800a282:	4316      	orrs	r6, r2
 800a284:	433e      	orrs	r6, r7
 800a286:	8006      	strh	r6, [r0, #0]
 800a288:	e7be      	b.n	800a208 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 800a28a:	f8ba 3000 	ldrh.w	r3, [sl]
 800a28e:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 800a292:	eba3 0308 	sub.w	r3, r3, r8
 800a296:	eba4 0408 	sub.w	r4, r4, r8
 800a29a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800a29e:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800a2a2:	e792      	b.n	800a1ca <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 800a2a4:	4b02      	ldr	r3, [pc, #8]	; (800a2b0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 800a2a6:	6818      	ldr	r0, [r3, #0]
 800a2a8:	6803      	ldr	r3, [r0, #0]
 800a2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ac:	4798      	blx	r3
 800a2ae:	e770      	b.n	800a192 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 800a2b0:	20001154 	.word	0x20001154
 800a2b4:	2000114e 	.word	0x2000114e

0800a2b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 800a2b8:	b570      	push	{r4, r5, r6, lr}
 800a2ba:	9d04      	ldr	r5, [sp, #16]
 800a2bc:	460c      	mov	r4, r1
 800a2be:	f89d 6018 	ldrb.w	r6, [sp, #24]
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800a2c8:	2a0d      	cmp	r2, #13
 800a2ca:	d820      	bhi.n	800a30e <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 800a2cc:	e8df f002 	tbb	[pc, r2]
 800a2d0:	18121807 	.word	0x18121807
 800a2d4:	18181818 	.word	0x18181818
 800a2d8:	18181818 	.word	0x18181818
 800a2dc:	1818      	.short	0x1818
 800a2de:	6802      	ldr	r2, [r0, #0]
 800a2e0:	e9cd 3604 	strd	r3, r6, [sp, #16]
 800a2e4:	68d6      	ldr	r6, [r2, #12]
 800a2e6:	462b      	mov	r3, r5
 800a2e8:	460a      	mov	r2, r1
 800a2ea:	4621      	mov	r1, r4
 800a2ec:	46b4      	mov	ip, r6
 800a2ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a2f2:	4760      	bx	ip
 800a2f4:	462a      	mov	r2, r5
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a2fc:	f7ff befe 	b.w	800a0fc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800a300:	4b03      	ldr	r3, [pc, #12]	; (800a310 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 800a302:	f240 21c1 	movw	r1, #705	; 0x2c1
 800a306:	4a03      	ldr	r2, [pc, #12]	; (800a314 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 800a308:	4803      	ldr	r0, [pc, #12]	; (800a318 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 800a30a:	f001 fac5 	bl	800b898 <__assert_func>
 800a30e:	bd70      	pop	{r4, r5, r6, pc}
 800a310:	0800edef 	.word	0x0800edef
 800a314:	0800f232 	.word	0x0800f232
 800a318:	0800ee53 	.word	0x0800ee53

0800a31c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 800a31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a320:	b093      	sub	sp, #76	; 0x4c
 800a322:	880f      	ldrh	r7, [r1, #0]
 800a324:	4604      	mov	r4, r0
 800a326:	4688      	mov	r8, r1
 800a328:	4616      	mov	r6, r2
 800a32a:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 800a32e:	b12f      	cbz	r7, 800a33c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 800a330:	4b6f      	ldr	r3, [pc, #444]	; (800a4f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 800a332:	21e2      	movs	r1, #226	; 0xe2
 800a334:	4a6f      	ldr	r2, [pc, #444]	; (800a4f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 800a336:	4870      	ldr	r0, [pc, #448]	; (800a4f8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 800a338:	f001 faae 	bl	800b898 <__assert_func>
 800a33c:	6810      	ldr	r0, [r2, #0]
 800a33e:	ad0e      	add	r5, sp, #56	; 0x38
 800a340:	6851      	ldr	r1, [r2, #4]
 800a342:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 800a500 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>
 800a346:	c503      	stmia	r5!, {r0, r1}
 800a348:	6818      	ldr	r0, [r3, #0]
 800a34a:	ad10      	add	r5, sp, #64	; 0x40
 800a34c:	6859      	ldr	r1, [r3, #4]
 800a34e:	c503      	stmia	r5!, {r0, r1}
 800a350:	a80e      	add	r0, sp, #56	; 0x38
 800a352:	f7fd ffa3 	bl	800829c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800a356:	4631      	mov	r1, r6
 800a358:	a810      	add	r0, sp, #64	; 0x40
 800a35a:	4e68      	ldr	r6, [pc, #416]	; (800a4fc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 800a35c:	f7fd ff86 	bl	800826c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800a360:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 800a364:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 800a368:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 800a36c:	f8db 0000 	ldr.w	r0, [fp]
 800a370:	fb11 2103 	smlabb	r1, r1, r3, r2
 800a374:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 800a378:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 800a37c:	440c      	add	r4, r1
 800a37e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 800a382:	440a      	add	r2, r1
 800a384:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800a388:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 800a38c:	4413      	add	r3, r2
 800a38e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800a392:	6803      	ldr	r3, [r0, #0]
 800a394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a398:	4798      	blx	r3
 800a39a:	2801      	cmp	r0, #1
 800a39c:	d11d      	bne.n	800a3da <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 800a39e:	220b      	movs	r2, #11
 800a3a0:	9708      	str	r7, [sp, #32]
 800a3a2:	b2ad      	uxth	r5, r5
 800a3a4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800a3a8:	9207      	str	r2, [sp, #28]
 800a3aa:	4621      	mov	r1, r4
 800a3ac:	8832      	ldrh	r2, [r6, #0]
 800a3ae:	f8cd a010 	str.w	sl, [sp, #16]
 800a3b2:	9502      	str	r5, [sp, #8]
 800a3b4:	e9cd 0205 	strd	r0, r2, [sp, #20]
 800a3b8:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800a3bc:	9203      	str	r2, [sp, #12]
 800a3be:	fa1f f289 	uxth.w	r2, r9
 800a3c2:	9201      	str	r2, [sp, #4]
 800a3c4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800a3c8:	9200      	str	r2, [sp, #0]
 800a3ca:	4642      	mov	r2, r8
 800a3cc:	f8db 0000 	ldr.w	r0, [fp]
 800a3d0:	f7fc fd1c 	bl	8006e0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800a3d4:	b013      	add	sp, #76	; 0x4c
 800a3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3da:	f8db 0000 	ldr.w	r0, [fp]
 800a3de:	6803      	ldr	r3, [r0, #0]
 800a3e0:	6a1b      	ldr	r3, [r3, #32]
 800a3e2:	4798      	blx	r3
 800a3e4:	8832      	ldrh	r2, [r6, #0]
 800a3e6:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 800a3ea:	f04f 0e04 	mov.w	lr, #4
 800a3ee:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 800a3f2:	4355      	muls	r5, r2
 800a3f4:	960d      	str	r6, [sp, #52]	; 0x34
 800a3f6:	fb02 1303 	mla	r3, r2, r3, r1
 800a3fa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800a3fe:	eb00 0345 	add.w	r3, r0, r5, lsl #1
 800a402:	930c      	str	r3, [sp, #48]	; 0x30
 800a404:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800a408:	930b      	str	r3, [sp, #44]	; 0x2c
 800a40a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a40c:	4298      	cmp	r0, r3
 800a40e:	d269      	bcs.n	800a4e4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 800a410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a412:	4621      	mov	r1, r4
 800a414:	eb00 0b03 	add.w	fp, r0, r3
 800a418:	4558      	cmp	r0, fp
 800a41a:	460b      	mov	r3, r1
 800a41c:	d256      	bcs.n	800a4cc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b0>
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	3101      	adds	r1, #1
 800a422:	fb1e e303 	smlabb	r3, lr, r3, lr
 800a426:	f858 2003 	ldr.w	r2, [r8, r3]
 800a42a:	0e14      	lsrs	r4, r2, #24
 800a42c:	d012      	beq.n	800a454 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 800a42e:	2cff      	cmp	r4, #255	; 0xff
 800a430:	ea4f 2612 	mov.w	r6, r2, lsr #8
 800a434:	d110      	bne.n	800a458 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 800a436:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800a43a:	d10d      	bne.n	800a458 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 800a43c:	0953      	lsrs	r3, r2, #5
 800a43e:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 800a442:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 800a446:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800a44a:	f026 0607 	bic.w	r6, r6, #7
 800a44e:	431e      	orrs	r6, r3
 800a450:	4332      	orrs	r2, r6
 800a452:	8002      	strh	r2, [r0, #0]
 800a454:	3002      	adds	r0, #2
 800a456:	e7df      	b.n	800a418 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfc>
 800a458:	fb0a f404 	mul.w	r4, sl, r4
 800a45c:	8807      	ldrh	r7, [r0, #0]
 800a45e:	b2f6      	uxtb	r6, r6
 800a460:	1c63      	adds	r3, r4, #1
 800a462:	123d      	asrs	r5, r7, #8
 800a464:	eb03 2324 	add.w	r3, r3, r4, asr #8
 800a468:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800a46c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 800a470:	b2d2      	uxtb	r2, r2
 800a472:	121b      	asrs	r3, r3, #8
 800a474:	fa1f fc83 	uxth.w	ip, r3
 800a478:	43db      	mvns	r3, r3
 800a47a:	fb14 f40c 	smulbb	r4, r4, ip
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	fb12 f20c 	smulbb	r2, r2, ip
 800a484:	fb05 4503 	mla	r5, r5, r3, r4
 800a488:	10fc      	asrs	r4, r7, #3
 800a48a:	fb16 f60c 	smulbb	r6, r6, ip
 800a48e:	00ff      	lsls	r7, r7, #3
 800a490:	b2ad      	uxth	r5, r5
 800a492:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 800a496:	b2ff      	uxtb	r7, r7
 800a498:	fb04 6603 	mla	r6, r4, r3, r6
 800a49c:	fb07 2203 	mla	r2, r7, r3, r2
 800a4a0:	1c6b      	adds	r3, r5, #1
 800a4a2:	b2b6      	uxth	r6, r6
 800a4a4:	b292      	uxth	r2, r2
 800a4a6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 800a4aa:	1c54      	adds	r4, r2, #1
 800a4ac:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 800a4b0:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 800a4b4:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 800a4b8:	4325      	orrs	r5, r4
 800a4ba:	1c74      	adds	r4, r6, #1
 800a4bc:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 800a4c0:	0976      	lsrs	r6, r6, #5
 800a4c2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 800a4c6:	4335      	orrs	r5, r6
 800a4c8:	8005      	strh	r5, [r0, #0]
 800a4ca:	e7c3      	b.n	800a454 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 800a4cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4ce:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 800a4d2:	881b      	ldrh	r3, [r3, #0]
 800a4d4:	eba4 0409 	sub.w	r4, r4, r9
 800a4d8:	eba3 0309 	sub.w	r3, r3, r9
 800a4dc:	440c      	add	r4, r1
 800a4de:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800a4e2:	e792      	b.n	800a40a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 800a4e4:	4b06      	ldr	r3, [pc, #24]	; (800a500 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 800a4e6:	6818      	ldr	r0, [r3, #0]
 800a4e8:	6803      	ldr	r3, [r0, #0]
 800a4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ec:	4798      	blx	r3
 800a4ee:	e771      	b.n	800a3d4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 800a4f0:	0800ec0b 	.word	0x0800ec0b
 800a4f4:	0800f0e6 	.word	0x0800f0e6
 800a4f8:	0800ee53 	.word	0x0800ee53
 800a4fc:	2000114e 	.word	0x2000114e
 800a500:	20001154 	.word	0x20001154

0800a504 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 800a504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a508:	4614      	mov	r4, r2
 800a50a:	880a      	ldrh	r2, [r1, #0]
 800a50c:	b091      	sub	sp, #68	; 0x44
 800a50e:	4607      	mov	r7, r0
 800a510:	2a02      	cmp	r2, #2
 800a512:	4689      	mov	r9, r1
 800a514:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 800a518:	d006      	beq.n	800a528 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 800a51a:	4b77      	ldr	r3, [pc, #476]	; (800a6f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f4>)
 800a51c:	f240 113b 	movw	r1, #315	; 0x13b
 800a520:	4a76      	ldr	r2, [pc, #472]	; (800a6fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f8>)
 800a522:	4877      	ldr	r0, [pc, #476]	; (800a700 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1fc>)
 800a524:	f001 f9b8 	bl	800b898 <__assert_func>
 800a528:	2e00      	cmp	r6, #0
 800a52a:	d04b      	beq.n	800a5c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 800a52c:	6820      	ldr	r0, [r4, #0]
 800a52e:	ad0c      	add	r5, sp, #48	; 0x30
 800a530:	6861      	ldr	r1, [r4, #4]
 800a532:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 800a708 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>
 800a536:	c503      	stmia	r5!, {r0, r1}
 800a538:	6818      	ldr	r0, [r3, #0]
 800a53a:	ad0e      	add	r5, sp, #56	; 0x38
 800a53c:	6859      	ldr	r1, [r3, #4]
 800a53e:	c503      	stmia	r5!, {r0, r1}
 800a540:	a80c      	add	r0, sp, #48	; 0x30
 800a542:	f7fd feab 	bl	800829c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800a546:	4621      	mov	r1, r4
 800a548:	a80e      	add	r0, sp, #56	; 0x38
 800a54a:	f7fd fe8f 	bl	800826c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800a54e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 800a552:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 800a556:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800a55a:	f8da 0000 	ldr.w	r0, [sl]
 800a55e:	fb11 2103 	smlabb	r1, r1, r3, r2
 800a562:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 800a566:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 800a56a:	187c      	adds	r4, r7, r1
 800a56c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 800a570:	4f64      	ldr	r7, [pc, #400]	; (800a704 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 800a572:	440a      	add	r2, r1
 800a574:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 800a578:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800a57c:	4413      	add	r3, r2
 800a57e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 800a582:	6803      	ldr	r3, [r0, #0]
 800a584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a588:	4798      	blx	r3
 800a58a:	2801      	cmp	r0, #1
 800a58c:	d11d      	bne.n	800a5ca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 800a58e:	2200      	movs	r2, #0
 800a590:	210b      	movs	r1, #11
 800a592:	b2ad      	uxth	r5, r5
 800a594:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800a598:	e9cd 1207 	strd	r1, r2, [sp, #28]
 800a59c:	8839      	ldrh	r1, [r7, #0]
 800a59e:	9604      	str	r6, [sp, #16]
 800a5a0:	9502      	str	r5, [sp, #8]
 800a5a2:	e9cd 2105 	strd	r2, r1, [sp, #20]
 800a5a6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800a5aa:	4621      	mov	r1, r4
 800a5ac:	9203      	str	r2, [sp, #12]
 800a5ae:	fa1f f288 	uxth.w	r2, r8
 800a5b2:	9201      	str	r2, [sp, #4]
 800a5b4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 800a5b8:	9200      	str	r2, [sp, #0]
 800a5ba:	464a      	mov	r2, r9
 800a5bc:	f8da 0000 	ldr.w	r0, [sl]
 800a5c0:	f7fc fc24 	bl	8006e0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800a5c4:	b011      	add	sp, #68	; 0x44
 800a5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ca:	f8da 0000 	ldr.w	r0, [sl]
 800a5ce:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 800a5d2:	6803      	ldr	r3, [r0, #0]
 800a5d4:	6a1b      	ldr	r3, [r3, #32]
 800a5d6:	4798      	blx	r3
 800a5d8:	8839      	ldrh	r1, [r7, #0]
 800a5da:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 800a5de:	2eff      	cmp	r6, #255	; 0xff
 800a5e0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 800a5e4:	fb05 f501 	mul.w	r5, r5, r1
 800a5e8:	fb01 2303 	mla	r3, r1, r3, r2
 800a5ec:	f109 0204 	add.w	r2, r9, #4
 800a5f0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800a5f4:	d05f      	beq.n	800a6b6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b2>
 800a5f6:	f1c6 09ff 	rsb	r9, r6, #255	; 0xff
 800a5fa:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800a5fe:	b2b6      	uxth	r6, r6
 800a600:	970b      	str	r7, [sp, #44]	; 0x2c
 800a602:	fa1f f989 	uxth.w	r9, r9
 800a606:	42a8      	cmp	r0, r5
 800a608:	d26f      	bcs.n	800a6ea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 800a60a:	eb00 010b 	add.w	r1, r0, fp
 800a60e:	4288      	cmp	r0, r1
 800a610:	4623      	mov	r3, r4
 800a612:	d244      	bcs.n	800a69e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19a>
 800a614:	8807      	ldrh	r7, [r0, #0]
 800a616:	3401      	adds	r4, #1
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	ea4f 2c27 	mov.w	ip, r7, asr #8
 800a61e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a622:	ea4f 0ae7 	mov.w	sl, r7, asr #3
 800a626:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 800a62a:	00ff      	lsls	r7, r7, #3
 800a62c:	ea4f 2e23 	mov.w	lr, r3, asr #8
 800a630:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 800a634:	fb1c fc09 	smulbb	ip, ip, r9
 800a638:	b2ff      	uxtb	r7, r7
 800a63a:	fb1a fa09 	smulbb	sl, sl, r9
 800a63e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 800a642:	fb17 f709 	smulbb	r7, r7, r9
 800a646:	fb0e ce06 	mla	lr, lr, r6, ip
 800a64a:	ea4f 0ce3 	mov.w	ip, r3, asr #3
 800a64e:	00db      	lsls	r3, r3, #3
 800a650:	fa1f fe8e 	uxth.w	lr, lr
 800a654:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	fb0c ac06 	mla	ip, ip, r6, sl
 800a65e:	f10e 0a01 	add.w	sl, lr, #1
 800a662:	fb03 7306 	mla	r3, r3, r6, r7
 800a666:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	f40e 4a78 	and.w	sl, lr, #63488	; 0xf800
 800a670:	fa1f fc8c 	uxth.w	ip, ip
 800a674:	f103 0e01 	add.w	lr, r3, #1
 800a678:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 800a67c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 800a680:	ea4a 0e03 	orr.w	lr, sl, r3
 800a684:	f10c 0a01 	add.w	sl, ip, #1
 800a688:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 800a68c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800a690:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 800a694:	ea4e 0e0c 	orr.w	lr, lr, ip
 800a698:	f820 eb02 	strh.w	lr, [r0], #2
 800a69c:	e7b7      	b.n	800a60e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 800a69e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6a0:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 800a6a4:	881b      	ldrh	r3, [r3, #0]
 800a6a6:	eba1 0108 	sub.w	r1, r1, r8
 800a6aa:	eba3 0308 	sub.w	r3, r3, r8
 800a6ae:	440c      	add	r4, r1
 800a6b0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800a6b4:	e7a7      	b.n	800a606 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
 800a6b6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800a6ba:	42a8      	cmp	r0, r5
 800a6bc:	d215      	bcs.n	800a6ea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 800a6be:	eb00 010b 	add.w	r1, r0, fp
 800a6c2:	4288      	cmp	r0, r1
 800a6c4:	d206      	bcs.n	800a6d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1d0>
 800a6c6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a6ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6ce:	f820 3b02 	strh.w	r3, [r0], #2
 800a6d2:	e7f6      	b.n	800a6c2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1be>
 800a6d4:	883b      	ldrh	r3, [r7, #0]
 800a6d6:	eba3 0308 	sub.w	r3, r3, r8
 800a6da:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800a6de:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 800a6e2:	eba3 0308 	sub.w	r3, r3, r8
 800a6e6:	441c      	add	r4, r3
 800a6e8:	e7e7      	b.n	800a6ba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b6>
 800a6ea:	4b07      	ldr	r3, [pc, #28]	; (800a708 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 800a6ec:	6818      	ldr	r0, [r3, #0]
 800a6ee:	6803      	ldr	r3, [r0, #0]
 800a6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f2:	4798      	blx	r3
 800a6f4:	e766      	b.n	800a5c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 800a6f6:	bf00      	nop
 800a6f8:	0800eac9 	.word	0x0800eac9
 800a6fc:	0800ef50 	.word	0x0800ef50
 800a700:	0800ee53 	.word	0x0800ee53
 800a704:	2000114e 	.word	0x2000114e
 800a708:	20001154 	.word	0x20001154

0800a70c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 800a70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a710:	4614      	mov	r4, r2
 800a712:	880a      	ldrh	r2, [r1, #0]
 800a714:	b091      	sub	sp, #68	; 0x44
 800a716:	4606      	mov	r6, r0
 800a718:	2a01      	cmp	r2, #1
 800a71a:	4688      	mov	r8, r1
 800a71c:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 800a720:	d006      	beq.n	800a730 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 800a722:	4b7c      	ldr	r3, [pc, #496]	; (800a914 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x208>)
 800a724:	f240 1197 	movw	r1, #407	; 0x197
 800a728:	4a7b      	ldr	r2, [pc, #492]	; (800a918 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20c>)
 800a72a:	487c      	ldr	r0, [pc, #496]	; (800a91c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x210>)
 800a72c:	f001 f8b4 	bl	800b898 <__assert_func>
 800a730:	2f00      	cmp	r7, #0
 800a732:	d04b      	beq.n	800a7cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 800a734:	6820      	ldr	r0, [r4, #0]
 800a736:	ad0c      	add	r5, sp, #48	; 0x30
 800a738:	6861      	ldr	r1, [r4, #4]
 800a73a:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 800a928 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 800a73e:	c503      	stmia	r5!, {r0, r1}
 800a740:	6818      	ldr	r0, [r3, #0]
 800a742:	ad0e      	add	r5, sp, #56	; 0x38
 800a744:	6859      	ldr	r1, [r3, #4]
 800a746:	c503      	stmia	r5!, {r0, r1}
 800a748:	a80c      	add	r0, sp, #48	; 0x30
 800a74a:	f7fd fda7 	bl	800829c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800a74e:	4621      	mov	r1, r4
 800a750:	a80e      	add	r0, sp, #56	; 0x38
 800a752:	f7fd fd8b 	bl	800826c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800a756:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 800a75a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 800a75e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800a762:	f8da 0000 	ldr.w	r0, [sl]
 800a766:	fb11 2103 	smlabb	r1, r1, r3, r2
 800a76a:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 800a76e:	f9bd 903e 	ldrsh.w	r9, [sp, #62]	; 0x3e
 800a772:	1874      	adds	r4, r6, r1
 800a774:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 800a778:	4e69      	ldr	r6, [pc, #420]	; (800a920 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x214>)
 800a77a:	440a      	add	r2, r1
 800a77c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 800a780:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800a784:	4413      	add	r3, r2
 800a786:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 800a78a:	6803      	ldr	r3, [r0, #0]
 800a78c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a790:	4798      	blx	r3
 800a792:	2801      	cmp	r0, #1
 800a794:	d11d      	bne.n	800a7d2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 800a796:	220b      	movs	r2, #11
 800a798:	2100      	movs	r1, #0
 800a79a:	b2ad      	uxth	r5, r5
 800a79c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800a7a0:	e9cd 2107 	strd	r2, r1, [sp, #28]
 800a7a4:	8832      	ldrh	r2, [r6, #0]
 800a7a6:	4621      	mov	r1, r4
 800a7a8:	9704      	str	r7, [sp, #16]
 800a7aa:	9501      	str	r5, [sp, #4]
 800a7ac:	e9cd 0205 	strd	r0, r2, [sp, #20]
 800a7b0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800a7b4:	9203      	str	r2, [sp, #12]
 800a7b6:	fa1f f289 	uxth.w	r2, r9
 800a7ba:	9202      	str	r2, [sp, #8]
 800a7bc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 800a7c0:	9200      	str	r2, [sp, #0]
 800a7c2:	4642      	mov	r2, r8
 800a7c4:	f8da 0000 	ldr.w	r0, [sl]
 800a7c8:	f7fc fb20 	bl	8006e0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800a7cc:	b011      	add	sp, #68	; 0x44
 800a7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7d2:	f8da 0000 	ldr.w	r0, [sl]
 800a7d6:	6803      	ldr	r3, [r0, #0]
 800a7d8:	6a1b      	ldr	r3, [r3, #32]
 800a7da:	4798      	blx	r3
 800a7dc:	8832      	ldrh	r2, [r6, #0]
 800a7de:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 800a7e2:	2fff      	cmp	r7, #255	; 0xff
 800a7e4:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 800a7e8:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 800a7ec:	fb09 f902 	mul.w	r9, r9, r2
 800a7f0:	fb02 1303 	mla	r3, r2, r3, r1
 800a7f4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800a7f8:	d056      	beq.n	800a8a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 800a7fa:	ea6f 0c07 	mvn.w	ip, r7
 800a7fe:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 800a802:	b2bb      	uxth	r3, r7
 800a804:	960b      	str	r6, [sp, #44]	; 0x2c
 800a806:	fa5f fc8c 	uxtb.w	ip, ip
 800a80a:	4548      	cmp	r0, r9
 800a80c:	d27b      	bcs.n	800a906 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 800a80e:	eb00 0a0e 	add.w	sl, r0, lr
 800a812:	4550      	cmp	r0, sl
 800a814:	4622      	mov	r2, r4
 800a816:	d23d      	bcs.n	800a894 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x188>
 800a818:	7811      	ldrb	r1, [r2, #0]
 800a81a:	2604      	movs	r6, #4
 800a81c:	2203      	movs	r2, #3
 800a81e:	3401      	adds	r4, #1
 800a820:	fb12 6101 	smlabb	r1, r2, r1, r6
 800a824:	8802      	ldrh	r2, [r0, #0]
 800a826:	eb08 0b01 	add.w	fp, r8, r1
 800a82a:	1217      	asrs	r7, r2, #8
 800a82c:	f818 1001 	ldrb.w	r1, [r8, r1]
 800a830:	f89b 6002 	ldrb.w	r6, [fp, #2]
 800a834:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 800a838:	f89b b001 	ldrb.w	fp, [fp, #1]
 800a83c:	fb16 f603 	smulbb	r6, r6, r3
 800a840:	fb1b fb03 	smulbb	fp, fp, r3
 800a844:	fb07 670c 	mla	r7, r7, ip, r6
 800a848:	10d6      	asrs	r6, r2, #3
 800a84a:	00d2      	lsls	r2, r2, #3
 800a84c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 800a850:	b2bf      	uxth	r7, r7
 800a852:	b2d2      	uxtb	r2, r2
 800a854:	fb06 b60c 	mla	r6, r6, ip, fp
 800a858:	fb12 f20c 	smulbb	r2, r2, ip
 800a85c:	b2b6      	uxth	r6, r6
 800a85e:	fb01 2103 	mla	r1, r1, r3, r2
 800a862:	1c7a      	adds	r2, r7, #1
 800a864:	f106 0b01 	add.w	fp, r6, #1
 800a868:	b289      	uxth	r1, r1
 800a86a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 800a86e:	1c4a      	adds	r2, r1, #1
 800a870:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 800a874:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 800a878:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 800a87c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 800a880:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 800a884:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 800a888:	4317      	orrs	r7, r2
 800a88a:	ea47 070b 	orr.w	r7, r7, fp
 800a88e:	f820 7b02 	strh.w	r7, [r0], #2
 800a892:	e7be      	b.n	800a812 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 800a894:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a896:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 800a89a:	8812      	ldrh	r2, [r2, #0]
 800a89c:	1b49      	subs	r1, r1, r5
 800a89e:	1b52      	subs	r2, r2, r5
 800a8a0:	440c      	add	r4, r1
 800a8a2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800a8a6:	e7b0      	b.n	800a80a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfe>
 800a8a8:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 800a8ac:	2203      	movs	r2, #3
 800a8ae:	2704      	movs	r7, #4
 800a8b0:	491c      	ldr	r1, [pc, #112]	; (800a924 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 800a8b2:	4548      	cmp	r0, r9
 800a8b4:	d227      	bcs.n	800a906 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 800a8b6:	eb00 0c0e 	add.w	ip, r0, lr
 800a8ba:	4560      	cmp	r0, ip
 800a8bc:	4623      	mov	r3, r4
 800a8be:	d219      	bcs.n	800a8f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e8>
 800a8c0:	f893 a000 	ldrb.w	sl, [r3]
 800a8c4:	3401      	adds	r4, #1
 800a8c6:	fb12 7a0a 	smlabb	sl, r2, sl, r7
 800a8ca:	eb08 0b0a 	add.w	fp, r8, sl
 800a8ce:	f818 a00a 	ldrb.w	sl, [r8, sl]
 800a8d2:	f89b 3002 	ldrb.w	r3, [fp, #2]
 800a8d6:	f89b b001 	ldrb.w	fp, [fp, #1]
 800a8da:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 800a8de:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800a8e2:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 800a8e6:	ea43 030b 	orr.w	r3, r3, fp
 800a8ea:	ea43 03da 	orr.w	r3, r3, sl, lsr #3
 800a8ee:	f820 3b02 	strh.w	r3, [r0], #2
 800a8f2:	e7e2      	b.n	800a8ba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 800a8f4:	8833      	ldrh	r3, [r6, #0]
 800a8f6:	1b5b      	subs	r3, r3, r5
 800a8f8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800a8fc:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 800a900:	1b5b      	subs	r3, r3, r5
 800a902:	441c      	add	r4, r3
 800a904:	e7d5      	b.n	800a8b2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 800a906:	4b08      	ldr	r3, [pc, #32]	; (800a928 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 800a908:	6818      	ldr	r0, [r3, #0]
 800a90a:	6803      	ldr	r3, [r0, #0]
 800a90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90e:	4798      	blx	r3
 800a910:	e75c      	b.n	800a7cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 800a912:	bf00      	nop
 800a914:	0800eb17 	.word	0x0800eb17
 800a918:	0800efd9 	.word	0x0800efd9
 800a91c:	0800ee53 	.word	0x0800ee53
 800a920:	2000114e 	.word	0x2000114e
 800a924:	fffff800 	.word	0xfffff800
 800a928:	20001154 	.word	0x20001154

0800a92c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 800a92c:	b430      	push	{r4, r5}
 800a92e:	780d      	ldrb	r5, [r1, #0]
 800a930:	f89d 4008 	ldrb.w	r4, [sp, #8]
 800a934:	2d01      	cmp	r5, #1
 800a936:	d00a      	beq.n	800a94e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 800a938:	d305      	bcc.n	800a946 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 800a93a:	2d02      	cmp	r5, #2
 800a93c:	d10b      	bne.n	800a956 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 800a93e:	9402      	str	r4, [sp, #8]
 800a940:	bc30      	pop	{r4, r5}
 800a942:	f7ff bddf 	b.w	800a504 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 800a946:	9402      	str	r4, [sp, #8]
 800a948:	bc30      	pop	{r4, r5}
 800a94a:	f7ff bce7 	b.w	800a31c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 800a94e:	9402      	str	r4, [sp, #8]
 800a950:	bc30      	pop	{r4, r5}
 800a952:	f7ff bedb 	b.w	800a70c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 800a956:	bc30      	pop	{r4, r5}
 800a958:	4770      	bx	lr
	...

0800a95c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 800a95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a960:	b087      	sub	sp, #28
 800a962:	4604      	mov	r4, r0
 800a964:	460e      	mov	r6, r1
 800a966:	6810      	ldr	r0, [r2, #0]
 800a968:	6851      	ldr	r1, [r2, #4]
 800a96a:	ad02      	add	r5, sp, #8
 800a96c:	4617      	mov	r7, r2
 800a96e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 800a972:	f8df 9230 	ldr.w	r9, [pc, #560]	; 800aba4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 800a976:	c503      	stmia	r5!, {r0, r1}
 800a978:	6818      	ldr	r0, [r3, #0]
 800a97a:	ad04      	add	r5, sp, #16
 800a97c:	6859      	ldr	r1, [r3, #4]
 800a97e:	c503      	stmia	r5!, {r0, r1}
 800a980:	a802      	add	r0, sp, #8
 800a982:	f7fd fc8b 	bl	800829c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800a986:	4639      	mov	r1, r7
 800a988:	a804      	add	r0, sp, #16
 800a98a:	f7fd fc6f 	bl	800826c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800a98e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800a992:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800a996:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800a99a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 800a99e:	fb11 2103 	smlabb	r1, r1, r3, r2
 800a9a2:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 800a9a6:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 800a9aa:	440e      	add	r6, r1
 800a9ac:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800a9b0:	440a      	add	r2, r1
 800a9b2:	f8ad 2010 	strh.w	r2, [sp, #16]
 800a9b6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	f8ad 3012 	strh.w	r3, [sp, #18]
 800a9c0:	4b77      	ldr	r3, [pc, #476]	; (800aba0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 800a9c2:	6818      	ldr	r0, [r3, #0]
 800a9c4:	6803      	ldr	r3, [r0, #0]
 800a9c6:	6a1b      	ldr	r3, [r3, #32]
 800a9c8:	4798      	blx	r3
 800a9ca:	f8b9 b000 	ldrh.w	fp, [r9]
 800a9ce:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800a9d2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800a9d6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800a9da:	fb05 f50b 	mul.w	r5, r5, fp
 800a9de:	fb0b 2303 	mla	r3, fp, r3, r2
 800a9e2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800a9e6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 800a9ea:	9300      	str	r3, [sp, #0]
 800a9ec:	d068      	beq.n	800aac0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x164>
 800a9ee:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 800a9f2:	4558      	cmp	r0, fp
 800a9f4:	f080 80cc 	bcs.w	800ab90 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 800a9f8:	9b00      	ldr	r3, [sp, #0]
 800a9fa:	4631      	mov	r1, r6
 800a9fc:	18c3      	adds	r3, r0, r3
 800a9fe:	9301      	str	r3, [sp, #4]
 800aa00:	9b01      	ldr	r3, [sp, #4]
 800aa02:	4298      	cmp	r0, r3
 800aa04:	d24e      	bcs.n	800aaa4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x148>
 800aa06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa0a:	2a00      	cmp	r2, #0
 800aa0c:	d047      	beq.n	800aa9e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 800aa0e:	fb0a f202 	mul.w	r2, sl, r2
 800aa12:	1c53      	adds	r3, r2, #1
 800aa14:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 800aa18:	121b      	asrs	r3, r3, #8
 800aa1a:	d040      	beq.n	800aa9e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 800aa1c:	8802      	ldrh	r2, [r0, #0]
 800aa1e:	b29e      	uxth	r6, r3
 800aa20:	f8b4 c000 	ldrh.w	ip, [r4]
 800aa24:	43db      	mvns	r3, r3
 800aa26:	1215      	asrs	r5, r2, #8
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	ea4f 272c 	mov.w	r7, ip, asr #8
 800aa2e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 800aa32:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 800aa36:	fb15 f503 	smulbb	r5, r5, r3
 800aa3a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 800aa3e:	00d2      	lsls	r2, r2, #3
 800aa40:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 800aa44:	fb07 5706 	mla	r7, r7, r6, r5
 800aa48:	ea4f 05ec 	mov.w	r5, ip, asr #3
 800aa4c:	b2d2      	uxtb	r2, r2
 800aa4e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800aa52:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 800aa56:	fb1e fe03 	smulbb	lr, lr, r3
 800aa5a:	b2bf      	uxth	r7, r7
 800aa5c:	fb12 f203 	smulbb	r2, r2, r3
 800aa60:	fa5f fc8c 	uxtb.w	ip, ip
 800aa64:	fb05 e506 	mla	r5, r5, r6, lr
 800aa68:	1c7b      	adds	r3, r7, #1
 800aa6a:	fb0c 2c06 	mla	ip, ip, r6, r2
 800aa6e:	b2ad      	uxth	r5, r5
 800aa70:	fa1f fc8c 	uxth.w	ip, ip
 800aa74:	f105 0e01 	add.w	lr, r5, #1
 800aa78:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 800aa7c:	f10c 0601 	add.w	r6, ip, #1
 800aa80:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 800aa84:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 800aa88:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 800aa8c:	096d      	lsrs	r5, r5, #5
 800aa8e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 800aa92:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 800aa96:	ea47 070c 	orr.w	r7, r7, ip
 800aa9a:	432f      	orrs	r7, r5
 800aa9c:	8007      	strh	r7, [r0, #0]
 800aa9e:	3002      	adds	r0, #2
 800aaa0:	3402      	adds	r4, #2
 800aaa2:	e7ad      	b.n	800aa00 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 800aaa4:	f8b9 3000 	ldrh.w	r3, [r9]
 800aaa8:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 800aaac:	eba3 0308 	sub.w	r3, r3, r8
 800aab0:	eba6 0608 	sub.w	r6, r6, r8
 800aab4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800aab8:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 800aabc:	440e      	add	r6, r1
 800aabe:	e798      	b.n	800a9f2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 800aac0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800aac4:	42a8      	cmp	r0, r5
 800aac6:	d263      	bcs.n	800ab90 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 800aac8:	9b00      	ldr	r3, [sp, #0]
 800aaca:	4631      	mov	r1, r6
 800aacc:	eb00 0b03 	add.w	fp, r0, r3
 800aad0:	4558      	cmp	r0, fp
 800aad2:	d24f      	bcs.n	800ab74 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 800aad4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aad8:	b12b      	cbz	r3, 800aae6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 800aada:	2bff      	cmp	r3, #255	; 0xff
 800aadc:	f8b4 e000 	ldrh.w	lr, [r4]
 800aae0:	d104      	bne.n	800aaec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x190>
 800aae2:	f8a0 e000 	strh.w	lr, [r0]
 800aae6:	3002      	adds	r0, #2
 800aae8:	3402      	adds	r4, #2
 800aaea:	e7f1      	b.n	800aad0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x174>
 800aaec:	8802      	ldrh	r2, [r0, #0]
 800aaee:	b29f      	uxth	r7, r3
 800aaf0:	43db      	mvns	r3, r3
 800aaf2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 800aaf6:	1216      	asrs	r6, r2, #8
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 800aafe:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 800ab02:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 800ab06:	00d2      	lsls	r2, r2, #3
 800ab08:	fb16 f603 	smulbb	r6, r6, r3
 800ab0c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 800ab10:	b2d2      	uxtb	r2, r2
 800ab12:	fb0c 6c07 	mla	ip, ip, r7, r6
 800ab16:	ea4f 06ee 	mov.w	r6, lr, asr #3
 800ab1a:	fb1a fa03 	smulbb	sl, sl, r3
 800ab1e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800ab22:	fb12 f303 	smulbb	r3, r2, r3
 800ab26:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 800ab2a:	fa5f fe8e 	uxtb.w	lr, lr
 800ab2e:	fb06 a607 	mla	r6, r6, r7, sl
 800ab32:	fa1f fc8c 	uxth.w	ip, ip
 800ab36:	fb0e 3e07 	mla	lr, lr, r7, r3
 800ab3a:	b2b6      	uxth	r6, r6
 800ab3c:	f10c 0201 	add.w	r2, ip, #1
 800ab40:	fa1f fe8e 	uxth.w	lr, lr
 800ab44:	f106 0a01 	add.w	sl, r6, #1
 800ab48:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 800ab4c:	f10e 0301 	add.w	r3, lr, #1
 800ab50:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 800ab54:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 800ab58:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 800ab5c:	0976      	lsrs	r6, r6, #5
 800ab5e:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 800ab62:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 800ab66:	ea4c 0c0e 	orr.w	ip, ip, lr
 800ab6a:	ea4c 0c06 	orr.w	ip, ip, r6
 800ab6e:	f8a0 c000 	strh.w	ip, [r0]
 800ab72:	e7b8      	b.n	800aae6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 800ab74:	f8b9 3000 	ldrh.w	r3, [r9]
 800ab78:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 800ab7c:	eba3 0308 	sub.w	r3, r3, r8
 800ab80:	eba6 0608 	sub.w	r6, r6, r8
 800ab84:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800ab88:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 800ab8c:	440e      	add	r6, r1
 800ab8e:	e799      	b.n	800aac4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 800ab90:	4b03      	ldr	r3, [pc, #12]	; (800aba0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 800ab92:	6818      	ldr	r0, [r3, #0]
 800ab94:	6803      	ldr	r3, [r0, #0]
 800ab96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab98:	4798      	blx	r3
 800ab9a:	b007      	add	sp, #28
 800ab9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aba0:	20001154 	.word	0x20001154
 800aba4:	2000114e 	.word	0x2000114e

0800aba8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 800aba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abac:	b089      	sub	sp, #36	; 0x24
 800abae:	4682      	mov	sl, r0
 800abb0:	460d      	mov	r5, r1
 800abb2:	4691      	mov	r9, r2
 800abb4:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 800abb8:	4698      	mov	r8, r3
 800abba:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800abbc:	b3ae      	cbz	r6, 800ac2a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 800abbe:	4608      	mov	r0, r1
 800abc0:	f7fe fca0 	bl	8009504 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800abc4:	4607      	mov	r7, r0
 800abc6:	4628      	mov	r0, r5
 800abc8:	f7fe fcd6 	bl	8009578 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800abcc:	f8ad 000e 	strh.w	r0, [sp, #14]
 800abd0:	4628      	mov	r0, r5
 800abd2:	f8ad 9008 	strh.w	r9, [sp, #8]
 800abd6:	f8ad 800a 	strh.w	r8, [sp, #10]
 800abda:	f8ad 700c 	strh.w	r7, [sp, #12]
 800abde:	f7fe fe23 	bl	8009828 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800abe2:	b178      	cbz	r0, 800ac04 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 800abe4:	4628      	mov	r0, r5
 800abe6:	f7fe fe1f 	bl	8009828 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800abea:	2802      	cmp	r0, #2
 800abec:	d00a      	beq.n	800ac04 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 800abee:	4628      	mov	r0, r5
 800abf0:	f7fe fe1a 	bl	8009828 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800abf4:	280b      	cmp	r0, #11
 800abf6:	d005      	beq.n	800ac04 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 800abf8:	4b69      	ldr	r3, [pc, #420]	; (800ada0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 800abfa:	214b      	movs	r1, #75	; 0x4b
 800abfc:	4a69      	ldr	r2, [pc, #420]	; (800ada4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 800abfe:	486a      	ldr	r0, [pc, #424]	; (800ada8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 800ac00:	f000 fe4a 	bl	800b898 <__assert_func>
 800ac04:	4628      	mov	r0, r5
 800ac06:	f7fe fd85 	bl	8009714 <_ZNK8touchgfx6Bitmap7getDataEv>
 800ac0a:	4607      	mov	r7, r0
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	f7fe fdb3 	bl	8009778 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 800ac12:	4681      	mov	r9, r0
 800ac14:	4628      	mov	r0, r5
 800ac16:	f7fe fe07 	bl	8009828 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800ac1a:	2802      	cmp	r0, #2
 800ac1c:	d108      	bne.n	800ac30 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 800ac1e:	4633      	mov	r3, r6
 800ac20:	4622      	mov	r2, r4
 800ac22:	a902      	add	r1, sp, #8
 800ac24:	4638      	mov	r0, r7
 800ac26:	f7ff fa69 	bl	800a0fc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800ac2a:	b009      	add	sp, #36	; 0x24
 800ac2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac30:	4628      	mov	r0, r5
 800ac32:	f7fe fdf9 	bl	8009828 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800ac36:	280b      	cmp	r0, #11
 800ac38:	d107      	bne.n	800ac4a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 800ac3a:	9600      	str	r6, [sp, #0]
 800ac3c:	4623      	mov	r3, r4
 800ac3e:	aa02      	add	r2, sp, #8
 800ac40:	4649      	mov	r1, r9
 800ac42:	4638      	mov	r0, r7
 800ac44:	f7ff fe72 	bl	800a92c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 800ac48:	e7ef      	b.n	800ac2a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	f7fe fd28 	bl	80096a0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 800ac50:	b950      	cbnz	r0, 800ac68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 800ac52:	f8da 3000 	ldr.w	r3, [sl]
 800ac56:	aa02      	add	r2, sp, #8
 800ac58:	4639      	mov	r1, r7
 800ac5a:	e9cd 6000 	strd	r6, r0, [sp]
 800ac5e:	4650      	mov	r0, sl
 800ac60:	68dd      	ldr	r5, [r3, #12]
 800ac62:	4623      	mov	r3, r4
 800ac64:	47a8      	blx	r5
 800ac66:	e7e0      	b.n	800ac2a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 800ac68:	f10d 0818 	add.w	r8, sp, #24
 800ac6c:	4629      	mov	r1, r5
 800ac6e:	ad04      	add	r5, sp, #16
 800ac70:	4640      	mov	r0, r8
 800ac72:	f7fe fcbb 	bl	80095ec <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800ac76:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ac7a:	e885 0003 	stmia.w	r5, {r0, r1}
 800ac7e:	4628      	mov	r0, r5
 800ac80:	4621      	mov	r1, r4
 800ac82:	f7fb fee3 	bl	8006a4c <_ZN8touchgfx4RectaNERKS0_>
 800ac86:	4628      	mov	r0, r5
 800ac88:	f7fd fb20 	bl	80082cc <_ZNK8touchgfx4Rect7isEmptyEv>
 800ac8c:	b138      	cbz	r0, 800ac9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 800ac8e:	4623      	mov	r3, r4
 800ac90:	9600      	str	r6, [sp, #0]
 800ac92:	aa02      	add	r2, sp, #8
 800ac94:	4649      	mov	r1, r9
 800ac96:	4638      	mov	r0, r7
 800ac98:	f7ff fe60 	bl	800a95c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 800ac9c:	e7c5      	b.n	800ac2a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 800ac9e:	f8da 3000 	ldr.w	r3, [sl]
 800aca2:	aa02      	add	r2, sp, #8
 800aca4:	4639      	mov	r1, r7
 800aca6:	e9cd 6000 	strd	r6, r0, [sp]
 800acaa:	4650      	mov	r0, sl
 800acac:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 800acb0:	462b      	mov	r3, r5
 800acb2:	47d8      	blx	fp
 800acb4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800acb8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800acbc:	4293      	cmp	r3, r2
 800acbe:	dd13      	ble.n	800ace8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 800acc0:	f9b4 0000 	ldrsh.w	r0, [r4]
 800acc4:	1a9b      	subs	r3, r3, r2
 800acc6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800acca:	f8ad 0018 	strh.w	r0, [sp, #24]
 800acce:	4638      	mov	r0, r7
 800acd0:	f8ad 201a 	strh.w	r2, [sp, #26]
 800acd4:	aa02      	add	r2, sp, #8
 800acd6:	f8ad 101c 	strh.w	r1, [sp, #28]
 800acda:	4649      	mov	r1, r9
 800acdc:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ace0:	4643      	mov	r3, r8
 800ace2:	9600      	str	r6, [sp, #0]
 800ace4:	f7ff fe3a 	bl	800a95c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 800ace8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800acec:	f9b4 2000 	ldrsh.w	r2, [r4]
 800acf0:	4293      	cmp	r3, r2
 800acf2:	dd13      	ble.n	800ad1c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 800acf4:	1a9b      	subs	r3, r3, r2
 800acf6:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 800acfa:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 800acfe:	f8ad 2018 	strh.w	r2, [sp, #24]
 800ad02:	aa02      	add	r2, sp, #8
 800ad04:	f8ad 001a 	strh.w	r0, [sp, #26]
 800ad08:	4638      	mov	r0, r7
 800ad0a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ad0e:	4643      	mov	r3, r8
 800ad10:	f8ad 101e 	strh.w	r1, [sp, #30]
 800ad14:	4649      	mov	r1, r9
 800ad16:	9600      	str	r6, [sp, #0]
 800ad18:	f7ff fe20 	bl	800a95c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 800ad1c:	88a2      	ldrh	r2, [r4, #4]
 800ad1e:	8823      	ldrh	r3, [r4, #0]
 800ad20:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800ad24:	4413      	add	r3, r2
 800ad26:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800ad2a:	440a      	add	r2, r1
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	b292      	uxth	r2, r2
 800ad30:	b218      	sxth	r0, r3
 800ad32:	b211      	sxth	r1, r2
 800ad34:	4288      	cmp	r0, r1
 800ad36:	dd13      	ble.n	800ad60 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 800ad38:	1a9b      	subs	r3, r3, r2
 800ad3a:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800ad3e:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 800ad42:	aa02      	add	r2, sp, #8
 800ad44:	f8ad 1018 	strh.w	r1, [sp, #24]
 800ad48:	4649      	mov	r1, r9
 800ad4a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ad4e:	4643      	mov	r3, r8
 800ad50:	f8ad 001e 	strh.w	r0, [sp, #30]
 800ad54:	4638      	mov	r0, r7
 800ad56:	9600      	str	r6, [sp, #0]
 800ad58:	f8ad 501a 	strh.w	r5, [sp, #26]
 800ad5c:	f7ff fdfe 	bl	800a95c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 800ad60:	88e2      	ldrh	r2, [r4, #6]
 800ad62:	8863      	ldrh	r3, [r4, #2]
 800ad64:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800ad68:	4413      	add	r3, r2
 800ad6a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800ad6e:	440a      	add	r2, r1
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	b292      	uxth	r2, r2
 800ad74:	b218      	sxth	r0, r3
 800ad76:	b211      	sxth	r1, r2
 800ad78:	4288      	cmp	r0, r1
 800ad7a:	f77f af56 	ble.w	800ac2a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 800ad7e:	f9b4 5000 	ldrsh.w	r5, [r4]
 800ad82:	1a9b      	subs	r3, r3, r2
 800ad84:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800ad88:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ad8c:	4643      	mov	r3, r8
 800ad8e:	f8ad 5018 	strh.w	r5, [sp, #24]
 800ad92:	f8ad 101a 	strh.w	r1, [sp, #26]
 800ad96:	f8ad 001c 	strh.w	r0, [sp, #28]
 800ad9a:	9600      	str	r6, [sp, #0]
 800ad9c:	e779      	b.n	800ac92 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 800ad9e:	bf00      	nop
 800ada0:	0800eb65 	.word	0x0800eb65
 800ada4:	0800f062 	.word	0x0800f062
 800ada8:	0800ee53 	.word	0x0800ee53

0800adac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 800adac:	b508      	push	{r3, lr}
 800adae:	b180      	cbz	r0, 800add2 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 800adb0:	2902      	cmp	r1, #2
 800adb2:	d014      	beq.n	800adde <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 800adb4:	2903      	cmp	r1, #3
 800adb6:	d01d      	beq.n	800adf4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 800adb8:	2901      	cmp	r1, #1
 800adba:	d101      	bne.n	800adc0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 800adbc:	2001      	movs	r0, #1
 800adbe:	bd08      	pop	{r3, pc}
 800adc0:	4b0e      	ldr	r3, [pc, #56]	; (800adfc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 800adc2:	8818      	ldrh	r0, [r3, #0]
 800adc4:	b990      	cbnz	r0, 800adec <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 800adc6:	4b0e      	ldr	r3, [pc, #56]	; (800ae00 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 800adc8:	2154      	movs	r1, #84	; 0x54
 800adca:	4a0e      	ldr	r2, [pc, #56]	; (800ae04 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 800adcc:	480e      	ldr	r0, [pc, #56]	; (800ae08 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 800adce:	f000 fd63 	bl	800b898 <__assert_func>
 800add2:	2902      	cmp	r1, #2
 800add4:	d00e      	beq.n	800adf4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 800add6:	2903      	cmp	r1, #3
 800add8:	d0f2      	beq.n	800adc0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 800adda:	2901      	cmp	r1, #1
 800addc:	d1ee      	bne.n	800adbc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 800adde:	4b07      	ldr	r3, [pc, #28]	; (800adfc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 800ade0:	8818      	ldrh	r0, [r3, #0]
 800ade2:	2800      	cmp	r0, #0
 800ade4:	d0ef      	beq.n	800adc6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 800ade6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800adea:	e7e8      	b.n	800adbe <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 800adec:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800adf0:	4240      	negs	r0, r0
 800adf2:	e7e4      	b.n	800adbe <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 800adf4:	f04f 30ff 	mov.w	r0, #4294967295
 800adf8:	e7e1      	b.n	800adbe <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 800adfa:	bf00      	nop
 800adfc:	2000114e 	.word	0x2000114e
 800ae00:	0800ee85 	.word	0x0800ee85
 800ae04:	0800f171 	.word	0x0800f171
 800ae08:	0800eec7 	.word	0x0800eec7

0800ae0c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 800ae0c:	b508      	push	{r3, lr}
 800ae0e:	b180      	cbz	r0, 800ae32 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 800ae10:	2902      	cmp	r1, #2
 800ae12:	d014      	beq.n	800ae3e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 800ae14:	2903      	cmp	r1, #3
 800ae16:	d018      	beq.n	800ae4a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 800ae18:	2901      	cmp	r1, #1
 800ae1a:	d001      	beq.n	800ae20 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 800ae1c:	2001      	movs	r0, #1
 800ae1e:	e013      	b.n	800ae48 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 800ae20:	4b0e      	ldr	r3, [pc, #56]	; (800ae5c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 800ae22:	8818      	ldrh	r0, [r3, #0]
 800ae24:	b970      	cbnz	r0, 800ae44 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 800ae26:	4b0e      	ldr	r3, [pc, #56]	; (800ae60 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 800ae28:	2154      	movs	r1, #84	; 0x54
 800ae2a:	4a0e      	ldr	r2, [pc, #56]	; (800ae64 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 800ae2c:	480e      	ldr	r0, [pc, #56]	; (800ae68 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 800ae2e:	f000 fd33 	bl	800b898 <__assert_func>
 800ae32:	2902      	cmp	r1, #2
 800ae34:	d009      	beq.n	800ae4a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 800ae36:	2903      	cmp	r1, #3
 800ae38:	d0f0      	beq.n	800ae1c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 800ae3a:	2901      	cmp	r1, #1
 800ae3c:	d1f0      	bne.n	800ae20 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 800ae3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae42:	e001      	b.n	800ae48 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 800ae44:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800ae48:	bd08      	pop	{r3, pc}
 800ae4a:	4b04      	ldr	r3, [pc, #16]	; (800ae5c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 800ae4c:	8818      	ldrh	r0, [r3, #0]
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	d0e9      	beq.n	800ae26 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 800ae52:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800ae56:	4240      	negs	r0, r0
 800ae58:	e7f6      	b.n	800ae48 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 800ae5a:	bf00      	nop
 800ae5c:	2000114e 	.word	0x2000114e
 800ae60:	0800ee85 	.word	0x0800ee85
 800ae64:	0800f171 	.word	0x0800f171
 800ae68:	0800eec7 	.word	0x0800eec7

0800ae6c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 800ae6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae70:	b099      	sub	sp, #100	; 0x64
 800ae72:	910b      	str	r1, [sp, #44]	; 0x2c
 800ae74:	a914      	add	r1, sp, #80	; 0x50
 800ae76:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 800ae7a:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 800ae7e:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 800ae82:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 800ae86:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 800ae8a:	e881 000c 	stmia.w	r1, {r2, r3}
 800ae8e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 800ae92:	f89d 10a4 	ldrb.w	r1, [sp, #164]	; 0xa4
 800ae96:	9308      	str	r3, [sp, #32]
 800ae98:	910c      	str	r1, [sp, #48]	; 0x30
 800ae9a:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
 800ae9e:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 800aea2:	910d      	str	r1, [sp, #52]	; 0x34
 800aea4:	f893 b00d 	ldrb.w	fp, [r3, #13]
 800aea8:	7998      	ldrb	r0, [r3, #6]
 800aeaa:	ea4f 114b 	mov.w	r1, fp, lsl #5
 800aeae:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800aeb2:	4301      	orrs	r1, r0
 800aeb4:	9109      	str	r1, [sp, #36]	; 0x24
 800aeb6:	f000 81e4 	beq.w	800b282 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 800aeba:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 800aebe:	79d9      	ldrb	r1, [r3, #7]
 800aec0:	f40b 7b80 	and.w	fp, fp, #256	; 0x100
 800aec4:	ea51 0b0b 	orrs.w	fp, r1, fp
 800aec8:	f000 81db 	beq.w	800b282 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 800aecc:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	2e00      	cmp	r6, #0
 800aed4:	f000 80fd 	beq.w	800b0d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 800aed8:	1af6      	subs	r6, r6, r3
 800aeda:	b2b6      	uxth	r6, r6
 800aedc:	0433      	lsls	r3, r6, #16
 800aede:	d502      	bpl.n	800aee6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 800aee0:	1bad      	subs	r5, r5, r6
 800aee2:	2600      	movs	r6, #0
 800aee4:	b22d      	sxth	r5, r5
 800aee6:	f9b2 1000 	ldrsh.w	r1, [r2]
 800aeea:	a814      	add	r0, sp, #80	; 0x50
 800aeec:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800aef0:	428d      	cmp	r5, r1
 800aef2:	b28b      	uxth	r3, r1
 800aef4:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800aef8:	bfbf      	itttt	lt
 800aefa:	18f6      	addlt	r6, r6, r3
 800aefc:	1b75      	sublt	r5, r6, r5
 800aefe:	b2ae      	uxthlt	r6, r5
 800af00:	460d      	movlt	r5, r1
 800af02:	8891      	ldrh	r1, [r2, #4]
 800af04:	440b      	add	r3, r1
 800af06:	4629      	mov	r1, r5
 800af08:	b21b      	sxth	r3, r3
 800af0a:	9311      	str	r3, [sp, #68]	; 0x44
 800af0c:	8853      	ldrh	r3, [r2, #2]
 800af0e:	88d2      	ldrh	r2, [r2, #6]
 800af10:	4413      	add	r3, r2
 800af12:	9a08      	ldr	r2, [sp, #32]
 800af14:	b21b      	sxth	r3, r3
 800af16:	9310      	str	r3, [sp, #64]	; 0x40
 800af18:	4bb1      	ldr	r3, [pc, #708]	; (800b1e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 800af1a:	f893 9000 	ldrb.w	r9, [r3]
 800af1e:	f109 3cff 	add.w	ip, r9, #4294967295
 800af22:	f1dc 0300 	rsbs	r3, ip, #0
 800af26:	eb43 030c 	adc.w	r3, r3, ip
 800af2a:	930f      	str	r3, [sp, #60]	; 0x3c
 800af2c:	4653      	mov	r3, sl
 800af2e:	f7fd f827 	bl	8007f80 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 800af32:	4629      	mov	r1, r5
 800af34:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 800af38:	4653      	mov	r3, sl
 800af3a:	9a08      	ldr	r2, [sp, #32]
 800af3c:	a814      	add	r0, sp, #80	; 0x50
 800af3e:	f7fd f837 	bl	8007fb0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 800af42:	a918      	add	r1, sp, #96	; 0x60
 800af44:	f821 0d02 	strh.w	r0, [r1, #-2]!
 800af48:	a817      	add	r0, sp, #92	; 0x5c
 800af4a:	f7fd f979 	bl	8008240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 800af4e:	f1ba 0f00 	cmp.w	sl, #0
 800af52:	f040 80c1 	bne.w	800b0d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26c>
 800af56:	f1b9 0f01 	cmp.w	r9, #1
 800af5a:	f040 80c5 	bne.w	800b0e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27c>
 800af5e:	2301      	movs	r3, #1
 800af60:	f1b8 0f01 	cmp.w	r8, #1
 800af64:	fa03 f308 	lsl.w	r3, r3, r8
 800af68:	f103 33ff 	add.w	r3, r3, #4294967295
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	930a      	str	r3, [sp, #40]	; 0x28
 800af70:	f000 80e5 	beq.w	800b13e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d2>
 800af74:	f1b8 0f02 	cmp.w	r8, #2
 800af78:	f000 80e4 	beq.w	800b144 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 800af7c:	f1b8 0f04 	cmp.w	r8, #4
 800af80:	bf15      	itete	ne
 800af82:	46c1      	movne	r9, r8
 800af84:	f04f 0904 	moveq.w	r9, #4
 800af88:	2301      	movne	r3, #1
 800af8a:	2311      	moveq	r3, #17
 800af8c:	9307      	str	r3, [sp, #28]
 800af8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af90:	b153      	cbz	r3, 800afa8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 800af92:	2408      	movs	r4, #8
 800af94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af96:	fb94 f3f9 	sdiv	r3, r4, r9
 800af9a:	1e5c      	subs	r4, r3, #1
 800af9c:	4414      	add	r4, r2
 800af9e:	fb94 f4f3 	sdiv	r4, r4, r3
 800afa2:	fb14 f403 	smulbb	r4, r4, r3
 800afa6:	b2a4      	uxth	r4, r4
 800afa8:	b906      	cbnz	r6, 800afac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 800afaa:	b16f      	cbz	r7, 800afc8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15c>
 800afac:	fb07 6304 	mla	r3, r7, r4, r6
 800afb0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800afb2:	4639      	mov	r1, r7
 800afb4:	fb08 f303 	mul.w	r3, r8, r3
 800afb8:	f003 0707 	and.w	r7, r3, #7
 800afbc:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
 800afc0:	9328      	str	r3, [sp, #160]	; 0xa0
 800afc2:	ebab 0301 	sub.w	r3, fp, r1
 800afc6:	930e      	str	r3, [sp, #56]	; 0x38
 800afc8:	4651      	mov	r1, sl
 800afca:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800afcc:	f7ff feee 	bl	800adac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 800afd0:	4651      	mov	r1, sl
 800afd2:	4683      	mov	fp, r0
 800afd4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800afd6:	f7ff ff19 	bl	800ae0c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 800afda:	9a08      	ldr	r2, [sp, #32]
 800afdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800afde:	4682      	mov	sl, r0
 800afe0:	1a9b      	subs	r3, r3, r2
 800afe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afe4:	429a      	cmp	r2, r3
 800afe6:	bfa8      	it	ge
 800afe8:	461a      	movge	r2, r3
 800afea:	2a00      	cmp	r2, #0
 800afec:	9208      	str	r2, [sp, #32]
 800afee:	f340 8148 	ble.w	800b282 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 800aff2:	1bad      	subs	r5, r5, r6
 800aff4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aff6:	1b5d      	subs	r5, r3, r5
 800aff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800affa:	429d      	cmp	r5, r3
 800affc:	bfd4      	ite	le
 800affe:	ebc6 0605 	rsble	r6, r6, r5
 800b002:	ebc6 0603 	rsbgt	r6, r6, r3
 800b006:	2e00      	cmp	r6, #0
 800b008:	f340 813b 	ble.w	800b282 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 800b00c:	1ba4      	subs	r4, r4, r6
 800b00e:	fb09 f304 	mul.w	r3, r9, r4
 800b012:	930e      	str	r3, [sp, #56]	; 0x38
 800b014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b016:	2b00      	cmp	r3, #0
 800b018:	f040 809d 	bne.w	800b156 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ea>
 800b01c:	4b71      	ldr	r3, [pc, #452]	; (800b1e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 800b01e:	6818      	ldr	r0, [r3, #0]
 800b020:	6803      	ldr	r3, [r0, #0]
 800b022:	6a1b      	ldr	r3, [r3, #32]
 800b024:	4798      	blx	r3
 800b026:	4970      	ldr	r1, [pc, #448]	; (800b1e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 800b028:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 800b02c:	880c      	ldrh	r4, [r1, #0]
 800b02e:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 800b032:	fb04 1303 	mla	r3, r4, r3, r1
 800b036:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800b03a:	9309      	str	r3, [sp, #36]	; 0x24
 800b03c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b03e:	7819      	ldrb	r1, [r3, #0]
 800b040:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800b042:	4139      	asrs	r1, r7
 800b044:	0a1b      	lsrs	r3, r3, #8
 800b046:	b2c9      	uxtb	r1, r1
 800b048:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800b04c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b04e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800b050:	08db      	lsrs	r3, r3, #3
 800b052:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 800b056:	9310      	str	r3, [sp, #64]	; 0x40
 800b058:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800b05a:	00db      	lsls	r3, r3, #3
 800b05c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800b060:	9311      	str	r3, [sp, #68]	; 0x44
 800b062:	ea4f 034b 	mov.w	r3, fp, lsl #1
 800b066:	fb0b ab16 	mls	fp, fp, r6, sl
 800b06a:	fb03 fa06 	mul.w	sl, r3, r6
 800b06e:	930c      	str	r3, [sp, #48]	; 0x30
 800b070:	eb0a 034b 	add.w	r3, sl, fp, lsl #1
 800b074:	9312      	str	r3, [sp, #72]	; 0x48
 800b076:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800b078:	b29b      	uxth	r3, r3
 800b07a:	9313      	str	r3, [sp, #76]	; 0x4c
 800b07c:	9b08      	ldr	r3, [sp, #32]
 800b07e:	3b01      	subs	r3, #1
 800b080:	9308      	str	r3, [sp, #32]
 800b082:	3301      	adds	r3, #1
 800b084:	f000 80c4 	beq.w	800b210 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 800b088:	46b2      	mov	sl, r6
 800b08a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 800b08e:	f11a 3aff 	adds.w	sl, sl, #4294967295
 800b092:	f0c0 80ab 	bcc.w	800b1ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 800b096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b098:	400b      	ands	r3, r1
 800b09a:	d00a      	beq.n	800b0b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x246>
 800b09c:	9807      	ldr	r0, [sp, #28]
 800b09e:	fb13 f300 	smulbb	r3, r3, r0
 800b0a2:	2bfe      	cmp	r3, #254	; 0xfe
 800b0a4:	dd59      	ble.n	800b15a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 800b0a6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b0a8:	28ff      	cmp	r0, #255	; 0xff
 800b0aa:	d156      	bne.n	800b15a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 800b0ac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800b0ae:	f8ae 4000 	strh.w	r4, [lr]
 800b0b2:	4447      	add	r7, r8
 800b0b4:	b2bf      	uxth	r7, r7
 800b0b6:	2f07      	cmp	r7, #7
 800b0b8:	bf89      	itett	hi
 800b0ba:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 800b0bc:	fa41 f109 	asrls.w	r1, r1, r9
 800b0c0:	2700      	movhi	r7, #0
 800b0c2:	7859      	ldrbhi	r1, [r3, #1]
 800b0c4:	bf8a      	itet	hi
 800b0c6:	3301      	addhi	r3, #1
 800b0c8:	b2c9      	uxtbls	r1, r1
 800b0ca:	9328      	strhi	r3, [sp, #160]	; 0xa0
 800b0cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0ce:	449e      	add	lr, r3
 800b0d0:	e7dd      	b.n	800b08e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x222>
 800b0d2:	441d      	add	r5, r3
 800b0d4:	b22d      	sxth	r5, r5
 800b0d6:	e706      	b.n	800aee6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 800b0d8:	f1ba 0f01 	cmp.w	sl, #1
 800b0dc:	f47f af3f 	bne.w	800af5e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 800b0e0:	f1b9 0f01 	cmp.w	r9, #1
 800b0e4:	f47f af3b 	bne.w	800af5e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 800b0e8:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800b1e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 800b0ec:	f8d9 0000 	ldr.w	r0, [r9]
 800b0f0:	6803      	ldr	r3, [r0, #0]
 800b0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f4:	4798      	blx	r3
 800b0f6:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 800b0fa:	464a      	mov	r2, r9
 800b0fc:	d006      	beq.n	800b10c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 800b0fe:	f1b8 0f04 	cmp.w	r8, #4
 800b102:	d11a      	bne.n	800b13a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 800b104:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b106:	3300      	adds	r3, #0
 800b108:	bf18      	it	ne
 800b10a:	2301      	movne	r3, #1
 800b10c:	05c0      	lsls	r0, r0, #23
 800b10e:	f140 8088 	bpl.w	800b222 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 800b112:	f1b8 0f08 	cmp.w	r8, #8
 800b116:	f040 8084 	bne.w	800b222 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	bf14      	ite	ne
 800b11e:	2180      	movne	r1, #128	; 0x80
 800b120:	f44f 7180 	moveq.w	r1, #256	; 0x100
 800b124:	2e00      	cmp	r6, #0
 800b126:	f040 80af 	bne.w	800b288 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x41c>
 800b12a:	2f00      	cmp	r7, #0
 800b12c:	f000 8083 	beq.w	800b236 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 800b130:	23ff      	movs	r3, #255	; 0xff
 800b132:	46c1      	mov	r9, r8
 800b134:	930a      	str	r3, [sp, #40]	; 0x28
 800b136:	2301      	movs	r3, #1
 800b138:	e728      	b.n	800af8c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 800b13a:	2300      	movs	r3, #0
 800b13c:	e7e6      	b.n	800b10c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 800b13e:	46c1      	mov	r9, r8
 800b140:	23ff      	movs	r3, #255	; 0xff
 800b142:	e723      	b.n	800af8c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 800b144:	46c1      	mov	r9, r8
 800b146:	2355      	movs	r3, #85	; 0x55
 800b148:	e720      	b.n	800af8c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 800b14a:	23ff      	movs	r3, #255	; 0xff
 800b14c:	46c1      	mov	r9, r8
 800b14e:	930a      	str	r3, [sp, #40]	; 0x28
 800b150:	2301      	movs	r3, #1
 800b152:	9307      	str	r3, [sp, #28]
 800b154:	e71d      	b.n	800af92 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x126>
 800b156:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b158:	e765      	b.n	800b026 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ba>
 800b15a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b15c:	f8be 5000 	ldrh.w	r5, [lr]
 800b160:	fb10 f303 	smulbb	r3, r0, r3
 800b164:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b166:	122c      	asrs	r4, r5, #8
 800b168:	b29b      	uxth	r3, r3
 800b16a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 800b16e:	1c58      	adds	r0, r3, #1
 800b170:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 800b174:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b176:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800b17a:	fa1f fc83 	uxth.w	ip, r3
 800b17e:	43db      	mvns	r3, r3
 800b180:	fb10 f00c 	smulbb	r0, r0, ip
 800b184:	b2db      	uxtb	r3, r3
 800b186:	fb1c fb02 	smulbb	fp, ip, r2
 800b18a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b18c:	fb04 0403 	mla	r4, r4, r3, r0
 800b190:	10e8      	asrs	r0, r5, #3
 800b192:	fb1c fc02 	smulbb	ip, ip, r2
 800b196:	00ed      	lsls	r5, r5, #3
 800b198:	b2a4      	uxth	r4, r4
 800b19a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 800b19e:	b2ed      	uxtb	r5, r5
 800b1a0:	fb00 b003 	mla	r0, r0, r3, fp
 800b1a4:	fb05 cc03 	mla	ip, r5, r3, ip
 800b1a8:	1c63      	adds	r3, r4, #1
 800b1aa:	b280      	uxth	r0, r0
 800b1ac:	fa1f fc8c 	uxth.w	ip, ip
 800b1b0:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 800b1b4:	f10c 0b01 	add.w	fp, ip, #1
 800b1b8:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 800b1bc:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 800b1c0:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 800b1c4:	ea44 040b 	orr.w	r4, r4, fp
 800b1c8:	f100 0b01 	add.w	fp, r0, #1
 800b1cc:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 800b1d0:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 800b1d4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 800b1d8:	ea44 040b 	orr.w	r4, r4, fp
 800b1dc:	e767      	b.n	800b0ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x242>
 800b1de:	bf00      	nop
 800b1e0:	2000114c 	.word	0x2000114c
 800b1e4:	20001154 	.word	0x20001154
 800b1e8:	2000114e 	.word	0x2000114e
 800b1ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1ee:	b153      	cbz	r3, 800b206 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 800b1f0:	441f      	add	r7, r3
 800b1f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b1f4:	b2bf      	uxth	r7, r7
 800b1f6:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 800b1fa:	f007 0707 	and.w	r7, r7, #7
 800b1fe:	7819      	ldrb	r1, [r3, #0]
 800b200:	9328      	str	r3, [sp, #160]	; 0xa0
 800b202:	4139      	asrs	r1, r7
 800b204:	b2c9      	uxtb	r1, r1
 800b206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b208:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b20a:	441a      	add	r2, r3
 800b20c:	9209      	str	r2, [sp, #36]	; 0x24
 800b20e:	e735      	b.n	800b07c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x210>
 800b210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b212:	2b00      	cmp	r3, #0
 800b214:	d135      	bne.n	800b282 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 800b216:	4b21      	ldr	r3, [pc, #132]	; (800b29c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x430>)
 800b218:	6818      	ldr	r0, [r3, #0]
 800b21a:	6803      	ldr	r3, [r0, #0]
 800b21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21e:	4798      	blx	r3
 800b220:	e02f      	b.n	800b282 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 800b222:	2b00      	cmp	r3, #0
 800b224:	f43f ae9b 	beq.w	800af5e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 800b228:	2e00      	cmp	r6, #0
 800b22a:	f47f ae98 	bne.w	800af5e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 800b22e:	2f00      	cmp	r7, #0
 800b230:	f47f ae95 	bne.w	800af5e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 800b234:	2180      	movs	r1, #128	; 0x80
 800b236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b238:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b23a:	18eb      	adds	r3, r5, r3
 800b23c:	4283      	cmp	r3, r0
 800b23e:	f73f ae8e 	bgt.w	800af5e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 800b242:	9b08      	ldr	r3, [sp, #32]
 800b244:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b246:	445b      	add	r3, fp
 800b248:	4283      	cmp	r3, r0
 800b24a:	f73f ae88 	bgt.w	800af5e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 800b24e:	f1b8 0f08 	cmp.w	r8, #8
 800b252:	6810      	ldr	r0, [r2, #0]
 800b254:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 800b258:	bf18      	it	ne
 800b25a:	3401      	addne	r4, #1
 800b25c:	6805      	ldr	r5, [r0, #0]
 800b25e:	9105      	str	r1, [sp, #20]
 800b260:	bf18      	it	ne
 800b262:	f024 0401 	bicne.w	r4, r4, #1
 800b266:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b268:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 800b26c:	bf18      	it	ne
 800b26e:	b2a4      	uxthne	r4, r4
 800b270:	9104      	str	r1, [sp, #16]
 800b272:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800b274:	e9cd 4b00 	strd	r4, fp, [sp]
 800b278:	e9cd 4102 	strd	r4, r1, [sp, #8]
 800b27c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800b27e:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 800b280:	47a0      	blx	r4
 800b282:	b019      	add	sp, #100	; 0x64
 800b284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b288:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f47f af5d 	bne.w	800b14a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 800b290:	23ff      	movs	r3, #255	; 0xff
 800b292:	46c1      	mov	r9, r8
 800b294:	930a      	str	r3, [sp, #40]	; 0x28
 800b296:	2301      	movs	r3, #1
 800b298:	9307      	str	r3, [sp, #28]
 800b29a:	e687      	b.n	800afac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 800b29c:	20001154 	.word	0x20001154

0800b2a0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 800b2a0:	6101      	str	r1, [r0, #16]
 800b2a2:	4770      	bx	lr

0800b2a4 <_ZN8touchgfx8Gestures4tickEv>:
 800b2a4:	7b83      	ldrb	r3, [r0, #14]
 800b2a6:	b14b      	cbz	r3, 800b2bc <_ZN8touchgfx8Gestures4tickEv+0x18>
 800b2a8:	8903      	ldrh	r3, [r0, #8]
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	2b07      	cmp	r3, #7
 800b2b0:	8103      	strh	r3, [r0, #8]
 800b2b2:	bf81      	itttt	hi
 800b2b4:	2300      	movhi	r3, #0
 800b2b6:	8143      	strhhi	r3, [r0, #10]
 800b2b8:	8183      	strhhi	r3, [r0, #12]
 800b2ba:	7383      	strbhi	r3, [r0, #14]
 800b2bc:	4770      	bx	lr
	...

0800b2c0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 800b2c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b2c4:	4604      	mov	r4, r0
 800b2c6:	4698      	mov	r8, r3
 800b2c8:	8880      	ldrh	r0, [r0, #4]
 800b2ca:	4617      	mov	r7, r2
 800b2cc:	4b1d      	ldr	r3, [pc, #116]	; (800b344 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 800b2ce:	460e      	mov	r6, r1
 800b2d0:	f8ad 0006 	strh.w	r0, [sp, #6]
 800b2d4:	eba8 0000 	sub.w	r0, r8, r0
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	2300      	movs	r3, #0
 800b2dc:	b280      	uxth	r0, r0
 800b2de:	8aa2      	ldrh	r2, [r4, #20]
 800b2e0:	f88d 3004 	strb.w	r3, [sp, #4]
 800b2e4:	b203      	sxth	r3, r0
 800b2e6:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 800b2ea:	88e1      	ldrh	r1, [r4, #6]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f8ad 800a 	strh.w	r8, [sp, #10]
 800b2f2:	f8ad 1008 	strh.w	r1, [sp, #8]
 800b2f6:	bfb8      	it	lt
 800b2f8:	4240      	neglt	r0, r0
 800b2fa:	f8ad 500c 	strh.w	r5, [sp, #12]
 800b2fe:	bfb8      	it	lt
 800b300:	b203      	sxthlt	r3, r0
 800b302:	4293      	cmp	r3, r2
 800b304:	dc08      	bgt.n	800b318 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 800b306:	1a69      	subs	r1, r5, r1
 800b308:	b289      	uxth	r1, r1
 800b30a:	b20b      	sxth	r3, r1
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	bfbc      	itt	lt
 800b310:	4249      	neglt	r1, r1
 800b312:	b20b      	sxthlt	r3, r1
 800b314:	429a      	cmp	r2, r3
 800b316:	da13      	bge.n	800b340 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 800b318:	6920      	ldr	r0, [r4, #16]
 800b31a:	4669      	mov	r1, sp
 800b31c:	eba8 0606 	sub.w	r6, r8, r6
 800b320:	1bef      	subs	r7, r5, r7
 800b322:	6803      	ldr	r3, [r0, #0]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	4798      	blx	r3
 800b328:	2300      	movs	r3, #0
 800b32a:	2001      	movs	r0, #1
 800b32c:	8166      	strh	r6, [r4, #10]
 800b32e:	8123      	strh	r3, [r4, #8]
 800b330:	81a7      	strh	r7, [r4, #12]
 800b332:	f8a4 8004 	strh.w	r8, [r4, #4]
 800b336:	80e5      	strh	r5, [r4, #6]
 800b338:	73a0      	strb	r0, [r4, #14]
 800b33a:	b004      	add	sp, #16
 800b33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b340:	2000      	movs	r0, #0
 800b342:	e7fa      	b.n	800b33a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 800b344:	0800d348 	.word	0x0800d348

0800b348 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 800b348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b34a:	461e      	mov	r6, r3
 800b34c:	1e4b      	subs	r3, r1, #1
 800b34e:	b085      	sub	sp, #20
 800b350:	4604      	mov	r4, r0
 800b352:	2b01      	cmp	r3, #1
 800b354:	460d      	mov	r5, r1
 800b356:	4617      	mov	r7, r2
 800b358:	d84b      	bhi.n	800b3f2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 800b35a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800b35e:	1cd3      	adds	r3, r2, #3
 800b360:	b29b      	uxth	r3, r3
 800b362:	2b06      	cmp	r3, #6
 800b364:	d916      	bls.n	800b394 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 800b366:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800b408 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 800b36a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800b36e:	f8cd c004 	str.w	ip, [sp, #4]
 800b372:	f04f 0c00 	mov.w	ip, #0
 800b376:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800b37a:	6900      	ldr	r0, [r0, #16]
 800b37c:	f8ad 100c 	strh.w	r1, [sp, #12]
 800b380:	a901      	add	r1, sp, #4
 800b382:	f88d c008 	strb.w	ip, [sp, #8]
 800b386:	f8ad 200a 	strh.w	r2, [sp, #10]
 800b38a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b38e:	6803      	ldr	r3, [r0, #0]
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	4798      	blx	r3
 800b394:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b398:	1cd3      	adds	r3, r2, #3
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	2b06      	cmp	r3, #6
 800b39e:	d916      	bls.n	800b3ce <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 800b3a0:	f8df c064 	ldr.w	ip, [pc, #100]	; 800b408 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 800b3a4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800b3a8:	f8cd c004 	str.w	ip, [sp, #4]
 800b3ac:	f04f 0c01 	mov.w	ip, #1
 800b3b0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800b3b4:	6920      	ldr	r0, [r4, #16]
 800b3b6:	f8ad 100c 	strh.w	r1, [sp, #12]
 800b3ba:	a901      	add	r1, sp, #4
 800b3bc:	f88d c008 	strb.w	ip, [sp, #8]
 800b3c0:	f8ad 200a 	strh.w	r2, [sp, #10]
 800b3c4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b3c8:	6803      	ldr	r3, [r0, #0]
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	4798      	blx	r3
 800b3ce:	4b0d      	ldr	r3, [pc, #52]	; (800b404 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 800b3d0:	a901      	add	r1, sp, #4
 800b3d2:	6920      	ldr	r0, [r4, #16]
 800b3d4:	9301      	str	r3, [sp, #4]
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	f88d 5008 	strb.w	r5, [sp, #8]
 800b3dc:	f8ad 700a 	strh.w	r7, [sp, #10]
 800b3e0:	f8ad 600c 	strh.w	r6, [sp, #12]
 800b3e4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b3e8:	6803      	ldr	r3, [r0, #0]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4798      	blx	r3
 800b3ee:	b005      	add	sp, #20
 800b3f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3f2:	2900      	cmp	r1, #0
 800b3f4:	d1eb      	bne.n	800b3ce <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 800b3f6:	80a2      	strh	r2, [r4, #4]
 800b3f8:	80c6      	strh	r6, [r0, #6]
 800b3fa:	60a1      	str	r1, [r4, #8]
 800b3fc:	81a1      	strh	r1, [r4, #12]
 800b3fe:	73a1      	strb	r1, [r4, #14]
 800b400:	e7e5      	b.n	800b3ce <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 800b402:	bf00      	nop
 800b404:	0800d334 	.word	0x0800d334
 800b408:	0800e318 	.word	0x0800e318

0800b40c <_ZdlPv>:
 800b40c:	f000 baa6 	b.w	800b95c <free>

0800b410 <_ZdlPvj>:
 800b410:	f7ff bffc 	b.w	800b40c <_ZdlPv>

0800b414 <__cxa_guard_acquire>:
 800b414:	6803      	ldr	r3, [r0, #0]
 800b416:	07db      	lsls	r3, r3, #31
 800b418:	d406      	bmi.n	800b428 <__cxa_guard_acquire+0x14>
 800b41a:	7843      	ldrb	r3, [r0, #1]
 800b41c:	b103      	cbz	r3, 800b420 <__cxa_guard_acquire+0xc>
 800b41e:	deff      	udf	#255	; 0xff
 800b420:	2301      	movs	r3, #1
 800b422:	7043      	strb	r3, [r0, #1]
 800b424:	4618      	mov	r0, r3
 800b426:	4770      	bx	lr
 800b428:	2000      	movs	r0, #0
 800b42a:	4770      	bx	lr

0800b42c <__cxa_guard_release>:
 800b42c:	2301      	movs	r3, #1
 800b42e:	6003      	str	r3, [r0, #0]
 800b430:	4770      	bx	lr

0800b432 <_Znwj>:
 800b432:	2801      	cmp	r0, #1
 800b434:	bf38      	it	cc
 800b436:	2001      	movcc	r0, #1
 800b438:	b510      	push	{r4, lr}
 800b43a:	4604      	mov	r4, r0
 800b43c:	4620      	mov	r0, r4
 800b43e:	f000 fa85 	bl	800b94c <malloc>
 800b442:	b930      	cbnz	r0, 800b452 <_Znwj+0x20>
 800b444:	f000 fa18 	bl	800b878 <_ZSt15get_new_handlerv>
 800b448:	b908      	cbnz	r0, 800b44e <_Znwj+0x1c>
 800b44a:	f000 fa1d 	bl	800b888 <abort>
 800b44e:	4780      	blx	r0
 800b450:	e7f4      	b.n	800b43c <_Znwj+0xa>
 800b452:	bd10      	pop	{r4, pc}

0800b454 <__cxa_pure_virtual>:
 800b454:	b508      	push	{r3, lr}
 800b456:	f000 fa09 	bl	800b86c <_ZSt9terminatev>

0800b45a <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 800b45a:	684b      	ldr	r3, [r1, #4]
 800b45c:	6043      	str	r3, [r0, #4]
 800b45e:	684b      	ldr	r3, [r1, #4]
 800b460:	6001      	str	r1, [r0, #0]
 800b462:	6018      	str	r0, [r3, #0]
 800b464:	6048      	str	r0, [r1, #4]
 800b466:	4770      	bx	lr

0800b468 <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 800b468:	e9d0 3200 	ldrd	r3, r2, [r0]
 800b46c:	6013      	str	r3, [r2, #0]
 800b46e:	605a      	str	r2, [r3, #4]
 800b470:	4770      	bx	lr

0800b472 <_ZSt17__throw_bad_allocv>:
 800b472:	b508      	push	{r3, lr}
 800b474:	f000 fa08 	bl	800b888 <abort>

0800b478 <_ZSt19__throw_logic_errorPKc>:
 800b478:	b508      	push	{r3, lr}
 800b47a:	f000 fa05 	bl	800b888 <abort>

0800b47e <_ZSt20__throw_length_errorPKc>:
 800b47e:	b508      	push	{r3, lr}
 800b480:	f000 fa02 	bl	800b888 <abort>

0800b484 <_ZSt24__throw_out_of_range_fmtPKcz>:
 800b484:	b40f      	push	{r0, r1, r2, r3}
 800b486:	b580      	push	{r7, lr}
 800b488:	b084      	sub	sp, #16
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	f107 0418 	add.w	r4, r7, #24
 800b490:	f854 2b04 	ldr.w	r2, [r4], #4
 800b494:	607a      	str	r2, [r7, #4]
 800b496:	4610      	mov	r0, r2
 800b498:	f7f4 ff0a 	bl	80002b0 <strlen>
 800b49c:	f200 2307 	addw	r3, r0, #519	; 0x207
 800b4a0:	f023 0307 	bic.w	r3, r3, #7
 800b4a4:	ebad 0d03 	sub.w	sp, sp, r3
 800b4a8:	f500 7100 	add.w	r1, r0, #512	; 0x200
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	60fc      	str	r4, [r7, #12]
 800b4b0:	4623      	mov	r3, r4
 800b4b2:	4668      	mov	r0, sp
 800b4b4:	f000 f854 	bl	800b560 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 800b4b8:	f000 f9e6 	bl	800b888 <abort>

0800b4bc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b09c      	sub	sp, #112	; 0x70
 800b4c0:	4606      	mov	r6, r0
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	460c      	mov	r4, r1
 800b4c6:	1ba4      	subs	r4, r4, r6
 800b4c8:	490e      	ldr	r1, [pc, #56]	; (800b504 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 800b4ca:	2269      	movs	r2, #105	; 0x69
 800b4cc:	1d38      	adds	r0, r7, #4
 800b4ce:	f000 fa4d 	bl	800b96c <memcpy>
 800b4d2:	f104 0370 	add.w	r3, r4, #112	; 0x70
 800b4d6:	f023 0307 	bic.w	r3, r3, #7
 800b4da:	ebad 0d03 	sub.w	sp, sp, r3
 800b4de:	466d      	mov	r5, sp
 800b4e0:	2268      	movs	r2, #104	; 0x68
 800b4e2:	1d39      	adds	r1, r7, #4
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	f000 fa41 	bl	800b96c <memcpy>
 800b4ea:	4622      	mov	r2, r4
 800b4ec:	4631      	mov	r1, r6
 800b4ee:	f105 0068 	add.w	r0, r5, #104	; 0x68
 800b4f2:	442c      	add	r4, r5
 800b4f4:	f000 fa3a 	bl	800b96c <memcpy>
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800b4fe:	4628      	mov	r0, r5
 800b500:	f7ff ffba 	bl	800b478 <_ZSt19__throw_logic_errorPKc>
 800b504:	0800f328 	.word	0x0800f328

0800b508 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 800b508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	b084      	sub	sp, #16
 800b510:	466d      	mov	r5, sp
 800b512:	f105 040c 	add.w	r4, r5, #12
 800b516:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800b55c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 800b51a:	4623      	mov	r3, r4
 800b51c:	f04f 0c0a 	mov.w	ip, #10
 800b520:	fbb2 f6fc 	udiv	r6, r2, ip
 800b524:	fb0c 2e16 	mls	lr, ip, r6, r2
 800b528:	f818 e00e 	ldrb.w	lr, [r8, lr]
 800b52c:	f803 ed01 	strb.w	lr, [r3, #-1]!
 800b530:	4696      	mov	lr, r2
 800b532:	f1be 0f09 	cmp.w	lr, #9
 800b536:	4632      	mov	r2, r6
 800b538:	d8f2      	bhi.n	800b520 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 800b53a:	1ae4      	subs	r4, r4, r3
 800b53c:	428c      	cmp	r4, r1
 800b53e:	d809      	bhi.n	800b554 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 800b540:	f1c4 010c 	rsb	r1, r4, #12
 800b544:	4622      	mov	r2, r4
 800b546:	4429      	add	r1, r5
 800b548:	f000 fa10 	bl	800b96c <memcpy>
 800b54c:	4620      	mov	r0, r4
 800b54e:	46bd      	mov	sp, r7
 800b550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b554:	f04f 34ff 	mov.w	r4, #4294967295
 800b558:	e7f8      	b.n	800b54c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800b55a:	bf00      	nop
 800b55c:	0800f391 	.word	0x0800f391

0800b560 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 800b560:	3901      	subs	r1, #1
 800b562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b566:	4607      	mov	r7, r0
 800b568:	4615      	mov	r5, r2
 800b56a:	eb00 0801 	add.w	r8, r0, r1
 800b56e:	4604      	mov	r4, r0
 800b570:	782a      	ldrb	r2, [r5, #0]
 800b572:	b362      	cbz	r2, 800b5ce <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 800b574:	4544      	cmp	r4, r8
 800b576:	d22e      	bcs.n	800b5d6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 800b578:	2a25      	cmp	r2, #37	; 0x25
 800b57a:	d107      	bne.n	800b58c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800b57c:	786a      	ldrb	r2, [r5, #1]
 800b57e:	2a73      	cmp	r2, #115	; 0x73
 800b580:	d009      	beq.n	800b596 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 800b582:	2a7a      	cmp	r2, #122	; 0x7a
 800b584:	d012      	beq.n	800b5ac <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 800b586:	2a25      	cmp	r2, #37	; 0x25
 800b588:	d100      	bne.n	800b58c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800b58a:	3501      	adds	r5, #1
 800b58c:	f815 2b01 	ldrb.w	r2, [r5], #1
 800b590:	f804 2b01 	strb.w	r2, [r4], #1
 800b594:	e7ec      	b.n	800b570 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800b596:	f853 2b04 	ldr.w	r2, [r3], #4
 800b59a:	3a01      	subs	r2, #1
 800b59c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800b5a0:	b1e9      	cbz	r1, 800b5de <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7e>
 800b5a2:	4544      	cmp	r4, r8
 800b5a4:	d017      	beq.n	800b5d6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 800b5a6:	f804 1b01 	strb.w	r1, [r4], #1
 800b5aa:	e7f7      	b.n	800b59c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 800b5ac:	78aa      	ldrb	r2, [r5, #2]
 800b5ae:	2a75      	cmp	r2, #117	; 0x75
 800b5b0:	d1ec      	bne.n	800b58c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800b5b2:	461e      	mov	r6, r3
 800b5b4:	eba8 0104 	sub.w	r1, r8, r4
 800b5b8:	f856 2b04 	ldr.w	r2, [r6], #4
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f7ff ffa3 	bl	800b508 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	dd07      	ble.n	800b5d6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 800b5c6:	4404      	add	r4, r0
 800b5c8:	3503      	adds	r5, #3
 800b5ca:	4633      	mov	r3, r6
 800b5cc:	e7d0      	b.n	800b570 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800b5ce:	7022      	strb	r2, [r4, #0]
 800b5d0:	1be0      	subs	r0, r4, r7
 800b5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5d6:	4621      	mov	r1, r4
 800b5d8:	4638      	mov	r0, r7
 800b5da:	f7ff ff6f 	bl	800b4bc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 800b5de:	3502      	adds	r5, #2
 800b5e0:	e7c6      	b.n	800b570 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>

0800b5e2 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 800b5e2:	b10a      	cbz	r2, 800b5e8 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800b5e4:	f000 b9c2 	b.w	800b96c <memcpy>
 800b5e8:	4770      	bx	lr
	...

0800b5ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800b5ec:	b508      	push	{r3, lr}
 800b5ee:	680b      	ldr	r3, [r1, #0]
 800b5f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5f4:	d302      	bcc.n	800b5fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800b5f6:	480d      	ldr	r0, [pc, #52]	; (800b62c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800b5f8:	f7ff ff41 	bl	800b47e <_ZSt20__throw_length_errorPKc>
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d90b      	bls.n	800b618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800b600:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800b604:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800b608:	d206      	bcs.n	800b618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800b60a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b60e:	bf2a      	itet	cs
 800b610:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800b614:	6008      	strcc	r0, [r1, #0]
 800b616:	600b      	strcs	r3, [r1, #0]
 800b618:	6808      	ldr	r0, [r1, #0]
 800b61a:	3001      	adds	r0, #1
 800b61c:	d501      	bpl.n	800b622 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800b61e:	f7ff ff28 	bl	800b472 <_ZSt17__throw_bad_allocv>
 800b622:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b626:	f7ff bf04 	b.w	800b432 <_Znwj>
 800b62a:	bf00      	nop
 800b62c:	0800f39c 	.word	0x0800f39c

0800b630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800b630:	f850 3b08 	ldr.w	r3, [r0], #8
 800b634:	4283      	cmp	r3, r0
 800b636:	d002      	beq.n	800b63e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800b638:	4618      	mov	r0, r3
 800b63a:	f7ff bee7 	b.w	800b40c <_ZdlPv>
 800b63e:	4770      	bx	lr

0800b640 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800b640:	6840      	ldr	r0, [r0, #4]
 800b642:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800b646:	3901      	subs	r1, #1
 800b648:	1a09      	subs	r1, r1, r0
 800b64a:	4291      	cmp	r1, r2
 800b64c:	b508      	push	{r3, lr}
 800b64e:	d202      	bcs.n	800b656 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800b650:	4618      	mov	r0, r3
 800b652:	f7ff ff14 	bl	800b47e <_ZSt20__throw_length_errorPKc>
 800b656:	bd08      	pop	{r3, pc}

0800b658 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800b658:	6803      	ldr	r3, [r0, #0]
 800b65a:	428b      	cmp	r3, r1
 800b65c:	d806      	bhi.n	800b66c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 800b65e:	6840      	ldr	r0, [r0, #4]
 800b660:	4418      	add	r0, r3
 800b662:	4281      	cmp	r1, r0
 800b664:	bf94      	ite	ls
 800b666:	2000      	movls	r0, #0
 800b668:	2001      	movhi	r0, #1
 800b66a:	4770      	bx	lr
 800b66c:	2001      	movs	r0, #1
 800b66e:	4770      	bx	lr

0800b670 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800b670:	2a01      	cmp	r2, #1
 800b672:	b510      	push	{r4, lr}
 800b674:	d102      	bne.n	800b67c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800b676:	780a      	ldrb	r2, [r1, #0]
 800b678:	7002      	strb	r2, [r0, #0]
 800b67a:	bd10      	pop	{r4, pc}
 800b67c:	f7ff ffb1 	bl	800b5e2 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800b680:	e7fb      	b.n	800b67a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800b682 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800b682:	2a01      	cmp	r2, #1
 800b684:	b430      	push	{r4, r5}
 800b686:	d103      	bne.n	800b690 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800b688:	780b      	ldrb	r3, [r1, #0]
 800b68a:	7003      	strb	r3, [r0, #0]
 800b68c:	bc30      	pop	{r4, r5}
 800b68e:	4770      	bx	lr
 800b690:	2a00      	cmp	r2, #0
 800b692:	d0fb      	beq.n	800b68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800b694:	bc30      	pop	{r4, r5}
 800b696:	f000 b977 	b.w	800b988 <memmove>

0800b69a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800b69a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b69e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b6a0:	461f      	mov	r7, r3
 800b6a2:	6843      	ldr	r3, [r0, #4]
 800b6a4:	eb01 0802 	add.w	r8, r1, r2
 800b6a8:	1ab2      	subs	r2, r6, r2
 800b6aa:	441a      	add	r2, r3
 800b6ac:	eba3 0908 	sub.w	r9, r3, r8
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	9201      	str	r2, [sp, #4]
 800b6b4:	f853 2b08 	ldr.w	r2, [r3], #8
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	bf18      	it	ne
 800b6bc:	6882      	ldrne	r2, [r0, #8]
 800b6be:	460d      	mov	r5, r1
 800b6c0:	bf08      	it	eq
 800b6c2:	220f      	moveq	r2, #15
 800b6c4:	a901      	add	r1, sp, #4
 800b6c6:	4604      	mov	r4, r0
 800b6c8:	f7ff ff90 	bl	800b5ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b6cc:	4682      	mov	sl, r0
 800b6ce:	b11d      	cbz	r5, 800b6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800b6d0:	6821      	ldr	r1, [r4, #0]
 800b6d2:	462a      	mov	r2, r5
 800b6d4:	f7ff ffcc 	bl	800b670 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b6d8:	b137      	cbz	r7, 800b6e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800b6da:	b12e      	cbz	r6, 800b6e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800b6dc:	4632      	mov	r2, r6
 800b6de:	4639      	mov	r1, r7
 800b6e0:	eb0a 0005 	add.w	r0, sl, r5
 800b6e4:	f7ff ffc4 	bl	800b670 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b6e8:	f1b9 0f00 	cmp.w	r9, #0
 800b6ec:	d007      	beq.n	800b6fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 800b6ee:	6821      	ldr	r1, [r4, #0]
 800b6f0:	4435      	add	r5, r6
 800b6f2:	464a      	mov	r2, r9
 800b6f4:	4441      	add	r1, r8
 800b6f6:	eb0a 0005 	add.w	r0, sl, r5
 800b6fa:	f7ff ffb9 	bl	800b670 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b6fe:	4620      	mov	r0, r4
 800b700:	f7ff ff96 	bl	800b630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800b704:	9b01      	ldr	r3, [sp, #4]
 800b706:	f8c4 a000 	str.w	sl, [r4]
 800b70a:	60a3      	str	r3, [r4, #8]
 800b70c:	b002      	add	sp, #8
 800b70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800b714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 800b714:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b718:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b71a:	4614      	mov	r4, r2
 800b71c:	4680      	mov	r8, r0
 800b71e:	462a      	mov	r2, r5
 800b720:	4689      	mov	r9, r1
 800b722:	461f      	mov	r7, r3
 800b724:	4621      	mov	r1, r4
 800b726:	4b39      	ldr	r3, [pc, #228]	; (800b80c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 800b728:	f7ff ff8a 	bl	800b640 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800b72c:	4642      	mov	r2, r8
 800b72e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b732:	f852 6b08 	ldr.w	r6, [r2], #8
 800b736:	4296      	cmp	r6, r2
 800b738:	bf18      	it	ne
 800b73a:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 800b73e:	eba5 0b04 	sub.w	fp, r5, r4
 800b742:	eb03 0a0b 	add.w	sl, r3, fp
 800b746:	bf08      	it	eq
 800b748:	220f      	moveq	r2, #15
 800b74a:	4552      	cmp	r2, sl
 800b74c:	d351      	bcc.n	800b7f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 800b74e:	444e      	add	r6, r9
 800b750:	4639      	mov	r1, r7
 800b752:	44a1      	add	r9, r4
 800b754:	4640      	mov	r0, r8
 800b756:	eba3 0909 	sub.w	r9, r3, r9
 800b75a:	f7ff ff7d 	bl	800b658 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 800b75e:	b180      	cbz	r0, 800b782 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 800b760:	f1b9 0f00 	cmp.w	r9, #0
 800b764:	d006      	beq.n	800b774 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800b766:	42ac      	cmp	r4, r5
 800b768:	d004      	beq.n	800b774 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800b76a:	464a      	mov	r2, r9
 800b76c:	1931      	adds	r1, r6, r4
 800b76e:	1970      	adds	r0, r6, r5
 800b770:	f7ff ff87 	bl	800b682 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800b774:	b315      	cbz	r5, 800b7bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800b776:	462a      	mov	r2, r5
 800b778:	4639      	mov	r1, r7
 800b77a:	4630      	mov	r0, r6
 800b77c:	f7ff ff78 	bl	800b670 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b780:	e01c      	b.n	800b7bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800b782:	b135      	cbz	r5, 800b792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 800b784:	42ac      	cmp	r4, r5
 800b786:	d33c      	bcc.n	800b802 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 800b788:	462a      	mov	r2, r5
 800b78a:	4639      	mov	r1, r7
 800b78c:	4630      	mov	r0, r6
 800b78e:	f7ff ff78 	bl	800b682 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800b792:	f1b9 0f00 	cmp.w	r9, #0
 800b796:	d011      	beq.n	800b7bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800b798:	42ac      	cmp	r4, r5
 800b79a:	d00f      	beq.n	800b7bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800b79c:	464a      	mov	r2, r9
 800b79e:	1931      	adds	r1, r6, r4
 800b7a0:	1970      	adds	r0, r6, r5
 800b7a2:	f7ff ff6e 	bl	800b682 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800b7a6:	42ac      	cmp	r4, r5
 800b7a8:	d208      	bcs.n	800b7bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800b7aa:	4434      	add	r4, r6
 800b7ac:	197b      	adds	r3, r7, r5
 800b7ae:	429c      	cmp	r4, r3
 800b7b0:	d30f      	bcc.n	800b7d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 800b7b2:	462a      	mov	r2, r5
 800b7b4:	4639      	mov	r1, r7
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	f7ff ff63 	bl	800b682 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800b7bc:	f8d8 3000 	ldr.w	r3, [r8]
 800b7c0:	f8c8 a004 	str.w	sl, [r8, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	4640      	mov	r0, r8
 800b7c8:	f803 200a 	strb.w	r2, [r3, sl]
 800b7cc:	b003      	add	sp, #12
 800b7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7d2:	42bc      	cmp	r4, r7
 800b7d4:	d803      	bhi.n	800b7de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 800b7d6:	462a      	mov	r2, r5
 800b7d8:	eb07 010b 	add.w	r1, r7, fp
 800b7dc:	e7cd      	b.n	800b77a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 800b7de:	1be4      	subs	r4, r4, r7
 800b7e0:	4622      	mov	r2, r4
 800b7e2:	4639      	mov	r1, r7
 800b7e4:	4630      	mov	r0, r6
 800b7e6:	f7ff ff4c 	bl	800b682 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800b7ea:	1b2a      	subs	r2, r5, r4
 800b7ec:	1971      	adds	r1, r6, r5
 800b7ee:	1930      	adds	r0, r6, r4
 800b7f0:	e7c4      	b.n	800b77c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800b7f2:	9500      	str	r5, [sp, #0]
 800b7f4:	463b      	mov	r3, r7
 800b7f6:	4622      	mov	r2, r4
 800b7f8:	4649      	mov	r1, r9
 800b7fa:	4640      	mov	r0, r8
 800b7fc:	f7ff ff4d 	bl	800b69a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800b800:	e7dc      	b.n	800b7bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800b802:	f1b9 0f00 	cmp.w	r9, #0
 800b806:	d0d0      	beq.n	800b7aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 800b808:	e7c8      	b.n	800b79c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 800b80a:	bf00      	nop
 800b80c:	0800f3b4 	.word	0x0800f3b4

0800b810 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800b810:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b812:	4604      	mov	r4, r0
 800b814:	4623      	mov	r3, r4
 800b816:	6840      	ldr	r0, [r0, #4]
 800b818:	f853 6b08 	ldr.w	r6, [r3], #8
 800b81c:	429e      	cmp	r6, r3
 800b81e:	bf18      	it	ne
 800b820:	68a3      	ldrne	r3, [r4, #8]
 800b822:	eb00 0502 	add.w	r5, r0, r2
 800b826:	bf08      	it	eq
 800b828:	230f      	moveq	r3, #15
 800b82a:	429d      	cmp	r5, r3
 800b82c:	d80a      	bhi.n	800b844 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 800b82e:	b112      	cbz	r2, 800b836 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 800b830:	4430      	add	r0, r6
 800b832:	f7ff ff1d 	bl	800b670 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b836:	6823      	ldr	r3, [r4, #0]
 800b838:	6065      	str	r5, [r4, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	4620      	mov	r0, r4
 800b83e:	555a      	strb	r2, [r3, r5]
 800b840:	b002      	add	sp, #8
 800b842:	bd70      	pop	{r4, r5, r6, pc}
 800b844:	9200      	str	r2, [sp, #0]
 800b846:	460b      	mov	r3, r1
 800b848:	2200      	movs	r2, #0
 800b84a:	4601      	mov	r1, r0
 800b84c:	4620      	mov	r0, r4
 800b84e:	f7ff ff24 	bl	800b69a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800b852:	e7f0      	b.n	800b836 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

0800b854 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800b854:	b508      	push	{r3, lr}
 800b856:	4780      	blx	r0
 800b858:	f000 f816 	bl	800b888 <abort>

0800b85c <_ZSt13get_terminatev>:
 800b85c:	4b02      	ldr	r3, [pc, #8]	; (800b868 <_ZSt13get_terminatev+0xc>)
 800b85e:	6818      	ldr	r0, [r3, #0]
 800b860:	f3bf 8f5b 	dmb	ish
 800b864:	4770      	bx	lr
 800b866:	bf00      	nop
 800b868:	2000003c 	.word	0x2000003c

0800b86c <_ZSt9terminatev>:
 800b86c:	b508      	push	{r3, lr}
 800b86e:	f7ff fff5 	bl	800b85c <_ZSt13get_terminatev>
 800b872:	f7ff ffef 	bl	800b854 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800b878 <_ZSt15get_new_handlerv>:
 800b878:	4b02      	ldr	r3, [pc, #8]	; (800b884 <_ZSt15get_new_handlerv+0xc>)
 800b87a:	6818      	ldr	r0, [r3, #0]
 800b87c:	f3bf 8f5b 	dmb	ish
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop
 800b884:	200011a8 	.word	0x200011a8

0800b888 <abort>:
 800b888:	b508      	push	{r3, lr}
 800b88a:	2006      	movs	r0, #6
 800b88c:	f000 fc6e 	bl	800c16c <raise>
 800b890:	2001      	movs	r0, #1
 800b892:	f001 fab3 	bl	800cdfc <_exit>
	...

0800b898 <__assert_func>:
 800b898:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b89a:	4614      	mov	r4, r2
 800b89c:	461a      	mov	r2, r3
 800b89e:	4b09      	ldr	r3, [pc, #36]	; (800b8c4 <__assert_func+0x2c>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4605      	mov	r5, r0
 800b8a4:	68d8      	ldr	r0, [r3, #12]
 800b8a6:	b14c      	cbz	r4, 800b8bc <__assert_func+0x24>
 800b8a8:	4b07      	ldr	r3, [pc, #28]	; (800b8c8 <__assert_func+0x30>)
 800b8aa:	9100      	str	r1, [sp, #0]
 800b8ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b8b0:	4906      	ldr	r1, [pc, #24]	; (800b8cc <__assert_func+0x34>)
 800b8b2:	462b      	mov	r3, r5
 800b8b4:	f000 f814 	bl	800b8e0 <fiprintf>
 800b8b8:	f7ff ffe6 	bl	800b888 <abort>
 800b8bc:	4b04      	ldr	r3, [pc, #16]	; (800b8d0 <__assert_func+0x38>)
 800b8be:	461c      	mov	r4, r3
 800b8c0:	e7f3      	b.n	800b8aa <__assert_func+0x12>
 800b8c2:	bf00      	nop
 800b8c4:	20000040 	.word	0x20000040
 800b8c8:	0800f3cd 	.word	0x0800f3cd
 800b8cc:	0800f3da 	.word	0x0800f3da
 800b8d0:	0800f408 	.word	0x0800f408

0800b8d4 <atexit>:
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	4601      	mov	r1, r0
 800b8d8:	461a      	mov	r2, r3
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f000 bd7c 	b.w	800c3d8 <__register_exitproc>

0800b8e0 <fiprintf>:
 800b8e0:	b40e      	push	{r1, r2, r3}
 800b8e2:	b503      	push	{r0, r1, lr}
 800b8e4:	4601      	mov	r1, r0
 800b8e6:	ab03      	add	r3, sp, #12
 800b8e8:	4805      	ldr	r0, [pc, #20]	; (800b900 <fiprintf+0x20>)
 800b8ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8ee:	6800      	ldr	r0, [r0, #0]
 800b8f0:	9301      	str	r3, [sp, #4]
 800b8f2:	f000 f93f 	bl	800bb74 <_vfiprintf_r>
 800b8f6:	b002      	add	sp, #8
 800b8f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8fc:	b003      	add	sp, #12
 800b8fe:	4770      	bx	lr
 800b900:	20000040 	.word	0x20000040

0800b904 <__libc_init_array>:
 800b904:	b570      	push	{r4, r5, r6, lr}
 800b906:	4d0d      	ldr	r5, [pc, #52]	; (800b93c <__libc_init_array+0x38>)
 800b908:	4c0d      	ldr	r4, [pc, #52]	; (800b940 <__libc_init_array+0x3c>)
 800b90a:	1b64      	subs	r4, r4, r5
 800b90c:	10a4      	asrs	r4, r4, #2
 800b90e:	2600      	movs	r6, #0
 800b910:	42a6      	cmp	r6, r4
 800b912:	d109      	bne.n	800b928 <__libc_init_array+0x24>
 800b914:	4d0b      	ldr	r5, [pc, #44]	; (800b944 <__libc_init_array+0x40>)
 800b916:	4c0c      	ldr	r4, [pc, #48]	; (800b948 <__libc_init_array+0x44>)
 800b918:	f001 fa72 	bl	800ce00 <_init>
 800b91c:	1b64      	subs	r4, r4, r5
 800b91e:	10a4      	asrs	r4, r4, #2
 800b920:	2600      	movs	r6, #0
 800b922:	42a6      	cmp	r6, r4
 800b924:	d105      	bne.n	800b932 <__libc_init_array+0x2e>
 800b926:	bd70      	pop	{r4, r5, r6, pc}
 800b928:	f855 3b04 	ldr.w	r3, [r5], #4
 800b92c:	4798      	blx	r3
 800b92e:	3601      	adds	r6, #1
 800b930:	e7ee      	b.n	800b910 <__libc_init_array+0xc>
 800b932:	f855 3b04 	ldr.w	r3, [r5], #4
 800b936:	4798      	blx	r3
 800b938:	3601      	adds	r6, #1
 800b93a:	e7f2      	b.n	800b922 <__libc_init_array+0x1e>
 800b93c:	08010030 	.word	0x08010030
 800b940:	08010030 	.word	0x08010030
 800b944:	08010030 	.word	0x08010030
 800b948:	0801004c 	.word	0x0801004c

0800b94c <malloc>:
 800b94c:	4b02      	ldr	r3, [pc, #8]	; (800b958 <malloc+0xc>)
 800b94e:	4601      	mov	r1, r0
 800b950:	6818      	ldr	r0, [r3, #0]
 800b952:	f000 b88b 	b.w	800ba6c <_malloc_r>
 800b956:	bf00      	nop
 800b958:	20000040 	.word	0x20000040

0800b95c <free>:
 800b95c:	4b02      	ldr	r3, [pc, #8]	; (800b968 <free+0xc>)
 800b95e:	4601      	mov	r1, r0
 800b960:	6818      	ldr	r0, [r3, #0]
 800b962:	f000 b833 	b.w	800b9cc <_free_r>
 800b966:	bf00      	nop
 800b968:	20000040 	.word	0x20000040

0800b96c <memcpy>:
 800b96c:	440a      	add	r2, r1
 800b96e:	4291      	cmp	r1, r2
 800b970:	f100 33ff 	add.w	r3, r0, #4294967295
 800b974:	d100      	bne.n	800b978 <memcpy+0xc>
 800b976:	4770      	bx	lr
 800b978:	b510      	push	{r4, lr}
 800b97a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b97e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b982:	4291      	cmp	r1, r2
 800b984:	d1f9      	bne.n	800b97a <memcpy+0xe>
 800b986:	bd10      	pop	{r4, pc}

0800b988 <memmove>:
 800b988:	4288      	cmp	r0, r1
 800b98a:	b510      	push	{r4, lr}
 800b98c:	eb01 0402 	add.w	r4, r1, r2
 800b990:	d902      	bls.n	800b998 <memmove+0x10>
 800b992:	4284      	cmp	r4, r0
 800b994:	4623      	mov	r3, r4
 800b996:	d807      	bhi.n	800b9a8 <memmove+0x20>
 800b998:	1e43      	subs	r3, r0, #1
 800b99a:	42a1      	cmp	r1, r4
 800b99c:	d008      	beq.n	800b9b0 <memmove+0x28>
 800b99e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9a6:	e7f8      	b.n	800b99a <memmove+0x12>
 800b9a8:	4402      	add	r2, r0
 800b9aa:	4601      	mov	r1, r0
 800b9ac:	428a      	cmp	r2, r1
 800b9ae:	d100      	bne.n	800b9b2 <memmove+0x2a>
 800b9b0:	bd10      	pop	{r4, pc}
 800b9b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9ba:	e7f7      	b.n	800b9ac <memmove+0x24>

0800b9bc <memset>:
 800b9bc:	4402      	add	r2, r0
 800b9be:	4603      	mov	r3, r0
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d100      	bne.n	800b9c6 <memset+0xa>
 800b9c4:	4770      	bx	lr
 800b9c6:	f803 1b01 	strb.w	r1, [r3], #1
 800b9ca:	e7f9      	b.n	800b9c0 <memset+0x4>

0800b9cc <_free_r>:
 800b9cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9ce:	2900      	cmp	r1, #0
 800b9d0:	d048      	beq.n	800ba64 <_free_r+0x98>
 800b9d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9d6:	9001      	str	r0, [sp, #4]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	f1a1 0404 	sub.w	r4, r1, #4
 800b9de:	bfb8      	it	lt
 800b9e0:	18e4      	addlt	r4, r4, r3
 800b9e2:	f000 ff7b 	bl	800c8dc <__malloc_lock>
 800b9e6:	4a20      	ldr	r2, [pc, #128]	; (800ba68 <_free_r+0x9c>)
 800b9e8:	9801      	ldr	r0, [sp, #4]
 800b9ea:	6813      	ldr	r3, [r2, #0]
 800b9ec:	4615      	mov	r5, r2
 800b9ee:	b933      	cbnz	r3, 800b9fe <_free_r+0x32>
 800b9f0:	6063      	str	r3, [r4, #4]
 800b9f2:	6014      	str	r4, [r2, #0]
 800b9f4:	b003      	add	sp, #12
 800b9f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9fa:	f000 bf75 	b.w	800c8e8 <__malloc_unlock>
 800b9fe:	42a3      	cmp	r3, r4
 800ba00:	d90b      	bls.n	800ba1a <_free_r+0x4e>
 800ba02:	6821      	ldr	r1, [r4, #0]
 800ba04:	1862      	adds	r2, r4, r1
 800ba06:	4293      	cmp	r3, r2
 800ba08:	bf04      	itt	eq
 800ba0a:	681a      	ldreq	r2, [r3, #0]
 800ba0c:	685b      	ldreq	r3, [r3, #4]
 800ba0e:	6063      	str	r3, [r4, #4]
 800ba10:	bf04      	itt	eq
 800ba12:	1852      	addeq	r2, r2, r1
 800ba14:	6022      	streq	r2, [r4, #0]
 800ba16:	602c      	str	r4, [r5, #0]
 800ba18:	e7ec      	b.n	800b9f4 <_free_r+0x28>
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	b10b      	cbz	r3, 800ba24 <_free_r+0x58>
 800ba20:	42a3      	cmp	r3, r4
 800ba22:	d9fa      	bls.n	800ba1a <_free_r+0x4e>
 800ba24:	6811      	ldr	r1, [r2, #0]
 800ba26:	1855      	adds	r5, r2, r1
 800ba28:	42a5      	cmp	r5, r4
 800ba2a:	d10b      	bne.n	800ba44 <_free_r+0x78>
 800ba2c:	6824      	ldr	r4, [r4, #0]
 800ba2e:	4421      	add	r1, r4
 800ba30:	1854      	adds	r4, r2, r1
 800ba32:	42a3      	cmp	r3, r4
 800ba34:	6011      	str	r1, [r2, #0]
 800ba36:	d1dd      	bne.n	800b9f4 <_free_r+0x28>
 800ba38:	681c      	ldr	r4, [r3, #0]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	6053      	str	r3, [r2, #4]
 800ba3e:	4421      	add	r1, r4
 800ba40:	6011      	str	r1, [r2, #0]
 800ba42:	e7d7      	b.n	800b9f4 <_free_r+0x28>
 800ba44:	d902      	bls.n	800ba4c <_free_r+0x80>
 800ba46:	230c      	movs	r3, #12
 800ba48:	6003      	str	r3, [r0, #0]
 800ba4a:	e7d3      	b.n	800b9f4 <_free_r+0x28>
 800ba4c:	6825      	ldr	r5, [r4, #0]
 800ba4e:	1961      	adds	r1, r4, r5
 800ba50:	428b      	cmp	r3, r1
 800ba52:	bf04      	itt	eq
 800ba54:	6819      	ldreq	r1, [r3, #0]
 800ba56:	685b      	ldreq	r3, [r3, #4]
 800ba58:	6063      	str	r3, [r4, #4]
 800ba5a:	bf04      	itt	eq
 800ba5c:	1949      	addeq	r1, r1, r5
 800ba5e:	6021      	streq	r1, [r4, #0]
 800ba60:	6054      	str	r4, [r2, #4]
 800ba62:	e7c7      	b.n	800b9f4 <_free_r+0x28>
 800ba64:	b003      	add	sp, #12
 800ba66:	bd30      	pop	{r4, r5, pc}
 800ba68:	200011ac 	.word	0x200011ac

0800ba6c <_malloc_r>:
 800ba6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba6e:	1ccd      	adds	r5, r1, #3
 800ba70:	f025 0503 	bic.w	r5, r5, #3
 800ba74:	3508      	adds	r5, #8
 800ba76:	2d0c      	cmp	r5, #12
 800ba78:	bf38      	it	cc
 800ba7a:	250c      	movcc	r5, #12
 800ba7c:	2d00      	cmp	r5, #0
 800ba7e:	4606      	mov	r6, r0
 800ba80:	db01      	blt.n	800ba86 <_malloc_r+0x1a>
 800ba82:	42a9      	cmp	r1, r5
 800ba84:	d903      	bls.n	800ba8e <_malloc_r+0x22>
 800ba86:	230c      	movs	r3, #12
 800ba88:	6033      	str	r3, [r6, #0]
 800ba8a:	2000      	movs	r0, #0
 800ba8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba8e:	f000 ff25 	bl	800c8dc <__malloc_lock>
 800ba92:	4921      	ldr	r1, [pc, #132]	; (800bb18 <_malloc_r+0xac>)
 800ba94:	680a      	ldr	r2, [r1, #0]
 800ba96:	4614      	mov	r4, r2
 800ba98:	b99c      	cbnz	r4, 800bac2 <_malloc_r+0x56>
 800ba9a:	4f20      	ldr	r7, [pc, #128]	; (800bb1c <_malloc_r+0xb0>)
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	b923      	cbnz	r3, 800baaa <_malloc_r+0x3e>
 800baa0:	4621      	mov	r1, r4
 800baa2:	4630      	mov	r0, r6
 800baa4:	f000 fb2a 	bl	800c0fc <_sbrk_r>
 800baa8:	6038      	str	r0, [r7, #0]
 800baaa:	4629      	mov	r1, r5
 800baac:	4630      	mov	r0, r6
 800baae:	f000 fb25 	bl	800c0fc <_sbrk_r>
 800bab2:	1c43      	adds	r3, r0, #1
 800bab4:	d123      	bne.n	800bafe <_malloc_r+0x92>
 800bab6:	230c      	movs	r3, #12
 800bab8:	6033      	str	r3, [r6, #0]
 800baba:	4630      	mov	r0, r6
 800babc:	f000 ff14 	bl	800c8e8 <__malloc_unlock>
 800bac0:	e7e3      	b.n	800ba8a <_malloc_r+0x1e>
 800bac2:	6823      	ldr	r3, [r4, #0]
 800bac4:	1b5b      	subs	r3, r3, r5
 800bac6:	d417      	bmi.n	800baf8 <_malloc_r+0x8c>
 800bac8:	2b0b      	cmp	r3, #11
 800baca:	d903      	bls.n	800bad4 <_malloc_r+0x68>
 800bacc:	6023      	str	r3, [r4, #0]
 800bace:	441c      	add	r4, r3
 800bad0:	6025      	str	r5, [r4, #0]
 800bad2:	e004      	b.n	800bade <_malloc_r+0x72>
 800bad4:	6863      	ldr	r3, [r4, #4]
 800bad6:	42a2      	cmp	r2, r4
 800bad8:	bf0c      	ite	eq
 800bada:	600b      	streq	r3, [r1, #0]
 800badc:	6053      	strne	r3, [r2, #4]
 800bade:	4630      	mov	r0, r6
 800bae0:	f000 ff02 	bl	800c8e8 <__malloc_unlock>
 800bae4:	f104 000b 	add.w	r0, r4, #11
 800bae8:	1d23      	adds	r3, r4, #4
 800baea:	f020 0007 	bic.w	r0, r0, #7
 800baee:	1ac2      	subs	r2, r0, r3
 800baf0:	d0cc      	beq.n	800ba8c <_malloc_r+0x20>
 800baf2:	1a1b      	subs	r3, r3, r0
 800baf4:	50a3      	str	r3, [r4, r2]
 800baf6:	e7c9      	b.n	800ba8c <_malloc_r+0x20>
 800baf8:	4622      	mov	r2, r4
 800bafa:	6864      	ldr	r4, [r4, #4]
 800bafc:	e7cc      	b.n	800ba98 <_malloc_r+0x2c>
 800bafe:	1cc4      	adds	r4, r0, #3
 800bb00:	f024 0403 	bic.w	r4, r4, #3
 800bb04:	42a0      	cmp	r0, r4
 800bb06:	d0e3      	beq.n	800bad0 <_malloc_r+0x64>
 800bb08:	1a21      	subs	r1, r4, r0
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	f000 faf6 	bl	800c0fc <_sbrk_r>
 800bb10:	3001      	adds	r0, #1
 800bb12:	d1dd      	bne.n	800bad0 <_malloc_r+0x64>
 800bb14:	e7cf      	b.n	800bab6 <_malloc_r+0x4a>
 800bb16:	bf00      	nop
 800bb18:	200011ac 	.word	0x200011ac
 800bb1c:	200011b0 	.word	0x200011b0

0800bb20 <__sfputc_r>:
 800bb20:	6893      	ldr	r3, [r2, #8]
 800bb22:	3b01      	subs	r3, #1
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	b410      	push	{r4}
 800bb28:	6093      	str	r3, [r2, #8]
 800bb2a:	da08      	bge.n	800bb3e <__sfputc_r+0x1e>
 800bb2c:	6994      	ldr	r4, [r2, #24]
 800bb2e:	42a3      	cmp	r3, r4
 800bb30:	db01      	blt.n	800bb36 <__sfputc_r+0x16>
 800bb32:	290a      	cmp	r1, #10
 800bb34:	d103      	bne.n	800bb3e <__sfputc_r+0x1e>
 800bb36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb3a:	f000 bb8d 	b.w	800c258 <__swbuf_r>
 800bb3e:	6813      	ldr	r3, [r2, #0]
 800bb40:	1c58      	adds	r0, r3, #1
 800bb42:	6010      	str	r0, [r2, #0]
 800bb44:	7019      	strb	r1, [r3, #0]
 800bb46:	4608      	mov	r0, r1
 800bb48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb4c:	4770      	bx	lr

0800bb4e <__sfputs_r>:
 800bb4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb50:	4606      	mov	r6, r0
 800bb52:	460f      	mov	r7, r1
 800bb54:	4614      	mov	r4, r2
 800bb56:	18d5      	adds	r5, r2, r3
 800bb58:	42ac      	cmp	r4, r5
 800bb5a:	d101      	bne.n	800bb60 <__sfputs_r+0x12>
 800bb5c:	2000      	movs	r0, #0
 800bb5e:	e007      	b.n	800bb70 <__sfputs_r+0x22>
 800bb60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb64:	463a      	mov	r2, r7
 800bb66:	4630      	mov	r0, r6
 800bb68:	f7ff ffda 	bl	800bb20 <__sfputc_r>
 800bb6c:	1c43      	adds	r3, r0, #1
 800bb6e:	d1f3      	bne.n	800bb58 <__sfputs_r+0xa>
 800bb70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb74 <_vfiprintf_r>:
 800bb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb78:	460d      	mov	r5, r1
 800bb7a:	b09d      	sub	sp, #116	; 0x74
 800bb7c:	4614      	mov	r4, r2
 800bb7e:	4698      	mov	r8, r3
 800bb80:	4606      	mov	r6, r0
 800bb82:	b118      	cbz	r0, 800bb8c <_vfiprintf_r+0x18>
 800bb84:	6983      	ldr	r3, [r0, #24]
 800bb86:	b90b      	cbnz	r3, 800bb8c <_vfiprintf_r+0x18>
 800bb88:	f000 fda2 	bl	800c6d0 <__sinit>
 800bb8c:	4b89      	ldr	r3, [pc, #548]	; (800bdb4 <_vfiprintf_r+0x240>)
 800bb8e:	429d      	cmp	r5, r3
 800bb90:	d11b      	bne.n	800bbca <_vfiprintf_r+0x56>
 800bb92:	6875      	ldr	r5, [r6, #4]
 800bb94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb96:	07d9      	lsls	r1, r3, #31
 800bb98:	d405      	bmi.n	800bba6 <_vfiprintf_r+0x32>
 800bb9a:	89ab      	ldrh	r3, [r5, #12]
 800bb9c:	059a      	lsls	r2, r3, #22
 800bb9e:	d402      	bmi.n	800bba6 <_vfiprintf_r+0x32>
 800bba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bba2:	f000 fe33 	bl	800c80c <__retarget_lock_acquire_recursive>
 800bba6:	89ab      	ldrh	r3, [r5, #12]
 800bba8:	071b      	lsls	r3, r3, #28
 800bbaa:	d501      	bpl.n	800bbb0 <_vfiprintf_r+0x3c>
 800bbac:	692b      	ldr	r3, [r5, #16]
 800bbae:	b9eb      	cbnz	r3, 800bbec <_vfiprintf_r+0x78>
 800bbb0:	4629      	mov	r1, r5
 800bbb2:	4630      	mov	r0, r6
 800bbb4:	f000 fba2 	bl	800c2fc <__swsetup_r>
 800bbb8:	b1c0      	cbz	r0, 800bbec <_vfiprintf_r+0x78>
 800bbba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbbc:	07dc      	lsls	r4, r3, #31
 800bbbe:	d50e      	bpl.n	800bbde <_vfiprintf_r+0x6a>
 800bbc0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc4:	b01d      	add	sp, #116	; 0x74
 800bbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbca:	4b7b      	ldr	r3, [pc, #492]	; (800bdb8 <_vfiprintf_r+0x244>)
 800bbcc:	429d      	cmp	r5, r3
 800bbce:	d101      	bne.n	800bbd4 <_vfiprintf_r+0x60>
 800bbd0:	68b5      	ldr	r5, [r6, #8]
 800bbd2:	e7df      	b.n	800bb94 <_vfiprintf_r+0x20>
 800bbd4:	4b79      	ldr	r3, [pc, #484]	; (800bdbc <_vfiprintf_r+0x248>)
 800bbd6:	429d      	cmp	r5, r3
 800bbd8:	bf08      	it	eq
 800bbda:	68f5      	ldreq	r5, [r6, #12]
 800bbdc:	e7da      	b.n	800bb94 <_vfiprintf_r+0x20>
 800bbde:	89ab      	ldrh	r3, [r5, #12]
 800bbe0:	0598      	lsls	r0, r3, #22
 800bbe2:	d4ed      	bmi.n	800bbc0 <_vfiprintf_r+0x4c>
 800bbe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbe6:	f000 fe13 	bl	800c810 <__retarget_lock_release_recursive>
 800bbea:	e7e9      	b.n	800bbc0 <_vfiprintf_r+0x4c>
 800bbec:	2300      	movs	r3, #0
 800bbee:	9309      	str	r3, [sp, #36]	; 0x24
 800bbf0:	2320      	movs	r3, #32
 800bbf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbf6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbfa:	2330      	movs	r3, #48	; 0x30
 800bbfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bdc0 <_vfiprintf_r+0x24c>
 800bc00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc04:	f04f 0901 	mov.w	r9, #1
 800bc08:	4623      	mov	r3, r4
 800bc0a:	469a      	mov	sl, r3
 800bc0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc10:	b10a      	cbz	r2, 800bc16 <_vfiprintf_r+0xa2>
 800bc12:	2a25      	cmp	r2, #37	; 0x25
 800bc14:	d1f9      	bne.n	800bc0a <_vfiprintf_r+0x96>
 800bc16:	ebba 0b04 	subs.w	fp, sl, r4
 800bc1a:	d00b      	beq.n	800bc34 <_vfiprintf_r+0xc0>
 800bc1c:	465b      	mov	r3, fp
 800bc1e:	4622      	mov	r2, r4
 800bc20:	4629      	mov	r1, r5
 800bc22:	4630      	mov	r0, r6
 800bc24:	f7ff ff93 	bl	800bb4e <__sfputs_r>
 800bc28:	3001      	adds	r0, #1
 800bc2a:	f000 80aa 	beq.w	800bd82 <_vfiprintf_r+0x20e>
 800bc2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc30:	445a      	add	r2, fp
 800bc32:	9209      	str	r2, [sp, #36]	; 0x24
 800bc34:	f89a 3000 	ldrb.w	r3, [sl]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f000 80a2 	beq.w	800bd82 <_vfiprintf_r+0x20e>
 800bc3e:	2300      	movs	r3, #0
 800bc40:	f04f 32ff 	mov.w	r2, #4294967295
 800bc44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc48:	f10a 0a01 	add.w	sl, sl, #1
 800bc4c:	9304      	str	r3, [sp, #16]
 800bc4e:	9307      	str	r3, [sp, #28]
 800bc50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc54:	931a      	str	r3, [sp, #104]	; 0x68
 800bc56:	4654      	mov	r4, sl
 800bc58:	2205      	movs	r2, #5
 800bc5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc5e:	4858      	ldr	r0, [pc, #352]	; (800bdc0 <_vfiprintf_r+0x24c>)
 800bc60:	f7f4 fad6 	bl	8000210 <memchr>
 800bc64:	9a04      	ldr	r2, [sp, #16]
 800bc66:	b9d8      	cbnz	r0, 800bca0 <_vfiprintf_r+0x12c>
 800bc68:	06d1      	lsls	r1, r2, #27
 800bc6a:	bf44      	itt	mi
 800bc6c:	2320      	movmi	r3, #32
 800bc6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc72:	0713      	lsls	r3, r2, #28
 800bc74:	bf44      	itt	mi
 800bc76:	232b      	movmi	r3, #43	; 0x2b
 800bc78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc7c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc80:	2b2a      	cmp	r3, #42	; 0x2a
 800bc82:	d015      	beq.n	800bcb0 <_vfiprintf_r+0x13c>
 800bc84:	9a07      	ldr	r2, [sp, #28]
 800bc86:	4654      	mov	r4, sl
 800bc88:	2000      	movs	r0, #0
 800bc8a:	f04f 0c0a 	mov.w	ip, #10
 800bc8e:	4621      	mov	r1, r4
 800bc90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc94:	3b30      	subs	r3, #48	; 0x30
 800bc96:	2b09      	cmp	r3, #9
 800bc98:	d94e      	bls.n	800bd38 <_vfiprintf_r+0x1c4>
 800bc9a:	b1b0      	cbz	r0, 800bcca <_vfiprintf_r+0x156>
 800bc9c:	9207      	str	r2, [sp, #28]
 800bc9e:	e014      	b.n	800bcca <_vfiprintf_r+0x156>
 800bca0:	eba0 0308 	sub.w	r3, r0, r8
 800bca4:	fa09 f303 	lsl.w	r3, r9, r3
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	9304      	str	r3, [sp, #16]
 800bcac:	46a2      	mov	sl, r4
 800bcae:	e7d2      	b.n	800bc56 <_vfiprintf_r+0xe2>
 800bcb0:	9b03      	ldr	r3, [sp, #12]
 800bcb2:	1d19      	adds	r1, r3, #4
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	9103      	str	r1, [sp, #12]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	bfbb      	ittet	lt
 800bcbc:	425b      	neglt	r3, r3
 800bcbe:	f042 0202 	orrlt.w	r2, r2, #2
 800bcc2:	9307      	strge	r3, [sp, #28]
 800bcc4:	9307      	strlt	r3, [sp, #28]
 800bcc6:	bfb8      	it	lt
 800bcc8:	9204      	strlt	r2, [sp, #16]
 800bcca:	7823      	ldrb	r3, [r4, #0]
 800bccc:	2b2e      	cmp	r3, #46	; 0x2e
 800bcce:	d10c      	bne.n	800bcea <_vfiprintf_r+0x176>
 800bcd0:	7863      	ldrb	r3, [r4, #1]
 800bcd2:	2b2a      	cmp	r3, #42	; 0x2a
 800bcd4:	d135      	bne.n	800bd42 <_vfiprintf_r+0x1ce>
 800bcd6:	9b03      	ldr	r3, [sp, #12]
 800bcd8:	1d1a      	adds	r2, r3, #4
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	9203      	str	r2, [sp, #12]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	bfb8      	it	lt
 800bce2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bce6:	3402      	adds	r4, #2
 800bce8:	9305      	str	r3, [sp, #20]
 800bcea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bdd0 <_vfiprintf_r+0x25c>
 800bcee:	7821      	ldrb	r1, [r4, #0]
 800bcf0:	2203      	movs	r2, #3
 800bcf2:	4650      	mov	r0, sl
 800bcf4:	f7f4 fa8c 	bl	8000210 <memchr>
 800bcf8:	b140      	cbz	r0, 800bd0c <_vfiprintf_r+0x198>
 800bcfa:	2340      	movs	r3, #64	; 0x40
 800bcfc:	eba0 000a 	sub.w	r0, r0, sl
 800bd00:	fa03 f000 	lsl.w	r0, r3, r0
 800bd04:	9b04      	ldr	r3, [sp, #16]
 800bd06:	4303      	orrs	r3, r0
 800bd08:	3401      	adds	r4, #1
 800bd0a:	9304      	str	r3, [sp, #16]
 800bd0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd10:	482c      	ldr	r0, [pc, #176]	; (800bdc4 <_vfiprintf_r+0x250>)
 800bd12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd16:	2206      	movs	r2, #6
 800bd18:	f7f4 fa7a 	bl	8000210 <memchr>
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	d03f      	beq.n	800bda0 <_vfiprintf_r+0x22c>
 800bd20:	4b29      	ldr	r3, [pc, #164]	; (800bdc8 <_vfiprintf_r+0x254>)
 800bd22:	bb1b      	cbnz	r3, 800bd6c <_vfiprintf_r+0x1f8>
 800bd24:	9b03      	ldr	r3, [sp, #12]
 800bd26:	3307      	adds	r3, #7
 800bd28:	f023 0307 	bic.w	r3, r3, #7
 800bd2c:	3308      	adds	r3, #8
 800bd2e:	9303      	str	r3, [sp, #12]
 800bd30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd32:	443b      	add	r3, r7
 800bd34:	9309      	str	r3, [sp, #36]	; 0x24
 800bd36:	e767      	b.n	800bc08 <_vfiprintf_r+0x94>
 800bd38:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd3c:	460c      	mov	r4, r1
 800bd3e:	2001      	movs	r0, #1
 800bd40:	e7a5      	b.n	800bc8e <_vfiprintf_r+0x11a>
 800bd42:	2300      	movs	r3, #0
 800bd44:	3401      	adds	r4, #1
 800bd46:	9305      	str	r3, [sp, #20]
 800bd48:	4619      	mov	r1, r3
 800bd4a:	f04f 0c0a 	mov.w	ip, #10
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd54:	3a30      	subs	r2, #48	; 0x30
 800bd56:	2a09      	cmp	r2, #9
 800bd58:	d903      	bls.n	800bd62 <_vfiprintf_r+0x1ee>
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d0c5      	beq.n	800bcea <_vfiprintf_r+0x176>
 800bd5e:	9105      	str	r1, [sp, #20]
 800bd60:	e7c3      	b.n	800bcea <_vfiprintf_r+0x176>
 800bd62:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd66:	4604      	mov	r4, r0
 800bd68:	2301      	movs	r3, #1
 800bd6a:	e7f0      	b.n	800bd4e <_vfiprintf_r+0x1da>
 800bd6c:	ab03      	add	r3, sp, #12
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	462a      	mov	r2, r5
 800bd72:	4b16      	ldr	r3, [pc, #88]	; (800bdcc <_vfiprintf_r+0x258>)
 800bd74:	a904      	add	r1, sp, #16
 800bd76:	4630      	mov	r0, r6
 800bd78:	f3af 8000 	nop.w
 800bd7c:	4607      	mov	r7, r0
 800bd7e:	1c78      	adds	r0, r7, #1
 800bd80:	d1d6      	bne.n	800bd30 <_vfiprintf_r+0x1bc>
 800bd82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd84:	07d9      	lsls	r1, r3, #31
 800bd86:	d405      	bmi.n	800bd94 <_vfiprintf_r+0x220>
 800bd88:	89ab      	ldrh	r3, [r5, #12]
 800bd8a:	059a      	lsls	r2, r3, #22
 800bd8c:	d402      	bmi.n	800bd94 <_vfiprintf_r+0x220>
 800bd8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd90:	f000 fd3e 	bl	800c810 <__retarget_lock_release_recursive>
 800bd94:	89ab      	ldrh	r3, [r5, #12]
 800bd96:	065b      	lsls	r3, r3, #25
 800bd98:	f53f af12 	bmi.w	800bbc0 <_vfiprintf_r+0x4c>
 800bd9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd9e:	e711      	b.n	800bbc4 <_vfiprintf_r+0x50>
 800bda0:	ab03      	add	r3, sp, #12
 800bda2:	9300      	str	r3, [sp, #0]
 800bda4:	462a      	mov	r2, r5
 800bda6:	4b09      	ldr	r3, [pc, #36]	; (800bdcc <_vfiprintf_r+0x258>)
 800bda8:	a904      	add	r1, sp, #16
 800bdaa:	4630      	mov	r0, r6
 800bdac:	f000 f880 	bl	800beb0 <_printf_i>
 800bdb0:	e7e4      	b.n	800bd7c <_vfiprintf_r+0x208>
 800bdb2:	bf00      	nop
 800bdb4:	0800f468 	.word	0x0800f468
 800bdb8:	0800f488 	.word	0x0800f488
 800bdbc:	0800f448 	.word	0x0800f448
 800bdc0:	0800f410 	.word	0x0800f410
 800bdc4:	0800f41a 	.word	0x0800f41a
 800bdc8:	00000000 	.word	0x00000000
 800bdcc:	0800bb4f 	.word	0x0800bb4f
 800bdd0:	0800f416 	.word	0x0800f416

0800bdd4 <_printf_common>:
 800bdd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdd8:	4616      	mov	r6, r2
 800bdda:	4699      	mov	r9, r3
 800bddc:	688a      	ldr	r2, [r1, #8]
 800bdde:	690b      	ldr	r3, [r1, #16]
 800bde0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bde4:	4293      	cmp	r3, r2
 800bde6:	bfb8      	it	lt
 800bde8:	4613      	movlt	r3, r2
 800bdea:	6033      	str	r3, [r6, #0]
 800bdec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bdf0:	4607      	mov	r7, r0
 800bdf2:	460c      	mov	r4, r1
 800bdf4:	b10a      	cbz	r2, 800bdfa <_printf_common+0x26>
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	6033      	str	r3, [r6, #0]
 800bdfa:	6823      	ldr	r3, [r4, #0]
 800bdfc:	0699      	lsls	r1, r3, #26
 800bdfe:	bf42      	ittt	mi
 800be00:	6833      	ldrmi	r3, [r6, #0]
 800be02:	3302      	addmi	r3, #2
 800be04:	6033      	strmi	r3, [r6, #0]
 800be06:	6825      	ldr	r5, [r4, #0]
 800be08:	f015 0506 	ands.w	r5, r5, #6
 800be0c:	d106      	bne.n	800be1c <_printf_common+0x48>
 800be0e:	f104 0a19 	add.w	sl, r4, #25
 800be12:	68e3      	ldr	r3, [r4, #12]
 800be14:	6832      	ldr	r2, [r6, #0]
 800be16:	1a9b      	subs	r3, r3, r2
 800be18:	42ab      	cmp	r3, r5
 800be1a:	dc26      	bgt.n	800be6a <_printf_common+0x96>
 800be1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be20:	1e13      	subs	r3, r2, #0
 800be22:	6822      	ldr	r2, [r4, #0]
 800be24:	bf18      	it	ne
 800be26:	2301      	movne	r3, #1
 800be28:	0692      	lsls	r2, r2, #26
 800be2a:	d42b      	bmi.n	800be84 <_printf_common+0xb0>
 800be2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be30:	4649      	mov	r1, r9
 800be32:	4638      	mov	r0, r7
 800be34:	47c0      	blx	r8
 800be36:	3001      	adds	r0, #1
 800be38:	d01e      	beq.n	800be78 <_printf_common+0xa4>
 800be3a:	6823      	ldr	r3, [r4, #0]
 800be3c:	68e5      	ldr	r5, [r4, #12]
 800be3e:	6832      	ldr	r2, [r6, #0]
 800be40:	f003 0306 	and.w	r3, r3, #6
 800be44:	2b04      	cmp	r3, #4
 800be46:	bf08      	it	eq
 800be48:	1aad      	subeq	r5, r5, r2
 800be4a:	68a3      	ldr	r3, [r4, #8]
 800be4c:	6922      	ldr	r2, [r4, #16]
 800be4e:	bf0c      	ite	eq
 800be50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be54:	2500      	movne	r5, #0
 800be56:	4293      	cmp	r3, r2
 800be58:	bfc4      	itt	gt
 800be5a:	1a9b      	subgt	r3, r3, r2
 800be5c:	18ed      	addgt	r5, r5, r3
 800be5e:	2600      	movs	r6, #0
 800be60:	341a      	adds	r4, #26
 800be62:	42b5      	cmp	r5, r6
 800be64:	d11a      	bne.n	800be9c <_printf_common+0xc8>
 800be66:	2000      	movs	r0, #0
 800be68:	e008      	b.n	800be7c <_printf_common+0xa8>
 800be6a:	2301      	movs	r3, #1
 800be6c:	4652      	mov	r2, sl
 800be6e:	4649      	mov	r1, r9
 800be70:	4638      	mov	r0, r7
 800be72:	47c0      	blx	r8
 800be74:	3001      	adds	r0, #1
 800be76:	d103      	bne.n	800be80 <_printf_common+0xac>
 800be78:	f04f 30ff 	mov.w	r0, #4294967295
 800be7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be80:	3501      	adds	r5, #1
 800be82:	e7c6      	b.n	800be12 <_printf_common+0x3e>
 800be84:	18e1      	adds	r1, r4, r3
 800be86:	1c5a      	adds	r2, r3, #1
 800be88:	2030      	movs	r0, #48	; 0x30
 800be8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be8e:	4422      	add	r2, r4
 800be90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be98:	3302      	adds	r3, #2
 800be9a:	e7c7      	b.n	800be2c <_printf_common+0x58>
 800be9c:	2301      	movs	r3, #1
 800be9e:	4622      	mov	r2, r4
 800bea0:	4649      	mov	r1, r9
 800bea2:	4638      	mov	r0, r7
 800bea4:	47c0      	blx	r8
 800bea6:	3001      	adds	r0, #1
 800bea8:	d0e6      	beq.n	800be78 <_printf_common+0xa4>
 800beaa:	3601      	adds	r6, #1
 800beac:	e7d9      	b.n	800be62 <_printf_common+0x8e>
	...

0800beb0 <_printf_i>:
 800beb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800beb4:	460c      	mov	r4, r1
 800beb6:	4691      	mov	r9, r2
 800beb8:	7e27      	ldrb	r7, [r4, #24]
 800beba:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bebc:	2f78      	cmp	r7, #120	; 0x78
 800bebe:	4680      	mov	r8, r0
 800bec0:	469a      	mov	sl, r3
 800bec2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bec6:	d807      	bhi.n	800bed8 <_printf_i+0x28>
 800bec8:	2f62      	cmp	r7, #98	; 0x62
 800beca:	d80a      	bhi.n	800bee2 <_printf_i+0x32>
 800becc:	2f00      	cmp	r7, #0
 800bece:	f000 80d8 	beq.w	800c082 <_printf_i+0x1d2>
 800bed2:	2f58      	cmp	r7, #88	; 0x58
 800bed4:	f000 80a3 	beq.w	800c01e <_printf_i+0x16e>
 800bed8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bedc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bee0:	e03a      	b.n	800bf58 <_printf_i+0xa8>
 800bee2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bee6:	2b15      	cmp	r3, #21
 800bee8:	d8f6      	bhi.n	800bed8 <_printf_i+0x28>
 800beea:	a001      	add	r0, pc, #4	; (adr r0, 800bef0 <_printf_i+0x40>)
 800beec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bef0:	0800bf49 	.word	0x0800bf49
 800bef4:	0800bf5d 	.word	0x0800bf5d
 800bef8:	0800bed9 	.word	0x0800bed9
 800befc:	0800bed9 	.word	0x0800bed9
 800bf00:	0800bed9 	.word	0x0800bed9
 800bf04:	0800bed9 	.word	0x0800bed9
 800bf08:	0800bf5d 	.word	0x0800bf5d
 800bf0c:	0800bed9 	.word	0x0800bed9
 800bf10:	0800bed9 	.word	0x0800bed9
 800bf14:	0800bed9 	.word	0x0800bed9
 800bf18:	0800bed9 	.word	0x0800bed9
 800bf1c:	0800c069 	.word	0x0800c069
 800bf20:	0800bf8d 	.word	0x0800bf8d
 800bf24:	0800c04b 	.word	0x0800c04b
 800bf28:	0800bed9 	.word	0x0800bed9
 800bf2c:	0800bed9 	.word	0x0800bed9
 800bf30:	0800c08b 	.word	0x0800c08b
 800bf34:	0800bed9 	.word	0x0800bed9
 800bf38:	0800bf8d 	.word	0x0800bf8d
 800bf3c:	0800bed9 	.word	0x0800bed9
 800bf40:	0800bed9 	.word	0x0800bed9
 800bf44:	0800c053 	.word	0x0800c053
 800bf48:	680b      	ldr	r3, [r1, #0]
 800bf4a:	1d1a      	adds	r2, r3, #4
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	600a      	str	r2, [r1, #0]
 800bf50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bf54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf58:	2301      	movs	r3, #1
 800bf5a:	e0a3      	b.n	800c0a4 <_printf_i+0x1f4>
 800bf5c:	6825      	ldr	r5, [r4, #0]
 800bf5e:	6808      	ldr	r0, [r1, #0]
 800bf60:	062e      	lsls	r6, r5, #24
 800bf62:	f100 0304 	add.w	r3, r0, #4
 800bf66:	d50a      	bpl.n	800bf7e <_printf_i+0xce>
 800bf68:	6805      	ldr	r5, [r0, #0]
 800bf6a:	600b      	str	r3, [r1, #0]
 800bf6c:	2d00      	cmp	r5, #0
 800bf6e:	da03      	bge.n	800bf78 <_printf_i+0xc8>
 800bf70:	232d      	movs	r3, #45	; 0x2d
 800bf72:	426d      	negs	r5, r5
 800bf74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf78:	485e      	ldr	r0, [pc, #376]	; (800c0f4 <_printf_i+0x244>)
 800bf7a:	230a      	movs	r3, #10
 800bf7c:	e019      	b.n	800bfb2 <_printf_i+0x102>
 800bf7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bf82:	6805      	ldr	r5, [r0, #0]
 800bf84:	600b      	str	r3, [r1, #0]
 800bf86:	bf18      	it	ne
 800bf88:	b22d      	sxthne	r5, r5
 800bf8a:	e7ef      	b.n	800bf6c <_printf_i+0xbc>
 800bf8c:	680b      	ldr	r3, [r1, #0]
 800bf8e:	6825      	ldr	r5, [r4, #0]
 800bf90:	1d18      	adds	r0, r3, #4
 800bf92:	6008      	str	r0, [r1, #0]
 800bf94:	0628      	lsls	r0, r5, #24
 800bf96:	d501      	bpl.n	800bf9c <_printf_i+0xec>
 800bf98:	681d      	ldr	r5, [r3, #0]
 800bf9a:	e002      	b.n	800bfa2 <_printf_i+0xf2>
 800bf9c:	0669      	lsls	r1, r5, #25
 800bf9e:	d5fb      	bpl.n	800bf98 <_printf_i+0xe8>
 800bfa0:	881d      	ldrh	r5, [r3, #0]
 800bfa2:	4854      	ldr	r0, [pc, #336]	; (800c0f4 <_printf_i+0x244>)
 800bfa4:	2f6f      	cmp	r7, #111	; 0x6f
 800bfa6:	bf0c      	ite	eq
 800bfa8:	2308      	moveq	r3, #8
 800bfaa:	230a      	movne	r3, #10
 800bfac:	2100      	movs	r1, #0
 800bfae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bfb2:	6866      	ldr	r6, [r4, #4]
 800bfb4:	60a6      	str	r6, [r4, #8]
 800bfb6:	2e00      	cmp	r6, #0
 800bfb8:	bfa2      	ittt	ge
 800bfba:	6821      	ldrge	r1, [r4, #0]
 800bfbc:	f021 0104 	bicge.w	r1, r1, #4
 800bfc0:	6021      	strge	r1, [r4, #0]
 800bfc2:	b90d      	cbnz	r5, 800bfc8 <_printf_i+0x118>
 800bfc4:	2e00      	cmp	r6, #0
 800bfc6:	d04d      	beq.n	800c064 <_printf_i+0x1b4>
 800bfc8:	4616      	mov	r6, r2
 800bfca:	fbb5 f1f3 	udiv	r1, r5, r3
 800bfce:	fb03 5711 	mls	r7, r3, r1, r5
 800bfd2:	5dc7      	ldrb	r7, [r0, r7]
 800bfd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bfd8:	462f      	mov	r7, r5
 800bfda:	42bb      	cmp	r3, r7
 800bfdc:	460d      	mov	r5, r1
 800bfde:	d9f4      	bls.n	800bfca <_printf_i+0x11a>
 800bfe0:	2b08      	cmp	r3, #8
 800bfe2:	d10b      	bne.n	800bffc <_printf_i+0x14c>
 800bfe4:	6823      	ldr	r3, [r4, #0]
 800bfe6:	07df      	lsls	r7, r3, #31
 800bfe8:	d508      	bpl.n	800bffc <_printf_i+0x14c>
 800bfea:	6923      	ldr	r3, [r4, #16]
 800bfec:	6861      	ldr	r1, [r4, #4]
 800bfee:	4299      	cmp	r1, r3
 800bff0:	bfde      	ittt	le
 800bff2:	2330      	movle	r3, #48	; 0x30
 800bff4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bff8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bffc:	1b92      	subs	r2, r2, r6
 800bffe:	6122      	str	r2, [r4, #16]
 800c000:	f8cd a000 	str.w	sl, [sp]
 800c004:	464b      	mov	r3, r9
 800c006:	aa03      	add	r2, sp, #12
 800c008:	4621      	mov	r1, r4
 800c00a:	4640      	mov	r0, r8
 800c00c:	f7ff fee2 	bl	800bdd4 <_printf_common>
 800c010:	3001      	adds	r0, #1
 800c012:	d14c      	bne.n	800c0ae <_printf_i+0x1fe>
 800c014:	f04f 30ff 	mov.w	r0, #4294967295
 800c018:	b004      	add	sp, #16
 800c01a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c01e:	4835      	ldr	r0, [pc, #212]	; (800c0f4 <_printf_i+0x244>)
 800c020:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c024:	6823      	ldr	r3, [r4, #0]
 800c026:	680e      	ldr	r6, [r1, #0]
 800c028:	061f      	lsls	r7, r3, #24
 800c02a:	f856 5b04 	ldr.w	r5, [r6], #4
 800c02e:	600e      	str	r6, [r1, #0]
 800c030:	d514      	bpl.n	800c05c <_printf_i+0x1ac>
 800c032:	07d9      	lsls	r1, r3, #31
 800c034:	bf44      	itt	mi
 800c036:	f043 0320 	orrmi.w	r3, r3, #32
 800c03a:	6023      	strmi	r3, [r4, #0]
 800c03c:	b91d      	cbnz	r5, 800c046 <_printf_i+0x196>
 800c03e:	6823      	ldr	r3, [r4, #0]
 800c040:	f023 0320 	bic.w	r3, r3, #32
 800c044:	6023      	str	r3, [r4, #0]
 800c046:	2310      	movs	r3, #16
 800c048:	e7b0      	b.n	800bfac <_printf_i+0xfc>
 800c04a:	6823      	ldr	r3, [r4, #0]
 800c04c:	f043 0320 	orr.w	r3, r3, #32
 800c050:	6023      	str	r3, [r4, #0]
 800c052:	2378      	movs	r3, #120	; 0x78
 800c054:	4828      	ldr	r0, [pc, #160]	; (800c0f8 <_printf_i+0x248>)
 800c056:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c05a:	e7e3      	b.n	800c024 <_printf_i+0x174>
 800c05c:	065e      	lsls	r6, r3, #25
 800c05e:	bf48      	it	mi
 800c060:	b2ad      	uxthmi	r5, r5
 800c062:	e7e6      	b.n	800c032 <_printf_i+0x182>
 800c064:	4616      	mov	r6, r2
 800c066:	e7bb      	b.n	800bfe0 <_printf_i+0x130>
 800c068:	680b      	ldr	r3, [r1, #0]
 800c06a:	6826      	ldr	r6, [r4, #0]
 800c06c:	6960      	ldr	r0, [r4, #20]
 800c06e:	1d1d      	adds	r5, r3, #4
 800c070:	600d      	str	r5, [r1, #0]
 800c072:	0635      	lsls	r5, r6, #24
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	d501      	bpl.n	800c07c <_printf_i+0x1cc>
 800c078:	6018      	str	r0, [r3, #0]
 800c07a:	e002      	b.n	800c082 <_printf_i+0x1d2>
 800c07c:	0671      	lsls	r1, r6, #25
 800c07e:	d5fb      	bpl.n	800c078 <_printf_i+0x1c8>
 800c080:	8018      	strh	r0, [r3, #0]
 800c082:	2300      	movs	r3, #0
 800c084:	6123      	str	r3, [r4, #16]
 800c086:	4616      	mov	r6, r2
 800c088:	e7ba      	b.n	800c000 <_printf_i+0x150>
 800c08a:	680b      	ldr	r3, [r1, #0]
 800c08c:	1d1a      	adds	r2, r3, #4
 800c08e:	600a      	str	r2, [r1, #0]
 800c090:	681e      	ldr	r6, [r3, #0]
 800c092:	6862      	ldr	r2, [r4, #4]
 800c094:	2100      	movs	r1, #0
 800c096:	4630      	mov	r0, r6
 800c098:	f7f4 f8ba 	bl	8000210 <memchr>
 800c09c:	b108      	cbz	r0, 800c0a2 <_printf_i+0x1f2>
 800c09e:	1b80      	subs	r0, r0, r6
 800c0a0:	6060      	str	r0, [r4, #4]
 800c0a2:	6863      	ldr	r3, [r4, #4]
 800c0a4:	6123      	str	r3, [r4, #16]
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0ac:	e7a8      	b.n	800c000 <_printf_i+0x150>
 800c0ae:	6923      	ldr	r3, [r4, #16]
 800c0b0:	4632      	mov	r2, r6
 800c0b2:	4649      	mov	r1, r9
 800c0b4:	4640      	mov	r0, r8
 800c0b6:	47d0      	blx	sl
 800c0b8:	3001      	adds	r0, #1
 800c0ba:	d0ab      	beq.n	800c014 <_printf_i+0x164>
 800c0bc:	6823      	ldr	r3, [r4, #0]
 800c0be:	079b      	lsls	r3, r3, #30
 800c0c0:	d413      	bmi.n	800c0ea <_printf_i+0x23a>
 800c0c2:	68e0      	ldr	r0, [r4, #12]
 800c0c4:	9b03      	ldr	r3, [sp, #12]
 800c0c6:	4298      	cmp	r0, r3
 800c0c8:	bfb8      	it	lt
 800c0ca:	4618      	movlt	r0, r3
 800c0cc:	e7a4      	b.n	800c018 <_printf_i+0x168>
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	4632      	mov	r2, r6
 800c0d2:	4649      	mov	r1, r9
 800c0d4:	4640      	mov	r0, r8
 800c0d6:	47d0      	blx	sl
 800c0d8:	3001      	adds	r0, #1
 800c0da:	d09b      	beq.n	800c014 <_printf_i+0x164>
 800c0dc:	3501      	adds	r5, #1
 800c0de:	68e3      	ldr	r3, [r4, #12]
 800c0e0:	9903      	ldr	r1, [sp, #12]
 800c0e2:	1a5b      	subs	r3, r3, r1
 800c0e4:	42ab      	cmp	r3, r5
 800c0e6:	dcf2      	bgt.n	800c0ce <_printf_i+0x21e>
 800c0e8:	e7eb      	b.n	800c0c2 <_printf_i+0x212>
 800c0ea:	2500      	movs	r5, #0
 800c0ec:	f104 0619 	add.w	r6, r4, #25
 800c0f0:	e7f5      	b.n	800c0de <_printf_i+0x22e>
 800c0f2:	bf00      	nop
 800c0f4:	0800f421 	.word	0x0800f421
 800c0f8:	0800f432 	.word	0x0800f432

0800c0fc <_sbrk_r>:
 800c0fc:	b538      	push	{r3, r4, r5, lr}
 800c0fe:	4d06      	ldr	r5, [pc, #24]	; (800c118 <_sbrk_r+0x1c>)
 800c100:	2300      	movs	r3, #0
 800c102:	4604      	mov	r4, r0
 800c104:	4608      	mov	r0, r1
 800c106:	602b      	str	r3, [r5, #0]
 800c108:	f000 fe62 	bl	800cdd0 <_sbrk>
 800c10c:	1c43      	adds	r3, r0, #1
 800c10e:	d102      	bne.n	800c116 <_sbrk_r+0x1a>
 800c110:	682b      	ldr	r3, [r5, #0]
 800c112:	b103      	cbz	r3, 800c116 <_sbrk_r+0x1a>
 800c114:	6023      	str	r3, [r4, #0]
 800c116:	bd38      	pop	{r3, r4, r5, pc}
 800c118:	200015d4 	.word	0x200015d4

0800c11c <_raise_r>:
 800c11c:	291f      	cmp	r1, #31
 800c11e:	b538      	push	{r3, r4, r5, lr}
 800c120:	4604      	mov	r4, r0
 800c122:	460d      	mov	r5, r1
 800c124:	d904      	bls.n	800c130 <_raise_r+0x14>
 800c126:	2316      	movs	r3, #22
 800c128:	6003      	str	r3, [r0, #0]
 800c12a:	f04f 30ff 	mov.w	r0, #4294967295
 800c12e:	bd38      	pop	{r3, r4, r5, pc}
 800c130:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c132:	b112      	cbz	r2, 800c13a <_raise_r+0x1e>
 800c134:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c138:	b94b      	cbnz	r3, 800c14e <_raise_r+0x32>
 800c13a:	4620      	mov	r0, r4
 800c13c:	f000 f830 	bl	800c1a0 <_getpid_r>
 800c140:	462a      	mov	r2, r5
 800c142:	4601      	mov	r1, r0
 800c144:	4620      	mov	r0, r4
 800c146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c14a:	f000 b817 	b.w	800c17c <_kill_r>
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d00a      	beq.n	800c168 <_raise_r+0x4c>
 800c152:	1c59      	adds	r1, r3, #1
 800c154:	d103      	bne.n	800c15e <_raise_r+0x42>
 800c156:	2316      	movs	r3, #22
 800c158:	6003      	str	r3, [r0, #0]
 800c15a:	2001      	movs	r0, #1
 800c15c:	e7e7      	b.n	800c12e <_raise_r+0x12>
 800c15e:	2400      	movs	r4, #0
 800c160:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c164:	4628      	mov	r0, r5
 800c166:	4798      	blx	r3
 800c168:	2000      	movs	r0, #0
 800c16a:	e7e0      	b.n	800c12e <_raise_r+0x12>

0800c16c <raise>:
 800c16c:	4b02      	ldr	r3, [pc, #8]	; (800c178 <raise+0xc>)
 800c16e:	4601      	mov	r1, r0
 800c170:	6818      	ldr	r0, [r3, #0]
 800c172:	f7ff bfd3 	b.w	800c11c <_raise_r>
 800c176:	bf00      	nop
 800c178:	20000040 	.word	0x20000040

0800c17c <_kill_r>:
 800c17c:	b538      	push	{r3, r4, r5, lr}
 800c17e:	4d07      	ldr	r5, [pc, #28]	; (800c19c <_kill_r+0x20>)
 800c180:	2300      	movs	r3, #0
 800c182:	4604      	mov	r4, r0
 800c184:	4608      	mov	r0, r1
 800c186:	4611      	mov	r1, r2
 800c188:	602b      	str	r3, [r5, #0]
 800c18a:	f000 fe09 	bl	800cda0 <_kill>
 800c18e:	1c43      	adds	r3, r0, #1
 800c190:	d102      	bne.n	800c198 <_kill_r+0x1c>
 800c192:	682b      	ldr	r3, [r5, #0]
 800c194:	b103      	cbz	r3, 800c198 <_kill_r+0x1c>
 800c196:	6023      	str	r3, [r4, #0]
 800c198:	bd38      	pop	{r3, r4, r5, pc}
 800c19a:	bf00      	nop
 800c19c:	200015d4 	.word	0x200015d4

0800c1a0 <_getpid_r>:
 800c1a0:	f000 bdee 	b.w	800cd80 <_getpid>

0800c1a4 <_vsniprintf_r>:
 800c1a4:	b530      	push	{r4, r5, lr}
 800c1a6:	1e14      	subs	r4, r2, #0
 800c1a8:	4605      	mov	r5, r0
 800c1aa:	b09b      	sub	sp, #108	; 0x6c
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	da05      	bge.n	800c1bc <_vsniprintf_r+0x18>
 800c1b0:	238b      	movs	r3, #139	; 0x8b
 800c1b2:	602b      	str	r3, [r5, #0]
 800c1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b8:	b01b      	add	sp, #108	; 0x6c
 800c1ba:	bd30      	pop	{r4, r5, pc}
 800c1bc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c1c0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c1c4:	bf14      	ite	ne
 800c1c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c1ca:	4623      	moveq	r3, r4
 800c1cc:	9302      	str	r3, [sp, #8]
 800c1ce:	9305      	str	r3, [sp, #20]
 800c1d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c1d4:	9100      	str	r1, [sp, #0]
 800c1d6:	9104      	str	r1, [sp, #16]
 800c1d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c1dc:	4602      	mov	r2, r0
 800c1de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c1e0:	4669      	mov	r1, sp
 800c1e2:	4628      	mov	r0, r5
 800c1e4:	f000 fc08 	bl	800c9f8 <_svfiprintf_r>
 800c1e8:	1c43      	adds	r3, r0, #1
 800c1ea:	bfbc      	itt	lt
 800c1ec:	238b      	movlt	r3, #139	; 0x8b
 800c1ee:	602b      	strlt	r3, [r5, #0]
 800c1f0:	2c00      	cmp	r4, #0
 800c1f2:	d0e1      	beq.n	800c1b8 <_vsniprintf_r+0x14>
 800c1f4:	9b00      	ldr	r3, [sp, #0]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	701a      	strb	r2, [r3, #0]
 800c1fa:	e7dd      	b.n	800c1b8 <_vsniprintf_r+0x14>

0800c1fc <vsniprintf>:
 800c1fc:	b507      	push	{r0, r1, r2, lr}
 800c1fe:	9300      	str	r3, [sp, #0]
 800c200:	4613      	mov	r3, r2
 800c202:	460a      	mov	r2, r1
 800c204:	4601      	mov	r1, r0
 800c206:	4803      	ldr	r0, [pc, #12]	; (800c214 <vsniprintf+0x18>)
 800c208:	6800      	ldr	r0, [r0, #0]
 800c20a:	f7ff ffcb 	bl	800c1a4 <_vsniprintf_r>
 800c20e:	b003      	add	sp, #12
 800c210:	f85d fb04 	ldr.w	pc, [sp], #4
 800c214:	20000040 	.word	0x20000040

0800c218 <_vsiprintf_r>:
 800c218:	b500      	push	{lr}
 800c21a:	b09b      	sub	sp, #108	; 0x6c
 800c21c:	9100      	str	r1, [sp, #0]
 800c21e:	9104      	str	r1, [sp, #16]
 800c220:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c224:	9105      	str	r1, [sp, #20]
 800c226:	9102      	str	r1, [sp, #8]
 800c228:	4905      	ldr	r1, [pc, #20]	; (800c240 <_vsiprintf_r+0x28>)
 800c22a:	9103      	str	r1, [sp, #12]
 800c22c:	4669      	mov	r1, sp
 800c22e:	f000 fbe3 	bl	800c9f8 <_svfiprintf_r>
 800c232:	9b00      	ldr	r3, [sp, #0]
 800c234:	2200      	movs	r2, #0
 800c236:	701a      	strb	r2, [r3, #0]
 800c238:	b01b      	add	sp, #108	; 0x6c
 800c23a:	f85d fb04 	ldr.w	pc, [sp], #4
 800c23e:	bf00      	nop
 800c240:	ffff0208 	.word	0xffff0208

0800c244 <vsiprintf>:
 800c244:	4613      	mov	r3, r2
 800c246:	460a      	mov	r2, r1
 800c248:	4601      	mov	r1, r0
 800c24a:	4802      	ldr	r0, [pc, #8]	; (800c254 <vsiprintf+0x10>)
 800c24c:	6800      	ldr	r0, [r0, #0]
 800c24e:	f7ff bfe3 	b.w	800c218 <_vsiprintf_r>
 800c252:	bf00      	nop
 800c254:	20000040 	.word	0x20000040

0800c258 <__swbuf_r>:
 800c258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c25a:	460e      	mov	r6, r1
 800c25c:	4614      	mov	r4, r2
 800c25e:	4605      	mov	r5, r0
 800c260:	b118      	cbz	r0, 800c26a <__swbuf_r+0x12>
 800c262:	6983      	ldr	r3, [r0, #24]
 800c264:	b90b      	cbnz	r3, 800c26a <__swbuf_r+0x12>
 800c266:	f000 fa33 	bl	800c6d0 <__sinit>
 800c26a:	4b21      	ldr	r3, [pc, #132]	; (800c2f0 <__swbuf_r+0x98>)
 800c26c:	429c      	cmp	r4, r3
 800c26e:	d12b      	bne.n	800c2c8 <__swbuf_r+0x70>
 800c270:	686c      	ldr	r4, [r5, #4]
 800c272:	69a3      	ldr	r3, [r4, #24]
 800c274:	60a3      	str	r3, [r4, #8]
 800c276:	89a3      	ldrh	r3, [r4, #12]
 800c278:	071a      	lsls	r2, r3, #28
 800c27a:	d52f      	bpl.n	800c2dc <__swbuf_r+0x84>
 800c27c:	6923      	ldr	r3, [r4, #16]
 800c27e:	b36b      	cbz	r3, 800c2dc <__swbuf_r+0x84>
 800c280:	6923      	ldr	r3, [r4, #16]
 800c282:	6820      	ldr	r0, [r4, #0]
 800c284:	1ac0      	subs	r0, r0, r3
 800c286:	6963      	ldr	r3, [r4, #20]
 800c288:	b2f6      	uxtb	r6, r6
 800c28a:	4283      	cmp	r3, r0
 800c28c:	4637      	mov	r7, r6
 800c28e:	dc04      	bgt.n	800c29a <__swbuf_r+0x42>
 800c290:	4621      	mov	r1, r4
 800c292:	4628      	mov	r0, r5
 800c294:	f000 f988 	bl	800c5a8 <_fflush_r>
 800c298:	bb30      	cbnz	r0, 800c2e8 <__swbuf_r+0x90>
 800c29a:	68a3      	ldr	r3, [r4, #8]
 800c29c:	3b01      	subs	r3, #1
 800c29e:	60a3      	str	r3, [r4, #8]
 800c2a0:	6823      	ldr	r3, [r4, #0]
 800c2a2:	1c5a      	adds	r2, r3, #1
 800c2a4:	6022      	str	r2, [r4, #0]
 800c2a6:	701e      	strb	r6, [r3, #0]
 800c2a8:	6963      	ldr	r3, [r4, #20]
 800c2aa:	3001      	adds	r0, #1
 800c2ac:	4283      	cmp	r3, r0
 800c2ae:	d004      	beq.n	800c2ba <__swbuf_r+0x62>
 800c2b0:	89a3      	ldrh	r3, [r4, #12]
 800c2b2:	07db      	lsls	r3, r3, #31
 800c2b4:	d506      	bpl.n	800c2c4 <__swbuf_r+0x6c>
 800c2b6:	2e0a      	cmp	r6, #10
 800c2b8:	d104      	bne.n	800c2c4 <__swbuf_r+0x6c>
 800c2ba:	4621      	mov	r1, r4
 800c2bc:	4628      	mov	r0, r5
 800c2be:	f000 f973 	bl	800c5a8 <_fflush_r>
 800c2c2:	b988      	cbnz	r0, 800c2e8 <__swbuf_r+0x90>
 800c2c4:	4638      	mov	r0, r7
 800c2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2c8:	4b0a      	ldr	r3, [pc, #40]	; (800c2f4 <__swbuf_r+0x9c>)
 800c2ca:	429c      	cmp	r4, r3
 800c2cc:	d101      	bne.n	800c2d2 <__swbuf_r+0x7a>
 800c2ce:	68ac      	ldr	r4, [r5, #8]
 800c2d0:	e7cf      	b.n	800c272 <__swbuf_r+0x1a>
 800c2d2:	4b09      	ldr	r3, [pc, #36]	; (800c2f8 <__swbuf_r+0xa0>)
 800c2d4:	429c      	cmp	r4, r3
 800c2d6:	bf08      	it	eq
 800c2d8:	68ec      	ldreq	r4, [r5, #12]
 800c2da:	e7ca      	b.n	800c272 <__swbuf_r+0x1a>
 800c2dc:	4621      	mov	r1, r4
 800c2de:	4628      	mov	r0, r5
 800c2e0:	f000 f80c 	bl	800c2fc <__swsetup_r>
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	d0cb      	beq.n	800c280 <__swbuf_r+0x28>
 800c2e8:	f04f 37ff 	mov.w	r7, #4294967295
 800c2ec:	e7ea      	b.n	800c2c4 <__swbuf_r+0x6c>
 800c2ee:	bf00      	nop
 800c2f0:	0800f468 	.word	0x0800f468
 800c2f4:	0800f488 	.word	0x0800f488
 800c2f8:	0800f448 	.word	0x0800f448

0800c2fc <__swsetup_r>:
 800c2fc:	4b32      	ldr	r3, [pc, #200]	; (800c3c8 <__swsetup_r+0xcc>)
 800c2fe:	b570      	push	{r4, r5, r6, lr}
 800c300:	681d      	ldr	r5, [r3, #0]
 800c302:	4606      	mov	r6, r0
 800c304:	460c      	mov	r4, r1
 800c306:	b125      	cbz	r5, 800c312 <__swsetup_r+0x16>
 800c308:	69ab      	ldr	r3, [r5, #24]
 800c30a:	b913      	cbnz	r3, 800c312 <__swsetup_r+0x16>
 800c30c:	4628      	mov	r0, r5
 800c30e:	f000 f9df 	bl	800c6d0 <__sinit>
 800c312:	4b2e      	ldr	r3, [pc, #184]	; (800c3cc <__swsetup_r+0xd0>)
 800c314:	429c      	cmp	r4, r3
 800c316:	d10f      	bne.n	800c338 <__swsetup_r+0x3c>
 800c318:	686c      	ldr	r4, [r5, #4]
 800c31a:	89a3      	ldrh	r3, [r4, #12]
 800c31c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c320:	0719      	lsls	r1, r3, #28
 800c322:	d42c      	bmi.n	800c37e <__swsetup_r+0x82>
 800c324:	06dd      	lsls	r5, r3, #27
 800c326:	d411      	bmi.n	800c34c <__swsetup_r+0x50>
 800c328:	2309      	movs	r3, #9
 800c32a:	6033      	str	r3, [r6, #0]
 800c32c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c330:	81a3      	strh	r3, [r4, #12]
 800c332:	f04f 30ff 	mov.w	r0, #4294967295
 800c336:	e03e      	b.n	800c3b6 <__swsetup_r+0xba>
 800c338:	4b25      	ldr	r3, [pc, #148]	; (800c3d0 <__swsetup_r+0xd4>)
 800c33a:	429c      	cmp	r4, r3
 800c33c:	d101      	bne.n	800c342 <__swsetup_r+0x46>
 800c33e:	68ac      	ldr	r4, [r5, #8]
 800c340:	e7eb      	b.n	800c31a <__swsetup_r+0x1e>
 800c342:	4b24      	ldr	r3, [pc, #144]	; (800c3d4 <__swsetup_r+0xd8>)
 800c344:	429c      	cmp	r4, r3
 800c346:	bf08      	it	eq
 800c348:	68ec      	ldreq	r4, [r5, #12]
 800c34a:	e7e6      	b.n	800c31a <__swsetup_r+0x1e>
 800c34c:	0758      	lsls	r0, r3, #29
 800c34e:	d512      	bpl.n	800c376 <__swsetup_r+0x7a>
 800c350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c352:	b141      	cbz	r1, 800c366 <__swsetup_r+0x6a>
 800c354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c358:	4299      	cmp	r1, r3
 800c35a:	d002      	beq.n	800c362 <__swsetup_r+0x66>
 800c35c:	4630      	mov	r0, r6
 800c35e:	f7ff fb35 	bl	800b9cc <_free_r>
 800c362:	2300      	movs	r3, #0
 800c364:	6363      	str	r3, [r4, #52]	; 0x34
 800c366:	89a3      	ldrh	r3, [r4, #12]
 800c368:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c36c:	81a3      	strh	r3, [r4, #12]
 800c36e:	2300      	movs	r3, #0
 800c370:	6063      	str	r3, [r4, #4]
 800c372:	6923      	ldr	r3, [r4, #16]
 800c374:	6023      	str	r3, [r4, #0]
 800c376:	89a3      	ldrh	r3, [r4, #12]
 800c378:	f043 0308 	orr.w	r3, r3, #8
 800c37c:	81a3      	strh	r3, [r4, #12]
 800c37e:	6923      	ldr	r3, [r4, #16]
 800c380:	b94b      	cbnz	r3, 800c396 <__swsetup_r+0x9a>
 800c382:	89a3      	ldrh	r3, [r4, #12]
 800c384:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c38c:	d003      	beq.n	800c396 <__swsetup_r+0x9a>
 800c38e:	4621      	mov	r1, r4
 800c390:	4630      	mov	r0, r6
 800c392:	f000 fa63 	bl	800c85c <__smakebuf_r>
 800c396:	89a0      	ldrh	r0, [r4, #12]
 800c398:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c39c:	f010 0301 	ands.w	r3, r0, #1
 800c3a0:	d00a      	beq.n	800c3b8 <__swsetup_r+0xbc>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	60a3      	str	r3, [r4, #8]
 800c3a6:	6963      	ldr	r3, [r4, #20]
 800c3a8:	425b      	negs	r3, r3
 800c3aa:	61a3      	str	r3, [r4, #24]
 800c3ac:	6923      	ldr	r3, [r4, #16]
 800c3ae:	b943      	cbnz	r3, 800c3c2 <__swsetup_r+0xc6>
 800c3b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c3b4:	d1ba      	bne.n	800c32c <__swsetup_r+0x30>
 800c3b6:	bd70      	pop	{r4, r5, r6, pc}
 800c3b8:	0781      	lsls	r1, r0, #30
 800c3ba:	bf58      	it	pl
 800c3bc:	6963      	ldrpl	r3, [r4, #20]
 800c3be:	60a3      	str	r3, [r4, #8]
 800c3c0:	e7f4      	b.n	800c3ac <__swsetup_r+0xb0>
 800c3c2:	2000      	movs	r0, #0
 800c3c4:	e7f7      	b.n	800c3b6 <__swsetup_r+0xba>
 800c3c6:	bf00      	nop
 800c3c8:	20000040 	.word	0x20000040
 800c3cc:	0800f468 	.word	0x0800f468
 800c3d0:	0800f488 	.word	0x0800f488
 800c3d4:	0800f448 	.word	0x0800f448

0800c3d8 <__register_exitproc>:
 800c3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3dc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800c498 <__register_exitproc+0xc0>
 800c3e0:	4606      	mov	r6, r0
 800c3e2:	f8d8 0000 	ldr.w	r0, [r8]
 800c3e6:	461f      	mov	r7, r3
 800c3e8:	460d      	mov	r5, r1
 800c3ea:	4691      	mov	r9, r2
 800c3ec:	f000 fa0e 	bl	800c80c <__retarget_lock_acquire_recursive>
 800c3f0:	4b25      	ldr	r3, [pc, #148]	; (800c488 <__register_exitproc+0xb0>)
 800c3f2:	681c      	ldr	r4, [r3, #0]
 800c3f4:	b934      	cbnz	r4, 800c404 <__register_exitproc+0x2c>
 800c3f6:	4c25      	ldr	r4, [pc, #148]	; (800c48c <__register_exitproc+0xb4>)
 800c3f8:	601c      	str	r4, [r3, #0]
 800c3fa:	4b25      	ldr	r3, [pc, #148]	; (800c490 <__register_exitproc+0xb8>)
 800c3fc:	b113      	cbz	r3, 800c404 <__register_exitproc+0x2c>
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800c404:	6863      	ldr	r3, [r4, #4]
 800c406:	2b1f      	cmp	r3, #31
 800c408:	dd07      	ble.n	800c41a <__register_exitproc+0x42>
 800c40a:	f8d8 0000 	ldr.w	r0, [r8]
 800c40e:	f000 f9ff 	bl	800c810 <__retarget_lock_release_recursive>
 800c412:	f04f 30ff 	mov.w	r0, #4294967295
 800c416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c41a:	b34e      	cbz	r6, 800c470 <__register_exitproc+0x98>
 800c41c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800c420:	b988      	cbnz	r0, 800c446 <__register_exitproc+0x6e>
 800c422:	4b1c      	ldr	r3, [pc, #112]	; (800c494 <__register_exitproc+0xbc>)
 800c424:	b923      	cbnz	r3, 800c430 <__register_exitproc+0x58>
 800c426:	f8d8 0000 	ldr.w	r0, [r8]
 800c42a:	f000 f9f0 	bl	800c80e <__retarget_lock_release>
 800c42e:	e7f0      	b.n	800c412 <__register_exitproc+0x3a>
 800c430:	f44f 7084 	mov.w	r0, #264	; 0x108
 800c434:	f7ff fa8a 	bl	800b94c <malloc>
 800c438:	2800      	cmp	r0, #0
 800c43a:	d0f4      	beq.n	800c426 <__register_exitproc+0x4e>
 800c43c:	2300      	movs	r3, #0
 800c43e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800c442:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800c446:	6863      	ldr	r3, [r4, #4]
 800c448:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800c44c:	2201      	movs	r2, #1
 800c44e:	409a      	lsls	r2, r3
 800c450:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800c454:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800c458:	4313      	orrs	r3, r2
 800c45a:	2e02      	cmp	r6, #2
 800c45c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800c460:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 800c464:	bf02      	ittt	eq
 800c466:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800c46a:	431a      	orreq	r2, r3
 800c46c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 800c470:	6863      	ldr	r3, [r4, #4]
 800c472:	f8d8 0000 	ldr.w	r0, [r8]
 800c476:	1c5a      	adds	r2, r3, #1
 800c478:	3302      	adds	r3, #2
 800c47a:	6062      	str	r2, [r4, #4]
 800c47c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800c480:	f000 f9c6 	bl	800c810 <__retarget_lock_release_recursive>
 800c484:	2000      	movs	r0, #0
 800c486:	e7c6      	b.n	800c416 <__register_exitproc+0x3e>
 800c488:	20001348 	.word	0x20001348
 800c48c:	200012bc 	.word	0x200012bc
 800c490:	0800f444 	.word	0x0800f444
 800c494:	0800b94d 	.word	0x0800b94d
 800c498:	200000a4 	.word	0x200000a4

0800c49c <__sflush_r>:
 800c49c:	898a      	ldrh	r2, [r1, #12]
 800c49e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a2:	4605      	mov	r5, r0
 800c4a4:	0710      	lsls	r0, r2, #28
 800c4a6:	460c      	mov	r4, r1
 800c4a8:	d458      	bmi.n	800c55c <__sflush_r+0xc0>
 800c4aa:	684b      	ldr	r3, [r1, #4]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	dc05      	bgt.n	800c4bc <__sflush_r+0x20>
 800c4b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	dc02      	bgt.n	800c4bc <__sflush_r+0x20>
 800c4b6:	2000      	movs	r0, #0
 800c4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4be:	2e00      	cmp	r6, #0
 800c4c0:	d0f9      	beq.n	800c4b6 <__sflush_r+0x1a>
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c4c8:	682f      	ldr	r7, [r5, #0]
 800c4ca:	602b      	str	r3, [r5, #0]
 800c4cc:	d032      	beq.n	800c534 <__sflush_r+0x98>
 800c4ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c4d0:	89a3      	ldrh	r3, [r4, #12]
 800c4d2:	075a      	lsls	r2, r3, #29
 800c4d4:	d505      	bpl.n	800c4e2 <__sflush_r+0x46>
 800c4d6:	6863      	ldr	r3, [r4, #4]
 800c4d8:	1ac0      	subs	r0, r0, r3
 800c4da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c4dc:	b10b      	cbz	r3, 800c4e2 <__sflush_r+0x46>
 800c4de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c4e0:	1ac0      	subs	r0, r0, r3
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	4602      	mov	r2, r0
 800c4e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4e8:	6a21      	ldr	r1, [r4, #32]
 800c4ea:	4628      	mov	r0, r5
 800c4ec:	47b0      	blx	r6
 800c4ee:	1c43      	adds	r3, r0, #1
 800c4f0:	89a3      	ldrh	r3, [r4, #12]
 800c4f2:	d106      	bne.n	800c502 <__sflush_r+0x66>
 800c4f4:	6829      	ldr	r1, [r5, #0]
 800c4f6:	291d      	cmp	r1, #29
 800c4f8:	d82c      	bhi.n	800c554 <__sflush_r+0xb8>
 800c4fa:	4a2a      	ldr	r2, [pc, #168]	; (800c5a4 <__sflush_r+0x108>)
 800c4fc:	40ca      	lsrs	r2, r1
 800c4fe:	07d6      	lsls	r6, r2, #31
 800c500:	d528      	bpl.n	800c554 <__sflush_r+0xb8>
 800c502:	2200      	movs	r2, #0
 800c504:	6062      	str	r2, [r4, #4]
 800c506:	04d9      	lsls	r1, r3, #19
 800c508:	6922      	ldr	r2, [r4, #16]
 800c50a:	6022      	str	r2, [r4, #0]
 800c50c:	d504      	bpl.n	800c518 <__sflush_r+0x7c>
 800c50e:	1c42      	adds	r2, r0, #1
 800c510:	d101      	bne.n	800c516 <__sflush_r+0x7a>
 800c512:	682b      	ldr	r3, [r5, #0]
 800c514:	b903      	cbnz	r3, 800c518 <__sflush_r+0x7c>
 800c516:	6560      	str	r0, [r4, #84]	; 0x54
 800c518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c51a:	602f      	str	r7, [r5, #0]
 800c51c:	2900      	cmp	r1, #0
 800c51e:	d0ca      	beq.n	800c4b6 <__sflush_r+0x1a>
 800c520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c524:	4299      	cmp	r1, r3
 800c526:	d002      	beq.n	800c52e <__sflush_r+0x92>
 800c528:	4628      	mov	r0, r5
 800c52a:	f7ff fa4f 	bl	800b9cc <_free_r>
 800c52e:	2000      	movs	r0, #0
 800c530:	6360      	str	r0, [r4, #52]	; 0x34
 800c532:	e7c1      	b.n	800c4b8 <__sflush_r+0x1c>
 800c534:	6a21      	ldr	r1, [r4, #32]
 800c536:	2301      	movs	r3, #1
 800c538:	4628      	mov	r0, r5
 800c53a:	47b0      	blx	r6
 800c53c:	1c41      	adds	r1, r0, #1
 800c53e:	d1c7      	bne.n	800c4d0 <__sflush_r+0x34>
 800c540:	682b      	ldr	r3, [r5, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d0c4      	beq.n	800c4d0 <__sflush_r+0x34>
 800c546:	2b1d      	cmp	r3, #29
 800c548:	d001      	beq.n	800c54e <__sflush_r+0xb2>
 800c54a:	2b16      	cmp	r3, #22
 800c54c:	d101      	bne.n	800c552 <__sflush_r+0xb6>
 800c54e:	602f      	str	r7, [r5, #0]
 800c550:	e7b1      	b.n	800c4b6 <__sflush_r+0x1a>
 800c552:	89a3      	ldrh	r3, [r4, #12]
 800c554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c558:	81a3      	strh	r3, [r4, #12]
 800c55a:	e7ad      	b.n	800c4b8 <__sflush_r+0x1c>
 800c55c:	690f      	ldr	r7, [r1, #16]
 800c55e:	2f00      	cmp	r7, #0
 800c560:	d0a9      	beq.n	800c4b6 <__sflush_r+0x1a>
 800c562:	0793      	lsls	r3, r2, #30
 800c564:	680e      	ldr	r6, [r1, #0]
 800c566:	bf08      	it	eq
 800c568:	694b      	ldreq	r3, [r1, #20]
 800c56a:	600f      	str	r7, [r1, #0]
 800c56c:	bf18      	it	ne
 800c56e:	2300      	movne	r3, #0
 800c570:	eba6 0807 	sub.w	r8, r6, r7
 800c574:	608b      	str	r3, [r1, #8]
 800c576:	f1b8 0f00 	cmp.w	r8, #0
 800c57a:	dd9c      	ble.n	800c4b6 <__sflush_r+0x1a>
 800c57c:	6a21      	ldr	r1, [r4, #32]
 800c57e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c580:	4643      	mov	r3, r8
 800c582:	463a      	mov	r2, r7
 800c584:	4628      	mov	r0, r5
 800c586:	47b0      	blx	r6
 800c588:	2800      	cmp	r0, #0
 800c58a:	dc06      	bgt.n	800c59a <__sflush_r+0xfe>
 800c58c:	89a3      	ldrh	r3, [r4, #12]
 800c58e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c592:	81a3      	strh	r3, [r4, #12]
 800c594:	f04f 30ff 	mov.w	r0, #4294967295
 800c598:	e78e      	b.n	800c4b8 <__sflush_r+0x1c>
 800c59a:	4407      	add	r7, r0
 800c59c:	eba8 0800 	sub.w	r8, r8, r0
 800c5a0:	e7e9      	b.n	800c576 <__sflush_r+0xda>
 800c5a2:	bf00      	nop
 800c5a4:	20400001 	.word	0x20400001

0800c5a8 <_fflush_r>:
 800c5a8:	b538      	push	{r3, r4, r5, lr}
 800c5aa:	690b      	ldr	r3, [r1, #16]
 800c5ac:	4605      	mov	r5, r0
 800c5ae:	460c      	mov	r4, r1
 800c5b0:	b913      	cbnz	r3, 800c5b8 <_fflush_r+0x10>
 800c5b2:	2500      	movs	r5, #0
 800c5b4:	4628      	mov	r0, r5
 800c5b6:	bd38      	pop	{r3, r4, r5, pc}
 800c5b8:	b118      	cbz	r0, 800c5c2 <_fflush_r+0x1a>
 800c5ba:	6983      	ldr	r3, [r0, #24]
 800c5bc:	b90b      	cbnz	r3, 800c5c2 <_fflush_r+0x1a>
 800c5be:	f000 f887 	bl	800c6d0 <__sinit>
 800c5c2:	4b14      	ldr	r3, [pc, #80]	; (800c614 <_fflush_r+0x6c>)
 800c5c4:	429c      	cmp	r4, r3
 800c5c6:	d11b      	bne.n	800c600 <_fflush_r+0x58>
 800c5c8:	686c      	ldr	r4, [r5, #4]
 800c5ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d0ef      	beq.n	800c5b2 <_fflush_r+0xa>
 800c5d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c5d4:	07d0      	lsls	r0, r2, #31
 800c5d6:	d404      	bmi.n	800c5e2 <_fflush_r+0x3a>
 800c5d8:	0599      	lsls	r1, r3, #22
 800c5da:	d402      	bmi.n	800c5e2 <_fflush_r+0x3a>
 800c5dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5de:	f000 f915 	bl	800c80c <__retarget_lock_acquire_recursive>
 800c5e2:	4628      	mov	r0, r5
 800c5e4:	4621      	mov	r1, r4
 800c5e6:	f7ff ff59 	bl	800c49c <__sflush_r>
 800c5ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5ec:	07da      	lsls	r2, r3, #31
 800c5ee:	4605      	mov	r5, r0
 800c5f0:	d4e0      	bmi.n	800c5b4 <_fflush_r+0xc>
 800c5f2:	89a3      	ldrh	r3, [r4, #12]
 800c5f4:	059b      	lsls	r3, r3, #22
 800c5f6:	d4dd      	bmi.n	800c5b4 <_fflush_r+0xc>
 800c5f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5fa:	f000 f909 	bl	800c810 <__retarget_lock_release_recursive>
 800c5fe:	e7d9      	b.n	800c5b4 <_fflush_r+0xc>
 800c600:	4b05      	ldr	r3, [pc, #20]	; (800c618 <_fflush_r+0x70>)
 800c602:	429c      	cmp	r4, r3
 800c604:	d101      	bne.n	800c60a <_fflush_r+0x62>
 800c606:	68ac      	ldr	r4, [r5, #8]
 800c608:	e7df      	b.n	800c5ca <_fflush_r+0x22>
 800c60a:	4b04      	ldr	r3, [pc, #16]	; (800c61c <_fflush_r+0x74>)
 800c60c:	429c      	cmp	r4, r3
 800c60e:	bf08      	it	eq
 800c610:	68ec      	ldreq	r4, [r5, #12]
 800c612:	e7da      	b.n	800c5ca <_fflush_r+0x22>
 800c614:	0800f468 	.word	0x0800f468
 800c618:	0800f488 	.word	0x0800f488
 800c61c:	0800f448 	.word	0x0800f448

0800c620 <std>:
 800c620:	2300      	movs	r3, #0
 800c622:	b510      	push	{r4, lr}
 800c624:	4604      	mov	r4, r0
 800c626:	e9c0 3300 	strd	r3, r3, [r0]
 800c62a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c62e:	6083      	str	r3, [r0, #8]
 800c630:	8181      	strh	r1, [r0, #12]
 800c632:	6643      	str	r3, [r0, #100]	; 0x64
 800c634:	81c2      	strh	r2, [r0, #14]
 800c636:	6183      	str	r3, [r0, #24]
 800c638:	4619      	mov	r1, r3
 800c63a:	2208      	movs	r2, #8
 800c63c:	305c      	adds	r0, #92	; 0x5c
 800c63e:	f7ff f9bd 	bl	800b9bc <memset>
 800c642:	4b05      	ldr	r3, [pc, #20]	; (800c658 <std+0x38>)
 800c644:	6263      	str	r3, [r4, #36]	; 0x24
 800c646:	4b05      	ldr	r3, [pc, #20]	; (800c65c <std+0x3c>)
 800c648:	62a3      	str	r3, [r4, #40]	; 0x28
 800c64a:	4b05      	ldr	r3, [pc, #20]	; (800c660 <std+0x40>)
 800c64c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c64e:	4b05      	ldr	r3, [pc, #20]	; (800c664 <std+0x44>)
 800c650:	6224      	str	r4, [r4, #32]
 800c652:	6323      	str	r3, [r4, #48]	; 0x30
 800c654:	bd10      	pop	{r4, pc}
 800c656:	bf00      	nop
 800c658:	0800cbf9 	.word	0x0800cbf9
 800c65c:	0800cc1b 	.word	0x0800cc1b
 800c660:	0800cc53 	.word	0x0800cc53
 800c664:	0800cc77 	.word	0x0800cc77

0800c668 <_cleanup_r>:
 800c668:	4901      	ldr	r1, [pc, #4]	; (800c670 <_cleanup_r+0x8>)
 800c66a:	f000 b8af 	b.w	800c7cc <_fwalk_reent>
 800c66e:	bf00      	nop
 800c670:	0800c5a9 	.word	0x0800c5a9

0800c674 <__sfmoreglue>:
 800c674:	b570      	push	{r4, r5, r6, lr}
 800c676:	1e4a      	subs	r2, r1, #1
 800c678:	2568      	movs	r5, #104	; 0x68
 800c67a:	4355      	muls	r5, r2
 800c67c:	460e      	mov	r6, r1
 800c67e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c682:	f7ff f9f3 	bl	800ba6c <_malloc_r>
 800c686:	4604      	mov	r4, r0
 800c688:	b140      	cbz	r0, 800c69c <__sfmoreglue+0x28>
 800c68a:	2100      	movs	r1, #0
 800c68c:	e9c0 1600 	strd	r1, r6, [r0]
 800c690:	300c      	adds	r0, #12
 800c692:	60a0      	str	r0, [r4, #8]
 800c694:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c698:	f7ff f990 	bl	800b9bc <memset>
 800c69c:	4620      	mov	r0, r4
 800c69e:	bd70      	pop	{r4, r5, r6, pc}

0800c6a0 <__sfp_lock_acquire>:
 800c6a0:	4801      	ldr	r0, [pc, #4]	; (800c6a8 <__sfp_lock_acquire+0x8>)
 800c6a2:	f000 b8b3 	b.w	800c80c <__retarget_lock_acquire_recursive>
 800c6a6:	bf00      	nop
 800c6a8:	200015cc 	.word	0x200015cc

0800c6ac <__sfp_lock_release>:
 800c6ac:	4801      	ldr	r0, [pc, #4]	; (800c6b4 <__sfp_lock_release+0x8>)
 800c6ae:	f000 b8af 	b.w	800c810 <__retarget_lock_release_recursive>
 800c6b2:	bf00      	nop
 800c6b4:	200015cc 	.word	0x200015cc

0800c6b8 <__sinit_lock_acquire>:
 800c6b8:	4801      	ldr	r0, [pc, #4]	; (800c6c0 <__sinit_lock_acquire+0x8>)
 800c6ba:	f000 b8a7 	b.w	800c80c <__retarget_lock_acquire_recursive>
 800c6be:	bf00      	nop
 800c6c0:	200015cb 	.word	0x200015cb

0800c6c4 <__sinit_lock_release>:
 800c6c4:	4801      	ldr	r0, [pc, #4]	; (800c6cc <__sinit_lock_release+0x8>)
 800c6c6:	f000 b8a3 	b.w	800c810 <__retarget_lock_release_recursive>
 800c6ca:	bf00      	nop
 800c6cc:	200015cb 	.word	0x200015cb

0800c6d0 <__sinit>:
 800c6d0:	b510      	push	{r4, lr}
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	f7ff fff0 	bl	800c6b8 <__sinit_lock_acquire>
 800c6d8:	69a3      	ldr	r3, [r4, #24]
 800c6da:	b11b      	cbz	r3, 800c6e4 <__sinit+0x14>
 800c6dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6e0:	f7ff bff0 	b.w	800c6c4 <__sinit_lock_release>
 800c6e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c6e8:	6523      	str	r3, [r4, #80]	; 0x50
 800c6ea:	4b13      	ldr	r3, [pc, #76]	; (800c738 <__sinit+0x68>)
 800c6ec:	4a13      	ldr	r2, [pc, #76]	; (800c73c <__sinit+0x6c>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	62a2      	str	r2, [r4, #40]	; 0x28
 800c6f2:	42a3      	cmp	r3, r4
 800c6f4:	bf04      	itt	eq
 800c6f6:	2301      	moveq	r3, #1
 800c6f8:	61a3      	streq	r3, [r4, #24]
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	f000 f820 	bl	800c740 <__sfp>
 800c700:	6060      	str	r0, [r4, #4]
 800c702:	4620      	mov	r0, r4
 800c704:	f000 f81c 	bl	800c740 <__sfp>
 800c708:	60a0      	str	r0, [r4, #8]
 800c70a:	4620      	mov	r0, r4
 800c70c:	f000 f818 	bl	800c740 <__sfp>
 800c710:	2200      	movs	r2, #0
 800c712:	60e0      	str	r0, [r4, #12]
 800c714:	2104      	movs	r1, #4
 800c716:	6860      	ldr	r0, [r4, #4]
 800c718:	f7ff ff82 	bl	800c620 <std>
 800c71c:	68a0      	ldr	r0, [r4, #8]
 800c71e:	2201      	movs	r2, #1
 800c720:	2109      	movs	r1, #9
 800c722:	f7ff ff7d 	bl	800c620 <std>
 800c726:	68e0      	ldr	r0, [r4, #12]
 800c728:	2202      	movs	r2, #2
 800c72a:	2112      	movs	r1, #18
 800c72c:	f7ff ff78 	bl	800c620 <std>
 800c730:	2301      	movs	r3, #1
 800c732:	61a3      	str	r3, [r4, #24]
 800c734:	e7d2      	b.n	800c6dc <__sinit+0xc>
 800c736:	bf00      	nop
 800c738:	0800f40c 	.word	0x0800f40c
 800c73c:	0800c669 	.word	0x0800c669

0800c740 <__sfp>:
 800c740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c742:	4607      	mov	r7, r0
 800c744:	f7ff ffac 	bl	800c6a0 <__sfp_lock_acquire>
 800c748:	4b1e      	ldr	r3, [pc, #120]	; (800c7c4 <__sfp+0x84>)
 800c74a:	681e      	ldr	r6, [r3, #0]
 800c74c:	69b3      	ldr	r3, [r6, #24]
 800c74e:	b913      	cbnz	r3, 800c756 <__sfp+0x16>
 800c750:	4630      	mov	r0, r6
 800c752:	f7ff ffbd 	bl	800c6d0 <__sinit>
 800c756:	3648      	adds	r6, #72	; 0x48
 800c758:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c75c:	3b01      	subs	r3, #1
 800c75e:	d503      	bpl.n	800c768 <__sfp+0x28>
 800c760:	6833      	ldr	r3, [r6, #0]
 800c762:	b30b      	cbz	r3, 800c7a8 <__sfp+0x68>
 800c764:	6836      	ldr	r6, [r6, #0]
 800c766:	e7f7      	b.n	800c758 <__sfp+0x18>
 800c768:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c76c:	b9d5      	cbnz	r5, 800c7a4 <__sfp+0x64>
 800c76e:	4b16      	ldr	r3, [pc, #88]	; (800c7c8 <__sfp+0x88>)
 800c770:	60e3      	str	r3, [r4, #12]
 800c772:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c776:	6665      	str	r5, [r4, #100]	; 0x64
 800c778:	f000 f847 	bl	800c80a <__retarget_lock_init_recursive>
 800c77c:	f7ff ff96 	bl	800c6ac <__sfp_lock_release>
 800c780:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c784:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c788:	6025      	str	r5, [r4, #0]
 800c78a:	61a5      	str	r5, [r4, #24]
 800c78c:	2208      	movs	r2, #8
 800c78e:	4629      	mov	r1, r5
 800c790:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c794:	f7ff f912 	bl	800b9bc <memset>
 800c798:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c79c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c7a0:	4620      	mov	r0, r4
 800c7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7a4:	3468      	adds	r4, #104	; 0x68
 800c7a6:	e7d9      	b.n	800c75c <__sfp+0x1c>
 800c7a8:	2104      	movs	r1, #4
 800c7aa:	4638      	mov	r0, r7
 800c7ac:	f7ff ff62 	bl	800c674 <__sfmoreglue>
 800c7b0:	4604      	mov	r4, r0
 800c7b2:	6030      	str	r0, [r6, #0]
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	d1d5      	bne.n	800c764 <__sfp+0x24>
 800c7b8:	f7ff ff78 	bl	800c6ac <__sfp_lock_release>
 800c7bc:	230c      	movs	r3, #12
 800c7be:	603b      	str	r3, [r7, #0]
 800c7c0:	e7ee      	b.n	800c7a0 <__sfp+0x60>
 800c7c2:	bf00      	nop
 800c7c4:	0800f40c 	.word	0x0800f40c
 800c7c8:	ffff0001 	.word	0xffff0001

0800c7cc <_fwalk_reent>:
 800c7cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7d0:	4606      	mov	r6, r0
 800c7d2:	4688      	mov	r8, r1
 800c7d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c7d8:	2700      	movs	r7, #0
 800c7da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c7de:	f1b9 0901 	subs.w	r9, r9, #1
 800c7e2:	d505      	bpl.n	800c7f0 <_fwalk_reent+0x24>
 800c7e4:	6824      	ldr	r4, [r4, #0]
 800c7e6:	2c00      	cmp	r4, #0
 800c7e8:	d1f7      	bne.n	800c7da <_fwalk_reent+0xe>
 800c7ea:	4638      	mov	r0, r7
 800c7ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7f0:	89ab      	ldrh	r3, [r5, #12]
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d907      	bls.n	800c806 <_fwalk_reent+0x3a>
 800c7f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	d003      	beq.n	800c806 <_fwalk_reent+0x3a>
 800c7fe:	4629      	mov	r1, r5
 800c800:	4630      	mov	r0, r6
 800c802:	47c0      	blx	r8
 800c804:	4307      	orrs	r7, r0
 800c806:	3568      	adds	r5, #104	; 0x68
 800c808:	e7e9      	b.n	800c7de <_fwalk_reent+0x12>

0800c80a <__retarget_lock_init_recursive>:
 800c80a:	4770      	bx	lr

0800c80c <__retarget_lock_acquire_recursive>:
 800c80c:	4770      	bx	lr

0800c80e <__retarget_lock_release>:
 800c80e:	4770      	bx	lr

0800c810 <__retarget_lock_release_recursive>:
 800c810:	4770      	bx	lr

0800c812 <__swhatbuf_r>:
 800c812:	b570      	push	{r4, r5, r6, lr}
 800c814:	460e      	mov	r6, r1
 800c816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c81a:	2900      	cmp	r1, #0
 800c81c:	b096      	sub	sp, #88	; 0x58
 800c81e:	4614      	mov	r4, r2
 800c820:	461d      	mov	r5, r3
 800c822:	da07      	bge.n	800c834 <__swhatbuf_r+0x22>
 800c824:	2300      	movs	r3, #0
 800c826:	602b      	str	r3, [r5, #0]
 800c828:	89b3      	ldrh	r3, [r6, #12]
 800c82a:	061a      	lsls	r2, r3, #24
 800c82c:	d410      	bmi.n	800c850 <__swhatbuf_r+0x3e>
 800c82e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c832:	e00e      	b.n	800c852 <__swhatbuf_r+0x40>
 800c834:	466a      	mov	r2, sp
 800c836:	f000 fa45 	bl	800ccc4 <_fstat_r>
 800c83a:	2800      	cmp	r0, #0
 800c83c:	dbf2      	blt.n	800c824 <__swhatbuf_r+0x12>
 800c83e:	9a01      	ldr	r2, [sp, #4]
 800c840:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c844:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c848:	425a      	negs	r2, r3
 800c84a:	415a      	adcs	r2, r3
 800c84c:	602a      	str	r2, [r5, #0]
 800c84e:	e7ee      	b.n	800c82e <__swhatbuf_r+0x1c>
 800c850:	2340      	movs	r3, #64	; 0x40
 800c852:	2000      	movs	r0, #0
 800c854:	6023      	str	r3, [r4, #0]
 800c856:	b016      	add	sp, #88	; 0x58
 800c858:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c85c <__smakebuf_r>:
 800c85c:	898b      	ldrh	r3, [r1, #12]
 800c85e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c860:	079d      	lsls	r5, r3, #30
 800c862:	4606      	mov	r6, r0
 800c864:	460c      	mov	r4, r1
 800c866:	d507      	bpl.n	800c878 <__smakebuf_r+0x1c>
 800c868:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c86c:	6023      	str	r3, [r4, #0]
 800c86e:	6123      	str	r3, [r4, #16]
 800c870:	2301      	movs	r3, #1
 800c872:	6163      	str	r3, [r4, #20]
 800c874:	b002      	add	sp, #8
 800c876:	bd70      	pop	{r4, r5, r6, pc}
 800c878:	ab01      	add	r3, sp, #4
 800c87a:	466a      	mov	r2, sp
 800c87c:	f7ff ffc9 	bl	800c812 <__swhatbuf_r>
 800c880:	9900      	ldr	r1, [sp, #0]
 800c882:	4605      	mov	r5, r0
 800c884:	4630      	mov	r0, r6
 800c886:	f7ff f8f1 	bl	800ba6c <_malloc_r>
 800c88a:	b948      	cbnz	r0, 800c8a0 <__smakebuf_r+0x44>
 800c88c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c890:	059a      	lsls	r2, r3, #22
 800c892:	d4ef      	bmi.n	800c874 <__smakebuf_r+0x18>
 800c894:	f023 0303 	bic.w	r3, r3, #3
 800c898:	f043 0302 	orr.w	r3, r3, #2
 800c89c:	81a3      	strh	r3, [r4, #12]
 800c89e:	e7e3      	b.n	800c868 <__smakebuf_r+0xc>
 800c8a0:	4b0d      	ldr	r3, [pc, #52]	; (800c8d8 <__smakebuf_r+0x7c>)
 800c8a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c8a4:	89a3      	ldrh	r3, [r4, #12]
 800c8a6:	6020      	str	r0, [r4, #0]
 800c8a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8ac:	81a3      	strh	r3, [r4, #12]
 800c8ae:	9b00      	ldr	r3, [sp, #0]
 800c8b0:	6163      	str	r3, [r4, #20]
 800c8b2:	9b01      	ldr	r3, [sp, #4]
 800c8b4:	6120      	str	r0, [r4, #16]
 800c8b6:	b15b      	cbz	r3, 800c8d0 <__smakebuf_r+0x74>
 800c8b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8bc:	4630      	mov	r0, r6
 800c8be:	f000 fa13 	bl	800cce8 <_isatty_r>
 800c8c2:	b128      	cbz	r0, 800c8d0 <__smakebuf_r+0x74>
 800c8c4:	89a3      	ldrh	r3, [r4, #12]
 800c8c6:	f023 0303 	bic.w	r3, r3, #3
 800c8ca:	f043 0301 	orr.w	r3, r3, #1
 800c8ce:	81a3      	strh	r3, [r4, #12]
 800c8d0:	89a0      	ldrh	r0, [r4, #12]
 800c8d2:	4305      	orrs	r5, r0
 800c8d4:	81a5      	strh	r5, [r4, #12]
 800c8d6:	e7cd      	b.n	800c874 <__smakebuf_r+0x18>
 800c8d8:	0800c669 	.word	0x0800c669

0800c8dc <__malloc_lock>:
 800c8dc:	4801      	ldr	r0, [pc, #4]	; (800c8e4 <__malloc_lock+0x8>)
 800c8de:	f7ff bf95 	b.w	800c80c <__retarget_lock_acquire_recursive>
 800c8e2:	bf00      	nop
 800c8e4:	200015c8 	.word	0x200015c8

0800c8e8 <__malloc_unlock>:
 800c8e8:	4801      	ldr	r0, [pc, #4]	; (800c8f0 <__malloc_unlock+0x8>)
 800c8ea:	f7ff bf91 	b.w	800c810 <__retarget_lock_release_recursive>
 800c8ee:	bf00      	nop
 800c8f0:	200015c8 	.word	0x200015c8

0800c8f4 <_realloc_r>:
 800c8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8f6:	4607      	mov	r7, r0
 800c8f8:	4614      	mov	r4, r2
 800c8fa:	460e      	mov	r6, r1
 800c8fc:	b921      	cbnz	r1, 800c908 <_realloc_r+0x14>
 800c8fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c902:	4611      	mov	r1, r2
 800c904:	f7ff b8b2 	b.w	800ba6c <_malloc_r>
 800c908:	b922      	cbnz	r2, 800c914 <_realloc_r+0x20>
 800c90a:	f7ff f85f 	bl	800b9cc <_free_r>
 800c90e:	4625      	mov	r5, r4
 800c910:	4628      	mov	r0, r5
 800c912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c914:	f000 fa0a 	bl	800cd2c <_malloc_usable_size_r>
 800c918:	42a0      	cmp	r0, r4
 800c91a:	d20f      	bcs.n	800c93c <_realloc_r+0x48>
 800c91c:	4621      	mov	r1, r4
 800c91e:	4638      	mov	r0, r7
 800c920:	f7ff f8a4 	bl	800ba6c <_malloc_r>
 800c924:	4605      	mov	r5, r0
 800c926:	2800      	cmp	r0, #0
 800c928:	d0f2      	beq.n	800c910 <_realloc_r+0x1c>
 800c92a:	4631      	mov	r1, r6
 800c92c:	4622      	mov	r2, r4
 800c92e:	f7ff f81d 	bl	800b96c <memcpy>
 800c932:	4631      	mov	r1, r6
 800c934:	4638      	mov	r0, r7
 800c936:	f7ff f849 	bl	800b9cc <_free_r>
 800c93a:	e7e9      	b.n	800c910 <_realloc_r+0x1c>
 800c93c:	4635      	mov	r5, r6
 800c93e:	e7e7      	b.n	800c910 <_realloc_r+0x1c>

0800c940 <__ssputs_r>:
 800c940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c944:	688e      	ldr	r6, [r1, #8]
 800c946:	429e      	cmp	r6, r3
 800c948:	4682      	mov	sl, r0
 800c94a:	460c      	mov	r4, r1
 800c94c:	4690      	mov	r8, r2
 800c94e:	461f      	mov	r7, r3
 800c950:	d838      	bhi.n	800c9c4 <__ssputs_r+0x84>
 800c952:	898a      	ldrh	r2, [r1, #12]
 800c954:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c958:	d032      	beq.n	800c9c0 <__ssputs_r+0x80>
 800c95a:	6825      	ldr	r5, [r4, #0]
 800c95c:	6909      	ldr	r1, [r1, #16]
 800c95e:	eba5 0901 	sub.w	r9, r5, r1
 800c962:	6965      	ldr	r5, [r4, #20]
 800c964:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c968:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c96c:	3301      	adds	r3, #1
 800c96e:	444b      	add	r3, r9
 800c970:	106d      	asrs	r5, r5, #1
 800c972:	429d      	cmp	r5, r3
 800c974:	bf38      	it	cc
 800c976:	461d      	movcc	r5, r3
 800c978:	0553      	lsls	r3, r2, #21
 800c97a:	d531      	bpl.n	800c9e0 <__ssputs_r+0xa0>
 800c97c:	4629      	mov	r1, r5
 800c97e:	f7ff f875 	bl	800ba6c <_malloc_r>
 800c982:	4606      	mov	r6, r0
 800c984:	b950      	cbnz	r0, 800c99c <__ssputs_r+0x5c>
 800c986:	230c      	movs	r3, #12
 800c988:	f8ca 3000 	str.w	r3, [sl]
 800c98c:	89a3      	ldrh	r3, [r4, #12]
 800c98e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c992:	81a3      	strh	r3, [r4, #12]
 800c994:	f04f 30ff 	mov.w	r0, #4294967295
 800c998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c99c:	6921      	ldr	r1, [r4, #16]
 800c99e:	464a      	mov	r2, r9
 800c9a0:	f7fe ffe4 	bl	800b96c <memcpy>
 800c9a4:	89a3      	ldrh	r3, [r4, #12]
 800c9a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c9aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9ae:	81a3      	strh	r3, [r4, #12]
 800c9b0:	6126      	str	r6, [r4, #16]
 800c9b2:	6165      	str	r5, [r4, #20]
 800c9b4:	444e      	add	r6, r9
 800c9b6:	eba5 0509 	sub.w	r5, r5, r9
 800c9ba:	6026      	str	r6, [r4, #0]
 800c9bc:	60a5      	str	r5, [r4, #8]
 800c9be:	463e      	mov	r6, r7
 800c9c0:	42be      	cmp	r6, r7
 800c9c2:	d900      	bls.n	800c9c6 <__ssputs_r+0x86>
 800c9c4:	463e      	mov	r6, r7
 800c9c6:	4632      	mov	r2, r6
 800c9c8:	6820      	ldr	r0, [r4, #0]
 800c9ca:	4641      	mov	r1, r8
 800c9cc:	f7fe ffdc 	bl	800b988 <memmove>
 800c9d0:	68a3      	ldr	r3, [r4, #8]
 800c9d2:	6822      	ldr	r2, [r4, #0]
 800c9d4:	1b9b      	subs	r3, r3, r6
 800c9d6:	4432      	add	r2, r6
 800c9d8:	60a3      	str	r3, [r4, #8]
 800c9da:	6022      	str	r2, [r4, #0]
 800c9dc:	2000      	movs	r0, #0
 800c9de:	e7db      	b.n	800c998 <__ssputs_r+0x58>
 800c9e0:	462a      	mov	r2, r5
 800c9e2:	f7ff ff87 	bl	800c8f4 <_realloc_r>
 800c9e6:	4606      	mov	r6, r0
 800c9e8:	2800      	cmp	r0, #0
 800c9ea:	d1e1      	bne.n	800c9b0 <__ssputs_r+0x70>
 800c9ec:	6921      	ldr	r1, [r4, #16]
 800c9ee:	4650      	mov	r0, sl
 800c9f0:	f7fe ffec 	bl	800b9cc <_free_r>
 800c9f4:	e7c7      	b.n	800c986 <__ssputs_r+0x46>
	...

0800c9f8 <_svfiprintf_r>:
 800c9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9fc:	4698      	mov	r8, r3
 800c9fe:	898b      	ldrh	r3, [r1, #12]
 800ca00:	061b      	lsls	r3, r3, #24
 800ca02:	b09d      	sub	sp, #116	; 0x74
 800ca04:	4607      	mov	r7, r0
 800ca06:	460d      	mov	r5, r1
 800ca08:	4614      	mov	r4, r2
 800ca0a:	d50e      	bpl.n	800ca2a <_svfiprintf_r+0x32>
 800ca0c:	690b      	ldr	r3, [r1, #16]
 800ca0e:	b963      	cbnz	r3, 800ca2a <_svfiprintf_r+0x32>
 800ca10:	2140      	movs	r1, #64	; 0x40
 800ca12:	f7ff f82b 	bl	800ba6c <_malloc_r>
 800ca16:	6028      	str	r0, [r5, #0]
 800ca18:	6128      	str	r0, [r5, #16]
 800ca1a:	b920      	cbnz	r0, 800ca26 <_svfiprintf_r+0x2e>
 800ca1c:	230c      	movs	r3, #12
 800ca1e:	603b      	str	r3, [r7, #0]
 800ca20:	f04f 30ff 	mov.w	r0, #4294967295
 800ca24:	e0d1      	b.n	800cbca <_svfiprintf_r+0x1d2>
 800ca26:	2340      	movs	r3, #64	; 0x40
 800ca28:	616b      	str	r3, [r5, #20]
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ca2e:	2320      	movs	r3, #32
 800ca30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca34:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca38:	2330      	movs	r3, #48	; 0x30
 800ca3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cbe4 <_svfiprintf_r+0x1ec>
 800ca3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca42:	f04f 0901 	mov.w	r9, #1
 800ca46:	4623      	mov	r3, r4
 800ca48:	469a      	mov	sl, r3
 800ca4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca4e:	b10a      	cbz	r2, 800ca54 <_svfiprintf_r+0x5c>
 800ca50:	2a25      	cmp	r2, #37	; 0x25
 800ca52:	d1f9      	bne.n	800ca48 <_svfiprintf_r+0x50>
 800ca54:	ebba 0b04 	subs.w	fp, sl, r4
 800ca58:	d00b      	beq.n	800ca72 <_svfiprintf_r+0x7a>
 800ca5a:	465b      	mov	r3, fp
 800ca5c:	4622      	mov	r2, r4
 800ca5e:	4629      	mov	r1, r5
 800ca60:	4638      	mov	r0, r7
 800ca62:	f7ff ff6d 	bl	800c940 <__ssputs_r>
 800ca66:	3001      	adds	r0, #1
 800ca68:	f000 80aa 	beq.w	800cbc0 <_svfiprintf_r+0x1c8>
 800ca6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca6e:	445a      	add	r2, fp
 800ca70:	9209      	str	r2, [sp, #36]	; 0x24
 800ca72:	f89a 3000 	ldrb.w	r3, [sl]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	f000 80a2 	beq.w	800cbc0 <_svfiprintf_r+0x1c8>
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ca82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca86:	f10a 0a01 	add.w	sl, sl, #1
 800ca8a:	9304      	str	r3, [sp, #16]
 800ca8c:	9307      	str	r3, [sp, #28]
 800ca8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca92:	931a      	str	r3, [sp, #104]	; 0x68
 800ca94:	4654      	mov	r4, sl
 800ca96:	2205      	movs	r2, #5
 800ca98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca9c:	4851      	ldr	r0, [pc, #324]	; (800cbe4 <_svfiprintf_r+0x1ec>)
 800ca9e:	f7f3 fbb7 	bl	8000210 <memchr>
 800caa2:	9a04      	ldr	r2, [sp, #16]
 800caa4:	b9d8      	cbnz	r0, 800cade <_svfiprintf_r+0xe6>
 800caa6:	06d0      	lsls	r0, r2, #27
 800caa8:	bf44      	itt	mi
 800caaa:	2320      	movmi	r3, #32
 800caac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cab0:	0711      	lsls	r1, r2, #28
 800cab2:	bf44      	itt	mi
 800cab4:	232b      	movmi	r3, #43	; 0x2b
 800cab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800caba:	f89a 3000 	ldrb.w	r3, [sl]
 800cabe:	2b2a      	cmp	r3, #42	; 0x2a
 800cac0:	d015      	beq.n	800caee <_svfiprintf_r+0xf6>
 800cac2:	9a07      	ldr	r2, [sp, #28]
 800cac4:	4654      	mov	r4, sl
 800cac6:	2000      	movs	r0, #0
 800cac8:	f04f 0c0a 	mov.w	ip, #10
 800cacc:	4621      	mov	r1, r4
 800cace:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cad2:	3b30      	subs	r3, #48	; 0x30
 800cad4:	2b09      	cmp	r3, #9
 800cad6:	d94e      	bls.n	800cb76 <_svfiprintf_r+0x17e>
 800cad8:	b1b0      	cbz	r0, 800cb08 <_svfiprintf_r+0x110>
 800cada:	9207      	str	r2, [sp, #28]
 800cadc:	e014      	b.n	800cb08 <_svfiprintf_r+0x110>
 800cade:	eba0 0308 	sub.w	r3, r0, r8
 800cae2:	fa09 f303 	lsl.w	r3, r9, r3
 800cae6:	4313      	orrs	r3, r2
 800cae8:	9304      	str	r3, [sp, #16]
 800caea:	46a2      	mov	sl, r4
 800caec:	e7d2      	b.n	800ca94 <_svfiprintf_r+0x9c>
 800caee:	9b03      	ldr	r3, [sp, #12]
 800caf0:	1d19      	adds	r1, r3, #4
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	9103      	str	r1, [sp, #12]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	bfbb      	ittet	lt
 800cafa:	425b      	neglt	r3, r3
 800cafc:	f042 0202 	orrlt.w	r2, r2, #2
 800cb00:	9307      	strge	r3, [sp, #28]
 800cb02:	9307      	strlt	r3, [sp, #28]
 800cb04:	bfb8      	it	lt
 800cb06:	9204      	strlt	r2, [sp, #16]
 800cb08:	7823      	ldrb	r3, [r4, #0]
 800cb0a:	2b2e      	cmp	r3, #46	; 0x2e
 800cb0c:	d10c      	bne.n	800cb28 <_svfiprintf_r+0x130>
 800cb0e:	7863      	ldrb	r3, [r4, #1]
 800cb10:	2b2a      	cmp	r3, #42	; 0x2a
 800cb12:	d135      	bne.n	800cb80 <_svfiprintf_r+0x188>
 800cb14:	9b03      	ldr	r3, [sp, #12]
 800cb16:	1d1a      	adds	r2, r3, #4
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	9203      	str	r2, [sp, #12]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	bfb8      	it	lt
 800cb20:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb24:	3402      	adds	r4, #2
 800cb26:	9305      	str	r3, [sp, #20]
 800cb28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cbf4 <_svfiprintf_r+0x1fc>
 800cb2c:	7821      	ldrb	r1, [r4, #0]
 800cb2e:	2203      	movs	r2, #3
 800cb30:	4650      	mov	r0, sl
 800cb32:	f7f3 fb6d 	bl	8000210 <memchr>
 800cb36:	b140      	cbz	r0, 800cb4a <_svfiprintf_r+0x152>
 800cb38:	2340      	movs	r3, #64	; 0x40
 800cb3a:	eba0 000a 	sub.w	r0, r0, sl
 800cb3e:	fa03 f000 	lsl.w	r0, r3, r0
 800cb42:	9b04      	ldr	r3, [sp, #16]
 800cb44:	4303      	orrs	r3, r0
 800cb46:	3401      	adds	r4, #1
 800cb48:	9304      	str	r3, [sp, #16]
 800cb4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb4e:	4826      	ldr	r0, [pc, #152]	; (800cbe8 <_svfiprintf_r+0x1f0>)
 800cb50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb54:	2206      	movs	r2, #6
 800cb56:	f7f3 fb5b 	bl	8000210 <memchr>
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	d038      	beq.n	800cbd0 <_svfiprintf_r+0x1d8>
 800cb5e:	4b23      	ldr	r3, [pc, #140]	; (800cbec <_svfiprintf_r+0x1f4>)
 800cb60:	bb1b      	cbnz	r3, 800cbaa <_svfiprintf_r+0x1b2>
 800cb62:	9b03      	ldr	r3, [sp, #12]
 800cb64:	3307      	adds	r3, #7
 800cb66:	f023 0307 	bic.w	r3, r3, #7
 800cb6a:	3308      	adds	r3, #8
 800cb6c:	9303      	str	r3, [sp, #12]
 800cb6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb70:	4433      	add	r3, r6
 800cb72:	9309      	str	r3, [sp, #36]	; 0x24
 800cb74:	e767      	b.n	800ca46 <_svfiprintf_r+0x4e>
 800cb76:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb7a:	460c      	mov	r4, r1
 800cb7c:	2001      	movs	r0, #1
 800cb7e:	e7a5      	b.n	800cacc <_svfiprintf_r+0xd4>
 800cb80:	2300      	movs	r3, #0
 800cb82:	3401      	adds	r4, #1
 800cb84:	9305      	str	r3, [sp, #20]
 800cb86:	4619      	mov	r1, r3
 800cb88:	f04f 0c0a 	mov.w	ip, #10
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb92:	3a30      	subs	r2, #48	; 0x30
 800cb94:	2a09      	cmp	r2, #9
 800cb96:	d903      	bls.n	800cba0 <_svfiprintf_r+0x1a8>
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d0c5      	beq.n	800cb28 <_svfiprintf_r+0x130>
 800cb9c:	9105      	str	r1, [sp, #20]
 800cb9e:	e7c3      	b.n	800cb28 <_svfiprintf_r+0x130>
 800cba0:	fb0c 2101 	mla	r1, ip, r1, r2
 800cba4:	4604      	mov	r4, r0
 800cba6:	2301      	movs	r3, #1
 800cba8:	e7f0      	b.n	800cb8c <_svfiprintf_r+0x194>
 800cbaa:	ab03      	add	r3, sp, #12
 800cbac:	9300      	str	r3, [sp, #0]
 800cbae:	462a      	mov	r2, r5
 800cbb0:	4b0f      	ldr	r3, [pc, #60]	; (800cbf0 <_svfiprintf_r+0x1f8>)
 800cbb2:	a904      	add	r1, sp, #16
 800cbb4:	4638      	mov	r0, r7
 800cbb6:	f3af 8000 	nop.w
 800cbba:	1c42      	adds	r2, r0, #1
 800cbbc:	4606      	mov	r6, r0
 800cbbe:	d1d6      	bne.n	800cb6e <_svfiprintf_r+0x176>
 800cbc0:	89ab      	ldrh	r3, [r5, #12]
 800cbc2:	065b      	lsls	r3, r3, #25
 800cbc4:	f53f af2c 	bmi.w	800ca20 <_svfiprintf_r+0x28>
 800cbc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbca:	b01d      	add	sp, #116	; 0x74
 800cbcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd0:	ab03      	add	r3, sp, #12
 800cbd2:	9300      	str	r3, [sp, #0]
 800cbd4:	462a      	mov	r2, r5
 800cbd6:	4b06      	ldr	r3, [pc, #24]	; (800cbf0 <_svfiprintf_r+0x1f8>)
 800cbd8:	a904      	add	r1, sp, #16
 800cbda:	4638      	mov	r0, r7
 800cbdc:	f7ff f968 	bl	800beb0 <_printf_i>
 800cbe0:	e7eb      	b.n	800cbba <_svfiprintf_r+0x1c2>
 800cbe2:	bf00      	nop
 800cbe4:	0800f410 	.word	0x0800f410
 800cbe8:	0800f41a 	.word	0x0800f41a
 800cbec:	00000000 	.word	0x00000000
 800cbf0:	0800c941 	.word	0x0800c941
 800cbf4:	0800f416 	.word	0x0800f416

0800cbf8 <__sread>:
 800cbf8:	b510      	push	{r4, lr}
 800cbfa:	460c      	mov	r4, r1
 800cbfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc00:	f000 f89c 	bl	800cd3c <_read_r>
 800cc04:	2800      	cmp	r0, #0
 800cc06:	bfab      	itete	ge
 800cc08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cc0a:	89a3      	ldrhlt	r3, [r4, #12]
 800cc0c:	181b      	addge	r3, r3, r0
 800cc0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cc12:	bfac      	ite	ge
 800cc14:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc16:	81a3      	strhlt	r3, [r4, #12]
 800cc18:	bd10      	pop	{r4, pc}

0800cc1a <__swrite>:
 800cc1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc1e:	461f      	mov	r7, r3
 800cc20:	898b      	ldrh	r3, [r1, #12]
 800cc22:	05db      	lsls	r3, r3, #23
 800cc24:	4605      	mov	r5, r0
 800cc26:	460c      	mov	r4, r1
 800cc28:	4616      	mov	r6, r2
 800cc2a:	d505      	bpl.n	800cc38 <__swrite+0x1e>
 800cc2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc30:	2302      	movs	r3, #2
 800cc32:	2200      	movs	r2, #0
 800cc34:	f000 f868 	bl	800cd08 <_lseek_r>
 800cc38:	89a3      	ldrh	r3, [r4, #12]
 800cc3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc42:	81a3      	strh	r3, [r4, #12]
 800cc44:	4632      	mov	r2, r6
 800cc46:	463b      	mov	r3, r7
 800cc48:	4628      	mov	r0, r5
 800cc4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc4e:	f000 b817 	b.w	800cc80 <_write_r>

0800cc52 <__sseek>:
 800cc52:	b510      	push	{r4, lr}
 800cc54:	460c      	mov	r4, r1
 800cc56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc5a:	f000 f855 	bl	800cd08 <_lseek_r>
 800cc5e:	1c43      	adds	r3, r0, #1
 800cc60:	89a3      	ldrh	r3, [r4, #12]
 800cc62:	bf15      	itete	ne
 800cc64:	6560      	strne	r0, [r4, #84]	; 0x54
 800cc66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cc6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cc6e:	81a3      	strheq	r3, [r4, #12]
 800cc70:	bf18      	it	ne
 800cc72:	81a3      	strhne	r3, [r4, #12]
 800cc74:	bd10      	pop	{r4, pc}

0800cc76 <__sclose>:
 800cc76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc7a:	f000 b813 	b.w	800cca4 <_close_r>
	...

0800cc80 <_write_r>:
 800cc80:	b538      	push	{r3, r4, r5, lr}
 800cc82:	4d07      	ldr	r5, [pc, #28]	; (800cca0 <_write_r+0x20>)
 800cc84:	4604      	mov	r4, r0
 800cc86:	4608      	mov	r0, r1
 800cc88:	4611      	mov	r1, r2
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	602a      	str	r2, [r5, #0]
 800cc8e:	461a      	mov	r2, r3
 800cc90:	f000 f8ac 	bl	800cdec <_write>
 800cc94:	1c43      	adds	r3, r0, #1
 800cc96:	d102      	bne.n	800cc9e <_write_r+0x1e>
 800cc98:	682b      	ldr	r3, [r5, #0]
 800cc9a:	b103      	cbz	r3, 800cc9e <_write_r+0x1e>
 800cc9c:	6023      	str	r3, [r4, #0]
 800cc9e:	bd38      	pop	{r3, r4, r5, pc}
 800cca0:	200015d4 	.word	0x200015d4

0800cca4 <_close_r>:
 800cca4:	b538      	push	{r3, r4, r5, lr}
 800cca6:	4d06      	ldr	r5, [pc, #24]	; (800ccc0 <_close_r+0x1c>)
 800cca8:	2300      	movs	r3, #0
 800ccaa:	4604      	mov	r4, r0
 800ccac:	4608      	mov	r0, r1
 800ccae:	602b      	str	r3, [r5, #0]
 800ccb0:	f000 f856 	bl	800cd60 <_close>
 800ccb4:	1c43      	adds	r3, r0, #1
 800ccb6:	d102      	bne.n	800ccbe <_close_r+0x1a>
 800ccb8:	682b      	ldr	r3, [r5, #0]
 800ccba:	b103      	cbz	r3, 800ccbe <_close_r+0x1a>
 800ccbc:	6023      	str	r3, [r4, #0]
 800ccbe:	bd38      	pop	{r3, r4, r5, pc}
 800ccc0:	200015d4 	.word	0x200015d4

0800ccc4 <_fstat_r>:
 800ccc4:	b538      	push	{r3, r4, r5, lr}
 800ccc6:	4d07      	ldr	r5, [pc, #28]	; (800cce4 <_fstat_r+0x20>)
 800ccc8:	2300      	movs	r3, #0
 800ccca:	4604      	mov	r4, r0
 800cccc:	4608      	mov	r0, r1
 800ccce:	4611      	mov	r1, r2
 800ccd0:	602b      	str	r3, [r5, #0]
 800ccd2:	f000 f84d 	bl	800cd70 <_fstat>
 800ccd6:	1c43      	adds	r3, r0, #1
 800ccd8:	d102      	bne.n	800cce0 <_fstat_r+0x1c>
 800ccda:	682b      	ldr	r3, [r5, #0]
 800ccdc:	b103      	cbz	r3, 800cce0 <_fstat_r+0x1c>
 800ccde:	6023      	str	r3, [r4, #0]
 800cce0:	bd38      	pop	{r3, r4, r5, pc}
 800cce2:	bf00      	nop
 800cce4:	200015d4 	.word	0x200015d4

0800cce8 <_isatty_r>:
 800cce8:	b538      	push	{r3, r4, r5, lr}
 800ccea:	4d06      	ldr	r5, [pc, #24]	; (800cd04 <_isatty_r+0x1c>)
 800ccec:	2300      	movs	r3, #0
 800ccee:	4604      	mov	r4, r0
 800ccf0:	4608      	mov	r0, r1
 800ccf2:	602b      	str	r3, [r5, #0]
 800ccf4:	f000 f84c 	bl	800cd90 <_isatty>
 800ccf8:	1c43      	adds	r3, r0, #1
 800ccfa:	d102      	bne.n	800cd02 <_isatty_r+0x1a>
 800ccfc:	682b      	ldr	r3, [r5, #0]
 800ccfe:	b103      	cbz	r3, 800cd02 <_isatty_r+0x1a>
 800cd00:	6023      	str	r3, [r4, #0]
 800cd02:	bd38      	pop	{r3, r4, r5, pc}
 800cd04:	200015d4 	.word	0x200015d4

0800cd08 <_lseek_r>:
 800cd08:	b538      	push	{r3, r4, r5, lr}
 800cd0a:	4d07      	ldr	r5, [pc, #28]	; (800cd28 <_lseek_r+0x20>)
 800cd0c:	4604      	mov	r4, r0
 800cd0e:	4608      	mov	r0, r1
 800cd10:	4611      	mov	r1, r2
 800cd12:	2200      	movs	r2, #0
 800cd14:	602a      	str	r2, [r5, #0]
 800cd16:	461a      	mov	r2, r3
 800cd18:	f000 f84a 	bl	800cdb0 <_lseek>
 800cd1c:	1c43      	adds	r3, r0, #1
 800cd1e:	d102      	bne.n	800cd26 <_lseek_r+0x1e>
 800cd20:	682b      	ldr	r3, [r5, #0]
 800cd22:	b103      	cbz	r3, 800cd26 <_lseek_r+0x1e>
 800cd24:	6023      	str	r3, [r4, #0]
 800cd26:	bd38      	pop	{r3, r4, r5, pc}
 800cd28:	200015d4 	.word	0x200015d4

0800cd2c <_malloc_usable_size_r>:
 800cd2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd30:	1f18      	subs	r0, r3, #4
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	bfbc      	itt	lt
 800cd36:	580b      	ldrlt	r3, [r1, r0]
 800cd38:	18c0      	addlt	r0, r0, r3
 800cd3a:	4770      	bx	lr

0800cd3c <_read_r>:
 800cd3c:	b538      	push	{r3, r4, r5, lr}
 800cd3e:	4d07      	ldr	r5, [pc, #28]	; (800cd5c <_read_r+0x20>)
 800cd40:	4604      	mov	r4, r0
 800cd42:	4608      	mov	r0, r1
 800cd44:	4611      	mov	r1, r2
 800cd46:	2200      	movs	r2, #0
 800cd48:	602a      	str	r2, [r5, #0]
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	f000 f838 	bl	800cdc0 <_read>
 800cd50:	1c43      	adds	r3, r0, #1
 800cd52:	d102      	bne.n	800cd5a <_read_r+0x1e>
 800cd54:	682b      	ldr	r3, [r5, #0]
 800cd56:	b103      	cbz	r3, 800cd5a <_read_r+0x1e>
 800cd58:	6023      	str	r3, [r4, #0]
 800cd5a:	bd38      	pop	{r3, r4, r5, pc}
 800cd5c:	200015d4 	.word	0x200015d4

0800cd60 <_close>:
 800cd60:	4b02      	ldr	r3, [pc, #8]	; (800cd6c <_close+0xc>)
 800cd62:	2258      	movs	r2, #88	; 0x58
 800cd64:	601a      	str	r2, [r3, #0]
 800cd66:	f04f 30ff 	mov.w	r0, #4294967295
 800cd6a:	4770      	bx	lr
 800cd6c:	200015d4 	.word	0x200015d4

0800cd70 <_fstat>:
 800cd70:	4b02      	ldr	r3, [pc, #8]	; (800cd7c <_fstat+0xc>)
 800cd72:	2258      	movs	r2, #88	; 0x58
 800cd74:	601a      	str	r2, [r3, #0]
 800cd76:	f04f 30ff 	mov.w	r0, #4294967295
 800cd7a:	4770      	bx	lr
 800cd7c:	200015d4 	.word	0x200015d4

0800cd80 <_getpid>:
 800cd80:	4b02      	ldr	r3, [pc, #8]	; (800cd8c <_getpid+0xc>)
 800cd82:	2258      	movs	r2, #88	; 0x58
 800cd84:	601a      	str	r2, [r3, #0]
 800cd86:	f04f 30ff 	mov.w	r0, #4294967295
 800cd8a:	4770      	bx	lr
 800cd8c:	200015d4 	.word	0x200015d4

0800cd90 <_isatty>:
 800cd90:	4b02      	ldr	r3, [pc, #8]	; (800cd9c <_isatty+0xc>)
 800cd92:	2258      	movs	r2, #88	; 0x58
 800cd94:	601a      	str	r2, [r3, #0]
 800cd96:	2000      	movs	r0, #0
 800cd98:	4770      	bx	lr
 800cd9a:	bf00      	nop
 800cd9c:	200015d4 	.word	0x200015d4

0800cda0 <_kill>:
 800cda0:	4b02      	ldr	r3, [pc, #8]	; (800cdac <_kill+0xc>)
 800cda2:	2258      	movs	r2, #88	; 0x58
 800cda4:	601a      	str	r2, [r3, #0]
 800cda6:	f04f 30ff 	mov.w	r0, #4294967295
 800cdaa:	4770      	bx	lr
 800cdac:	200015d4 	.word	0x200015d4

0800cdb0 <_lseek>:
 800cdb0:	4b02      	ldr	r3, [pc, #8]	; (800cdbc <_lseek+0xc>)
 800cdb2:	2258      	movs	r2, #88	; 0x58
 800cdb4:	601a      	str	r2, [r3, #0]
 800cdb6:	f04f 30ff 	mov.w	r0, #4294967295
 800cdba:	4770      	bx	lr
 800cdbc:	200015d4 	.word	0x200015d4

0800cdc0 <_read>:
 800cdc0:	4b02      	ldr	r3, [pc, #8]	; (800cdcc <_read+0xc>)
 800cdc2:	2258      	movs	r2, #88	; 0x58
 800cdc4:	601a      	str	r2, [r3, #0]
 800cdc6:	f04f 30ff 	mov.w	r0, #4294967295
 800cdca:	4770      	bx	lr
 800cdcc:	200015d4 	.word	0x200015d4

0800cdd0 <_sbrk>:
 800cdd0:	4b04      	ldr	r3, [pc, #16]	; (800cde4 <_sbrk+0x14>)
 800cdd2:	6819      	ldr	r1, [r3, #0]
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	b909      	cbnz	r1, 800cddc <_sbrk+0xc>
 800cdd8:	4903      	ldr	r1, [pc, #12]	; (800cde8 <_sbrk+0x18>)
 800cdda:	6019      	str	r1, [r3, #0]
 800cddc:	6818      	ldr	r0, [r3, #0]
 800cdde:	4402      	add	r2, r0
 800cde0:	601a      	str	r2, [r3, #0]
 800cde2:	4770      	bx	lr
 800cde4:	2000134c 	.word	0x2000134c
 800cde8:	200015d8 	.word	0x200015d8

0800cdec <_write>:
 800cdec:	4b02      	ldr	r3, [pc, #8]	; (800cdf8 <_write+0xc>)
 800cdee:	2258      	movs	r2, #88	; 0x58
 800cdf0:	601a      	str	r2, [r3, #0]
 800cdf2:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf6:	4770      	bx	lr
 800cdf8:	200015d4 	.word	0x200015d4

0800cdfc <_exit>:
 800cdfc:	e7fe      	b.n	800cdfc <_exit>
	...

0800ce00 <_init>:
 800ce00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce02:	bf00      	nop
 800ce04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce06:	bc08      	pop	{r3}
 800ce08:	469e      	mov	lr, r3
 800ce0a:	4770      	bx	lr

0800ce0c <_fini>:
 800ce0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce0e:	bf00      	nop
 800ce10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce12:	bc08      	pop	{r3}
 800ce14:	469e      	mov	lr, r3
 800ce16:	4770      	bx	lr
