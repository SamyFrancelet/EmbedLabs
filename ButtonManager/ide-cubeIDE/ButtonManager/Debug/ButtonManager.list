
ButtonManager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aca8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002174  0800ae78  0800ae78  0001ae78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000b5e  0800cfec  0800cfec  0001cfec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000020  0800db4c  0800db4c  0001db4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0800db6c  0800db6c  0001db6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   0000001c  0800db74  0800db74  0001db74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  0800db90  0800db90  0001db90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800dba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000148c  200000a8  0800dc48  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00002004  20001534  0800dc48  00021534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000709aa  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000f009  00000000  00000000  00090a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c38  00000000  00000000  0009fa90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020d8  00000000  00000000  000a16c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000332b6  00000000  00000000  000a37a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003b89f  00000000  00000000  000d6a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ceef  00000000  00000000  001122f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d2  00000000  00000000  0022f1e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005820  00000000  00000000  0022f2b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00018b6b  00000000  00000000  00234ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  0024d644  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  0024d710  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ae60 	.word	0x0800ae60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ac 	.word	0x200000ac
 800020c:	0800ae60 	.word	0x0800ae60

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <HAL_GPIO_EXTI_Callback>:
        //ButtonsController::getInstance().onIrq();
        break;
    default:
        break;
    }
}
 80005a8:	4770      	bx	lr
	...

080005ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005b0:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	2400      	movs	r4, #0
 80005b4:	940b      	str	r4, [sp, #44]	; 0x2c
 80005b6:	940c      	str	r4, [sp, #48]	; 0x30
 80005b8:	940d      	str	r4, [sp, #52]	; 0x34
 80005ba:	940e      	str	r4, [sp, #56]	; 0x38
 80005bc:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005be:	4bab      	ldr	r3, [pc, #684]	; (800086c <MX_GPIO_Init+0x2c0>)
 80005c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c2:	f042 0210 	orr.w	r2, r2, #16
 80005c6:	631a      	str	r2, [r3, #48]	; 0x30
 80005c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ca:	f002 0210 	and.w	r2, r2, #16
 80005ce:	9200      	str	r2, [sp, #0]
 80005d0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005d8:	631a      	str	r2, [r3, #48]	; 0x30
 80005da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005dc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80005e0:	9201      	str	r2, [sp, #4]
 80005e2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e6:	f042 0202 	orr.w	r2, r2, #2
 80005ea:	631a      	str	r2, [r3, #48]	; 0x30
 80005ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ee:	f002 0202 	and.w	r2, r2, #2
 80005f2:	9202      	str	r2, [sp, #8]
 80005f4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f8:	f042 0208 	orr.w	r2, r2, #8
 80005fc:	631a      	str	r2, [r3, #48]	; 0x30
 80005fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000600:	f002 0208 	and.w	r2, r2, #8
 8000604:	9203      	str	r2, [sp, #12]
 8000606:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800060a:	f042 0204 	orr.w	r2, r2, #4
 800060e:	631a      	str	r2, [r3, #48]	; 0x30
 8000610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000612:	f002 0204 	and.w	r2, r2, #4
 8000616:	9204      	str	r2, [sp, #16]
 8000618:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800061c:	f042 0201 	orr.w	r2, r2, #1
 8000620:	631a      	str	r2, [r3, #48]	; 0x30
 8000622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000624:	f002 0201 	and.w	r2, r2, #1
 8000628:	9205      	str	r2, [sp, #20]
 800062a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800062c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800062e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000632:	631a      	str	r2, [r3, #48]	; 0x30
 8000634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000636:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800063a:	9206      	str	r2, [sp, #24]
 800063c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800063e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000644:	631a      	str	r2, [r3, #48]	; 0x30
 8000646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000648:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800064c:	9207      	str	r2, [sp, #28]
 800064e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000652:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000656:	631a      	str	r2, [r3, #48]	; 0x30
 8000658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800065a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800065e:	9208      	str	r2, [sp, #32]
 8000660:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000664:	f042 0220 	orr.w	r2, r2, #32
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
 800066a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800066c:	f002 0220 	and.w	r2, r2, #32
 8000670:	9209      	str	r2, [sp, #36]	; 0x24
 8000672:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000676:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800067a:	631a      	str	r2, [r3, #48]	; 0x30
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000682:	930a      	str	r3, [sp, #40]	; 0x28
 8000684:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000686:	4622      	mov	r2, r4
 8000688:	2110      	movs	r1, #16
 800068a:	4879      	ldr	r0, [pc, #484]	; (8000870 <MX_GPIO_Init+0x2c4>)
 800068c:	f000 ff98 	bl	80015c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000690:	f8df b200 	ldr.w	fp, [pc, #512]	; 8000894 <MX_GPIO_Init+0x2e8>
 8000694:	4622      	mov	r2, r4
 8000696:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 800069a:	4658      	mov	r0, fp
 800069c:	f000 ff90 	bl	80015c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2120      	movs	r1, #32
 80006a4:	4873      	ldr	r0, [pc, #460]	; (8000874 <MX_GPIO_Init+0x2c8>)
 80006a6:	f000 ff8b 	bl	80015c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2108      	movs	r1, #8
 80006ae:	4872      	ldr	r0, [pc, #456]	; (8000878 <MX_GPIO_Init+0x2cc>)
 80006b0:	f000 ff86 	bl	80015c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ba:	4870      	ldr	r0, [pc, #448]	; (800087c <MX_GPIO_Init+0x2d0>)
 80006bc:	f000 ff80 	bl	80015c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|LED1_Pin, GPIO_PIN_RESET);
 80006c0:	4622      	mov	r2, r4
 80006c2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 80006c6:	486e      	ldr	r0, [pc, #440]	; (8000880 <MX_GPIO_Init+0x2d4>)
 80006c8:	f000 ff7a 	bl	80015c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 80006cc:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 8000898 <MX_GPIO_Init+0x2ec>
 80006d0:	4622      	mov	r2, r4
 80006d2:	2108      	movs	r1, #8
 80006d4:	4650      	mov	r0, sl
 80006d6:	f000 ff73 	bl	80015c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80006da:	f04f 0808 	mov.w	r8, #8
 80006de:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006e6:	a90b      	add	r1, sp, #44	; 0x2c
 80006e8:	4866      	ldr	r0, [pc, #408]	; (8000884 <MX_GPIO_Init+0x2d8>)
 80006ea:	f000 fdd3 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80006ee:	2304      	movs	r3, #4
 80006f0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f2:	2502      	movs	r5, #2
 80006f4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f8:	2603      	movs	r6, #3
 80006fa:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80006fc:	2309      	movs	r3, #9
 80006fe:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000700:	a90b      	add	r1, sp, #44	; 0x2c
 8000702:	4860      	ldr	r0, [pc, #384]	; (8000884 <MX_GPIO_Init+0x2d8>)
 8000704:	f000 fdc6 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000708:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800070c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000712:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000714:	230b      	movs	r3, #11
 8000716:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000718:	a90b      	add	r1, sp, #44	; 0x2c
 800071a:	4650      	mov	r0, sl
 800071c:	f000 fdba 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000720:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000724:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000726:	2312      	movs	r3, #18
 8000728:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800072e:	2304      	movs	r3, #4
 8000730:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000732:	a90b      	add	r1, sp, #44	; 0x2c
 8000734:	484e      	ldr	r0, [pc, #312]	; (8000870 <MX_GPIO_Init+0x2c4>)
 8000736:	f000 fdad 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800073a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800073e:	930b      	str	r3, [sp, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000744:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000746:	f04f 090a 	mov.w	r9, #10
 800074a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074e:	a90b      	add	r1, sp, #44	; 0x2c
 8000750:	4847      	ldr	r0, [pc, #284]	; (8000870 <MX_GPIO_Init+0x2c4>)
 8000752:	f000 fd9f 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8000756:	2310      	movs	r3, #16
 8000758:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2701      	movs	r7, #1
 800075c:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000762:	a90b      	add	r1, sp, #44	; 0x2c
 8000764:	4842      	ldr	r0, [pc, #264]	; (8000870 <MX_GPIO_Init+0x2c4>)
 8000766:	f000 fd95 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800076a:	2380      	movs	r3, #128	; 0x80
 800076c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000774:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000778:	a90b      	add	r1, sp, #44	; 0x2c
 800077a:	483e      	ldr	r0, [pc, #248]	; (8000874 <MX_GPIO_Init+0x2c8>)
 800077c:	f000 fd8a 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000780:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000784:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078a:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800078c:	230c      	movs	r3, #12
 800078e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000790:	a90b      	add	r1, sp, #44	; 0x2c
 8000792:	483d      	ldr	r0, [pc, #244]	; (8000888 <MX_GPIO_Init+0x2dc>)
 8000794:	f000 fd7e 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED2_Pin;
 8000798:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800079c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079e:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	a90b      	add	r1, sp, #44	; 0x2c
 80007a6:	4658      	mov	r0, fp
 80007a8:	f000 fd74 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80007ac:	2360      	movs	r3, #96	; 0x60
 80007ae:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007b6:	230d      	movs	r3, #13
 80007b8:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ba:	a90b      	add	r1, sp, #44	; 0x2c
 80007bc:	4831      	ldr	r0, [pc, #196]	; (8000884 <MX_GPIO_Init+0x2d8>)
 80007be:	f000 fd69 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80007c2:	2340      	movs	r3, #64	; 0x40
 80007c4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ca:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80007cc:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80007d0:	a90b      	add	r1, sp, #44	; 0x2c
 80007d2:	4827      	ldr	r0, [pc, #156]	; (8000870 <MX_GPIO_Init+0x2c4>)
 80007d4:	f000 fd5e 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80007d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007dc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007de:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007e2:	a90b      	add	r1, sp, #44	; 0x2c
 80007e4:	4829      	ldr	r0, [pc, #164]	; (800088c <MX_GPIO_Init+0x2e0>)
 80007e6:	f000 fd55 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80007ea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80007ee:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f4:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007f6:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	a90b      	add	r1, sp, #44	; 0x2c
 80007fc:	4658      	mov	r0, fp
 80007fe:	f000 fd49 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000802:	23f0      	movs	r3, #240	; 0xf0
 8000804:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800080c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000810:	a90b      	add	r1, sp, #44	; 0x2c
 8000812:	481a      	ldr	r0, [pc, #104]	; (800087c <MX_GPIO_Init+0x2d0>)
 8000814:	f000 fd3e 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000824:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000828:	a90b      	add	r1, sp, #44	; 0x2c
 800082a:	4650      	mov	r0, sl
 800082c:	f000 fd32 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000830:	2320      	movs	r3, #32
 8000832:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800083a:	a90b      	add	r1, sp, #44	; 0x2c
 800083c:	480d      	ldr	r0, [pc, #52]	; (8000874 <MX_GPIO_Init+0x2c8>)
 800083e:	f000 fd29 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000842:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800084c:	230d      	movs	r3, #13
 800084e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000850:	a90b      	add	r1, sp, #44	; 0x2c
 8000852:	4808      	ldr	r0, [pc, #32]	; (8000874 <MX_GPIO_Init+0x2c8>)
 8000854:	f000 fd1e 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 8000858:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_GPIO_Init+0x2e4>)
 800085e:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000860:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8000862:	a90b      	add	r1, sp, #44	; 0x2c
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_GPIO_Init+0x2d0>)
 8000866:	f000 fd15 	bl	8001294 <HAL_GPIO_Init>
 800086a:	e017      	b.n	800089c <MX_GPIO_Init+0x2f0>
 800086c:	40023800 	.word	0x40023800
 8000870:	40020400 	.word	0x40020400
 8000874:	40020c00 	.word	0x40020c00
 8000878:	40022800 	.word	0x40022800
 800087c:	40022000 	.word	0x40022000
 8000880:	40021c00 	.word	0x40021c00
 8000884:	40021000 	.word	0x40021000
 8000888:	40020800 	.word	0x40020800
 800088c:	40022400 	.word	0x40022400
 8000890:	10110000 	.word	0x10110000
 8000894:	40020000 	.word	0x40020000
 8000898:	40021800 	.word	0x40021800

  /*Configure GPIO pin : BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin;
 800089c:	2204      	movs	r2, #4
 800089e:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008a0:	4b89      	ldr	r3, [pc, #548]	; (8000ac8 <MX_GPIO_Init+0x51c>)
 80008a2:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a4:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(BUTTON0_GPIO_Port, &GPIO_InitStruct);
 80008a6:	a90b      	add	r1, sp, #44	; 0x2c
 80008a8:	4888      	ldr	r0, [pc, #544]	; (8000acc <MX_GPIO_Init+0x520>)
 80008aa:	f000 fcf3 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80008ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008b2:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b4:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80008b8:	a90b      	add	r1, sp, #44	; 0x2c
 80008ba:	4885      	ldr	r0, [pc, #532]	; (8000ad0 <MX_GPIO_Init+0x524>)
 80008bc:	f000 fcea 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80008c0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80008ca:	a90b      	add	r1, sp, #44	; 0x2c
 80008cc:	4881      	ldr	r0, [pc, #516]	; (8000ad4 <MX_GPIO_Init+0x528>)
 80008ce:	f000 fce1 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80008d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008d6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008de:	220d      	movs	r2, #13
 80008e0:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80008e2:	a90b      	add	r1, sp, #44	; 0x2c
 80008e4:	4650      	mov	r0, sl
 80008e6:	f000 fcd5 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008ea:	2210      	movs	r2, #16
 80008ec:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ee:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008f2:	a90b      	add	r1, sp, #44	; 0x2c
 80008f4:	4878      	ldr	r0, [pc, #480]	; (8000ad8 <MX_GPIO_Init+0x52c>)
 80008f6:	f000 fccd 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80008fa:	2204      	movs	r2, #4
 80008fc:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000902:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000904:	220c      	movs	r2, #12
 8000906:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000908:	a90b      	add	r1, sp, #44	; 0x2c
 800090a:	4873      	ldr	r0, [pc, #460]	; (8000ad8 <MX_GPIO_Init+0x52c>)
 800090c:	f000 fcc2 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000910:	f248 0304 	movw	r3, #32772	; 0x8004
 8000914:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000916:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800091a:	a90b      	add	r1, sp, #44	; 0x2c
 800091c:	486f      	ldr	r0, [pc, #444]	; (8000adc <MX_GPIO_Init+0x530>)
 800091e:	f000 fcb9 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000922:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000926:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 800092e:	a90b      	add	r1, sp, #44	; 0x2c
 8000930:	4866      	ldr	r0, [pc, #408]	; (8000acc <MX_GPIO_Init+0x520>)
 8000932:	f000 fcaf 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_PWR_EN_Pin LED1_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin|LED1_Pin;
 8000936:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 800093a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000942:	a90b      	add	r1, sp, #44	; 0x2c
 8000944:	4865      	ldr	r0, [pc, #404]	; (8000adc <MX_GPIO_Init+0x530>)
 8000946:	f000 fca5 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800094a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800094e:	930b      	str	r3, [sp, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000956:	220d      	movs	r2, #13
 8000958:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800095a:	a90b      	add	r1, sp, #44	; 0x2c
 800095c:	485f      	ldr	r0, [pc, #380]	; (8000adc <MX_GPIO_Init+0x530>)
 800095e:	f000 fc99 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000962:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000966:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000968:	4b5d      	ldr	r3, [pc, #372]	; (8000ae0 <MX_GPIO_Init+0x534>)
 800096a:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800096e:	a90b      	add	r1, sp, #44	; 0x2c
 8000970:	4856      	ldr	r0, [pc, #344]	; (8000acc <MX_GPIO_Init+0x520>)
 8000972:	f000 fc8f 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000976:	22c0      	movs	r2, #192	; 0xc0
 8000978:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000980:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000984:	a90b      	add	r1, sp, #44	; 0x2c
 8000986:	4852      	ldr	r0, [pc, #328]	; (8000ad0 <MX_GPIO_Init+0x524>)
 8000988:	f000 fc84 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800098c:	2210      	movs	r2, #16
 800098e:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000996:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800099a:	a90b      	add	r1, sp, #44	; 0x2c
 800099c:	484f      	ldr	r0, [pc, #316]	; (8000adc <MX_GPIO_Init+0x530>)
 800099e:	f000 fc79 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 80009a2:	22c0      	movs	r2, #192	; 0xc0
 80009a4:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a6:	4b4e      	ldr	r3, [pc, #312]	; (8000ae0 <MX_GPIO_Init+0x534>)
 80009a8:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009aa:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009ac:	a90b      	add	r1, sp, #44	; 0x2c
 80009ae:	4650      	mov	r0, sl
 80009b0:	f000 fc70 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80009b4:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80009b8:	930b      	str	r3, [sp, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ba:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009be:	a90b      	add	r1, sp, #44	; 0x2c
 80009c0:	4848      	ldr	r0, [pc, #288]	; (8000ae4 <MX_GPIO_Init+0x538>)
 80009c2:	f000 fc67 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80009c6:	2305      	movs	r3, #5
 80009c8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ce:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80009d0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d4:	a90b      	add	r1, sp, #44	; 0x2c
 80009d6:	483e      	ldr	r0, [pc, #248]	; (8000ad0 <MX_GPIO_Init+0x524>)
 80009d8:	f000 fc5c 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009dc:	2332      	movs	r3, #50	; 0x32
 80009de:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e4:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009e6:	230b      	movs	r3, #11
 80009e8:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ea:	a90b      	add	r1, sp, #44	; 0x2c
 80009ec:	4838      	ldr	r0, [pc, #224]	; (8000ad0 <MX_GPIO_Init+0x524>)
 80009ee:	f000 fc51 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009f2:	2304      	movs	r3, #4
 80009f4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80009fc:	2309      	movs	r3, #9
 80009fe:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	a90b      	add	r1, sp, #44	; 0x2c
 8000a02:	4839      	ldr	r0, [pc, #228]	; (8000ae8 <MX_GPIO_Init+0x53c>)
 8000a04:	f000 fc46 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000a08:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a0c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000a14:	2309      	movs	r3, #9
 8000a16:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a18:	a90b      	add	r1, sp, #44	; 0x2c
 8000a1a:	482f      	ldr	r0, [pc, #188]	; (8000ad8 <MX_GPIO_Init+0x52c>)
 8000a1c:	f000 fc3a 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8000a20:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	a90b      	add	r1, sp, #44	; 0x2c
 8000a2c:	4650      	mov	r0, sl
 8000a2e:	f000 fc31 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000a32:	2304      	movs	r3, #4
 8000a34:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a36:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	a90b      	add	r1, sp, #44	; 0x2c
 8000a3c:	4650      	mov	r0, sl
 8000a3e:	f000 fc29 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a42:	2386      	movs	r3, #134	; 0x86
 8000a44:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4a:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a4c:	230b      	movs	r3, #11
 8000a4e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a50:	a90b      	add	r1, sp, #44	; 0x2c
 8000a52:	4658      	mov	r0, fp
 8000a54:	f000 fc1e 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000a58:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a5a:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	a90b      	add	r1, sp, #44	; 0x2c
 8000a60:	4658      	mov	r0, fp
 8000a62:	f000 fc17 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000a66:	2350      	movs	r3, #80	; 0x50
 8000a68:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a70:	230d      	movs	r3, #13
 8000a72:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	a90b      	add	r1, sp, #44	; 0x2c
 8000a76:	4658      	mov	r0, fp
 8000a78:	f000 fc0c 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000a7c:	2328      	movs	r3, #40	; 0x28
 8000a7e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000a86:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	a90b      	add	r1, sp, #44	; 0x2c
 8000a8c:	4658      	mov	r0, fp
 8000a8e:	f000 fc01 	bl	8001294 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000a92:	4622      	mov	r2, r4
 8000a94:	4621      	mov	r1, r4
 8000a96:	4640      	mov	r0, r8
 8000a98:	f000 fb06 	bl	80010a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000a9c:	4640      	mov	r0, r8
 8000a9e:	f000 fb35 	bl	800110c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000aa2:	4622      	mov	r2, r4
 8000aa4:	4621      	mov	r1, r4
 8000aa6:	2009      	movs	r0, #9
 8000aa8:	f000 fafe 	bl	80010a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000aac:	2009      	movs	r0, #9
 8000aae:	f000 fb2d 	bl	800110c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ab2:	4622      	mov	r2, r4
 8000ab4:	4621      	mov	r1, r4
 8000ab6:	2017      	movs	r0, #23
 8000ab8:	f000 faf6 	bl	80010a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000abc:	2017      	movs	r0, #23
 8000abe:	f000 fb25 	bl	800110c <HAL_NVIC_EnableIRQ>

}
 8000ac2:	b011      	add	sp, #68	; 0x44
 8000ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ac8:	10310000 	.word	0x10310000
 8000acc:	40022000 	.word	0x40022000
 8000ad0:	40020800 	.word	0x40020800
 8000ad4:	40022800 	.word	0x40022800
 8000ad8:	40020c00 	.word	0x40020c00
 8000adc:	40021c00 	.word	0x40021c00
 8000ae0:	10110000 	.word	0x10110000
 8000ae4:	40021400 	.word	0x40021400
 8000ae8:	40020400 	.word	0x40020400

08000aec <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aee:	e7fe      	b.n	8000aee <Error_Handler+0x2>

08000af0 <MX_USART1_UART_Init>:
{
 8000af0:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000af2:	480b      	ldr	r0, [pc, #44]	; (8000b20 <MX_USART1_UART_Init+0x30>)
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_USART1_UART_Init+0x34>)
 8000af6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000af8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000afc:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000afe:	2300      	movs	r3, #0
 8000b00:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b02:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b04:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b06:	220c      	movs	r2, #12
 8000b08:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b0e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b10:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b12:	f002 faec 	bl	80030ee <HAL_UART_Init>
 8000b16:	b900      	cbnz	r0, 8000b1a <MX_USART1_UART_Init+0x2a>
}
 8000b18:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000b1a:	f7ff ffe7 	bl	8000aec <Error_Handler>
 8000b1e:	bf00      	nop
 8000b20:	20001444 	.word	0x20001444
 8000b24:	40011000 	.word	0x40011000

08000b28 <MX_SPI2_Init>:
{
 8000b28:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8000b2a:	480f      	ldr	r0, [pc, #60]	; (8000b68 <MX_SPI2_Init+0x40>)
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_SPI2_Init+0x44>)
 8000b2e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b30:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000b34:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b36:	2300      	movs	r3, #0
 8000b38:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b3a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b3e:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b40:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b42:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b48:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b4a:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b4c:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b4e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b50:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b52:	2207      	movs	r2, #7
 8000b54:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b56:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b58:	2308      	movs	r3, #8
 8000b5a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b5c:	f001 ffe0 	bl	8002b20 <HAL_SPI_Init>
 8000b60:	b900      	cbnz	r0, 8000b64 <MX_SPI2_Init+0x3c>
}
 8000b62:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000b64:	f7ff ffc2 	bl	8000aec <Error_Handler>
 8000b68:	20001354 	.word	0x20001354
 8000b6c:	40003800 	.word	0x40003800

08000b70 <MX_I2C3_Init>:
{
 8000b70:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 8000b72:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <MX_I2C3_Init+0x48>)
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_I2C3_Init+0x4c>)
 8000b76:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x00A0A3F7;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_I2C3_Init+0x50>)
 8000b7a:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b80:	2201      	movs	r2, #1
 8000b82:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b84:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000b86:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b88:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b8a:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b8c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b8e:	f000 fe97 	bl	80018c0 <HAL_I2C_Init>
 8000b92:	b950      	cbnz	r0, 8000baa <MX_I2C3_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b94:	2100      	movs	r1, #0
 8000b96:	4808      	ldr	r0, [pc, #32]	; (8000bb8 <MX_I2C3_Init+0x48>)
 8000b98:	f001 f8ba 	bl	8001d10 <HAL_I2CEx_ConfigAnalogFilter>
 8000b9c:	b938      	cbnz	r0, 8000bae <MX_I2C3_Init+0x3e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_I2C3_Init+0x48>)
 8000ba2:	f001 f8e3 	bl	8001d6c <HAL_I2CEx_ConfigDigitalFilter>
 8000ba6:	b920      	cbnz	r0, 8000bb2 <MX_I2C3_Init+0x42>
}
 8000ba8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000baa:	f7ff ff9f 	bl	8000aec <Error_Handler>
    Error_Handler();
 8000bae:	f7ff ff9d 	bl	8000aec <Error_Handler>
    Error_Handler();
 8000bb2:	f7ff ff9b 	bl	8000aec <Error_Handler>
 8000bb6:	bf00      	nop
 8000bb8:	200013f8 	.word	0x200013f8
 8000bbc:	40005c00 	.word	0x40005c00
 8000bc0:	00a0a3f7 	.word	0x00a0a3f7

08000bc4 <SystemClock_Config>:
{
 8000bc4:	b510      	push	{r4, lr}
 8000bc6:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc8:	2230      	movs	r2, #48	; 0x30
 8000bca:	2100      	movs	r1, #0
 8000bcc:	a828      	add	r0, sp, #160	; 0xa0
 8000bce:	f009 f909 	bl	8009de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd2:	2400      	movs	r4, #0
 8000bd4:	9423      	str	r4, [sp, #140]	; 0x8c
 8000bd6:	9424      	str	r4, [sp, #144]	; 0x90
 8000bd8:	9425      	str	r4, [sp, #148]	; 0x94
 8000bda:	9426      	str	r4, [sp, #152]	; 0x98
 8000bdc:	9427      	str	r4, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bde:	2284      	movs	r2, #132	; 0x84
 8000be0:	4621      	mov	r1, r4
 8000be2:	a802      	add	r0, sp, #8
 8000be4:	f009 f8fe 	bl	8009de4 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be8:	4b2a      	ldr	r3, [pc, #168]	; (8000c94 <SystemClock_Config+0xd0>)
 8000bea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bf0:	641a      	str	r2, [r3, #64]	; 0x40
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	9300      	str	r3, [sp, #0]
 8000bfa:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bfc:	4a26      	ldr	r2, [pc, #152]	; (8000c98 <SystemClock_Config+0xd4>)
 8000bfe:	6813      	ldr	r3, [r2, #0]
 8000c00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c08:	6013      	str	r3, [r2, #0]
 8000c0a:	6813      	ldr	r3, [r2, #0]
 8000c0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c10:	9301      	str	r3, [sp, #4]
 8000c12:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c14:	2302      	movs	r3, #2
 8000c16:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c18:	2201      	movs	r2, #1
 8000c1a:	922b      	str	r2, [sp, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c1c:	2210      	movs	r2, #16
 8000c1e:	922c      	str	r2, [sp, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c20:	932e      	str	r3, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c22:	942f      	str	r4, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 10;
 8000c24:	220a      	movs	r2, #10
 8000c26:	9230      	str	r2, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 210;
 8000c28:	22d2      	movs	r2, #210	; 0xd2
 8000c2a:	9231      	str	r2, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c2c:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c2e:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c30:	a828      	add	r0, sp, #160	; 0xa0
 8000c32:	f001 f95b 	bl	8001eec <HAL_RCC_OscConfig>
 8000c36:	bb38      	cbnz	r0, 8000c88 <SystemClock_Config+0xc4>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c38:	230f      	movs	r3, #15
 8000c3a:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c48:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4e:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c50:	2105      	movs	r1, #5
 8000c52:	a823      	add	r0, sp, #140	; 0x8c
 8000c54:	f001 fbb4 	bl	80023c0 <HAL_RCC_ClockConfig>
 8000c58:	b9c0      	cbnz	r0, 8000c8c <SystemClock_Config+0xc8>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <SystemClock_Config+0xd8>)
 8000c5c:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000c5e:	23c0      	movs	r3, #192	; 0xc0
 8000c60:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8000c62:	2307      	movs	r3, #7
 8000c64:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000c66:	2302      	movs	r3, #2
 8000c68:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000c6e:	2201      	movs	r2, #1
 8000c70:	920c      	str	r2, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000c72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c76:	920d      	str	r2, [sp, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c78:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000c7a:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c7c:	a802      	add	r0, sp, #8
 8000c7e:	f001 fc7b 	bl	8002578 <HAL_RCCEx_PeriphCLKConfig>
 8000c82:	b928      	cbnz	r0, 8000c90 <SystemClock_Config+0xcc>
}
 8000c84:	b034      	add	sp, #208	; 0xd0
 8000c86:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000c88:	f7ff ff30 	bl	8000aec <Error_Handler>
    Error_Handler();
 8000c8c:	f7ff ff2e 	bl	8000aec <Error_Handler>
    Error_Handler();
 8000c90:	f7ff ff2c 	bl	8000aec <Error_Handler>
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40007000 	.word	0x40007000
 8000c9c:	00010048 	.word	0x00010048

08000ca0 <main>:
{
 8000ca0:	b508      	push	{r3, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ca2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ca6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000caa:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <main+0xa8>)
 8000cac:	2100      	movs	r1, #0
 8000cae:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000cb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cb6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000cba:	695a      	ldr	r2, [r3, #20]
 8000cbc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000cc0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cc6:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000cca:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000cce:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000cd2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000cd6:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8000cda:	e000      	b.n	8000cde <main+0x3e>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8000cdc:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cde:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ce2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000ce6:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8000cea:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000cee:	4916      	ldr	r1, [pc, #88]	; (8000d48 <main+0xa8>)
 8000cf0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	3a01      	subs	r2, #1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1f2      	bne.n	8000ce2 <main+0x42>
    } while(sets-- != 0U);
 8000cfc:	1e43      	subs	r3, r0, #1
 8000cfe:	2800      	cmp	r0, #0
 8000d00:	d1ec      	bne.n	8000cdc <main+0x3c>
 8000d02:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d06:	694b      	ldr	r3, [r1, #20]
 8000d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d0c:	614b      	str	r3, [r1, #20]
 8000d0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d12:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000d16:	f000 f98d 	bl	8001034 <HAL_Init>
  SystemClock_Config();
 8000d1a:	f7ff ff53 	bl	8000bc4 <SystemClock_Config>
  MX_GPIO_Init();
 8000d1e:	f7ff fc45 	bl	80005ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d22:	f7ff fee5 	bl	8000af0 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000d26:	f7ff feff 	bl	8000b28 <MX_SPI2_Init>
  MX_I2C3_Init();
 8000d2a:	f7ff ff21 	bl	8000b70 <MX_I2C3_Init>
  MX_TouchGFX_Init();
 8000d2e:	f002 fb49 	bl	80033c4 <MX_TouchGFX_Init>
  XF_initialize(10);
 8000d32:	200a      	movs	r0, #10
 8000d34:	f003 feda 	bl	8004aec <XF_initialize>
  Factory_initialize();
 8000d38:	f002 fa0e 	bl	8003158 <Factory_initialize>
  Factory_build();
 8000d3c:	f002 fa10 	bl	8003160 <Factory_build>
  XF_exec();
 8000d40:	f003 ff02 	bl	8004b48 <XF_exec>
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <main+0xa4>
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <HAL_MspInit+0x2c>)
 8000d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d56:	641a      	str	r2, [r3, #64]	; 0x40
 8000d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d5a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000d5e:	9200      	str	r2, [sp, #0]
 8000d60:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d68:	645a      	str	r2, [r3, #68]	; 0x44
 8000d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d70:	9301      	str	r3, [sp, #4]
 8000d72:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d74:	b002      	add	sp, #8
 8000d76:	4770      	bx	lr
 8000d78:	40023800 	.word	0x40023800

08000d7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d7c:	b510      	push	{r4, lr}
 8000d7e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	2300      	movs	r3, #0
 8000d82:	9303      	str	r3, [sp, #12]
 8000d84:	9304      	str	r3, [sp, #16]
 8000d86:	9305      	str	r3, [sp, #20]
 8000d88:	9306      	str	r3, [sp, #24]
 8000d8a:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C3)
 8000d8c:	6802      	ldr	r2, [r0, #0]
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <HAL_I2C_MspInit+0x64>)
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d001      	beq.n	8000d98 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000d94:	b008      	add	sp, #32
 8000d96:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d98:	4c12      	ldr	r4, [pc, #72]	; (8000de4 <HAL_I2C_MspInit+0x68>)
 8000d9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da0:	6323      	str	r3, [r4, #48]	; 0x30
 8000da2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000dac:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000db0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db2:	2312      	movs	r3, #18
 8000db4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dc2:	a903      	add	r1, sp, #12
 8000dc4:	4808      	ldr	r0, [pc, #32]	; (8000de8 <HAL_I2C_MspInit+0x6c>)
 8000dc6:	f000 fa65 	bl	8001294 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000dca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000dcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000dd0:	6423      	str	r3, [r4, #64]	; 0x40
 8000dd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000dd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dd8:	9302      	str	r3, [sp, #8]
 8000dda:	9b02      	ldr	r3, [sp, #8]
}
 8000ddc:	e7da      	b.n	8000d94 <HAL_I2C_MspInit+0x18>
 8000dde:	bf00      	nop
 8000de0:	40005c00 	.word	0x40005c00
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40021c00 	.word	0x40021c00

08000dec <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C3)
 8000dec:	6802      	ldr	r2, [r0, #0]
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_I2C_MspDeInit+0x2c>)
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d000      	beq.n	8000df6 <HAL_I2C_MspDeInit+0xa>
 8000df4:	4770      	bx	lr
{
 8000df6:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000df8:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_I2C_MspDeInit+0x30>)
 8000dfa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000dfc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e00:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8000e02:	4c07      	ldr	r4, [pc, #28]	; (8000e20 <HAL_I2C_MspDeInit+0x34>)
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	4620      	mov	r0, r4
 8000e08:	f000 fb34 	bl	8001474 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8000e0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e10:	4620      	mov	r0, r4
 8000e12:	f000 fb2f 	bl	8001474 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8000e16:	bd10      	pop	{r4, pc}
 8000e18:	40005c00 	.word	0x40005c00
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40021c00 	.word	0x40021c00

08000e24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e24:	b570      	push	{r4, r5, r6, lr}
 8000e26:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	2300      	movs	r3, #0
 8000e2a:	9303      	str	r3, [sp, #12]
 8000e2c:	9304      	str	r3, [sp, #16]
 8000e2e:	9305      	str	r3, [sp, #20]
 8000e30:	9306      	str	r3, [sp, #24]
 8000e32:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 8000e34:	6802      	ldr	r2, [r0, #0]
 8000e36:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <HAL_SPI_MspInit+0x88>)
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d001      	beq.n	8000e40 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e3c:	b008      	add	sp, #32
 8000e3e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e40:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e4a:	641a      	str	r2, [r3, #64]	; 0x40
 8000e4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e4e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000e52:	9200      	str	r2, [sp, #0]
 8000e54:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e5c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e60:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000e64:	9201      	str	r2, [sp, #4]
 8000e66:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e6a:	f042 0202 	orr.w	r2, r2, #2
 8000e6e:	631a      	str	r2, [r3, #48]	; 0x30
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	9302      	str	r3, [sp, #8]
 8000e78:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000e7a:	2502      	movs	r5, #2
 8000e7c:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2400      	movs	r4, #0
 8000e82:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e86:	2605      	movs	r6, #5
 8000e88:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	a903      	add	r1, sp, #12
 8000e8c:	4808      	ldr	r0, [pc, #32]	; (8000eb0 <HAL_SPI_MspInit+0x8c>)
 8000e8e:	f000 fa01 	bl	8001294 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000e92:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e96:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e9e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea0:	a903      	add	r1, sp, #12
 8000ea2:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <HAL_SPI_MspInit+0x90>)
 8000ea4:	f000 f9f6 	bl	8001294 <HAL_GPIO_Init>
}
 8000ea8:	e7c8      	b.n	8000e3c <HAL_SPI_MspInit+0x18>
 8000eaa:	bf00      	nop
 8000eac:	40003800 	.word	0x40003800
 8000eb0:	40022000 	.word	0x40022000
 8000eb4:	40020400 	.word	0x40020400

08000eb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb8:	b570      	push	{r4, r5, r6, lr}
 8000eba:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	9303      	str	r3, [sp, #12]
 8000ec0:	9304      	str	r3, [sp, #16]
 8000ec2:	9305      	str	r3, [sp, #20]
 8000ec4:	9306      	str	r3, [sp, #24]
 8000ec6:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000ec8:	6802      	ldr	r2, [r0, #0]
 8000eca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ece:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d001      	beq.n	8000eda <HAL_UART_MspInit+0x22>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ed6:	b008      	add	sp, #32
 8000ed8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eda:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8000ede:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ee0:	f042 0210 	orr.w	r2, r2, #16
 8000ee4:	645a      	str	r2, [r3, #68]	; 0x44
 8000ee6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ee8:	f002 0210 	and.w	r2, r2, #16
 8000eec:	9200      	str	r2, [sp, #0]
 8000eee:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ef2:	f042 0202 	orr.w	r2, r2, #2
 8000ef6:	631a      	str	r2, [r3, #48]	; 0x30
 8000ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000efa:	f002 0202 	and.w	r2, r2, #2
 8000efe:	9201      	str	r2, [sp, #4]
 8000f00:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f04:	f042 0201 	orr.w	r2, r2, #1
 8000f08:	631a      	str	r2, [r3, #48]	; 0x30
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	9302      	str	r3, [sp, #8]
 8000f12:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2602      	movs	r6, #2
 8000f1a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f22:	2507      	movs	r5, #7
 8000f24:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000f26:	a903      	add	r1, sp, #12
 8000f28:	4807      	ldr	r0, [pc, #28]	; (8000f48 <HAL_UART_MspInit+0x90>)
 8000f2a:	f000 f9b3 	bl	8001294 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000f2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f32:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f3a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	a903      	add	r1, sp, #12
 8000f3e:	4803      	ldr	r0, [pc, #12]	; (8000f4c <HAL_UART_MspInit+0x94>)
 8000f40:	f000 f9a8 	bl	8001294 <HAL_GPIO_Init>
}
 8000f44:	e7c7      	b.n	8000ed6 <HAL_UART_MspInit+0x1e>
 8000f46:	bf00      	nop
 8000f48:	40020400 	.word	0x40020400
 8000f4c:	40020000 	.word	0x40020000

08000f50 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <NMI_Handler>

08000f52 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <HardFault_Handler>

08000f54 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler>

08000f56 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <BusFault_Handler>

08000f58 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <UsageFault_Handler>

08000f5a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f5a:	4770      	bx	lr

08000f5c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5c:	4770      	bx	lr

08000f5e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5e:	4770      	bx	lr

08000f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f60:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
  // SysTick handler gets called every millisecond (is given by code
  // generated by STM32CubeMX). Check which interval is needed by the
  // XF (typically slower) and call XF_tick() accordingly.
  if (XF_isRunning() &&
 8000f62:	f003 ffdc 	bl	8004f1e <XF_isRunning>
 8000f66:	b910      	cbnz	r0, 8000f6e <SysTick_Handler+0xe>
      (HAL_GetTick() % XF_tickIntervalInMilliseconds()) == 0)
  {
	XF_tick();
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f68:	f000 f87a 	bl	8001060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6c:	bd10      	pop	{r4, pc}
      (HAL_GetTick() % XF_tickIntervalInMilliseconds()) == 0)
 8000f6e:	f000 f883 	bl	8001078 <HAL_GetTick>
 8000f72:	4604      	mov	r4, r0
 8000f74:	f003 ffcc 	bl	8004f10 <XF_tickIntervalInMilliseconds>
 8000f78:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f7c:	fb00 4013 	mls	r0, r0, r3, r4
  if (XF_isRunning() &&
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d1f1      	bne.n	8000f68 <SysTick_Handler+0x8>
	XF_tick();
 8000f84:	f003 ffb0 	bl	8004ee8 <XF_tick>
 8000f88:	e7ee      	b.n	8000f68 <SysTick_Handler+0x8>

08000f8a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000f8a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000f8c:	2004      	movs	r0, #4
 8000f8e:	f000 fb1d 	bl	80015cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000f92:	bd08      	pop	{r3, pc}

08000f94 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000f94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000f96:	2008      	movs	r0, #8
 8000f98:	f000 fb18 	bl	80015cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000f9c:	bd08      	pop	{r3, pc}

08000f9e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f9e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000fa0:	2040      	movs	r0, #64	; 0x40
 8000fa2:	f000 fb13 	bl	80015cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000fa6:	2080      	movs	r0, #128	; 0x80
 8000fa8:	f000 fb10 	bl	80015cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fac:	bd08      	pop	{r3, pc}
	...

08000fb0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8000fb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8000fb2:	4802      	ldr	r0, [pc, #8]	; (8000fbc <LTDC_IRQHandler+0xc>)
 8000fb4:	f000 ff08 	bl	8001dc8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8000fb8:	bd08      	pop	{r3, pc}
 8000fba:	bf00      	nop
 8000fbc:	200012ac 	.word	0x200012ac

08000fc0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8000fc0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8000fc2:	4802      	ldr	r0, [pc, #8]	; (8000fcc <DMA2D_IRQHandler+0xc>)
 8000fc4:	f000 f8c8 	bl	8001158 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8000fc8:	bd08      	pop	{r3, pc}
 8000fca:	bf00      	nop
 8000fcc:	200013b8 	.word	0x200013b8

08000fd0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <SystemInit+0x18>)
 8000fd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000fd6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000fda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fe2:	609a      	str	r2, [r3, #8]
#endif
}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b510      	push	{r4, lr}
 8000fee:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_InitTick+0x40>)
 8000ff2:	7818      	ldrb	r0, [r3, #0]
 8000ff4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff8:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ffc:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <HAL_InitTick+0x44>)
 8000ffe:	6810      	ldr	r0, [r2, #0]
 8001000:	fbb0 f0f3 	udiv	r0, r0, r3
 8001004:	f000 f890 	bl	8001128 <HAL_SYSTICK_Config>
 8001008:	b968      	cbnz	r0, 8001026 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100a:	2c0f      	cmp	r4, #15
 800100c:	d901      	bls.n	8001012 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800100e:	2001      	movs	r0, #1
 8001010:	e00a      	b.n	8001028 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001012:	2200      	movs	r2, #0
 8001014:	4621      	mov	r1, r4
 8001016:	f04f 30ff 	mov.w	r0, #4294967295
 800101a:	f000 f845 	bl	80010a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800101e:	4b03      	ldr	r3, [pc, #12]	; (800102c <HAL_InitTick+0x40>)
 8001020:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8001022:	2000      	movs	r0, #0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001026:	2001      	movs	r0, #1
}
 8001028:	bd10      	pop	{r4, pc}
 800102a:	bf00      	nop
 800102c:	20000004 	.word	0x20000004
 8001030:	20000000 	.word	0x20000000

08001034 <HAL_Init>:
{
 8001034:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <HAL_Init+0x28>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800103e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001046:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001048:	2003      	movs	r0, #3
 800104a:	f000 f81b 	bl	8001084 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800104e:	2000      	movs	r0, #0
 8001050:	f7ff ffcc 	bl	8000fec <HAL_InitTick>
  HAL_MspInit();
 8001054:	f7ff fe7a 	bl	8000d4c <HAL_MspInit>
}
 8001058:	2000      	movs	r0, #0
 800105a:	bd08      	pop	{r3, pc}
 800105c:	40023c00 	.word	0x40023c00

08001060 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001060:	4a03      	ldr	r2, [pc, #12]	; (8001070 <HAL_IncTick+0x10>)
 8001062:	6811      	ldr	r1, [r2, #0]
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <HAL_IncTick+0x14>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	440b      	add	r3, r1
 800106a:	6013      	str	r3, [r2, #0]
}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20001520 	.word	0x20001520
 8001074:	20000004 	.word	0x20000004

08001078 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001078:	4b01      	ldr	r3, [pc, #4]	; (8001080 <HAL_GetTick+0x8>)
 800107a:	6818      	ldr	r0, [r3, #0]
}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20001520 	.word	0x20001520

08001084 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001084:	4906      	ldr	r1, [pc, #24]	; (80010a0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8001086:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001088:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800108c:	041b      	lsls	r3, r3, #16
 800108e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001090:	0200      	lsls	r0, r0, #8
 8001092:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001096:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001098:	4a02      	ldr	r2, [pc, #8]	; (80010a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800109a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 800109c:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00
 80010a4:	05fa0000 	.word	0x05fa0000

080010a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a8:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_NVIC_SetPriority+0x58>)
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b2:	f1c3 0407 	rsb	r4, r3, #7
 80010b6:	2c04      	cmp	r4, #4
 80010b8:	bf28      	it	cs
 80010ba:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010bc:	1d1d      	adds	r5, r3, #4
 80010be:	2d06      	cmp	r5, #6
 80010c0:	d914      	bls.n	80010ec <HAL_NVIC_SetPriority+0x44>
 80010c2:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	f04f 35ff 	mov.w	r5, #4294967295
 80010c8:	fa05 f404 	lsl.w	r4, r5, r4
 80010cc:	ea21 0104 	bic.w	r1, r1, r4
 80010d0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d2:	fa05 f303 	lsl.w	r3, r5, r3
 80010d6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010da:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80010dc:	2800      	cmp	r0, #0
 80010de:	db07      	blt.n	80010f0 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e0:	0109      	lsls	r1, r1, #4
 80010e2:	b2c9      	uxtb	r1, r1
 80010e4:	4b07      	ldr	r3, [pc, #28]	; (8001104 <HAL_NVIC_SetPriority+0x5c>)
 80010e6:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80010e8:	bc30      	pop	{r4, r5}
 80010ea:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ec:	2300      	movs	r3, #0
 80010ee:	e7e9      	b.n	80010c4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f0:	f000 000f 	and.w	r0, r0, #15
 80010f4:	0109      	lsls	r1, r1, #4
 80010f6:	b2c9      	uxtb	r1, r1
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <HAL_NVIC_SetPriority+0x60>)
 80010fa:	5419      	strb	r1, [r3, r0]
 80010fc:	e7f4      	b.n	80010e8 <HAL_NVIC_SetPriority+0x40>
 80010fe:	bf00      	nop
 8001100:	e000ed00 	.word	0xe000ed00
 8001104:	e000e400 	.word	0xe000e400
 8001108:	e000ed14 	.word	0xe000ed14

0800110c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800110c:	2800      	cmp	r0, #0
 800110e:	db07      	blt.n	8001120 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001110:	f000 021f 	and.w	r2, r0, #31
 8001114:	0940      	lsrs	r0, r0, #5
 8001116:	2301      	movs	r3, #1
 8001118:	4093      	lsls	r3, r2
 800111a:	4a02      	ldr	r2, [pc, #8]	; (8001124 <HAL_NVIC_EnableIRQ+0x18>)
 800111c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000e100 	.word	0xe000e100

08001128 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001128:	3801      	subs	r0, #1
 800112a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800112e:	d20a      	bcs.n	8001146 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_SYSTICK_Config+0x24>)
 8001132:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	4a06      	ldr	r2, [pc, #24]	; (8001150 <HAL_SYSTICK_Config+0x28>)
 8001136:	21f0      	movs	r1, #240	; 0xf0
 8001138:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800113c:	2000      	movs	r0, #0
 800113e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001146:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001154:	4770      	bx	lr

08001156 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001156:	4770      	bx	lr

08001158 <HAL_DMA2D_IRQHandler>:
{
 8001158:	b570      	push	{r4, r5, r6, lr}
 800115a:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800115c:	6803      	ldr	r3, [r0, #0]
 800115e:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001160:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001162:	f015 0f01 	tst.w	r5, #1
 8001166:	d016      	beq.n	8001196 <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001168:	f416 7f80 	tst.w	r6, #256	; 0x100
 800116c:	d013      	beq.n	8001196 <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001174:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001176:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	63c3      	str	r3, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800117e:	6803      	ldr	r3, [r0, #0]
 8001180:	2201      	movs	r2, #1
 8001182:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001184:	2304      	movs	r3, #4
 8001186:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800118a:	2300      	movs	r3, #0
 800118c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8001190:	6943      	ldr	r3, [r0, #20]
 8001192:	b103      	cbz	r3, 8001196 <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 8001194:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001196:	f015 0f20 	tst.w	r5, #32
 800119a:	d018      	beq.n	80011ce <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800119c:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 80011a0:	d015      	beq.n	80011ce <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80011a2:	6822      	ldr	r2, [r4, #0]
 80011a4:	6813      	ldr	r3, [r2, #0]
 80011a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80011aa:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80011ac:	6823      	ldr	r3, [r4, #0]
 80011ae:	2220      	movs	r2, #32
 80011b0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80011b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80011ba:	2304      	movs	r3, #4
 80011bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80011c0:	2300      	movs	r3, #0
 80011c2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 80011c6:	6963      	ldr	r3, [r4, #20]
 80011c8:	b10b      	cbz	r3, 80011ce <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 80011ca:	4620      	mov	r0, r4
 80011cc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80011ce:	f015 0f08 	tst.w	r5, #8
 80011d2:	d018      	beq.n	8001206 <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80011d4:	f416 6f00 	tst.w	r6, #2048	; 0x800
 80011d8:	d015      	beq.n	8001206 <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80011da:	6822      	ldr	r2, [r4, #0]
 80011dc:	6813      	ldr	r3, [r2, #0]
 80011de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80011e2:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80011e4:	6823      	ldr	r3, [r4, #0]
 80011e6:	2208      	movs	r2, #8
 80011e8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80011ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80011f2:	2304      	movs	r3, #4
 80011f4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80011f8:	2300      	movs	r3, #0
 80011fa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 80011fe:	6963      	ldr	r3, [r4, #20]
 8001200:	b10b      	cbz	r3, 8001206 <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 8001202:	4620      	mov	r0, r4
 8001204:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001206:	f015 0f04 	tst.w	r5, #4
 800120a:	d002      	beq.n	8001212 <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800120c:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8001210:	d120      	bne.n	8001254 <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001212:	f015 0f02 	tst.w	r5, #2
 8001216:	d016      	beq.n	8001246 <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001218:	f416 7f00 	tst.w	r6, #512	; 0x200
 800121c:	d013      	beq.n	8001246 <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800121e:	6822      	ldr	r2, [r4, #0]
 8001220:	6813      	ldr	r3, [r2, #0]
 8001222:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001226:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001228:	6823      	ldr	r3, [r4, #0]
 800122a:	2202      	movs	r2, #2
 800122c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800122e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001230:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001232:	2301      	movs	r3, #1
 8001234:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001238:	2300      	movs	r3, #0
 800123a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferCpltCallback != NULL)
 800123e:	6923      	ldr	r3, [r4, #16]
 8001240:	b10b      	cbz	r3, 8001246 <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 8001242:	4620      	mov	r0, r4
 8001244:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001246:	f015 0f10 	tst.w	r5, #16
 800124a:	d002      	beq.n	8001252 <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800124c:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8001250:	d10c      	bne.n	800126c <HAL_DMA2D_IRQHandler+0x114>
}
 8001252:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001254:	6822      	ldr	r2, [r4, #0]
 8001256:	6813      	ldr	r3, [r2, #0]
 8001258:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800125c:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800125e:	6823      	ldr	r3, [r4, #0]
 8001260:	2204      	movs	r2, #4
 8001262:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001264:	4620      	mov	r0, r4
 8001266:	f7ff ff75 	bl	8001154 <HAL_DMA2D_LineEventCallback>
 800126a:	e7d2      	b.n	8001212 <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800126c:	6822      	ldr	r2, [r4, #0]
 800126e:	6813      	ldr	r3, [r2, #0]
 8001270:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001274:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001276:	6823      	ldr	r3, [r4, #0]
 8001278:	2210      	movs	r2, #16
 800127a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800127c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800127e:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001280:	2301      	movs	r3, #1
 8001282:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001286:	2300      	movs	r3, #0
 8001288:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800128c:	4620      	mov	r0, r4
 800128e:	f7ff ff62 	bl	8001156 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8001292:	e7de      	b.n	8001252 <HAL_DMA2D_IRQHandler+0xfa>

08001294 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001294:	2300      	movs	r3, #0
 8001296:	2b0f      	cmp	r3, #15
 8001298:	f200 80e3 	bhi.w	8001462 <HAL_GPIO_Init+0x1ce>
{
 800129c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800129e:	b083      	sub	sp, #12
 80012a0:	e039      	b.n	8001316 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012a2:	2209      	movs	r2, #9
 80012a4:	e000      	b.n	80012a8 <HAL_GPIO_Init+0x14>
 80012a6:	2200      	movs	r2, #0
 80012a8:	40b2      	lsls	r2, r6
 80012aa:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80012ac:	3402      	adds	r4, #2
 80012ae:	4e6d      	ldr	r6, [pc, #436]	; (8001464 <HAL_GPIO_Init+0x1d0>)
 80012b0:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012b4:	4a6c      	ldr	r2, [pc, #432]	; (8001468 <HAL_GPIO_Init+0x1d4>)
 80012b6:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80012b8:	43ea      	mvns	r2, r5
 80012ba:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012be:	684f      	ldr	r7, [r1, #4]
 80012c0:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80012c4:	d001      	beq.n	80012ca <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80012c6:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 80012ca:	4c67      	ldr	r4, [pc, #412]	; (8001468 <HAL_GPIO_Init+0x1d4>)
 80012cc:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80012ce:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80012d0:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012d4:	684f      	ldr	r7, [r1, #4]
 80012d6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80012da:	d001      	beq.n	80012e0 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80012dc:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80012e0:	4c61      	ldr	r4, [pc, #388]	; (8001468 <HAL_GPIO_Init+0x1d4>)
 80012e2:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012e4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80012e6:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ea:	684f      	ldr	r7, [r1, #4]
 80012ec:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80012f0:	d001      	beq.n	80012f6 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80012f2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80012f6:	4c5c      	ldr	r4, [pc, #368]	; (8001468 <HAL_GPIO_Init+0x1d4>)
 80012f8:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80012fa:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80012fc:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012fe:	684e      	ldr	r6, [r1, #4]
 8001300:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001304:	d001      	beq.n	800130a <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8001306:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 800130a:	4c57      	ldr	r4, [pc, #348]	; (8001468 <HAL_GPIO_Init+0x1d4>)
 800130c:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800130e:	3301      	adds	r3, #1
 8001310:	2b0f      	cmp	r3, #15
 8001312:	f200 80a4 	bhi.w	800145e <HAL_GPIO_Init+0x1ca>
    ioposition = ((uint32_t)0x01) << position;
 8001316:	2201      	movs	r2, #1
 8001318:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800131a:	680c      	ldr	r4, [r1, #0]
 800131c:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8001320:	ea32 0404 	bics.w	r4, r2, r4
 8001324:	d1f3      	bne.n	800130e <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001326:	684c      	ldr	r4, [r1, #4]
 8001328:	1e66      	subs	r6, r4, #1
 800132a:	2c11      	cmp	r4, #17
 800132c:	bf18      	it	ne
 800132e:	2e01      	cmpne	r6, #1
 8001330:	d901      	bls.n	8001336 <HAL_GPIO_Init+0xa2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001332:	2c12      	cmp	r4, #18
 8001334:	d112      	bne.n	800135c <HAL_GPIO_Init+0xc8>
        temp = GPIOx->OSPEEDR; 
 8001336:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001338:	005f      	lsls	r7, r3, #1
 800133a:	2403      	movs	r4, #3
 800133c:	40bc      	lsls	r4, r7
 800133e:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001342:	68cc      	ldr	r4, [r1, #12]
 8001344:	40bc      	lsls	r4, r7
 8001346:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8001348:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800134a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800134c:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001350:	684c      	ldr	r4, [r1, #4]
 8001352:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001356:	409a      	lsls	r2, r3
 8001358:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800135a:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800135c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800135e:	005e      	lsls	r6, r3, #1
 8001360:	2403      	movs	r4, #3
 8001362:	40b4      	lsls	r4, r6
 8001364:	43e2      	mvns	r2, r4
 8001366:	ea27 0704 	bic.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800136a:	688c      	ldr	r4, [r1, #8]
 800136c:	40b4      	lsls	r4, r6
 800136e:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8001370:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001372:	684c      	ldr	r4, [r1, #4]
 8001374:	2c12      	cmp	r4, #18
 8001376:	bf18      	it	ne
 8001378:	2c02      	cmpne	r4, #2
 800137a:	d113      	bne.n	80013a4 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3];
 800137c:	08df      	lsrs	r7, r3, #3
 800137e:	3708      	adds	r7, #8
 8001380:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001384:	f003 0407 	and.w	r4, r3, #7
 8001388:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800138c:	240f      	movs	r4, #15
 800138e:	fa04 f40c 	lsl.w	r4, r4, ip
 8001392:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001396:	690c      	ldr	r4, [r1, #16]
 8001398:	fa04 f40c 	lsl.w	r4, r4, ip
 800139c:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 80013a0:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 80013a4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80013a6:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013a8:	684a      	ldr	r2, [r1, #4]
 80013aa:	f002 0203 	and.w	r2, r2, #3
 80013ae:	40b2      	lsls	r2, r6
 80013b0:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80013b2:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013b4:	684a      	ldr	r2, [r1, #4]
 80013b6:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80013ba:	d0a8      	beq.n	800130e <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013bc:	4a2b      	ldr	r2, [pc, #172]	; (800146c <HAL_GPIO_Init+0x1d8>)
 80013be:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80013c0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80013c4:	6454      	str	r4, [r2, #68]	; 0x44
 80013c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80013c8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80013cc:	9201      	str	r2, [sp, #4]
 80013ce:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80013d0:	089c      	lsrs	r4, r3, #2
 80013d2:	1ca6      	adds	r6, r4, #2
 80013d4:	4a23      	ldr	r2, [pc, #140]	; (8001464 <HAL_GPIO_Init+0x1d0>)
 80013d6:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80013da:	f003 0203 	and.w	r2, r3, #3
 80013de:	0096      	lsls	r6, r2, #2
 80013e0:	220f      	movs	r2, #15
 80013e2:	40b2      	lsls	r2, r6
 80013e4:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013e8:	4a21      	ldr	r2, [pc, #132]	; (8001470 <HAL_GPIO_Init+0x1dc>)
 80013ea:	4290      	cmp	r0, r2
 80013ec:	f43f af5b 	beq.w	80012a6 <HAL_GPIO_Init+0x12>
 80013f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013f4:	4290      	cmp	r0, r2
 80013f6:	d022      	beq.n	800143e <HAL_GPIO_Init+0x1aa>
 80013f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013fc:	4290      	cmp	r0, r2
 80013fe:	d020      	beq.n	8001442 <HAL_GPIO_Init+0x1ae>
 8001400:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001404:	4290      	cmp	r0, r2
 8001406:	d01e      	beq.n	8001446 <HAL_GPIO_Init+0x1b2>
 8001408:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800140c:	4290      	cmp	r0, r2
 800140e:	d01c      	beq.n	800144a <HAL_GPIO_Init+0x1b6>
 8001410:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001414:	4290      	cmp	r0, r2
 8001416:	d01a      	beq.n	800144e <HAL_GPIO_Init+0x1ba>
 8001418:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800141c:	4290      	cmp	r0, r2
 800141e:	d018      	beq.n	8001452 <HAL_GPIO_Init+0x1be>
 8001420:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001424:	4290      	cmp	r0, r2
 8001426:	d016      	beq.n	8001456 <HAL_GPIO_Init+0x1c2>
 8001428:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800142c:	4290      	cmp	r0, r2
 800142e:	d014      	beq.n	800145a <HAL_GPIO_Init+0x1c6>
 8001430:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001434:	4290      	cmp	r0, r2
 8001436:	f43f af34 	beq.w	80012a2 <HAL_GPIO_Init+0xe>
 800143a:	220a      	movs	r2, #10
 800143c:	e734      	b.n	80012a8 <HAL_GPIO_Init+0x14>
 800143e:	2201      	movs	r2, #1
 8001440:	e732      	b.n	80012a8 <HAL_GPIO_Init+0x14>
 8001442:	2202      	movs	r2, #2
 8001444:	e730      	b.n	80012a8 <HAL_GPIO_Init+0x14>
 8001446:	2203      	movs	r2, #3
 8001448:	e72e      	b.n	80012a8 <HAL_GPIO_Init+0x14>
 800144a:	2204      	movs	r2, #4
 800144c:	e72c      	b.n	80012a8 <HAL_GPIO_Init+0x14>
 800144e:	2205      	movs	r2, #5
 8001450:	e72a      	b.n	80012a8 <HAL_GPIO_Init+0x14>
 8001452:	2206      	movs	r2, #6
 8001454:	e728      	b.n	80012a8 <HAL_GPIO_Init+0x14>
 8001456:	2207      	movs	r2, #7
 8001458:	e726      	b.n	80012a8 <HAL_GPIO_Init+0x14>
 800145a:	2208      	movs	r2, #8
 800145c:	e724      	b.n	80012a8 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 800145e:	b003      	add	sp, #12
 8001460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001462:	4770      	bx	lr
 8001464:	40013800 	.word	0x40013800
 8001468:	40013c00 	.word	0x40013c00
 800146c:	40023800 	.word	0x40023800
 8001470:	40020000 	.word	0x40020000

08001474 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001474:	2300      	movs	r3, #0
 8001476:	2b0f      	cmp	r3, #15
 8001478:	f200 809b 	bhi.w	80015b2 <HAL_GPIO_DeInit+0x13e>
{
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	e02d      	b.n	80014dc <HAL_GPIO_DeInit+0x68>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8001480:	2609      	movs	r6, #9
 8001482:	e000      	b.n	8001486 <HAL_GPIO_DeInit+0x12>
 8001484:	2600      	movs	r6, #0
 8001486:	fa06 f404 	lsl.w	r4, r6, r4
 800148a:	42ac      	cmp	r4, r5
 800148c:	d075      	beq.n	800157a <HAL_GPIO_DeInit+0x106>
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800148e:	6805      	ldr	r5, [r0, #0]
 8001490:	005c      	lsls	r4, r3, #1
 8001492:	2603      	movs	r6, #3
 8001494:	fa06 f404 	lsl.w	r4, r6, r4
 8001498:	ea25 0504 	bic.w	r5, r5, r4
 800149c:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800149e:	fa23 f506 	lsr.w	r5, r3, r6
 80014a2:	3508      	adds	r5, #8
 80014a4:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 80014a8:	f003 0707 	and.w	r7, r3, #7
 80014ac:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 80014b0:	270f      	movs	r7, #15
 80014b2:	fa07 f70c 	lsl.w	r7, r7, ip
 80014b6:	ea26 0607 	bic.w	r6, r6, r7
 80014ba:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80014be:	68c5      	ldr	r5, [r0, #12]
 80014c0:	ea25 0504 	bic.w	r5, r5, r4
 80014c4:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014c6:	6845      	ldr	r5, [r0, #4]
 80014c8:	ea25 0202 	bic.w	r2, r5, r2
 80014cc:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80014ce:	6882      	ldr	r2, [r0, #8]
 80014d0:	ea22 0404 	bic.w	r4, r2, r4
 80014d4:	6084      	str	r4, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80014d6:	3301      	adds	r3, #1
 80014d8:	2b0f      	cmp	r3, #15
 80014da:	d869      	bhi.n	80015b0 <HAL_GPIO_DeInit+0x13c>
    ioposition = ((uint32_t)0x01) << position;
 80014dc:	2201      	movs	r2, #1
 80014de:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 80014e0:	ea02 0701 	and.w	r7, r2, r1
    if(iocurrent == ioposition)
 80014e4:	ea32 0401 	bics.w	r4, r2, r1
 80014e8:	d1f5      	bne.n	80014d6 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2];
 80014ea:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80014ee:	f10c 0502 	add.w	r5, ip, #2
 80014f2:	4c30      	ldr	r4, [pc, #192]	; (80015b4 <HAL_GPIO_DeInit+0x140>)
 80014f4:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80014f8:	f003 0403 	and.w	r4, r3, #3
 80014fc:	00a4      	lsls	r4, r4, #2
 80014fe:	260f      	movs	r6, #15
 8001500:	fa06 fe04 	lsl.w	lr, r6, r4
 8001504:	ea0e 0505 	and.w	r5, lr, r5
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8001508:	4e2b      	ldr	r6, [pc, #172]	; (80015b8 <HAL_GPIO_DeInit+0x144>)
 800150a:	42b0      	cmp	r0, r6
 800150c:	d0ba      	beq.n	8001484 <HAL_GPIO_DeInit+0x10>
 800150e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001512:	42b0      	cmp	r0, r6
 8001514:	d021      	beq.n	800155a <HAL_GPIO_DeInit+0xe6>
 8001516:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800151a:	42b0      	cmp	r0, r6
 800151c:	d01f      	beq.n	800155e <HAL_GPIO_DeInit+0xea>
 800151e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001522:	42b0      	cmp	r0, r6
 8001524:	d01d      	beq.n	8001562 <HAL_GPIO_DeInit+0xee>
 8001526:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800152a:	42b0      	cmp	r0, r6
 800152c:	d01b      	beq.n	8001566 <HAL_GPIO_DeInit+0xf2>
 800152e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001532:	42b0      	cmp	r0, r6
 8001534:	d019      	beq.n	800156a <HAL_GPIO_DeInit+0xf6>
 8001536:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800153a:	42b0      	cmp	r0, r6
 800153c:	d017      	beq.n	800156e <HAL_GPIO_DeInit+0xfa>
 800153e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001542:	42b0      	cmp	r0, r6
 8001544:	d015      	beq.n	8001572 <HAL_GPIO_DeInit+0xfe>
 8001546:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800154a:	42b0      	cmp	r0, r6
 800154c:	d013      	beq.n	8001576 <HAL_GPIO_DeInit+0x102>
 800154e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001552:	42b0      	cmp	r0, r6
 8001554:	d094      	beq.n	8001480 <HAL_GPIO_DeInit+0xc>
 8001556:	260a      	movs	r6, #10
 8001558:	e795      	b.n	8001486 <HAL_GPIO_DeInit+0x12>
 800155a:	2601      	movs	r6, #1
 800155c:	e793      	b.n	8001486 <HAL_GPIO_DeInit+0x12>
 800155e:	2602      	movs	r6, #2
 8001560:	e791      	b.n	8001486 <HAL_GPIO_DeInit+0x12>
 8001562:	2603      	movs	r6, #3
 8001564:	e78f      	b.n	8001486 <HAL_GPIO_DeInit+0x12>
 8001566:	2604      	movs	r6, #4
 8001568:	e78d      	b.n	8001486 <HAL_GPIO_DeInit+0x12>
 800156a:	2605      	movs	r6, #5
 800156c:	e78b      	b.n	8001486 <HAL_GPIO_DeInit+0x12>
 800156e:	2606      	movs	r6, #6
 8001570:	e789      	b.n	8001486 <HAL_GPIO_DeInit+0x12>
 8001572:	2607      	movs	r6, #7
 8001574:	e787      	b.n	8001486 <HAL_GPIO_DeInit+0x12>
 8001576:	2608      	movs	r6, #8
 8001578:	e785      	b.n	8001486 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800157a:	4c10      	ldr	r4, [pc, #64]	; (80015bc <HAL_GPIO_DeInit+0x148>)
 800157c:	6825      	ldr	r5, [r4, #0]
 800157e:	ea25 0507 	bic.w	r5, r5, r7
 8001582:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001584:	6865      	ldr	r5, [r4, #4]
 8001586:	ea25 0507 	bic.w	r5, r5, r7
 800158a:	6065      	str	r5, [r4, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800158c:	68a5      	ldr	r5, [r4, #8]
 800158e:	ea25 0507 	bic.w	r5, r5, r7
 8001592:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001594:	68e5      	ldr	r5, [r4, #12]
 8001596:	ea25 0707 	bic.w	r7, r5, r7
 800159a:	60e7      	str	r7, [r4, #12]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800159c:	4d05      	ldr	r5, [pc, #20]	; (80015b4 <HAL_GPIO_DeInit+0x140>)
 800159e:	f10c 0402 	add.w	r4, ip, #2
 80015a2:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 80015a6:	ea26 060e 	bic.w	r6, r6, lr
 80015aa:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
 80015ae:	e76e      	b.n	800148e <HAL_GPIO_DeInit+0x1a>
    }
  }
}
 80015b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b2:	4770      	bx	lr
 80015b4:	40013800 	.word	0x40013800
 80015b8:	40020000 	.word	0x40020000
 80015bc:	40013c00 	.word	0x40013c00

080015c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015c0:	b10a      	cbz	r2, 80015c6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c2:	6181      	str	r1, [r0, #24]
 80015c4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80015c6:	0409      	lsls	r1, r1, #16
 80015c8:	6181      	str	r1, [r0, #24]
  }
}
 80015ca:	4770      	bx	lr

080015cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015cc:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015ce:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	4203      	tst	r3, r0
 80015d4:	d100      	bne.n	80015d8 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80015d6:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015d8:	4b02      	ldr	r3, [pc, #8]	; (80015e4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80015da:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015dc:	f7fe ffe4 	bl	80005a8 <HAL_GPIO_EXTI_Callback>
}
 80015e0:	e7f9      	b.n	80015d6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80015e2:	bf00      	nop
 80015e4:	40013c00 	.word	0x40013c00

080015e8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80015e8:	6803      	ldr	r3, [r0, #0]
 80015ea:	699a      	ldr	r2, [r3, #24]
 80015ec:	f012 0f02 	tst.w	r2, #2
 80015f0:	d001      	beq.n	80015f6 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80015f2:	2200      	movs	r2, #0
 80015f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015f6:	6803      	ldr	r3, [r0, #0]
 80015f8:	699a      	ldr	r2, [r3, #24]
 80015fa:	f012 0f01 	tst.w	r2, #1
 80015fe:	d103      	bne.n	8001608 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001600:	699a      	ldr	r2, [r3, #24]
 8001602:	f042 0201 	orr.w	r2, r2, #1
 8001606:	619a      	str	r2, [r3, #24]
  }
}
 8001608:	4770      	bx	lr

0800160a <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800160a:	b470      	push	{r4, r5, r6}
 800160c:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800160e:	6805      	ldr	r5, [r0, #0]
 8001610:	6868      	ldr	r0, [r5, #4]
 8001612:	0d74      	lsrs	r4, r6, #21
 8001614:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8001618:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800161c:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001620:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001624:	f044 0403 	orr.w	r4, r4, #3
 8001628:	ea20 0004 	bic.w	r0, r0, r4
 800162c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001630:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001634:	4319      	orrs	r1, r3
 8001636:	4331      	orrs	r1, r6
 8001638:	4301      	orrs	r1, r0
 800163a:	6069      	str	r1, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800163c:	bc70      	pop	{r4, r5, r6}
 800163e:	4770      	bx	lr

08001640 <I2C_IsAcknowledgeFailed>:
{
 8001640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001642:	4605      	mov	r5, r0
 8001644:	460e      	mov	r6, r1
 8001646:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001648:	6803      	ldr	r3, [r0, #0]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f013 0f10 	tst.w	r3, #16
 8001650:	d101      	bne.n	8001656 <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 8001652:	2000      	movs	r0, #0
}
 8001654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001656:	682b      	ldr	r3, [r5, #0]
 8001658:	699c      	ldr	r4, [r3, #24]
 800165a:	f014 0f20 	tst.w	r4, #32
 800165e:	d117      	bne.n	8001690 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8001660:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001664:	d0f7      	beq.n	8001656 <I2C_IsAcknowledgeFailed+0x16>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001666:	f7ff fd07 	bl	8001078 <HAL_GetTick>
 800166a:	1bc0      	subs	r0, r0, r7
 800166c:	42b0      	cmp	r0, r6
 800166e:	d801      	bhi.n	8001674 <I2C_IsAcknowledgeFailed+0x34>
 8001670:	2e00      	cmp	r6, #0
 8001672:	d1f0      	bne.n	8001656 <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001674:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001676:	f043 0320 	orr.w	r3, r3, #32
 800167a:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800167c:	2320      	movs	r3, #32
 800167e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001682:	2300      	movs	r3, #0
 8001684:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8001688:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 800168c:	2001      	movs	r0, #1
 800168e:	e7e1      	b.n	8001654 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001690:	2210      	movs	r2, #16
 8001692:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001694:	682b      	ldr	r3, [r5, #0]
 8001696:	2420      	movs	r4, #32
 8001698:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800169a:	4628      	mov	r0, r5
 800169c:	f7ff ffa4 	bl	80015e8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80016a0:	682a      	ldr	r2, [r5, #0]
 80016a2:	6853      	ldr	r3, [r2, #4]
 80016a4:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80016a8:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80016ac:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80016b6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80016be:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80016c8:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 80016cc:	2001      	movs	r0, #1
 80016ce:	e7c1      	b.n	8001654 <I2C_IsAcknowledgeFailed+0x14>

080016d0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80016d0:	b570      	push	{r4, r5, r6, lr}
 80016d2:	4604      	mov	r4, r0
 80016d4:	460d      	mov	r5, r1
 80016d6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016d8:	6823      	ldr	r3, [r4, #0]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f013 0f02 	tst.w	r3, #2
 80016e0:	d11d      	bne.n	800171e <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80016e2:	4632      	mov	r2, r6
 80016e4:	4629      	mov	r1, r5
 80016e6:	4620      	mov	r0, r4
 80016e8:	f7ff ffaa 	bl	8001640 <I2C_IsAcknowledgeFailed>
 80016ec:	b9c8      	cbnz	r0, 8001722 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80016ee:	f1b5 3fff 	cmp.w	r5, #4294967295
 80016f2:	d0f1      	beq.n	80016d8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016f4:	f7ff fcc0 	bl	8001078 <HAL_GetTick>
 80016f8:	1b80      	subs	r0, r0, r6
 80016fa:	42a8      	cmp	r0, r5
 80016fc:	d801      	bhi.n	8001702 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80016fe:	2d00      	cmp	r5, #0
 8001700:	d1ea      	bne.n	80016d8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001702:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001704:	f043 0320 	orr.w	r3, r3, #32
 8001708:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800170a:	2320      	movs	r3, #32
 800170c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001710:	2300      	movs	r3, #0
 8001712:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001716:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800171a:	2001      	movs	r0, #1
 800171c:	e000      	b.n	8001720 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 800171e:	2000      	movs	r0, #0
}
 8001720:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001722:	2001      	movs	r0, #1
 8001724:	e7fc      	b.n	8001720 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08001726 <I2C_WaitOnFlagUntilTimeout>:
{
 8001726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800172a:	4606      	mov	r6, r0
 800172c:	4688      	mov	r8, r1
 800172e:	4617      	mov	r7, r2
 8001730:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001732:	6834      	ldr	r4, [r6, #0]
 8001734:	69a4      	ldr	r4, [r4, #24]
 8001736:	ea38 0304 	bics.w	r3, r8, r4
 800173a:	bf0c      	ite	eq
 800173c:	2401      	moveq	r4, #1
 800173e:	2400      	movne	r4, #0
 8001740:	42bc      	cmp	r4, r7
 8001742:	d118      	bne.n	8001776 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001744:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001748:	d0f3      	beq.n	8001732 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800174a:	f7ff fc95 	bl	8001078 <HAL_GetTick>
 800174e:	9b06      	ldr	r3, [sp, #24]
 8001750:	1ac0      	subs	r0, r0, r3
 8001752:	42a8      	cmp	r0, r5
 8001754:	d801      	bhi.n	800175a <I2C_WaitOnFlagUntilTimeout+0x34>
 8001756:	2d00      	cmp	r5, #0
 8001758:	d1eb      	bne.n	8001732 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800175a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800175c:	f043 0320 	orr.w	r3, r3, #32
 8001760:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001762:	2320      	movs	r3, #32
 8001764:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001768:	2300      	movs	r3, #0
 800176a:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800176e:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8001772:	2001      	movs	r0, #1
 8001774:	e000      	b.n	8001778 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 8001776:	2000      	movs	r0, #0
}
 8001778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800177c <I2C_RequestMemoryWrite>:
{
 800177c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	4604      	mov	r4, r0
 8001784:	4690      	mov	r8, r2
 8001786:	461d      	mov	r5, r3
 8001788:	9e08      	ldr	r6, [sp, #32]
 800178a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <I2C_RequestMemoryWrite+0x78>)
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001794:	b2ea      	uxtb	r2, r5
 8001796:	f7ff ff38 	bl	800160a <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800179a:	463a      	mov	r2, r7
 800179c:	4631      	mov	r1, r6
 800179e:	4620      	mov	r0, r4
 80017a0:	f7ff ff96 	bl	80016d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80017a4:	b9f8      	cbnz	r0, 80017e6 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80017a6:	2d01      	cmp	r5, #1
 80017a8:	d10e      	bne.n	80017c8 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	fa5f f288 	uxtb.w	r2, r8
 80017b0:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80017b2:	9700      	str	r7, [sp, #0]
 80017b4:	4633      	mov	r3, r6
 80017b6:	2200      	movs	r2, #0
 80017b8:	2180      	movs	r1, #128	; 0x80
 80017ba:	4620      	mov	r0, r4
 80017bc:	f7ff ffb3 	bl	8001726 <I2C_WaitOnFlagUntilTimeout>
 80017c0:	b9a8      	cbnz	r0, 80017ee <I2C_RequestMemoryWrite+0x72>
}
 80017c2:	b002      	add	sp, #8
 80017c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017d0:	463a      	mov	r2, r7
 80017d2:	4631      	mov	r1, r6
 80017d4:	4620      	mov	r0, r4
 80017d6:	f7ff ff7b 	bl	80016d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80017da:	b930      	cbnz	r0, 80017ea <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80017dc:	6823      	ldr	r3, [r4, #0]
 80017de:	fa5f f288 	uxtb.w	r2, r8
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28
 80017e4:	e7e5      	b.n	80017b2 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 80017e6:	2001      	movs	r0, #1
 80017e8:	e7eb      	b.n	80017c2 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 80017ea:	2001      	movs	r0, #1
 80017ec:	e7e9      	b.n	80017c2 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 80017ee:	2001      	movs	r0, #1
 80017f0:	e7e7      	b.n	80017c2 <I2C_RequestMemoryWrite+0x46>
 80017f2:	bf00      	nop
 80017f4:	80002000 	.word	0x80002000

080017f8 <I2C_RequestMemoryRead>:
{
 80017f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	4604      	mov	r4, r0
 8001800:	4690      	mov	r8, r2
 8001802:	461d      	mov	r5, r3
 8001804:	9e08      	ldr	r6, [sp, #32]
 8001806:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001808:	4b18      	ldr	r3, [pc, #96]	; (800186c <I2C_RequestMemoryRead+0x74>)
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2300      	movs	r3, #0
 800180e:	b2ea      	uxtb	r2, r5
 8001810:	f7ff fefb 	bl	800160a <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001814:	463a      	mov	r2, r7
 8001816:	4631      	mov	r1, r6
 8001818:	4620      	mov	r0, r4
 800181a:	f7ff ff59 	bl	80016d0 <I2C_WaitOnTXISFlagUntilTimeout>
 800181e:	b9f8      	cbnz	r0, 8001860 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001820:	2d01      	cmp	r5, #1
 8001822:	d10e      	bne.n	8001842 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001824:	6823      	ldr	r3, [r4, #0]
 8001826:	fa5f f288 	uxtb.w	r2, r8
 800182a:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800182c:	9700      	str	r7, [sp, #0]
 800182e:	4633      	mov	r3, r6
 8001830:	2200      	movs	r2, #0
 8001832:	2140      	movs	r1, #64	; 0x40
 8001834:	4620      	mov	r0, r4
 8001836:	f7ff ff76 	bl	8001726 <I2C_WaitOnFlagUntilTimeout>
 800183a:	b9a8      	cbnz	r0, 8001868 <I2C_RequestMemoryRead+0x70>
}
 800183c:	b002      	add	sp, #8
 800183e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001842:	6823      	ldr	r3, [r4, #0]
 8001844:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800184a:	463a      	mov	r2, r7
 800184c:	4631      	mov	r1, r6
 800184e:	4620      	mov	r0, r4
 8001850:	f7ff ff3e 	bl	80016d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001854:	b930      	cbnz	r0, 8001864 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001856:	6823      	ldr	r3, [r4, #0]
 8001858:	fa5f f288 	uxtb.w	r2, r8
 800185c:	629a      	str	r2, [r3, #40]	; 0x28
 800185e:	e7e5      	b.n	800182c <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8001860:	2001      	movs	r0, #1
 8001862:	e7eb      	b.n	800183c <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8001864:	2001      	movs	r0, #1
 8001866:	e7e9      	b.n	800183c <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8001868:	2001      	movs	r0, #1
 800186a:	e7e7      	b.n	800183c <I2C_RequestMemoryRead+0x44>
 800186c:	80002000 	.word	0x80002000

08001870 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001870:	b570      	push	{r4, r5, r6, lr}
 8001872:	4605      	mov	r5, r0
 8001874:	460c      	mov	r4, r1
 8001876:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001878:	682b      	ldr	r3, [r5, #0]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f013 0f20 	tst.w	r3, #32
 8001880:	d11a      	bne.n	80018b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001882:	4632      	mov	r2, r6
 8001884:	4621      	mov	r1, r4
 8001886:	4628      	mov	r0, r5
 8001888:	f7ff feda 	bl	8001640 <I2C_IsAcknowledgeFailed>
 800188c:	b9b0      	cbnz	r0, 80018bc <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800188e:	f7ff fbf3 	bl	8001078 <HAL_GetTick>
 8001892:	1b80      	subs	r0, r0, r6
 8001894:	42a0      	cmp	r0, r4
 8001896:	d801      	bhi.n	800189c <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8001898:	2c00      	cmp	r4, #0
 800189a:	d1ed      	bne.n	8001878 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800189c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800189e:	f043 0320 	orr.w	r3, r3, #32
 80018a2:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80018a4:	2320      	movs	r3, #32
 80018a6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80018b0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80018b4:	2001      	movs	r0, #1
}
 80018b6:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80018b8:	2000      	movs	r0, #0
 80018ba:	e7fc      	b.n	80018b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80018bc:	2001      	movs	r0, #1
 80018be:	e7fa      	b.n	80018b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080018c0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80018c0:	2800      	cmp	r0, #0
 80018c2:	d057      	beq.n	8001974 <HAL_I2C_Init+0xb4>
{
 80018c4:	b510      	push	{r4, lr}
 80018c6:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018c8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d041      	beq.n	8001954 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80018d0:	2324      	movs	r3, #36	; 0x24
 80018d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80018d6:	6822      	ldr	r2, [r4, #0]
 80018d8:	6813      	ldr	r3, [r2, #0]
 80018da:	f023 0301 	bic.w	r3, r3, #1
 80018de:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018e0:	6863      	ldr	r3, [r4, #4]
 80018e2:	6822      	ldr	r2, [r4, #0]
 80018e4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80018e8:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018ea:	6822      	ldr	r2, [r4, #0]
 80018ec:	6893      	ldr	r3, [r2, #8]
 80018ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80018f2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018f4:	68e3      	ldr	r3, [r4, #12]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d031      	beq.n	800195e <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018fa:	68a3      	ldr	r3, [r4, #8]
 80018fc:	6822      	ldr	r2, [r4, #0]
 80018fe:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001902:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001904:	68e3      	ldr	r3, [r4, #12]
 8001906:	2b02      	cmp	r3, #2
 8001908:	d02f      	beq.n	800196a <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800190a:	6822      	ldr	r2, [r4, #0]
 800190c:	6851      	ldr	r1, [r2, #4]
 800190e:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <HAL_I2C_Init+0xb8>)
 8001910:	430b      	orrs	r3, r1
 8001912:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001914:	6822      	ldr	r2, [r4, #0]
 8001916:	68d3      	ldr	r3, [r2, #12]
 8001918:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800191c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800191e:	6923      	ldr	r3, [r4, #16]
 8001920:	6962      	ldr	r2, [r4, #20]
 8001922:	4313      	orrs	r3, r2
 8001924:	69a1      	ldr	r1, [r4, #24]
 8001926:	6822      	ldr	r2, [r4, #0]
 8001928:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800192c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800192e:	69e3      	ldr	r3, [r4, #28]
 8001930:	6a21      	ldr	r1, [r4, #32]
 8001932:	6822      	ldr	r2, [r4, #0]
 8001934:	430b      	orrs	r3, r1
 8001936:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001938:	6822      	ldr	r2, [r4, #0]
 800193a:	6813      	ldr	r3, [r2, #0]
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001942:	2000      	movs	r0, #0
 8001944:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001946:	2320      	movs	r3, #32
 8001948:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800194c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800194e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8001952:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001954:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001958:	f7ff fa10 	bl	8000d7c <HAL_I2C_MspInit>
 800195c:	e7b8      	b.n	80018d0 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800195e:	68a3      	ldr	r3, [r4, #8]
 8001960:	6822      	ldr	r2, [r4, #0]
 8001962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001966:	6093      	str	r3, [r2, #8]
 8001968:	e7cc      	b.n	8001904 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800196a:	6823      	ldr	r3, [r4, #0]
 800196c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	e7ca      	b.n	800190a <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001974:	2001      	movs	r0, #1
}
 8001976:	4770      	bx	lr
 8001978:	02008000 	.word	0x02008000

0800197c <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 800197c:	b1a8      	cbz	r0, 80019aa <HAL_I2C_DeInit+0x2e>
{
 800197e:	b510      	push	{r4, lr}
 8001980:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001982:	2324      	movs	r3, #36	; 0x24
 8001984:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001988:	6802      	ldr	r2, [r0, #0]
 800198a:	6813      	ldr	r3, [r2, #0]
 800198c:	f023 0301 	bic.w	r3, r3, #1
 8001990:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8001992:	f7ff fa2b 	bl	8000dec <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001996:	2000      	movs	r0, #0
 8001998:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800199a:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800199e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 80019a4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80019a8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019aa:	2001      	movs	r0, #1
}
 80019ac:	4770      	bx	lr

080019ae <HAL_I2C_Mem_Write>:
{
 80019ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019b2:	b083      	sub	sp, #12
 80019b4:	460d      	mov	r5, r1
 80019b6:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80019ba:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80019bc:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80019c0:	b2c9      	uxtb	r1, r1
 80019c2:	2920      	cmp	r1, #32
 80019c4:	f040 80be 	bne.w	8001b44 <HAL_I2C_Mem_Write+0x196>
 80019c8:	4604      	mov	r4, r0
 80019ca:	4690      	mov	r8, r2
 80019cc:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80019ce:	faba f38a 	clz	r3, sl
 80019d2:	095b      	lsrs	r3, r3, #5
 80019d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80019d6:	2a00      	cmp	r2, #0
 80019d8:	bf08      	it	eq
 80019da:	2301      	moveq	r3, #1
 80019dc:	b9b3      	cbnz	r3, 8001a0c <HAL_I2C_Mem_Write+0x5e>
    __HAL_LOCK(hi2c);
 80019de:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	f000 80b2 	beq.w	8001b4c <HAL_I2C_Mem_Write+0x19e>
 80019e8:	f04f 0b01 	mov.w	fp, #1
 80019ec:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80019f0:	f7ff fb42 	bl	8001078 <HAL_GetTick>
 80019f4:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019f6:	9000      	str	r0, [sp, #0]
 80019f8:	2319      	movs	r3, #25
 80019fa:	465a      	mov	r2, fp
 80019fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a00:	4620      	mov	r0, r4
 8001a02:	f7ff fe90 	bl	8001726 <I2C_WaitOnFlagUntilTimeout>
 8001a06:	b130      	cbz	r0, 8001a16 <HAL_I2C_Mem_Write+0x68>
      return HAL_ERROR;
 8001a08:	2001      	movs	r0, #1
 8001a0a:	e09c      	b.n	8001b46 <HAL_I2C_Mem_Write+0x198>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a10:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8001a12:	2001      	movs	r0, #1
 8001a14:	e097      	b.n	8001b46 <HAL_I2C_Mem_Write+0x198>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a16:	2321      	movs	r3, #33	; 0x21
 8001a18:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a1c:	2340      	movs	r3, #64	; 0x40
 8001a1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001a26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001a28:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a2a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a2e:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a30:	9601      	str	r6, [sp, #4]
 8001a32:	9700      	str	r7, [sp, #0]
 8001a34:	464b      	mov	r3, r9
 8001a36:	4642      	mov	r2, r8
 8001a38:	4629      	mov	r1, r5
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	f7ff fe9e 	bl	800177c <I2C_RequestMemoryWrite>
 8001a40:	b970      	cbnz	r0, 8001a60 <HAL_I2C_Mem_Write+0xb2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	2bff      	cmp	r3, #255	; 0xff
 8001a48:	d90f      	bls.n	8001a6a <HAL_I2C_Mem_Write+0xbc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a4a:	22ff      	movs	r2, #255	; 0xff
 8001a4c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a4e:	2300      	movs	r3, #0
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a56:	4629      	mov	r1, r5
 8001a58:	4620      	mov	r0, r4
 8001a5a:	f7ff fdd6 	bl	800160a <I2C_TransferConfig>
 8001a5e:	e021      	b.n	8001aa4 <HAL_I2C_Mem_Write+0xf6>
      __HAL_UNLOCK(hi2c);
 8001a60:	2300      	movs	r3, #0
 8001a62:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001a66:	4658      	mov	r0, fp
 8001a68:	e06d      	b.n	8001b46 <HAL_I2C_Mem_Write+0x198>
      hi2c->XferSize = hi2c->XferCount;
 8001a6a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001a6c:	b292      	uxth	r2, r2
 8001a6e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a70:	2300      	movs	r3, #0
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f7ff fdc4 	bl	800160a <I2C_TransferConfig>
 8001a82:	e00f      	b.n	8001aa4 <HAL_I2C_Mem_Write+0xf6>
          hi2c->XferSize = hi2c->XferCount;
 8001a84:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001a86:	b292      	uxth	r2, r2
 8001a88:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	4629      	mov	r1, r5
 8001a96:	4620      	mov	r0, r4
 8001a98:	f7ff fdb7 	bl	800160a <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8001a9c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d033      	beq.n	8001b0c <HAL_I2C_Mem_Write+0x15e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aa4:	4632      	mov	r2, r6
 8001aa6:	4639      	mov	r1, r7
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f7ff fe11 	bl	80016d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001aae:	2800      	cmp	r0, #0
 8001ab0:	d14e      	bne.n	8001b50 <HAL_I2C_Mem_Write+0x1a2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ab2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ab4:	6823      	ldr	r3, [r4, #0]
 8001ab6:	7812      	ldrb	r2, [r2, #0]
 8001ab8:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001aba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001abc:	3301      	adds	r3, #1
 8001abe:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001ac0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001aca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001acc:	3b01      	subs	r3, #1
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ad2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001ad4:	b292      	uxth	r2, r2
 8001ad6:	2a00      	cmp	r2, #0
 8001ad8:	d0e0      	beq.n	8001a9c <HAL_I2C_Mem_Write+0xee>
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1de      	bne.n	8001a9c <HAL_I2C_Mem_Write+0xee>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ade:	9600      	str	r6, [sp, #0]
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2180      	movs	r1, #128	; 0x80
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f7ff fe1d 	bl	8001726 <I2C_WaitOnFlagUntilTimeout>
 8001aec:	bb90      	cbnz	r0, 8001b54 <HAL_I2C_Mem_Write+0x1a6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001aee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	2bff      	cmp	r3, #255	; 0xff
 8001af4:	d9c6      	bls.n	8001a84 <HAL_I2C_Mem_Write+0xd6>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001af6:	22ff      	movs	r2, #255	; 0xff
 8001af8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001afa:	2300      	movs	r3, #0
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b02:	4629      	mov	r1, r5
 8001b04:	4620      	mov	r0, r4
 8001b06:	f7ff fd80 	bl	800160a <I2C_TransferConfig>
 8001b0a:	e7c7      	b.n	8001a9c <HAL_I2C_Mem_Write+0xee>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b0c:	4632      	mov	r2, r6
 8001b0e:	4639      	mov	r1, r7
 8001b10:	4620      	mov	r0, r4
 8001b12:	f7ff fead 	bl	8001870 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b16:	b9f8      	cbnz	r0, 8001b58 <HAL_I2C_Mem_Write+0x1aa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b18:	6823      	ldr	r3, [r4, #0]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001b1e:	6821      	ldr	r1, [r4, #0]
 8001b20:	684b      	ldr	r3, [r1, #4]
 8001b22:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001b26:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001b2a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001b2e:	f023 0301 	bic.w	r3, r3, #1
 8001b32:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001b34:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001b3e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8001b42:	e000      	b.n	8001b46 <HAL_I2C_Mem_Write+0x198>
    return HAL_BUSY;
 8001b44:	2002      	movs	r0, #2
}
 8001b46:	b003      	add	sp, #12
 8001b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001b4c:	2002      	movs	r0, #2
 8001b4e:	e7fa      	b.n	8001b46 <HAL_I2C_Mem_Write+0x198>
        return HAL_ERROR;
 8001b50:	2001      	movs	r0, #1
 8001b52:	e7f8      	b.n	8001b46 <HAL_I2C_Mem_Write+0x198>
          return HAL_ERROR;
 8001b54:	2001      	movs	r0, #1
 8001b56:	e7f6      	b.n	8001b46 <HAL_I2C_Mem_Write+0x198>
      return HAL_ERROR;
 8001b58:	2001      	movs	r0, #1
 8001b5a:	e7f4      	b.n	8001b46 <HAL_I2C_Mem_Write+0x198>

08001b5c <HAL_I2C_Mem_Read>:
{
 8001b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b60:	b083      	sub	sp, #12
 8001b62:	460d      	mov	r5, r1
 8001b64:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8001b68:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b6a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8001b6e:	b2c9      	uxtb	r1, r1
 8001b70:	2920      	cmp	r1, #32
 8001b72:	f040 80bf 	bne.w	8001cf4 <HAL_I2C_Mem_Read+0x198>
 8001b76:	4604      	mov	r4, r0
 8001b78:	4690      	mov	r8, r2
 8001b7a:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8001b7c:	faba f38a 	clz	r3, sl
 8001b80:	095b      	lsrs	r3, r3, #5
 8001b82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001b84:	2a00      	cmp	r2, #0
 8001b86:	bf08      	it	eq
 8001b88:	2301      	moveq	r3, #1
 8001b8a:	b9b3      	cbnz	r3, 8001bba <HAL_I2C_Mem_Read+0x5e>
    __HAL_LOCK(hi2c);
 8001b8c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	f000 80b3 	beq.w	8001cfc <HAL_I2C_Mem_Read+0x1a0>
 8001b96:	f04f 0b01 	mov.w	fp, #1
 8001b9a:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001b9e:	f7ff fa6b 	bl	8001078 <HAL_GetTick>
 8001ba2:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ba4:	9000      	str	r0, [sp, #0]
 8001ba6:	2319      	movs	r3, #25
 8001ba8:	465a      	mov	r2, fp
 8001baa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f7ff fdb9 	bl	8001726 <I2C_WaitOnFlagUntilTimeout>
 8001bb4:	b130      	cbz	r0, 8001bc4 <HAL_I2C_Mem_Read+0x68>
      return HAL_ERROR;
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	e09d      	b.n	8001cf6 <HAL_I2C_Mem_Read+0x19a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001bba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bbe:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	e098      	b.n	8001cf6 <HAL_I2C_Mem_Read+0x19a>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001bc4:	2322      	movs	r3, #34	; 0x22
 8001bc6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bca:	2340      	movs	r3, #64	; 0x40
 8001bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001bd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001bd6:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bd8:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001bdc:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bde:	9601      	str	r6, [sp, #4]
 8001be0:	9700      	str	r7, [sp, #0]
 8001be2:	464b      	mov	r3, r9
 8001be4:	4642      	mov	r2, r8
 8001be6:	4629      	mov	r1, r5
 8001be8:	4620      	mov	r0, r4
 8001bea:	f7ff fe05 	bl	80017f8 <I2C_RequestMemoryRead>
 8001bee:	b970      	cbnz	r0, 8001c0e <HAL_I2C_Mem_Read+0xb2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bf0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	2bff      	cmp	r3, #255	; 0xff
 8001bf6:	d90f      	bls.n	8001c18 <HAL_I2C_Mem_Read+0xbc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bf8:	22ff      	movs	r2, #255	; 0xff
 8001bfa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001bfc:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <HAL_I2C_Mem_Read+0x1b0>)
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c04:	4629      	mov	r1, r5
 8001c06:	4620      	mov	r0, r4
 8001c08:	f7ff fcff 	bl	800160a <I2C_TransferConfig>
 8001c0c:	e021      	b.n	8001c52 <HAL_I2C_Mem_Read+0xf6>
      __HAL_UNLOCK(hi2c);
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001c14:	4658      	mov	r0, fp
 8001c16:	e06e      	b.n	8001cf6 <HAL_I2C_Mem_Read+0x19a>
      hi2c->XferSize = hi2c->XferCount;
 8001c18:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c1a:	b292      	uxth	r2, r2
 8001c1c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001c1e:	4b3b      	ldr	r3, [pc, #236]	; (8001d0c <HAL_I2C_Mem_Read+0x1b0>)
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	4629      	mov	r1, r5
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	f7ff fced 	bl	800160a <I2C_TransferConfig>
 8001c30:	e00f      	b.n	8001c52 <HAL_I2C_Mem_Read+0xf6>
          hi2c->XferSize = hi2c->XferCount;
 8001c32:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c34:	b292      	uxth	r2, r2
 8001c36:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c38:	2300      	movs	r3, #0
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	4629      	mov	r1, r5
 8001c44:	4620      	mov	r0, r4
 8001c46:	f7ff fce0 	bl	800160a <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8001c4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d034      	beq.n	8001cbc <HAL_I2C_Mem_Read+0x160>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001c52:	9600      	str	r6, [sp, #0]
 8001c54:	463b      	mov	r3, r7
 8001c56:	2200      	movs	r2, #0
 8001c58:	2104      	movs	r1, #4
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	f7ff fd63 	bl	8001726 <I2C_WaitOnFlagUntilTimeout>
 8001c60:	2800      	cmp	r0, #0
 8001c62:	d14d      	bne.n	8001d00 <HAL_I2C_Mem_Read+0x1a4>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c6a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001c6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c6e:	3301      	adds	r3, #1
 8001c70:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001c72:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001c74:	3a01      	subs	r2, #1
 8001c76:	b292      	uxth	r2, r2
 8001c78:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001c7a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0de      	beq.n	8001c4a <HAL_I2C_Mem_Read+0xee>
 8001c8c:	2a00      	cmp	r2, #0
 8001c8e:	d1dc      	bne.n	8001c4a <HAL_I2C_Mem_Read+0xee>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c90:	9600      	str	r6, [sp, #0]
 8001c92:	463b      	mov	r3, r7
 8001c94:	2180      	movs	r1, #128	; 0x80
 8001c96:	4620      	mov	r0, r4
 8001c98:	f7ff fd45 	bl	8001726 <I2C_WaitOnFlagUntilTimeout>
 8001c9c:	bb90      	cbnz	r0, 8001d04 <HAL_I2C_Mem_Read+0x1a8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	2bff      	cmp	r3, #255	; 0xff
 8001ca4:	d9c5      	bls.n	8001c32 <HAL_I2C_Mem_Read+0xd6>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ca6:	22ff      	movs	r2, #255	; 0xff
 8001ca8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001caa:	2300      	movs	r3, #0
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cb2:	4629      	mov	r1, r5
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f7ff fca8 	bl	800160a <I2C_TransferConfig>
 8001cba:	e7c6      	b.n	8001c4a <HAL_I2C_Mem_Read+0xee>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cbc:	4632      	mov	r2, r6
 8001cbe:	4639      	mov	r1, r7
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	f7ff fdd5 	bl	8001870 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cc6:	b9f8      	cbnz	r0, 8001d08 <HAL_I2C_Mem_Read+0x1ac>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001cce:	6821      	ldr	r1, [r4, #0]
 8001cd0:	684b      	ldr	r3, [r1, #4]
 8001cd2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001cd6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001cda:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001cde:	f023 0301 	bic.w	r3, r3, #1
 8001ce2:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ce4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001cee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8001cf2:	e000      	b.n	8001cf6 <HAL_I2C_Mem_Read+0x19a>
    return HAL_BUSY;
 8001cf4:	2002      	movs	r0, #2
}
 8001cf6:	b003      	add	sp, #12
 8001cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001cfc:	2002      	movs	r0, #2
 8001cfe:	e7fa      	b.n	8001cf6 <HAL_I2C_Mem_Read+0x19a>
        return HAL_ERROR;
 8001d00:	2001      	movs	r0, #1
 8001d02:	e7f8      	b.n	8001cf6 <HAL_I2C_Mem_Read+0x19a>
          return HAL_ERROR;
 8001d04:	2001      	movs	r0, #1
 8001d06:	e7f6      	b.n	8001cf6 <HAL_I2C_Mem_Read+0x19a>
      return HAL_ERROR;
 8001d08:	2001      	movs	r0, #1
 8001d0a:	e7f4      	b.n	8001cf6 <HAL_I2C_Mem_Read+0x19a>
 8001d0c:	80002400 	.word	0x80002400

08001d10 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d10:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b20      	cmp	r3, #32
 8001d18:	d124      	bne.n	8001d64 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d1a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d022      	beq.n	8001d68 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001d22:	2301      	movs	r3, #1
 8001d24:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d28:	2324      	movs	r3, #36	; 0x24
 8001d2a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d2e:	6802      	ldr	r2, [r0, #0]
 8001d30:	6813      	ldr	r3, [r2, #0]
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d38:	6802      	ldr	r2, [r0, #0]
 8001d3a:	6813      	ldr	r3, [r2, #0]
 8001d3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d40:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d42:	6802      	ldr	r2, [r0, #0]
 8001d44:	6813      	ldr	r3, [r2, #0]
 8001d46:	4319      	orrs	r1, r3
 8001d48:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d4a:	6802      	ldr	r2, [r0, #0]
 8001d4c:	6813      	ldr	r3, [r2, #0]
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d54:	2320      	movs	r3, #32
 8001d56:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001d60:	4618      	mov	r0, r3
 8001d62:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001d64:	2002      	movs	r0, #2
 8001d66:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001d68:	2002      	movs	r0, #2
  }
}
 8001d6a:	4770      	bx	lr

08001d6c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d6c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b20      	cmp	r3, #32
 8001d74:	d122      	bne.n	8001dbc <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d76:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d020      	beq.n	8001dc0 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d84:	2324      	movs	r3, #36	; 0x24
 8001d86:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d8a:	6802      	ldr	r2, [r0, #0]
 8001d8c:	6813      	ldr	r3, [r2, #0]
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d94:	6802      	ldr	r2, [r0, #0]
 8001d96:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d9c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001da0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001da2:	6802      	ldr	r2, [r0, #0]
 8001da4:	6813      	ldr	r3, [r2, #0]
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dac:	2320      	movs	r3, #32
 8001dae:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001db2:	2300      	movs	r3, #0
 8001db4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001db8:	4618      	mov	r0, r3
 8001dba:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001dc0:	2002      	movs	r0, #2
  }
}
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_LTDC_ErrorCallback>:
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_LTDC_ReloadEventCallback>:
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_LTDC_IRQHandler>:
{
 8001dc8:	b570      	push	{r4, r5, r6, lr}
 8001dca:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001dcc:	6803      	ldr	r3, [r0, #0]
 8001dce:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8001dd0:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8001dd2:	f015 0f04 	tst.w	r5, #4
 8001dd6:	d002      	beq.n	8001dde <HAL_LTDC_IRQHandler+0x16>
 8001dd8:	f016 0f04 	tst.w	r6, #4
 8001ddc:	d112      	bne.n	8001e04 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8001dde:	f015 0f02 	tst.w	r5, #2
 8001de2:	d002      	beq.n	8001dea <HAL_LTDC_IRQHandler+0x22>
 8001de4:	f016 0f02 	tst.w	r6, #2
 8001de8:	d121      	bne.n	8001e2e <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8001dea:	f015 0f01 	tst.w	r5, #1
 8001dee:	d002      	beq.n	8001df6 <HAL_LTDC_IRQHandler+0x2e>
 8001df0:	f016 0f01 	tst.w	r6, #1
 8001df4:	d132      	bne.n	8001e5c <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8001df6:	f015 0f08 	tst.w	r5, #8
 8001dfa:	d002      	beq.n	8001e02 <HAL_LTDC_IRQHandler+0x3a>
 8001dfc:	f016 0f08 	tst.w	r6, #8
 8001e00:	d13d      	bne.n	8001e7e <HAL_LTDC_IRQHandler+0xb6>
}
 8001e02:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8001e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e06:	f022 0204 	bic.w	r2, r2, #4
 8001e0a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8001e0c:	6803      	ldr	r3, [r0, #0]
 8001e0e:	2204      	movs	r2, #4
 8001e10:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8001e12:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001e1e:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001e22:	2300      	movs	r3, #0
 8001e24:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8001e28:	f7ff ffcc 	bl	8001dc4 <HAL_LTDC_ErrorCallback>
 8001e2c:	e7d7      	b.n	8001dde <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8001e2e:	6822      	ldr	r2, [r4, #0]
 8001e30:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001e32:	f023 0302 	bic.w	r3, r3, #2
 8001e36:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8001e38:	6823      	ldr	r3, [r4, #0]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8001e3e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8001e42:	4313      	orrs	r3, r2
 8001e44:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001e48:	2304      	movs	r3, #4
 8001e4a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8001e54:	4620      	mov	r0, r4
 8001e56:	f7ff ffb5 	bl	8001dc4 <HAL_LTDC_ErrorCallback>
 8001e5a:	e7c6      	b.n	8001dea <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001e5c:	6822      	ldr	r2, [r4, #0]
 8001e5e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8001e66:	6822      	ldr	r2, [r4, #0]
 8001e68:	2301      	movs	r3, #1
 8001e6a:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8001e6c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001e70:	2300      	movs	r3, #0
 8001e72:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8001e76:	4620      	mov	r0, r4
 8001e78:	f002 fa16 	bl	80042a8 <HAL_LTDC_LineEventCallback>
 8001e7c:	e7bb      	b.n	8001df6 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8001e7e:	6822      	ldr	r2, [r4, #0]
 8001e80:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001e82:	f023 0308 	bic.w	r3, r3, #8
 8001e86:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8001e88:	6823      	ldr	r3, [r4, #0]
 8001e8a:	2208      	movs	r2, #8
 8001e8c:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001e94:	2300      	movs	r3, #0
 8001e96:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f7ff ff93 	bl	8001dc6 <HAL_LTDC_ReloadEventCallback>
}
 8001ea0:	e7af      	b.n	8001e02 <HAL_LTDC_IRQHandler+0x3a>
	...

08001ea4 <HAL_LTDC_ProgramLineEvent>:
{
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8001ea4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d01a      	beq.n	8001ee2 <HAL_LTDC_ProgramLineEvent+0x3e>
{
 8001eac:	b410      	push	{r4}
  __HAL_LOCK(hltdc);
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001eba:	6804      	ldr	r4, [r0, #0]
 8001ebc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ebe:	f023 0301 	bic.w	r3, r3, #1
 8001ec2:	6363      	str	r3, [r4, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <HAL_LTDC_ProgramLineEvent+0x44>)
 8001ec6:	6419      	str	r1, [r3, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8001ec8:	6801      	ldr	r1, [r0, #0]
 8001eca:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	634b      	str	r3, [r1, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001ed0:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0

  return HAL_OK;
 8001eda:	4618      	mov	r0, r3
}
 8001edc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ee0:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8001ee2:	2002      	movs	r0, #2
}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40016800 	.word	0x40016800

08001eec <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eec:	2800      	cmp	r0, #0
 8001eee:	f000 81ff 	beq.w	80022f0 <HAL_RCC_OscConfig+0x404>
{
 8001ef2:	b570      	push	{r4, r5, r6, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef8:	6803      	ldr	r3, [r0, #0]
 8001efa:	f013 0f01 	tst.w	r3, #1
 8001efe:	d029      	beq.n	8001f54 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f00:	4ba7      	ldr	r3, [pc, #668]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d01a      	beq.n	8001f42 <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f0c:	4ba4      	ldr	r3, [pc, #656]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 030c 	and.w	r3, r3, #12
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d00f      	beq.n	8001f38 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f18:	6863      	ldr	r3, [r4, #4]
 8001f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1e:	d040      	beq.n	8001fa2 <HAL_RCC_OscConfig+0xb6>
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d154      	bne.n	8001fce <HAL_RCC_OscConfig+0xe2>
 8001f24:	4b9e      	ldr	r3, [pc, #632]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	e039      	b.n	8001fac <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f38:	4b99      	ldr	r3, [pc, #612]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001f40:	d0ea      	beq.n	8001f18 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f42:	4b97      	ldr	r3, [pc, #604]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f4a:	d003      	beq.n	8001f54 <HAL_RCC_OscConfig+0x68>
 8001f4c:	6863      	ldr	r3, [r4, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 81d0 	beq.w	80022f4 <HAL_RCC_OscConfig+0x408>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f54:	6823      	ldr	r3, [r4, #0]
 8001f56:	f013 0f02 	tst.w	r3, #2
 8001f5a:	d074      	beq.n	8002046 <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f5c:	4b90      	ldr	r3, [pc, #576]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f013 0f0c 	tst.w	r3, #12
 8001f64:	d05e      	beq.n	8002024 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f66:	4b8e      	ldr	r3, [pc, #568]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d053      	beq.n	800201a <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f72:	68e3      	ldr	r3, [r4, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 8089 	beq.w	800208c <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f7a:	4a89      	ldr	r2, [pc, #548]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 8001f7c:	6813      	ldr	r3, [r2, #0]
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7ff f878 	bl	8001078 <HAL_GetTick>
 8001f88:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8a:	4b85      	ldr	r3, [pc, #532]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f013 0f02 	tst.w	r3, #2
 8001f92:	d172      	bne.n	800207a <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f94:	f7ff f870 	bl	8001078 <HAL_GetTick>
 8001f98:	1b40      	subs	r0, r0, r5
 8001f9a:	2802      	cmp	r0, #2
 8001f9c:	d9f5      	bls.n	8001f8a <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8001f9e:	2003      	movs	r0, #3
 8001fa0:	e1ad      	b.n	80022fe <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa2:	4a7f      	ldr	r2, [pc, #508]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 8001fa4:	6813      	ldr	r3, [r2, #0]
 8001fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001faa:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fac:	6863      	ldr	r3, [r4, #4]
 8001fae:	b32b      	cbz	r3, 8001ffc <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8001fb0:	f7ff f862 	bl	8001078 <HAL_GetTick>
 8001fb4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb6:	4b7a      	ldr	r3, [pc, #488]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001fbe:	d1c9      	bne.n	8001f54 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7ff f85a 	bl	8001078 <HAL_GetTick>
 8001fc4:	1b40      	subs	r0, r0, r5
 8001fc6:	2864      	cmp	r0, #100	; 0x64
 8001fc8:	d9f5      	bls.n	8001fb6 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8001fca:	2003      	movs	r0, #3
 8001fcc:	e197      	b.n	80022fe <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fd2:	d009      	beq.n	8001fe8 <HAL_RCC_OscConfig+0xfc>
 8001fd4:	4b72      	ldr	r3, [pc, #456]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	e7e1      	b.n	8001fac <HAL_RCC_OscConfig+0xc0>
 8001fe8:	4b6d      	ldr	r3, [pc, #436]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	e7d7      	b.n	8001fac <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8001ffc:	f7ff f83c 	bl	8001078 <HAL_GetTick>
 8002000:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002002:	4b67      	ldr	r3, [pc, #412]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800200a:	d0a3      	beq.n	8001f54 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800200c:	f7ff f834 	bl	8001078 <HAL_GetTick>
 8002010:	1b40      	subs	r0, r0, r5
 8002012:	2864      	cmp	r0, #100	; 0x64
 8002014:	d9f5      	bls.n	8002002 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8002016:	2003      	movs	r0, #3
 8002018:	e171      	b.n	80022fe <HAL_RCC_OscConfig+0x412>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800201a:	4b61      	ldr	r3, [pc, #388]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002022:	d1a6      	bne.n	8001f72 <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002024:	4b5e      	ldr	r3, [pc, #376]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f013 0f02 	tst.w	r3, #2
 800202c:	d003      	beq.n	8002036 <HAL_RCC_OscConfig+0x14a>
 800202e:	68e3      	ldr	r3, [r4, #12]
 8002030:	2b01      	cmp	r3, #1
 8002032:	f040 8161 	bne.w	80022f8 <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002036:	4a5a      	ldr	r2, [pc, #360]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 8002038:	6813      	ldr	r3, [r2, #0]
 800203a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800203e:	6921      	ldr	r1, [r4, #16]
 8002040:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002044:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002046:	6823      	ldr	r3, [r4, #0]
 8002048:	f013 0f08 	tst.w	r3, #8
 800204c:	d046      	beq.n	80020dc <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800204e:	6963      	ldr	r3, [r4, #20]
 8002050:	b383      	cbz	r3, 80020b4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002052:	4a53      	ldr	r2, [pc, #332]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 8002054:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205c:	f7ff f80c 	bl	8001078 <HAL_GetTick>
 8002060:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002062:	4b4f      	ldr	r3, [pc, #316]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 8002064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002066:	f013 0f02 	tst.w	r3, #2
 800206a:	d137      	bne.n	80020dc <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206c:	f7ff f804 	bl	8001078 <HAL_GetTick>
 8002070:	1b40      	subs	r0, r0, r5
 8002072:	2802      	cmp	r0, #2
 8002074:	d9f5      	bls.n	8002062 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 8002076:	2003      	movs	r0, #3
 8002078:	e141      	b.n	80022fe <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207a:	4a49      	ldr	r2, [pc, #292]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 800207c:	6813      	ldr	r3, [r2, #0]
 800207e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002082:	6921      	ldr	r1, [r4, #16]
 8002084:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	e7dc      	b.n	8002046 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 800208c:	4a44      	ldr	r2, [pc, #272]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 800208e:	6813      	ldr	r3, [r2, #0]
 8002090:	f023 0301 	bic.w	r3, r3, #1
 8002094:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002096:	f7fe ffef 	bl	8001078 <HAL_GetTick>
 800209a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209c:	4b40      	ldr	r3, [pc, #256]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f013 0f02 	tst.w	r3, #2
 80020a4:	d0cf      	beq.n	8002046 <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a6:	f7fe ffe7 	bl	8001078 <HAL_GetTick>
 80020aa:	1b40      	subs	r0, r0, r5
 80020ac:	2802      	cmp	r0, #2
 80020ae:	d9f5      	bls.n	800209c <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 80020b0:	2003      	movs	r0, #3
 80020b2:	e124      	b.n	80022fe <HAL_RCC_OscConfig+0x412>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b4:	4a3a      	ldr	r2, [pc, #232]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 80020b6:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020be:	f7fe ffdb 	bl	8001078 <HAL_GetTick>
 80020c2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c4:	4b36      	ldr	r3, [pc, #216]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 80020c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c8:	f013 0f02 	tst.w	r3, #2
 80020cc:	d006      	beq.n	80020dc <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ce:	f7fe ffd3 	bl	8001078 <HAL_GetTick>
 80020d2:	1b40      	subs	r0, r0, r5
 80020d4:	2802      	cmp	r0, #2
 80020d6:	d9f5      	bls.n	80020c4 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 80020d8:	2003      	movs	r0, #3
 80020da:	e110      	b.n	80022fe <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	f013 0f04 	tst.w	r3, #4
 80020e2:	d07d      	beq.n	80021e0 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e4:	4b2e      	ldr	r3, [pc, #184]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80020ec:	d10b      	bne.n	8002106 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ee:	4b2c      	ldr	r3, [pc, #176]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 80020f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020f6:	641a      	str	r2, [r3, #64]	; 0x40
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	9301      	str	r3, [sp, #4]
 8002100:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002102:	2501      	movs	r5, #1
 8002104:	e000      	b.n	8002108 <HAL_RCC_OscConfig+0x21c>
  FlagStatus pwrclkchanged = RESET;
 8002106:	2500      	movs	r5, #0
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002108:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <HAL_RCC_OscConfig+0x2b8>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002110:	d00e      	beq.n	8002130 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002112:	68a3      	ldr	r3, [r4, #8]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d01f      	beq.n	8002158 <HAL_RCC_OscConfig+0x26c>
 8002118:	2b00      	cmp	r3, #0
 800211a:	d135      	bne.n	8002188 <HAL_RCC_OscConfig+0x29c>
 800211c:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 800211e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002120:	f022 0201 	bic.w	r2, r2, #1
 8002124:	671a      	str	r2, [r3, #112]	; 0x70
 8002126:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002128:	f022 0204 	bic.w	r2, r2, #4
 800212c:	671a      	str	r2, [r3, #112]	; 0x70
 800212e:	e018      	b.n	8002162 <HAL_RCC_OscConfig+0x276>
      PWR->CR1 |= PWR_CR1_DBP;
 8002130:	4a1c      	ldr	r2, [pc, #112]	; (80021a4 <HAL_RCC_OscConfig+0x2b8>)
 8002132:	6813      	ldr	r3, [r2, #0]
 8002134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002138:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800213a:	f7fe ff9d 	bl	8001078 <HAL_GetTick>
 800213e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <HAL_RCC_OscConfig+0x2b8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002148:	d1e3      	bne.n	8002112 <HAL_RCC_OscConfig+0x226>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214a:	f7fe ff95 	bl	8001078 <HAL_GetTick>
 800214e:	1b80      	subs	r0, r0, r6
 8002150:	2864      	cmp	r0, #100	; 0x64
 8002152:	d9f5      	bls.n	8002140 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8002154:	2003      	movs	r0, #3
 8002156:	e0d2      	b.n	80022fe <HAL_RCC_OscConfig+0x412>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002158:	4a11      	ldr	r2, [pc, #68]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 800215a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002162:	68a3      	ldr	r3, [r4, #8]
 8002164:	b353      	cbz	r3, 80021bc <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002166:	f7fe ff87 	bl	8001078 <HAL_GetTick>
 800216a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 800216e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002170:	f013 0f02 	tst.w	r3, #2
 8002174:	d133      	bne.n	80021de <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7fe ff7f 	bl	8001078 <HAL_GetTick>
 800217a:	1b80      	subs	r0, r0, r6
 800217c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002180:	4298      	cmp	r0, r3
 8002182:	d9f3      	bls.n	800216c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002184:	2003      	movs	r0, #3
 8002186:	e0ba      	b.n	80022fe <HAL_RCC_OscConfig+0x412>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002188:	2b05      	cmp	r3, #5
 800218a:	d00d      	beq.n	80021a8 <HAL_RCC_OscConfig+0x2bc>
 800218c:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <HAL_RCC_OscConfig+0x2b4>)
 800218e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002190:	f022 0201 	bic.w	r2, r2, #1
 8002194:	671a      	str	r2, [r3, #112]	; 0x70
 8002196:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002198:	f022 0204 	bic.w	r2, r2, #4
 800219c:	671a      	str	r2, [r3, #112]	; 0x70
 800219e:	e7e0      	b.n	8002162 <HAL_RCC_OscConfig+0x276>
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40007000 	.word	0x40007000
 80021a8:	4b5c      	ldr	r3, [pc, #368]	; (800231c <HAL_RCC_OscConfig+0x430>)
 80021aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021ac:	f042 0204 	orr.w	r2, r2, #4
 80021b0:	671a      	str	r2, [r3, #112]	; 0x70
 80021b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021b4:	f042 0201 	orr.w	r2, r2, #1
 80021b8:	671a      	str	r2, [r3, #112]	; 0x70
 80021ba:	e7d2      	b.n	8002162 <HAL_RCC_OscConfig+0x276>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021bc:	f7fe ff5c 	bl	8001078 <HAL_GetTick>
 80021c0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c2:	4b56      	ldr	r3, [pc, #344]	; (800231c <HAL_RCC_OscConfig+0x430>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c6:	f013 0f02 	tst.w	r3, #2
 80021ca:	d008      	beq.n	80021de <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021cc:	f7fe ff54 	bl	8001078 <HAL_GetTick>
 80021d0:	1b80      	subs	r0, r0, r6
 80021d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80021d6:	4298      	cmp	r0, r3
 80021d8:	d9f3      	bls.n	80021c2 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 80021da:	2003      	movs	r0, #3
 80021dc:	e08f      	b.n	80022fe <HAL_RCC_OscConfig+0x412>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021de:	b9fd      	cbnz	r5, 8002220 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e0:	69a3      	ldr	r3, [r4, #24]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 808a 	beq.w	80022fc <HAL_RCC_OscConfig+0x410>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e8:	4a4c      	ldr	r2, [pc, #304]	; (800231c <HAL_RCC_OscConfig+0x430>)
 80021ea:	6892      	ldr	r2, [r2, #8]
 80021ec:	f002 020c 	and.w	r2, r2, #12
 80021f0:	2a08      	cmp	r2, #8
 80021f2:	d058      	beq.n	80022a6 <HAL_RCC_OscConfig+0x3ba>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d019      	beq.n	800222c <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f8:	4a48      	ldr	r2, [pc, #288]	; (800231c <HAL_RCC_OscConfig+0x430>)
 80021fa:	6813      	ldr	r3, [r2, #0]
 80021fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002202:	f7fe ff39 	bl	8001078 <HAL_GetTick>
 8002206:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002208:	4b44      	ldr	r3, [pc, #272]	; (800231c <HAL_RCC_OscConfig+0x430>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002210:	d047      	beq.n	80022a2 <HAL_RCC_OscConfig+0x3b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002212:	f7fe ff31 	bl	8001078 <HAL_GetTick>
 8002216:	1b00      	subs	r0, r0, r4
 8002218:	2802      	cmp	r0, #2
 800221a:	d9f5      	bls.n	8002208 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800221c:	2003      	movs	r0, #3
 800221e:	e06e      	b.n	80022fe <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002220:	4a3e      	ldr	r2, [pc, #248]	; (800231c <HAL_RCC_OscConfig+0x430>)
 8002222:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002228:	6413      	str	r3, [r2, #64]	; 0x40
 800222a:	e7d9      	b.n	80021e0 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 800222c:	4a3b      	ldr	r2, [pc, #236]	; (800231c <HAL_RCC_OscConfig+0x430>)
 800222e:	6813      	ldr	r3, [r2, #0]
 8002230:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002234:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002236:	f7fe ff1f 	bl	8001078 <HAL_GetTick>
 800223a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223c:	4b37      	ldr	r3, [pc, #220]	; (800231c <HAL_RCC_OscConfig+0x430>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002244:	d006      	beq.n	8002254 <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002246:	f7fe ff17 	bl	8001078 <HAL_GetTick>
 800224a:	1b40      	subs	r0, r0, r5
 800224c:	2802      	cmp	r0, #2
 800224e:	d9f5      	bls.n	800223c <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8002250:	2003      	movs	r0, #3
 8002252:	e054      	b.n	80022fe <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002254:	69e3      	ldr	r3, [r4, #28]
 8002256:	6a22      	ldr	r2, [r4, #32]
 8002258:	4313      	orrs	r3, r2
 800225a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800225c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002260:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002262:	0852      	lsrs	r2, r2, #1
 8002264:	3a01      	subs	r2, #1
 8002266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800226a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800226c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002270:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002274:	4a29      	ldr	r2, [pc, #164]	; (800231c <HAL_RCC_OscConfig+0x430>)
 8002276:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002278:	6813      	ldr	r3, [r2, #0]
 800227a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800227e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002280:	f7fe fefa 	bl	8001078 <HAL_GetTick>
 8002284:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002286:	4b25      	ldr	r3, [pc, #148]	; (800231c <HAL_RCC_OscConfig+0x430>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800228e:	d106      	bne.n	800229e <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002290:	f7fe fef2 	bl	8001078 <HAL_GetTick>
 8002294:	1b00      	subs	r0, r0, r4
 8002296:	2802      	cmp	r0, #2
 8002298:	d9f5      	bls.n	8002286 <HAL_RCC_OscConfig+0x39a>
            return HAL_TIMEOUT;
 800229a:	2003      	movs	r0, #3
 800229c:	e02f      	b.n	80022fe <HAL_RCC_OscConfig+0x412>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800229e:	2000      	movs	r0, #0
 80022a0:	e02d      	b.n	80022fe <HAL_RCC_OscConfig+0x412>
 80022a2:	2000      	movs	r0, #0
 80022a4:	e02b      	b.n	80022fe <HAL_RCC_OscConfig+0x412>
      pll_config = RCC->PLLCFGR;
 80022a6:	4a1d      	ldr	r2, [pc, #116]	; (800231c <HAL_RCC_OscConfig+0x430>)
 80022a8:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d029      	beq.n	8002302 <HAL_RCC_OscConfig+0x416>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ae:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80022b2:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022b4:	428b      	cmp	r3, r1
 80022b6:	d126      	bne.n	8002306 <HAL_RCC_OscConfig+0x41a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022b8:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 80022bc:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022be:	428b      	cmp	r3, r1
 80022c0:	d123      	bne.n	800230a <HAL_RCC_OscConfig+0x41e>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022c8:	4013      	ands	r3, r2
 80022ca:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80022ce:	d11e      	bne.n	800230e <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022d0:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 80022d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022d6:	085b      	lsrs	r3, r3, #1
 80022d8:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022da:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 80022de:	d118      	bne.n	8002312 <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022e0:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80022e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022e6:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 80022ea:	d114      	bne.n	8002316 <HAL_RCC_OscConfig+0x42a>
  return HAL_OK;
 80022ec:	2000      	movs	r0, #0
 80022ee:	e006      	b.n	80022fe <HAL_RCC_OscConfig+0x412>
    return HAL_ERROR;
 80022f0:	2001      	movs	r0, #1
}
 80022f2:	4770      	bx	lr
        return HAL_ERROR;
 80022f4:	2001      	movs	r0, #1
 80022f6:	e002      	b.n	80022fe <HAL_RCC_OscConfig+0x412>
        return HAL_ERROR;
 80022f8:	2001      	movs	r0, #1
 80022fa:	e000      	b.n	80022fe <HAL_RCC_OscConfig+0x412>
  return HAL_OK;
 80022fc:	2000      	movs	r0, #0
}
 80022fe:	b002      	add	sp, #8
 8002300:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002302:	2001      	movs	r0, #1
 8002304:	e7fb      	b.n	80022fe <HAL_RCC_OscConfig+0x412>
 8002306:	2001      	movs	r0, #1
 8002308:	e7f9      	b.n	80022fe <HAL_RCC_OscConfig+0x412>
 800230a:	2001      	movs	r0, #1
 800230c:	e7f7      	b.n	80022fe <HAL_RCC_OscConfig+0x412>
 800230e:	2001      	movs	r0, #1
 8002310:	e7f5      	b.n	80022fe <HAL_RCC_OscConfig+0x412>
 8002312:	2001      	movs	r0, #1
 8002314:	e7f3      	b.n	80022fe <HAL_RCC_OscConfig+0x412>
 8002316:	2001      	movs	r0, #1
 8002318:	e7f1      	b.n	80022fe <HAL_RCC_OscConfig+0x412>
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800

08002320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002322:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
 800232a:	2b04      	cmp	r3, #4
 800232c:	d03d      	beq.n	80023aa <HAL_RCC_GetSysClockFreq+0x8a>
 800232e:	2b08      	cmp	r3, #8
 8002330:	d13d      	bne.n	80023ae <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002332:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002340:	d012      	beq.n	8002368 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002342:	4b1c      	ldr	r3, [pc, #112]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002344:	6859      	ldr	r1, [r3, #4]
 8002346:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800234a:	2300      	movs	r3, #0
 800234c:	481a      	ldr	r0, [pc, #104]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x98>)
 800234e:	fba1 0100 	umull	r0, r1, r1, r0
 8002352:	f7fd ffad 	bl	80002b0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002356:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800235e:	3301      	adds	r3, #1
 8002360:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002362:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002366:	e023      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002368:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002370:	015c      	lsls	r4, r3, #5
 8002372:	2500      	movs	r5, #0
 8002374:	1ae4      	subs	r4, r4, r3
 8002376:	f165 0500 	sbc.w	r5, r5, #0
 800237a:	01ae      	lsls	r6, r5, #6
 800237c:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8002380:	01a7      	lsls	r7, r4, #6
 8002382:	1b38      	subs	r0, r7, r4
 8002384:	eb66 0105 	sbc.w	r1, r6, r5
 8002388:	00cc      	lsls	r4, r1, #3
 800238a:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 800238e:	00c5      	lsls	r5, r0, #3
 8002390:	18e8      	adds	r0, r5, r3
 8002392:	f144 0100 	adc.w	r1, r4, #0
 8002396:	028b      	lsls	r3, r1, #10
 8002398:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800239c:	0284      	lsls	r4, r0, #10
 800239e:	4620      	mov	r0, r4
 80023a0:	4619      	mov	r1, r3
 80023a2:	2300      	movs	r3, #0
 80023a4:	f7fd ff84 	bl	80002b0 <__aeabi_uldivmod>
 80023a8:	e7d5      	b.n	8002356 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80023aa:	4803      	ldr	r0, [pc, #12]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ac:	e000      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023ae:	4803      	ldr	r0, [pc, #12]	; (80023bc <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80023b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	017d7840 	.word	0x017d7840
 80023bc:	00f42400 	.word	0x00f42400

080023c0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80023c0:	2800      	cmp	r0, #0
 80023c2:	f000 80a0 	beq.w	8002506 <HAL_RCC_ClockConfig+0x146>
{
 80023c6:	b570      	push	{r4, r5, r6, lr}
 80023c8:	460d      	mov	r5, r1
 80023ca:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023cc:	4b52      	ldr	r3, [pc, #328]	; (8002518 <HAL_RCC_ClockConfig+0x158>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 030f 	and.w	r3, r3, #15
 80023d4:	428b      	cmp	r3, r1
 80023d6:	d20b      	bcs.n	80023f0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d8:	4a4f      	ldr	r2, [pc, #316]	; (8002518 <HAL_RCC_ClockConfig+0x158>)
 80023da:	6813      	ldr	r3, [r2, #0]
 80023dc:	f023 030f 	bic.w	r3, r3, #15
 80023e0:	430b      	orrs	r3, r1
 80023e2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e4:	6813      	ldr	r3, [r2, #0]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	428b      	cmp	r3, r1
 80023ec:	f040 808d 	bne.w	800250a <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f0:	6823      	ldr	r3, [r4, #0]
 80023f2:	f013 0f02 	tst.w	r3, #2
 80023f6:	d017      	beq.n	8002428 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f8:	f013 0f04 	tst.w	r3, #4
 80023fc:	d004      	beq.n	8002408 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023fe:	4a47      	ldr	r2, [pc, #284]	; (800251c <HAL_RCC_ClockConfig+0x15c>)
 8002400:	6893      	ldr	r3, [r2, #8]
 8002402:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002406:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002408:	6823      	ldr	r3, [r4, #0]
 800240a:	f013 0f08 	tst.w	r3, #8
 800240e:	d004      	beq.n	800241a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002410:	4a42      	ldr	r2, [pc, #264]	; (800251c <HAL_RCC_ClockConfig+0x15c>)
 8002412:	6893      	ldr	r3, [r2, #8]
 8002414:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002418:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800241a:	4a40      	ldr	r2, [pc, #256]	; (800251c <HAL_RCC_ClockConfig+0x15c>)
 800241c:	6893      	ldr	r3, [r2, #8]
 800241e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002422:	68a1      	ldr	r1, [r4, #8]
 8002424:	430b      	orrs	r3, r1
 8002426:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	f013 0f01 	tst.w	r3, #1
 800242e:	d031      	beq.n	8002494 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002430:	6863      	ldr	r3, [r4, #4]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d020      	beq.n	8002478 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002436:	2b02      	cmp	r3, #2
 8002438:	d025      	beq.n	8002486 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243a:	4a38      	ldr	r2, [pc, #224]	; (800251c <HAL_RCC_ClockConfig+0x15c>)
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	f012 0f02 	tst.w	r2, #2
 8002442:	d064      	beq.n	800250e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002444:	4935      	ldr	r1, [pc, #212]	; (800251c <HAL_RCC_ClockConfig+0x15c>)
 8002446:	688a      	ldr	r2, [r1, #8]
 8002448:	f022 0203 	bic.w	r2, r2, #3
 800244c:	4313      	orrs	r3, r2
 800244e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002450:	f7fe fe12 	bl	8001078 <HAL_GetTick>
 8002454:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002456:	4b31      	ldr	r3, [pc, #196]	; (800251c <HAL_RCC_ClockConfig+0x15c>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	6862      	ldr	r2, [r4, #4]
 8002460:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002464:	d016      	beq.n	8002494 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002466:	f7fe fe07 	bl	8001078 <HAL_GetTick>
 800246a:	1b80      	subs	r0, r0, r6
 800246c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002470:	4298      	cmp	r0, r3
 8002472:	d9f0      	bls.n	8002456 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8002474:	2003      	movs	r0, #3
 8002476:	e045      	b.n	8002504 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002478:	4a28      	ldr	r2, [pc, #160]	; (800251c <HAL_RCC_ClockConfig+0x15c>)
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002480:	d1e0      	bne.n	8002444 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002482:	2001      	movs	r0, #1
 8002484:	e03e      	b.n	8002504 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002486:	4a25      	ldr	r2, [pc, #148]	; (800251c <HAL_RCC_ClockConfig+0x15c>)
 8002488:	6812      	ldr	r2, [r2, #0]
 800248a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800248e:	d1d9      	bne.n	8002444 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002490:	2001      	movs	r0, #1
 8002492:	e037      	b.n	8002504 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002494:	4b20      	ldr	r3, [pc, #128]	; (8002518 <HAL_RCC_ClockConfig+0x158>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	42ab      	cmp	r3, r5
 800249e:	d90a      	bls.n	80024b6 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a0:	4a1d      	ldr	r2, [pc, #116]	; (8002518 <HAL_RCC_ClockConfig+0x158>)
 80024a2:	6813      	ldr	r3, [r2, #0]
 80024a4:	f023 030f 	bic.w	r3, r3, #15
 80024a8:	432b      	orrs	r3, r5
 80024aa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ac:	6813      	ldr	r3, [r2, #0]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	42ab      	cmp	r3, r5
 80024b4:	d12d      	bne.n	8002512 <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b6:	6823      	ldr	r3, [r4, #0]
 80024b8:	f013 0f04 	tst.w	r3, #4
 80024bc:	d006      	beq.n	80024cc <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024be:	4a17      	ldr	r2, [pc, #92]	; (800251c <HAL_RCC_ClockConfig+0x15c>)
 80024c0:	6893      	ldr	r3, [r2, #8]
 80024c2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80024c6:	68e1      	ldr	r1, [r4, #12]
 80024c8:	430b      	orrs	r3, r1
 80024ca:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024cc:	6823      	ldr	r3, [r4, #0]
 80024ce:	f013 0f08 	tst.w	r3, #8
 80024d2:	d007      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024d4:	4a11      	ldr	r2, [pc, #68]	; (800251c <HAL_RCC_ClockConfig+0x15c>)
 80024d6:	6893      	ldr	r3, [r2, #8]
 80024d8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80024dc:	6921      	ldr	r1, [r4, #16]
 80024de:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80024e2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024e4:	f7ff ff1c 	bl	8002320 <HAL_RCC_GetSysClockFreq>
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <HAL_RCC_ClockConfig+0x15c>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80024f0:	4a0b      	ldr	r2, [pc, #44]	; (8002520 <HAL_RCC_ClockConfig+0x160>)
 80024f2:	5cd3      	ldrb	r3, [r2, r3]
 80024f4:	40d8      	lsrs	r0, r3
 80024f6:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_RCC_ClockConfig+0x164>)
 80024f8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80024fa:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <HAL_RCC_ClockConfig+0x168>)
 80024fc:	6818      	ldr	r0, [r3, #0]
 80024fe:	f7fe fd75 	bl	8000fec <HAL_InitTick>
  return HAL_OK;
 8002502:	2000      	movs	r0, #0
}
 8002504:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002506:	2001      	movs	r0, #1
}
 8002508:	4770      	bx	lr
      return HAL_ERROR;
 800250a:	2001      	movs	r0, #1
 800250c:	e7fa      	b.n	8002504 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800250e:	2001      	movs	r0, #1
 8002510:	e7f8      	b.n	8002504 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 8002512:	2001      	movs	r0, #1
 8002514:	e7f6      	b.n	8002504 <HAL_RCC_ClockConfig+0x144>
 8002516:	bf00      	nop
 8002518:	40023c00 	.word	0x40023c00
 800251c:	40023800 	.word	0x40023800
 8002520:	0800ae78 	.word	0x0800ae78
 8002524:	20000000 	.word	0x20000000
 8002528:	20000008 	.word	0x20000008

0800252c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800252c:	4b01      	ldr	r3, [pc, #4]	; (8002534 <HAL_RCC_GetHCLKFreq+0x8>)
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	20000000 	.word	0x20000000

08002538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002538:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800253a:	f7ff fff7 	bl	800252c <HAL_RCC_GetHCLKFreq>
 800253e:	4b04      	ldr	r3, [pc, #16]	; (8002550 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002546:	4a03      	ldr	r2, [pc, #12]	; (8002554 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002548:	5cd3      	ldrb	r3, [r2, r3]
}
 800254a:	40d8      	lsrs	r0, r3
 800254c:	bd08      	pop	{r3, pc}
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	0800ae88 	.word	0x0800ae88

08002558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002558:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800255a:	f7ff ffe7 	bl	800252c <HAL_RCC_GetHCLKFreq>
 800255e:	4b04      	ldr	r3, [pc, #16]	; (8002570 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002566:	4a03      	ldr	r2, [pc, #12]	; (8002574 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002568:	5cd3      	ldrb	r3, [r2, r3]
}
 800256a:	40d8      	lsrs	r0, r3
 800256c:	bd08      	pop	{r3, pc}
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800
 8002574:	0800ae88 	.word	0x0800ae88

08002578 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800257a:	b083      	sub	sp, #12
 800257c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800257e:	6806      	ldr	r6, [r0, #0]
 8002580:	f016 0601 	ands.w	r6, r6, #1
 8002584:	d00d      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002586:	4bb6      	ldr	r3, [pc, #728]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002594:	430a      	orrs	r2, r1
 8002596:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002598:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 8139 	beq.w	8002812 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  uint32_t plli2sused = 0;
 80025a0:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80025a2:	6825      	ldr	r5, [r4, #0]
 80025a4:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 80025a8:	d011      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025aa:	4aad      	ldr	r2, [pc, #692]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025ac:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80025b0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80025b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80025b6:	430b      	orrs	r3, r1
 80025b8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025c2:	f000 8128 	beq.w	8002816 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8127 	beq.w	800281a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  uint32_t pllsaiused = 0;
 80025cc:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025ce:	6823      	ldr	r3, [r4, #0]
 80025d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80025d4:	d00f      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025d6:	4aa2      	ldr	r2, [pc, #648]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025d8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80025dc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80025e0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80025e2:	430b      	orrs	r3, r1
 80025e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80025e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ee:	f000 8116 	beq.w	800281e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80025f2:	b903      	cbnz	r3, 80025f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 80025f4:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80025fc:	d000      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 80025fe:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002600:	f013 0f20 	tst.w	r3, #32
 8002604:	f040 810d 	bne.w	8002822 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002608:	6823      	ldr	r3, [r4, #0]
 800260a:	f013 0f10 	tst.w	r3, #16
 800260e:	d00c      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002610:	4b93      	ldr	r3, [pc, #588]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002612:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002616:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800261a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800261e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002622:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002624:	430a      	orrs	r2, r1
 8002626:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002630:	d008      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002632:	4a8b      	ldr	r2, [pc, #556]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002634:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002638:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800263c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800263e:	430b      	orrs	r3, r1
 8002640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002644:	6823      	ldr	r3, [r4, #0]
 8002646:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800264a:	d008      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800264c:	4a84      	ldr	r2, [pc, #528]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800264e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002652:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002656:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002658:	430b      	orrs	r3, r1
 800265a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800265e:	6823      	ldr	r3, [r4, #0]
 8002660:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002664:	d008      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002666:	4a7e      	ldr	r2, [pc, #504]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002668:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800266c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002670:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002672:	430b      	orrs	r3, r1
 8002674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002678:	6823      	ldr	r3, [r4, #0]
 800267a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800267e:	d008      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002680:	4a77      	ldr	r2, [pc, #476]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002682:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002686:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800268a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800268c:	430b      	orrs	r3, r1
 800268e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002692:	6823      	ldr	r3, [r4, #0]
 8002694:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002698:	d008      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800269a:	4a71      	ldr	r2, [pc, #452]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800269c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80026a0:	f023 0303 	bic.w	r3, r3, #3
 80026a4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80026a6:	430b      	orrs	r3, r1
 80026a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026ac:	6823      	ldr	r3, [r4, #0]
 80026ae:	f013 0f80 	tst.w	r3, #128	; 0x80
 80026b2:	d008      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026b4:	4a6a      	ldr	r2, [pc, #424]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026b6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80026ba:	f023 030c 	bic.w	r3, r3, #12
 80026be:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80026c0:	430b      	orrs	r3, r1
 80026c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80026cc:	d008      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026ce:	4a64      	ldr	r2, [pc, #400]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026d0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80026d4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026d8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80026da:	430b      	orrs	r3, r1
 80026dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026e0:	6823      	ldr	r3, [r4, #0]
 80026e2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80026e6:	d008      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026e8:	4a5d      	ldr	r2, [pc, #372]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026ea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80026ee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80026f2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80026f4:	430b      	orrs	r3, r1
 80026f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026fa:	6823      	ldr	r3, [r4, #0]
 80026fc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002700:	d008      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002702:	4a57      	ldr	r2, [pc, #348]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002704:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800270c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800270e:	430b      	orrs	r3, r1
 8002710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002714:	6823      	ldr	r3, [r4, #0]
 8002716:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800271a:	d008      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800271c:	4a50      	ldr	r2, [pc, #320]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800271e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002722:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002726:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002728:	430b      	orrs	r3, r1
 800272a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800272e:	6823      	ldr	r3, [r4, #0]
 8002730:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002734:	d008      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002736:	4a4a      	ldr	r2, [pc, #296]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002738:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800273c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002740:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002742:	430b      	orrs	r3, r1
 8002744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002748:	6823      	ldr	r3, [r4, #0]
 800274a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800274e:	d008      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002750:	4a43      	ldr	r2, [pc, #268]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002752:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002756:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800275a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800275c:	430b      	orrs	r3, r1
 800275e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002768:	d008      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800276a:	4a3d      	ldr	r2, [pc, #244]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800276c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002770:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002774:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8002776:	430b      	orrs	r3, r1
 8002778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800277c:	6823      	ldr	r3, [r4, #0]
 800277e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002782:	d00d      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002784:	4a36      	ldr	r2, [pc, #216]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002786:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800278a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800278e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002790:	430b      	orrs	r3, r1
 8002792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002796:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002798:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800279c:	f000 80ac 	beq.w	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x380>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	f013 0f08 	tst.w	r3, #8
 80027a6:	d000      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 80027a8:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027aa:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80027ae:	d008      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027b0:	4a2b      	ldr	r2, [pc, #172]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027b2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80027b6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80027ba:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80027bc:	430b      	orrs	r3, r1
 80027be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80027c2:	6823      	ldr	r3, [r4, #0]
 80027c4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80027c8:	d009      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027ca:	4a25      	ldr	r2, [pc, #148]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027cc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80027d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80027d8:	430b      	orrs	r3, r1
 80027da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80027de:	b926      	cbnz	r6, 80027ea <HAL_RCCEx_PeriphCLKConfig+0x272>
 80027e0:	6823      	ldr	r3, [r4, #0]
 80027e2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80027e6:	f000 8107 	beq.w	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x480>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027ea:	4a1d      	ldr	r2, [pc, #116]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027ec:	6813      	ldr	r3, [r2, #0]
 80027ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f4:	f7fe fc40 	bl	8001078 <HAL_GetTick>
 80027f8:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027fa:	4b19      	ldr	r3, [pc, #100]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002802:	d07b      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x384>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002804:	f7fe fc38 	bl	8001078 <HAL_GetTick>
 8002808:	1b80      	subs	r0, r0, r6
 800280a:	2864      	cmp	r0, #100	; 0x64
 800280c:	d9f5      	bls.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x282>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800280e:	2003      	movs	r0, #3
 8002810:	e0f5      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x486>
      plli2sused = 1;
 8002812:	2601      	movs	r6, #1
 8002814:	e6c5      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8002816:	2601      	movs	r6, #1
 8002818:	e6d5      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 800281a:	2501      	movs	r5, #1
 800281c:	e6d7      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 800281e:	2601      	movs	r6, #1
 8002820:	e6e7      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002822:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002824:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002826:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800282a:	641a      	str	r2, [r3, #64]	; 0x40
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002832:	9301      	str	r3, [sp, #4]
 8002834:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002836:	4a0b      	ldr	r2, [pc, #44]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002838:	6813      	ldr	r3, [r2, #0]
 800283a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002840:	f7fe fc1a 	bl	8001078 <HAL_GetTick>
 8002844:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002846:	4b07      	ldr	r3, [pc, #28]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800284e:	d10b      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002850:	f7fe fc12 	bl	8001078 <HAL_GetTick>
 8002854:	1bc0      	subs	r0, r0, r7
 8002856:	2864      	cmp	r0, #100	; 0x64
 8002858:	d9f5      	bls.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
        return HAL_TIMEOUT;
 800285a:	2003      	movs	r0, #3
 800285c:	e0cf      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x486>
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800
 8002864:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002868:	4bab      	ldr	r3, [pc, #684]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800286c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002870:	d015      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x326>
 8002872:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002874:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002878:	429a      	cmp	r2, r3
 800287a:	d010      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x326>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800287c:	4ba6      	ldr	r3, [pc, #664]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 800287e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002880:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002884:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002886:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800288a:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800288c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800288e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002892:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002894:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002898:	f013 0f01 	tst.w	r3, #1
 800289c:	d112      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800289e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80028a0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80028a4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80028a8:	d01d      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80028aa:	4a9b      	ldr	r2, [pc, #620]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80028ac:	6893      	ldr	r3, [r2, #8]
 80028ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80028b2:	6093      	str	r3, [r2, #8]
 80028b4:	4998      	ldr	r1, [pc, #608]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80028b6:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80028b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80028ba:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80028be:	4313      	orrs	r3, r2
 80028c0:	670b      	str	r3, [r1, #112]	; 0x70
 80028c2:	e6a1      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 80028c4:	f7fe fbd8 	bl	8001078 <HAL_GetTick>
 80028c8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ca:	4b93      	ldr	r3, [pc, #588]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ce:	f013 0f02 	tst.w	r3, #2
 80028d2:	d1e4      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x326>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d4:	f7fe fbd0 	bl	8001078 <HAL_GetTick>
 80028d8:	1bc0      	subs	r0, r0, r7
 80028da:	f241 3388 	movw	r3, #5000	; 0x1388
 80028de:	4298      	cmp	r0, r3
 80028e0:	d9f3      	bls.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x352>
            return HAL_TIMEOUT;
 80028e2:	2003      	movs	r0, #3
 80028e4:	e08b      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x486>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028e6:	488c      	ldr	r0, [pc, #560]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80028e8:	6882      	ldr	r2, [r0, #8]
 80028ea:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80028ee:	498b      	ldr	r1, [pc, #556]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80028f0:	4019      	ands	r1, r3
 80028f2:	430a      	orrs	r2, r1
 80028f4:	6082      	str	r2, [r0, #8]
 80028f6:	e7dd      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      pllsaiused = 1;
 80028f8:	2501      	movs	r5, #1
 80028fa:	e751      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x228>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80028fc:	6823      	ldr	r3, [r4, #0]
 80028fe:	f013 0f01 	tst.w	r3, #1
 8002902:	d013      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8002904:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002906:	b98b      	cbnz	r3, 800292c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002908:	4a83      	ldr	r2, [pc, #524]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 800290a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800290e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002912:	6860      	ldr	r0, [r4, #4]
 8002914:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002918:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800291c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002920:	430b      	orrs	r3, r1
 8002922:	68a1      	ldr	r1, [r4, #8]
 8002924:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002928:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002932:	d003      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8002934:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002936:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800293a:	d006      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800293c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002940:	d01e      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x408>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002942:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002948:	d11a      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x408>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800294a:	4a73      	ldr	r2, [pc, #460]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 800294c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002950:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002954:	6860      	ldr	r0, [r4, #4]
 8002956:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800295a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800295e:	68e0      	ldr	r0, [r4, #12]
 8002960:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002964:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002968:	430b      	orrs	r3, r1
 800296a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800296e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002972:	f023 031f 	bic.w	r3, r3, #31
 8002976:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002978:	3901      	subs	r1, #1
 800297a:	430b      	orrs	r3, r1
 800297c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002980:	6823      	ldr	r3, [r4, #0]
 8002982:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002986:	d011      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002988:	4a63      	ldr	r2, [pc, #396]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 800298a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800298e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002992:	6866      	ldr	r6, [r4, #4]
 8002994:	6923      	ldr	r3, [r4, #16]
 8002996:	041b      	lsls	r3, r3, #16
 8002998:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800299c:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80029a0:	4303      	orrs	r3, r0
 80029a2:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80029a6:	430b      	orrs	r3, r1
 80029a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80029b2:	d00d      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x458>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80029b4:	6862      	ldr	r2, [r4, #4]
 80029b6:	6923      	ldr	r3, [r4, #16]
 80029b8:	041b      	lsls	r3, r3, #16
 80029ba:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80029be:	68e2      	ldr	r2, [r4, #12]
 80029c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80029c4:	68a2      	ldr	r2, [r4, #8]
 80029c6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80029ca:	4a53      	ldr	r2, [pc, #332]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80029cc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029d0:	4a51      	ldr	r2, [pc, #324]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80029d2:	6813      	ldr	r3, [r2, #0]
 80029d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029da:	f7fe fb4d 	bl	8001078 <HAL_GetTick>
 80029de:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029e0:	4b4d      	ldr	r3, [pc, #308]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80029e8:	d106      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029ea:	f7fe fb45 	bl	8001078 <HAL_GetTick>
 80029ee:	1b80      	subs	r0, r0, r6
 80029f0:	2864      	cmp	r0, #100	; 0x64
 80029f2:	d9f5      	bls.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029f4:	2003      	movs	r0, #3
 80029f6:	e002      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x486>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80029f8:	2d01      	cmp	r5, #1
 80029fa:	d002      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x48a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80029fc:	2000      	movs	r0, #0
}
 80029fe:	b003      	add	sp, #12
 8002a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8002a02:	4a45      	ldr	r2, [pc, #276]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002a04:	6813      	ldr	r3, [r2, #0]
 8002a06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002a0c:	f7fe fb34 	bl	8001078 <HAL_GetTick>
 8002a10:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a12:	4b41      	ldr	r3, [pc, #260]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002a1a:	d006      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a1c:	f7fe fb2c 	bl	8001078 <HAL_GetTick>
 8002a20:	1b40      	subs	r0, r0, r5
 8002a22:	2864      	cmp	r0, #100	; 0x64
 8002a24:	d9f5      	bls.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x49a>
        return HAL_TIMEOUT;
 8002a26:	2003      	movs	r0, #3
 8002a28:	e7e9      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x486>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a2a:	6823      	ldr	r3, [r4, #0]
 8002a2c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002a30:	d001      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8002a32:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002a34:	b122      	cbz	r2, 8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 8002a36:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002a3a:	d01d      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x500>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a3e:	b9db      	cbnz	r3, 8002a78 <HAL_RCCEx_PeriphCLKConfig+0x500>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a40:	4a35      	ldr	r2, [pc, #212]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002a42:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a46:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a4a:	6960      	ldr	r0, [r4, #20]
 8002a4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a50:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002a54:	69a0      	ldr	r0, [r4, #24]
 8002a56:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002a5a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002a5e:	430b      	orrs	r3, r1
 8002a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a64:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002a68:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002a6c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002a6e:	3901      	subs	r1, #1
 8002a70:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a74:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a78:	6823      	ldr	r3, [r4, #0]
 8002a7a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002a7e:	d003      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8002a80:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002a82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a86:	d031      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x574>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	f013 0f08 	tst.w	r3, #8
 8002a8e:	d019      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a90:	4a21      	ldr	r2, [pc, #132]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002a92:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a96:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a9a:	6960      	ldr	r0, [r4, #20]
 8002a9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aa0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002aa4:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	69e1      	ldr	r1, [r4, #28]
 8002aac:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ab4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002ab8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002abc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002abe:	430b      	orrs	r3, r1
 8002ac0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8002ac4:	4a14      	ldr	r2, [pc, #80]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002ac6:	6813      	ldr	r3, [r2, #0]
 8002ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002acc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002ace:	f7fe fad3 	bl	8001078 <HAL_GetTick>
 8002ad2:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ad4:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002adc:	d119      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x59a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ade:	f7fe facb 	bl	8001078 <HAL_GetTick>
 8002ae2:	1b00      	subs	r0, r0, r4
 8002ae4:	2864      	cmp	r0, #100	; 0x64
 8002ae6:	d9f5      	bls.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
        return HAL_TIMEOUT;
 8002ae8:	2003      	movs	r0, #3
 8002aea:	e788      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x486>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002aec:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8002aee:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002af2:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002af6:	6965      	ldr	r5, [r4, #20]
 8002af8:	6a23      	ldr	r3, [r4, #32]
 8002afa:	041b      	lsls	r3, r3, #16
 8002afc:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8002b00:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8002b04:	4303      	orrs	r3, r0
 8002b06:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002b0a:	430b      	orrs	r3, r1
 8002b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002b10:	e7ba      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x510>
  return HAL_OK;
 8002b12:	2000      	movs	r0, #0
 8002b14:	e773      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	0ffffcff 	.word	0x0ffffcff

08002b20 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b20:	2800      	cmp	r0, #0
 8002b22:	d06f      	beq.n	8002c04 <HAL_SPI_Init+0xe4>
{
 8002b24:	b510      	push	{r4, lr}
 8002b26:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002b2a:	b933      	cbnz	r3, 8002b3a <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b2c:	6843      	ldr	r3, [r0, #4]
 8002b2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b32:	d005      	beq.n	8002b40 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61c3      	str	r3, [r0, #28]
 8002b38:	e002      	b.n	8002b40 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b3e:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b40:	2300      	movs	r3, #0
 8002b42:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b44:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d052      	beq.n	8002bf2 <HAL_SPI_Init+0xd2>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b52:	6822      	ldr	r2, [r4, #0]
 8002b54:	6813      	ldr	r3, [r2, #0]
 8002b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b5a:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b5c:	68e3      	ldr	r3, [r4, #12]
 8002b5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b62:	d94c      	bls.n	8002bfe <HAL_SPI_Init+0xde>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b64:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b66:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002b6a:	bf18      	it	ne
 8002b6c:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 8002b70:	d001      	beq.n	8002b76 <HAL_SPI_Init+0x56>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b72:	2300      	movs	r3, #0
 8002b74:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b76:	6863      	ldr	r3, [r4, #4]
 8002b78:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8002b7c:	68a1      	ldr	r1, [r4, #8]
 8002b7e:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8002b82:	430b      	orrs	r3, r1
 8002b84:	6921      	ldr	r1, [r4, #16]
 8002b86:	f001 0102 	and.w	r1, r1, #2
 8002b8a:	430b      	orrs	r3, r1
 8002b8c:	6961      	ldr	r1, [r4, #20]
 8002b8e:	f001 0101 	and.w	r1, r1, #1
 8002b92:	430b      	orrs	r3, r1
 8002b94:	69a1      	ldr	r1, [r4, #24]
 8002b96:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8002b9a:	430b      	orrs	r3, r1
 8002b9c:	69e1      	ldr	r1, [r4, #28]
 8002b9e:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8002ba2:	430b      	orrs	r3, r1
 8002ba4:	6a21      	ldr	r1, [r4, #32]
 8002ba6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002baa:	430b      	orrs	r3, r1
 8002bac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002bae:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8002bb2:	6820      	ldr	r0, [r4, #0]
 8002bb4:	430b      	orrs	r3, r1
 8002bb6:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002bb8:	8b63      	ldrh	r3, [r4, #26]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002bc0:	f001 0110 	and.w	r1, r1, #16
 8002bc4:	430b      	orrs	r3, r1
 8002bc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bc8:	f001 0108 	and.w	r1, r1, #8
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	68e1      	ldr	r1, [r4, #12]
 8002bd0:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	6821      	ldr	r1, [r4, #0]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bdc:	6822      	ldr	r2, [r4, #0]
 8002bde:	69d3      	ldr	r3, [r2, #28]
 8002be0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002be4:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002be6:	2000      	movs	r0, #0
 8002be8:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002bea:	2301      	movs	r3, #1
 8002bec:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8002bf0:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002bf2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	f7fe f914 	bl	8000e24 <HAL_SPI_MspInit>
 8002bfc:	e7a6      	b.n	8002b4c <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002bfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c02:	e7b0      	b.n	8002b66 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8002c04:	2001      	movs	r0, #1
}
 8002c06:	4770      	bx	lr

08002c08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c08:	b510      	push	{r4, lr}
 8002c0a:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c0c:	6883      	ldr	r3, [r0, #8]
 8002c0e:	6902      	ldr	r2, [r0, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	6942      	ldr	r2, [r0, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	69c2      	ldr	r2, [r0, #28]
 8002c18:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c1a:	6801      	ldr	r1, [r0, #0]
 8002c1c:	6808      	ldr	r0, [r1, #0]
 8002c1e:	4aa0      	ldr	r2, [pc, #640]	; (8002ea0 <UART_SetConfig+0x298>)
 8002c20:	4002      	ands	r2, r0
 8002c22:	4313      	orrs	r3, r2
 8002c24:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c26:	6822      	ldr	r2, [r4, #0]
 8002c28:	6853      	ldr	r3, [r2, #4]
 8002c2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c2e:	68e1      	ldr	r1, [r4, #12]
 8002c30:	430b      	orrs	r3, r1
 8002c32:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c34:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8002c36:	6a23      	ldr	r3, [r4, #32]
 8002c38:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c3a:	6821      	ldr	r1, [r4, #0]
 8002c3c:	688b      	ldr	r3, [r1, #8]
 8002c3e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	4a96      	ldr	r2, [pc, #600]	; (8002ea4 <UART_SetConfig+0x29c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d019      	beq.n	8002c82 <UART_SetConfig+0x7a>
 8002c4e:	4a96      	ldr	r2, [pc, #600]	; (8002ea8 <UART_SetConfig+0x2a0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d029      	beq.n	8002ca8 <UART_SetConfig+0xa0>
 8002c54:	4a95      	ldr	r2, [pc, #596]	; (8002eac <UART_SetConfig+0x2a4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d03e      	beq.n	8002cd8 <UART_SetConfig+0xd0>
 8002c5a:	4a95      	ldr	r2, [pc, #596]	; (8002eb0 <UART_SetConfig+0x2a8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d062      	beq.n	8002d26 <UART_SetConfig+0x11e>
 8002c60:	4a94      	ldr	r2, [pc, #592]	; (8002eb4 <UART_SetConfig+0x2ac>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d071      	beq.n	8002d4a <UART_SetConfig+0x142>
 8002c66:	4a94      	ldr	r2, [pc, #592]	; (8002eb8 <UART_SetConfig+0x2b0>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	f000 8083 	beq.w	8002d74 <UART_SetConfig+0x16c>
 8002c6e:	4a93      	ldr	r2, [pc, #588]	; (8002ebc <UART_SetConfig+0x2b4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	f000 8094 	beq.w	8002d9e <UART_SetConfig+0x196>
 8002c76:	4a92      	ldr	r2, [pc, #584]	; (8002ec0 <UART_SetConfig+0x2b8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	f000 80a5 	beq.w	8002dc8 <UART_SetConfig+0x1c0>
 8002c7e:	2310      	movs	r3, #16
 8002c80:	e03a      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002c82:	4b90      	ldr	r3, [pc, #576]	; (8002ec4 <UART_SetConfig+0x2bc>)
 8002c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d809      	bhi.n	8002ca4 <UART_SetConfig+0x9c>
 8002c90:	e8df f003 	tbb	[pc, r3]
 8002c94:	06ae0402 	.word	0x06ae0402
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e02d      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002c9c:	2304      	movs	r3, #4
 8002c9e:	e02b      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002ca0:	2308      	movs	r3, #8
 8002ca2:	e029      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002ca4:	2310      	movs	r3, #16
 8002ca6:	e027      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002ca8:	4b86      	ldr	r3, [pc, #536]	; (8002ec4 <UART_SetConfig+0x2bc>)
 8002caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b0c      	cmp	r3, #12
 8002cb4:	d80e      	bhi.n	8002cd4 <UART_SetConfig+0xcc>
 8002cb6:	e8df f003 	tbb	[pc, r3]
 8002cba:	0d07      	.short	0x0d07
 8002cbc:	0d090d0d 	.word	0x0d090d0d
 8002cc0:	0d9d0d0d 	.word	0x0d9d0d0d
 8002cc4:	0d0d      	.short	0x0d0d
 8002cc6:	0b          	.byte	0x0b
 8002cc7:	00          	.byte	0x00
 8002cc8:	2300      	movs	r3, #0
 8002cca:	e015      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002ccc:	2304      	movs	r3, #4
 8002cce:	e013      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002cd0:	2308      	movs	r3, #8
 8002cd2:	e011      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002cd4:	2310      	movs	r3, #16
 8002cd6:	e00f      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002cd8:	4b7a      	ldr	r3, [pc, #488]	; (8002ec4 <UART_SetConfig+0x2bc>)
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cde:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ce2:	2b20      	cmp	r3, #32
 8002ce4:	f000 8088 	beq.w	8002df8 <UART_SetConfig+0x1f0>
 8002ce8:	d819      	bhi.n	8002d1e <UART_SetConfig+0x116>
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 8086 	beq.w	8002dfc <UART_SetConfig+0x1f4>
 8002cf0:	2b10      	cmp	r3, #16
 8002cf2:	f040 8085 	bne.w	8002e00 <UART_SetConfig+0x1f8>
 8002cf6:	2304      	movs	r3, #4

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cf8:	69e0      	ldr	r0, [r4, #28]
 8002cfa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002cfe:	f000 80ab 	beq.w	8002e58 <UART_SetConfig+0x250>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	f200 810c 	bhi.w	8002f20 <UART_SetConfig+0x318>
 8002d08:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002d0c:	00fb00e8 	.word	0x00fb00e8
 8002d10:	010a00e6 	.word	0x010a00e6
 8002d14:	010a00fe 	.word	0x010a00fe
 8002d18:	010a010a 	.word	0x010a010a
 8002d1c:	0101      	.short	0x0101
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d1e:	2b30      	cmp	r3, #48	; 0x30
 8002d20:	d170      	bne.n	8002e04 <UART_SetConfig+0x1fc>
 8002d22:	2308      	movs	r3, #8
 8002d24:	e7e8      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002d26:	4b67      	ldr	r3, [pc, #412]	; (8002ec4 <UART_SetConfig+0x2bc>)
 8002d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002d30:	2b80      	cmp	r3, #128	; 0x80
 8002d32:	d069      	beq.n	8002e08 <UART_SetConfig+0x200>
 8002d34:	d805      	bhi.n	8002d42 <UART_SetConfig+0x13a>
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d068      	beq.n	8002e0c <UART_SetConfig+0x204>
 8002d3a:	2b40      	cmp	r3, #64	; 0x40
 8002d3c:	d168      	bne.n	8002e10 <UART_SetConfig+0x208>
 8002d3e:	2304      	movs	r3, #4
 8002d40:	e7da      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002d42:	2bc0      	cmp	r3, #192	; 0xc0
 8002d44:	d166      	bne.n	8002e14 <UART_SetConfig+0x20c>
 8002d46:	2308      	movs	r3, #8
 8002d48:	e7d6      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002d4a:	4b5e      	ldr	r3, [pc, #376]	; (8002ec4 <UART_SetConfig+0x2bc>)
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d58:	d05e      	beq.n	8002e18 <UART_SetConfig+0x210>
 8002d5a:	d806      	bhi.n	8002d6a <UART_SetConfig+0x162>
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d05d      	beq.n	8002e1c <UART_SetConfig+0x214>
 8002d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d64:	d15c      	bne.n	8002e20 <UART_SetConfig+0x218>
 8002d66:	2304      	movs	r3, #4
 8002d68:	e7c6      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002d6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d6e:	d159      	bne.n	8002e24 <UART_SetConfig+0x21c>
 8002d70:	2308      	movs	r3, #8
 8002d72:	e7c1      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002d74:	4b53      	ldr	r3, [pc, #332]	; (8002ec4 <UART_SetConfig+0x2bc>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d82:	d051      	beq.n	8002e28 <UART_SetConfig+0x220>
 8002d84:	d806      	bhi.n	8002d94 <UART_SetConfig+0x18c>
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d050      	beq.n	8002e2c <UART_SetConfig+0x224>
 8002d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8e:	d14f      	bne.n	8002e30 <UART_SetConfig+0x228>
 8002d90:	2304      	movs	r3, #4
 8002d92:	e7b1      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002d94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d98:	d14c      	bne.n	8002e34 <UART_SetConfig+0x22c>
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	e7ac      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002d9e:	4b49      	ldr	r3, [pc, #292]	; (8002ec4 <UART_SetConfig+0x2bc>)
 8002da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dac:	d044      	beq.n	8002e38 <UART_SetConfig+0x230>
 8002dae:	d806      	bhi.n	8002dbe <UART_SetConfig+0x1b6>
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d043      	beq.n	8002e3c <UART_SetConfig+0x234>
 8002db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db8:	d142      	bne.n	8002e40 <UART_SetConfig+0x238>
 8002dba:	2304      	movs	r3, #4
 8002dbc:	e79c      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002dbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002dc2:	d13f      	bne.n	8002e44 <UART_SetConfig+0x23c>
 8002dc4:	2308      	movs	r3, #8
 8002dc6:	e797      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002dc8:	4b3e      	ldr	r3, [pc, #248]	; (8002ec4 <UART_SetConfig+0x2bc>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd6:	d037      	beq.n	8002e48 <UART_SetConfig+0x240>
 8002dd8:	d805      	bhi.n	8002de6 <UART_SetConfig+0x1de>
 8002dda:	b3bb      	cbz	r3, 8002e4c <UART_SetConfig+0x244>
 8002ddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002de0:	d136      	bne.n	8002e50 <UART_SetConfig+0x248>
 8002de2:	2304      	movs	r3, #4
 8002de4:	e788      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002de6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002dea:	d133      	bne.n	8002e54 <UART_SetConfig+0x24c>
 8002dec:	2308      	movs	r3, #8
 8002dee:	e783      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e781      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e77f      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e77d      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	e77b      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002e00:	2310      	movs	r3, #16
 8002e02:	e779      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002e04:	2310      	movs	r3, #16
 8002e06:	e777      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e775      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e773      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002e10:	2310      	movs	r3, #16
 8002e12:	e771      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002e14:	2310      	movs	r3, #16
 8002e16:	e76f      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e76d      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e76b      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002e20:	2310      	movs	r3, #16
 8002e22:	e769      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002e24:	2310      	movs	r3, #16
 8002e26:	e767      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e765      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e763      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002e30:	2310      	movs	r3, #16
 8002e32:	e761      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002e34:	2310      	movs	r3, #16
 8002e36:	e75f      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e75d      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	e75b      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002e40:	2310      	movs	r3, #16
 8002e42:	e759      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002e44:	2310      	movs	r3, #16
 8002e46:	e757      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e755      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e753      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002e50:	2310      	movs	r3, #16
 8002e52:	e751      	b.n	8002cf8 <UART_SetConfig+0xf0>
 8002e54:	2310      	movs	r3, #16
 8002e56:	e74f      	b.n	8002cf8 <UART_SetConfig+0xf0>
    switch (clocksource)
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d85b      	bhi.n	8002f14 <UART_SetConfig+0x30c>
 8002e5c:	e8df f003 	tbb	[pc, r3]
 8002e60:	5a3a3405 	.word	0x5a3a3405
 8002e64:	5a5a5a37 	.word	0x5a5a5a37
 8002e68:	09          	.byte	0x09
 8002e69:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e6a:	f7ff fb65 	bl	8002538 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002e6e:	2800      	cmp	r0, #0
 8002e70:	d052      	beq.n	8002f18 <UART_SetConfig+0x310>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e72:	6862      	ldr	r2, [r4, #4]
 8002e74:	0853      	lsrs	r3, r2, #1
 8002e76:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002e7a:	fbb0 f0f2 	udiv	r0, r0, r2
 8002e7e:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e80:	f1a0 0210 	sub.w	r2, r0, #16
 8002e84:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d847      	bhi.n	8002f1c <UART_SetConfig+0x314>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e8c:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e90:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8002e94:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8002e96:	6823      	ldr	r3, [r4, #0]
 8002e98:	60d8      	str	r0, [r3, #12]
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	e045      	b.n	8002f2a <UART_SetConfig+0x322>
 8002e9e:	bf00      	nop
 8002ea0:	efff69f3 	.word	0xefff69f3
 8002ea4:	40011000 	.word	0x40011000
 8002ea8:	40004400 	.word	0x40004400
 8002eac:	40004800 	.word	0x40004800
 8002eb0:	40004c00 	.word	0x40004c00
 8002eb4:	40005000 	.word	0x40005000
 8002eb8:	40011400 	.word	0x40011400
 8002ebc:	40007800 	.word	0x40007800
 8002ec0:	40007c00 	.word	0x40007c00
 8002ec4:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ec8:	f7ff fb46 	bl	8002558 <HAL_RCC_GetPCLK2Freq>
        break;
 8002ecc:	e7cf      	b.n	8002e6e <UART_SetConfig+0x266>
        pclk = HAL_RCC_GetSysClockFreq();
 8002ece:	f7ff fa27 	bl	8002320 <HAL_RCC_GetSysClockFreq>
        break;
 8002ed2:	e7cc      	b.n	8002e6e <UART_SetConfig+0x266>
        pclk = (uint32_t) HSI_VALUE;
 8002ed4:	4817      	ldr	r0, [pc, #92]	; (8002f34 <UART_SetConfig+0x32c>)
 8002ed6:	e7cc      	b.n	8002e72 <UART_SetConfig+0x26a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ed8:	4816      	ldr	r0, [pc, #88]	; (8002f34 <UART_SetConfig+0x32c>)
 8002eda:	e002      	b.n	8002ee2 <UART_SetConfig+0x2da>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002edc:	f7ff fb2c 	bl	8002538 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8002ee0:	b300      	cbz	r0, 8002f24 <UART_SetConfig+0x31c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ee2:	6863      	ldr	r3, [r4, #4]
 8002ee4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002ee8:	fbb0 f0f3 	udiv	r0, r0, r3
 8002eec:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eee:	f1a0 0210 	sub.w	r2, r0, #16
 8002ef2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d816      	bhi.n	8002f28 <UART_SetConfig+0x320>
      {
        huart->Instance->BRR = usartdiv;
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	60d8      	str	r0, [r3, #12]
 8002efe:	2000      	movs	r0, #0
 8002f00:	e013      	b.n	8002f2a <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f02:	f7ff fb29 	bl	8002558 <HAL_RCC_GetPCLK2Freq>
        break;
 8002f06:	e7eb      	b.n	8002ee0 <UART_SetConfig+0x2d8>
        pclk = HAL_RCC_GetSysClockFreq();
 8002f08:	f7ff fa0a 	bl	8002320 <HAL_RCC_GetSysClockFreq>
        break;
 8002f0c:	e7e8      	b.n	8002ee0 <UART_SetConfig+0x2d8>
        pclk = (uint32_t) LSE_VALUE;
 8002f0e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f12:	e7e6      	b.n	8002ee2 <UART_SetConfig+0x2da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f14:	2001      	movs	r0, #1
 8002f16:	e008      	b.n	8002f2a <UART_SetConfig+0x322>
 8002f18:	2000      	movs	r0, #0
 8002f1a:	e006      	b.n	8002f2a <UART_SetConfig+0x322>
        ret = HAL_ERROR;
 8002f1c:	2001      	movs	r0, #1
 8002f1e:	e004      	b.n	8002f2a <UART_SetConfig+0x322>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f20:	2001      	movs	r0, #1
 8002f22:	e002      	b.n	8002f2a <UART_SetConfig+0x322>
 8002f24:	2000      	movs	r0, #0
 8002f26:	e000      	b.n	8002f2a <UART_SetConfig+0x322>
      }
      else
      {
        ret = HAL_ERROR;
 8002f28:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8002f2e:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 8002f30:	bd10      	pop	{r4, pc}
 8002f32:	bf00      	nop
 8002f34:	00f42400 	.word	0x00f42400

08002f38 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f3a:	f013 0f01 	tst.w	r3, #1
 8002f3e:	d006      	beq.n	8002f4e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f40:	6802      	ldr	r2, [r0, #0]
 8002f42:	6853      	ldr	r3, [r2, #4]
 8002f44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002f48:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002f4a:	430b      	orrs	r3, r1
 8002f4c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f4e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f50:	f013 0f02 	tst.w	r3, #2
 8002f54:	d006      	beq.n	8002f64 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f56:	6802      	ldr	r2, [r0, #0]
 8002f58:	6853      	ldr	r3, [r2, #4]
 8002f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002f60:	430b      	orrs	r3, r1
 8002f62:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f66:	f013 0f04 	tst.w	r3, #4
 8002f6a:	d006      	beq.n	8002f7a <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f6c:	6802      	ldr	r2, [r0, #0]
 8002f6e:	6853      	ldr	r3, [r2, #4]
 8002f70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f74:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002f76:	430b      	orrs	r3, r1
 8002f78:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f7c:	f013 0f08 	tst.w	r3, #8
 8002f80:	d006      	beq.n	8002f90 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f82:	6802      	ldr	r2, [r0, #0]
 8002f84:	6853      	ldr	r3, [r2, #4]
 8002f86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f8a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f92:	f013 0f10 	tst.w	r3, #16
 8002f96:	d006      	beq.n	8002fa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f98:	6802      	ldr	r2, [r0, #0]
 8002f9a:	6893      	ldr	r3, [r2, #8]
 8002f9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fa0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002fa2:	430b      	orrs	r3, r1
 8002fa4:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fa6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fa8:	f013 0f20 	tst.w	r3, #32
 8002fac:	d006      	beq.n	8002fbc <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fae:	6802      	ldr	r2, [r0, #0]
 8002fb0:	6893      	ldr	r3, [r2, #8]
 8002fb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fb6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fbe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002fc2:	d00a      	beq.n	8002fda <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fc4:	6802      	ldr	r2, [r0, #0]
 8002fc6:	6853      	ldr	r3, [r2, #4]
 8002fc8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002fcc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fd2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002fd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fd8:	d00b      	beq.n	8002ff2 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fda:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fdc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002fe0:	d006      	beq.n	8002ff0 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fe2:	6802      	ldr	r2, [r0, #0]
 8002fe4:	6853      	ldr	r3, [r2, #4]
 8002fe6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002fea:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002fec:	430b      	orrs	r3, r1
 8002fee:	6053      	str	r3, [r2, #4]
  }
}
 8002ff0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ff2:	6802      	ldr	r2, [r0, #0]
 8002ff4:	6853      	ldr	r3, [r2, #4]
 8002ff6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ffa:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	6053      	str	r3, [r2, #4]
 8003000:	e7eb      	b.n	8002fda <UART_AdvFeatureConfig+0xa2>

08003002 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003002:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003006:	4605      	mov	r5, r0
 8003008:	460f      	mov	r7, r1
 800300a:	4616      	mov	r6, r2
 800300c:	4699      	mov	r9, r3
 800300e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003012:	682c      	ldr	r4, [r5, #0]
 8003014:	69e4      	ldr	r4, [r4, #28]
 8003016:	ea37 0304 	bics.w	r3, r7, r4
 800301a:	bf0c      	ite	eq
 800301c:	2401      	moveq	r4, #1
 800301e:	2400      	movne	r4, #0
 8003020:	42b4      	cmp	r4, r6
 8003022:	d13d      	bne.n	80030a0 <UART_WaitOnFlagUntilTimeout+0x9e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003024:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003028:	d0f3      	beq.n	8003012 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302a:	f7fe f825 	bl	8001078 <HAL_GetTick>
 800302e:	eba0 0009 	sub.w	r0, r0, r9
 8003032:	4540      	cmp	r0, r8
 8003034:	d822      	bhi.n	800307c <UART_WaitOnFlagUntilTimeout+0x7a>
 8003036:	f1b8 0f00 	cmp.w	r8, #0
 800303a:	d01f      	beq.n	800307c <UART_WaitOnFlagUntilTimeout+0x7a>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800303c:	682b      	ldr	r3, [r5, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	f012 0f04 	tst.w	r2, #4
 8003044:	d0e5      	beq.n	8003012 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800304c:	d0e1      	beq.n	8003012 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800304e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003052:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003054:	682a      	ldr	r2, [r5, #0]
 8003056:	6813      	ldr	r3, [r2, #0]
 8003058:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800305c:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800305e:	682a      	ldr	r2, [r5, #0]
 8003060:	6893      	ldr	r3, [r2, #8]
 8003062:	f023 0301 	bic.w	r3, r3, #1
 8003066:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003068:	2320      	movs	r3, #32
 800306a:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800306c:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800306e:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003072:	2300      	movs	r3, #0
 8003074:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74

          return HAL_TIMEOUT;
 8003078:	2003      	movs	r0, #3
 800307a:	e012      	b.n	80030a2 <UART_WaitOnFlagUntilTimeout+0xa0>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800307c:	682a      	ldr	r2, [r5, #0]
 800307e:	6813      	ldr	r3, [r2, #0]
 8003080:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003084:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003086:	682a      	ldr	r2, [r5, #0]
 8003088:	6893      	ldr	r3, [r2, #8]
 800308a:	f023 0301 	bic.w	r3, r3, #1
 800308e:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003090:	2320      	movs	r3, #32
 8003092:	67ab      	str	r3, [r5, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003094:	67eb      	str	r3, [r5, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8003096:	2300      	movs	r3, #0
 8003098:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
        return HAL_TIMEOUT;
 800309c:	2003      	movs	r0, #3
 800309e:	e000      	b.n	80030a2 <UART_WaitOnFlagUntilTimeout+0xa0>
        }
      }
    }
  }
  return HAL_OK;
 80030a0:	2000      	movs	r0, #0
}
 80030a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080030a6 <UART_CheckIdleState>:
{
 80030a6:	b510      	push	{r4, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ac:	2300      	movs	r3, #0
 80030ae:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80030b2:	f7fd ffe1 	bl	8001078 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030b6:	6823      	ldr	r3, [r4, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f013 0f08 	tst.w	r3, #8
 80030be:	d108      	bne.n	80030d2 <UART_CheckIdleState+0x2c>
  huart->gState = HAL_UART_STATE_READY;
 80030c0:	2320      	movs	r3, #32
 80030c2:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80030c4:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c6:	2000      	movs	r0, #0
 80030c8:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 80030ca:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
}
 80030ce:	b002      	add	sp, #8
 80030d0:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	4603      	mov	r3, r0
 80030da:	2200      	movs	r2, #0
 80030dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030e0:	4620      	mov	r0, r4
 80030e2:	f7ff ff8e 	bl	8003002 <UART_WaitOnFlagUntilTimeout>
 80030e6:	2800      	cmp	r0, #0
 80030e8:	d0ea      	beq.n	80030c0 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80030ea:	2003      	movs	r0, #3
 80030ec:	e7ef      	b.n	80030ce <UART_CheckIdleState+0x28>

080030ee <HAL_UART_Init>:
  if (huart == NULL)
 80030ee:	b368      	cbz	r0, 800314c <HAL_UART_Init+0x5e>
{
 80030f0:	b510      	push	{r4, lr}
 80030f2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80030f4:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80030f6:	b303      	cbz	r3, 800313a <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 80030f8:	2324      	movs	r3, #36	; 0x24
 80030fa:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80030fc:	6822      	ldr	r2, [r4, #0]
 80030fe:	6813      	ldr	r3, [r2, #0]
 8003100:	f023 0301 	bic.w	r3, r3, #1
 8003104:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003106:	4620      	mov	r0, r4
 8003108:	f7ff fd7e 	bl	8002c08 <UART_SetConfig>
 800310c:	2801      	cmp	r0, #1
 800310e:	d013      	beq.n	8003138 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003110:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003112:	b9bb      	cbnz	r3, 8003144 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003114:	6822      	ldr	r2, [r4, #0]
 8003116:	6853      	ldr	r3, [r2, #4]
 8003118:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800311c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800311e:	6822      	ldr	r2, [r4, #0]
 8003120:	6893      	ldr	r3, [r2, #8]
 8003122:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003126:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003128:	6822      	ldr	r2, [r4, #0]
 800312a:	6813      	ldr	r3, [r2, #0]
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8003132:	4620      	mov	r0, r4
 8003134:	f7ff ffb7 	bl	80030a6 <UART_CheckIdleState>
}
 8003138:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800313a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 800313e:	f7fd febb 	bl	8000eb8 <HAL_UART_MspInit>
 8003142:	e7d9      	b.n	80030f8 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8003144:	4620      	mov	r0, r4
 8003146:	f7ff fef7 	bl	8002f38 <UART_AdvFeatureConfig>
 800314a:	e7e3      	b.n	8003114 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 800314c:	2001      	movs	r0, #1
}
 800314e:	4770      	bx	lr

08003150 <_ZN3app7Factory10initializeEv>:

}

// static
void Factory::initialize()
{
 8003150:	b508      	push	{r3, lr}
    Trace::initialize();
 8003152:	f001 f8d5 	bl	8004300 <_ZN5Trace10initializeEv>
    // TODO: Initialize factory attributes here

#if defined(TOUCHGFX_ENABLED) && (TOUCHGFX_ENABLED != 0)
    getTouchGfxTask().initialize(_buttonEventsHandler);
#endif
}
 8003156:	bd08      	pop	{r3, pc}

08003158 <Factory_initialize>:
#endif // TOUCHGFX_ENABLED

} /* namespace app */

void Factory_initialize()
{
 8003158:	b508      	push	{r3, lr}
    app::Factory::initialize();
 800315a:	f7ff fff9 	bl	8003150 <_ZN3app7Factory10initializeEv>
}
 800315e:	bd08      	pop	{r3, pc}

08003160 <Factory_build>:

void Factory_build()
{
    app::Factory::build();
}
 8003160:	4770      	bx	lr

08003162 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8003162:	4770      	bx	lr

08003164 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 8003164:	2000      	movs	r0, #0
 8003166:	4770      	bx	lr

08003168 <ft5336_TS_ClearIT>:
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
  /* Nothing to be done here for FT5336 */
}
 8003168:	4770      	bx	lr
	...

0800316c <ft5336_Get_I2C_InitializedStatus>:
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
}
 800316c:	4b01      	ldr	r3, [pc, #4]	; (8003174 <ft5336_Get_I2C_InitializedStatus+0x8>)
 800316e:	7818      	ldrb	r0, [r3, #0]
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	200000c4 	.word	0x200000c4

08003178 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8003178:	b508      	push	{r3, lr}
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800317a:	f7ff fff7 	bl	800316c <ft5336_Get_I2C_InitializedStatus>
 800317e:	b910      	cbnz	r0, 8003186 <ft5336_I2C_InitializeIfRequired+0xe>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8003180:	4b01      	ldr	r3, [pc, #4]	; (8003188 <ft5336_I2C_InitializeIfRequired+0x10>)
 8003182:	2201      	movs	r2, #1
 8003184:	701a      	strb	r2, [r3, #0]
  }
}
 8003186:	bd08      	pop	{r3, pc}
 8003188:	200000c4 	.word	0x200000c4

0800318c <ft5336_Init>:
{
 800318c:	b508      	push	{r3, lr}
  ft5336_I2C_InitializeIfRequired();
 800318e:	f7ff fff3 	bl	8003178 <ft5336_I2C_InitializeIfRequired>
}
 8003192:	bd08      	pop	{r3, pc}

08003194 <ft5336_ReadID>:
{
 8003194:	b570      	push	{r4, r5, r6, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	4606      	mov	r6, r0
  volatile uint8_t ucReadId = 0;
 800319a:	2400      	movs	r4, #0
 800319c:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_I2C_InitializeIfRequired();
 80031a0:	f7ff ffea 	bl	8003178 <ft5336_I2C_InitializeIfRequired>
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80031a4:	4625      	mov	r5, r4
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80031a6:	e001      	b.n	80031ac <ft5336_ReadID+0x18>
 80031a8:	3401      	adds	r4, #1
 80031aa:	b2e4      	uxtb	r4, r4
 80031ac:	f085 0301 	eor.w	r3, r5, #1
 80031b0:	2c02      	cmp	r4, #2
 80031b2:	bf8c      	ite	hi
 80031b4:	2300      	movhi	r3, #0
 80031b6:	f003 0301 	andls.w	r3, r3, #1
 80031ba:	b163      	cbz	r3, 80031d6 <ft5336_ReadID+0x42>
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80031bc:	21a8      	movs	r1, #168	; 0xa8
 80031be:	b2f0      	uxtb	r0, r6
 80031c0:	f000 fb8c 	bl	80038dc <TS_IO_Read>
 80031c4:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 80031c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b51      	cmp	r3, #81	; 0x51
 80031d0:	d1ea      	bne.n	80031a8 <ft5336_ReadID+0x14>
      bFoundDevice = 1;
 80031d2:	2501      	movs	r5, #1
 80031d4:	e7e8      	b.n	80031a8 <ft5336_ReadID+0x14>
  return (ucReadId);
 80031d6:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80031da:	b002      	add	sp, #8
 80031dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080031e0 <ft5336_TS_DetectTouch>:
{
 80031e0:	b500      	push	{lr}
 80031e2:	b083      	sub	sp, #12
  volatile uint8_t nbTouch = 0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	f88d 3007 	strb.w	r3, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80031ea:	2102      	movs	r1, #2
 80031ec:	b2c0      	uxtb	r0, r0
 80031ee:	f000 fb75 	bl	80038dc <TS_IO_Read>
 80031f2:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 80031f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8003202:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b05      	cmp	r3, #5
 800320a:	d902      	bls.n	8003212 <ft5336_TS_DetectTouch+0x32>
    nbTouch = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	f88d 3007 	strb.w	r3, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8003212:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003216:	4b04      	ldr	r3, [pc, #16]	; (8003228 <ft5336_TS_DetectTouch+0x48>)
 8003218:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 800321a:	2200      	movs	r2, #0
 800321c:	709a      	strb	r2, [r3, #2]
  return(nbTouch);
 800321e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8003222:	b003      	add	sp, #12
 8003224:	f85d fb04 	ldr.w	pc, [sp], #4
 8003228:	200000c4 	.word	0x200000c4

0800322c <ft5336_TS_GetXY>:
{
 800322c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	4616      	mov	r6, r2
  volatile uint8_t ucReadData = 0;
 8003234:	2300      	movs	r3, #0
 8003236:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800323a:	4a4e      	ldr	r2, [pc, #312]	; (8003374 <ft5336_TS_GetXY+0x148>)
 800323c:	7893      	ldrb	r3, [r2, #2]
 800323e:	7852      	ldrb	r2, [r2, #1]
 8003240:	4293      	cmp	r3, r2
 8003242:	d24c      	bcs.n	80032de <ft5336_TS_GetXY+0xb2>
 8003244:	460f      	mov	r7, r1
    switch(ft5336_handle.currActiveTouchIdx)
 8003246:	2b09      	cmp	r3, #9
 8003248:	d806      	bhi.n	8003258 <ft5336_TS_GetXY+0x2c>
 800324a:	e8df f003 	tbb	[pc, r3]
 800324e:	0b8b      	.short	0x0b8b
 8003250:	635b534b 	.word	0x635b534b
 8003254:	837b736b 	.word	0x837b736b
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8003258:	f04f 0800 	mov.w	r8, #0
 800325c:	46c1      	mov	r9, r8
 800325e:	46c2      	mov	sl, r8
 8003260:	4641      	mov	r1, r8
 8003262:	e006      	b.n	8003272 <ft5336_TS_GetXY+0x46>
      regAddressYHigh = FT5336_P2_YH_REG;
 8003264:	f04f 080b 	mov.w	r8, #11
      regAddressYLow  = FT5336_P2_YL_REG;
 8003268:	f04f 090c 	mov.w	r9, #12
      regAddressXHigh = FT5336_P2_XH_REG;
 800326c:	f04f 0a09 	mov.w	sl, #9
      regAddressXLow  = FT5336_P2_XL_REG;
 8003270:	210a      	movs	r1, #10
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8003272:	b2c4      	uxtb	r4, r0
 8003274:	4620      	mov	r0, r4
 8003276:	f000 fb31 	bl	80038dc <TS_IO_Read>
 800327a:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800327e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003282:	4d3c      	ldr	r5, [pc, #240]	; (8003374 <ft5336_TS_GetXY+0x148>)
 8003284:	80ab      	strh	r3, [r5, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8003286:	4651      	mov	r1, sl
 8003288:	4620      	mov	r0, r4
 800328a:	f000 fb27 	bl	80038dc <TS_IO_Read>
 800328e:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003292:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003296:	021b      	lsls	r3, r3, #8
 8003298:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800329c:	88aa      	ldrh	r2, [r5, #4]
 800329e:	4313      	orrs	r3, r2
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	80ab      	strh	r3, [r5, #4]
    *X = coord;
 80032a4:	803b      	strh	r3, [r7, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80032a6:	4649      	mov	r1, r9
 80032a8:	4620      	mov	r0, r4
 80032aa:	f000 fb17 	bl	80038dc <TS_IO_Read>
 80032ae:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80032b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80032b6:	80ab      	strh	r3, [r5, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80032b8:	4641      	mov	r1, r8
 80032ba:	4620      	mov	r0, r4
 80032bc:	f000 fb0e 	bl	80038dc <TS_IO_Read>
 80032c0:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80032c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80032c8:	021b      	lsls	r3, r3, #8
 80032ca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80032ce:	88aa      	ldrh	r2, [r5, #4]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	80ab      	strh	r3, [r5, #4]
    *Y = coord;
 80032d6:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80032d8:	78ab      	ldrb	r3, [r5, #2]
 80032da:	3301      	adds	r3, #1
 80032dc:	70ab      	strb	r3, [r5, #2]
}
 80032de:	b002      	add	sp, #8
 80032e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      regAddressYHigh = FT5336_P3_YH_REG;
 80032e4:	f04f 0811 	mov.w	r8, #17
      regAddressYLow  = FT5336_P3_YL_REG;
 80032e8:	f04f 0912 	mov.w	r9, #18
      regAddressXHigh = FT5336_P3_XH_REG;
 80032ec:	f04f 0a0f 	mov.w	sl, #15
      regAddressXLow  = FT5336_P3_XL_REG;
 80032f0:	2110      	movs	r1, #16
      break;
 80032f2:	e7be      	b.n	8003272 <ft5336_TS_GetXY+0x46>
      regAddressYHigh = FT5336_P4_YH_REG;
 80032f4:	f04f 0817 	mov.w	r8, #23
      regAddressYLow  = FT5336_P4_YL_REG;
 80032f8:	f04f 0918 	mov.w	r9, #24
      regAddressXHigh = FT5336_P4_XH_REG;
 80032fc:	f04f 0a15 	mov.w	sl, #21
      regAddressXLow  = FT5336_P4_XL_REG;
 8003300:	2116      	movs	r1, #22
      break;
 8003302:	e7b6      	b.n	8003272 <ft5336_TS_GetXY+0x46>
      regAddressYHigh = FT5336_P5_YH_REG;
 8003304:	f04f 081d 	mov.w	r8, #29
      regAddressYLow  = FT5336_P5_YL_REG;
 8003308:	f04f 091e 	mov.w	r9, #30
      regAddressXHigh = FT5336_P5_XH_REG;
 800330c:	f04f 0a1b 	mov.w	sl, #27
      regAddressXLow  = FT5336_P5_XL_REG;
 8003310:	211c      	movs	r1, #28
      break;
 8003312:	e7ae      	b.n	8003272 <ft5336_TS_GetXY+0x46>
      regAddressYHigh = FT5336_P6_YH_REG;
 8003314:	f04f 0823 	mov.w	r8, #35	; 0x23
      regAddressYLow  = FT5336_P6_YL_REG;
 8003318:	f04f 0924 	mov.w	r9, #36	; 0x24
      regAddressXHigh = FT5336_P6_XH_REG;
 800331c:	f04f 0a21 	mov.w	sl, #33	; 0x21
      regAddressXLow  = FT5336_P6_XL_REG;
 8003320:	2122      	movs	r1, #34	; 0x22
      break;
 8003322:	e7a6      	b.n	8003272 <ft5336_TS_GetXY+0x46>
      regAddressYHigh = FT5336_P7_YH_REG;
 8003324:	f04f 0829 	mov.w	r8, #41	; 0x29
      regAddressYLow  = FT5336_P7_YL_REG;
 8003328:	f04f 092a 	mov.w	r9, #42	; 0x2a
      regAddressXHigh = FT5336_P7_XH_REG;
 800332c:	f04f 0a27 	mov.w	sl, #39	; 0x27
      regAddressXLow  = FT5336_P7_XL_REG;
 8003330:	2128      	movs	r1, #40	; 0x28
      break;
 8003332:	e79e      	b.n	8003272 <ft5336_TS_GetXY+0x46>
      regAddressYHigh = FT5336_P8_YH_REG;
 8003334:	f04f 082f 	mov.w	r8, #47	; 0x2f
      regAddressYLow  = FT5336_P8_YL_REG;
 8003338:	f04f 0930 	mov.w	r9, #48	; 0x30
      regAddressXHigh = FT5336_P8_XH_REG;
 800333c:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
      regAddressXLow  = FT5336_P8_XL_REG;
 8003340:	212e      	movs	r1, #46	; 0x2e
      break;
 8003342:	e796      	b.n	8003272 <ft5336_TS_GetXY+0x46>
      regAddressYHigh = FT5336_P9_YH_REG;
 8003344:	f04f 0835 	mov.w	r8, #53	; 0x35
      regAddressYLow  = FT5336_P9_YL_REG;
 8003348:	f04f 0936 	mov.w	r9, #54	; 0x36
      regAddressXHigh = FT5336_P9_XH_REG;
 800334c:	f04f 0a33 	mov.w	sl, #51	; 0x33
      regAddressXLow  = FT5336_P9_XL_REG;
 8003350:	2134      	movs	r1, #52	; 0x34
      break;
 8003352:	e78e      	b.n	8003272 <ft5336_TS_GetXY+0x46>
      regAddressYHigh = FT5336_P10_YH_REG;
 8003354:	f04f 083b 	mov.w	r8, #59	; 0x3b
      regAddressYLow  = FT5336_P10_YL_REG;
 8003358:	f04f 093c 	mov.w	r9, #60	; 0x3c
      regAddressXHigh = FT5336_P10_XH_REG;
 800335c:	f04f 0a39 	mov.w	sl, #57	; 0x39
      regAddressXLow  = FT5336_P10_XL_REG;
 8003360:	213a      	movs	r1, #58	; 0x3a
      break;
 8003362:	e786      	b.n	8003272 <ft5336_TS_GetXY+0x46>
      regAddressYHigh = FT5336_P1_YH_REG;
 8003364:	f04f 0805 	mov.w	r8, #5
      regAddressYLow  = FT5336_P1_YL_REG;
 8003368:	f04f 0906 	mov.w	r9, #6
      regAddressXHigh = FT5336_P1_XH_REG;
 800336c:	f04f 0a03 	mov.w	sl, #3
      regAddressXLow  = FT5336_P1_XL_REG;
 8003370:	2104      	movs	r1, #4
 8003372:	e77e      	b.n	8003272 <ft5336_TS_GetXY+0x46>
 8003374:	200000c4 	.word	0x200000c4

08003378 <ft5336_TS_EnableIT>:
{
 8003378:	b508      	push	{r3, lr}
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800337a:	2201      	movs	r2, #1
 800337c:	21a4      	movs	r1, #164	; 0xa4
 800337e:	b2c0      	uxtb	r0, r0
 8003380:	f000 fa98 	bl	80038b4 <TS_IO_Write>
}
 8003384:	bd08      	pop	{r3, pc}

08003386 <ft5336_TS_DisableIT>:
{
 8003386:	b508      	push	{r3, lr}
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8003388:	2200      	movs	r2, #0
 800338a:	21a4      	movs	r1, #164	; 0xa4
 800338c:	b2c0      	uxtb	r0, r0
 800338e:	f000 fa91 	bl	80038b4 <TS_IO_Write>
}
 8003392:	bd08      	pop	{r3, pc}

08003394 <ft5336_TS_Start>:
{
 8003394:	b508      	push	{r3, lr}
  ft5336_TS_DisableIT(DeviceAddr);
 8003396:	f7ff fff6 	bl	8003386 <ft5336_TS_DisableIT>
}
 800339a:	bd08      	pop	{r3, pc}

0800339c <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
    {
        return Event::EVENT_CLICK;
    }
 800339c:	2000      	movs	r0, #0
 800339e:	4770      	bx	lr

080033a0 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
    {
        return Event::EVENT_DRAG;
    }
 80033a0:	2001      	movs	r0, #1
 80033a2:	4770      	bx	lr

080033a4 <_ZN8touchgfx9DragEventD1Ev>:
class DragEvent : public Event
 80033a4:	4770      	bx	lr

080033a6 <_ZN8touchgfx10ClickEventD1Ev>:
class ClickEvent : public Event
 80033a6:	4770      	bx	lr

080033a8 <_ZN8touchgfx10ClickEventD0Ev>:
 80033a8:	b510      	push	{r4, lr}
 80033aa:	4604      	mov	r4, r0
 80033ac:	210c      	movs	r1, #12
 80033ae:	f006 fc3b 	bl	8009c28 <_ZdlPvj>
 80033b2:	4620      	mov	r0, r4
 80033b4:	bd10      	pop	{r4, pc}

080033b6 <_ZN8touchgfx9DragEventD0Ev>:
 80033b6:	b510      	push	{r4, lr}
 80033b8:	4604      	mov	r4, r0
 80033ba:	2110      	movs	r1, #16
 80033bc:	f006 fc34 	bl	8009c28 <_ZdlPvj>
 80033c0:	4620      	mov	r0, r4
 80033c2:	bd10      	pop	{r4, pc}

080033c4 <MX_TouchGFX_Init>:
{
#if defined(TOUCHGFX_ENABLED) && (TOUCHGFX_ENABLED != 0)
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
#endif
}
 80033c4:	4770      	bx	lr

080033c6 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
 80033c6:	b169      	cbz	r1, 80033e4 <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80033c8:	b530      	push	{r4, r5, lr}
 80033ca:	b083      	sub	sp, #12
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	9301      	str	r3, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 80033d0:	f88d 3003 	strb.w	r3, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80033d4:	6803      	ldr	r3, [r0, #0]
 80033d6:	689d      	ldr	r5, [r3, #8]
 80033d8:	f10d 0303 	add.w	r3, sp, #3
 80033dc:	aa01      	add	r2, sp, #4
 80033de:	47a8      	blx	r5
        return glyph;
    }
 80033e0:	b003      	add	sp, #12
 80033e2:	bd30      	pop	{r4, r5, pc}
            return 0;
 80033e4:	2000      	movs	r0, #0
    }
 80033e6:	4770      	bx	lr

080033e8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 80033e8:	8940      	ldrh	r0, [r0, #10]
 80033ea:	4770      	bx	lr

080033ec <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 80033ec:	8980      	ldrh	r0, [r0, #12]
 80033ee:	4770      	bx	lr

080033f0 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 80033f0:	8880      	ldrh	r0, [r0, #4]
 80033f2:	4770      	bx	lr

080033f4 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 80033f4:	8883      	ldrh	r3, [r0, #4]
 80033f6:	7980      	ldrb	r0, [r0, #6]
 80033f8:	4418      	add	r0, r3
    }
 80033fa:	b280      	uxth	r0, r0
 80033fc:	4770      	bx	lr

080033fe <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80033fe:	79c0      	ldrb	r0, [r0, #7]
    }
 8003400:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003404:	4770      	bx	lr

08003406 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003406:	79c0      	ldrb	r0, [r0, #7]
    }
 8003408:	09c0      	lsrs	r0, r0, #7
 800340a:	4770      	bx	lr

0800340c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 800340c:	6a00      	ldr	r0, [r0, #32]
 800340e:	4770      	bx	lr

08003410 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003410:	4770      	bx	lr

08003412 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
{
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8003412:	6982      	ldr	r2, [r0, #24]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8003414:	888b      	ldrh	r3, [r1, #4]
 8003416:	0adb      	lsrs	r3, r3, #11
 8003418:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800341c:	680b      	ldr	r3, [r1, #0]
}
 800341e:	4418      	add	r0, r3
 8003420:	4770      	bx	lr

08003422 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
 8003422:	b1e2      	cbz	r2, 800345e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3c>
{
 8003424:	b410      	push	{r4}
 8003426:	4614      	mov	r4, r2
    if (!glyph || glyph->kerningTableSize == 0)
 8003428:	7b13      	ldrb	r3, [r2, #12]
 800342a:	b1d3      	cbz	r3, 8003462 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x40>
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800342c:	69c2      	ldr	r2, [r0, #28]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800342e:	7b60      	ldrb	r0, [r4, #13]
 8003430:	0200      	lsls	r0, r0, #8
 8003432:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8003436:	7ae4      	ldrb	r4, [r4, #11]
 8003438:	4320      	orrs	r0, r4
 800343a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800343e:	b29b      	uxth	r3, r3
 8003440:	e005      	b.n	800344e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
    {
        if (prevChar == kerndata->unicodePrevChar)
        {
            return kerndata->distance;
 8003442:	f992 0002 	ldrsb.w	r0, [r2, #2]
 8003446:	e00d      	b.n	8003464 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x42>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003448:	3b01      	subs	r3, #1
 800344a:	b29b      	uxth	r3, r3
 800344c:	3204      	adds	r2, #4
 800344e:	b163      	cbz	r3, 800346a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x48>
        if (prevChar == kerndata->unicodePrevChar)
 8003450:	8810      	ldrh	r0, [r2, #0]
 8003452:	4288      	cmp	r0, r1
 8003454:	d0f5      	beq.n	8003442 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8003456:	4288      	cmp	r0, r1
 8003458:	d9f6      	bls.n	8003448 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        {
            break;
        }
    }
    return 0;
 800345a:	2000      	movs	r0, #0
 800345c:	e002      	b.n	8003464 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x42>
        return 0;
 800345e:	2000      	movs	r0, #0
}
 8003460:	4770      	bx	lr
        return 0;
 8003462:	2000      	movs	r0, #0
}
 8003464:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003468:	4770      	bx	lr
    return 0;
 800346a:	2000      	movs	r0, #0
 800346c:	e7fa      	b.n	8003464 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x42>

0800346e <_ZN8touchgfx13GeneratedFontD0Ev>:
 800346e:	b510      	push	{r4, lr}
 8003470:	4604      	mov	r4, r0
 8003472:	2124      	movs	r1, #36	; 0x24
 8003474:	f006 fbd8 	bl	8009c28 <_ZdlPvj>
 8003478:	4620      	mov	r0, r4
 800347a:	bd10      	pop	{r4, pc}

0800347c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800347c:	b530      	push	{r4, r5, lr}
 800347e:	b089      	sub	sp, #36	; 0x24
 8003480:	4604      	mov	r4, r0
    gsubTable(gsubData)
 8003482:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8003486:	9506      	str	r5, [sp, #24]
 8003488:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800348c:	9505      	str	r5, [sp, #20]
 800348e:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8003492:	9504      	str	r5, [sp, #16]
 8003494:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8003498:	9503      	str	r5, [sp, #12]
 800349a:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 800349e:	9502      	str	r5, [sp, #8]
 80034a0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80034a4:	9501      	str	r5, [sp, #4]
 80034a6:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80034aa:	9500      	str	r5, [sp, #0]
 80034ac:	f003 fc42 	bl	8006d34 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80034b0:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x4c>)
 80034b2:	6023      	str	r3, [r4, #0]
 80034b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80034b6:	61a3      	str	r3, [r4, #24]
 80034b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80034ba:	61e3      	str	r3, [r4, #28]
 80034bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80034be:	6223      	str	r3, [r4, #32]
}
 80034c0:	4620      	mov	r0, r4
 80034c2:	b009      	add	sp, #36	; 0x24
 80034c4:	bd30      	pop	{r4, r5, pc}
 80034c6:	bf00      	nop
 80034c8:	0800ae98 	.word	0x0800ae98

080034cc <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 68, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 80034cc:	4770      	bx	lr
	...

080034d0 <_Z23getFont_verdana_10_4bppv>:
 80034d0:	4b18      	ldr	r3, [pc, #96]	; (8003534 <_Z23getFont_verdana_10_4bppv+0x64>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	f3bf 8f5b 	dmb	ish
 80034d8:	f013 0f01 	tst.w	r3, #1
 80034dc:	d001      	beq.n	80034e2 <_Z23getFont_verdana_10_4bppv+0x12>
    return verdana_10_4bpp;
}
 80034de:	4816      	ldr	r0, [pc, #88]	; (8003538 <_Z23getFont_verdana_10_4bppv+0x68>)
 80034e0:	4770      	bx	lr
{
 80034e2:	b510      	push	{r4, lr}
 80034e4:	b08a      	sub	sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 68, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 80034e6:	4813      	ldr	r0, [pc, #76]	; (8003534 <_Z23getFont_verdana_10_4bppv+0x64>)
 80034e8:	f006 fba0 	bl	8009c2c <__cxa_guard_acquire>
 80034ec:	b910      	cbnz	r0, 80034f4 <_Z23getFont_verdana_10_4bppv+0x24>
}
 80034ee:	4812      	ldr	r0, [pc, #72]	; (8003538 <_Z23getFont_verdana_10_4bppv+0x68>)
 80034f0:	b00a      	add	sp, #40	; 0x28
 80034f2:	bd10      	pop	{r4, pc}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 68, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 80034f4:	4c0f      	ldr	r4, [pc, #60]	; (8003534 <_Z23getFont_verdana_10_4bppv+0x64>)
 80034f6:	2300      	movs	r3, #0
 80034f8:	9309      	str	r3, [sp, #36]	; 0x24
 80034fa:	9308      	str	r3, [sp, #32]
 80034fc:	233f      	movs	r3, #63	; 0x3f
 80034fe:	9307      	str	r3, [sp, #28]
 8003500:	4b0e      	ldr	r3, [pc, #56]	; (800353c <_Z23getFont_verdana_10_4bppv+0x6c>)
 8003502:	9306      	str	r3, [sp, #24]
 8003504:	4b0e      	ldr	r3, [pc, #56]	; (8003540 <_Z23getFont_verdana_10_4bppv+0x70>)
 8003506:	9305      	str	r3, [sp, #20]
 8003508:	2301      	movs	r3, #1
 800350a:	9304      	str	r3, [sp, #16]
 800350c:	9303      	str	r3, [sp, #12]
 800350e:	9302      	str	r3, [sp, #8]
 8003510:	2304      	movs	r3, #4
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	2302      	movs	r3, #2
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	230a      	movs	r3, #10
 800351a:	2244      	movs	r2, #68	; 0x44
 800351c:	4909      	ldr	r1, [pc, #36]	; (8003544 <_Z23getFont_verdana_10_4bppv+0x74>)
 800351e:	1d20      	adds	r0, r4, #4
 8003520:	f7ff ffac 	bl	800347c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8003524:	4620      	mov	r0, r4
 8003526:	f006 fb8d 	bl	8009c44 <__cxa_guard_release>
 800352a:	4807      	ldr	r0, [pc, #28]	; (8003548 <_Z23getFont_verdana_10_4bppv+0x78>)
 800352c:	f006 fbf4 	bl	8009d18 <atexit>
 8003530:	e7dd      	b.n	80034ee <_Z23getFont_verdana_10_4bppv+0x1e>
 8003532:	bf00      	nop
 8003534:	200000cc 	.word	0x200000cc
 8003538:	200000d0 	.word	0x200000d0
 800353c:	0800db4c 	.word	0x0800db4c
 8003540:	0800aee4 	.word	0x0800aee4
 8003544:	0800d774 	.word	0x0800d774
 8003548:	080034cd 	.word	0x080034cd

0800354c <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800354c:	4770      	bx	lr
	...

08003550 <_Z23getFont_verdana_20_4bppv>:
 8003550:	4b17      	ldr	r3, [pc, #92]	; (80035b0 <_Z23getFont_verdana_20_4bppv+0x60>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	f3bf 8f5b 	dmb	ish
 8003558:	f013 0f01 	tst.w	r3, #1
 800355c:	d001      	beq.n	8003562 <_Z23getFont_verdana_20_4bppv+0x12>
    return verdana_20_4bpp;
}
 800355e:	4815      	ldr	r0, [pc, #84]	; (80035b4 <_Z23getFont_verdana_20_4bppv+0x64>)
 8003560:	4770      	bx	lr
{
 8003562:	b510      	push	{r4, lr}
 8003564:	b08a      	sub	sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8003566:	4812      	ldr	r0, [pc, #72]	; (80035b0 <_Z23getFont_verdana_20_4bppv+0x60>)
 8003568:	f006 fb60 	bl	8009c2c <__cxa_guard_acquire>
 800356c:	b910      	cbnz	r0, 8003574 <_Z23getFont_verdana_20_4bppv+0x24>
}
 800356e:	4811      	ldr	r0, [pc, #68]	; (80035b4 <_Z23getFont_verdana_20_4bppv+0x64>)
 8003570:	b00a      	add	sp, #40	; 0x28
 8003572:	bd10      	pop	{r4, pc}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8003574:	4c0e      	ldr	r4, [pc, #56]	; (80035b0 <_Z23getFont_verdana_20_4bppv+0x60>)
 8003576:	2300      	movs	r3, #0
 8003578:	9309      	str	r3, [sp, #36]	; 0x24
 800357a:	9308      	str	r3, [sp, #32]
 800357c:	223f      	movs	r2, #63	; 0x3f
 800357e:	9207      	str	r2, [sp, #28]
 8003580:	4a0d      	ldr	r2, [pc, #52]	; (80035b8 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003582:	9206      	str	r2, [sp, #24]
 8003584:	4a0d      	ldr	r2, [pc, #52]	; (80035bc <_Z23getFont_verdana_20_4bppv+0x6c>)
 8003586:	9205      	str	r2, [sp, #20]
 8003588:	9304      	str	r3, [sp, #16]
 800358a:	9303      	str	r3, [sp, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	9202      	str	r2, [sp, #8]
 8003590:	2104      	movs	r1, #4
 8003592:	9101      	str	r1, [sp, #4]
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	2314      	movs	r3, #20
 8003598:	4909      	ldr	r1, [pc, #36]	; (80035c0 <_Z23getFont_verdana_20_4bppv+0x70>)
 800359a:	1d20      	adds	r0, r4, #4
 800359c:	f7ff ff6e 	bl	800347c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80035a0:	4620      	mov	r0, r4
 80035a2:	f006 fb4f 	bl	8009c44 <__cxa_guard_release>
 80035a6:	4807      	ldr	r0, [pc, #28]	; (80035c4 <_Z23getFont_verdana_20_4bppv+0x74>)
 80035a8:	f006 fbb6 	bl	8009d18 <atexit>
 80035ac:	e7df      	b.n	800356e <_Z23getFont_verdana_20_4bppv+0x1e>
 80035ae:	bf00      	nop
 80035b0:	200000f4 	.word	0x200000f4
 80035b4:	200000f8 	.word	0x200000f8
 80035b8:	0800db64 	.word	0x0800db64
 80035bc:	0800aee8 	.word	0x0800aee8
 80035c0:	0800db2c 	.word	0x0800db2c
 80035c4:	0800354d 	.word	0x0800354d

080035c8 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 80035c8:	4770      	bx	lr
	...

080035cc <_Z23getFont_verdana_40_4bppv>:
 80035cc:	4b17      	ldr	r3, [pc, #92]	; (800362c <_Z23getFont_verdana_40_4bppv+0x60>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	f3bf 8f5b 	dmb	ish
 80035d4:	f013 0f01 	tst.w	r3, #1
 80035d8:	d001      	beq.n	80035de <_Z23getFont_verdana_40_4bppv+0x12>
    return verdana_40_4bpp;
}
 80035da:	4815      	ldr	r0, [pc, #84]	; (8003630 <_Z23getFont_verdana_40_4bppv+0x64>)
 80035dc:	4770      	bx	lr
{
 80035de:	b510      	push	{r4, lr}
 80035e0:	b08a      	sub	sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 80035e2:	4812      	ldr	r0, [pc, #72]	; (800362c <_Z23getFont_verdana_40_4bppv+0x60>)
 80035e4:	f006 fb22 	bl	8009c2c <__cxa_guard_acquire>
 80035e8:	b910      	cbnz	r0, 80035f0 <_Z23getFont_verdana_40_4bppv+0x24>
}
 80035ea:	4811      	ldr	r0, [pc, #68]	; (8003630 <_Z23getFont_verdana_40_4bppv+0x64>)
 80035ec:	b00a      	add	sp, #40	; 0x28
 80035ee:	bd10      	pop	{r4, pc}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 80035f0:	4c0e      	ldr	r4, [pc, #56]	; (800362c <_Z23getFont_verdana_40_4bppv+0x60>)
 80035f2:	2300      	movs	r3, #0
 80035f4:	9309      	str	r3, [sp, #36]	; 0x24
 80035f6:	9308      	str	r3, [sp, #32]
 80035f8:	223f      	movs	r2, #63	; 0x3f
 80035fa:	9207      	str	r2, [sp, #28]
 80035fc:	4a0d      	ldr	r2, [pc, #52]	; (8003634 <_Z23getFont_verdana_40_4bppv+0x68>)
 80035fe:	9206      	str	r2, [sp, #24]
 8003600:	4a0d      	ldr	r2, [pc, #52]	; (8003638 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8003602:	9205      	str	r2, [sp, #20]
 8003604:	9304      	str	r3, [sp, #16]
 8003606:	9303      	str	r3, [sp, #12]
 8003608:	2201      	movs	r2, #1
 800360a:	9202      	str	r2, [sp, #8]
 800360c:	2104      	movs	r1, #4
 800360e:	9101      	str	r1, [sp, #4]
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	2328      	movs	r3, #40	; 0x28
 8003614:	4909      	ldr	r1, [pc, #36]	; (800363c <_Z23getFont_verdana_40_4bppv+0x70>)
 8003616:	1d20      	adds	r0, r4, #4
 8003618:	f7ff ff30 	bl	800347c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800361c:	4620      	mov	r0, r4
 800361e:	f006 fb11 	bl	8009c44 <__cxa_guard_release>
 8003622:	4807      	ldr	r0, [pc, #28]	; (8003640 <_Z23getFont_verdana_40_4bppv+0x74>)
 8003624:	f006 fb78 	bl	8009d18 <atexit>
 8003628:	e7df      	b.n	80035ea <_Z23getFont_verdana_40_4bppv+0x1e>
 800362a:	bf00      	nop
 800362c:	2000011c 	.word	0x2000011c
 8003630:	20000120 	.word	0x20000120
 8003634:	0800db68 	.word	0x0800db68
 8003638:	0800aeec 	.word	0x0800aeec
 800363c:	0800db3c 	.word	0x0800db3c
 8003640:	080035c9 	.word	0x080035c9

08003644 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8003644:	2000      	movs	r0, #0
 8003646:	4770      	bx	lr

08003648 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003648:	b40e      	push	{r1, r2, r3}
 800364a:	b500      	push	{lr}
 800364c:	b082      	sub	sp, #8
 800364e:	ab03      	add	r3, sp, #12
 8003650:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003654:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003656:	2100      	movs	r1, #0
 8003658:	f003 fa62 	bl	8006b20 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800365c:	b002      	add	sp, #8
 800365e:	f85d eb04 	ldr.w	lr, [sp], #4
 8003662:	b003      	add	sp, #12
 8003664:	4770      	bx	lr

08003666 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003666:	b40c      	push	{r2, r3}
 8003668:	b500      	push	{lr}
 800366a:	b083      	sub	sp, #12
 800366c:	ab04      	add	r3, sp, #16
 800366e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003672:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003674:	f003 fa54 	bl	8006b20 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003678:	b003      	add	sp, #12
 800367a:	f85d eb04 	ldr.w	lr, [sp], #4
 800367e:	b002      	add	sp, #8
 8003680:	4770      	bx	lr
	...

08003684 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8003684:	b538      	push	{r3, r4, r5, lr}
 8003686:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003688:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800368a:	b133      	cbz	r3, 800369a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800368c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800368e:	b143      	cbz	r3, 80036a2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1e>
            return buffer[pos];
 8003690:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003692:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003696:	8b5b      	ldrh	r3, [r3, #26]
 8003698:	b94b      	cbnz	r3, 80036ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800369a:	4620      	mov	r0, r4
 800369c:	f003 ffbe 	bl	800761c <_ZN8touchgfx12TextProvider11getNextCharEv>
}
 80036a0:	bd38      	pop	{r3, r4, r5, pc}
            assert(used > 0);
 80036a2:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x8c>)
 80036a4:	4a1b      	ldr	r2, [pc, #108]	; (8003714 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 80036a6:	21c0      	movs	r1, #192	; 0xc0
 80036a8:	481b      	ldr	r0, [pc, #108]	; (8003718 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 80036aa:	f006 fb17 	bl	8009cdc <__assert_func>
        substituteGlyphs();
 80036ae:	f004 f8d1 	bl	8007854 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80036b2:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80036b4:	2801      	cmp	r0, #1
 80036b6:	d91c      	bls.n	80036f2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
            const uint16_t index = pos + offset;
 80036b8:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80036ba:	1c4b      	adds	r3, r1, #1
 80036bc:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 80036be:	2b09      	cmp	r3, #9
 80036c0:	d81d      	bhi.n	80036fe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7a>
 80036c2:	461a      	mov	r2, r3
 80036c4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80036c8:	8b55      	ldrh	r5, [r2, #26]
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 80036ca:	f640 123f 	movw	r2, #2367	; 0x93f
 80036ce:	4295      	cmp	r5, r2
 80036d0:	d1e3      	bne.n	800369a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(used > 0);
 80036d2:	b1b8      	cbz	r0, 8003704 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>
            return buffer[pos];
 80036d4:	eb04 0241 	add.w	r2, r4, r1, lsl #1
 80036d8:	8b52      	ldrh	r2, [r2, #26]
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80036da:	2b09      	cmp	r3, #9
 80036dc:	d900      	bls.n	80036e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5c>
 80036de:	2300      	movs	r3, #0
 80036e0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80036e4:	835a      	strh	r2, [r3, #26]
            buffer[pos] = newChar;
 80036e6:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80036ea:	f640 133f 	movw	r3, #2367	; 0x93f
 80036ee:	834b      	strh	r3, [r1, #26]
        }
 80036f0:	e7d3      	b.n	800369a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(offset < used);
 80036f2:	4b0a      	ldr	r3, [pc, #40]	; (800371c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 80036f4:	4a0a      	ldr	r2, [pc, #40]	; (8003720 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
 80036f6:	21c5      	movs	r1, #197	; 0xc5
 80036f8:	4807      	ldr	r0, [pc, #28]	; (8003718 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 80036fa:	f006 faef 	bl	8009cdc <__assert_func>
            return buffer[index < size ? index : index - size];
 80036fe:	f1a3 020a 	sub.w	r2, r3, #10
 8003702:	e7df      	b.n	80036c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>
            assert(used > 0);
 8003704:	4b02      	ldr	r3, [pc, #8]	; (8003710 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x8c>)
 8003706:	4a03      	ldr	r2, [pc, #12]	; (8003714 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 8003708:	21c0      	movs	r1, #192	; 0xc0
 800370a:	4803      	ldr	r0, [pc, #12]	; (8003718 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 800370c:	f006 fae6 	bl	8009cdc <__assert_func>
 8003710:	0800b14c 	.word	0x0800b14c
 8003714:	0800b158 	.word	0x0800b158
 8003718:	0800b204 	.word	0x0800b204
 800371c:	0800b27c 	.word	0x0800b27c
 8003720:	0800b28c 	.word	0x0800b28c

08003724 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8003724:	b508      	push	{r3, lr}
    fillInputBuffer();
 8003726:	f003 ff33 	bl	8007590 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800372a:	bd08      	pop	{r3, pc}

0800372c <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 800372c:	2801      	cmp	r0, #1
 800372e:	d000      	beq.n	8003732 <_Z41__static_initialization_and_destruction_0ii+0x6>
 8003730:	4770      	bx	lr
 8003732:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003736:	4299      	cmp	r1, r3
 8003738:	d1fa      	bne.n	8003730 <_Z41__static_initialization_and_destruction_0ii+0x4>
 800373a:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 800373c:	f7ff ff08 	bl	8003550 <_Z23getFont_verdana_20_4bppv>
};
 8003740:	4c04      	ldr	r4, [pc, #16]	; (8003754 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003742:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8003744:	f7ff ff42 	bl	80035cc <_Z23getFont_verdana_40_4bppv>
};
 8003748:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 800374a:	f7ff fec1 	bl	80034d0 <_Z23getFont_verdana_10_4bppv>
};
 800374e:	60a0      	str	r0, [r4, #8]
}  // namespace TypedTextDatabase
 8003750:	bd10      	pop	{r4, pc}
 8003752:	bf00      	nop
 8003754:	20000144 	.word	0x20000144

08003758 <_GLOBAL__sub_I_touchgfx_fonts>:
 8003758:	b508      	push	{r3, lr}
 800375a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800375e:	2001      	movs	r0, #1
 8003760:	f7ff ffe4 	bl	800372c <_Z41__static_initialization_and_destruction_0ii>
 8003764:	bd08      	pop	{r3, pc}

08003766 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8003766:	6840      	ldr	r0, [r0, #4]
    }
 8003768:	4770      	bx	lr

0800376a <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 800376a:	6041      	str	r1, [r0, #4]
    }
 800376c:	4770      	bx	lr
	...

08003770 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8003770:	4a09      	ldr	r2, [pc, #36]	; (8003798 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8003772:	6813      	ldr	r3, [r2, #0]
 8003774:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003778:	6013      	str	r3, [r2, #0]
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 800377a:	f5a2 424e 	sub.w	r2, r2, #52736	; 0xce00
 800377e:	3a4c      	subs	r2, #76	; 0x4c
 8003780:	6811      	ldr	r1, [r2, #0]
 8003782:	4b06      	ldr	r3, [pc, #24]	; (800379c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8003784:	430b      	orrs	r3, r1
 8003786:	6013      	str	r3, [r2, #0]
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8003788:	f5a2 627b 	sub.w	r2, r2, #4016	; 0xfb0
 800378c:	6813      	ldr	r3, [r2, #0]
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	6013      	str	r3, [r2, #0]
}
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	e000edfc 	.word	0xe000edfc
 800379c:	c5acce55 	.word	0xc5acce55

080037a0 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80037a0:	1a52      	subs	r2, r2, r1
 80037a2:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 80037a6:	fbb2 f0f3 	udiv	r0, r2, r3
 80037aa:	4770      	bx	lr

080037ac <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 80037ac:	4b01      	ldr	r3, [pc, #4]	; (80037b4 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 80037ae:	6818      	ldr	r0, [r3, #0]
}
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	e0001004 	.word	0xe0001004

080037b8 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
 80037b8:	b510      	push	{r4, lr}
 80037ba:	4604      	mov	r4, r0
    if (active) //idle task sched out
 80037bc:	b141      	cbz	r1, 80037d0 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80037be:	6803      	ldr	r3, [r0, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	4798      	blx	r3
 80037c4:	68a3      	ldr	r3, [r4, #8]
 80037c6:	1ac3      	subs	r3, r0, r3
        cc_consumed += cc_temp;
 80037c8:	6860      	ldr	r0, [r4, #4]
 80037ca:	4418      	add	r0, r3
 80037cc:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80037ce:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 80037d0:	6803      	ldr	r3, [r0, #0]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	4798      	blx	r3
 80037d6:	60a0      	str	r0, [r4, #8]
}
 80037d8:	e7f9      	b.n	80037ce <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

080037da <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 80037da:	4770      	bx	lr

080037dc <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 80037dc:	b510      	push	{r4, lr}
 80037de:	4604      	mov	r4, r0
 80037e0:	210c      	movs	r1, #12
 80037e2:	f006 fa21 	bl	8009c28 <_ZdlPvj>
 80037e6:	4620      	mov	r0, r4
 80037e8:	bd10      	pop	{r4, pc}
	...

080037ec <_ZN20STM32TouchController4initEv>:

static TS_DrvTypeDef* tsDriver;
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
 80037ec:	b508      	push	{r3, lr}
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80037ee:	4b03      	ldr	r3, [pc, #12]	; (80037fc <_ZN20STM32TouchController4initEv+0x10>)
 80037f0:	4a03      	ldr	r2, [pc, #12]	; (8003800 <_ZN20STM32TouchController4initEv+0x14>)
 80037f2:	6013      	str	r3, [r2, #0]

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	2070      	movs	r0, #112	; 0x70
 80037f8:	4798      	blx	r3
}
 80037fa:	bd08      	pop	{r3, pc}
 80037fc:	2000000c 	.word	0x2000000c
 8003800:	20000150 	.word	0x20000150

08003804 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8003804:	b538      	push	{r3, r4, r5, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (tsDriver)
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	b183      	cbz	r3, 800382e <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>
 800380c:	460d      	mov	r5, r1
 800380e:	4614      	mov	r4, r2
    {
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	2070      	movs	r0, #112	; 0x70
 8003814:	4798      	blx	r3
 8003816:	b908      	cbnz	r0, 800381c <_ZN20STM32TouchController11sampleTouchERlS0_+0x18>
            /* Get each touch coordinates */
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
            return true;
        }
    }
    return false;
 8003818:	2000      	movs	r0, #0
}
 800381a:	bd38      	pop	{r3, r4, r5, pc}
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 800381c:	4b05      	ldr	r3, [pc, #20]	; (8003834 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	462a      	mov	r2, r5
 8003824:	4621      	mov	r1, r4
 8003826:	2070      	movs	r0, #112	; 0x70
 8003828:	4798      	blx	r3
            return true;
 800382a:	2001      	movs	r0, #1
 800382c:	e7f5      	b.n	800381a <_ZN20STM32TouchController11sampleTouchERlS0_+0x16>
    return false;
 800382e:	2000      	movs	r0, #0
 8003830:	e7f3      	b.n	800381a <_ZN20STM32TouchController11sampleTouchERlS0_+0x16>
 8003832:	bf00      	nop
 8003834:	20000150 	.word	0x20000150

08003838 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8003838:	4770      	bx	lr

0800383a <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef* i2c_handler, uint8_t Addr)
{
 800383a:	b508      	push	{r3, lr}
    /* De-initialize the I2C communication bus */
    HAL_I2C_DeInit(i2c_handler);
 800383c:	f7fe f89e 	bl	800197c <HAL_I2C_DeInit>

    /* Re-Initialize the I2C communication bus */
    //I2Cx_Init(i2c_handler);
}
 8003840:	bd08      	pop	{r3, pc}

08003842 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t* Buffer,
                                            uint16_t Length)
{
 8003842:	b570      	push	{r4, r5, r6, lr}
 8003844:	b084      	sub	sp, #16
 8003846:	4605      	mov	r5, r0
 8003848:	460c      	mov	r4, r1
    HAL_StatusTypeDef status = HAL_OK;

    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800384a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800384e:	9102      	str	r1, [sp, #8]
 8003850:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8003854:	9101      	str	r1, [sp, #4]
 8003856:	9908      	ldr	r1, [sp, #32]
 8003858:	9100      	str	r1, [sp, #0]
 800385a:	4621      	mov	r1, r4
 800385c:	f7fe f8a7 	bl	80019ae <HAL_I2C_Mem_Write>

    /* Check the communication status */
    if (status != HAL_OK)
 8003860:	4606      	mov	r6, r0
 8003862:	b910      	cbnz	r0, 800386a <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht+0x28>
    {
        /* Re-Initiaize the I2C Bus */
        I2Cx_Error(i2c_handler, Addr);
    }
    return status;
}
 8003864:	4630      	mov	r0, r6
 8003866:	b004      	add	sp, #16
 8003868:	bd70      	pop	{r4, r5, r6, pc}
        I2Cx_Error(i2c_handler, Addr);
 800386a:	4621      	mov	r1, r4
 800386c:	4628      	mov	r0, r5
 800386e:	f7ff ffe4 	bl	800383a <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>
 8003872:	e7f7      	b.n	8003864 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht+0x22>

08003874 <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht>:
{
 8003874:	b570      	push	{r4, r5, r6, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	4605      	mov	r5, r0
 800387a:	460c      	mov	r4, r1
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800387c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003880:	9102      	str	r1, [sp, #8]
 8003882:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8003886:	9101      	str	r1, [sp, #4]
 8003888:	9908      	ldr	r1, [sp, #32]
 800388a:	9100      	str	r1, [sp, #0]
 800388c:	4621      	mov	r1, r4
 800388e:	f7fe f965 	bl	8001b5c <HAL_I2C_Mem_Read>
    if (status != HAL_OK)
 8003892:	4606      	mov	r6, r0
 8003894:	b910      	cbnz	r0, 800389c <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht+0x28>
}
 8003896:	4630      	mov	r0, r6
 8003898:	b004      	add	sp, #16
 800389a:	bd70      	pop	{r4, r5, r6, pc}
        I2Cx_Error(i2c_handler, Addr);
 800389c:	4621      	mov	r1, r4
 800389e:	4628      	mov	r0, r5
 80038a0:	f7ff ffcb 	bl	800383a <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>
 80038a4:	e7f7      	b.n	8003896 <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht+0x22>

080038a6 <_ZN20STM32TouchControllerD0Ev>:
 80038a6:	b510      	push	{r4, lr}
 80038a8:	4604      	mov	r4, r0
 80038aa:	2104      	movs	r1, #4
 80038ac:	f006 f9bc 	bl	8009c28 <_ZdlPvj>
 80038b0:	4620      	mov	r0, r4
 80038b2:	bd10      	pop	{r4, pc}

080038b4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80038b4:	b500      	push	{lr}
 80038b6:	b085      	sub	sp, #20
 80038b8:	f88d 200f 	strb.w	r2, [sp, #15]
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
 80038bc:	2301      	movs	r3, #1
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	f10d 020f 	add.w	r2, sp, #15
 80038c4:	9200      	str	r2, [sp, #0]
 80038c6:	460a      	mov	r2, r1
 80038c8:	4601      	mov	r1, r0
 80038ca:	4803      	ldr	r0, [pc, #12]	; (80038d8 <TS_IO_Write+0x24>)
 80038cc:	f7ff ffb9 	bl	8003842 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht>
}
 80038d0:	b005      	add	sp, #20
 80038d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80038d6:	bf00      	nop
 80038d8:	200013f8 	.word	0x200013f8

080038dc <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80038dc:	b500      	push	{lr}
 80038de:	b085      	sub	sp, #20
 80038e0:	460a      	mov	r2, r1
    uint8_t read_value = 0;
 80038e2:	2300      	movs	r3, #0
 80038e4:	f88d 300f 	strb.w	r3, [sp, #15]

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80038e8:	2301      	movs	r3, #1
 80038ea:	9301      	str	r3, [sp, #4]
 80038ec:	f10d 010f 	add.w	r1, sp, #15
 80038f0:	9100      	str	r1, [sp, #0]
 80038f2:	4601      	mov	r1, r0
 80038f4:	4803      	ldr	r0, [pc, #12]	; (8003904 <TS_IO_Read+0x28>)
 80038f6:	f7ff ffbd 	bl	8003874 <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht>

    return read_value;
}
 80038fa:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80038fe:	b005      	add	sp, #20
 8003900:	f85d fb04 	ldr.w	pc, [sp], #4
 8003904:	200013f8 	.word	0x200013f8

08003908 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{

}
 8003908:	4770      	bx	lr

0800390a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{

}
 800390a:	4770      	bx	lr

0800390c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{

}
 800390c:	4770      	bx	lr

0800390e <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
 800390e:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8003912:	2301      	movs	r3, #1
 8003914:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8003918:	4770      	bx	lr

0800391a <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800391a:	b508      	push	{r3, lr}
    {
        if (useDMAAcceleration)
 800391c:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8003920:	b123      	cbz	r3, 800392c <_ZN8touchgfx3HAL11getBlitCapsEv+0x12>
        {
            return dma.getBlitCaps();
 8003922:	6840      	ldr	r0, [r0, #4]
 8003924:	6803      	ldr	r3, [r0, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4798      	blx	r3
        }
        else
        {
            return static_cast<BlitOperations>(0);
        }
    }
 800392a:	bd08      	pop	{r3, pc}
            return static_cast<BlitOperations>(0);
 800392c:	2000      	movs	r0, #0
 800392e:	e7fc      	b.n	800392a <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>

08003930 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
    {
        return false;
    }
 8003930:	2000      	movs	r0, #0
 8003932:	4770      	bx	lr

08003934 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8003934:	2000      	movs	r0, #0
 8003936:	4770      	bx	lr

08003938 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8003938:	b508      	push	{r3, lr}
    {
        if (taskDelayFunc)
 800393a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800393c:	b10b      	cbz	r3, 8003942 <_ZN8touchgfx3HAL9taskDelayEt+0xa>
        {
            taskDelayFunc(ms);
 800393e:	4608      	mov	r0, r1
 8003940:	4798      	blx	r3
        }
    }
 8003942:	bd08      	pop	{r3, pc}

08003944 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8003944:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003948:	4770      	bx	lr

0800394a <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800394a:	b508      	push	{r3, lr}
    {
        return dma.getDMAType();
 800394c:	6840      	ldr	r0, [r0, #4]
 800394e:	6803      	ldr	r3, [r0, #0]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	4798      	blx	r3
    }
 8003954:	bd08      	pop	{r3, pc}
	...

08003958 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8003958:	b410      	push	{r4}
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800395a:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
 800395e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8003962:	429a      	cmp	r2, r3
 8003964:	d012      	beq.n	800398c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x34>
        {
            if (DISPLAY_ROTATION == rotate0)
 8003966:	4b12      	ldr	r3, [pc, #72]	; (80039b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	b963      	cbnz	r3, 8003986 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2e>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800396c:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5c>)
 800396e:	8818      	ldrh	r0, [r3, #0]
 8003970:	4a11      	ldr	r2, [pc, #68]	; (80039b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x60>)
 8003972:	8010      	strh	r0, [r2, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8003974:	4911      	ldr	r1, [pc, #68]	; (80039bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x64>)
 8003976:	880a      	ldrh	r2, [r1, #0]
 8003978:	4c11      	ldr	r4, [pc, #68]	; (80039c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x68>)
 800397a:	8022      	strh	r2, [r4, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 800397c:	8008      	strh	r0, [r1, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 800397e:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8003980:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
 8003982:	2201      	movs	r2, #1
 8003984:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8003986:	f85d 4b04 	ldr.w	r4, [sp], #4
 800398a:	4770      	bx	lr
        else if (DISPLAY_ROTATION != rotate0)
 800398c:	4b08      	ldr	r3, [pc, #32]	; (80039b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0f8      	beq.n	8003986 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2e>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8003994:	4909      	ldr	r1, [pc, #36]	; (80039bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x64>)
 8003996:	880a      	ldrh	r2, [r1, #0]
 8003998:	4b07      	ldr	r3, [pc, #28]	; (80039b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x60>)
 800399a:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 800399c:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5c>)
 800399e:	8818      	ldrh	r0, [r3, #0]
 80039a0:	4c07      	ldr	r4, [pc, #28]	; (80039c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x68>)
 80039a2:	8020      	strh	r0, [r4, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 80039a4:	8008      	strh	r0, [r1, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 80039a6:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80039a8:	4b01      	ldr	r3, [pc, #4]	; (80039b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	701a      	strb	r2, [r3, #0]
    }
 80039ae:	e7ea      	b.n	8003986 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2e>
 80039b0:	200010a8 	.word	0x200010a8
 80039b4:	200010a4 	.word	0x200010a4
 80039b8:	200010aa 	.word	0x200010aa
 80039bc:	200010a6 	.word	0x200010a6
 80039c0:	200010ac 	.word	0x200010ac

080039c4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80039c4:	4770      	bx	lr
	...

080039c8 <_Z41__static_initialization_and_destruction_0ii>:
//        {
//            touchgfx::HAL::getInstance()->setMCUActive(false);
//        }
//        return pdTRUE;
//    }
}
 80039c8:	2801      	cmp	r0, #1
 80039ca:	d000      	beq.n	80039ce <_Z41__static_initialization_and_destruction_0ii+0x6>
 80039cc:	4770      	bx	lr
 80039ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039d2:	4299      	cmp	r1, r3
 80039d4:	d1fa      	bne.n	80039cc <_Z41__static_initialization_and_destruction_0ii+0x4>
          cc_in(0)
 80039d6:	4b03      	ldr	r3, [pc, #12]	; (80039e4 <_Z41__static_initialization_and_destruction_0ii+0x1c>)
 80039d8:	2200      	movs	r2, #0
 80039da:	605a      	str	r2, [r3, #4]
 80039dc:	609a      	str	r2, [r3, #8]
 80039de:	4a02      	ldr	r2, [pc, #8]	; (80039e8 <_Z41__static_initialization_and_destruction_0ii+0x20>)
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e7f3      	b.n	80039cc <_Z41__static_initialization_and_destruction_0ii+0x4>
 80039e4:	20000154 	.word	0x20000154
 80039e8:	0800aef8 	.word	0x0800aef8

080039ec <_ZN11TouchGFXHAL9taskEntryEv>:
{
 80039ec:	b510      	push	{r4, lr}
    if (firstCall)
 80039ee:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <_ZN11TouchGFXHAL9taskEntryEv+0x24>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	b153      	cbz	r3, 8003a0a <_ZN11TouchGFXHAL9taskEntryEv+0x1e>
 80039f4:	4604      	mov	r4, r0
        firstCall = false;
 80039f6:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <_ZN11TouchGFXHAL9taskEntryEv+0x24>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	701a      	strb	r2, [r3, #0]
        enableLCDControllerInterrupt();
 80039fc:	6803      	ldr	r3, [r0, #0]
 80039fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a00:	4798      	blx	r3
        enableInterrupts();
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a06:	4620      	mov	r0, r4
 8003a08:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8003a0a:	f000 f8af 	bl	8003b6c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
}
 8003a0e:	bd10      	pop	{r4, pc}
 8003a10:	20000034 	.word	0x20000034

08003a14 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
{
 8003a14:	b508      	push	{r3, lr}
    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8003a16:	f000 fbbd 	bl	8004194 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
}
 8003a1a:	bd08      	pop	{r3, pc}

08003a1c <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
{
 8003a1c:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8003a1e:	f000 fbbf 	bl	80041a0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8003a22:	bd08      	pop	{r3, pc}

08003a24 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8003a24:	b510      	push	{r4, lr}
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8003a26:	f000 fbc3 	bl	80041b0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003a2a:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003a32:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003a36:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003a3a:	f3c0 324e 	ubfx	r2, r0, #13, #15
 8003a3e:	e000      	b.n	8003a42 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1e>
    } while(sets-- != 0U);
 8003a40:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003a42:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003a46:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003a4a:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 8003a4e:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 8003a52:	4c07      	ldr	r4, [pc, #28]	; (8003a70 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 8003a54:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
      } while (ways-- != 0U);
 8003a58:	460b      	mov	r3, r1
 8003a5a:	3901      	subs	r1, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f2      	bne.n	8003a46 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x22>
    } while(sets-- != 0U);
 8003a60:	1e53      	subs	r3, r2, #1
 8003a62:	2a00      	cmp	r2, #0
 8003a64:	d1ec      	bne.n	8003a40 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1c>
 8003a66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003a6a:	f3bf 8f6f 	isb	sy
}
 8003a6e:	bd10      	pop	{r4, pc}
 8003a70:	e000ed00 	.word	0xe000ed00

08003a74 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:
{
 8003a74:	b508      	push	{r3, lr}
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8003a76:	f000 fbc3 	bl	8004200 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
}
 8003a7a:	bd08      	pop	{r3, pc}

08003a7c <_ZN11TouchGFXHAL19configureInterruptsEv>:
{
 8003a7c:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::configureInterrupts();
 8003a7e:	f000 fb49 	bl	8004114 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8003a82:	bd08      	pop	{r3, pc}

08003a84 <_ZN11TouchGFXHAL16enableInterruptsEv>:
{
 8003a84:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::enableInterrupts();
 8003a86:	f000 fb4f 	bl	8004128 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8003a8a:	bd08      	pop	{r3, pc}

08003a8c <_ZN11TouchGFXHAL17disableInterruptsEv>:
{
 8003a8c:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::disableInterrupts();
 8003a8e:	f000 fb55 	bl	800413c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8003a92:	bd08      	pop	{r3, pc}

08003a94 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8003a94:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8003a96:	f000 fb65 	bl	8004164 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8003a9a:	bd08      	pop	{r3, pc}

08003a9c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8003a9c:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8003a9e:	b169      	cbz	r1, 8003abc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x20>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8003aa0:	63c1      	str	r1, [r0, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8003aa2:	6402      	str	r2, [r0, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8003aa4:	6443      	str	r3, [r0, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8003aa6:	3a00      	subs	r2, #0
 8003aa8:	bf18      	it	ne
 8003aaa:	2201      	movne	r2, #1
 8003aac:	4907      	ldr	r1, [pc, #28]	; (8003acc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8003aae:	700a      	strb	r2, [r1, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8003ab0:	3b00      	subs	r3, #0
 8003ab2:	bf18      	it	ne
 8003ab4:	2301      	movne	r3, #1
 8003ab6:	4a06      	ldr	r2, [pc, #24]	; (8003ad0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8003ab8:	7013      	strb	r3, [r2, #0]
    }
 8003aba:	bd10      	pop	{r4, pc}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8003abe:	4a06      	ldr	r2, [pc, #24]	; (8003ad8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8003ac0:	f240 216b 	movw	r1, #619	; 0x26b
 8003ac4:	4805      	ldr	r0, [pc, #20]	; (8003adc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
 8003ac6:	f006 f909 	bl	8009cdc <__assert_func>
 8003aca:	bf00      	nop
 8003acc:	200010ae 	.word	0x200010ae
 8003ad0:	200010af 	.word	0x200010af
 8003ad4:	0800b360 	.word	0x0800b360
 8003ad8:	0800b398 	.word	0x0800b398
 8003adc:	0800b3e8 	.word	0x0800b3e8

08003ae0 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8003ae0:	b510      	push	{r4, lr}
 8003ae2:	4604      	mov	r4, r0
        swapFrameBuffers();
 8003ae4:	f001 ffe0 	bl	8005aa8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aee:	4620      	mov	r0, r4
 8003af0:	4798      	blx	r3
    }
 8003af2:	bd10      	pop	{r4, pc}

08003af4 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8003af4:	b508      	push	{r3, lr}
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8003af6:	f001 fa21 	bl	8004f3c <_ZN8touchgfx3HAL16flushFrameBufferEv>
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
    }
 8003afa:	bd08      	pop	{r3, pc}

08003afc <_ZN11TouchGFXHALD0Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8003afc:	b510      	push	{r4, lr}
 8003afe:	4604      	mov	r4, r0
 8003b00:	217c      	movs	r1, #124	; 0x7c
 8003b02:	f006 f891 	bl	8009c28 <_ZdlPvj>
 8003b06:	4620      	mov	r0, r4
 8003b08:	bd10      	pop	{r4, pc}

08003b0a <_GLOBAL__sub_I_instrumentation>:
}
 8003b0a:	b508      	push	{r3, lr}
 8003b0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b10:	2001      	movs	r0, #1
 8003b12:	f7ff ff59 	bl	80039c8 <_Z41__static_initialization_and_destruction_0ii>
 8003b16:	bd08      	pop	{r3, pc}

08003b18 <_GLOBAL__sub_D_instrumentation>:
 8003b18:	b508      	push	{r3, lr}
 8003b1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b1e:	2000      	movs	r0, #0
 8003b20:	f7ff ff52 	bl	80039c8 <_Z41__static_initialization_and_destruction_0ii>
 8003b24:	bd08      	pop	{r3, pc}
	...

08003b28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
  while(fb_sem);
 8003b28:	4b03      	ldr	r3, [pc, #12]	; (8003b38 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x10>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1fb      	bne.n	8003b28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
  fb_sem = 1;
 8003b30:	4b01      	ldr	r3, [pc, #4]	; (8003b38 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x10>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	601a      	str	r2, [r3, #0]
}
 8003b36:	4770      	bx	lr
 8003b38:	20000160 	.word	0x20000160

08003b3c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
  fb_sem = 0;
 8003b3c:	4b01      	ldr	r3, [pc, #4]	; (8003b44 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
}
 8003b42:	4770      	bx	lr
 8003b44:	20000160 	.word	0x20000160

08003b48 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
  fb_sem = 1;
 8003b48:	4b01      	ldr	r3, [pc, #4]	; (8003b50 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x8>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]
}
 8003b4e:	4770      	bx	lr
 8003b50:	20000160 	.word	0x20000160

08003b54 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
  fb_sem = 0;
 8003b54:	4b01      	ldr	r3, [pc, #4]	; (8003b5c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x8>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
}
 8003b5a:	4770      	bx	lr
 8003b5c:	20000160 	.word	0x20000160

08003b60 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
  vsync_sem = 1;
 8003b60:	4b01      	ldr	r3, [pc, #4]	; (8003b68 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x8>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	605a      	str	r2, [r3, #4]
}
 8003b66:	4770      	bx	lr
 8003b68:	20000160 	.word	0x20000160

08003b6c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
/*
 * This function check if a VSYNC has occured.
 * If VSYNC has occured, signal TouchGFX to start a rendering
 */
void OSWrappers::waitForVSync()
{
 8003b6c:	b508      	push	{r3, lr}
  if(vsync_sem)
 8003b6e:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1c>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	b13b      	cbz	r3, 8003b84 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x18>
  {
    vsync_sem = 0;
 8003b74:	4b04      	ldr	r3, [pc, #16]	; (8003b88 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1c>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	605a      	str	r2, [r3, #4]
        return instance;
 8003b7a:	4b04      	ldr	r3, [pc, #16]	; (8003b8c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x20>)
 8003b7c:	6818      	ldr	r0, [r3, #0]
    HAL::getInstance()->backPorchExited();
 8003b7e:	6803      	ldr	r3, [r0, #0]
 8003b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b82:	4798      	blx	r3
  }
}
 8003b84:	bd08      	pop	{r3, pc}
 8003b86:	bf00      	nop
 8003b88:	20000160 	.word	0x20000160
 8003b8c:	200010b0 	.word	0x200010b0

08003b90 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8003b90:	b508      	push	{r3, lr}
    {
        waitForFrameBufferSemaphore();
 8003b92:	6803      	ldr	r3, [r0, #0]
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	4798      	blx	r3
    }
 8003b98:	bd08      	pop	{r3, pc}

08003b9a <_ZN10STM32F7DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8003b9a:	2001      	movs	r0, #1
 8003b9c:	4770      	bx	lr

08003b9e <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8003b9e:	b508      	push	{r3, lr}
    {
        executeCompleted();
 8003ba0:	6803      	ldr	r3, [r0, #0]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	4798      	blx	r3
    }
 8003ba6:	bd08      	pop	{r3, pc}

08003ba8 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8003ba8:	b508      	push	{r3, lr}
 8003baa:	4b03      	ldr	r3, [pc, #12]	; (8003bb8 <DMA2D_XferCpltCallback+0x10>)
 8003bac:	681b      	ldr	r3, [r3, #0]
        dma.signalDMAInterrupt();
 8003bae:	6858      	ldr	r0, [r3, #4]
 8003bb0:	6803      	ldr	r3, [r0, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	4798      	blx	r3
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
    }
 8003bb6:	bd08      	pop	{r3, pc}
 8003bb8:	200010b0 	.word	0x200010b0

08003bbc <_ZN10STM32F7DMAD1Ev>:
STM32F7DMA::STM32F7DMA()
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
{
}

STM32F7DMA::~STM32F7DMA()
 8003bbc:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <_ZN10STM32F7DMAD1Ev+0x18>)
 8003bbe:	6003      	str	r3, [r0, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <_ZN10STM32F7DMAD1Ev+0x1c>)
 8003bc2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003bc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003bca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003bce:	f3bf 8f6f 	isb	sy
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
 8003bd2:	4770      	bx	lr
 8003bd4:	0800aff4 	.word	0x0800aff4
 8003bd8:	e000e100 	.word	0xe000e100

08003bdc <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8003bdc:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003bde:	4b0d      	ldr	r3, [pc, #52]	; (8003c14 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8003be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003be2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003be6:	631a      	str	r2, [r3, #48]	; 0x30
 8003be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bea:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8003bee:	9201      	str	r2, [sp, #4]
 8003bf0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003bf8:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003bfa:	691a      	ldr	r2, [r3, #16]
 8003bfc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003c00:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8003c02:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8003c04:	4a05      	ldr	r2, [pc, #20]	; (8003c1c <_ZN10STM32F7DMA10initializeEv+0x40>)
 8003c06:	611a      	str	r2, [r3, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <_ZN10STM32F7DMA10initializeEv+0x44>)
 8003c0a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003c0e:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8003c10:	b002      	add	sp, #8
 8003c12:	4770      	bx	lr
 8003c14:	40023800 	.word	0x40023800
 8003c18:	200013b8 	.word	0x200013b8
 8003c1c:	08003ba9 	.word	0x08003ba9
 8003c20:	e000e100 	.word	0xe000e100

08003c24 <_ZN10STM32F7DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8003c24:	f240 10ef 	movw	r0, #495	; 0x1ef
 8003c28:	4770      	bx	lr

08003c2a <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8003c2a:	b510      	push	{r4, lr}
 8003c2c:	4604      	mov	r4, r0
}
 8003c2e:	f7ff ffc5 	bl	8003bbc <_ZN10STM32F7DMAD1Ev>
 8003c32:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8003c36:	4620      	mov	r0, r4
 8003c38:	f005 fff6 	bl	8009c28 <_ZdlPvj>
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	bd10      	pop	{r4, pc}

08003c40 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F7DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8003c40:	b510      	push	{r4, lr}
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003c42:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8003c44:	2b0a      	cmp	r3, #10
 8003c46:	d809      	bhi.n	8003c5c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>
 8003c48:	e8df f003 	tbb	[pc, r3]
 8003c4c:	080e1006 	.word	0x080e1006
 8003c50:	10080808 	.word	0x10080808
 8003c54:	1010      	.short	0x1010
 8003c56:	10          	.byte	0x10
 8003c57:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8003c58:	2002      	movs	r0, #2
        break;
 8003c5a:	e008      	b.n	8003c6e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        assert(0 && "Unsupported Format!");
 8003c5c:	4b2f      	ldr	r3, [pc, #188]	; (8003d1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8003c5e:	4a30      	ldr	r2, [pc, #192]	; (8003d20 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 8003c60:	2186      	movs	r1, #134	; 0x86
 8003c62:	4830      	ldr	r0, [pc, #192]	; (8003d24 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 8003c64:	f006 f83a 	bl	8009cdc <__assert_func>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003c68:	2000      	movs	r0, #0
 8003c6a:	e000      	b.n	8003c6e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8003c6c:	2001      	movs	r0, #1

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8003c6e:	4b2e      	ldr	r3, [pc, #184]	; (8003d28 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe8>)
 8003c70:	6358      	str	r0, [r3, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003c72:	8a4a      	ldrh	r2, [r1, #18]
 8003c74:	8a0c      	ldrh	r4, [r1, #16]
 8003c76:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003c7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003c7c:	68ca      	ldr	r2, [r1, #12]
 8003c7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003c80:	8aca      	ldrh	r2, [r1, #22]
 8003c82:	8a0c      	ldrh	r4, [r1, #16]
 8003c84:	1b12      	subs	r2, r2, r4
 8003c86:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8003c88:	680b      	ldr	r3, [r1, #0]
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d00d      	beq.n	8003caa <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6a>
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
    }
    else
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003c8e:	4b26      	ldr	r3, [pc, #152]	; (8003d28 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe8>)
 8003c90:	61d8      	str	r0, [r3, #28]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, 0);
 8003c92:	2200      	movs	r2, #0
 8003c94:	611a      	str	r2, [r3, #16]

        if (blitOp.dstFormat == Bitmap::RGB565)
 8003c96:	7f8b      	ldrb	r3, [r1, #30]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d12d      	bne.n	8003cf8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb8>
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8003c9c:	698a      	ldr	r2, [r1, #24]
        {
            // set color
            WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8003c9e:	4b22      	ldr	r3, [pc, #136]	; (8003d28 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe8>)
 8003ca0:	639a      	str	r2, [r3, #56]	; 0x38
            // set color
            WRITE_REG(DMA2D->OCOLR, (blitOp.alpha << 24) | (blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
        }

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8003ca2:	4b21      	ldr	r3, [pc, #132]	; (8003d28 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe8>)
 8003ca4:	4a21      	ldr	r2, [pc, #132]	; (8003d2c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xec>)
 8003ca6:	601a      	str	r2, [r3, #0]
    }
}
 8003ca8:	bd10      	pop	{r4, pc}
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003caa:	8acb      	ldrh	r3, [r1, #22]
 8003cac:	8a0a      	ldrh	r2, [r1, #16]
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	4a1d      	ldr	r2, [pc, #116]	; (8003d28 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe8>)
 8003cb2:	6193      	str	r3, [r2, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003cb4:	8acb      	ldrh	r3, [r1, #22]
 8003cb6:	8a0c      	ldrh	r4, [r1, #16]
 8003cb8:	1b1b      	subs	r3, r3, r4
 8003cba:	6113      	str	r3, [r2, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003cbc:	6250      	str	r0, [r2, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8003cbe:	7f08      	ldrb	r0, [r1, #28]
 8003cc0:	4b1b      	ldr	r3, [pc, #108]	; (8003d30 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf0>)
 8003cc2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003cc6:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3)) & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8003cc8:	7f0c      	ldrb	r4, [r1, #28]
 8003cca:	6988      	ldr	r0, [r1, #24]
 8003ccc:	0203      	lsls	r3, r0, #8
 8003cce:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 8003cd2:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8003cd6:	0144      	lsls	r4, r0, #5
 8003cd8:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 8003cdc:	4323      	orrs	r3, r4
 8003cde:	00c0      	lsls	r0, r0, #3
 8003ce0:	b2c0      	uxtb	r0, r0
 8003ce2:	4303      	orrs	r3, r0
 8003ce4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ce8:	6213      	str	r3, [r2, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003cea:	68cb      	ldr	r3, [r1, #12]
 8003cec:	6153      	str	r3, [r2, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003cee:	68cb      	ldr	r3, [r1, #12]
 8003cf0:	60d3      	str	r3, [r2, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8003cf2:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf4>)
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	e7d7      	b.n	8003ca8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>
            WRITE_REG(DMA2D->OCOLR, (blitOp.alpha << 24) | (blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 8003cf8:	7f08      	ldrb	r0, [r1, #28]
 8003cfa:	698a      	ldr	r2, [r1, #24]
 8003cfc:	0213      	lsls	r3, r2, #8
 8003cfe:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 8003d02:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003d06:	0151      	lsls	r1, r2, #5
 8003d08:	f401 417c 	and.w	r1, r1, #64512	; 0xfc00
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	00d2      	lsls	r2, r2, #3
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	4313      	orrs	r3, r2
 8003d14:	4a04      	ldr	r2, [pc, #16]	; (8003d28 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe8>)
 8003d16:	6393      	str	r3, [r2, #56]	; 0x38
 8003d18:	e7c3      	b.n	8003ca2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x62>
 8003d1a:	bf00      	nop
 8003d1c:	0800b458 	.word	0x0800b458
 8003d20:	0800b474 	.word	0x0800b474
 8003d24:	0800b4c4 	.word	0x0800b4c4
 8003d28:	4002b000 	.word	0x4002b000
 8003d2c:	00030201 	.word	0x00030201
 8003d30:	00010009 	.word	0x00010009
 8003d34:	00020201 	.word	0x00020201

08003d38 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8003d38:	b570      	push	{r4, r5, r6, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003d3a:	7f4b      	ldrb	r3, [r1, #29]
    switch (format)
 8003d3c:	2b0b      	cmp	r3, #11
 8003d3e:	d815      	bhi.n	8003d6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x34>
 8003d40:	e8df f003 	tbb	[pc, r3]
 8003d44:	141a1c06 	.word	0x141a1c06
 8003d48:	12141414 	.word	0x12141414
 8003d4c:	12121212 	.word	0x12121212
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8003d50:	2002      	movs	r0, #2
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003d52:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8003d54:	2b0b      	cmp	r3, #11
 8003d56:	d820      	bhi.n	8003d9a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x62>
 8003d58:	e8df f003 	tbb	[pc, r3]
 8003d5c:	1f252712 	.word	0x1f252712
 8003d60:	1d1f1f1f 	.word	0x1d1f1f1f
 8003d64:	1d1d1d1d 	.word	0x1d1d1d1d
        dma2dColorMode = DMA2D_INPUT_L8;
 8003d68:	2005      	movs	r0, #5
        break;
 8003d6a:	e7f2      	b.n	8003d52 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
 8003d6c:	4b7f      	ldr	r3, [pc, #508]	; (8003f6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x234>)
 8003d6e:	4a80      	ldr	r2, [pc, #512]	; (8003f70 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8003d70:	2165      	movs	r1, #101	; 0x65
 8003d72:	4880      	ldr	r0, [pc, #512]	; (8003f74 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>)
 8003d74:	f005 ffb2 	bl	8009cdc <__assert_func>
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003d78:	2000      	movs	r0, #0
 8003d7a:	e7ea      	b.n	8003d52 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8003d7c:	2001      	movs	r0, #1
 8003d7e:	e7e8      	b.n	8003d52 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8003d80:	2402      	movs	r4, #2
    switch (format)
 8003d82:	2b0a      	cmp	r3, #10
 8003d84:	d815      	bhi.n	8003db2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
 8003d86:	e8df f003 	tbb	[pc, r3]
 8003d8a:	1c12      	.short	0x1c12
 8003d8c:	1414141a 	.word	0x1414141a
 8003d90:	1c1c1c14 	.word	0x1c1c1c14
 8003d94:	1c          	.byte	0x1c
 8003d95:	00          	.byte	0x00
        dma2dColorMode = DMA2D_INPUT_L8;
 8003d96:	2405      	movs	r4, #5
        break;
 8003d98:	e7f3      	b.n	8003d82 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        assert(0 && "Unsupported Format!");
 8003d9a:	4b74      	ldr	r3, [pc, #464]	; (8003f6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x234>)
 8003d9c:	4a74      	ldr	r2, [pc, #464]	; (8003f70 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8003d9e:	2165      	movs	r1, #101	; 0x65
 8003da0:	4874      	ldr	r0, [pc, #464]	; (8003f74 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>)
 8003da2:	f005 ff9b 	bl	8009cdc <__assert_func>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003da6:	2400      	movs	r4, #0
 8003da8:	e7eb      	b.n	8003d82 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8003daa:	2401      	movs	r4, #1
 8003dac:	e7e9      	b.n	8003d82 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8003dae:	2602      	movs	r6, #2
        break;
 8003db0:	e008      	b.n	8003dc4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        assert(0 && "Unsupported Format!");
 8003db2:	4b6e      	ldr	r3, [pc, #440]	; (8003f6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x234>)
 8003db4:	4a70      	ldr	r2, [pc, #448]	; (8003f78 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x240>)
 8003db6:	2186      	movs	r1, #134	; 0x86
 8003db8:	486e      	ldr	r0, [pc, #440]	; (8003f74 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>)
 8003dba:	f005 ff8f 	bl	8009cdc <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8003dbe:	2600      	movs	r6, #0
 8003dc0:	e000      	b.n	8003dc4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
 8003dc2:	2601      	movs	r6, #1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003dc4:	8aca      	ldrh	r2, [r1, #22]
 8003dc6:	8a0b      	ldrh	r3, [r1, #16]
 8003dc8:	1ad2      	subs	r2, r2, r3
 8003dca:	4b6c      	ldr	r3, [pc, #432]	; (8003f7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003dce:	8aca      	ldrh	r2, [r1, #22]
 8003dd0:	8a0d      	ldrh	r5, [r1, #16]
 8003dd2:	1b52      	subs	r2, r2, r5
 8003dd4:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8003dd6:	8a8a      	ldrh	r2, [r1, #20]
 8003dd8:	8a0d      	ldrh	r5, [r1, #16]
 8003dda:	1b52      	subs	r2, r2, r5
 8003ddc:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8003dde:	635e      	str	r6, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003de0:	8a4a      	ldrh	r2, [r1, #18]
 8003de2:	8a0d      	ldrh	r5, [r1, #16]
 8003de4:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8003de8:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003dea:	68ca      	ldr	r2, [r1, #12]
 8003dec:	63da      	str	r2, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8003dee:	684a      	ldr	r2, [r1, #4]
 8003df0:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8003df2:	680b      	ldr	r3, [r1, #0]
 8003df4:	2b80      	cmp	r3, #128	; 0x80
 8003df6:	d033      	beq.n	8003e60 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 8003df8:	d817      	bhi.n	8003e2a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8003dfa:	2b20      	cmp	r3, #32
 8003dfc:	d07b      	beq.n	8003ef6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1be>
 8003dfe:	2b40      	cmp	r3, #64	; 0x40
 8003e00:	d079      	beq.n	8003ef6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1be>
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	f040 8084 	bne.w	8003f10 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003e08:	7f0b      	ldrb	r3, [r1, #28]
 8003e0a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8003e0e:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8003e12:	4b5a      	ldr	r3, [pc, #360]	; (8003f7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8003e14:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003e16:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003e18:	68ca      	ldr	r2, [r1, #12]
 8003e1a:	615a      	str	r2, [r3, #20]
        if (blitOp.srcFormat == Bitmap::L8)
 8003e1c:	7f4b      	ldrb	r3, [r1, #29]
 8003e1e:	2b0b      	cmp	r3, #11
 8003e20:	d036      	beq.n	8003e90 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003e22:	4b56      	ldr	r3, [pc, #344]	; (8003f7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8003e24:	4a56      	ldr	r2, [pc, #344]	; (8003f80 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x248>)
 8003e26:	601a      	str	r2, [r3, #0]
        break;
 8003e28:	e031      	b.n	8003e8e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x156>
    switch (blitOp.operation)
 8003e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e2e:	d16f      	bne.n	8003f10 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003e30:	7f0a      	ldrb	r2, [r1, #28]
 8003e32:	4b54      	ldr	r3, [pc, #336]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x24c>)
 8003e34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003e38:	4850      	ldr	r0, [pc, #320]	; (8003f7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8003e3a:	61c3      	str	r3, [r0, #28]
 8003e3c:	698a      	ldr	r2, [r1, #24]
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 8003e3e:	0213      	lsls	r3, r2, #8
 8003e40:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 8003e44:	0155      	lsls	r5, r2, #5
 8003e46:	f405 457c 	and.w	r5, r5, #64512	; 0xfc00
 8003e4a:	432b      	orrs	r3, r5
 8003e4c:	00d2      	lsls	r2, r2, #3
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	4313      	orrs	r3, r2
 8003e52:	6203      	str	r3, [r0, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003e54:	6244      	str	r4, [r0, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003e56:	68cb      	ldr	r3, [r1, #12]
 8003e58:	6143      	str	r3, [r0, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003e5a:	4b49      	ldr	r3, [pc, #292]	; (8003f80 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x248>)
 8003e5c:	6003      	str	r3, [r0, #0]
        break;
 8003e5e:	e016      	b.n	8003e8e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x156>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003e60:	7f0a      	ldrb	r2, [r1, #28]
 8003e62:	4b49      	ldr	r3, [pc, #292]	; (8003f88 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>)
 8003e64:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003e68:	4844      	ldr	r0, [pc, #272]	; (8003f7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8003e6a:	61c3      	str	r3, [r0, #28]
 8003e6c:	698a      	ldr	r2, [r1, #24]
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 8003e6e:	0213      	lsls	r3, r2, #8
 8003e70:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 8003e74:	0155      	lsls	r5, r2, #5
 8003e76:	f405 457c 	and.w	r5, r5, #64512	; 0xfc00
 8003e7a:	432b      	orrs	r3, r5
 8003e7c:	00d2      	lsls	r2, r2, #3
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	4313      	orrs	r3, r2
 8003e82:	6203      	str	r3, [r0, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003e84:	6244      	str	r4, [r0, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003e86:	68cb      	ldr	r3, [r1, #12]
 8003e88:	6143      	str	r3, [r0, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003e8a:	4b3d      	ldr	r3, [pc, #244]	; (8003f80 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x248>)
 8003e8c:	6003      	str	r3, [r0, #0]
}
 8003e8e:	bd70      	pop	{r4, r5, r6, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8003e90:	688b      	ldr	r3, [r1, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8003e92:	1d19      	adds	r1, r3, #4
 8003e94:	4a39      	ldr	r2, [pc, #228]	; (8003f7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8003e96:	62d1      	str	r1, [r2, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8003e98:	781a      	ldrb	r2, [r3, #0]
 8003e9a:	b16a      	cbz	r2, 8003eb8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 8003e9c:	2a01      	cmp	r2, #1
 8003e9e:	d120      	bne.n	8003ee2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1aa>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003ea0:	4936      	ldr	r1, [pc, #216]	; (8003f7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8003ea2:	69c8      	ldr	r0, [r1, #28]
 8003ea4:	4a39      	ldr	r2, [pc, #228]	; (8003f8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x254>)
 8003ea6:	4002      	ands	r2, r0
 8003ea8:	885b      	ldrh	r3, [r3, #2]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003eb0:	f042 0210 	orr.w	r2, r2, #16
 8003eb4:	61ca      	str	r2, [r1, #28]
                break;
 8003eb6:	e008      	b.n	8003eca <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x192>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003eb8:	4930      	ldr	r1, [pc, #192]	; (8003f7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8003eba:	69c8      	ldr	r0, [r1, #28]
 8003ebc:	4a33      	ldr	r2, [pc, #204]	; (8003f8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x254>)
 8003ebe:	4002      	ands	r2, r0
 8003ec0:	885b      	ldrh	r3, [r3, #2]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003ec8:	61ca      	str	r2, [r1, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8003eca:	4a2c      	ldr	r2, [pc, #176]	; (8003f7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8003ecc:	69d3      	ldr	r3, [r2, #28]
 8003ece:	f043 0320 	orr.w	r3, r3, #32
 8003ed2:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8003ed4:	4b29      	ldr	r3, [pc, #164]	; (8003f7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f013 0f20 	tst.w	r3, #32
 8003edc:	d007      	beq.n	8003eee <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b6>
                __NOP();
 8003ede:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8003ee0:	e7f8      	b.n	8003ed4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19c>
                assert(0 && "Unsupported format");
 8003ee2:	4b2b      	ldr	r3, [pc, #172]	; (8003f90 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x258>)
 8003ee4:	4a2b      	ldr	r2, [pc, #172]	; (8003f94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25c>)
 8003ee6:	21fc      	movs	r1, #252	; 0xfc
 8003ee8:	4822      	ldr	r0, [pc, #136]	; (8003f74 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>)
 8003eea:	f005 fef7 	bl	8009cdc <__assert_func>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8003eee:	4b23      	ldr	r3, [pc, #140]	; (8003f7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8003ef0:	2210      	movs	r2, #16
 8003ef2:	609a      	str	r2, [r3, #8]
 8003ef4:	e795      	b.n	8003e22 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xea>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003ef6:	7f0b      	ldrb	r3, [r1, #28]
 8003ef8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8003efc:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8003f00:	4b1e      	ldr	r3, [pc, #120]	; (8003f7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8003f02:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003f04:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003f06:	68ca      	ldr	r2, [r1, #12]
 8003f08:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003f0a:	4a1d      	ldr	r2, [pc, #116]	; (8003f80 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x248>)
 8003f0c:	601a      	str	r2, [r3, #0]
        break;
 8003f0e:	e7be      	b.n	8003e8e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x156>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003f10:	7f0b      	ldrb	r3, [r1, #28]
 8003f12:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8003f16:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8003f1a:	4b18      	ldr	r3, [pc, #96]	; (8003f7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8003f1c:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat == Bitmap::L8)
 8003f1e:	7f4b      	ldrb	r3, [r1, #29]
 8003f20:	2b0b      	cmp	r3, #11
 8003f22:	d004      	beq.n	8003f2e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8003f24:	4b15      	ldr	r3, [pc, #84]	; (8003f7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8003f26:	f240 2201 	movw	r2, #513	; 0x201
 8003f2a:	601a      	str	r2, [r3, #0]
}
 8003f2c:	e7af      	b.n	8003e8e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x156>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8003f2e:	6889      	ldr	r1, [r1, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8003f30:	1d0b      	adds	r3, r1, #4
 8003f32:	4a12      	ldr	r2, [pc, #72]	; (8003f7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8003f34:	62d3      	str	r3, [r2, #44]	; 0x2c
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003f36:	69d0      	ldr	r0, [r2, #28]
 8003f38:	4b14      	ldr	r3, [pc, #80]	; (8003f8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x254>)
 8003f3a:	4003      	ands	r3, r0
 8003f3c:	8849      	ldrh	r1, [r1, #2]
 8003f3e:	3901      	subs	r1, #1
 8003f40:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003f44:	f043 0310 	orr.w	r3, r3, #16
 8003f48:	61d3      	str	r3, [r2, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8003f4a:	69d3      	ldr	r3, [r2, #28]
 8003f4c:	f043 0320 	orr.w	r3, r3, #32
 8003f50:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8003f52:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f013 0f20 	tst.w	r3, #32
 8003f5a:	d001      	beq.n	8003f60 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>
                __NOP();
 8003f5c:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8003f5e:	e7f8      	b.n	8003f52 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21a>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8003f60:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8003f62:	2210      	movs	r2, #16
 8003f64:	609a      	str	r2, [r3, #8]
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8003f66:	4a0c      	ldr	r2, [pc, #48]	; (8003f98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x260>)
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	e790      	b.n	8003e8e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x156>
 8003f6c:	0800b458 	.word	0x0800b458
 8003f70:	0800b51c 	.word	0x0800b51c
 8003f74:	0800b4c4 	.word	0x0800b4c4
 8003f78:	0800b474 	.word	0x0800b474
 8003f7c:	4002b000 	.word	0x4002b000
 8003f80:	00020201 	.word	0x00020201
 8003f84:	00020009 	.word	0x00020009
 8003f88:	0002000a 	.word	0x0002000a
 8003f8c:	ffff00ef 	.word	0xffff00ef
 8003f90:	0800b568 	.word	0x0800b568
 8003f94:	0800b584 	.word	0x0800b584
 8003f98:	00010201 	.word	0x00010201

08003f9c <_ZN10STM32F7DMAC1Ev>:
STM32F7DMA::STM32F7DMA()
 8003f9c:	b538      	push	{r3, r4, r5, lr}
 8003f9e:	4605      	mov	r5, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8003fa0:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8003fa2:	6068      	str	r0, [r5, #4]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	722b      	strb	r3, [r5, #8]
 8003fa8:	726b      	strb	r3, [r5, #9]
 8003faa:	462c      	mov	r4, r5
 8003fac:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <_ZN10STM32F7DMAC1Ev+0x34>)
 8003fae:	f844 3b20 	str.w	r3, [r4], #32
 8003fb2:	2260      	movs	r2, #96	; 0x60
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	f001 fedb 	bl	8005d70 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8003fba:	235f      	movs	r3, #95	; 0x5f
 8003fbc:	e003      	b.n	8003fc6 <_ZN10STM32F7DMAC1Ev+0x2a>
        : color(0)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	61a2      	str	r2, [r4, #24]
 8003fc2:	3420      	adds	r4, #32
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	daf9      	bge.n	8003fbe <_ZN10STM32F7DMAC1Ev+0x22>
}
 8003fca:	4628      	mov	r0, r5
 8003fcc:	bd38      	pop	{r3, r4, r5, pc}
 8003fce:	bf00      	nop
 8003fd0:	0800aff4 	.word	0x0800aff4

08003fd4 <_Z41__static_initialization_and_destruction_0ii>:
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
}
 8003fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fd8:	4604      	mov	r4, r0
 8003fda:	460e      	mov	r6, r1
 8003fdc:	2801      	cmp	r0, #1
 8003fde:	d006      	beq.n	8003fee <_Z41__static_initialization_and_destruction_0ii+0x1a>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8003fe0:	b91c      	cbnz	r4, 8003fea <_Z41__static_initialization_and_destruction_0ii+0x16>
 8003fe2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fe6:	429e      	cmp	r6, r3
 8003fe8:	d06d      	beq.n	80040c6 <_Z41__static_initialization_and_destruction_0ii+0xf2>
}
 8003fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ff2:	4299      	cmp	r1, r3
 8003ff4:	d1f4      	bne.n	8003fe0 <_Z41__static_initialization_and_destruction_0ii+0xc>
{
public:

    STM32TouchController() {}
 8003ff6:	4d36      	ldr	r5, [pc, #216]	; (80040d0 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8003ff8:	4b36      	ldr	r3, [pc, #216]	; (80040d4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8003ffa:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
static STM32F7DMA dma;
 8003ffe:	f105 0884 	add.w	r8, r5, #132	; 0x84
 8004002:	4640      	mov	r0, r8
 8004004:	f7ff ffca 	bl	8003f9c <_ZN10STM32F7DMAC1Ev>
static LCD16bpp display;
 8004008:	f605 47a4 	addw	r7, r5, #3236	; 0xca4
 800400c:	4638      	mov	r0, r7
 800400e:	f004 fc5d 	bl	80088cc <_ZN8touchgfx8LCD16bppC1Ev>
          lastRenderVariant(HARDWARE)
 8004012:	f8c5 8008 	str.w	r8, [r5, #8]
 8004016:	60ef      	str	r7, [r5, #12]
 8004018:	f105 0380 	add.w	r3, r5, #128	; 0x80
 800401c:	612b      	str	r3, [r5, #16]
 800401e:	2300      	movs	r3, #0
 8004020:	616b      	str	r3, [r5, #20]
 8004022:	61ab      	str	r3, [r5, #24]
 8004024:	61eb      	str	r3, [r5, #28]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8004026:	842b      	strh	r3, [r5, #32]
 8004028:	846b      	strh	r3, [r5, #34]	; 0x22
 800402a:	84ab      	strh	r3, [r5, #36]	; 0x24
 800402c:	84eb      	strh	r3, [r5, #38]	; 0x26
 800402e:	852b      	strh	r3, [r5, #40]	; 0x28
 8004030:	856b      	strh	r3, [r5, #42]	; 0x2a
 8004032:	85ab      	strh	r3, [r5, #44]	; 0x2c
 8004034:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : listener(0), dragThresholdValue(0)
 8004038:	632b      	str	r3, [r5, #48]	; 0x30
 800403a:	86ab      	strh	r3, [r5, #52]	; 0x34
 800403c:	63eb      	str	r3, [r5, #60]	; 0x3c
 800403e:	642b      	str	r3, [r5, #64]	; 0x40
 8004040:	646b      	str	r3, [r5, #68]	; 0x44
 8004042:	64ab      	str	r3, [r5, #72]	; 0x48
 8004044:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
 8004048:	2201      	movs	r2, #1
 800404a:	f885 204d 	strb.w	r2, [r5, #77]	; 0x4d
 800404e:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
 8004052:	652b      	str	r3, [r5, #80]	; 0x50
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
    {
        x = 0;
 8004054:	f8a5 3054 	strh.w	r3, [r5, #84]	; 0x54
        y = 0;
 8004058:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
        width = 0;
 800405c:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
        height = 0;
 8004060:	f8a5 305a 	strh.w	r3, [r5, #90]	; 0x5a
 8004064:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
 8004068:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
 800406c:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
 8004070:	f885 206b 	strb.w	r2, [r5, #107]	; 0x6b
 8004074:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
 8004078:	f885 306d 	strb.w	r3, [r5, #109]	; 0x6d
 800407c:	f885 306e 	strb.w	r3, [r5, #110]	; 0x6e
 8004080:	f885 306f 	strb.w	r3, [r5, #111]	; 0x6f
 8004084:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
 8004088:	676b      	str	r3, [r5, #116]	; 0x74
 800408a:	f885 3079 	strb.w	r3, [r5, #121]	; 0x79
 800408e:	f885 307a 	strb.w	r3, [r5, #122]	; 0x7a
 8004092:	f885 207b 	strb.w	r2, [r5, #123]	; 0x7b
 8004096:	f885 207c 	strb.w	r2, [r5, #124]	; 0x7c
        instance = this;
 800409a:	1d29      	adds	r1, r5, #4
 800409c:	4a0e      	ldr	r2, [pc, #56]	; (80040d8 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 800409e:	6011      	str	r1, [r2, #0]
        DISPLAY_WIDTH = width;
 80040a0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80040a4:	4a0d      	ldr	r2, [pc, #52]	; (80040dc <_Z41__static_initialization_and_destruction_0ii+0x108>)
 80040a6:	8011      	strh	r1, [r2, #0]
        DISPLAY_HEIGHT = height;
 80040a8:	f44f 7288 	mov.w	r2, #272	; 0x110
 80040ac:	480c      	ldr	r0, [pc, #48]	; (80040e0 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80040ae:	8002      	strh	r2, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 80040b0:	480c      	ldr	r0, [pc, #48]	; (80040e4 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80040b2:	7003      	strb	r3, [r0, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80040b4:	480c      	ldr	r0, [pc, #48]	; (80040e8 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 80040b6:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80040b8:	490c      	ldr	r1, [pc, #48]	; (80040ec <_Z41__static_initialization_and_destruction_0ii+0x118>)
 80040ba:	800a      	strh	r2, [r1, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80040bc:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80040c2:	606b      	str	r3, [r5, #4]
    }
 80040c4:	e78c      	b.n	8003fe0 <_Z41__static_initialization_and_destruction_0ii+0xc>
static STM32F7DMA dma;
 80040c6:	480b      	ldr	r0, [pc, #44]	; (80040f4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80040c8:	f7ff fd78 	bl	8003bbc <_ZN10STM32F7DMAD1Ev>
}
 80040cc:	e78d      	b.n	8003fea <_Z41__static_initialization_and_destruction_0ii+0x16>
 80040ce:	bf00      	nop
 80040d0:	20000168 	.word	0x20000168
 80040d4:	0800af20 	.word	0x0800af20
 80040d8:	200010b0 	.word	0x200010b0
 80040dc:	200010a4 	.word	0x200010a4
 80040e0:	200010a6 	.word	0x200010a6
 80040e4:	200010a8 	.word	0x200010a8
 80040e8:	200010aa 	.word	0x200010aa
 80040ec:	200010ac 	.word	0x200010ac
 80040f0:	0800af38 	.word	0x0800af38
 80040f4:	200001ec 	.word	0x200001ec

080040f8 <_GLOBAL__sub_I_touchgfx_init>:
 80040f8:	b508      	push	{r3, lr}
 80040fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80040fe:	2001      	movs	r0, #1
 8004100:	f7ff ff68 	bl	8003fd4 <_Z41__static_initialization_and_destruction_0ii>
 8004104:	bd08      	pop	{r3, pc}

08004106 <_GLOBAL__sub_D_touchgfx_init>:
 8004106:	b508      	push	{r3, lr}
 8004108:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800410c:	2000      	movs	r0, #0
 800410e:	f7ff ff61 	bl	8003fd4 <_Z41__static_initialization_and_destruction_0ii>
 8004112:	bd08      	pop	{r3, pc}

08004114 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004114:	4b03      	ldr	r3, [pc, #12]	; (8004124 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8004116:	2290      	movs	r2, #144	; 0x90
 8004118:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 800411c:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	e000e100 	.word	0xe000e100

08004128 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004128:	4b03      	ldr	r3, [pc, #12]	; (8004138 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 800412a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800412e:	609a      	str	r2, [r3, #8]
 8004130:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004134:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
    NVIC_EnableIRQ(LTDC_IRQn);
}
 8004136:	4770      	bx	lr
 8004138:	e000e100 	.word	0xe000e100

0800413c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800413c:	4b08      	ldr	r3, [pc, #32]	; (8004160 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 800413e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8004146:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8004156:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800415a:	f3bf 8f6f 	isb	sy

void TouchGFXGeneratedHAL::disableInterrupts()
{
    NVIC_DisableIRQ(DMA2D_IRQn);
    NVIC_DisableIRQ(LTDC_IRQn);
}
 800415e:	4770      	bx	lr
 8004160:	e000e100 	.word	0xe000e100

08004164 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8004164:	4a09      	ldr	r2, [pc, #36]	; (800418c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8004166:	68d3      	ldr	r3, [r2, #12]
 8004168:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800416c:	3b01      	subs	r3, #1
 800416e:	b29b      	uxth	r3, r3
 8004170:	4807      	ldr	r0, [pc, #28]	; (8004190 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8004172:	8003      	strh	r3, [r0, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8004174:	6911      	ldr	r1, [r2, #16]
 8004176:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800417a:	3901      	subs	r1, #1
 800417c:	8041      	strh	r1, [r0, #2]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800417e:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8004180:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004182:	f043 0301 	orr.w	r3, r3, #1
 8004186:	6353      	str	r3, [r2, #52]	; 0x34
}
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40016800 	.word	0x40016800
 8004190:	20000e84 	.word	0x20000e84

08004194 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8004194:	4b01      	ldr	r3, [pc, #4]	; (800419c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8004196:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	40016884 	.word	0x40016884

080041a0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80041a0:	4b02      	ldr	r3, [pc, #8]	; (80041ac <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)
 80041a2:	6299      	str	r1, [r3, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80041a4:	3b84      	subs	r3, #132	; 0x84
 80041a6:	2201      	movs	r2, #1
 80041a8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80041aa:	4770      	bx	lr
 80041ac:	40016884 	.word	0x40016884

080041b0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80041b0:	b510      	push	{r4, lr}
    HAL::flushFrameBuffer(rect);
 80041b2:	f000 fec9 	bl	8004f48 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80041b6:	4b11      	ldr	r3, [pc, #68]	; (80041fc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80041be:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80041c2:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80041c6:	f3c0 324e 	ubfx	r2, r0, #13, #15
 80041ca:	e000      	b.n	80041ce <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x1e>
    } while(sets-- != 0U);
 80041cc:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80041ce:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80041d2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80041d6:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 80041da:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 80041de:	4c07      	ldr	r4, [pc, #28]	; (80041fc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 80041e0:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
      } while (ways-- != 0U);
 80041e4:	460b      	mov	r3, r1
 80041e6:	3901      	subs	r1, #1
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1f2      	bne.n	80041d2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x22>
    } while(sets-- != 0U);
 80041ec:	1e53      	subs	r3, r2, #1
 80041ee:	2a00      	cmp	r2, #0
 80041f0:	d1ec      	bne.n	80041cc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x1c>
 80041f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80041f6:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanInvalidateDCache().
    SCB_CleanInvalidateDCache();
}
 80041fa:	bd10      	pop	{r4, pc}
 80041fc:	e000ed00 	.word	0xe000ed00

08004200 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8004200:	b508      	push	{r3, lr}
    return HAL::blockCopy(dest, src, numBytes);
 8004202:	f000 ffc8 	bl	8005196 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
}
 8004206:	bd08      	pop	{r3, pc}

08004208 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // using SCB_CleanInvalidateDCache().
    SCB_CleanInvalidateDCache();
}

void TouchGFXGeneratedHAL::FlushCache()
{
 8004208:	b410      	push	{r4}
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800420a:	4b12      	ldr	r3, [pc, #72]	; (8004254 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 800420c:	2200      	movs	r2, #0
 800420e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004212:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8004216:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800421a:	f3c0 324e 	ubfx	r2, r0, #13, #15
 800421e:	e000      	b.n	8004222 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x1a>
    } while(sets-- != 0U);
 8004220:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004222:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004226:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800422a:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 800422e:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 8004232:	4c08      	ldr	r4, [pc, #32]	; (8004254 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 8004234:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
      } while (ways-- != 0U);
 8004238:	460b      	mov	r3, r1
 800423a:	3901      	subs	r1, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1f2      	bne.n	8004226 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x1e>
    } while(sets-- != 0U);
 8004240:	1e53      	subs	r3, r2, #1
 8004242:	2a00      	cmp	r2, #0
 8004244:	d1ec      	bne.n	8004220 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x18>
 8004246:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800424a:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanInvalidateDCache().
    SCB_CleanInvalidateDCache();
}
 800424e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	e000ed00 	.word	0xe000ed00

08004258 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:
{
 8004258:	b410      	push	{r4}
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x4c>)
 800425c:	2200      	movs	r2, #0
 800425e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004262:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8004266:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800426a:	f3c0 324e 	ubfx	r2, r0, #13, #15
 800426e:	e000      	b.n	8004272 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x1a>
    } while(sets-- != 0U);
 8004270:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004272:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004276:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800427a:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 800427e:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 8004282:	4c08      	ldr	r4, [pc, #32]	; (80042a4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x4c>)
 8004284:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
      } while (ways-- != 0U);
 8004288:	460b      	mov	r3, r1
 800428a:	3901      	subs	r1, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1f2      	bne.n	8004276 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x1e>
    } while(sets-- != 0U);
 8004290:	1e53      	subs	r3, r2, #1
 8004292:	2a00      	cmp	r2, #0
 8004294:	d1ec      	bne.n	8004270 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x18>
 8004296:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800429a:	f3bf 8f6f 	isb	sy
}
 800429e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	e000ed00 	.word	0xe000ed00

080042a8 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80042a8:	b510      	push	{r4, lr}
        if (LTDC->LIPCR == lcd_int_active_line)
 80042aa:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <HAL_LTDC_LineEventCallback+0x4c>)
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	4a12      	ldr	r2, [pc, #72]	; (80042f8 <HAL_LTDC_LineEventCallback+0x50>)
 80042b0:	8811      	ldrh	r1, [r2, #0]
 80042b2:	428b      	cmp	r3, r1
 80042b4:	d00a      	beq.n	80042cc <HAL_LTDC_LineEventCallback+0x24>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80042b6:	f7fd fdf5 	bl	8001ea4 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 80042ba:	2000      	movs	r0, #0
 80042bc:	f7ff fb25 	bl	800390a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        return instance;
 80042c0:	4b0e      	ldr	r3, [pc, #56]	; (80042fc <HAL_LTDC_LineEventCallback+0x54>)
 80042c2:	6818      	ldr	r0, [r3, #0]
        allowDMATransfers();
 80042c4:	6803      	ldr	r3, [r0, #0]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	4798      	blx	r3
            HAL::getInstance()->frontPorchEntered();
        }
    }
 80042ca:	bd10      	pop	{r4, pc}
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80042cc:	8851      	ldrh	r1, [r2, #2]
 80042ce:	f7fd fde9 	bl	8001ea4 <HAL_LTDC_ProgramLineEvent>
        return instance;
 80042d2:	4c0a      	ldr	r4, [pc, #40]	; (80042fc <HAL_LTDC_LineEventCallback+0x54>)
 80042d4:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 80042d6:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 80042da:	3301      	adds	r3, #1
 80042dc:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
 80042e0:	f7ff fc3e 	bl	8003b60 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
 80042e4:	6820      	ldr	r0, [r4, #0]
 80042e6:	f001 fbdf 	bl	8005aa8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80042ea:	2000      	movs	r0, #0
 80042ec:	f7ff fb0c 	bl	8003908 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80042f0:	e7eb      	b.n	80042ca <HAL_LTDC_LineEventCallback+0x22>
 80042f2:	bf00      	nop
 80042f4:	40016800 	.word	0x40016800
 80042f8:	20000e84 	.word	0x20000e84
 80042fc:	200010b0 	.word	0x200010b0

08004300 <_ZN5Trace10initializeEv>:
    traceUart.write(strTrace);
}

//static
void Trace::initialize()
{
 8004300:	b508      	push	{r3, lr}
	traceUart.initialize(TRACE_UART_BAUD_RATE);
 8004302:	4802      	ldr	r0, [pc, #8]	; (800430c <_ZN5Trace10initializeEv+0xc>)
 8004304:	f000 f888 	bl	8004418 <_ZN4Uart10initializeEv>
}
 8004308:	bd08      	pop	{r3, pc}
 800430a:	bf00      	nop
 800430c:	20000f90 	.word	0x20000f90

08004310 <_Z41__static_initialization_and_destruction_0ii>:

//static
void Trace::unlock()
{
    traceMutexUnlock();
}
 8004310:	b538      	push	{r3, r4, r5, lr}
 8004312:	4604      	mov	r4, r0
 8004314:	460d      	mov	r5, r1
 8004316:	2801      	cmp	r0, #1
 8004318:	d005      	beq.n	8004326 <_Z41__static_initialization_and_destruction_0ii+0x16>
static Uart traceUart(TRACE_UART_CONSTRUCTOR_PARAMETERS);
 800431a:	b91c      	cbnz	r4, 8004324 <_Z41__static_initialization_and_destruction_0ii+0x14>
 800431c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004320:	429d      	cmp	r5, r3
 8004322:	d00b      	beq.n	800433c <_Z41__static_initialization_and_destruction_0ii+0x2c>
}
 8004324:	bd38      	pop	{r3, r4, r5, pc}
 8004326:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800432a:	4299      	cmp	r1, r3
 800432c:	d1f5      	bne.n	800431a <_Z41__static_initialization_and_destruction_0ii+0xa>
static Uart traceUart(TRACE_UART_CONSTRUCTOR_PARAMETERS);
 800432e:	2300      	movs	r3, #0
 8004330:	4a04      	ldr	r2, [pc, #16]	; (8004344 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8004332:	4619      	mov	r1, r3
 8004334:	4804      	ldr	r0, [pc, #16]	; (8004348 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8004336:	f000 f843 	bl	80043c0 <_ZN4UartC1EhP20__UART_HandleTypeDefb>
 800433a:	e7ee      	b.n	800431a <_Z41__static_initialization_and_destruction_0ii+0xa>
 800433c:	4802      	ldr	r0, [pc, #8]	; (8004348 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800433e:	f000 f837 	bl	80043b0 <_ZN4UartD1Ev>
}
 8004342:	e7ef      	b.n	8004324 <_Z41__static_initialization_and_destruction_0ii+0x14>
 8004344:	20001444 	.word	0x20001444
 8004348:	20000f90 	.word	0x20000f90

0800434c <_GLOBAL__sub_I_trace_initialize>:
 800434c:	b508      	push	{r3, lr}
 800434e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004352:	2001      	movs	r0, #1
 8004354:	f7ff ffdc 	bl	8004310 <_Z41__static_initialization_and_destruction_0ii>
 8004358:	bd08      	pop	{r3, pc}

0800435a <_GLOBAL__sub_D_trace_initialize>:
 800435a:	b508      	push	{r3, lr}
 800435c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004360:	2000      	movs	r0, #0
 8004362:	f7ff ffd5 	bl	8004310 <_Z41__static_initialization_and_destruction_0ii>
 8004366:	bd08      	pop	{r3, pc}

08004368 <_Z5inISRv>:

int inISR()
{
	// Variable must be put to TRUE in every ISR to indicate execution
	// of an ISR and need to put back to FALSE before leaving ISR.
	return bInISR;
 8004368:	4b01      	ldr	r3, [pc, #4]	; (8004370 <_Z5inISRv+0x8>)
 800436a:	6818      	ldr	r0, [r3, #0]
}
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	20001020 	.word	0x20001020

08004374 <_Z13enterCriticalv>:

void enterCritical()
{
 8004374:	b508      	push	{r3, lr}
	// Only disable interrupts when not calling from an ISR
	if (!inISR())
 8004376:	f7ff fff7 	bl	8004368 <_Z5inISRv>
 800437a:	b938      	cbnz	r0, 800438c <_Z13enterCriticalv+0x18>
	{
		if (!bOMEnterCriticalRegionNested)
 800437c:	4b04      	ldr	r3, [pc, #16]	; (8004390 <_Z13enterCriticalv+0x1c>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	b903      	cbnz	r3, 8004384 <_Z13enterCriticalv+0x10>
  __ASM volatile ("cpsid i" : : : "memory");
 8004382:	b672      	cpsid	i
		{
			// Turn off the priority configurable interrupts
		    __disable_irq();
		}
		bOMEnterCriticalRegionNested++;
 8004384:	4a02      	ldr	r2, [pc, #8]	; (8004390 <_Z13enterCriticalv+0x1c>)
 8004386:	6853      	ldr	r3, [r2, #4]
 8004388:	3301      	adds	r3, #1
 800438a:	6053      	str	r3, [r2, #4]
	}
}
 800438c:	bd08      	pop	{r3, pc}
 800438e:	bf00      	nop
 8004390:	20001020 	.word	0x20001020

08004394 <_Z12exitCriticalv>:

void exitCritical()
{
 8004394:	b508      	push	{r3, lr}
	// Only enable interrupts when not calling from an ISR
	if (!inISR())
 8004396:	f7ff ffe7 	bl	8004368 <_Z5inISRv>
 800439a:	b930      	cbnz	r0, 80043aa <_Z12exitCriticalv+0x16>
	{
		bOMEnterCriticalRegionNested--;
 800439c:	4b03      	ldr	r3, [pc, #12]	; (80043ac <_Z12exitCriticalv+0x18>)
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	3a01      	subs	r2, #1
 80043a2:	605a      	str	r2, [r3, #4]

		if (!bOMEnterCriticalRegionNested)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	b903      	cbnz	r3, 80043aa <_Z12exitCriticalv+0x16>
  __ASM volatile ("cpsie i" : : : "memory");
 80043a8:	b662      	cpsie	i
		{
			// Turn on the interrupts with configurable priority
		    __enable_irq();
		}
	}
}
 80043aa:	bd08      	pop	{r3, pc}
 80043ac:	20001020 	.word	0x20001020

080043b0 <_ZN4UartD1Ev>:
}

Uart::~Uart()
{

}
 80043b0:	4770      	bx	lr

080043b2 <_ZN4UartD0Ev>:
Uart::~Uart()
 80043b2:	b510      	push	{r4, lr}
 80043b4:	4604      	mov	r4, r0
}
 80043b6:	2190      	movs	r1, #144	; 0x90
 80043b8:	f005 fc36 	bl	8009c28 <_ZdlPvj>
 80043bc:	4620      	mov	r0, r4
 80043be:	bd10      	pop	{r4, pc}

080043c0 <_ZN4UartC1EhP20__UART_HandleTypeDefb>:
Uart::Uart(const unsigned char uartNbr, UART_HandleTypeDef * uartHandle, bool bTxDMA /* = false */)
 80043c0:	b510      	push	{r4, lr}
   _bTxDMA(bTxDMA)
 80043c2:	4c0f      	ldr	r4, [pc, #60]	; (8004400 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x40>)
 80043c4:	6004      	str	r4, [r0, #0]
 80043c6:	24ff      	movs	r4, #255	; 0xff
 80043c8:	7104      	strb	r4, [r0, #4]
 80043ca:	2400      	movs	r4, #0
 80043cc:	6084      	str	r4, [r0, #8]
 80043ce:	7303      	strb	r3, [r0, #12]
	assert(uartNbr < UART_COUNT);
 80043d0:	2902      	cmp	r1, #2
 80043d2:	d809      	bhi.n	80043e8 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x28>
        if (!_sUart[uartNbr])
 80043d4:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x44>)
 80043d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80043da:	b95b      	cbnz	r3, 80043f4 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x34>
            _sUart[uartNbr] = this;
 80043dc:	4b09      	ldr	r3, [pc, #36]	; (8004404 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x44>)
 80043de:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
            _uartNbr = uartNbr;
 80043e2:	7101      	strb	r1, [r0, #4]
            _pUartHandle = uartHandle;
 80043e4:	6082      	str	r2, [r0, #8]
}
 80043e6:	bd10      	pop	{r4, pc}
	assert(uartNbr < UART_COUNT);
 80043e8:	4b07      	ldr	r3, [pc, #28]	; (8004408 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x48>)
 80043ea:	4a08      	ldr	r2, [pc, #32]	; (800440c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x4c>)
 80043ec:	2111      	movs	r1, #17
 80043ee:	4808      	ldr	r0, [pc, #32]	; (8004410 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x50>)
 80043f0:	f005 fc74 	bl	8009cdc <__assert_func>
            assert(false);  // Error: Instance for specified UART already exists.
 80043f4:	4b07      	ldr	r3, [pc, #28]	; (8004414 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x54>)
 80043f6:	4a05      	ldr	r2, [pc, #20]	; (800440c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x4c>)
 80043f8:	211f      	movs	r1, #31
 80043fa:	4805      	ldr	r0, [pc, #20]	; (8004410 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x50>)
 80043fc:	f005 fc6e 	bl	8009cdc <__assert_func>
 8004400:	0800b044 	.word	0x0800b044
 8004404:	20001028 	.word	0x20001028
 8004408:	0800b5c4 	.word	0x0800b5c4
 800440c:	0800b5dc 	.word	0x0800b5dc
 8004410:	0800b614 	.word	0x0800b614
 8004414:	0800b660 	.word	0x0800b660

08004418 <_ZN4Uart10initializeEv>:

bool Uart::initialize()
{
	return true;
}
 8004418:	2001      	movs	r0, #1
 800441a:	4770      	bx	lr

0800441c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800441c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004454 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004420:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004422:	e003      	b.n	800442c <LoopCopyDataInit>

08004424 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004424:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004426:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004428:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800442a:	3104      	adds	r1, #4

0800442c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800442c:	480b      	ldr	r0, [pc, #44]	; (800445c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800442e:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004430:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004432:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004434:	d3f6      	bcc.n	8004424 <CopyDataInit>
  ldr  r2, =_sbss
 8004436:	4a0b      	ldr	r2, [pc, #44]	; (8004464 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004438:	e002      	b.n	8004440 <LoopFillZerobss>

0800443a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800443a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800443c:	f842 3b04 	str.w	r3, [r2], #4

08004440 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004440:	4b09      	ldr	r3, [pc, #36]	; (8004468 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004442:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004444:	d3f9      	bcc.n	800443a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004446:	f7fc fdc3 	bl	8000fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800444a:	f005 fc7d 	bl	8009d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800444e:	f7fc fc27 	bl	8000ca0 <main>
  bx  lr    
 8004452:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004454:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004458:	0800dba0 	.word	0x0800dba0
  ldr  r0, =_sdata
 800445c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004460:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 8004464:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 8004468:	20001534 	.word	0x20001534

0800446c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800446c:	e7fe      	b.n	800446c <ADC_IRQHandler>

0800446e <_ZNK9XFTimeout18deleteAfterConsumeEv>:
}

bool XFTimeout::deleteAfterConsume() const
{
    return true;
}
 800446e:	2001      	movs	r0, #1
 8004470:	4770      	bx	lr

08004472 <_ZN9XFTimeoutD1Ev>:
 * the `getEventType()` method.
 *
 * XFTimeout is inheriting from XFEvent, so every timeout is
 * also an event.
 */
class XFTimeout : public XFEvent
 8004472:	4770      	bx	lr

08004474 <_ZN9XFTimeoutD0Ev>:
 8004474:	b510      	push	{r4, lr}
 8004476:	4604      	mov	r4, r0
 8004478:	2118      	movs	r1, #24
 800447a:	f005 fbd5 	bl	8009c28 <_ZdlPvj>
 800447e:	4620      	mov	r0, r4
 8004480:	bd10      	pop	{r4, pc}
	...

08004484 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>:
XFTimeout::XFTimeout(int id, int interval, interface::XFReactive * pBehavior)
 8004484:	b430      	push	{r4, r5}

public :
    /**
     * Default class constructor
     */
    XFEvent(XFEventType eventType, int id, interface::XFReactive * pBehavior) : eventType_(eventType), id_(id), pBehavior_(pBehavior) {}
 8004486:	2504      	movs	r5, #4
 8004488:	7105      	strb	r5, [r0, #4]
 800448a:	6081      	str	r1, [r0, #8]
 800448c:	60c3      	str	r3, [r0, #12]
   relTicks_(interval)
 800448e:	4b03      	ldr	r3, [pc, #12]	; (800449c <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE+0x18>)
 8004490:	6003      	str	r3, [r0, #0]
 8004492:	6102      	str	r2, [r0, #16]
 8004494:	6142      	str	r2, [r0, #20]
}
 8004496:	bc30      	pop	{r4, r5}
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	0800b054 	.word	0x0800b054

080044a0 <_ZNK9XFTimeouteqERKS_>:
    return (pBehavior_ == timeout.pBehavior_ && getId() == timeout.getId()) ? true : false;
 80044a0:	68c2      	ldr	r2, [r0, #12]
 80044a2:	68cb      	ldr	r3, [r1, #12]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d001      	beq.n	80044ac <_ZNK9XFTimeouteqERKS_+0xc>
 80044a8:	2000      	movs	r0, #0
 80044aa:	4770      	bx	lr
    /** \brief Sets pointer to behavioral class (see #_pBehavior).
     * Sets the behavior in which the event should be executed.
     */
    inline void setBehavior(interface::XFReactive * pBehavior) { pBehavior_ = pBehavior; }

    inline int getId() const { return id_; }		///< Returns #_id identifying the event in the behaviors context.
 80044ac:	6882      	ldr	r2, [r0, #8]
 80044ae:	688b      	ldr	r3, [r1, #8]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d001      	beq.n	80044b8 <_ZNK9XFTimeouteqERKS_+0x18>
 80044b4:	2000      	movs	r0, #0
}
 80044b6:	4770      	bx	lr
    return (pBehavior_ == timeout.pBehavior_ && getId() == timeout.getId()) ? true : false;
 80044b8:	2001      	movs	r0, #1
 80044ba:	4770      	bx	lr

080044bc <_ZNK9interface12XFDispatcher9getThreadEv>:
     * @brief Returns pointer to thread executing the behavior.
     *
     * Within an IDF no threads are present and this method returns
     * always null.
     */
    virtual interface::XFThread * getThread() const { return nullptr; }
 80044bc:	2000      	movs	r0, #0
 80044be:	4770      	bx	lr

080044c0 <_ZNK19XFDispatcherDefault8isActiveEv>:
{
public:
	XFDispatcherDefault();
	virtual  ~XFDispatcherDefault();

	virtual bool isActive() const { return false; }		///< Default dispatcher does not have a composite thread.
 80044c0:	2000      	movs	r0, #0
 80044c2:	4770      	bx	lr

080044c4 <_ZN19XFDispatcherDefault4stopEv>:
	_bExecuting = true;
}

void XFDispatcherDefault::stop()
{
	_bExecuting = false;
 80044c4:	2300      	movs	r3, #0
 80044c6:	7103      	strb	r3, [r0, #4]
}
 80044c8:	4770      	bx	lr

080044ca <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent>:

    return _bExecuting;
}

void XFDispatcherDefault::dispatchEvent(const XFEvent * pEvent) const
{
 80044ca:	b510      	push	{r4, lr}
 80044cc:	460c      	mov	r4, r1
    inline interface::XFReactive * getBehavior() const { return pBehavior_; }
 80044ce:	68c8      	ldr	r0, [r1, #12]
    XFReactive::TerminateBehavior terminateBehavior;

	terminateBehavior = pEvent->getBehavior()->process(pEvent);
 80044d0:	6803      	ldr	r3, [r0, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	4798      	blx	r3

	// Check if behavior should be deleted
	if (terminateBehavior and pEvent->getBehavior()->deleteOnTerminate())
 80044d6:	b148      	cbz	r0, 80044ec <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x22>
 80044d8:	68e0      	ldr	r0, [r4, #12]
 80044da:	6803      	ldr	r3, [r0, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	4798      	blx	r3
 80044e0:	b120      	cbz	r0, 80044ec <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x22>
 80044e2:	68e0      	ldr	r0, [r4, #12]
	{
		delete pEvent->getBehavior();
 80044e4:	b110      	cbz	r0, 80044ec <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x22>
 80044e6:	6803      	ldr	r3, [r0, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	4798      	blx	r3
	}
}
 80044ec:	bd10      	pop	{r4, pc}
	...

080044f0 <_ZN19XFDispatcherDefault5startEv>:
{
 80044f0:	b508      	push	{r3, lr}
        assert(_pMutex);
 80044f2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80044f4:	b113      	cbz	r3, 80044fc <_ZN19XFDispatcherDefault5startEv+0xc>
	_bExecuting = true;
 80044f6:	2301      	movs	r3, #1
 80044f8:	7103      	strb	r3, [r0, #4]
}
 80044fa:	bd08      	pop	{r3, pc}
        assert(_pMutex);
 80044fc:	4b02      	ldr	r3, [pc, #8]	; (8004508 <_ZN19XFDispatcherDefault5startEv+0x18>)
 80044fe:	4a03      	ldr	r2, [pc, #12]	; (800450c <_ZN19XFDispatcherDefault5startEv+0x1c>)
 8004500:	2122      	movs	r1, #34	; 0x22
 8004502:	4803      	ldr	r0, [pc, #12]	; (8004510 <_ZN19XFDispatcherDefault5startEv+0x20>)
 8004504:	f005 fbea 	bl	8009cdc <__assert_func>
 8004508:	0800b6bc 	.word	0x0800b6bc
 800450c:	0800b6c4 	.word	0x0800b6c4
 8004510:	0800b6f0 	.word	0x0800b6f0

08004514 <_ZN19XFDispatcherDefault15scheduleTimeoutEiiPN9interface10XFReactiveE>:
{
 8004514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004516:	460c      	mov	r4, r1
 8004518:	4615      	mov	r5, r2
 800451a:	461e      	mov	r6, r3
	XFTimeoutManager::getInstance()->scheduleTimeout(timeoutId, interval, pReactive);
 800451c:	f000 f996 	bl	800484c <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8004520:	6803      	ldr	r3, [r0, #0]
 8004522:	695f      	ldr	r7, [r3, #20]
 8004524:	4633      	mov	r3, r6
 8004526:	462a      	mov	r2, r5
 8004528:	4621      	mov	r1, r4
 800452a:	47b8      	blx	r7
}
 800452c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800452e <_ZN19XFDispatcherDefault17unscheduleTimeoutEiPN9interface10XFReactiveE>:
{
 800452e:	b538      	push	{r3, r4, r5, lr}
 8004530:	460c      	mov	r4, r1
 8004532:	4615      	mov	r5, r2
	XFTimeoutManager::getInstance()->unscheduleTimeout(timeoutId, pReactive);
 8004534:	f000 f98a 	bl	800484c <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8004538:	6803      	ldr	r3, [r0, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	462a      	mov	r2, r5
 800453e:	4621      	mov	r1, r4
 8004540:	4798      	blx	r3
}
 8004542:	bd38      	pop	{r3, r4, r5, pc}

08004544 <_ZN19XFDispatcherDefaultC1Ev>:
XFDispatcherDefault::XFDispatcherDefault() :
 8004544:	b538      	push	{r3, r4, r5, lr}
 8004546:	4604      	mov	r4, r0
	_pMutex(nullptr)
 8004548:	4b09      	ldr	r3, [pc, #36]	; (8004570 <_ZN19XFDispatcherDefaultC1Ev+0x2c>)
 800454a:	6003      	str	r3, [r0, #0]
 800454c:	2500      	movs	r5, #0
 800454e:	7105      	strb	r5, [r0, #4]
 8004550:	3008      	adds	r0, #8
 8004552:	f000 fb83 	bl	8004c5c <_ZN19XFEventQueueDefaultC1Ev>
 8004556:	63a5      	str	r5, [r4, #56]	; 0x38
	_pMutex = XFMutex::create();
 8004558:	f000 fcbc 	bl	8004ed4 <_ZN9interface7XFMutex6createEv>
 800455c:	63a0      	str	r0, [r4, #56]	; 0x38
	assert(_pMutex);
 800455e:	b108      	cbz	r0, 8004564 <_ZN19XFDispatcherDefaultC1Ev+0x20>
}
 8004560:	4620      	mov	r0, r4
 8004562:	bd38      	pop	{r3, r4, r5, pc}
	assert(_pMutex);
 8004564:	4b03      	ldr	r3, [pc, #12]	; (8004574 <_ZN19XFDispatcherDefaultC1Ev+0x30>)
 8004566:	4a04      	ldr	r2, [pc, #16]	; (8004578 <_ZN19XFDispatcherDefaultC1Ev+0x34>)
 8004568:	2118      	movs	r1, #24
 800456a:	4804      	ldr	r0, [pc, #16]	; (800457c <_ZN19XFDispatcherDefaultC1Ev+0x38>)
 800456c:	f005 fbb6 	bl	8009cdc <__assert_func>
 8004570:	0800b068 	.word	0x0800b068
 8004574:	0800b6bc 	.word	0x0800b6bc
 8004578:	0800b73c 	.word	0x0800b73c
 800457c:	0800b6f0 	.word	0x0800b6f0

08004580 <_ZN19XFDispatcherDefaultD1Ev>:
XFDispatcherDefault::~XFDispatcherDefault()
 8004580:	b510      	push	{r4, lr}
 8004582:	4604      	mov	r4, r0
 8004584:	4b03      	ldr	r3, [pc, #12]	; (8004594 <_ZN19XFDispatcherDefaultD1Ev+0x14>)
 8004586:	f840 3b08 	str.w	r3, [r0], #8
 800458a:	f000 fc31 	bl	8004df0 <_ZN19XFEventQueueDefaultD1Ev>
}
 800458e:	4620      	mov	r0, r4
 8004590:	bd10      	pop	{r4, pc}
 8004592:	bf00      	nop
 8004594:	0800b068 	.word	0x0800b068

08004598 <_ZN19XFDispatcherDefaultD0Ev>:
XFDispatcherDefault::~XFDispatcherDefault()
 8004598:	b510      	push	{r4, lr}
 800459a:	4604      	mov	r4, r0
}
 800459c:	f7ff fff0 	bl	8004580 <_ZN19XFDispatcherDefaultD1Ev>
 80045a0:	213c      	movs	r1, #60	; 0x3c
 80045a2:	4620      	mov	r0, r4
 80045a4:	f005 fb40 	bl	8009c28 <_ZdlPvj>
 80045a8:	4620      	mov	r0, r4
 80045aa:	bd10      	pop	{r4, pc}

080045ac <_ZN19XFDispatcherDefault9pushEventEP7XFEventb>:
{
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	4604      	mov	r4, r0
 80045b0:	460d      	mov	r5, r1
	_pMutex->lock();
 80045b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80045b4:	6803      	ldr	r3, [r0, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	4798      	blx	r3
		_events.push(pEvent);
 80045ba:	2200      	movs	r2, #0
 80045bc:	4629      	mov	r1, r5
 80045be:	f104 0008 	add.w	r0, r4, #8
 80045c2:	f000 fc2d 	bl	8004e20 <_ZN19XFEventQueueDefault4pushEPK7XFEventb>
	_pMutex->unlock();
 80045c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80045c8:	6803      	ldr	r3, [r0, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	4798      	blx	r3
}
 80045ce:	bd38      	pop	{r3, r4, r5, pc}

080045d0 <_ZN19XFDispatcherDefault7executeEPKv>:
{
 80045d0:	b510      	push	{r4, lr}
 80045d2:	4604      	mov	r4, r0
 80045d4:	e003      	b.n	80045de <_ZN19XFDispatcherDefault7executeEPKv+0xe>
		executeOnce();  // Dispatch next event
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	4620      	mov	r0, r4
 80045dc:	4798      	blx	r3
	while(_bExecuting)
 80045de:	7923      	ldrb	r3, [r4, #4]
 80045e0:	b14b      	cbz	r3, 80045f6 <_ZN19XFDispatcherDefault7executeEPKv+0x26>
		while (_events.empty() && _bExecuting)
 80045e2:	f104 0008 	add.w	r0, r4, #8
 80045e6:	f000 fab9 	bl	8004b5c <_ZNK19XFEventQueueDefault5emptyEv>
 80045ea:	2800      	cmp	r0, #0
 80045ec:	d0f3      	beq.n	80045d6 <_ZN19XFDispatcherDefault7executeEPKv+0x6>
 80045ee:	7923      	ldrb	r3, [r4, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <_ZN19XFDispatcherDefault7executeEPKv+0x6>
 80045f4:	e7f5      	b.n	80045e2 <_ZN19XFDispatcherDefault7executeEPKv+0x12>
}
 80045f6:	2000      	movs	r0, #0
 80045f8:	bd10      	pop	{r4, pc}

080045fa <_ZN19XFDispatcherDefault11executeOnceEv>:
{
 80045fa:	b570      	push	{r4, r5, r6, lr}
 80045fc:	4604      	mov	r4, r0
    if (!_events.empty() and _bExecuting)
 80045fe:	f100 0508 	add.w	r5, r0, #8
 8004602:	4628      	mov	r0, r5
 8004604:	f000 faaa 	bl	8004b5c <_ZNK19XFEventQueueDefault5emptyEv>
 8004608:	bb20      	cbnz	r0, 8004654 <_ZN19XFDispatcherDefault11executeOnceEv+0x5a>
 800460a:	7923      	ldrb	r3, [r4, #4]
 800460c:	b313      	cbz	r3, 8004654 <_ZN19XFDispatcherDefault11executeOnceEv+0x5a>
        _pMutex->lock();
 800460e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004610:	6803      	ldr	r3, [r0, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	4798      	blx	r3
        	pEvent = _events.front(); _events.pop();
 8004616:	4628      	mov	r0, r5
 8004618:	f000 fc20 	bl	8004e5c <_ZN19XFEventQueueDefault5frontEv>
 800461c:	4606      	mov	r6, r0
 800461e:	4628      	mov	r0, r5
 8004620:	f000 fc29 	bl	8004e76 <_ZN19XFEventQueueDefault3popEv>
    	_pMutex->unlock();
 8004624:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004626:	6803      	ldr	r3, [r0, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	4798      	blx	r3
        if (pEvent)
 800462c:	b196      	cbz	r6, 8004654 <_ZN19XFDispatcherDefault11executeOnceEv+0x5a>
            dispatchEvent(pEvent);
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004632:	4631      	mov	r1, r6
 8004634:	4620      	mov	r0, r4
 8004636:	4798      	blx	r3
    inline XFEventType getEventType() const { return eventType_; }
 8004638:	f996 3004 	ldrsb.w	r3, [r6, #4]
            if (pEvent->getEventType() == XFEvent::Terminate)
 800463c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004640:	d00a      	beq.n	8004658 <_ZN19XFDispatcherDefault11executeOnceEv+0x5e>
            if (pEvent->deleteAfterConsume())
 8004642:	6833      	ldr	r3, [r6, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	4630      	mov	r0, r6
 8004648:	4798      	blx	r3
 800464a:	b118      	cbz	r0, 8004654 <_ZN19XFDispatcherDefault11executeOnceEv+0x5a>
                delete pEvent;
 800464c:	6833      	ldr	r3, [r6, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4630      	mov	r0, r6
 8004652:	4798      	blx	r3
}
 8004654:	7920      	ldrb	r0, [r4, #4]
 8004656:	bd70      	pop	{r4, r5, r6, pc}
                _bExecuting = false;
 8004658:	2300      	movs	r3, #0
 800465a:	7123      	strb	r3, [r4, #4]
 800465c:	e7f1      	b.n	8004642 <_ZN19XFDispatcherDefault11executeOnceEv+0x48>

0800465e <__tcf_0>:
}

//static
interface::XFResourceFactory * XFResourceFactoryDefault::getInstance()
{
    static XFResourceFactoryDefault theResourceFactory;
 800465e:	4770      	bx	lr

08004660 <_ZN24XFResourceFactoryDefault16createDispatcherEv>:

	return &mainDispatcher;
}

interface::XFDispatcher * XFResourceFactoryDefault::createDispatcher()
{
 8004660:	b508      	push	{r3, lr}
	// Default implementation cannot create new dispatcher. Return the default dispatcher
	return getDefaultDispatcher();
 8004662:	6803      	ldr	r3, [r0, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4798      	blx	r3
}
 8004668:	bd08      	pop	{r3, pc}

0800466a <_ZN24XFResourceFactoryDefault12createThreadEPN9interface26XFThreadEntryPointProviderEMS1_FvPKvEPKcm>:

interface::XFThread * XFResourceFactoryDefault::createThread(interface::XFThreadEntryPointProvider * pProvider,
												  	  	     interface::XFThread::EntryMethodBody entryMethod,
														     const char * threadName,
														     const uint32_t stackSize /* = 0 */)
{
 800466a:	b082      	sub	sp, #8
 800466c:	a902      	add	r1, sp, #8
 800466e:	e901 000c 	stmdb	r1, {r2, r3}
	// Default implementation cannot create threads (no underlying OS present)
	return nullptr;
}
 8004672:	2000      	movs	r0, #0
 8004674:	b002      	add	sp, #8
 8004676:	4770      	bx	lr

08004678 <_ZN24XFResourceFactoryDefaultD1Ev>:
 * @brief Default implementation of the XF resource factory.
 */
class XFResourceFactoryDefault : public interface::XFResourceFactory
{
public:
	virtual ~XFResourceFactoryDefault() = default;
 8004678:	4770      	bx	lr

0800467a <_ZN24XFResourceFactoryDefaultD0Ev>:
 800467a:	b510      	push	{r4, lr}
 800467c:	4604      	mov	r4, r0
 800467e:	2104      	movs	r1, #4
 8004680:	f005 fad2 	bl	8009c28 <_ZdlPvj>
 8004684:	4620      	mov	r0, r4
 8004686:	bd10      	pop	{r4, pc}

08004688 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv>:
	static XFDispatcherDefault mainDispatcher;
 8004688:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x38>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	f3bf 8f5b 	dmb	ish
 8004690:	f013 0f01 	tst.w	r3, #1
 8004694:	d001      	beq.n	800469a <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x12>
}
 8004696:	480b      	ldr	r0, [pc, #44]	; (80046c4 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x3c>)
 8004698:	4770      	bx	lr
{
 800469a:	b510      	push	{r4, lr}
	static XFDispatcherDefault mainDispatcher;
 800469c:	4808      	ldr	r0, [pc, #32]	; (80046c0 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x38>)
 800469e:	f005 fac5 	bl	8009c2c <__cxa_guard_acquire>
 80046a2:	b908      	cbnz	r0, 80046a8 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x20>
}
 80046a4:	4807      	ldr	r0, [pc, #28]	; (80046c4 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x3c>)
 80046a6:	bd10      	pop	{r4, pc}
	static XFDispatcherDefault mainDispatcher;
 80046a8:	4c05      	ldr	r4, [pc, #20]	; (80046c0 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x38>)
 80046aa:	1d20      	adds	r0, r4, #4
 80046ac:	f7ff ff4a 	bl	8004544 <_ZN19XFDispatcherDefaultC1Ev>
 80046b0:	4620      	mov	r0, r4
 80046b2:	f005 fac7 	bl	8009c44 <__cxa_guard_release>
 80046b6:	4804      	ldr	r0, [pc, #16]	; (80046c8 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x40>)
 80046b8:	f005 fb2e 	bl	8009d18 <atexit>
 80046bc:	e7f2      	b.n	80046a4 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x1c>
 80046be:	bf00      	nop
 80046c0:	20001038 	.word	0x20001038
 80046c4:	2000103c 	.word	0x2000103c
 80046c8:	08004761 	.word	0x08004761

080046cc <_ZN24XFResourceFactoryDefault11createMutexEv>:

interface::XFMutex * XFResourceFactoryDefault::createMutex()
{
	static XFMutexDefault mutex;
 80046cc:	4b0e      	ldr	r3, [pc, #56]	; (8004708 <_ZN24XFResourceFactoryDefault11createMutexEv+0x3c>)
 80046ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046d2:	f3bf 8f5b 	dmb	ish
 80046d6:	f013 0f01 	tst.w	r3, #1
 80046da:	d001      	beq.n	80046e0 <_ZN24XFResourceFactoryDefault11createMutexEv+0x14>

	return &mutex;
}
 80046dc:	480b      	ldr	r0, [pc, #44]	; (800470c <_ZN24XFResourceFactoryDefault11createMutexEv+0x40>)
 80046de:	4770      	bx	lr
{
 80046e0:	b510      	push	{r4, lr}
	static XFMutexDefault mutex;
 80046e2:	480b      	ldr	r0, [pc, #44]	; (8004710 <_ZN24XFResourceFactoryDefault11createMutexEv+0x44>)
 80046e4:	f005 faa2 	bl	8009c2c <__cxa_guard_acquire>
 80046e8:	b908      	cbnz	r0, 80046ee <_ZN24XFResourceFactoryDefault11createMutexEv+0x22>
}
 80046ea:	4808      	ldr	r0, [pc, #32]	; (800470c <_ZN24XFResourceFactoryDefault11createMutexEv+0x40>)
 80046ec:	bd10      	pop	{r4, pc}
	static XFMutexDefault mutex;
 80046ee:	4c06      	ldr	r4, [pc, #24]	; (8004708 <_ZN24XFResourceFactoryDefault11createMutexEv+0x3c>)
 80046f0:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80046f4:	f000 fbe8 	bl	8004ec8 <_ZN14XFMutexDefaultC1Ev>
 80046f8:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80046fc:	f005 faa2 	bl	8009c44 <__cxa_guard_release>
 8004700:	4804      	ldr	r0, [pc, #16]	; (8004714 <_ZN24XFResourceFactoryDefault11createMutexEv+0x48>)
 8004702:	f005 fb09 	bl	8009d18 <atexit>
 8004706:	e7f0      	b.n	80046ea <_ZN24XFResourceFactoryDefault11createMutexEv+0x1e>
 8004708:	20001038 	.word	0x20001038
 800470c:	2000107c 	.word	0x2000107c
 8004710:	20001078 	.word	0x20001078
 8004714:	08004771 	.word	0x08004771

08004718 <_ZN24XFResourceFactoryDefault11getInstanceEv>:
{
 8004718:	b508      	push	{r3, lr}
    static XFResourceFactoryDefault theResourceFactory;
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x30>)
 800471c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004720:	f3bf 8f5b 	dmb	ish
 8004724:	f013 0f01 	tst.w	r3, #1
 8004728:	d001      	beq.n	800472e <_ZN24XFResourceFactoryDefault11getInstanceEv+0x16>
}
 800472a:	4808      	ldr	r0, [pc, #32]	; (800474c <_ZN24XFResourceFactoryDefault11getInstanceEv+0x34>)
 800472c:	bd08      	pop	{r3, pc}
    static XFResourceFactoryDefault theResourceFactory;
 800472e:	4808      	ldr	r0, [pc, #32]	; (8004750 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x38>)
 8004730:	f005 fa7c 	bl	8009c2c <__cxa_guard_acquire>
 8004734:	2800      	cmp	r0, #0
 8004736:	d0f8      	beq.n	800472a <_ZN24XFResourceFactoryDefault11getInstanceEv+0x12>
 8004738:	4805      	ldr	r0, [pc, #20]	; (8004750 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x38>)
 800473a:	f005 fa83 	bl	8009c44 <__cxa_guard_release>
 800473e:	4805      	ldr	r0, [pc, #20]	; (8004754 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x3c>)
 8004740:	f005 faea 	bl	8009d18 <atexit>
 8004744:	e7f1      	b.n	800472a <_ZN24XFResourceFactoryDefault11getInstanceEv+0x12>
 8004746:	bf00      	nop
 8004748:	20001038 	.word	0x20001038
 800474c:	20000038 	.word	0x20000038
 8004750:	20001080 	.word	0x20001080
 8004754:	0800465f 	.word	0x0800465f

08004758 <_ZN9interface17XFResourceFactory11getInstanceEv>:
{
 8004758:	b508      	push	{r3, lr}
	return XFResourceFactoryDefault::getInstance();
 800475a:	f7ff ffdd 	bl	8004718 <_ZN24XFResourceFactoryDefault11getInstanceEv>
}
 800475e:	bd08      	pop	{r3, pc}

08004760 <__tcf_1>:
	static XFDispatcherDefault mainDispatcher;
 8004760:	b508      	push	{r3, lr}
 8004762:	4802      	ldr	r0, [pc, #8]	; (800476c <__tcf_1+0xc>)
 8004764:	f7ff ff0c 	bl	8004580 <_ZN19XFDispatcherDefaultD1Ev>
 8004768:	bd08      	pop	{r3, pc}
 800476a:	bf00      	nop
 800476c:	2000103c 	.word	0x2000103c

08004770 <__tcf_2>:
	static XFMutexDefault mutex;
 8004770:	b508      	push	{r3, lr}
 8004772:	4802      	ldr	r0, [pc, #8]	; (800477c <__tcf_2+0xc>)
 8004774:	f000 fb95 	bl	8004ea2 <_ZN14XFMutexDefaultD1Ev>
 8004778:	bd08      	pop	{r3, pc}
 800477a:	bf00      	nop
 800477c:	2000107c 	.word	0x2000107c

08004780 <_ZN9interface16XFTimeoutManager10initializeEl>:
     * Sets the time interval in milliseconds in which the timeout manager
     * should handle the timeouts.
     */
    virtual void initialize(int32_t tickInterval)
    {
        tickInterval_ = tickInterval;
 8004780:	6041      	str	r1, [r0, #4]
    }
 8004782:	4770      	bx	lr

08004784 <_ZNK9interface16XFTimeoutManager15getTickIntervalEv>:
     * @brief Returns tick interval in milliseconds.
     */
    virtual int32_t getTickInterval() const
    {
        return tickInterval_;
    }
 8004784:	6840      	ldr	r0, [r0, #4]
 8004786:	4770      	bx	lr

08004788 <_ZN23XFTimeoutManagerDefault5startEv>:
XFTimeoutManagerDefault::~XFTimeoutManagerDefault()
{
}

void XFTimeoutManagerDefault::start()
{
 8004788:	b508      	push	{r3, lr}
    // Check tickInterval. Set default value if not set
    if (tickInterval_ == 0)
 800478a:	6843      	ldr	r3, [r0, #4]
 800478c:	b90b      	cbnz	r3, 8004792 <_ZN23XFTimeoutManagerDefault5startEv+0xa>
    {
        tickInterval_ = 10;
 800478e:	230a      	movs	r3, #10
 8004790:	6043      	str	r3, [r0, #4]
    }

    XF_startTimeoutManagerTimer(uint32_t(tickInterval_));
 8004792:	6840      	ldr	r0, [r0, #4]
 8004794:	f000 fba7 	bl	8004ee6 <XF_startTimeoutManagerTimer>
}
 8004798:	bd08      	pop	{r3, pc}

0800479a <_ZN23XFTimeoutManagerDefault15scheduleTimeoutEllPN9interface10XFReactiveE>:

void XFTimeoutManagerDefault::scheduleTimeout(int32_t timeoutId, int32_t interval, interface::XFReactive * pReactive)
{
 800479a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800479e:	4605      	mov	r5, r0
 80047a0:	460e      	mov	r6, r1
 80047a2:	4617      	mov	r7, r2
 80047a4:	4698      	mov	r8, r3
    XFTimeout * pTimeout = new XFTimeout(timeoutId, interval, pReactive);
 80047a6:	2018      	movs	r0, #24
 80047a8:	f005 fa4f 	bl	8009c4a <_Znwj>
 80047ac:	4604      	mov	r4, r0
 80047ae:	4643      	mov	r3, r8
 80047b0:	463a      	mov	r2, r7
 80047b2:	4631      	mov	r1, r6
 80047b4:	f7ff fe66 	bl	8004484 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>

    if (pTimeout)
 80047b8:	b124      	cbz	r4, 80047c4 <_ZN23XFTimeoutManagerDefault15scheduleTimeoutEllPN9interface10XFReactiveE+0x2a>
    {
        addTimeout(pTimeout);
 80047ba:	682b      	ldr	r3, [r5, #0]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	4621      	mov	r1, r4
 80047c0:	4628      	mov	r0, r5
 80047c2:	4798      	blx	r3
    }
}
 80047c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080047c8 <_ZN23XFTimeoutManagerDefaultC1Ev>:
XFTimeoutManagerDefault::XFTimeoutManagerDefault() :
 80047c8:	b510      	push	{r4, lr}
 80047ca:	4604      	mov	r4, r0
     */
    virtual void tick() = 0;

protected:
    XFTimeoutManager() :
        tickInterval_(0)
 80047cc:	2200      	movs	r2, #0
 80047ce:	6042      	str	r2, [r0, #4]
    pMutex_(nullptr)
 80047d0:	4603      	mov	r3, r0
 80047d2:	4909      	ldr	r1, [pc, #36]	; (80047f8 <_ZN23XFTimeoutManagerDefaultC1Ev+0x30>)
 80047d4:	f843 1b08 	str.w	r1, [r3], #8
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
      {
	this->_M_next = this->_M_prev = this;
 80047d8:	60c3      	str	r3, [r0, #12]
 80047da:	6083      	str	r3, [r0, #8]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 80047dc:	6102      	str	r2, [r0, #16]
 80047de:	6142      	str	r2, [r0, #20]
    pMutex_ = XFMutex::create();
 80047e0:	f000 fb78 	bl	8004ed4 <_ZN9interface7XFMutex6createEv>
 80047e4:	6160      	str	r0, [r4, #20]
    assert(pMutex_);
 80047e6:	b108      	cbz	r0, 80047ec <_ZN23XFTimeoutManagerDefaultC1Ev+0x24>
}
 80047e8:	4620      	mov	r0, r4
 80047ea:	bd10      	pop	{r4, pc}
    assert(pMutex_);
 80047ec:	4b03      	ldr	r3, [pc, #12]	; (80047fc <_ZN23XFTimeoutManagerDefaultC1Ev+0x34>)
 80047ee:	4a04      	ldr	r2, [pc, #16]	; (8004800 <_ZN23XFTimeoutManagerDefaultC1Ev+0x38>)
 80047f0:	211d      	movs	r1, #29
 80047f2:	4804      	ldr	r0, [pc, #16]	; (8004804 <_ZN23XFTimeoutManagerDefaultC1Ev+0x3c>)
 80047f4:	f005 fa72 	bl	8009cdc <__assert_func>
 80047f8:	0800b0c0 	.word	0x0800b0c0
 80047fc:	0800b768 	.word	0x0800b768
 8004800:	0800b770 	.word	0x0800b770
 8004804:	0800b7a4 	.word	0x0800b7a4

08004808 <_ZN23XFTimeoutManagerDefault11getInstanceEv>:
    static XFTimeoutManagerDefault timeoutManager;
 8004808:	4b0d      	ldr	r3, [pc, #52]	; (8004840 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x38>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	f3bf 8f5b 	dmb	ish
 8004810:	f013 0f01 	tst.w	r3, #1
 8004814:	d001      	beq.n	800481a <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x12>
}
 8004816:	480b      	ldr	r0, [pc, #44]	; (8004844 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x3c>)
 8004818:	4770      	bx	lr
{
 800481a:	b510      	push	{r4, lr}
    static XFTimeoutManagerDefault timeoutManager;
 800481c:	4808      	ldr	r0, [pc, #32]	; (8004840 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x38>)
 800481e:	f005 fa05 	bl	8009c2c <__cxa_guard_acquire>
 8004822:	b908      	cbnz	r0, 8004828 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x20>
}
 8004824:	4807      	ldr	r0, [pc, #28]	; (8004844 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x3c>)
 8004826:	bd10      	pop	{r4, pc}
    static XFTimeoutManagerDefault timeoutManager;
 8004828:	4c05      	ldr	r4, [pc, #20]	; (8004840 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x38>)
 800482a:	1d20      	adds	r0, r4, #4
 800482c:	f7ff ffcc 	bl	80047c8 <_ZN23XFTimeoutManagerDefaultC1Ev>
 8004830:	4620      	mov	r0, r4
 8004832:	f005 fa07 	bl	8009c44 <__cxa_guard_release>
 8004836:	4804      	ldr	r0, [pc, #16]	; (8004848 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x40>)
 8004838:	f005 fa6e 	bl	8009d18 <atexit>
 800483c:	e7f2      	b.n	8004824 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x1c>
 800483e:	bf00      	nop
 8004840:	20001084 	.word	0x20001084
 8004844:	20001088 	.word	0x20001088
 8004848:	08004aa5 	.word	0x08004aa5

0800484c <_ZN9interface16XFTimeoutManager11getInstanceEv>:
{
 800484c:	b508      	push	{r3, lr}
    return XFTimeoutManagerDefault::getInstance();
 800484e:	f7ff ffdb 	bl	8004808 <_ZN23XFTimeoutManagerDefault11getInstanceEv>
}
 8004852:	bd08      	pop	{r3, pc}

08004854 <_ZN23XFTimeoutManagerDefault13returnTimeoutEP9XFTimeout>:
        timeouts_.push_front(pNewTimeout);
    }
}

void XFTimeoutManagerDefault::returnTimeout(XFTimeout * pTimeout)
{
 8004854:	b508      	push	{r3, lr}
    inline interface::XFReactive * getBehavior() const { return pBehavior_; }
 8004856:	68c8      	ldr	r0, [r1, #12]
    pTimeout->getBehavior()->pushEvent(pTimeout);
 8004858:	6803      	ldr	r3, [r0, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	4798      	blx	r3
}
 8004860:	bd08      	pop	{r3, pc}

08004862 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>:
      }
#endif

  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::
 8004862:	b538      	push	{r3, r4, r5, lr}
 8004864:	460c      	mov	r4, r1
    erase(const_iterator __position) noexcept
#else
    erase(iterator __position)
#endif
    {
      iterator __ret = iterator(__position._M_node->_M_next);
 8004866:	680d      	ldr	r5, [r1, #0]

      void _M_set_size(size_t __n) { _M_impl._M_node._M_size = __n; }

      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }

      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8004868:	6883      	ldr	r3, [r0, #8]
 800486a:	3b01      	subs	r3, #1
 800486c:	6083      	str	r3, [r0, #8]
      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
      {
	this->_M_dec_size(1);
	__position._M_node->_M_unhook();
 800486e:	4608      	mov	r0, r1
 8004870:	f005 fa06 	bl	8009c80 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8004874:	4620      	mov	r0, r4
 8004876:	f005 f9d5 	bl	8009c24 <_ZdlPv>
      _M_erase(__position._M_const_cast());
      return __ret;
    }
 800487a:	4628      	mov	r0, r5
 800487c:	bd38      	pop	{r3, r4, r5, pc}
	...

08004880 <_ZN23XFTimeoutManagerDefault4tickEv>:
{
 8004880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004882:	4604      	mov	r4, r0
    assert(tickInterval_);      // Did you call start()?!
 8004884:	6845      	ldr	r5, [r0, #4]
 8004886:	b955      	cbnz	r5, 800489e <_ZN23XFTimeoutManagerDefault4tickEv+0x1e>
 8004888:	4b23      	ldr	r3, [pc, #140]	; (8004918 <_ZN23XFTimeoutManagerDefault4tickEv+0x98>)
 800488a:	4a24      	ldr	r2, [pc, #144]	; (800491c <_ZN23XFTimeoutManagerDefault4tickEv+0x9c>)
 800488c:	2161      	movs	r1, #97	; 0x61
 800488e:	4824      	ldr	r0, [pc, #144]	; (8004920 <_ZN23XFTimeoutManagerDefault4tickEv+0xa0>)
 8004890:	f005 fa24 	bl	8009cdc <__assert_func>
        pMutex_->unlock();
 8004894:	6960      	ldr	r0, [r4, #20]
 8004896:	6803      	ldr	r3, [r0, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	4798      	blx	r3
            intervalToSubtract = 0;
 800489c:	2500      	movs	r5, #0
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800489e:	4626      	mov	r6, r4
 80048a0:	f856 3f08 	ldr.w	r3, [r6, #8]!
    while (!timeouts_.empty())
 80048a4:	429e      	cmp	r6, r3
 80048a6:	d036      	beq.n	8004916 <_ZN23XFTimeoutManagerDefault4tickEv+0x96>
        pMutex_->lock();
 80048a8:	6960      	ldr	r0, [r4, #20]
 80048aa:	6803      	ldr	r3, [r0, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	4798      	blx	r3
      { return iterator(this->_M_impl._M_node._M_next); }
 80048b0:	68a3      	ldr	r3, [r4, #8]
            XFTimeout * pFirstTimeout = timeouts_.front();
 80048b2:	6899      	ldr	r1, [r3, #8]

    bool deleteAfterConsume() const override;                                                       ///< Tells the dispatcher if the event must be deleted or not.

    inline void setRelTicks(int relTicks) { relTicks_ = relTicks; }                                 ///< Sets remaining ticks.
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
    inline void substractFromRelTicks(int ticksToSubstract) { relTicks_ -= ticksToSubstract; }      ///< Substracts `ticksToSubstract` from remaining ticks.
 80048b4:	694b      	ldr	r3, [r1, #20]
 80048b6:	1b5b      	subs	r3, r3, r5
 80048b8:	614b      	str	r3, [r1, #20]
            if (pFirstTimeout->getRelTicks() <= 0)
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	dc27      	bgt.n	800490e <_ZN23XFTimeoutManagerDefault4tickEv+0x8e>
      size_t _M_get_size() const { return _M_impl._M_node._M_size; }
 80048be:	6922      	ldr	r2, [r4, #16]
                if (timeouts_.size() > 1)
 80048c0:	2a01      	cmp	r2, #1
 80048c2:	d905      	bls.n	80048d0 <_ZN23XFTimeoutManagerDefault4tickEv+0x50>
      { return iterator(this->_M_impl._M_node._M_next); }
 80048c4:	68a2      	ldr	r2, [r4, #8]
	_M_node = _M_node->_M_next;
 80048c6:	6812      	ldr	r2, [r2, #0]
                    (*i)->substractFromRelTicks(pFirstTimeout->getRelTicks());
 80048c8:	6890      	ldr	r0, [r2, #8]
 80048ca:	6942      	ldr	r2, [r0, #20]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	6143      	str	r3, [r0, #20]
                returnTimeout(pFirstTimeout);
 80048d0:	4620      	mov	r0, r4
 80048d2:	f7ff ffbf 	bl	8004854 <_ZN23XFTimeoutManagerDefault13returnTimeoutEP9XFTimeout>
                timeouts_.pop_front();
 80048d6:	f104 0708 	add.w	r7, r4, #8
      { return iterator(this->_M_impl._M_node._M_next); }
 80048da:	68a5      	ldr	r5, [r4, #8]
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	3b01      	subs	r3, #1
 80048e0:	60bb      	str	r3, [r7, #8]
	__position._M_node->_M_unhook();
 80048e2:	4628      	mov	r0, r5
 80048e4:	f005 f9cc 	bl	8009c80 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
 80048e8:	4628      	mov	r0, r5
 80048ea:	f005 f99b 	bl	8009c24 <_ZdlPv>
                for (TimeoutList::iterator it = timeouts_.begin(); it != timeouts_.end(); /*Do not increment here!*/)
 80048ee:	68a0      	ldr	r0, [r4, #8]
      { return __x._M_node != __y._M_node; }
 80048f0:	4605      	mov	r5, r0
 80048f2:	4286      	cmp	r6, r0
 80048f4:	d0ce      	beq.n	8004894 <_ZN23XFTimeoutManagerDefault4tickEv+0x14>
                    if ((*it)->getRelTicks() == 0)
 80048f6:	6881      	ldr	r1, [r0, #8]
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
 80048f8:	694b      	ldr	r3, [r1, #20]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1ca      	bne.n	8004894 <_ZN23XFTimeoutManagerDefault4tickEv+0x14>
                        returnTimeout(*it);			// Return them true
 80048fe:	4620      	mov	r0, r4
 8004900:	f7ff ffa8 	bl	8004854 <_ZN23XFTimeoutManagerDefault13returnTimeoutEP9XFTimeout>
                        it = timeouts_.erase(it);	// Remove timeout and adjust iterator to next element
 8004904:	4629      	mov	r1, r5
 8004906:	4638      	mov	r0, r7
 8004908:	f7ff ffab 	bl	8004862 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
                for (TimeoutList::iterator it = timeouts_.begin(); it != timeouts_.end(); /*Do not increment here!*/)
 800490c:	e7f0      	b.n	80048f0 <_ZN23XFTimeoutManagerDefault4tickEv+0x70>
                pMutex_->unlock();
 800490e:	6960      	ldr	r0, [r4, #20]
 8004910:	6803      	ldr	r3, [r0, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	4798      	blx	r3
}
 8004916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004918:	0800b7f4 	.word	0x0800b7f4
 800491c:	0800b804 	.word	0x0800b804
 8004920:	0800b7a4 	.word	0x0800b7a4

08004924 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE>:
{
 8004924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004928:	b086      	sub	sp, #24
 800492a:	4680      	mov	r8, r0
 800492c:	4613      	mov	r3, r2
    const XFTimeout timeout(timeoutId, 0, pReactive);
 800492e:	2200      	movs	r2, #0
 8004930:	4668      	mov	r0, sp
 8004932:	f7ff fda7 	bl	8004484 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>
    pMutex_->lock();
 8004936:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800493a:	6803      	ldr	r3, [r0, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	4798      	blx	r3
        for (TimeoutList::iterator i = timeouts_.begin();
 8004940:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004944:	e000      	b.n	8004948 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x24>
	_M_node = _M_node->_M_next;
 8004946:	6824      	ldr	r4, [r4, #0]
      { return iterator(&this->_M_impl._M_node); }
 8004948:	f108 0608 	add.w	r6, r8, #8
      { return __x._M_node != __y._M_node; }
 800494c:	4627      	mov	r7, r4
             i != timeouts_.end(); /*Do not increment here!*/)
 800494e:	42a6      	cmp	r6, r4
 8004950:	d01b      	beq.n	800498a <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x66>
            pTimeout = *i;
 8004952:	68a5      	ldr	r5, [r4, #8]
            if (*pTimeout == timeout)
 8004954:	4669      	mov	r1, sp
 8004956:	4628      	mov	r0, r5
 8004958:	f7ff fda2 	bl	80044a0 <_ZNK9XFTimeouteqERKS_>
 800495c:	2800      	cmp	r0, #0
 800495e:	d0f2      	beq.n	8004946 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x22>
	_M_node = _M_node->_M_next;
 8004960:	6823      	ldr	r3, [r4, #0]
                if (++next != timeouts_.end())
 8004962:	429e      	cmp	r6, r3
 8004964:	d004      	beq.n	8004970 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x4c>
                    (*next)->addToRelTicks(pTimeout->getRelTicks());
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	6969      	ldr	r1, [r5, #20]
    inline void addToRelTicks(int ticksToAdd) { relTicks_ += ticksToAdd; }                          ///< Adds `ticksToAdd` to remaining ticks.
 800496a:	6953      	ldr	r3, [r2, #20]
 800496c:	440b      	add	r3, r1
 800496e:	6153      	str	r3, [r2, #20]
                i = timeouts_.erase(i);
 8004970:	4639      	mov	r1, r7
 8004972:	f108 0008 	add.w	r0, r8, #8
 8004976:	f7ff ff74 	bl	8004862 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
 800497a:	4604      	mov	r4, r0
                delete pTimeout;
 800497c:	2d00      	cmp	r5, #0
 800497e:	d0e3      	beq.n	8004948 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x24>
 8004980:	682b      	ldr	r3, [r5, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	4628      	mov	r0, r5
 8004986:	4798      	blx	r3
 8004988:	e7de      	b.n	8004948 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x24>
    pMutex_->unlock();
 800498a:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800498e:	6803      	ldr	r3, [r0, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	4798      	blx	r3
}
 8004994:	b006      	add	sp, #24
 8004996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800499a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>:
    list<_Tp, _Alloc>::
 800499a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499c:	4605      	mov	r5, r0
 800499e:	460e      	mov	r6, r1
 80049a0:	4617      	mov	r7, r2
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80049a2:	200c      	movs	r0, #12
 80049a4:	f005 f951 	bl	8009c4a <_Znwj>
 80049a8:	4604      	mov	r4, r0
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6083      	str	r3, [r0, #8]
      __tmp->_M_hook(__position._M_const_cast()._M_node);
 80049ae:	4631      	mov	r1, r6
 80049b0:	f005 f95f 	bl	8009c72 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 80049b4:	68ab      	ldr	r3, [r5, #8]
 80049b6:	3301      	adds	r3, #1
 80049b8:	60ab      	str	r3, [r5, #8]
    }
 80049ba:	4620      	mov	r0, r4
 80049bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080049be <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout>:
{
 80049be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049c0:	b083      	sub	sp, #12
 80049c2:	4606      	mov	r6, r0
 80049c4:	9101      	str	r1, [sp, #4]
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 80049c6:	4605      	mov	r5, r0
 80049c8:	f855 4f08 	ldr.w	r4, [r5, #8]!
    if (!timeouts_.empty())
 80049cc:	42a5      	cmp	r5, r4
 80049ce:	d045      	beq.n	8004a5c <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x9e>
        pMutex_->lock();
 80049d0:	6940      	ldr	r0, [r0, #20]
 80049d2:	6803      	ldr	r3, [r0, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	4798      	blx	r3
            TimeoutList::iterator i = timeouts_.begin();
 80049d8:	68b3      	ldr	r3, [r6, #8]
      { return __x._M_node != __y._M_node; }
 80049da:	461c      	mov	r4, r3
            while (i != timeouts_.end() &&
 80049dc:	42ab      	cmp	r3, r5
 80049de:	d009      	beq.n	80049f4 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x36>
                   (*i)->getRelTicks() < pNewTimeout->getRelTicks())
 80049e0:	689b      	ldr	r3, [r3, #8]
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
 80049e2:	6959      	ldr	r1, [r3, #20]
 80049e4:	9a01      	ldr	r2, [sp, #4]
 80049e6:	6953      	ldr	r3, [r2, #20]
            while (i != timeouts_.end() &&
 80049e8:	4299      	cmp	r1, r3
 80049ea:	da03      	bge.n	80049f4 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x36>
    inline void substractFromRelTicks(int ticksToSubstract) { relTicks_ -= ticksToSubstract; }      ///< Substracts `ticksToSubstract` from remaining ticks.
 80049ec:	1a5b      	subs	r3, r3, r1
 80049ee:	6153      	str	r3, [r2, #20]
	_M_node = _M_node->_M_next;
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	e7f2      	b.n	80049da <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x1c>
            if (i != timeouts_.end())
 80049f4:	42ac      	cmp	r4, r5
 80049f6:	d02a      	beq.n	8004a4e <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x90>
                if ((*i)->getRelTicks() != pNewTimeout->getRelTicks())
 80049f8:	68a3      	ldr	r3, [r4, #8]
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
 80049fa:	695f      	ldr	r7, [r3, #20]
 80049fc:	9b01      	ldr	r3, [sp, #4]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	42bb      	cmp	r3, r7
 8004a02:	d108      	bne.n	8004a16 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x58>
 8004a04:	6823      	ldr	r3, [r4, #0]
      { return __x._M_node != __y._M_node; }
 8004a06:	4619      	mov	r1, r3
                    while(i != timeouts_.end() && (*i)->getRelTicks() == 0)
 8004a08:	429d      	cmp	r5, r3
 8004a0a:	d011      	beq.n	8004a30 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x72>
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	b973      	cbnz	r3, 8004a30 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x72>
	_M_node = _M_node->_M_next;
 8004a12:	680b      	ldr	r3, [r1, #0]
	return __tmp;
 8004a14:	e7f7      	b.n	8004a06 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x48>
                    timeouts_.insert(i, pNewTimeout);
 8004a16:	aa01      	add	r2, sp, #4
 8004a18:	4621      	mov	r1, r4
 8004a1a:	f106 0008 	add.w	r0, r6, #8
 8004a1e:	f7ff ffbc 	bl	800499a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
                    (*i)->substractFromRelTicks(pNewTimeout->getRelTicks());
 8004a22:	68a2      	ldr	r2, [r4, #8]
 8004a24:	9b01      	ldr	r3, [sp, #4]
 8004a26:	6959      	ldr	r1, [r3, #20]
    inline void substractFromRelTicks(int ticksToSubstract) { relTicks_ -= ticksToSubstract; }      ///< Substracts `ticksToSubstract` from remaining ticks.
 8004a28:	6953      	ldr	r3, [r2, #20]
 8004a2a:	1a5b      	subs	r3, r3, r1
 8004a2c:	6153      	str	r3, [r2, #20]
 8004a2e:	e008      	b.n	8004a42 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x84>
                    timeouts_.insert(i, pNewTimeout);
 8004a30:	aa01      	add	r2, sp, #4
 8004a32:	f106 0008 	add.w	r0, r6, #8
 8004a36:	f7ff ffb0 	bl	800499a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
                    pNewTimeout->substractFromRelTicks(relTicks);
 8004a3a:	9a01      	ldr	r2, [sp, #4]
 8004a3c:	6953      	ldr	r3, [r2, #20]
 8004a3e:	1bdf      	subs	r7, r3, r7
 8004a40:	6157      	str	r7, [r2, #20]
        pMutex_->unlock();
 8004a42:	6970      	ldr	r0, [r6, #20]
 8004a44:	6803      	ldr	r3, [r0, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	4798      	blx	r3
}
 8004a4a:	b003      	add	sp, #12
 8004a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                timeouts_.insert(timeouts_.end(), pNewTimeout);
 8004a4e:	aa01      	add	r2, sp, #4
 8004a50:	4629      	mov	r1, r5
 8004a52:	f106 0008 	add.w	r0, r6, #8
 8004a56:	f7ff ffa0 	bl	800499a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
 8004a5a:	e7f2      	b.n	8004a42 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x84>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004a5c:	200c      	movs	r0, #12
 8004a5e:	f005 f8f4 	bl	8009c4a <_Znwj>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004a62:	9b01      	ldr	r3, [sp, #4]
 8004a64:	6083      	str	r3, [r0, #8]
	 __tmp->_M_hook(__position._M_node);
 8004a66:	4621      	mov	r1, r4
 8004a68:	f005 f903 	bl	8009c72 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8004a6c:	6933      	ldr	r3, [r6, #16]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	6133      	str	r3, [r6, #16]
}
 8004a72:	e7ea      	b.n	8004a4a <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x8c>

08004a74 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 8004a74:	b538      	push	{r3, r4, r5, lr}
 8004a76:	4605      	mov	r5, r0
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8004a78:	6800      	ldr	r0, [r0, #0]
      while (__cur != &_M_impl._M_node)
 8004a7a:	4285      	cmp	r5, r0
 8004a7c:	d004      	beq.n	8004a88 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0x14>
	  __cur = __tmp->_M_next;
 8004a7e:	6804      	ldr	r4, [r0, #0]
	::operator delete(__p);
 8004a80:	f005 f8d0 	bl	8009c24 <_ZdlPv>
 8004a84:	4620      	mov	r0, r4
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 8004a86:	e7f8      	b.n	8004a7a <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0x6>
    }
 8004a88:	bd38      	pop	{r3, r4, r5, pc}
	...

08004a8c <_ZN23XFTimeoutManagerDefaultD1Ev>:
XFTimeoutManagerDefault::~XFTimeoutManagerDefault()
 8004a8c:	b510      	push	{r4, lr}
 8004a8e:	4604      	mov	r4, r0
 8004a90:	4b03      	ldr	r3, [pc, #12]	; (8004aa0 <_ZN23XFTimeoutManagerDefaultD1Ev+0x14>)
 8004a92:	f840 3b08 	str.w	r3, [r0], #8
      { _M_clear(); }
 8004a96:	f7ff ffed 	bl	8004a74 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>
}
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	bd10      	pop	{r4, pc}
 8004a9e:	bf00      	nop
 8004aa0:	0800b0c0 	.word	0x0800b0c0

08004aa4 <__tcf_0>:
    static XFTimeoutManagerDefault timeoutManager;
 8004aa4:	b508      	push	{r3, lr}
 8004aa6:	4802      	ldr	r0, [pc, #8]	; (8004ab0 <__tcf_0+0xc>)
 8004aa8:	f7ff fff0 	bl	8004a8c <_ZN23XFTimeoutManagerDefaultD1Ev>
 8004aac:	bd08      	pop	{r3, pc}
 8004aae:	bf00      	nop
 8004ab0:	20001088 	.word	0x20001088

08004ab4 <_ZN23XFTimeoutManagerDefaultD0Ev>:
XFTimeoutManagerDefault::~XFTimeoutManagerDefault()
 8004ab4:	b510      	push	{r4, lr}
 8004ab6:	4604      	mov	r4, r0
}
 8004ab8:	f7ff ffe8 	bl	8004a8c <_ZN23XFTimeoutManagerDefaultD1Ev>
 8004abc:	2118      	movs	r1, #24
 8004abe:	4620      	mov	r0, r4
 8004ac0:	f005 f8b2 	bl	8009c28 <_ZdlPvj>
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	bd10      	pop	{r4, pc}

08004ac8 <_ZN2XF10initializeEiiPPc>:
    XF::execOnce();
}

void XF::initialize(int timeInterval /* = 10 */, int argc /* = 0 */, char * argv[] /* = nullptr */)
{
    if (!isInitialized_)
 8004ac8:	4b07      	ldr	r3, [pc, #28]	; (8004ae8 <_ZN2XF10initializeEiiPPc+0x20>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	b103      	cbz	r3, 8004ad0 <_ZN2XF10initializeEiiPPc+0x8>
 8004ace:	4770      	bx	lr
{
 8004ad0:	b510      	push	{r4, lr}
 8004ad2:	4604      	mov	r4, r0
    {
        // Create and initialize TimeoutManager
        XFTimeoutManager::getInstance()->initialize(timeInterval);
 8004ad4:	f7ff feba 	bl	800484c <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8004ad8:	6803      	ldr	r3, [r0, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	4621      	mov	r1, r4
 8004ade:	4798      	blx	r3

        isInitialized_ = true;
 8004ae0:	4b01      	ldr	r3, [pc, #4]	; (8004ae8 <_ZN2XF10initializeEiiPPc+0x20>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	701a      	strb	r2, [r3, #0]
    }
}
 8004ae6:	bd10      	pop	{r4, pc}
 8004ae8:	200010a0 	.word	0x200010a0

08004aec <XF_initialize>:
{
 8004aec:	b508      	push	{r3, lr}
    XF::initialize(timeInterval);
 8004aee:	2200      	movs	r2, #0
 8004af0:	4611      	mov	r1, r2
 8004af2:	f7ff ffe9 	bl	8004ac8 <_ZN2XF10initializeEiiPPc>
}
 8004af6:	bd08      	pop	{r3, pc}

08004af8 <_ZN2XF4execEv>:

int XF::exec()
{
 8004af8:	b508      	push	{r3, lr}
	// Start timeout manager
	XFTimeoutManager::getInstance()->start();
 8004afa:	f7ff fea7 	bl	800484c <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8004afe:	6803      	ldr	r3, [r0, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	4798      	blx	r3

	// Start default dispatcher
	XFResourceFactory::getInstance()->getDefaultDispatcher()->start();
 8004b04:	f7ff fe28 	bl	8004758 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8004b08:	6803      	ldr	r3, [r0, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4798      	blx	r3
 8004b0e:	6803      	ldr	r3, [r0, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	4798      	blx	r3

	isRunning_ = true;     // From here the XF is running
 8004b14:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <_ZN2XF4execEv+0x4c>)
 8004b16:	2201      	movs	r2, #1
 8004b18:	705a      	strb	r2, [r3, #1]

	// In case default dispatcher does not have a thread executing it,
	// call it with this thread
	if (!XFResourceFactory::getInstance()->getDefaultDispatcher()->isActive())
 8004b1a:	f7ff fe1d 	bl	8004758 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8004b1e:	6803      	ldr	r3, [r0, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4798      	blx	r3
 8004b24:	6803      	ldr	r3, [r0, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	4798      	blx	r3
 8004b2a:	b108      	cbz	r0, 8004b30 <_ZN2XF4execEv+0x38>
	{
		XFResourceFactory::getInstance()->getDefaultDispatcher()->execute();
	}
    return 0;
}
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	bd08      	pop	{r3, pc}
		XFResourceFactory::getInstance()->getDefaultDispatcher()->execute();
 8004b30:	f7ff fe12 	bl	8004758 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8004b34:	6803      	ldr	r3, [r0, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4798      	blx	r3
 8004b3a:	6803      	ldr	r3, [r0, #0]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	2100      	movs	r1, #0
 8004b40:	4798      	blx	r3
 8004b42:	e7f3      	b.n	8004b2c <_ZN2XF4execEv+0x34>
 8004b44:	200010a0 	.word	0x200010a0

08004b48 <XF_exec>:
{
 8004b48:	b508      	push	{r3, lr}
    XF::exec();
 8004b4a:	f7ff ffd5 	bl	8004af8 <_ZN2XF4execEv>
}
 8004b4e:	bd08      	pop	{r3, pc}

08004b50 <_ZN2XF9isRunningEv>:
}

bool XF::isRunning()
{
    return isRunning_;
}
 8004b50:	4b01      	ldr	r3, [pc, #4]	; (8004b58 <_ZN2XF9isRunningEv+0x8>)
 8004b52:	7858      	ldrb	r0, [r3, #1]
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	200010a0 	.word	0x200010a0

08004b5c <_ZNK19XFEventQueueDefault5emptyEv>:
  // are in scope (for additional details, see libstdc++/3628)
  template<typename _Tp, typename _Ref, typename _Ptr>
    inline bool
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    { return __x._M_cur == __y._M_cur; }
 8004b5c:	6a03      	ldr	r3, [r0, #32]
 8004b5e:	6900      	ldr	r0, [r0, #16]
}

bool XFEventQueueDefault::empty() const
{
    return _queue.empty();
}
 8004b60:	4298      	cmp	r0, r3
 8004b62:	bf14      	ite	ne
 8004b64:	2000      	movne	r0, #0
 8004b66:	2001      	moveq	r0, #1
 8004b68:	4770      	bx	lr

08004b6a <_ZN19XFEventQueueDefault4pendEv>:
bool XFEventQueueDefault::pend()
{
    // Method cannot be used in an IDF! Waiting within
    // this method would block the whole XF
    return false;
}
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	4770      	bx	lr

08004b6e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_>:
	}
    }

  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
 8004b6e:	b538      	push	{r3, r4, r5, lr}
 8004b70:	460c      	mov	r4, r1
 8004b72:	4615      	mov	r5, r2
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8004b74:	42ac      	cmp	r4, r5
 8004b76:	d204      	bcs.n	8004b82 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x14>
 8004b78:	f854 0b04 	ldr.w	r0, [r4], #4
 8004b7c:	f005 f852 	bl	8009c24 <_ZdlPv>
 8004b80:	e7f8      	b.n	8004b74 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x6>
	_M_deallocate_node(*__n);
    }
 8004b82:	bd38      	pop	{r3, r4, r5, pc}

08004b84 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8004b84:	b510      	push	{r4, lr}
 8004b86:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
 8004b88:	6803      	ldr	r3, [r0, #0]
 8004b8a:	b13b      	cbz	r3, 8004b9c <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev+0x18>
			   this->_M_impl._M_finish._M_node + 1);
 8004b8c:	6a42      	ldr	r2, [r0, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8004b8e:	3204      	adds	r2, #4
 8004b90:	6941      	ldr	r1, [r0, #20]
 8004b92:	f7ff ffec 	bl	8004b6e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_>
 8004b96:	6820      	ldr	r0, [r4, #0]
 8004b98:	f005 f844 	bl	8009c24 <_ZdlPv>
    }
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	bd10      	pop	{r4, pc}

08004ba0 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8004ba0:	b510      	push	{r4, lr}
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	68c0      	ldr	r0, [r0, #12]
 8004ba6:	f005 f83d 	bl	8009c24 <_ZdlPv>
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8004baa:	6963      	ldr	r3, [r4, #20]
 8004bac:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
 8004bae:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004bb4:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8004bb8:	6122      	str	r2, [r4, #16]
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8004bba:	60a3      	str	r3, [r4, #8]
    }
 8004bbc:	bd10      	pop	{r4, pc}

08004bbe <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_>:
    _Deque_base<_Tp, _Alloc>::
 8004bbe:	b538      	push	{r3, r4, r5, lr}
 8004bc0:	460c      	mov	r4, r1
 8004bc2:	4615      	mov	r5, r2
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004bc4:	42ac      	cmp	r4, r5
 8004bc6:	d206      	bcs.n	8004bd6 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_+0x18>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004bc8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004bcc:	f005 f83d 	bl	8009c4a <_Znwj>
	    *__cur = this->_M_allocate_node();
 8004bd0:	f844 0b04 	str.w	r0, [r4], #4
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004bd4:	e7f6      	b.n	8004bc4 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_+0x6>
    }
 8004bd6:	bd38      	pop	{r3, r4, r5, pc}

08004bd8 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8004bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	4604      	mov	r4, r0
 8004be0:	460d      	mov	r5, r1
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 8004be2:	09cb      	lsrs	r3, r1, #7
 8004be4:	1c5e      	adds	r6, r3, #1
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8004be6:	2208      	movs	r2, #8
 8004be8:	9200      	str	r2, [sp, #0]
					   size_t(__num_nodes + 2));
 8004bea:	3303      	adds	r3, #3
 8004bec:	9301      	str	r3, [sp, #4]
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d82f      	bhi.n	8004c52 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj+0x7a>
	return __b;
      return __a;
 8004bf2:	466b      	mov	r3, sp
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8004bf4:	6818      	ldr	r0, [r3, #0]
 8004bf6:	6060      	str	r0, [r4, #4]
	if (__n > this->max_size())
 8004bf8:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8004bfc:	d22b      	bcs.n	8004c56 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj+0x7e>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004bfe:	0080      	lsls	r0, r0, #2
 8004c00:	f005 f823 	bl	8009c4a <_Znwj>
 8004c04:	4680      	mov	r8, r0
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8004c06:	6020      	str	r0, [r4, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8004c08:	6867      	ldr	r7, [r4, #4]
 8004c0a:	1bbf      	subs	r7, r7, r6
 8004c0c:	087f      	lsrs	r7, r7, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
 8004c0e:	eb00 0987 	add.w	r9, r0, r7, lsl #2
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8004c12:	eb09 0686 	add.w	r6, r9, r6, lsl #2
	{ _M_create_nodes(__nstart, __nfinish); }
 8004c16:	4632      	mov	r2, r6
 8004c18:	4649      	mov	r1, r9
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	f7ff ffcf 	bl	8004bbe <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_>
	_M_node = __new_node;
 8004c20:	f8c4 9014 	str.w	r9, [r4, #20]
	_M_first = *__new_node;
 8004c24:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
 8004c28:	60e2      	str	r2, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004c2a:	f502 7300 	add.w	r3, r2, #512	; 0x200
 8004c2e:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8004c30:	1f33      	subs	r3, r6, #4
	_M_node = __new_node;
 8004c32:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
 8004c34:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8004c38:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004c3a:	f503 7100 	add.w	r1, r3, #512	; 0x200
 8004c3e:	6221      	str	r1, [r4, #32]
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8004c40:	60a2      	str	r2, [r4, #8]
					% __deque_buf_size(sizeof(_Tp)));
 8004c42:	f005 057f 	and.w	r5, r5, #127	; 0x7f
					+ __num_elements
 8004c46:	eb03 0385 	add.w	r3, r3, r5, lsl #2
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004c4a:	61a3      	str	r3, [r4, #24]
    }
 8004c4c:	b003      	add	sp, #12
 8004c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return __b;
 8004c52:	ab01      	add	r3, sp, #4
 8004c54:	e7ce      	b.n	8004bf4 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj+0x1c>
	  std::__throw_bad_alloc();
 8004c56:	f005 f818 	bl	8009c8a <_ZSt17__throw_bad_allocv>
	...

08004c5c <_ZN19XFEventQueueDefaultC1Ev>:
XFEventQueueDefault::XFEventQueueDefault()
 8004c5c:	b510      	push	{r4, lr}
 8004c5e:	4604      	mov	r4, r0
 8004c60:	4b0a      	ldr	r3, [pc, #40]	; (8004c8c <_ZN19XFEventQueueDefaultC1Ev+0x30>)
 8004c62:	f840 3b04 	str.w	r3, [r0], #4
 8004c66:	f000 f92f 	bl	8004ec8 <_ZN14XFMutexDefaultC1Ev>
	  _M_start(), _M_finish()
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	60a1      	str	r1, [r4, #8]
 8004c6e:	60e1      	str	r1, [r4, #12]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8004c70:	6121      	str	r1, [r4, #16]
 8004c72:	6161      	str	r1, [r4, #20]
 8004c74:	61a1      	str	r1, [r4, #24]
 8004c76:	61e1      	str	r1, [r4, #28]
 8004c78:	6221      	str	r1, [r4, #32]
 8004c7a:	6261      	str	r1, [r4, #36]	; 0x24
 8004c7c:	62a1      	str	r1, [r4, #40]	; 0x28
 8004c7e:	62e1      	str	r1, [r4, #44]	; 0x2c
      { _M_initialize_map(0); }
 8004c80:	f104 0008 	add.w	r0, r4, #8
 8004c84:	f7ff ffa8 	bl	8004bd8 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj>
}
 8004c88:	4620      	mov	r0, r4
 8004c8a:	bd10      	pop	{r4, pc}
 8004c8c:	0800b0ec 	.word	0x0800b0ec

08004c90 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8004c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	4606      	mov	r6, r0
 8004c98:	9101      	str	r1, [sp, #4]
 8004c9a:	4690      	mov	r8, r2
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8004c9c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004c9e:	6940      	ldr	r0, [r0, #20]
 8004ca0:	1a17      	subs	r7, r2, r0
 8004ca2:	10bd      	asrs	r5, r7, #2
 8004ca4:	3501      	adds	r5, #1
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8004ca6:	440d      	add	r5, r1

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8004ca8:	6873      	ldr	r3, [r6, #4]
 8004caa:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
 8004cae:	d922      	bls.n	8004cf6 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x66>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8004cb0:	f8d6 c000 	ldr.w	ip, [r6]
					 - __new_num_nodes) / 2
 8004cb4:	1b5c      	subs	r4, r3, r5
 8004cb6:	0864      	lsrs	r4, r4, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8004cb8:	00a4      	lsls	r4, r4, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8004cba:	f1b8 0f00 	cmp.w	r8, #0
 8004cbe:	d001      	beq.n	8004cc4 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x34>
 8004cc0:	0089      	lsls	r1, r1, #2
 8004cc2:	e000      	b.n	8004cc6 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x36>
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	440c      	add	r4, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8004cc8:	4464      	add	r4, ip
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8004cca:	42a0      	cmp	r0, r4
 8004ccc:	d908      	bls.n	8004ce0 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x50>
	    std::copy(this->_M_impl._M_start._M_node,
 8004cce:	1d13      	adds	r3, r2, #4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 8004cd0:	1a1a      	subs	r2, r3, r0
	  if (_Num)
 8004cd2:	4298      	cmp	r0, r3
 8004cd4:	d039      	beq.n	8004d4a <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xba>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004cd6:	4601      	mov	r1, r0
 8004cd8:	4620      	mov	r0, r4
 8004cda:	f005 f869 	bl	8009db0 <memmove>
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004cde:	e034      	b.n	8004d4a <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xba>
		      this->_M_impl._M_finish._M_node + 1,
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8004ce0:	1d13      	adds	r3, r2, #4
 8004ce2:	1d3a      	adds	r2, r7, #4
 8004ce4:	18a5      	adds	r5, r4, r2
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 8004ce6:	1a1a      	subs	r2, r3, r0
	  if (_Num)
 8004ce8:	4298      	cmp	r0, r3
 8004cea:	d02e      	beq.n	8004d4a <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xba>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8004cec:	4601      	mov	r1, r0
 8004cee:	1aa8      	subs	r0, r5, r2
 8004cf0:	f005 f85e 	bl	8009db0 <memmove>
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004cf4:	e029      	b.n	8004d4a <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xba>
			       __new_nstart + __old_num_nodes);
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
 8004cf6:	1d32      	adds	r2, r6, #4
      if (__a < __b)
 8004cf8:	4299      	cmp	r1, r3
 8004cfa:	d836      	bhi.n	8004d6a <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xda>
 8004cfc:	6812      	ldr	r2, [r2, #0]
 8004cfe:	4413      	add	r3, r2
	  size_type __new_map_size = this->_M_impl._M_map_size
 8004d00:	f103 0902 	add.w	r9, r3, #2
	if (__n > this->max_size())
 8004d04:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
 8004d08:	d231      	bcs.n	8004d6e <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xde>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004d0a:	ea4f 0089 	mov.w	r0, r9, lsl #2
 8004d0e:	f004 ff9c 	bl	8009c4a <_Znwj>
 8004d12:	4682      	mov	sl, r0
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8004d14:	eba9 0405 	sub.w	r4, r9, r5
 8004d18:	0864      	lsrs	r4, r4, #1
 8004d1a:	00a4      	lsls	r4, r4, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8004d1c:	f1b8 0f00 	cmp.w	r8, #0
 8004d20:	d027      	beq.n	8004d72 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xe2>
 8004d22:	9d01      	ldr	r5, [sp, #4]
 8004d24:	00ad      	lsls	r5, r5, #2
 8004d26:	442c      	add	r4, r5
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8004d28:	4454      	add	r4, sl
	  std::copy(this->_M_impl._M_start._M_node,
 8004d2a:	6971      	ldr	r1, [r6, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8004d2c:	6a73      	ldr	r3, [r6, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8004d2e:	3304      	adds	r3, #4
	  const ptrdiff_t _Num = __last - __first;
 8004d30:	1a5a      	subs	r2, r3, r1
	  if (_Num)
 8004d32:	4299      	cmp	r1, r3
 8004d34:	d002      	beq.n	8004d3c <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xac>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004d36:	4620      	mov	r0, r4
 8004d38:	f005 f83a 	bl	8009db0 <memmove>
	::operator delete(__p);
 8004d3c:	6830      	ldr	r0, [r6, #0]
 8004d3e:	f004 ff71 	bl	8009c24 <_ZdlPv>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);

	  this->_M_impl._M_map = __new_map;
 8004d42:	f8c6 a000 	str.w	sl, [r6]
	  this->_M_impl._M_map_size = __new_map_size;
 8004d46:	f8c6 9004 	str.w	r9, [r6, #4]
	_M_node = __new_node;
 8004d4a:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004d50:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004d54:	6133      	str	r3, [r6, #16]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8004d56:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
 8004d58:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
 8004d5a:	59e3      	ldr	r3, [r4, r7]
 8004d5c:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004d5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004d62:	6233      	str	r3, [r6, #32]
    }
 8004d64:	b002      	add	sp, #8
 8004d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return __b;
 8004d6a:	aa01      	add	r2, sp, #4
 8004d6c:	e7c6      	b.n	8004cfc <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x6c>
	  std::__throw_bad_alloc();
 8004d6e:	f004 ff8c 	bl	8009c8a <_ZSt17__throw_bad_allocv>
	                 + (__add_at_front ? __nodes_to_add : 0);
 8004d72:	2500      	movs	r5, #0
 8004d74:	e7d7      	b.n	8004d26 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x96>
	...

08004d78 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8004d78:	b570      	push	{r4, r5, r6, lr}
 8004d7a:	460d      	mov	r5, r1
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8004d7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004d7e:	6942      	ldr	r2, [r0, #20]
 8004d80:	1a9b      	subs	r3, r3, r2
 8004d82:	109b      	asrs	r3, r3, #2
 8004d84:	1e5a      	subs	r2, r3, #1
 8004d86:	6983      	ldr	r3, [r0, #24]
 8004d88:	69c1      	ldr	r1, [r0, #28]
 8004d8a:	1a5b      	subs	r3, r3, r1
 8004d8c:	109b      	asrs	r3, r3, #2
 8004d8e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
 8004d92:	6902      	ldr	r2, [r0, #16]
 8004d94:	6881      	ldr	r1, [r0, #8]
 8004d96:	1a52      	subs	r2, r2, r1
 8004d98:	eb03 03a2 	add.w	r3, r3, r2, asr #2
	if (size() == max_size())
 8004d9c:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d01b      	beq.n	8004ddc <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x64>
 8004da4:	4604      	mov	r4, r0
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8004da6:	6843      	ldr	r3, [r0, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8004da8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004daa:	6801      	ldr	r1, [r0, #0]
 8004dac:	1a52      	subs	r2, r2, r1
 8004dae:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d915      	bls.n	8004de2 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x6a>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8004db6:	6a66      	ldr	r6, [r4, #36]	; 0x24
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004db8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004dbc:	f004 ff45 	bl	8009c4a <_Znwj>
 8004dc0:	6070      	str	r0, [r6, #4]
	    _Alloc_traits::construct(this->_M_impl,
 8004dc2:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004dc4:	682a      	ldr	r2, [r5, #0]
 8004dc6:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8004dc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dca:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
 8004dcc:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004dd2:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8004dd6:	6222      	str	r2, [r4, #32]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8004dd8:	61a3      	str	r3, [r4, #24]
      }
 8004dda:	bd70      	pop	{r4, r5, r6, pc}
	  __throw_length_error(
 8004ddc:	4803      	ldr	r0, [pc, #12]	; (8004dec <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x74>)
 8004dde:	f004 ff57 	bl	8009c90 <_ZSt20__throw_length_errorPKc>
	  _M_reallocate_map(__nodes_to_add, false);
 8004de2:	2200      	movs	r2, #0
 8004de4:	2101      	movs	r1, #1
 8004de6:	f7ff ff53 	bl	8004c90 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb>
 8004dea:	e7e4      	b.n	8004db6 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x3e>
 8004dec:	0800b834 	.word	0x0800b834

08004df0 <_ZN19XFEventQueueDefaultD1Ev>:
XFEventQueueDefault::~XFEventQueueDefault()
 8004df0:	b510      	push	{r4, lr}
 8004df2:	4604      	mov	r4, r0
 8004df4:	4b04      	ldr	r3, [pc, #16]	; (8004e08 <_ZN19XFEventQueueDefaultD1Ev+0x18>)
 8004df6:	f840 3b08 	str.w	r3, [r0], #8
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8004dfa:	f7ff fec3 	bl	8004b84 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>
 8004dfe:	1d20      	adds	r0, r4, #4
 8004e00:	f000 f84f 	bl	8004ea2 <_ZN14XFMutexDefaultD1Ev>
}
 8004e04:	4620      	mov	r0, r4
 8004e06:	bd10      	pop	{r4, pc}
 8004e08:	0800b0ec 	.word	0x0800b0ec

08004e0c <_ZN19XFEventQueueDefaultD0Ev>:
XFEventQueueDefault::~XFEventQueueDefault()
 8004e0c:	b510      	push	{r4, lr}
 8004e0e:	4604      	mov	r4, r0
}
 8004e10:	f7ff ffee 	bl	8004df0 <_ZN19XFEventQueueDefaultD1Ev>
 8004e14:	2130      	movs	r1, #48	; 0x30
 8004e16:	4620      	mov	r0, r4
 8004e18:	f004 ff06 	bl	8009c28 <_ZdlPvj>
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	bd10      	pop	{r4, pc}

08004e20 <_ZN19XFEventQueueDefault4pushEPK7XFEventb>:
{
 8004e20:	b530      	push	{r4, r5, lr}
 8004e22:	b083      	sub	sp, #12
 8004e24:	4604      	mov	r4, r0
 8004e26:	9101      	str	r1, [sp, #4]
    _mutex.lock();
 8004e28:	1d05      	adds	r5, r0, #4
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	f000 f843 	bl	8004eb6 <_ZN14XFMutexDefault4lockEv>
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
      { c.push_back(__x); }
 8004e30:	f104 0008 	add.w	r0, r4, #8
	if (this->_M_impl._M_finish._M_cur
 8004e34:	6982      	ldr	r2, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8004e36:	6a03      	ldr	r3, [r0, #32]
 8004e38:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d00a      	beq.n	8004e54 <_ZN19XFEventQueueDefault4pushEPK7XFEventb+0x34>
 8004e3e:	9b01      	ldr	r3, [sp, #4]
 8004e40:	6013      	str	r3, [r2, #0]
	    ++this->_M_impl._M_finish._M_cur;
 8004e42:	6983      	ldr	r3, [r0, #24]
 8004e44:	3304      	adds	r3, #4
 8004e46:	6183      	str	r3, [r0, #24]
    _mutex.unlock();
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f000 f838 	bl	8004ebe <_ZN14XFMutexDefault6unlockEv>
}
 8004e4e:	2001      	movs	r0, #1
 8004e50:	b003      	add	sp, #12
 8004e52:	bd30      	pop	{r4, r5, pc}
	  _M_push_back_aux(__x);
 8004e54:	a901      	add	r1, sp, #4
 8004e56:	f7ff ff8f 	bl	8004d78 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>
 8004e5a:	e7f5      	b.n	8004e48 <_ZN19XFEventQueueDefault4pushEPK7XFEventb+0x28>

08004e5c <_ZN19XFEventQueueDefault5frontEv>:
{
 8004e5c:	b538      	push	{r3, r4, r5, lr}
 8004e5e:	4604      	mov	r4, r0
    _mutex.lock();
 8004e60:	1d05      	adds	r5, r0, #4
 8004e62:	4628      	mov	r0, r5
 8004e64:	f000 f827 	bl	8004eb6 <_ZN14XFMutexDefault4lockEv>
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8004e68:	6923      	ldr	r3, [r4, #16]
        event =  _queue.front();
 8004e6a:	681c      	ldr	r4, [r3, #0]
    _mutex.unlock();
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	f000 f826 	bl	8004ebe <_ZN14XFMutexDefault6unlockEv>
}
 8004e72:	4620      	mov	r0, r4
 8004e74:	bd38      	pop	{r3, r4, r5, pc}

08004e76 <_ZN19XFEventQueueDefault3popEv>:
{
 8004e76:	b538      	push	{r3, r4, r5, lr}
 8004e78:	4604      	mov	r4, r0
    _mutex.lock();
 8004e7a:	1d05      	adds	r5, r0, #4
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	f000 f81a 	bl	8004eb6 <_ZN14XFMutexDefault4lockEv>
	if (this->_M_impl._M_start._M_cur
 8004e82:	6923      	ldr	r3, [r4, #16]
	    != this->_M_impl._M_start._M_last - 1)
 8004e84:	69a2      	ldr	r2, [r4, #24]
 8004e86:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d005      	beq.n	8004e98 <_ZN19XFEventQueueDefault3popEv+0x22>
	    ++this->_M_impl._M_start._M_cur;
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	6123      	str	r3, [r4, #16]
    _mutex.unlock();
 8004e90:	4628      	mov	r0, r5
 8004e92:	f000 f814 	bl	8004ebe <_ZN14XFMutexDefault6unlockEv>
}
 8004e96:	bd38      	pop	{r3, r4, r5, pc}
 8004e98:	f104 0008 	add.w	r0, r4, #8
	  _M_pop_front_aux();
 8004e9c:	f7ff fe80 	bl	8004ba0 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_pop_front_auxEv>
 8004ea0:	e7f6      	b.n	8004e90 <_ZN19XFEventQueueDefault3popEv+0x1a>

08004ea2 <_ZN14XFMutexDefaultD1Ev>:
{
}

XFMutexDefault::~XFMutexDefault()
{
}
 8004ea2:	4770      	bx	lr

08004ea4 <_ZN14XFMutexDefault7tryLockEl>:
}

bool XFMutexDefault::tryLock(int32_t timeout /* = 0 */)
{
	return true;	// Always allow
}
 8004ea4:	2001      	movs	r0, #1
 8004ea6:	4770      	bx	lr

08004ea8 <_ZN14XFMutexDefaultD0Ev>:
XFMutexDefault::~XFMutexDefault()
 8004ea8:	b510      	push	{r4, lr}
 8004eaa:	4604      	mov	r4, r0
}
 8004eac:	2104      	movs	r1, #4
 8004eae:	f004 febb 	bl	8009c28 <_ZdlPvj>
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	bd10      	pop	{r4, pc}

08004eb6 <_ZN14XFMutexDefault4lockEv>:
{
 8004eb6:	b508      	push	{r3, lr}
	enterCritical();
 8004eb8:	f7ff fa5c 	bl	8004374 <_Z13enterCriticalv>
}
 8004ebc:	bd08      	pop	{r3, pc}

08004ebe <_ZN14XFMutexDefault6unlockEv>:
{
 8004ebe:	b508      	push	{r3, lr}
	exitCritical();
 8004ec0:	f7ff fa68 	bl	8004394 <_Z12exitCriticalv>
}
 8004ec4:	bd08      	pop	{r3, pc}
	...

08004ec8 <_ZN14XFMutexDefaultC1Ev>:
XFMutexDefault::XFMutexDefault()
 8004ec8:	4b01      	ldr	r3, [pc, #4]	; (8004ed0 <_ZN14XFMutexDefaultC1Ev+0x8>)
 8004eca:	6003      	str	r3, [r0, #0]
}
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	0800b110 	.word	0x0800b110

08004ed4 <_ZN9interface7XFMutex6createEv>:
{
 8004ed4:	b510      	push	{r4, lr}
    return new XFMutexDefault;
 8004ed6:	2004      	movs	r0, #4
 8004ed8:	f004 feb7 	bl	8009c4a <_Znwj>
 8004edc:	4604      	mov	r4, r0
 8004ede:	f7ff fff3 	bl	8004ec8 <_ZN14XFMutexDefaultC1Ev>
}
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	bd10      	pop	{r4, pc}

08004ee6 <XF_startTimeoutManagerTimer>:
{
    (void)tickInterval;

    // SysTick gets already started by the STM32CubeMX HAL.
    // So nothing to do here.
}
 8004ee6:	4770      	bx	lr

08004ee8 <XF_tick>:
 * SysTick_Handler() function is already implemented in the STM32CubeMX generated
 * code (see Src/stm32fxxx_it.c file). Therefore, we must provide here a function
 * which can be explicitly called in SysTick_Handler() to tick the XF.
 */
void XF_tick()
{
 8004ee8:	b508      	push	{r3, lr}
	bInISR = true;								// Tell critical section we are in an ISR
 8004eea:	4b08      	ldr	r3, [pc, #32]	; (8004f0c <XF_tick+0x24>)
 8004eec:	2201      	movs	r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
	if (XF::isRunning())                        // Call tick only if XF is running
 8004ef0:	f7ff fe2e 	bl	8004b50 <_ZN2XF9isRunningEv>
 8004ef4:	b918      	cbnz	r0, 8004efe <XF_tick+0x16>
	{
	    XFTimeoutManager::getInstance()->tick();    // Call framework hook tick function
	}
	bInISR = false;
 8004ef6:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <XF_tick+0x24>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]
}
 8004efc:	bd08      	pop	{r3, pc}
	    XFTimeoutManager::getInstance()->tick();    // Call framework hook tick function
 8004efe:	f7ff fca5 	bl	800484c <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8004f02:	6803      	ldr	r3, [r0, #0]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	4798      	blx	r3
 8004f08:	e7f5      	b.n	8004ef6 <XF_tick+0xe>
 8004f0a:	bf00      	nop
 8004f0c:	20001020 	.word	0x20001020

08004f10 <XF_tickIntervalInMilliseconds>:

/**
 * C function wrapping getTickInterval() method of XFTimeoutManager.
 */
int32_t XF_tickIntervalInMilliseconds()
{
 8004f10:	b508      	push	{r3, lr}
    return XFTimeoutManager::getInstance()->getTickInterval();
 8004f12:	f7ff fc9b 	bl	800484c <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8004f16:	6803      	ldr	r3, [r0, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	4798      	blx	r3
}
 8004f1c:	bd08      	pop	{r3, pc}

08004f1e <XF_isRunning>:

bool XF_isRunning()
{
 8004f1e:	b508      	push	{r3, lr}
    return XF::isRunning();
 8004f20:	f7ff fe16 	bl	8004b50 <_ZN2XF9isRunningEv>
}
 8004f24:	bd08      	pop	{r3, pc}

08004f26 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8004f26:	6803      	ldr	r3, [r0, #0]
 8004f28:	b513      	push	{r0, r1, r4, lr}
 8004f2a:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8004f2e:	2300      	movs	r3, #0
 8004f30:	e9cd 3300 	strd	r3, r3, [sp]
 8004f34:	466b      	mov	r3, sp
 8004f36:	47a0      	blx	r4
 8004f38:	b002      	add	sp, #8
 8004f3a:	bd10      	pop	{r4, pc}

08004f3c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8004f42:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8004f46:	4770      	bx	lr

08004f48 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8004f48:	2301      	movs	r3, #1
 8004f4a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8004f4e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8004f52:	4770      	bx	lr

08004f54 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8004f54:	6843      	ldr	r3, [r0, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	725a      	strb	r2, [r3, #9]
 8004f5a:	6840      	ldr	r0, [r0, #4]
 8004f5c:	6803      	ldr	r3, [r0, #0]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	4718      	bx	r3

08004f62 <_ZN8touchgfx3HAL8flushDMAEv>:
 8004f62:	6840      	ldr	r0, [r0, #4]
 8004f64:	6803      	ldr	r3, [r0, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	4718      	bx	r3
	...

08004f6c <_ZN8touchgfx3HAL10beginFrameEv>:
 8004f6c:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	b123      	cbz	r3, 8004f7c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8004f72:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8004f76:	f080 0001 	eor.w	r0, r0, #1
 8004f7a:	4770      	bx	lr
 8004f7c:	2001      	movs	r0, #1
 8004f7e:	4770      	bx	lr
 8004f80:	200010ae 	.word	0x200010ae

08004f84 <_ZN8touchgfx3HAL8endFrameEv>:
 8004f84:	b510      	push	{r4, lr}
 8004f86:	4604      	mov	r4, r0
 8004f88:	6840      	ldr	r0, [r0, #4]
 8004f8a:	6803      	ldr	r3, [r0, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	4798      	blx	r3
 8004f90:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8004f94:	b113      	cbz	r3, 8004f9c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8004f96:	2301      	movs	r3, #1
 8004f98:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8004f9c:	bd10      	pop	{r4, pc}
	...

08004fa0 <_ZN8touchgfx3HAL4tickEv>:
 8004fa0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004fa2:	6803      	ldr	r3, [r0, #0]
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	4d5c      	ldr	r5, [pc, #368]	; (8005118 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8004fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fac:	4798      	blx	r3
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	f000 8097 	beq.w	80050e2 <_ZN8touchgfx3HAL4tickEv+0x142>
 8004fb4:	2001      	movs	r0, #1
 8004fb6:	2600      	movs	r6, #0
 8004fb8:	f7fe fca6 	bl	8003908 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8004fbc:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8004fc0:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8004fc4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8004fc8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8004fcc:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8004fd0:	b133      	cbz	r3, 8004fe0 <_ZN8touchgfx3HAL4tickEv+0x40>
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004fda:	4798      	blx	r3
 8004fdc:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8004fe0:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8004fe4:	2601      	movs	r6, #1
 8004fe6:	6862      	ldr	r2, [r4, #4]
 8004fe8:	f083 0301 	eor.w	r3, r3, #1
 8004fec:	702e      	strb	r6, [r5, #0]
 8004fee:	7253      	strb	r3, [r2, #9]
 8004ff0:	f001 fd86 	bl	8006b00 <_ZN8touchgfx11Application11getInstanceEv>
 8004ff4:	6803      	ldr	r3, [r0, #0]
 8004ff6:	4631      	mov	r1, r6
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffa:	4798      	blx	r3
 8004ffc:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8005000:	b90b      	cbnz	r3, 8005006 <_ZN8touchgfx3HAL4tickEv+0x66>
 8005002:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8005006:	f001 fd7b 	bl	8006b00 <_ZN8touchgfx11Application11getInstanceEv>
 800500a:	6803      	ldr	r3, [r0, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	4798      	blx	r3
 8005010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005012:	6803      	ldr	r3, [r0, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	4798      	blx	r3
 8005018:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800501c:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8005020:	3b01      	subs	r3, #1
 8005022:	b2db      	uxtb	r3, r3
 8005024:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8005028:	b10a      	cbz	r2, 800502e <_ZN8touchgfx3HAL4tickEv+0x8e>
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1eb      	bne.n	8005006 <_ZN8touchgfx3HAL4tickEv+0x66>
 800502e:	4a3b      	ldr	r2, [pc, #236]	; (800511c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8005030:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8005034:	7813      	ldrb	r3, [r2, #0]
 8005036:	3301      	adds	r3, #1
 8005038:	b25b      	sxtb	r3, r3
 800503a:	4299      	cmp	r1, r3
 800503c:	7013      	strb	r3, [r2, #0]
 800503e:	dc10      	bgt.n	8005062 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8005040:	2300      	movs	r3, #0
 8005042:	68e0      	ldr	r0, [r4, #12]
 8005044:	a902      	add	r1, sp, #8
 8005046:	7013      	strb	r3, [r2, #0]
 8005048:	aa03      	add	r2, sp, #12
 800504a:	6803      	ldr	r3, [r0, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	4798      	blx	r3
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	2800      	cmp	r0, #0
 8005054:	d051      	beq.n	80050fa <_ZN8touchgfx3HAL4tickEv+0x15a>
 8005056:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800505a:	4620      	mov	r0, r4
 800505c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8005060:	4798      	blx	r3
 8005062:	2300      	movs	r3, #0
 8005064:	6960      	ldr	r0, [r4, #20]
 8005066:	f88d 3007 	strb.w	r3, [sp, #7]
 800506a:	b158      	cbz	r0, 8005084 <_ZN8touchgfx3HAL4tickEv+0xe4>
 800506c:	6803      	ldr	r3, [r0, #0]
 800506e:	f10d 0107 	add.w	r1, sp, #7
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	4798      	blx	r3
 8005076:	b128      	cbz	r0, 8005084 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8005078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800507a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800507e:	6803      	ldr	r3, [r0, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	4798      	blx	r3
 8005084:	f104 001c 	add.w	r0, r4, #28
 8005088:	f004 fd18 	bl	8009abc <_ZN8touchgfx8Gestures4tickEv>
 800508c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8005090:	b30b      	cbz	r3, 80050d6 <_ZN8touchgfx3HAL4tickEv+0x136>
 8005092:	6920      	ldr	r0, [r4, #16]
 8005094:	6803      	ldr	r3, [r0, #0]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	4798      	blx	r3
 800509a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800509c:	4606      	mov	r6, r0
 800509e:	b903      	cbnz	r3, 80050a2 <_ZN8touchgfx3HAL4tickEv+0x102>
 80050a0:	6720      	str	r0, [r4, #112]	; 0x70
 80050a2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80050a4:	4a1e      	ldr	r2, [pc, #120]	; (8005120 <_ZN8touchgfx3HAL4tickEv+0x180>)
 80050a6:	1af3      	subs	r3, r6, r3
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d914      	bls.n	80050d6 <_ZN8touchgfx3HAL4tickEv+0x136>
 80050ac:	6920      	ldr	r0, [r4, #16]
 80050ae:	6803      	ldr	r3, [r0, #0]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	4798      	blx	r3
 80050b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80050b6:	2264      	movs	r2, #100	; 0x64
 80050b8:	1af3      	subs	r3, r6, r3
 80050ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80050be:	fbb0 f0f3 	udiv	r0, r0, r3
 80050c2:	2800      	cmp	r0, #0
 80050c4:	dc1e      	bgt.n	8005104 <_ZN8touchgfx3HAL4tickEv+0x164>
 80050c6:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80050ca:	6920      	ldr	r0, [r4, #16]
 80050cc:	2100      	movs	r1, #0
 80050ce:	6803      	ldr	r3, [r0, #0]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	4798      	blx	r3
 80050d4:	6726      	str	r6, [r4, #112]	; 0x70
 80050d6:	f001 fd13 	bl	8006b00 <_ZN8touchgfx11Application11getInstanceEv>
 80050da:	6803      	ldr	r3, [r0, #0]
 80050dc:	2100      	movs	r1, #0
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	4798      	blx	r3
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	4620      	mov	r0, r4
 80050e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050ea:	4798      	blx	r3
 80050ec:	2001      	movs	r0, #1
 80050ee:	f7fe fc0c 	bl	800390a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80050f2:	2300      	movs	r3, #0
 80050f4:	702b      	strb	r3, [r5, #0]
 80050f6:	b004      	add	sp, #16
 80050f8:	bd70      	pop	{r4, r5, r6, pc}
 80050fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80050fe:	4620      	mov	r0, r4
 8005100:	4798      	blx	r3
 8005102:	e7ae      	b.n	8005062 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8005104:	2863      	cmp	r0, #99	; 0x63
 8005106:	bfcb      	itete	gt
 8005108:	2300      	movgt	r3, #0
 800510a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800510e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8005112:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8005116:	e7d8      	b.n	80050ca <_ZN8touchgfx3HAL4tickEv+0x12a>
 8005118:	200010b4 	.word	0x200010b4
 800511c:	200010b5 	.word	0x200010b5
 8005120:	05f5e100 	.word	0x05f5e100

08005124 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8005124:	f7fe bd0a 	b.w	8003b3c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08005128 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8005128:	6581      	str	r1, [r0, #88]	; 0x58
 800512a:	301c      	adds	r0, #28
 800512c:	f004 bcc4 	b.w	8009ab8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08005130 <_ZN8touchgfx3HAL5touchEll>:
 8005130:	b530      	push	{r4, r5, lr}
 8005132:	b087      	sub	sp, #28
 8005134:	4604      	mov	r4, r0
 8005136:	a804      	add	r0, sp, #16
 8005138:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800513c:	f001 fc28 	bl	8006990 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8005140:	9b04      	ldr	r3, [sp, #16]
 8005142:	a906      	add	r1, sp, #24
 8005144:	a803      	add	r0, sp, #12
 8005146:	f8ad 300c 	strh.w	r3, [sp, #12]
 800514a:	9b05      	ldr	r3, [sp, #20]
 800514c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8005150:	f001 fc5c 	bl	8006a0c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8005154:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8005158:	f104 001c 	add.w	r0, r4, #28
 800515c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8005160:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8005164:	b189      	cbz	r1, 800518a <_ZN8touchgfx3HAL5touchEll+0x5a>
 8005166:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	4613      	mov	r3, r2
 800516e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005172:	462a      	mov	r2, r5
 8005174:	f004 fcb0 	bl	8009ad8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8005178:	b128      	cbz	r0, 8005186 <_ZN8touchgfx3HAL5touchEll+0x56>
 800517a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800517e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005180:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8005184:	6623      	str	r3, [r4, #96]	; 0x60
 8005186:	b007      	add	sp, #28
 8005188:	bd30      	pop	{r4, r5, pc}
 800518a:	f004 fce9 	bl	8009b60 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800518e:	2301      	movs	r3, #1
 8005190:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8005194:	e7f1      	b.n	800517a <_ZN8touchgfx3HAL5touchEll+0x4a>

08005196 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8005196:	b570      	push	{r4, r5, r6, lr}
 8005198:	2b00      	cmp	r3, #0
 800519a:	d050      	beq.n	800523e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800519c:	ea81 0002 	eor.w	r0, r1, r2
 80051a0:	07c6      	lsls	r6, r0, #31
 80051a2:	d508      	bpl.n	80051b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80051a4:	3a01      	subs	r2, #1
 80051a6:	18cc      	adds	r4, r1, r3
 80051a8:	42a1      	cmp	r1, r4
 80051aa:	d048      	beq.n	800523e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80051ac:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80051b0:	f801 0b01 	strb.w	r0, [r1], #1
 80051b4:	e7f8      	b.n	80051a8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80051b6:	07d5      	lsls	r5, r2, #31
 80051b8:	bf42      	ittt	mi
 80051ba:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80051be:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80051c2:	f801 0b01 	strbmi.w	r0, [r1], #1
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d915      	bls.n	80051f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80051ca:	ea82 0001 	eor.w	r0, r2, r1
 80051ce:	0784      	lsls	r4, r0, #30
 80051d0:	d02d      	beq.n	800522e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 80051d2:	1e94      	subs	r4, r2, #2
 80051d4:	4608      	mov	r0, r1
 80051d6:	18ce      	adds	r6, r1, r3
 80051d8:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 80051dc:	f820 5b02 	strh.w	r5, [r0], #2
 80051e0:	1a35      	subs	r5, r6, r0
 80051e2:	2d01      	cmp	r5, #1
 80051e4:	d8f8      	bhi.n	80051d8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 80051e6:	1e98      	subs	r0, r3, #2
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	f020 0001 	bic.w	r0, r0, #1
 80051f0:	3002      	adds	r0, #2
 80051f2:	4401      	add	r1, r0
 80051f4:	4402      	add	r2, r0
 80051f6:	1f14      	subs	r4, r2, #4
 80051f8:	4608      	mov	r0, r1
 80051fa:	18ce      	adds	r6, r1, r3
 80051fc:	1a35      	subs	r5, r6, r0
 80051fe:	2d03      	cmp	r5, #3
 8005200:	d810      	bhi.n	8005224 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8005202:	089c      	lsrs	r4, r3, #2
 8005204:	00a0      	lsls	r0, r4, #2
 8005206:	4401      	add	r1, r0
 8005208:	3801      	subs	r0, #1
 800520a:	4402      	add	r2, r0
 800520c:	f06f 0003 	mvn.w	r0, #3
 8005210:	fb00 3404 	mla	r4, r0, r4, r3
 8005214:	440c      	add	r4, r1
 8005216:	42a1      	cmp	r1, r4
 8005218:	d011      	beq.n	800523e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800521a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800521e:	f801 3b01 	strb.w	r3, [r1], #1
 8005222:	e7f8      	b.n	8005216 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8005224:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8005228:	f840 5b04 	str.w	r5, [r0], #4
 800522c:	e7e6      	b.n	80051fc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 800522e:	0790      	lsls	r0, r2, #30
 8005230:	d0e1      	beq.n	80051f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8005232:	f832 0b02 	ldrh.w	r0, [r2], #2
 8005236:	3b02      	subs	r3, #2
 8005238:	f821 0b02 	strh.w	r0, [r1], #2
 800523c:	e7db      	b.n	80051f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800523e:	2001      	movs	r0, #1
 8005240:	bd70      	pop	{r4, r5, r6, pc}

08005242 <_ZN8touchgfx3HAL7noTouchEv>:
 8005242:	b510      	push	{r4, lr}
 8005244:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8005248:	4604      	mov	r4, r0
 800524a:	b153      	cbz	r3, 8005262 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800524c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8005250:	2101      	movs	r1, #1
 8005252:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8005256:	301c      	adds	r0, #28
 8005258:	f004 fc82 	bl	8009b60 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800525c:	2300      	movs	r3, #0
 800525e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8005262:	bd10      	pop	{r4, pc}

08005264 <_ZN8touchgfx4RectaNERKS0_>:
 8005264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005268:	f9b1 7000 	ldrsh.w	r7, [r1]
 800526c:	888c      	ldrh	r4, [r1, #4]
 800526e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8005272:	443c      	add	r4, r7
 8005274:	b2a4      	uxth	r4, r4
 8005276:	fa0f f884 	sxth.w	r8, r4
 800527a:	45c1      	cmp	r9, r8
 800527c:	da2f      	bge.n	80052de <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800527e:	8882      	ldrh	r2, [r0, #4]
 8005280:	444a      	add	r2, r9
 8005282:	b292      	uxth	r2, r2
 8005284:	fa0f fe82 	sxth.w	lr, r2
 8005288:	4577      	cmp	r7, lr
 800528a:	da28      	bge.n	80052de <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800528c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8005290:	88cb      	ldrh	r3, [r1, #6]
 8005292:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8005296:	442b      	add	r3, r5
 8005298:	b21b      	sxth	r3, r3
 800529a:	429e      	cmp	r6, r3
 800529c:	da1f      	bge.n	80052de <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800529e:	88c3      	ldrh	r3, [r0, #6]
 80052a0:	4433      	add	r3, r6
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	fa0f fc83 	sxth.w	ip, r3
 80052a8:	4565      	cmp	r5, ip
 80052aa:	da18      	bge.n	80052de <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80052ac:	454f      	cmp	r7, r9
 80052ae:	bfb8      	it	lt
 80052b0:	464f      	movlt	r7, r9
 80052b2:	42b5      	cmp	r5, r6
 80052b4:	bfb8      	it	lt
 80052b6:	4635      	movlt	r5, r6
 80052b8:	45f0      	cmp	r8, lr
 80052ba:	bfd8      	it	le
 80052bc:	4622      	movle	r2, r4
 80052be:	1bd2      	subs	r2, r2, r7
 80052c0:	8082      	strh	r2, [r0, #4]
 80052c2:	884a      	ldrh	r2, [r1, #2]
 80052c4:	88c9      	ldrh	r1, [r1, #6]
 80052c6:	8007      	strh	r7, [r0, #0]
 80052c8:	440a      	add	r2, r1
 80052ca:	8045      	strh	r5, [r0, #2]
 80052cc:	b292      	uxth	r2, r2
 80052ce:	b211      	sxth	r1, r2
 80052d0:	458c      	cmp	ip, r1
 80052d2:	bfa8      	it	ge
 80052d4:	4613      	movge	r3, r2
 80052d6:	1b5b      	subs	r3, r3, r5
 80052d8:	80c3      	strh	r3, [r0, #6]
 80052da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052de:	2300      	movs	r3, #0
 80052e0:	8003      	strh	r3, [r0, #0]
 80052e2:	8043      	strh	r3, [r0, #2]
 80052e4:	8083      	strh	r3, [r0, #4]
 80052e6:	80c3      	strh	r3, [r0, #6]
 80052e8:	e7f7      	b.n	80052da <_ZN8touchgfx4RectaNERKS0_+0x76>

080052ea <_ZN8touchgfx8Drawable5setXYEss>:
 80052ea:	b570      	push	{r4, r5, r6, lr}
 80052ec:	6803      	ldr	r3, [r0, #0]
 80052ee:	4604      	mov	r4, r0
 80052f0:	4615      	mov	r5, r2
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	4798      	blx	r3
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	4629      	mov	r1, r5
 80052fa:	4620      	mov	r0, r4
 80052fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005302:	4718      	bx	r3

08005304 <_ZN8touchgfx3HAL3lcdEv>:
 8005304:	4b04      	ldr	r3, [pc, #16]	; (8005318 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800530c:	b10a      	cbz	r2, 8005312 <_ZN8touchgfx3HAL3lcdEv+0xe>
 800530e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005310:	b900      	cbnz	r0, 8005314 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8005312:	6898      	ldr	r0, [r3, #8]
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	200010b0 	.word	0x200010b0

0800531c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800531c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005320:	4604      	mov	r4, r0
 8005322:	6980      	ldr	r0, [r0, #24]
 8005324:	b085      	sub	sp, #20
 8005326:	460f      	mov	r7, r1
 8005328:	4690      	mov	r8, r2
 800532a:	4699      	mov	r9, r3
 800532c:	b930      	cbnz	r0, 800533c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800532e:	4b1c      	ldr	r3, [pc, #112]	; (80053a0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8005330:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8005334:	4a1b      	ldr	r2, [pc, #108]	; (80053a4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8005336:	481c      	ldr	r0, [pc, #112]	; (80053a8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8005338:	f004 fcd0 	bl	8009cdc <__assert_func>
 800533c:	ad04      	add	r5, sp, #16
 800533e:	2600      	movs	r6, #0
 8005340:	f845 6d04 	str.w	r6, [r5, #-4]!
 8005344:	6806      	ldr	r6, [r0, #0]
 8005346:	9501      	str	r5, [sp, #4]
 8005348:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800534c:	9500      	str	r5, [sp, #0]
 800534e:	6835      	ldr	r5, [r6, #0]
 8005350:	47a8      	blx	r5
 8005352:	4d16      	ldr	r5, [pc, #88]	; (80053ac <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8005354:	4606      	mov	r6, r0
 8005356:	f8a5 9000 	strh.w	r9, [r5]
 800535a:	f7ff ffd3 	bl	8005304 <_ZN8touchgfx3HAL3lcdEv>
 800535e:	6803      	ldr	r3, [r0, #0]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	4798      	blx	r3
 8005364:	2801      	cmp	r0, #1
 8005366:	d012      	beq.n	800538e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8005368:	d306      	bcc.n	8005378 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 800536a:	280d      	cmp	r0, #13
 800536c:	d80b      	bhi.n	8005386 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800536e:	4b10      	ldr	r3, [pc, #64]	; (80053b0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8005370:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8005374:	4a0b      	ldr	r2, [pc, #44]	; (80053a4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8005376:	e7de      	b.n	8005336 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8005378:	882b      	ldrh	r3, [r5, #0]
 800537a:	fb08 7203 	mla	r2, r8, r3, r7
 800537e:	9b03      	ldr	r3, [sp, #12]
 8005380:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8005384:	63e3      	str	r3, [r4, #60]	; 0x3c
 8005386:	4630      	mov	r0, r6
 8005388:	b005      	add	sp, #20
 800538a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800538e:	882a      	ldrh	r2, [r5, #0]
 8005390:	9b03      	ldr	r3, [sp, #12]
 8005392:	fb08 7202 	mla	r2, r8, r2, r7
 8005396:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800539a:	1a9a      	subs	r2, r3, r2
 800539c:	63e2      	str	r2, [r4, #60]	; 0x3c
 800539e:	e7f2      	b.n	8005386 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80053a0:	0800b8d2 	.word	0x0800b8d2
 80053a4:	0800bb2c 	.word	0x0800bb2c
 80053a8:	0800b917 	.word	0x0800b917
 80053ac:	200010aa 	.word	0x200010aa
 80053b0:	0800b93d 	.word	0x0800b93d

080053b4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 80053b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053b8:	4698      	mov	r8, r3
 80053ba:	6803      	ldr	r3, [r0, #0]
 80053bc:	b087      	sub	sp, #28
 80053be:	460e      	mov	r6, r1
 80053c0:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 80053c2:	4617      	mov	r7, r2
 80053c4:	4b0d      	ldr	r3, [pc, #52]	; (80053fc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 80053c6:	4604      	mov	r4, r0
 80053c8:	f8b3 9000 	ldrh.w	r9, [r3]
 80053cc:	f7ff ff9a 	bl	8005304 <_ZN8touchgfx3HAL3lcdEv>
 80053d0:	6803      	ldr	r3, [r0, #0]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	4798      	blx	r3
 80053d6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80053da:	463a      	mov	r2, r7
 80053dc:	4631      	mov	r1, r6
 80053de:	9302      	str	r3, [sp, #8]
 80053e0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80053e4:	9301      	str	r3, [sp, #4]
 80053e6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80053ea:	e9cd 9003 	strd	r9, r0, [sp, #12]
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	4620      	mov	r0, r4
 80053f2:	4643      	mov	r3, r8
 80053f4:	47a8      	blx	r5
 80053f6:	b007      	add	sp, #28
 80053f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053fc:	200010aa 	.word	0x200010aa

08005400 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8005400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005404:	4604      	mov	r4, r0
 8005406:	b08b      	sub	sp, #44	; 0x2c
 8005408:	4610      	mov	r0, r2
 800540a:	460d      	mov	r5, r1
 800540c:	4691      	mov	r9, r2
 800540e:	461e      	mov	r6, r3
 8005410:	f002 fc78 	bl	8007d04 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8005414:	2800      	cmp	r0, #0
 8005416:	f000 80a0 	beq.w	800555a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800541a:	6823      	ldr	r3, [r4, #0]
 800541c:	4620      	mov	r0, r4
 800541e:	f8df b170 	ldr.w	fp, [pc, #368]	; 8005590 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>
 8005422:	af0a      	add	r7, sp, #40	; 0x28
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	4798      	blx	r3
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	4620      	mov	r0, r4
 800542c:	f8df a164 	ldr.w	sl, [pc, #356]	; 8005594 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	4798      	blx	r3
 8005434:	f8bb 3000 	ldrh.w	r3, [fp]
 8005438:	f827 9d0c 	strh.w	r9, [r7, #-12]!
 800543c:	4638      	mov	r0, r7
 800543e:	9301      	str	r3, [sp, #4]
 8005440:	f8ba 3000 	ldrh.w	r3, [sl]
 8005444:	9302      	str	r3, [sp, #8]
 8005446:	4b4f      	ldr	r3, [pc, #316]	; (8005584 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 8005448:	881a      	ldrh	r2, [r3, #0]
 800544a:	4698      	mov	r8, r3
 800544c:	9203      	str	r2, [sp, #12]
 800544e:	4a4e      	ldr	r2, [pc, #312]	; (8005588 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8005450:	8812      	ldrh	r2, [r2, #0]
 8005452:	9204      	str	r2, [sp, #16]
 8005454:	4a4d      	ldr	r2, [pc, #308]	; (800558c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x18c>)
 8005456:	7812      	ldrb	r2, [r2, #0]
 8005458:	2a00      	cmp	r2, #0
 800545a:	f040 8081 	bne.w	8005560 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x160>
 800545e:	f002 fc5d 	bl	8007d1c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8005462:	f8ab 0000 	strh.w	r0, [fp]
 8005466:	4638      	mov	r0, r7
 8005468:	f002 fc92 	bl	8007d90 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800546c:	f8aa 0000 	strh.w	r0, [sl]
 8005470:	4638      	mov	r0, r7
 8005472:	f002 fc53 	bl	8007d1c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8005476:	f8a8 0000 	strh.w	r0, [r8]
 800547a:	4638      	mov	r0, r7
 800547c:	f002 fc88 	bl	8007d90 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8005480:	4b41      	ldr	r3, [pc, #260]	; (8005588 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8005482:	8018      	strh	r0, [r3, #0]
 8005484:	4648      	mov	r0, r9
 8005486:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800548a:	f002 fc3b 	bl	8007d04 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800548e:	2200      	movs	r2, #0
 8005490:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8005494:	4611      	mov	r1, r2
 8005496:	4628      	mov	r0, r5
 8005498:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800549c:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80054a0:	f7ff ff23 	bl	80052ea <_ZN8touchgfx8Drawable5setXYEss>
 80054a4:	2301      	movs	r3, #1
 80054a6:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80054aa:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80054ae:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	dd5c      	ble.n	8005570 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 80054b6:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	dd58      	ble.n	8005570 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 80054be:	462a      	mov	r2, r5
 80054c0:	ab08      	add	r3, sp, #32
 80054c2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80054c6:	6851      	ldr	r1, [r2, #4]
 80054c8:	c303      	stmia	r3!, {r0, r1}
 80054ca:	4631      	mov	r1, r6
 80054cc:	a808      	add	r0, sp, #32
 80054ce:	f7ff fec9 	bl	8005264 <_ZN8touchgfx4RectaNERKS0_>
 80054d2:	a807      	add	r0, sp, #28
 80054d4:	f002 fdb4 	bl	8008040 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80054d8:	4606      	mov	r6, r0
 80054da:	f7ff ff13 	bl	8005304 <_ZN8touchgfx3HAL3lcdEv>
 80054de:	6803      	ldr	r3, [r0, #0]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	4798      	blx	r3
 80054e4:	4286      	cmp	r6, r0
 80054e6:	d04a      	beq.n	800557e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x17e>
 80054e8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80054ea:	b150      	cbz	r0, 8005502 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 80054ec:	a807      	add	r0, sp, #28
 80054ee:	f002 fda7 	bl	8008040 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80054f2:	4606      	mov	r6, r0
 80054f4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80054f6:	6803      	ldr	r3, [r0, #0]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	4798      	blx	r3
 80054fc:	1a33      	subs	r3, r6, r0
 80054fe:	4258      	negs	r0, r3
 8005500:	4158      	adcs	r0, r3
 8005502:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8005506:	2600      	movs	r6, #0
 8005508:	696b      	ldr	r3, [r5, #20]
 800550a:	a908      	add	r1, sp, #32
 800550c:	682a      	ldr	r2, [r5, #0]
 800550e:	4628      	mov	r0, r5
 8005510:	9305      	str	r3, [sp, #20]
 8005512:	616e      	str	r6, [r5, #20]
 8005514:	6892      	ldr	r2, [r2, #8]
 8005516:	4790      	blx	r2
 8005518:	9b05      	ldr	r3, [sp, #20]
 800551a:	4652      	mov	r2, sl
 800551c:	4649      	mov	r1, r9
 800551e:	616b      	str	r3, [r5, #20]
 8005520:	4628      	mov	r0, r5
 8005522:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8005526:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800552a:	f7ff fede 	bl	80052ea <_ZN8touchgfx8Drawable5setXYEss>
 800552e:	9a01      	ldr	r2, [sp, #4]
 8005530:	4b17      	ldr	r3, [pc, #92]	; (8005590 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>)
 8005532:	4620      	mov	r0, r4
 8005534:	801a      	strh	r2, [r3, #0]
 8005536:	9a02      	ldr	r2, [sp, #8]
 8005538:	4b16      	ldr	r3, [pc, #88]	; (8005594 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>)
 800553a:	801a      	strh	r2, [r3, #0]
 800553c:	9a03      	ldr	r2, [sp, #12]
 800553e:	4b11      	ldr	r3, [pc, #68]	; (8005584 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 8005540:	801a      	strh	r2, [r3, #0]
 8005542:	4b11      	ldr	r3, [pc, #68]	; (8005588 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8005544:	9a04      	ldr	r2, [sp, #16]
 8005546:	801a      	strh	r2, [r3, #0]
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	4798      	blx	r3
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	4620      	mov	r0, r4
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	4798      	blx	r3
 800555a:	b00b      	add	sp, #44	; 0x2c
 800555c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005560:	f002 fc16 	bl	8007d90 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8005564:	f8ab 0000 	strh.w	r0, [fp]
 8005568:	4638      	mov	r0, r7
 800556a:	f002 fbd7 	bl	8007d1c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800556e:	e77d      	b.n	800546c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x6c>
 8005570:	462a      	mov	r2, r5
 8005572:	ab08      	add	r3, sp, #32
 8005574:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8005578:	6851      	ldr	r1, [r2, #4]
 800557a:	c303      	stmia	r3!, {r0, r1}
 800557c:	e7a9      	b.n	80054d2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xd2>
 800557e:	2000      	movs	r0, #0
 8005580:	e7bf      	b.n	8005502 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 8005582:	bf00      	nop
 8005584:	200010a4 	.word	0x200010a4
 8005588:	200010a6 	.word	0x200010a6
 800558c:	200010a8 	.word	0x200010a8
 8005590:	200010aa 	.word	0x200010aa
 8005594:	200010ac 	.word	0x200010ac

08005598 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8005598:	4b07      	ldr	r3, [pc, #28]	; (80055b8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800559a:	b510      	push	{r4, lr}
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	4604      	mov	r4, r0
 80055a0:	b13b      	cbz	r3, 80055b2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80055a2:	6803      	ldr	r3, [r0, #0]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a6:	4798      	blx	r3
 80055a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80055aa:	4283      	cmp	r3, r0
 80055ac:	d101      	bne.n	80055b2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80055ae:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80055b0:	bd10      	pop	{r4, pc}
 80055b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80055b4:	e7fc      	b.n	80055b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80055b6:	bf00      	nop
 80055b8:	200010ae 	.word	0x200010ae

080055bc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 80055bc:	b508      	push	{r3, lr}
 80055be:	290d      	cmp	r1, #13
 80055c0:	d817      	bhi.n	80055f2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 80055c2:	e8df f001 	tbb	[pc, r1]
 80055c6:	090b      	.short	0x090b
 80055c8:	0d0d0d07 	.word	0x0d0d0d07
 80055cc:	1414140d 	.word	0x1414140d
 80055d0:	0d0d1414 	.word	0x0d0d1414
 80055d4:	2020      	movs	r0, #32
 80055d6:	bd08      	pop	{r3, pc}
 80055d8:	2018      	movs	r0, #24
 80055da:	e7fc      	b.n	80055d6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80055dc:	2010      	movs	r0, #16
 80055de:	e7fa      	b.n	80055d6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80055e0:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 80055e2:	f44f 7111 	mov.w	r1, #580	; 0x244
 80055e6:	4a05      	ldr	r2, [pc, #20]	; (80055fc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 80055e8:	4805      	ldr	r0, [pc, #20]	; (8005600 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 80055ea:	f004 fb77 	bl	8009cdc <__assert_func>
 80055ee:	2008      	movs	r0, #8
 80055f0:	e7f1      	b.n	80055d6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80055f2:	2000      	movs	r0, #0
 80055f4:	e7ef      	b.n	80055d6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80055f6:	bf00      	nop
 80055f8:	0800ba10 	.word	0x0800ba10
 80055fc:	0800bcee 	.word	0x0800bcee
 8005600:	0800b917 	.word	0x0800b917

08005604 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8005604:	b570      	push	{r4, r5, r6, lr}
 8005606:	460d      	mov	r5, r1
 8005608:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800560c:	4616      	mov	r6, r2
 800560e:	461c      	mov	r4, r3
 8005610:	f7ff ffd4 	bl	80055bc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8005614:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8005618:	10c0      	asrs	r0, r0, #3
 800561a:	fb06 5101 	mla	r1, r6, r1, r5
 800561e:	fb00 4001 	mla	r0, r0, r1, r4
 8005622:	bd70      	pop	{r4, r5, r6, pc}

08005624 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8005624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005628:	b08a      	sub	sp, #40	; 0x28
 800562a:	f04f 0c00 	mov.w	ip, #0
 800562e:	4604      	mov	r4, r0
 8005630:	469a      	mov	sl, r3
 8005632:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8005636:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800563a:	f1b8 0f02 	cmp.w	r8, #2
 800563e:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8005642:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8005646:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800564a:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 800564e:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8005652:	f8cd c020 	str.w	ip, [sp, #32]
 8005656:	d030      	beq.n	80056ba <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8005658:	2bff      	cmp	r3, #255	; 0xff
 800565a:	d12c      	bne.n	80056b6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 800565c:	4560      	cmp	r0, ip
 800565e:	bf14      	ite	ne
 8005660:	2004      	movne	r0, #4
 8005662:	2001      	moveq	r0, #1
 8005664:	9204      	str	r2, [sp, #16]
 8005666:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 800566a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800566e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8005672:	f8ad 6018 	strh.w	r6, [sp, #24]
 8005676:	f8ad 501a 	strh.w	r5, [sp, #26]
 800567a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800567e:	4620      	mov	r0, r4
 8005680:	f7ff ff8a 	bl	8005598 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8005684:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8005688:	4603      	mov	r3, r0
 800568a:	4651      	mov	r1, sl
 800568c:	4620      	mov	r0, r4
 800568e:	e9cd 9700 	strd	r9, r7, [sp]
 8005692:	f7ff ffb7 	bl	8005604 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8005696:	f8ad 901e 	strh.w	r9, [sp, #30]
 800569a:	9005      	str	r0, [sp, #20]
 800569c:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 80056a0:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 80056a4:	b106      	cbz	r6, 80056a8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 80056a6:	b98d      	cbnz	r5, 80056cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 80056a8:	4b12      	ldr	r3, [pc, #72]	; (80056f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 80056aa:	f240 11c3 	movw	r1, #451	; 0x1c3
 80056ae:	4a12      	ldr	r2, [pc, #72]	; (80056f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 80056b0:	4812      	ldr	r0, [pc, #72]	; (80056fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 80056b2:	f004 fb13 	bl	8009cdc <__assert_func>
 80056b6:	2004      	movs	r0, #4
 80056b8:	e7d4      	b.n	8005664 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80056ba:	2bff      	cmp	r3, #255	; 0xff
 80056bc:	d104      	bne.n	80056c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 80056be:	2800      	cmp	r0, #0
 80056c0:	bf14      	ite	ne
 80056c2:	2040      	movne	r0, #64	; 0x40
 80056c4:	2020      	moveq	r0, #32
 80056c6:	e7cd      	b.n	8005664 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80056c8:	2040      	movs	r0, #64	; 0x40
 80056ca:	e7cb      	b.n	8005664 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	4620      	mov	r0, r4
 80056d0:	9d02      	ldr	r5, [sp, #8]
 80056d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d4:	4798      	blx	r3
 80056d6:	4228      	tst	r0, r5
 80056d8:	d104      	bne.n	80056e4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 80056da:	4b09      	ldr	r3, [pc, #36]	; (8005700 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 80056dc:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80056e0:	4a05      	ldr	r2, [pc, #20]	; (80056f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 80056e2:	e7e5      	b.n	80056b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 80056e4:	6860      	ldr	r0, [r4, #4]
 80056e6:	a902      	add	r1, sp, #8
 80056e8:	6803      	ldr	r3, [r0, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	4798      	blx	r3
 80056ee:	b00a      	add	sp, #40	; 0x28
 80056f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f4:	0800b993 	.word	0x0800b993
 80056f8:	0800bb90 	.word	0x0800bb90
 80056fc:	0800b917 	.word	0x0800b917
 8005700:	0800b9cb 	.word	0x0800b9cb

08005704 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8005704:	b510      	push	{r4, lr}
 8005706:	b08a      	sub	sp, #40	; 0x28
 8005708:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 800570c:	9408      	str	r4, [sp, #32]
 800570e:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8005712:	9407      	str	r4, [sp, #28]
 8005714:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8005718:	9406      	str	r4, [sp, #24]
 800571a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 800571e:	9405      	str	r4, [sp, #20]
 8005720:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8005724:	9404      	str	r4, [sp, #16]
 8005726:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 800572a:	9403      	str	r4, [sp, #12]
 800572c:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8005730:	9402      	str	r4, [sp, #8]
 8005732:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8005736:	e9cd 3400 	strd	r3, r4, [sp]
 800573a:	4613      	mov	r3, r2
 800573c:	2200      	movs	r2, #0
 800573e:	f7ff ff71 	bl	8005624 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8005742:	b00a      	add	sp, #40	; 0x28
 8005744:	bd10      	pop	{r4, pc}
	...

08005748 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8005748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800574a:	b08b      	sub	sp, #44	; 0x2c
 800574c:	4616      	mov	r6, r2
 800574e:	460d      	mov	r5, r1
 8005750:	461f      	mov	r7, r3
 8005752:	4604      	mov	r4, r0
 8005754:	f7ff fdd6 	bl	8005304 <_ZN8touchgfx3HAL3lcdEv>
 8005758:	6803      	ldr	r3, [r0, #0]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	4798      	blx	r3
 800575e:	4b0e      	ldr	r3, [pc, #56]	; (8005798 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8005760:	2200      	movs	r2, #0
 8005762:	4629      	mov	r1, r5
 8005764:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	4620      	mov	r0, r4
 800576c:	9306      	str	r3, [sp, #24]
 800576e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8005772:	9305      	str	r3, [sp, #20]
 8005774:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8005778:	9304      	str	r3, [sp, #16]
 800577a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800577e:	9303      	str	r3, [sp, #12]
 8005780:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8005784:	9302      	str	r3, [sp, #8]
 8005786:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800578a:	e9cd 7300 	strd	r7, r3, [sp]
 800578e:	4633      	mov	r3, r6
 8005790:	f7ff ff48 	bl	8005624 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8005794:	b00b      	add	sp, #44	; 0x2c
 8005796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005798:	200010aa 	.word	0x200010aa

0800579c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 800579c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057a0:	461f      	mov	r7, r3
 80057a2:	4b14      	ldr	r3, [pc, #80]	; (80057f4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 80057a4:	b08a      	sub	sp, #40	; 0x28
 80057a6:	4616      	mov	r6, r2
 80057a8:	f8b3 8000 	ldrh.w	r8, [r3]
 80057ac:	460d      	mov	r5, r1
 80057ae:	4604      	mov	r4, r0
 80057b0:	f7ff fda8 	bl	8005304 <_ZN8touchgfx3HAL3lcdEv>
 80057b4:	6803      	ldr	r3, [r0, #0]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	4798      	blx	r3
 80057ba:	2302      	movs	r3, #2
 80057bc:	9008      	str	r0, [sp, #32]
 80057be:	2200      	movs	r2, #0
 80057c0:	4629      	mov	r1, r5
 80057c2:	4620      	mov	r0, r4
 80057c4:	e9cd 8306 	strd	r8, r3, [sp, #24]
 80057c8:	2301      	movs	r3, #1
 80057ca:	9305      	str	r3, [sp, #20]
 80057cc:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80057d0:	9304      	str	r3, [sp, #16]
 80057d2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80057d6:	9303      	str	r3, [sp, #12]
 80057d8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80057dc:	9302      	str	r3, [sp, #8]
 80057de:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80057e2:	e9cd 7300 	strd	r7, r3, [sp]
 80057e6:	4633      	mov	r3, r6
 80057e8:	f7ff ff1c 	bl	8005624 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80057ec:	b00a      	add	sp, #40	; 0x28
 80057ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f2:	bf00      	nop
 80057f4:	200010aa 	.word	0x200010aa

080057f8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 80057f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fc:	b08b      	sub	sp, #44	; 0x2c
 80057fe:	469b      	mov	fp, r3
 8005800:	4604      	mov	r4, r0
 8005802:	4692      	mov	sl, r2
 8005804:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8005808:	2600      	movs	r6, #0
 800580a:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 800580e:	4689      	mov	r9, r1
 8005810:	2fff      	cmp	r7, #255	; 0xff
 8005812:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8005816:	9608      	str	r6, [sp, #32]
 8005818:	bf14      	ite	ne
 800581a:	2308      	movne	r3, #8
 800581c:	2302      	moveq	r3, #2
 800581e:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8005822:	f7ff feb9 	bl	8005598 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8005826:	465a      	mov	r2, fp
 8005828:	4603      	mov	r3, r0
 800582a:	4651      	mov	r1, sl
 800582c:	4620      	mov	r0, r4
 800582e:	e9cd 8500 	strd	r8, r5, [sp]
 8005832:	f7ff fee7 	bl	8005604 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8005836:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800583a:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800583e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8005842:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8005846:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 800584a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	9d02      	ldr	r5, [sp, #8]
 8005852:	9005      	str	r0, [sp, #20]
 8005854:	4620      	mov	r0, r4
 8005856:	f8ad 601c 	strh.w	r6, [sp, #28]
 800585a:	f8ad 801e 	strh.w	r8, [sp, #30]
 800585e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005862:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8005866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005868:	4798      	blx	r3
 800586a:	4228      	tst	r0, r5
 800586c:	d106      	bne.n	800587c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 800586e:	4b07      	ldr	r3, [pc, #28]	; (800588c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8005870:	f240 11fb 	movw	r1, #507	; 0x1fb
 8005874:	4a06      	ldr	r2, [pc, #24]	; (8005890 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8005876:	4807      	ldr	r0, [pc, #28]	; (8005894 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8005878:	f004 fa30 	bl	8009cdc <__assert_func>
 800587c:	6860      	ldr	r0, [r4, #4]
 800587e:	a902      	add	r1, sp, #8
 8005880:	6803      	ldr	r3, [r0, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	4798      	blx	r3
 8005886:	b00b      	add	sp, #44	; 0x2c
 8005888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800588c:	0800b9cb 	.word	0x0800b9cb
 8005890:	0800bc59 	.word	0x0800bc59
 8005894:	0800b917 	.word	0x0800b917

08005898 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8005898:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800589c:	461f      	mov	r7, r3
 800589e:	4b0b      	ldr	r3, [pc, #44]	; (80058cc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80058a0:	460d      	mov	r5, r1
 80058a2:	4616      	mov	r6, r2
 80058a4:	f8b3 8000 	ldrh.w	r8, [r3]
 80058a8:	4604      	mov	r4, r0
 80058aa:	f7ff fd2b 	bl	8005304 <_ZN8touchgfx3HAL3lcdEv>
 80058ae:	6803      	ldr	r3, [r0, #0]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	4798      	blx	r3
 80058b4:	463b      	mov	r3, r7
 80058b6:	4632      	mov	r2, r6
 80058b8:	4629      	mov	r1, r5
 80058ba:	e9cd 8000 	strd	r8, r0, [sp]
 80058be:	4620      	mov	r0, r4
 80058c0:	f7ff fea0 	bl	8005604 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80058c4:	b002      	add	sp, #8
 80058c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058ca:	bf00      	nop
 80058cc:	200010aa 	.word	0x200010aa

080058d0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 80058d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058d4:	4698      	mov	r8, r3
 80058d6:	b088      	sub	sp, #32
 80058d8:	2300      	movs	r3, #0
 80058da:	4617      	mov	r7, r2
 80058dc:	4604      	mov	r4, r0
 80058de:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80058e2:	9306      	str	r3, [sp, #24]
 80058e4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80058e8:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80058ec:	f8ad 6010 	strh.w	r6, [sp, #16]
 80058f0:	f8ad 5012 	strh.w	r5, [sp, #18]
 80058f4:	e9cd 3100 	strd	r3, r1, [sp]
 80058f8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80058fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005900:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8005904:	f88d 301c 	strb.w	r3, [sp, #28]
 8005908:	f7ff fe46 	bl	8005598 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800590c:	4642      	mov	r2, r8
 800590e:	4603      	mov	r3, r0
 8005910:	4639      	mov	r1, r7
 8005912:	4620      	mov	r0, r4
 8005914:	f7ff ffc0 	bl	8005898 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8005918:	4b16      	ldr	r3, [pc, #88]	; (8005974 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 800591a:	9003      	str	r0, [sp, #12]
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005922:	f7ff fcef 	bl	8005304 <_ZN8touchgfx3HAL3lcdEv>
 8005926:	6803      	ldr	r3, [r0, #0]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	4798      	blx	r3
 800592c:	f88d 001e 	strb.w	r0, [sp, #30]
 8005930:	f88d 001d 	strb.w	r0, [sp, #29]
 8005934:	b106      	cbz	r6, 8005938 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8005936:	b935      	cbnz	r5, 8005946 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8005938:	4b0f      	ldr	r3, [pc, #60]	; (8005978 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 800593a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800593e:	4a0f      	ldr	r2, [pc, #60]	; (800597c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8005940:	480f      	ldr	r0, [pc, #60]	; (8005980 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8005942:	f004 f9cb 	bl	8009cdc <__assert_func>
 8005946:	6823      	ldr	r3, [r4, #0]
 8005948:	4620      	mov	r0, r4
 800594a:	9d00      	ldr	r5, [sp, #0]
 800594c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594e:	4798      	blx	r3
 8005950:	4228      	tst	r0, r5
 8005952:	d104      	bne.n	800595e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8005954:	4b0b      	ldr	r3, [pc, #44]	; (8005984 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8005956:	f240 11e1 	movw	r1, #481	; 0x1e1
 800595a:	4a08      	ldr	r2, [pc, #32]	; (800597c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 800595c:	e7f0      	b.n	8005940 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 800595e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005960:	4669      	mov	r1, sp
 8005962:	6860      	ldr	r0, [r4, #4]
 8005964:	9306      	str	r3, [sp, #24]
 8005966:	6803      	ldr	r3, [r0, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	4798      	blx	r3
 800596c:	b008      	add	sp, #32
 800596e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005972:	bf00      	nop
 8005974:	200010aa 	.word	0x200010aa
 8005978:	0800b993 	.word	0x0800b993
 800597c:	0800ba42 	.word	0x0800ba42
 8005980:	0800b917 	.word	0x0800b917
 8005984:	0800b9cb 	.word	0x0800b9cb

08005988 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	b08a      	sub	sp, #40	; 0x28
 800598c:	4604      	mov	r4, r0
 800598e:	466b      	mov	r3, sp
 8005990:	e883 0006 	stmia.w	r3, {r1, r2}
 8005994:	4b1f      	ldr	r3, [pc, #124]	; (8005a14 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	b933      	cbnz	r3, 80059a8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800599a:	4b1f      	ldr	r3, [pc, #124]	; (8005a18 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 800599c:	f44f 7103 	mov.w	r1, #524	; 0x20c
 80059a0:	4a1e      	ldr	r2, [pc, #120]	; (8005a1c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 80059a2:	481f      	ldr	r0, [pc, #124]	; (8005a20 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 80059a4:	f004 f99a 	bl	8009cdc <__assert_func>
 80059a8:	2300      	movs	r3, #0
 80059aa:	f8bd 5000 	ldrh.w	r5, [sp]
 80059ae:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 80059b2:	9308      	str	r3, [sp, #32]
 80059b4:	2301      	movs	r3, #1
 80059b6:	9302      	str	r3, [sp, #8]
 80059b8:	6803      	ldr	r3, [r0, #0]
 80059ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059bc:	4798      	blx	r3
 80059be:	4632      	mov	r2, r6
 80059c0:	4629      	mov	r1, r5
 80059c2:	4603      	mov	r3, r0
 80059c4:	4620      	mov	r0, r4
 80059c6:	f7ff ff67 	bl	8005898 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80059ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80059cc:	9003      	str	r0, [sp, #12]
 80059ce:	9305      	str	r3, [sp, #20]
 80059d0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80059d4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80059d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80059dc:	f8ad 301a 	strh.w	r3, [sp, #26]
 80059e0:	4b10      	ldr	r3, [pc, #64]	; (8005a24 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80059e8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80059ec:	f7ff fc8a 	bl	8005304 <_ZN8touchgfx3HAL3lcdEv>
 80059f0:	6803      	ldr	r3, [r0, #0]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	4798      	blx	r3
 80059f6:	23ff      	movs	r3, #255	; 0xff
 80059f8:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80059fc:	a902      	add	r1, sp, #8
 80059fe:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8005a02:	6860      	ldr	r0, [r4, #4]
 8005a04:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8005a08:	6803      	ldr	r3, [r0, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	4798      	blx	r3
 8005a0e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005a10:	b00a      	add	sp, #40	; 0x28
 8005a12:	bd70      	pop	{r4, r5, r6, pc}
 8005a14:	200010af 	.word	0x200010af
 8005a18:	0800b864 	.word	0x0800b864
 8005a1c:	0800bae6 	.word	0x0800bae6
 8005a20:	0800b917 	.word	0x0800b917
 8005a24:	200010aa 	.word	0x200010aa

08005a28 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8005a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a2a:	b08b      	sub	sp, #44	; 0x2c
 8005a2c:	4604      	mov	r4, r0
 8005a2e:	466d      	mov	r5, sp
 8005a30:	e885 0006 	stmia.w	r5, {r1, r2}
 8005a34:	461d      	mov	r5, r3
 8005a36:	2300      	movs	r3, #0
 8005a38:	f8bd 6000 	ldrh.w	r6, [sp]
 8005a3c:	9308      	str	r3, [sp, #32]
 8005a3e:	2301      	movs	r3, #1
 8005a40:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8005a44:	9302      	str	r3, [sp, #8]
 8005a46:	6803      	ldr	r3, [r0, #0]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4a:	4798      	blx	r3
 8005a4c:	463a      	mov	r2, r7
 8005a4e:	4631      	mov	r1, r6
 8005a50:	4603      	mov	r3, r0
 8005a52:	4620      	mov	r0, r4
 8005a54:	f7ff ff20 	bl	8005898 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8005a58:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005a5c:	9003      	str	r0, [sp, #12]
 8005a5e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8005a62:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005a66:	9505      	str	r5, [sp, #20]
 8005a68:	f8ad 301a 	strh.w	r3, [sp, #26]
 8005a6c:	4b0d      	ldr	r3, [pc, #52]	; (8005aa4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	f8ad 301c 	strh.w	r3, [sp, #28]
 8005a74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a76:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005a7a:	f7ff fc43 	bl	8005304 <_ZN8touchgfx3HAL3lcdEv>
 8005a7e:	6803      	ldr	r3, [r0, #0]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	4798      	blx	r3
 8005a84:	23ff      	movs	r3, #255	; 0xff
 8005a86:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8005a8a:	a902      	add	r1, sp, #8
 8005a8c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8005a90:	6860      	ldr	r0, [r4, #4]
 8005a92:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8005a96:	6803      	ldr	r3, [r0, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	4798      	blx	r3
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	b00b      	add	sp, #44	; 0x2c
 8005aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	200010aa 	.word	0x200010aa

08005aa8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8005aae:	4604      	mov	r4, r0
 8005ab0:	b19b      	cbz	r3, 8005ada <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8005ab2:	2002      	movs	r0, #2
 8005ab4:	f7fd ff2a 	bl	800390c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	4620      	mov	r0, r4
 8005abc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8005ac0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8005aca:	f7ff fd65 	bl	8005598 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8005ace:	4601      	mov	r1, r0
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	462b      	mov	r3, r5
 8005ad4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005ad8:	4718      	bx	r3
 8005ada:	bd70      	pop	{r4, r5, r6, pc}

08005adc <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	460d      	mov	r5, r1
 8005ae6:	428a      	cmp	r2, r1
 8005ae8:	d008      	beq.n	8005afc <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x20>
 8005aea:	2a01      	cmp	r2, #1
 8005aec:	6803      	ldr	r3, [r0, #0]
 8005aee:	d106      	bne.n	8005afe <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 8005af0:	b929      	cbnz	r1, 8005afe <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 8005af2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005af6:	4798      	blx	r3
 8005af8:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8005afc:	bd38      	pop	{r3, r4, r5, pc}
 8005afe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b02:	4620      	mov	r0, r4
 8005b04:	e7f7      	b.n	8005af6 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x1a>
	...

08005b08 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8005b08:	4b0d      	ldr	r3, [pc, #52]	; (8005b40 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8005b0a:	b510      	push	{r4, lr}
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	4604      	mov	r4, r0
 8005b10:	b95b      	cbnz	r3, 8005b2a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8005b12:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d007      	beq.n	8005b2a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8005b1a:	6840      	ldr	r0, [r0, #4]
 8005b1c:	f000 f934 	bl	8005d88 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8005b20:	b118      	cbz	r0, 8005b2a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8005b22:	6862      	ldr	r2, [r4, #4]
 8005b24:	7a53      	ldrb	r3, [r2, #9]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d0fc      	beq.n	8005b24 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8005b2a:	f7fd fffd 	bl	8003b28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8005b2e:	4620      	mov	r0, r4
 8005b30:	2100      	movs	r1, #0
 8005b32:	f7ff ffd3 	bl	8005adc <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 8005b36:	4620      	mov	r0, r4
 8005b38:	f7ff fd2e 	bl	8005598 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8005b3c:	bd10      	pop	{r4, pc}
 8005b3e:	bf00      	nop
 8005b40:	200010ae 	.word	0x200010ae

08005b44 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8005b44:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8005b48:	1a13      	subs	r3, r2, r0
 8005b4a:	4258      	negs	r0, r3
 8005b4c:	4158      	adcs	r0, r3
 8005b4e:	4770      	bx	lr

08005b50 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8005b50:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8005b54:	1a9b      	subs	r3, r3, r2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	bfdc      	itt	le
 8005b5a:	6882      	ldrle	r2, [r0, #8]
 8005b5c:	189b      	addle	r3, r3, r2
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	bfcc      	ite	gt
 8005b62:	2000      	movgt	r0, #0
 8005b64:	2001      	movle	r0, #1
 8005b66:	4770      	bx	lr

08005b68 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8005b68:	6902      	ldr	r2, [r0, #16]
 8005b6a:	6840      	ldr	r0, [r0, #4]
 8005b6c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8005b70:	4770      	bx	lr

08005b72 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8005b72:	6803      	ldr	r3, [r0, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	4718      	bx	r3

08005b78 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8005b78:	4770      	bx	lr

08005b7a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8005b7a:	4770      	bx	lr

08005b7c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8005b7c:	4770      	bx	lr
	...

08005b80 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8005b80:	2301      	movs	r3, #1
 8005b82:	b570      	push	{r4, r5, r6, lr}
 8005b84:	7203      	strb	r3, [r0, #8]
 8005b86:	4604      	mov	r4, r0
 8005b88:	6840      	ldr	r0, [r0, #4]
 8005b8a:	6803      	ldr	r3, [r0, #0]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	4798      	blx	r3
 8005b90:	6803      	ldr	r3, [r0, #0]
 8005b92:	4605      	mov	r5, r0
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d01e      	beq.n	8005bd6 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8005b98:	d80b      	bhi.n	8005bb2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d027      	beq.n	8005bee <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d011      	beq.n	8005bc6 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d028      	beq.n	8005bf8 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8005ba6:	4b17      	ldr	r3, [pc, #92]	; (8005c04 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8005ba8:	218c      	movs	r1, #140	; 0x8c
 8005baa:	4a17      	ldr	r2, [pc, #92]	; (8005c08 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8005bac:	4817      	ldr	r0, [pc, #92]	; (8005c0c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8005bae:	f004 f895 	bl	8009cdc <__assert_func>
 8005bb2:	2b40      	cmp	r3, #64	; 0x40
 8005bb4:	d020      	beq.n	8005bf8 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8005bb6:	d801      	bhi.n	8005bbc <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8005bb8:	2b20      	cmp	r3, #32
 8005bba:	e7f3      	b.n	8005ba4 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8005bbc:	2b80      	cmp	r3, #128	; 0x80
 8005bbe:	d01b      	beq.n	8005bf8 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8005bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bc4:	e7ee      	b.n	8005ba4 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	7f01      	ldrb	r1, [r0, #28]
 8005bca:	4620      	mov	r0, r4
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bce:	4798      	blx	r3
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd4:	e006      	b.n	8005be4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8005bd6:	6823      	ldr	r3, [r4, #0]
 8005bd8:	7f01      	ldrb	r1, [r0, #28]
 8005bda:	4620      	mov	r0, r4
 8005bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bde:	4798      	blx	r3
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be4:	4629      	mov	r1, r5
 8005be6:	4620      	mov	r0, r4
 8005be8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005bec:	4718      	bx	r3
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf4:	4798      	blx	r3
 8005bf6:	e7f3      	b.n	8005be0 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfe:	4798      	blx	r3
 8005c00:	e7e6      	b.n	8005bd0 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8005c02:	bf00      	nop
 8005c04:	0800bd37 	.word	0x0800bd37
 8005c08:	0800bdf8 	.word	0x0800bdf8
 8005c0c:	0800bd5c 	.word	0x0800bd5c

08005c10 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8005c10:	b570      	push	{r4, r5, r6, lr}
 8005c12:	4604      	mov	r4, r0
 8005c14:	460e      	mov	r6, r1
 8005c16:	6860      	ldr	r0, [r4, #4]
 8005c18:	6803      	ldr	r3, [r0, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	4798      	blx	r3
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	d1f9      	bne.n	8005c16 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8005c22:	4d0d      	ldr	r5, [pc, #52]	; (8005c58 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8005c24:	6828      	ldr	r0, [r5, #0]
 8005c26:	6803      	ldr	r3, [r0, #0]
 8005c28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c2a:	4798      	blx	r3
 8005c2c:	f7fd ff8c 	bl	8003b48 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8005c30:	6828      	ldr	r0, [r5, #0]
 8005c32:	2101      	movs	r1, #1
 8005c34:	f7ff ff52 	bl	8005adc <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 8005c38:	6860      	ldr	r0, [r4, #4]
 8005c3a:	4631      	mov	r1, r6
 8005c3c:	6803      	ldr	r3, [r0, #0]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	4798      	blx	r3
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	4620      	mov	r0, r4
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	4798      	blx	r3
 8005c4a:	6828      	ldr	r0, [r5, #0]
 8005c4c:	6803      	ldr	r3, [r0, #0]
 8005c4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c54:	4718      	bx	r3
 8005c56:	bf00      	nop
 8005c58:	200010b0 	.word	0x200010b0

08005c5c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8005c5c:	b508      	push	{r3, lr}
 8005c5e:	f7fd ff63 	bl	8003b28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8005c62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005c66:	f7fd bf69 	b.w	8003b3c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08005c6a <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8005c6a:	b510      	push	{r4, lr}
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	2114      	movs	r1, #20
 8005c70:	f003 ffda 	bl	8009c28 <_ZdlPvj>
 8005c74:	4620      	mov	r0, r4
 8005c76:	bd10      	pop	{r4, pc}

08005c78 <_ZN8touchgfx13DMA_Interface5startEv>:
 8005c78:	b510      	push	{r4, lr}
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	6840      	ldr	r0, [r0, #4]
 8005c7e:	6803      	ldr	r3, [r0, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4798      	blx	r3
 8005c84:	b948      	cbnz	r0, 8005c9a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8005c86:	7a63      	ldrb	r3, [r4, #9]
 8005c88:	b13b      	cbz	r3, 8005c9a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8005c8a:	7a23      	ldrb	r3, [r4, #8]
 8005c8c:	b92b      	cbnz	r3, 8005c9a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	4620      	mov	r0, r4
 8005c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c98:	4718      	bx	r3
 8005c9a:	bd10      	pop	{r4, pc}

08005c9c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8005c9c:	b510      	push	{r4, lr}
 8005c9e:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8005ca2:	1b12      	subs	r2, r2, r4
 8005ca4:	2a00      	cmp	r2, #0
 8005ca6:	bfdc      	itt	le
 8005ca8:	6883      	ldrle	r3, [r0, #8]
 8005caa:	18d2      	addle	r2, r2, r3
 8005cac:	2a01      	cmp	r2, #1
 8005cae:	dd18      	ble.n	8005ce2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8005cb0:	6843      	ldr	r3, [r0, #4]
 8005cb2:	f101 021c 	add.w	r2, r1, #28
 8005cb6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8005cba:	f851 4b04 	ldr.w	r4, [r1], #4
 8005cbe:	4291      	cmp	r1, r2
 8005cc0:	f843 4b04 	str.w	r4, [r3], #4
 8005cc4:	d1f9      	bne.n	8005cba <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8005cc6:	880a      	ldrh	r2, [r1, #0]
 8005cc8:	801a      	strh	r2, [r3, #0]
 8005cca:	788a      	ldrb	r2, [r1, #2]
 8005ccc:	709a      	strb	r2, [r3, #2]
 8005cce:	68c3      	ldr	r3, [r0, #12]
 8005cd0:	6882      	ldr	r2, [r0, #8]
 8005cd2:	f3bf 8f5b 	dmb	ish
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	bfd8      	it	le
 8005cdc:	1a9b      	suble	r3, r3, r2
 8005cde:	60c3      	str	r3, [r0, #12]
 8005ce0:	bd10      	pop	{r4, pc}
 8005ce2:	4b03      	ldr	r3, [pc, #12]	; (8005cf0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8005ce4:	2139      	movs	r1, #57	; 0x39
 8005ce6:	4a03      	ldr	r2, [pc, #12]	; (8005cf4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8005ce8:	4803      	ldr	r0, [pc, #12]	; (8005cf8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8005cea:	f003 fff7 	bl	8009cdc <__assert_func>
 8005cee:	bf00      	nop
 8005cf0:	0800bd82 	.word	0x0800bd82
 8005cf4:	0800be28 	.word	0x0800be28
 8005cf8:	0800bd5c 	.word	0x0800bd5c

08005cfc <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8005cfc:	b510      	push	{r4, lr}
 8005cfe:	6803      	ldr	r3, [r0, #0]
 8005d00:	4604      	mov	r4, r0
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4798      	blx	r3
 8005d06:	b128      	cbz	r0, 8005d14 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8005d08:	4b07      	ldr	r3, [pc, #28]	; (8005d28 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8005d0a:	213f      	movs	r1, #63	; 0x3f
 8005d0c:	4a07      	ldr	r2, [pc, #28]	; (8005d2c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8005d0e:	4808      	ldr	r0, [pc, #32]	; (8005d30 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8005d10:	f003 ffe4 	bl	8009cdc <__assert_func>
 8005d14:	6923      	ldr	r3, [r4, #16]
 8005d16:	68a2      	ldr	r2, [r4, #8]
 8005d18:	f3bf 8f5b 	dmb	ish
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	bfd8      	it	le
 8005d22:	1a9b      	suble	r3, r3, r2
 8005d24:	6123      	str	r3, [r4, #16]
 8005d26:	bd10      	pop	{r4, pc}
 8005d28:	0800bda5 	.word	0x0800bda5
 8005d2c:	0800be76 	.word	0x0800be76
 8005d30:	0800bd5c 	.word	0x0800bd5c

08005d34 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8005d34:	b570      	push	{r4, r5, r6, lr}
 8005d36:	4604      	mov	r4, r0
 8005d38:	6840      	ldr	r0, [r0, #4]
 8005d3a:	6803      	ldr	r3, [r0, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4798      	blx	r3
 8005d40:	4605      	mov	r5, r0
 8005d42:	b930      	cbnz	r0, 8005d52 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8005d44:	7a23      	ldrb	r3, [r4, #8]
 8005d46:	b123      	cbz	r3, 8005d52 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8005d48:	6860      	ldr	r0, [r4, #4]
 8005d4a:	6803      	ldr	r3, [r0, #0]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	4798      	blx	r3
 8005d50:	7225      	strb	r5, [r4, #8]
 8005d52:	6860      	ldr	r0, [r4, #4]
 8005d54:	6803      	ldr	r3, [r0, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4798      	blx	r3
 8005d5a:	b928      	cbnz	r0, 8005d68 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	4620      	mov	r0, r4
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005d66:	4718      	bx	r3
 8005d68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005d6c:	f7fd bef2 	b.w	8003b54 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08005d70 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8005d70:	b510      	push	{r4, lr}
 8005d72:	6082      	str	r2, [r0, #8]
 8005d74:	2200      	movs	r2, #0
 8005d76:	4c03      	ldr	r4, [pc, #12]	; (8005d84 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8005d78:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8005d7c:	e9c0 4100 	strd	r4, r1, [r0]
 8005d80:	bd10      	pop	{r4, pc}
 8005d82:	bf00      	nop
 8005d84:	0800bddc 	.word	0x0800bddc

08005d88 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8005d88:	6840      	ldr	r0, [r0, #4]
 8005d8a:	6803      	ldr	r3, [r0, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4718      	bx	r3

08005d90 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8005d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d94:	4696      	mov	lr, r2
 8005d96:	b097      	sub	sp, #92	; 0x5c
 8005d98:	4605      	mov	r5, r0
 8005d9a:	4614      	mov	r4, r2
 8005d9c:	460e      	mov	r6, r1
 8005d9e:	461f      	mov	r7, r3
 8005da0:	f10d 0c1c 	add.w	ip, sp, #28
 8005da4:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8005da8:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8005dac:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8005db0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005db4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005db8:	f8de 3000 	ldr.w	r3, [lr]
 8005dbc:	f104 0e14 	add.w	lr, r4, #20
 8005dc0:	f8cc 3000 	str.w	r3, [ip]
 8005dc4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8005dc8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005dcc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005dd0:	f8de 3000 	ldr.w	r3, [lr]
 8005dd4:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8005dd8:	f8cc 3000 	str.w	r3, [ip]
 8005ddc:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8005de0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005de4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005de8:	f8de 3000 	ldr.w	r3, [lr]
 8005dec:	4631      	mov	r1, r6
 8005dee:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005df0:	4628      	mov	r0, r5
 8005df2:	f8cc 3000 	str.w	r3, [ip]
 8005df6:	682b      	ldr	r3, [r5, #0]
 8005df8:	9201      	str	r2, [sp, #4]
 8005dfa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005dfc:	f8cd 8008 	str.w	r8, [sp, #8]
 8005e00:	9200      	str	r2, [sp, #0]
 8005e02:	aa07      	add	r2, sp, #28
 8005e04:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8005e08:	f8d3 b038 	ldr.w	fp, [r3, #56]	; 0x38
 8005e0c:	463b      	mov	r3, r7
 8005e0e:	47d8      	blx	fp
 8005e10:	46a6      	mov	lr, r4
 8005e12:	f10d 0c1c 	add.w	ip, sp, #28
 8005e16:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005e1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005e1e:	f8de 3000 	ldr.w	r3, [lr]
 8005e22:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8005e26:	343c      	adds	r4, #60	; 0x3c
 8005e28:	f8cc 3000 	str.w	r3, [ip]
 8005e2c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8005e30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005e34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005e38:	f8de 3000 	ldr.w	r3, [lr]
 8005e3c:	f8cc 3000 	str.w	r3, [ip]
 8005e40:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8005e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	4631      	mov	r1, r6
 8005e4e:	4628      	mov	r0, r5
 8005e50:	f8cc 3000 	str.w	r3, [ip]
 8005e54:	682b      	ldr	r3, [r5, #0]
 8005e56:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8005e5a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e5c:	f8cd 8008 	str.w	r8, [sp, #8]
 8005e60:	9201      	str	r2, [sp, #4]
 8005e62:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005e64:	9200      	str	r2, [sp, #0]
 8005e66:	aa07      	add	r2, sp, #28
 8005e68:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8005e6a:	463b      	mov	r3, r7
 8005e6c:	47a0      	blx	r4
 8005e6e:	b017      	add	sp, #92	; 0x5c
 8005e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005e74 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8005e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e78:	b08d      	sub	sp, #52	; 0x34
 8005e7a:	4688      	mov	r8, r1
 8005e7c:	f8d3 c000 	ldr.w	ip, [r3]
 8005e80:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005e82:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8005e86:	680f      	ldr	r7, [r1, #0]
 8005e88:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8005e8c:	eba7 070c 	sub.w	r7, r7, ip
 8005e90:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8005e94:	edd3 6a07 	vldr	s13, [r3, #28]
 8005e98:	42bc      	cmp	r4, r7
 8005e9a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005e9c:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8005ea0:	bfa8      	it	ge
 8005ea2:	463c      	movge	r4, r7
 8005ea4:	f9b1 9000 	ldrsh.w	r9, [r1]
 8005ea8:	f9ba 1000 	ldrsh.w	r1, [sl]
 8005eac:	ee07 4a90 	vmov	s15, r4
 8005eb0:	eb09 0e0c 	add.w	lr, r9, ip
 8005eb4:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8005eb8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8005ebc:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8005ec0:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8005ec4:	4571      	cmp	r1, lr
 8005ec6:	ee25 4a04 	vmul.f32	s8, s10, s8
 8005eca:	ee65 4a24 	vmul.f32	s9, s10, s9
 8005ece:	ee25 5a27 	vmul.f32	s10, s10, s15
 8005ed2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005ed6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8005eda:	ee32 1a05 	vadd.f32	s2, s4, s10
 8005ede:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005ee2:	ee36 0a84 	vadd.f32	s0, s13, s8
 8005ee6:	ee61 1a87 	vmul.f32	s3, s3, s14
 8005eea:	ee22 2a07 	vmul.f32	s4, s4, s14
 8005eee:	f340 808c 	ble.w	800600a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8005ef2:	eba1 060e 	sub.w	r6, r1, lr
 8005ef6:	fb96 f5f4 	sdiv	r5, r6, r4
 8005efa:	ee07 5a10 	vmov	s14, r5
 8005efe:	2d00      	cmp	r5, #0
 8005f00:	fb04 6615 	mls	r6, r4, r5, r6
 8005f04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005f08:	eea7 0a04 	vfma.f32	s0, s14, s8
 8005f0c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8005f10:	eea7 1a05 	vfma.f32	s2, s14, s10
 8005f14:	dd12      	ble.n	8005f3c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8005f16:	ee70 6a44 	vsub.f32	s13, s0, s8
 8005f1a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8005f1e:	ee31 2a45 	vsub.f32	s4, s2, s10
 8005f22:	eef5 6a40 	vcmp.f32	s13, #0.0
 8005f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f2a:	bf14      	ite	ne
 8005f2c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8005f30:	eeb0 7a67 	vmoveq.f32	s14, s15
 8005f34:	ee61 1a87 	vmul.f32	s3, s3, s14
 8005f38:	ee22 2a07 	vmul.f32	s4, s4, s14
 8005f3c:	fb05 f204 	mul.w	r2, r5, r4
 8005f40:	1abf      	subs	r7, r7, r2
 8005f42:	4494      	add	ip, r2
 8005f44:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8005f48:	4411      	add	r1, r2
 8005f4a:	eb09 020c 	add.w	r2, r9, ip
 8005f4e:	b209      	sxth	r1, r1
 8005f50:	443a      	add	r2, r7
 8005f52:	428a      	cmp	r2, r1
 8005f54:	bfc4      	itt	gt
 8005f56:	eba1 0209 	subgt.w	r2, r1, r9
 8005f5a:	eba2 070c 	subgt.w	r7, r2, ip
 8005f5e:	2f00      	cmp	r7, #0
 8005f60:	dd50      	ble.n	8006004 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8005f62:	fb97 f1f4 	sdiv	r1, r7, r4
 8005f66:	fb04 7211 	mls	r2, r4, r1, r7
 8005f6a:	b90a      	cbnz	r2, 8005f70 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8005f6c:	3901      	subs	r1, #1
 8005f6e:	4622      	mov	r2, r4
 8005f70:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8005f74:	6840      	ldr	r0, [r0, #4]
 8005f76:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8005f7a:	44b6      	add	lr, r6
 8005f7c:	f8d0 a000 	ldr.w	sl, [r0]
 8005f80:	2900      	cmp	r1, #0
 8005f82:	bfcc      	ite	gt
 8005f84:	46a1      	movgt	r9, r4
 8005f86:	4691      	movle	r9, r2
 8005f88:	900b      	str	r0, [sp, #44]	; 0x2c
 8005f8a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005f8c:	fb04 e505 	mla	r5, r4, r5, lr
 8005f90:	eef0 6a42 	vmov.f32	s13, s4
 8005f94:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8005f98:	9008      	str	r0, [sp, #32]
 8005f9a:	eeb0 7a61 	vmov.f32	s14, s3
 8005f9e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8005fa6:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8005faa:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8005fae:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005fb0:	445b      	add	r3, fp
 8005fb2:	9307      	str	r3, [sp, #28]
 8005fb4:	ee16 3a90 	vmov	r3, s13
 8005fb8:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8005fbc:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8005fc0:	ee21 3a23 	vmul.f32	s6, s2, s7
 8005fc4:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8005fc8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8005fcc:	ee17 7a90 	vmov	r7, s15
 8005fd0:	ee73 7a42 	vsub.f32	s15, s6, s4
 8005fd4:	fb97 f7f4 	sdiv	r7, r7, r4
 8005fd8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8005fdc:	ee17 ca90 	vmov	ip, s15
 8005fe0:	fb9c fcf4 	sdiv	ip, ip, r4
 8005fe4:	fb0c 3306 	mla	r3, ip, r6, r3
 8005fe8:	9302      	str	r3, [sp, #8]
 8005fea:	ee17 3a10 	vmov	r3, s14
 8005fee:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8005ff2:	fb07 3706 	mla	r7, r7, r6, r3
 8005ff6:	eba9 0306 	sub.w	r3, r9, r6
 8005ffa:	e9cd 4700 	strd	r4, r7, [sp]
 8005ffe:	f8da 4008 	ldr.w	r4, [sl, #8]
 8006002:	47a0      	blx	r4
 8006004:	b00d      	add	sp, #52	; 0x34
 8006006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600a:	2500      	movs	r5, #0
 800600c:	462e      	mov	r6, r5
 800600e:	e799      	b.n	8005f44 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08006010 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8006010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006014:	b0db      	sub	sp, #364	; 0x16c
 8006016:	461d      	mov	r5, r3
 8006018:	4614      	mov	r4, r2
 800601a:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800601e:	910f      	str	r1, [sp, #60]	; 0x3c
 8006020:	4629      	mov	r1, r5
 8006022:	930a      	str	r3, [sp, #40]	; 0x28
 8006024:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8006028:	9009      	str	r0, [sp, #36]	; 0x24
 800602a:	930b      	str	r3, [sp, #44]	; 0x2c
 800602c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8006030:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8006034:	9310      	str	r3, [sp, #64]	; 0x40
 8006036:	6803      	ldr	r3, [r0, #0]
 8006038:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 800603a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800603e:	47b8      	blx	r7
 8006040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006042:	6058      	str	r0, [r3, #4]
 8006044:	2800      	cmp	r0, #0
 8006046:	f000 83a1 	beq.w	800678c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800604a:	682b      	ldr	r3, [r5, #0]
 800604c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8006050:	ed94 7a02 	vldr	s14, [r4, #8]
 8006054:	9314      	str	r3, [sp, #80]	; 0x50
 8006056:	686b      	ldr	r3, [r5, #4]
 8006058:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800605c:	9315      	str	r3, [sp, #84]	; 0x54
 800605e:	4bc1      	ldr	r3, [pc, #772]	; (8006364 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8006060:	7819      	ldrb	r1, [r3, #0]
 8006062:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8006066:	2900      	cmp	r1, #0
 8006068:	bf16      	itet	ne
 800606a:	4619      	movne	r1, r3
 800606c:	4611      	moveq	r1, r2
 800606e:	4613      	movne	r3, r2
 8006070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006074:	9116      	str	r1, [sp, #88]	; 0x58
 8006076:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800607a:	f240 8387 	bls.w	800678c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800607e:	ed94 7a07 	vldr	s14, [r4, #28]
 8006082:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800608a:	f240 837f 	bls.w	800678c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800608e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8006092:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800609a:	f240 8377 	bls.w	800678c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800609e:	6822      	ldr	r2, [r4, #0]
 80060a0:	4bb1      	ldr	r3, [pc, #708]	; (8006368 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80060a2:	429a      	cmp	r2, r3
 80060a4:	f2c0 8372 	blt.w	800678c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80060a8:	49b0      	ldr	r1, [pc, #704]	; (800636c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80060aa:	6963      	ldr	r3, [r4, #20]
 80060ac:	428a      	cmp	r2, r1
 80060ae:	f300 836d 	bgt.w	800678c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80060b2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80060b6:	48ae      	ldr	r0, [pc, #696]	; (8006370 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80060b8:	33ff      	adds	r3, #255	; 0xff
 80060ba:	4283      	cmp	r3, r0
 80060bc:	f200 8366 	bhi.w	800678c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80060c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80060c2:	4dac      	ldr	r5, [pc, #688]	; (8006374 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80060c4:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80060c8:	33ff      	adds	r3, #255	; 0xff
 80060ca:	42ab      	cmp	r3, r5
 80060cc:	f200 835e 	bhi.w	800678c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80060d0:	6862      	ldr	r2, [r4, #4]
 80060d2:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 80060d6:	33ff      	adds	r3, #255	; 0xff
 80060d8:	4283      	cmp	r3, r0
 80060da:	f200 8357 	bhi.w	800678c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80060de:	69a1      	ldr	r1, [r4, #24]
 80060e0:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 80060e4:	33ff      	adds	r3, #255	; 0xff
 80060e6:	4283      	cmp	r3, r0
 80060e8:	f200 8350 	bhi.w	800678c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80060ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80060ee:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 80060f2:	30ff      	adds	r0, #255	; 0xff
 80060f4:	42a8      	cmp	r0, r5
 80060f6:	f200 8349 	bhi.w	800678c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80060fa:	428a      	cmp	r2, r1
 80060fc:	f280 8110 	bge.w	8006320 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8006100:	429a      	cmp	r2, r3
 8006102:	f300 8119 	bgt.w	8006338 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8006106:	4299      	cmp	r1, r3
 8006108:	f280 811d 	bge.w	8006346 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800610c:	2502      	movs	r5, #2
 800610e:	2701      	movs	r7, #1
 8006110:	46a9      	mov	r9, r5
 8006112:	46b8      	mov	r8, r7
 8006114:	f04f 0a00 	mov.w	sl, #0
 8006118:	4621      	mov	r1, r4
 800611a:	a849      	add	r0, sp, #292	; 0x124
 800611c:	f001 fc00 	bl	8007920 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8006120:	4622      	mov	r2, r4
 8006122:	4653      	mov	r3, sl
 8006124:	a949      	add	r1, sp, #292	; 0x124
 8006126:	f8cd 9000 	str.w	r9, [sp]
 800612a:	a819      	add	r0, sp, #100	; 0x64
 800612c:	f001 fd28 	bl	8007b80 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8006130:	4622      	mov	r2, r4
 8006132:	4653      	mov	r3, sl
 8006134:	a949      	add	r1, sp, #292	; 0x124
 8006136:	f8cd 8000 	str.w	r8, [sp]
 800613a:	a829      	add	r0, sp, #164	; 0xa4
 800613c:	f001 fd20 	bl	8007b80 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8006140:	4643      	mov	r3, r8
 8006142:	4622      	mov	r2, r4
 8006144:	a949      	add	r1, sp, #292	; 0x124
 8006146:	f8cd 9000 	str.w	r9, [sp]
 800614a:	a839      	add	r0, sp, #228	; 0xe4
 800614c:	f001 fd18 	bl	8007b80 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8006150:	42af      	cmp	r7, r5
 8006152:	af12      	add	r7, sp, #72	; 0x48
 8006154:	bfb7      	itett	lt
 8006156:	2300      	movlt	r3, #0
 8006158:	2301      	movge	r3, #1
 800615a:	ad29      	addlt	r5, sp, #164	; 0xa4
 800615c:	ac19      	addlt	r4, sp, #100	; 0x64
 800615e:	bfb1      	iteee	lt
 8006160:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006162:	ad19      	addge	r5, sp, #100	; 0x64
 8006164:	930e      	strge	r3, [sp, #56]	; 0x38
 8006166:	ac29      	addge	r4, sp, #164	; 0xa4
 8006168:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800616a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800616e:	e887 0003 	stmia.w	r7, {r0, r1}
 8006172:	b928      	cbnz	r0, 8006180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8006174:	4b80      	ldr	r3, [pc, #512]	; (8006378 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8006176:	6818      	ldr	r0, [r3, #0]
 8006178:	6803      	ldr	r3, [r0, #0]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	4798      	blx	r3
 800617e:	6038      	str	r0, [r7, #0]
 8006180:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8006182:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8006186:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800618a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800618c:	930c      	str	r3, [sp, #48]	; 0x30
 800618e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006190:	6963      	ldr	r3, [r4, #20]
 8006192:	440b      	add	r3, r1
 8006194:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8006198:	4408      	add	r0, r1
 800619a:	b200      	sxth	r0, r0
 800619c:	4283      	cmp	r3, r0
 800619e:	900d      	str	r0, [sp, #52]	; 0x34
 80061a0:	f280 80dd 	bge.w	800635e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80061a4:	428b      	cmp	r3, r1
 80061a6:	da08      	bge.n	80061ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80061a8:	2a00      	cmp	r2, #0
 80061aa:	dd06      	ble.n	80061ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80061ac:	1acb      	subs	r3, r1, r3
 80061ae:	429a      	cmp	r2, r3
 80061b0:	f2c0 80e4 	blt.w	800637c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f300 80e2 	bgt.w	800637e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80061ba:	6967      	ldr	r7, [r4, #20]
 80061bc:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80061c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061c2:	443b      	add	r3, r7
 80061c4:	461f      	mov	r7, r3
 80061c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061c8:	1bdf      	subs	r7, r3, r7
 80061ca:	4297      	cmp	r7, r2
 80061cc:	bfa8      	it	ge
 80061ce:	4617      	movge	r7, r2
 80061d0:	2f00      	cmp	r7, #0
 80061d2:	f340 8166 	ble.w	80064a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80061d6:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80061d8:	6829      	ldr	r1, [r5, #0]
 80061da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80061de:	f9bb 3000 	ldrsh.w	r3, [fp]
 80061e2:	4411      	add	r1, r2
 80061e4:	6820      	ldr	r0, [r4, #0]
 80061e6:	4299      	cmp	r1, r3
 80061e8:	dd1a      	ble.n	8006220 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80061ea:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80061ee:	4402      	add	r2, r0
 80061f0:	440b      	add	r3, r1
 80061f2:	b21b      	sxth	r3, r3
 80061f4:	429a      	cmp	r2, r3
 80061f6:	dc13      	bgt.n	8006220 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80061f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80061fa:	a912      	add	r1, sp, #72	; 0x48
 80061fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	9206      	str	r2, [sp, #24]
 8006204:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006206:	9500      	str	r5, [sp, #0]
 8006208:	9205      	str	r2, [sp, #20]
 800620a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800620c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8006210:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8006212:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8006216:	aa49      	add	r2, sp, #292	; 0x124
 8006218:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 800621c:	4623      	mov	r3, r4
 800621e:	47c8      	blx	r9
 8006220:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8006224:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8006228:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800622c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006230:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8006234:	68a1      	ldr	r1, [r4, #8]
 8006236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800623a:	ed94 6a08 	vldr	s12, [r4, #32]
 800623e:	edd4 6a07 	vldr	s13, [r4, #28]
 8006242:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8006246:	ee76 6a86 	vadd.f32	s13, s13, s12
 800624a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800624e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006252:	edc4 6a07 	vstr	s13, [r4, #28]
 8006256:	441a      	add	r2, r3
 8006258:	6963      	ldr	r3, [r4, #20]
 800625a:	3301      	adds	r3, #1
 800625c:	6022      	str	r2, [r4, #0]
 800625e:	6163      	str	r3, [r4, #20]
 8006260:	69a3      	ldr	r3, [r4, #24]
 8006262:	3b01      	subs	r3, #1
 8006264:	61a3      	str	r3, [r4, #24]
 8006266:	6923      	ldr	r3, [r4, #16]
 8006268:	440b      	add	r3, r1
 800626a:	68e1      	ldr	r1, [r4, #12]
 800626c:	428b      	cmp	r3, r1
 800626e:	6123      	str	r3, [r4, #16]
 8006270:	db15      	blt.n	800629e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8006272:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8006276:	3201      	adds	r2, #1
 8006278:	1a5b      	subs	r3, r3, r1
 800627a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800627e:	6022      	str	r2, [r4, #0]
 8006280:	6123      	str	r3, [r4, #16]
 8006282:	edc4 6a07 	vstr	s13, [r4, #28]
 8006286:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800628a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800628e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8006292:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8006296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800629a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800629e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80062a2:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80062a6:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80062aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062ae:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80062b2:	68a9      	ldr	r1, [r5, #8]
 80062b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062b8:	ed95 6a08 	vldr	s12, [r5, #32]
 80062bc:	edd5 6a07 	vldr	s13, [r5, #28]
 80062c0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80062c4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80062c8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80062cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80062d0:	edc5 6a07 	vstr	s13, [r5, #28]
 80062d4:	441a      	add	r2, r3
 80062d6:	696b      	ldr	r3, [r5, #20]
 80062d8:	3301      	adds	r3, #1
 80062da:	602a      	str	r2, [r5, #0]
 80062dc:	616b      	str	r3, [r5, #20]
 80062de:	69ab      	ldr	r3, [r5, #24]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	61ab      	str	r3, [r5, #24]
 80062e4:	692b      	ldr	r3, [r5, #16]
 80062e6:	440b      	add	r3, r1
 80062e8:	68e9      	ldr	r1, [r5, #12]
 80062ea:	428b      	cmp	r3, r1
 80062ec:	612b      	str	r3, [r5, #16]
 80062ee:	db15      	blt.n	800631c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80062f0:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80062f4:	3201      	adds	r2, #1
 80062f6:	1a5b      	subs	r3, r3, r1
 80062f8:	ee76 6a26 	vadd.f32	s13, s12, s13
 80062fc:	602a      	str	r2, [r5, #0]
 80062fe:	612b      	str	r3, [r5, #16]
 8006300:	edc5 6a07 	vstr	s13, [r5, #28]
 8006304:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8006308:	ee36 7a87 	vadd.f32	s14, s13, s14
 800630c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8006310:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8006314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006318:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800631c:	3f01      	subs	r7, #1
 800631e:	e757      	b.n	80061d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8006320:	4299      	cmp	r1, r3
 8006322:	dc13      	bgt.n	800634c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8006324:	429a      	cmp	r2, r3
 8006326:	da14      	bge.n	8006352 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8006328:	2502      	movs	r5, #2
 800632a:	2703      	movs	r7, #3
 800632c:	f04f 0800 	mov.w	r8, #0
 8006330:	46a9      	mov	r9, r5
 8006332:	f04f 0a01 	mov.w	sl, #1
 8006336:	e6ef      	b.n	8006118 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8006338:	2501      	movs	r5, #1
 800633a:	2700      	movs	r7, #0
 800633c:	46a9      	mov	r9, r5
 800633e:	46b8      	mov	r8, r7
 8006340:	f04f 0a02 	mov.w	sl, #2
 8006344:	e6e8      	b.n	8006118 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8006346:	2501      	movs	r5, #1
 8006348:	2702      	movs	r7, #2
 800634a:	e6e1      	b.n	8006110 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800634c:	2500      	movs	r5, #0
 800634e:	2701      	movs	r7, #1
 8006350:	e7f4      	b.n	800633c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8006352:	2702      	movs	r7, #2
 8006354:	2503      	movs	r5, #3
 8006356:	f04f 0900 	mov.w	r9, #0
 800635a:	46b8      	mov	r8, r7
 800635c:	e7e9      	b.n	8006332 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800635e:	4613      	mov	r3, r2
 8006360:	e728      	b.n	80061b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8006362:	bf00      	nop
 8006364:	200010a8 	.word	0x200010a8
 8006368:	fffd8f01 	.word	0xfffd8f01
 800636c:	00027100 	.word	0x00027100
 8006370:	0004e1ff 	.word	0x0004e1ff
 8006374:	0004e1fe 	.word	0x0004e1fe
 8006378:	200010b0 	.word	0x200010b0
 800637c:	4613      	mov	r3, r2
 800637e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8006380:	469e      	mov	lr, r3
 8006382:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8006384:	469c      	mov	ip, r3
 8006386:	9111      	str	r1, [sp, #68]	; 0x44
 8006388:	f04f 0900 	mov.w	r9, #0
 800638c:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8006390:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8006394:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8006398:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800639c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 80063a0:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80063a4:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 80063a8:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 80063ac:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 80063b0:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 80063b4:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 80063b8:	f1bc 0f00 	cmp.w	ip, #0
 80063bc:	d147      	bne.n	800644e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80063be:	eb03 0c07 	add.w	ip, r3, r7
 80063c2:	1ad7      	subs	r7, r2, r3
 80063c4:	f1b9 0f00 	cmp.w	r9, #0
 80063c8:	d009      	beq.n	80063de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80063ca:	9029      	str	r0, [sp, #164]	; 0xa4
 80063cc:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 80063d0:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 80063d4:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 80063d8:	912d      	str	r1, [sp, #180]	; 0xb4
 80063da:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 80063de:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80063e0:	f04f 0800 	mov.w	r8, #0
 80063e4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80063e8:	9111      	str	r1, [sp, #68]	; 0x44
 80063ea:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80063ee:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80063f2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80063f6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80063fa:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80063fe:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8006402:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8006406:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800640a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800640e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8006412:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8006416:	f1be 0f00 	cmp.w	lr, #0
 800641a:	d031      	beq.n	8006480 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800641c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800641e:	4450      	add	r0, sl
 8006420:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006424:	4431      	add	r1, r6
 8006426:	ee37 7a04 	vadd.f32	s14, s14, s8
 800642a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800642e:	4549      	cmp	r1, r9
 8006430:	db08      	blt.n	8006444 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8006432:	ee77 7a85 	vadd.f32	s15, s15, s10
 8006436:	3001      	adds	r0, #1
 8006438:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800643c:	eba1 0109 	sub.w	r1, r1, r9
 8006440:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006444:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006448:	f04f 0801 	mov.w	r8, #1
 800644c:	e7e3      	b.n	8006416 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800644e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8006450:	4450      	add	r0, sl
 8006452:	ee37 7a24 	vadd.f32	s14, s14, s9
 8006456:	4431      	add	r1, r6
 8006458:	ee77 7a84 	vadd.f32	s15, s15, s8
 800645c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8006460:	4541      	cmp	r1, r8
 8006462:	db08      	blt.n	8006476 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8006464:	ee76 6a85 	vadd.f32	s13, s13, s10
 8006468:	3001      	adds	r0, #1
 800646a:	ee37 7a25 	vadd.f32	s14, s14, s11
 800646e:	eba1 0108 	sub.w	r1, r1, r8
 8006472:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006476:	f10c 3cff 	add.w	ip, ip, #4294967295
 800647a:	f04f 0901 	mov.w	r9, #1
 800647e:	e79b      	b.n	80063b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8006480:	449c      	add	ip, r3
 8006482:	1aff      	subs	r7, r7, r3
 8006484:	f1b8 0f00 	cmp.w	r8, #0
 8006488:	d009      	beq.n	800649e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800648a:	9019      	str	r0, [sp, #100]	; 0x64
 800648c:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8006490:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8006494:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8006498:	911d      	str	r1, [sp, #116]	; 0x74
 800649a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800649e:	1ad2      	subs	r2, r2, r3
 80064a0:	e68b      	b.n	80061ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80064a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064a4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 80d1 	beq.w	800664e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80064ac:	ad19      	add	r5, sp, #100	; 0x64
 80064ae:	ac39      	add	r4, sp, #228	; 0xe4
 80064b0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80064b2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80064b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80064ba:	930c      	str	r3, [sp, #48]	; 0x30
 80064bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80064be:	6963      	ldr	r3, [r4, #20]
 80064c0:	440b      	add	r3, r1
 80064c2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80064c6:	4408      	add	r0, r1
 80064c8:	b200      	sxth	r0, r0
 80064ca:	4283      	cmp	r3, r0
 80064cc:	900d      	str	r0, [sp, #52]	; 0x34
 80064ce:	f280 80c1 	bge.w	8006654 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80064d2:	428b      	cmp	r3, r1
 80064d4:	da08      	bge.n	80064e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80064d6:	2a00      	cmp	r2, #0
 80064d8:	dd06      	ble.n	80064e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80064da:	1acb      	subs	r3, r1, r3
 80064dc:	429a      	cmp	r2, r3
 80064de:	f2c0 80bb 	blt.w	8006658 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f300 80b9 	bgt.w	800665a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80064e8:	6967      	ldr	r7, [r4, #20]
 80064ea:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80064ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064f0:	443b      	add	r3, r7
 80064f2:	461f      	mov	r7, r3
 80064f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064f6:	1bdf      	subs	r7, r3, r7
 80064f8:	4297      	cmp	r7, r2
 80064fa:	bfa8      	it	ge
 80064fc:	4617      	movge	r7, r2
 80064fe:	2f00      	cmp	r7, #0
 8006500:	f340 813c 	ble.w	800677c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8006504:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8006506:	6829      	ldr	r1, [r5, #0]
 8006508:	f9b3 2000 	ldrsh.w	r2, [r3]
 800650c:	f9bb 3000 	ldrsh.w	r3, [fp]
 8006510:	4411      	add	r1, r2
 8006512:	6820      	ldr	r0, [r4, #0]
 8006514:	4299      	cmp	r1, r3
 8006516:	dd1a      	ble.n	800654e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8006518:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800651c:	4402      	add	r2, r0
 800651e:	440b      	add	r3, r1
 8006520:	b21b      	sxth	r3, r3
 8006522:	429a      	cmp	r2, r3
 8006524:	dc13      	bgt.n	800654e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8006526:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006528:	a912      	add	r1, sp, #72	; 0x48
 800652a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800652c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	9206      	str	r2, [sp, #24]
 8006532:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006534:	9500      	str	r5, [sp, #0]
 8006536:	9205      	str	r2, [sp, #20]
 8006538:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800653a:	e9cd b203 	strd	fp, r2, [sp, #12]
 800653e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8006540:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8006544:	aa49      	add	r2, sp, #292	; 0x124
 8006546:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 800654a:	4623      	mov	r3, r4
 800654c:	47c8      	blx	r9
 800654e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8006552:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8006556:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800655a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800655e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8006562:	68a1      	ldr	r1, [r4, #8]
 8006564:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006568:	ed94 6a08 	vldr	s12, [r4, #32]
 800656c:	edd4 6a07 	vldr	s13, [r4, #28]
 8006570:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8006574:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006578:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800657c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006580:	edc4 6a07 	vstr	s13, [r4, #28]
 8006584:	441a      	add	r2, r3
 8006586:	6963      	ldr	r3, [r4, #20]
 8006588:	3301      	adds	r3, #1
 800658a:	6022      	str	r2, [r4, #0]
 800658c:	6163      	str	r3, [r4, #20]
 800658e:	69a3      	ldr	r3, [r4, #24]
 8006590:	3b01      	subs	r3, #1
 8006592:	61a3      	str	r3, [r4, #24]
 8006594:	6923      	ldr	r3, [r4, #16]
 8006596:	440b      	add	r3, r1
 8006598:	68e1      	ldr	r1, [r4, #12]
 800659a:	428b      	cmp	r3, r1
 800659c:	6123      	str	r3, [r4, #16]
 800659e:	db15      	blt.n	80065cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80065a0:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80065a4:	3201      	adds	r2, #1
 80065a6:	1a5b      	subs	r3, r3, r1
 80065a8:	ee76 6a26 	vadd.f32	s13, s12, s13
 80065ac:	6022      	str	r2, [r4, #0]
 80065ae:	6123      	str	r3, [r4, #16]
 80065b0:	edc4 6a07 	vstr	s13, [r4, #28]
 80065b4:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80065b8:	ee36 7a87 	vadd.f32	s14, s13, s14
 80065bc:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80065c0:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80065c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065c8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80065cc:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80065d0:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80065d4:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80065d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80065dc:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80065e0:	68a9      	ldr	r1, [r5, #8]
 80065e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065e6:	ed95 6a08 	vldr	s12, [r5, #32]
 80065ea:	edd5 6a07 	vldr	s13, [r5, #28]
 80065ee:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80065f2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80065f6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80065fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80065fe:	edc5 6a07 	vstr	s13, [r5, #28]
 8006602:	441a      	add	r2, r3
 8006604:	696b      	ldr	r3, [r5, #20]
 8006606:	3301      	adds	r3, #1
 8006608:	602a      	str	r2, [r5, #0]
 800660a:	616b      	str	r3, [r5, #20]
 800660c:	69ab      	ldr	r3, [r5, #24]
 800660e:	3b01      	subs	r3, #1
 8006610:	61ab      	str	r3, [r5, #24]
 8006612:	692b      	ldr	r3, [r5, #16]
 8006614:	440b      	add	r3, r1
 8006616:	68e9      	ldr	r1, [r5, #12]
 8006618:	428b      	cmp	r3, r1
 800661a:	612b      	str	r3, [r5, #16]
 800661c:	db15      	blt.n	800664a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800661e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8006622:	3201      	adds	r2, #1
 8006624:	1a5b      	subs	r3, r3, r1
 8006626:	ee76 6a26 	vadd.f32	s13, s12, s13
 800662a:	602a      	str	r2, [r5, #0]
 800662c:	612b      	str	r3, [r5, #16]
 800662e:	edc5 6a07 	vstr	s13, [r5, #28]
 8006632:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8006636:	ee36 7a87 	vadd.f32	s14, s13, s14
 800663a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800663e:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8006642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006646:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800664a:	3f01      	subs	r7, #1
 800664c:	e757      	b.n	80064fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800664e:	ad39      	add	r5, sp, #228	; 0xe4
 8006650:	ac19      	add	r4, sp, #100	; 0x64
 8006652:	e72d      	b.n	80064b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8006654:	4613      	mov	r3, r2
 8006656:	e744      	b.n	80064e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8006658:	4613      	mov	r3, r2
 800665a:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800665c:	469e      	mov	lr, r3
 800665e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8006662:	461f      	mov	r7, r3
 8006664:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8006668:	f04f 0900 	mov.w	r9, #0
 800666c:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8006670:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8006674:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8006678:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 800667c:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8006680:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8006682:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8006686:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800668a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 800668e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8006692:	960e      	str	r6, [sp, #56]	; 0x38
 8006694:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8006698:	2f00      	cmp	r7, #0
 800669a:	d146      	bne.n	800672a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800669c:	449c      	add	ip, r3
 800669e:	1ad7      	subs	r7, r2, r3
 80066a0:	f1b9 0f00 	cmp.w	r9, #0
 80066a4:	d009      	beq.n	80066ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80066a6:	9039      	str	r0, [sp, #228]	; 0xe4
 80066a8:	913d      	str	r1, [sp, #244]	; 0xf4
 80066aa:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 80066ae:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 80066b2:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80066b6:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 80066ba:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80066bc:	f04f 0800 	mov.w	r8, #0
 80066c0:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80066c4:	910e      	str	r1, [sp, #56]	; 0x38
 80066c6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80066ca:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80066ce:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80066d2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80066d6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80066da:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80066de:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80066e2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80066e6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80066ea:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80066ee:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80066f2:	f1be 0f00 	cmp.w	lr, #0
 80066f6:	d030      	beq.n	800675a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80066f8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80066fa:	4450      	add	r0, sl
 80066fc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006700:	4431      	add	r1, r6
 8006702:	ee37 7a04 	vadd.f32	s14, s14, s8
 8006706:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800670a:	4549      	cmp	r1, r9
 800670c:	db08      	blt.n	8006720 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800670e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8006712:	3001      	adds	r0, #1
 8006714:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8006718:	eba1 0109 	sub.w	r1, r1, r9
 800671c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006720:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006724:	f04f 0801 	mov.w	r8, #1
 8006728:	e7e3      	b.n	80066f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800672a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800672c:	4450      	add	r0, sl
 800672e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8006732:	4431      	add	r1, r6
 8006734:	ee77 7a84 	vadd.f32	s15, s15, s8
 8006738:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800673c:	4541      	cmp	r1, r8
 800673e:	db08      	blt.n	8006752 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8006740:	ee76 6a85 	vadd.f32	s13, s13, s10
 8006744:	3001      	adds	r0, #1
 8006746:	ee37 7a25 	vadd.f32	s14, s14, s11
 800674a:	eba1 0108 	sub.w	r1, r1, r8
 800674e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006752:	3f01      	subs	r7, #1
 8006754:	f04f 0901 	mov.w	r9, #1
 8006758:	e79e      	b.n	8006698 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800675a:	449c      	add	ip, r3
 800675c:	1aff      	subs	r7, r7, r3
 800675e:	f1b8 0f00 	cmp.w	r8, #0
 8006762:	d009      	beq.n	8006778 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8006764:	9019      	str	r0, [sp, #100]	; 0x64
 8006766:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800676a:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800676e:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8006772:	911d      	str	r1, [sp, #116]	; 0x74
 8006774:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8006778:	1ad2      	subs	r2, r2, r3
 800677a:	e6b5      	b.n	80064e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800677c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	b923      	cbnz	r3, 800678c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8006782:	4b04      	ldr	r3, [pc, #16]	; (8006794 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8006784:	6818      	ldr	r0, [r3, #0]
 8006786:	6803      	ldr	r3, [r0, #0]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	4798      	blx	r3
 800678c:	b05b      	add	sp, #364	; 0x16c
 800678e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006792:	bf00      	nop
 8006794:	200010b0 	.word	0x200010b0

08006798 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8006798:	2b02      	cmp	r3, #2
 800679a:	b510      	push	{r4, lr}
 800679c:	f9b0 4000 	ldrsh.w	r4, [r0]
 80067a0:	d00b      	beq.n	80067ba <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	d00e      	beq.n	80067c4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d001      	beq.n	80067ae <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 80067aa:	1860      	adds	r0, r4, r1
 80067ac:	bd10      	pop	{r4, pc}
 80067ae:	8880      	ldrh	r0, [r0, #4]
 80067b0:	4420      	add	r0, r4
 80067b2:	b200      	sxth	r0, r0
 80067b4:	1a80      	subs	r0, r0, r2
 80067b6:	3801      	subs	r0, #1
 80067b8:	e7f8      	b.n	80067ac <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 80067ba:	8880      	ldrh	r0, [r0, #4]
 80067bc:	4420      	add	r0, r4
 80067be:	b200      	sxth	r0, r0
 80067c0:	1a40      	subs	r0, r0, r1
 80067c2:	e7f8      	b.n	80067b6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80067c4:	18a0      	adds	r0, r4, r2
 80067c6:	e7f1      	b.n	80067ac <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

080067c8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	b510      	push	{r4, lr}
 80067cc:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80067d0:	d006      	beq.n	80067e0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	d00a      	beq.n	80067ec <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	bf14      	ite	ne
 80067da:	18a0      	addne	r0, r4, r2
 80067dc:	1860      	addeq	r0, r4, r1
 80067de:	bd10      	pop	{r4, pc}
 80067e0:	88c0      	ldrh	r0, [r0, #6]
 80067e2:	4420      	add	r0, r4
 80067e4:	b200      	sxth	r0, r0
 80067e6:	1a80      	subs	r0, r0, r2
 80067e8:	3801      	subs	r0, #1
 80067ea:	e7f8      	b.n	80067de <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 80067ec:	88c0      	ldrh	r0, [r0, #6]
 80067ee:	4420      	add	r0, r4
 80067f0:	b200      	sxth	r0, r0
 80067f2:	1a40      	subs	r0, r0, r1
 80067f4:	e7f8      	b.n	80067e8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

080067f8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80067f8:	4b01      	ldr	r3, [pc, #4]	; (8006800 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	4770      	bx	lr
 8006800:	200010b8 	.word	0x200010b8

08006804 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8006804:	4603      	mov	r3, r0
 8006806:	b1c8      	cbz	r0, 800683c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8006808:	0c02      	lsrs	r2, r0, #16
 800680a:	0412      	lsls	r2, r2, #16
 800680c:	b9a2      	cbnz	r2, 8006838 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800680e:	0403      	lsls	r3, r0, #16
 8006810:	2010      	movs	r0, #16
 8006812:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006816:	bf04      	itt	eq
 8006818:	021b      	lsleq	r3, r3, #8
 800681a:	3008      	addeq	r0, #8
 800681c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006820:	bf04      	itt	eq
 8006822:	011b      	lsleq	r3, r3, #4
 8006824:	3004      	addeq	r0, #4
 8006826:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800682a:	bf04      	itt	eq
 800682c:	009b      	lsleq	r3, r3, #2
 800682e:	3002      	addeq	r0, #2
 8006830:	2b00      	cmp	r3, #0
 8006832:	db04      	blt.n	800683e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8006834:	3001      	adds	r0, #1
 8006836:	4770      	bx	lr
 8006838:	2000      	movs	r0, #0
 800683a:	e7ea      	b.n	8006812 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800683c:	2020      	movs	r0, #32
 800683e:	4770      	bx	lr

08006840 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8006840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006844:	b087      	sub	sp, #28
 8006846:	4681      	mov	r9, r0
 8006848:	4698      	mov	r8, r3
 800684a:	4610      	mov	r0, r2
 800684c:	460d      	mov	r5, r1
 800684e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8006852:	b981      	cbnz	r1, 8006876 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8006854:	b14b      	cbz	r3, 800686a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8006856:	460b      	mov	r3, r1
 8006858:	464a      	mov	r2, r9
 800685a:	4641      	mov	r1, r8
 800685c:	e9cd 4700 	strd	r4, r7, [sp]
 8006860:	f7ff ffee 	bl	8006840 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8006864:	b007      	add	sp, #28
 8006866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800686a:	f04f 33ff 	mov.w	r3, #4294967295
 800686e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8006872:	603b      	str	r3, [r7, #0]
 8006874:	e7f6      	b.n	8006864 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8006876:	fa32 fa01 	lsrs.w	sl, r2, r1
 800687a:	d107      	bne.n	800688c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 800687c:	fb09 f602 	mul.w	r6, r9, r2
 8006880:	fbb6 f0f4 	udiv	r0, r6, r4
 8006884:	fb04 6610 	mls	r6, r4, r0, r6
 8006888:	603e      	str	r6, [r7, #0]
 800688a:	e7eb      	b.n	8006864 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800688c:	2601      	movs	r6, #1
 800688e:	fa09 fb01 	lsl.w	fp, r9, r1
 8006892:	408e      	lsls	r6, r1
 8006894:	fbbb f3f4 	udiv	r3, fp, r4
 8006898:	3e01      	subs	r6, #1
 800689a:	9302      	str	r3, [sp, #8]
 800689c:	fb0a f303 	mul.w	r3, sl, r3
 80068a0:	4016      	ands	r6, r2
 80068a2:	9303      	str	r3, [sp, #12]
 80068a4:	4630      	mov	r0, r6
 80068a6:	f7ff ffad 	bl	8006804 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80068aa:	464a      	mov	r2, r9
 80068ac:	460b      	mov	r3, r1
 80068ae:	4601      	mov	r1, r0
 80068b0:	4630      	mov	r0, r6
 80068b2:	e9cd 4700 	strd	r4, r7, [sp]
 80068b6:	f7ff ffc3 	bl	8006840 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80068ba:	9b02      	ldr	r3, [sp, #8]
 80068bc:	4606      	mov	r6, r0
 80068be:	eb05 0108 	add.w	r1, r5, r8
 80068c2:	fb04 bb13 	mls	fp, r4, r3, fp
 80068c6:	4658      	mov	r0, fp
 80068c8:	f7ff ff9c 	bl	8006804 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80068cc:	ab05      	add	r3, sp, #20
 80068ce:	465a      	mov	r2, fp
 80068d0:	e9cd 4300 	strd	r4, r3, [sp]
 80068d4:	4603      	mov	r3, r0
 80068d6:	4650      	mov	r0, sl
 80068d8:	f7ff ffb2 	bl	8006840 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80068dc:	6839      	ldr	r1, [r7, #0]
 80068de:	9a05      	ldr	r2, [sp, #20]
 80068e0:	9b03      	ldr	r3, [sp, #12]
 80068e2:	4411      	add	r1, r2
 80068e4:	fbb1 f2f4 	udiv	r2, r1, r4
 80068e8:	18d3      	adds	r3, r2, r3
 80068ea:	fb04 1412 	mls	r4, r4, r2, r1
 80068ee:	441e      	add	r6, r3
 80068f0:	603c      	str	r4, [r7, #0]
 80068f2:	4430      	add	r0, r6
 80068f4:	e7b6      	b.n	8006864 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

080068f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80068f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068fa:	b085      	sub	sp, #20
 80068fc:	f1b0 0900 	subs.w	r9, r0, #0
 8006900:	461d      	mov	r5, r3
 8006902:	4617      	mov	r7, r2
 8006904:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006906:	bfbb      	ittet	lt
 8006908:	f1c9 0900 	rsblt	r9, r9, #0
 800690c:	f04f 36ff 	movlt.w	r6, #4294967295
 8006910:	2601      	movge	r6, #1
 8006912:	6823      	ldrlt	r3, [r4, #0]
 8006914:	bfbc      	itt	lt
 8006916:	425b      	neglt	r3, r3
 8006918:	6023      	strlt	r3, [r4, #0]
 800691a:	2a00      	cmp	r2, #0
 800691c:	da04      	bge.n	8006928 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800691e:	6823      	ldr	r3, [r4, #0]
 8006920:	4257      	negs	r7, r2
 8006922:	4276      	negs	r6, r6
 8006924:	425b      	negs	r3, r3
 8006926:	6023      	str	r3, [r4, #0]
 8006928:	2d00      	cmp	r5, #0
 800692a:	4638      	mov	r0, r7
 800692c:	bfba      	itte	lt
 800692e:	426d      	neglt	r5, r5
 8006930:	f04f 38ff 	movlt.w	r8, #4294967295
 8006934:	f04f 0801 	movge.w	r8, #1
 8006938:	f7ff ff64 	bl	8006804 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800693c:	ab03      	add	r3, sp, #12
 800693e:	463a      	mov	r2, r7
 8006940:	e9cd 5300 	strd	r5, r3, [sp]
 8006944:	4603      	mov	r3, r0
 8006946:	4648      	mov	r0, r9
 8006948:	f7ff ff7a 	bl	8006840 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	9a03      	ldr	r2, [sp, #12]
 8006950:	4546      	cmp	r6, r8
 8006952:	441a      	add	r2, r3
 8006954:	fb92 f3f5 	sdiv	r3, r2, r5
 8006958:	4418      	add	r0, r3
 800695a:	fb05 2313 	mls	r3, r5, r3, r2
 800695e:	bf18      	it	ne
 8006960:	4240      	negne	r0, r0
 8006962:	1c72      	adds	r2, r6, #1
 8006964:	6023      	str	r3, [r4, #0]
 8006966:	d105      	bne.n	8006974 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8006968:	2b00      	cmp	r3, #0
 800696a:	f1c3 0200 	rsb	r2, r3, #0
 800696e:	db0b      	blt.n	8006988 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8006970:	6022      	str	r2, [r4, #0]
 8006972:	e006      	b.n	8006982 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8006974:	2e01      	cmp	r6, #1
 8006976:	d104      	bne.n	8006982 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8006978:	2b00      	cmp	r3, #0
 800697a:	da02      	bge.n	8006982 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800697c:	442b      	add	r3, r5
 800697e:	3801      	subs	r0, #1
 8006980:	6023      	str	r3, [r4, #0]
 8006982:	b005      	add	sp, #20
 8006984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006988:	3801      	subs	r0, #1
 800698a:	1b52      	subs	r2, r2, r5
 800698c:	e7f0      	b.n	8006970 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08006990 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8006990:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006994:	4c1c      	ldr	r4, [pc, #112]	; (8006a08 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8006996:	4605      	mov	r5, r0
 8006998:	6807      	ldr	r7, [r0, #0]
 800699a:	69a3      	ldr	r3, [r4, #24]
 800699c:	b92b      	cbnz	r3, 80069aa <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800699e:	6840      	ldr	r0, [r0, #4]
 80069a0:	e9c5 7000 	strd	r7, r0, [r5]
 80069a4:	b004      	add	sp, #16
 80069a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069aa:	f04f 0802 	mov.w	r8, #2
 80069ae:	68a2      	ldr	r2, [r4, #8]
 80069b0:	ae04      	add	r6, sp, #16
 80069b2:	6820      	ldr	r0, [r4, #0]
 80069b4:	fb93 f1f8 	sdiv	r1, r3, r8
 80069b8:	440a      	add	r2, r1
 80069ba:	69e1      	ldr	r1, [r4, #28]
 80069bc:	f846 2d04 	str.w	r2, [r6, #-4]!
 80069c0:	463a      	mov	r2, r7
 80069c2:	9600      	str	r6, [sp, #0]
 80069c4:	f7ff ff97 	bl	80068f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80069c8:	69a3      	ldr	r3, [r4, #24]
 80069ca:	4607      	mov	r7, r0
 80069cc:	686a      	ldr	r2, [r5, #4]
 80069ce:	6a21      	ldr	r1, [r4, #32]
 80069d0:	9600      	str	r6, [sp, #0]
 80069d2:	6860      	ldr	r0, [r4, #4]
 80069d4:	f7ff ff8f 	bl	80068f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80069d8:	69a3      	ldr	r3, [r4, #24]
 80069da:	6962      	ldr	r2, [r4, #20]
 80069dc:	4407      	add	r7, r0
 80069de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80069e0:	9600      	str	r6, [sp, #0]
 80069e2:	68e0      	ldr	r0, [r4, #12]
 80069e4:	fb93 f8f8 	sdiv	r8, r3, r8
 80069e8:	4442      	add	r2, r8
 80069ea:	9203      	str	r2, [sp, #12]
 80069ec:	682a      	ldr	r2, [r5, #0]
 80069ee:	f7ff ff82 	bl	80068f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80069f2:	4680      	mov	r8, r0
 80069f4:	9600      	str	r6, [sp, #0]
 80069f6:	69a3      	ldr	r3, [r4, #24]
 80069f8:	686a      	ldr	r2, [r5, #4]
 80069fa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80069fc:	6920      	ldr	r0, [r4, #16]
 80069fe:	f7ff ff7a 	bl	80068f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8006a02:	4440      	add	r0, r8
 8006a04:	e7cc      	b.n	80069a0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8006a06:	bf00      	nop
 8006a08:	200010bc 	.word	0x200010bc

08006a0c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8006a0c:	4b07      	ldr	r3, [pc, #28]	; (8006a2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8006a0e:	b510      	push	{r4, lr}
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d108      	bne.n	8006a28 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8006a16:	4b06      	ldr	r3, [pc, #24]	; (8006a30 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8006a18:	880c      	ldrh	r4, [r1, #0]
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8006a20:	3b01      	subs	r3, #1
 8006a22:	1b1b      	subs	r3, r3, r4
 8006a24:	8003      	strh	r3, [r0, #0]
 8006a26:	800a      	strh	r2, [r1, #0]
 8006a28:	bd10      	pop	{r4, pc}
 8006a2a:	bf00      	nop
 8006a2c:	200010a8 	.word	0x200010a8
 8006a30:	200010ac 	.word	0x200010ac

08006a34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8006a34:	4b07      	ldr	r3, [pc, #28]	; (8006a54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8006a36:	b510      	push	{r4, lr}
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d108      	bne.n	8006a50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8006a3e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8006a42:	f9b0 4000 	ldrsh.w	r4, [r0]
 8006a46:	8003      	strh	r3, [r0, #0]
 8006a48:	8893      	ldrh	r3, [r2, #4]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	1b1b      	subs	r3, r3, r4
 8006a4e:	800b      	strh	r3, [r1, #0]
 8006a50:	bd10      	pop	{r4, pc}
 8006a52:	bf00      	nop
 8006a54:	200010a8 	.word	0x200010a8

08006a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8006a58:	4b08      	ldr	r3, [pc, #32]	; (8006a7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8006a5a:	b513      	push	{r0, r1, r4, lr}
 8006a5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006a60:	2400      	movs	r4, #0
 8006a62:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8006a64:	f8ad 2004 	strh.w	r2, [sp, #4]
 8006a68:	466a      	mov	r2, sp
 8006a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a6e:	9400      	str	r4, [sp, #0]
 8006a70:	f8ad 3006 	strh.w	r3, [sp, #6]
 8006a74:	f7ff ffde 	bl	8006a34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8006a78:	b002      	add	sp, #8
 8006a7a:	bd10      	pop	{r4, pc}
 8006a7c:	200010a4 	.word	0x200010a4
 8006a80:	200010a6 	.word	0x200010a6

08006a84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8006a84:	4b0a      	ldr	r3, [pc, #40]	; (8006ab0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8006a86:	460a      	mov	r2, r1
 8006a88:	b510      	push	{r4, lr}
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d10d      	bne.n	8006aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8006a90:	8881      	ldrh	r1, [r0, #4]
 8006a92:	8803      	ldrh	r3, [r0, #0]
 8006a94:	440b      	add	r3, r1
 8006a96:	4601      	mov	r1, r0
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	f821 3b02 	strh.w	r3, [r1], #2
 8006a9e:	f7ff ffc9 	bl	8006a34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8006aa2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8006aa6:	88c2      	ldrh	r2, [r0, #6]
 8006aa8:	80c3      	strh	r3, [r0, #6]
 8006aaa:	8082      	strh	r2, [r0, #4]
 8006aac:	bd10      	pop	{r4, pc}
 8006aae:	bf00      	nop
 8006ab0:	200010a8 	.word	0x200010a8

08006ab4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8006ab4:	4b09      	ldr	r3, [pc, #36]	; (8006adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8006ab6:	b507      	push	{r0, r1, r2, lr}
 8006ab8:	2100      	movs	r1, #0
 8006aba:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006abe:	4b08      	ldr	r3, [pc, #32]	; (8006ae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8006ac0:	9100      	str	r1, [sp, #0]
 8006ac2:	4669      	mov	r1, sp
 8006ac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ac8:	f8ad 2004 	strh.w	r2, [sp, #4]
 8006acc:	f8ad 3006 	strh.w	r3, [sp, #6]
 8006ad0:	f7ff ffd8 	bl	8006a84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8006ad4:	b003      	add	sp, #12
 8006ad6:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ada:	bf00      	nop
 8006adc:	200010a4 	.word	0x200010a4
 8006ae0:	200010a6 	.word	0x200010a6

08006ae4 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8006ae4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	dd06      	ble.n	8006afa <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8006aec:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8006af0:	2800      	cmp	r0, #0
 8006af2:	bfcc      	ite	gt
 8006af4:	2000      	movgt	r0, #0
 8006af6:	2001      	movle	r0, #1
 8006af8:	4770      	bx	lr
 8006afa:	2001      	movs	r0, #1
 8006afc:	4770      	bx	lr
	...

08006b00 <_ZN8touchgfx11Application11getInstanceEv>:
 8006b00:	4b01      	ldr	r3, [pc, #4]	; (8006b08 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8006b02:	6818      	ldr	r0, [r3, #0]
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	200010f0 	.word	0x200010f0

08006b0c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8006b0c:	4b03      	ldr	r3, [pc, #12]	; (8006b1c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	801a      	strh	r2, [r3, #0]
 8006b12:	805a      	strh	r2, [r3, #2]
 8006b14:	809a      	strh	r2, [r3, #4]
 8006b16:	80da      	strh	r2, [r3, #6]
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	200010e8 	.word	0x200010e8

08006b20 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8006b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b24:	b099      	sub	sp, #100	; 0x64
 8006b26:	4607      	mov	r7, r0
 8006b28:	4614      	mov	r4, r2
 8006b2a:	461d      	mov	r5, r3
 8006b2c:	a802      	add	r0, sp, #8
 8006b2e:	468a      	mov	sl, r1
 8006b30:	f000 f996 	bl	8006e60 <_ZN8touchgfx12TextProviderC1Ev>
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	4638      	mov	r0, r7
 8006b38:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8006b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b3e:	4798      	blx	r3
 8006b40:	462a      	mov	r2, r5
 8006b42:	2500      	movs	r5, #0
 8006b44:	4621      	mov	r1, r4
 8006b46:	4603      	mov	r3, r0
 8006b48:	a802      	add	r0, sp, #8
 8006b4a:	462c      	mov	r4, r5
 8006b4c:	46a9      	mov	r9, r5
 8006b4e:	46a8      	mov	r8, r5
 8006b50:	f000 f9cb 	bl	8006eea <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8006b54:	2300      	movs	r3, #0
 8006b56:	9301      	str	r3, [sp, #4]
 8006b58:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8006b5c:	429c      	cmp	r4, r3
 8006b5e:	d002      	beq.n	8006b66 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 8006b60:	455c      	cmp	r4, fp
 8006b62:	bf18      	it	ne
 8006b64:	4625      	movne	r5, r4
 8006b66:	ab01      	add	r3, sp, #4
 8006b68:	463a      	mov	r2, r7
 8006b6a:	4651      	mov	r1, sl
 8006b6c:	a802      	add	r0, sp, #8
 8006b6e:	f000 fcb7 	bl	80074e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8006b72:	4604      	mov	r4, r0
 8006b74:	b108      	cbz	r0, 8006b7a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 8006b76:	280a      	cmp	r0, #10
 8006b78:	d10a      	bne.n	8006b90 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 8006b7a:	45c1      	cmp	r9, r8
 8006b7c:	bf38      	it	cc
 8006b7e:	46c1      	movcc	r9, r8
 8006b80:	f04f 0800 	mov.w	r8, #0
 8006b84:	2c00      	cmp	r4, #0
 8006b86:	d1e5      	bne.n	8006b54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8006b88:	4648      	mov	r0, r9
 8006b8a:	b019      	add	sp, #100	; 0x64
 8006b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b90:	9a01      	ldr	r2, [sp, #4]
 8006b92:	2a00      	cmp	r2, #0
 8006b94:	d0de      	beq.n	8006b54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8006b96:	7b56      	ldrb	r6, [r2, #13]
 8006b98:	4629      	mov	r1, r5
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	0076      	lsls	r6, r6, #1
 8006b9e:	8894      	ldrh	r4, [r2, #4]
 8006ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba2:	f406 7080 	and.w	r0, r6, #256	; 0x100
 8006ba6:	7a96      	ldrb	r6, [r2, #10]
 8006ba8:	4306      	orrs	r6, r0
 8006baa:	4638      	mov	r0, r7
 8006bac:	4798      	blx	r3
 8006bae:	4430      	add	r0, r6
 8006bb0:	4480      	add	r8, r0
 8006bb2:	fa1f f888 	uxth.w	r8, r8
 8006bb6:	e7e5      	b.n	8006b84 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

08006bb8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8006bb8:	b508      	push	{r3, lr}
 8006bba:	6803      	ldr	r3, [r0, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	4798      	blx	r3
 8006bc0:	b128      	cbz	r0, 8006bce <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8006bc2:	7b43      	ldrb	r3, [r0, #13]
 8006bc4:	7a80      	ldrb	r0, [r0, #10]
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bcc:	4318      	orrs	r0, r3
 8006bce:	bd08      	pop	{r3, pc}

08006bd0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8006bd0:	b40e      	push	{r1, r2, r3}
 8006bd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bd4:	b098      	sub	sp, #96	; 0x60
 8006bd6:	4605      	mov	r5, r0
 8006bd8:	ab1d      	add	r3, sp, #116	; 0x74
 8006bda:	a802      	add	r0, sp, #8
 8006bdc:	ae18      	add	r6, sp, #96	; 0x60
 8006bde:	f853 4b04 	ldr.w	r4, [r3], #4
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	f000 f93c 	bl	8006e60 <_ZN8touchgfx12TextProviderC1Ev>
 8006be8:	682b      	ldr	r3, [r5, #0]
 8006bea:	4628      	mov	r0, r5
 8006bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bee:	4798      	blx	r3
 8006bf0:	4621      	mov	r1, r4
 8006bf2:	2400      	movs	r4, #0
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	9a00      	ldr	r2, [sp, #0]
 8006bf8:	a802      	add	r0, sp, #8
 8006bfa:	f000 f976 	bl	8006eea <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8006bfe:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8006c02:	462a      	mov	r2, r5
 8006c04:	4633      	mov	r3, r6
 8006c06:	4621      	mov	r1, r4
 8006c08:	a802      	add	r0, sp, #8
 8006c0a:	f000 fc69 	bl	80074e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8006c0e:	b300      	cbz	r0, 8006c52 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8006c10:	280a      	cmp	r0, #10
 8006c12:	d01a      	beq.n	8006c4a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 8006c14:	9f01      	ldr	r7, [sp, #4]
 8006c16:	b1c7      	cbz	r7, 8006c4a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 8006c18:	7b78      	ldrb	r0, [r7, #13]
 8006c1a:	7a3b      	ldrb	r3, [r7, #8]
 8006c1c:	00c1      	lsls	r1, r0, #3
 8006c1e:	88aa      	ldrh	r2, [r5, #4]
 8006c20:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8006c24:	4319      	orrs	r1, r3
 8006c26:	0643      	lsls	r3, r0, #25
 8006c28:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8006c2c:	bf48      	it	mi
 8006c2e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8006c32:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8006c36:	bf48      	it	mi
 8006c38:	b219      	sxthmi	r1, r3
 8006c3a:	79fb      	ldrb	r3, [r7, #7]
 8006c3c:	4303      	orrs	r3, r0
 8006c3e:	4413      	add	r3, r2
 8006c40:	1a5b      	subs	r3, r3, r1
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	42a3      	cmp	r3, r4
 8006c46:	bfc8      	it	gt
 8006c48:	b21c      	sxthgt	r4, r3
 8006c4a:	4633      	mov	r3, r6
 8006c4c:	462a      	mov	r2, r5
 8006c4e:	2100      	movs	r1, #0
 8006c50:	e7da      	b.n	8006c08 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 8006c52:	b2a0      	uxth	r0, r4
 8006c54:	b018      	add	sp, #96	; 0x60
 8006c56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006c5a:	b003      	add	sp, #12
 8006c5c:	4770      	bx	lr

08006c5e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8006c5e:	b40e      	push	{r1, r2, r3}
 8006c60:	b530      	push	{r4, r5, lr}
 8006c62:	b098      	sub	sp, #96	; 0x60
 8006c64:	4604      	mov	r4, r0
 8006c66:	ab1b      	add	r3, sp, #108	; 0x6c
 8006c68:	a802      	add	r0, sp, #8
 8006c6a:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c6e:	9301      	str	r3, [sp, #4]
 8006c70:	f000 f8f6 	bl	8006e60 <_ZN8touchgfx12TextProviderC1Ev>
 8006c74:	6823      	ldr	r3, [r4, #0]
 8006c76:	4620      	mov	r0, r4
 8006c78:	2401      	movs	r4, #1
 8006c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7c:	4798      	blx	r3
 8006c7e:	9a01      	ldr	r2, [sp, #4]
 8006c80:	4603      	mov	r3, r0
 8006c82:	4629      	mov	r1, r5
 8006c84:	a802      	add	r0, sp, #8
 8006c86:	f000 f930 	bl	8006eea <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8006c8a:	a802      	add	r0, sp, #8
 8006c8c:	f000 fcc6 	bl	800761c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8006c90:	b2a3      	uxth	r3, r4
 8006c92:	b138      	cbz	r0, 8006ca4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 8006c94:	280a      	cmp	r0, #10
 8006c96:	a802      	add	r0, sp, #8
 8006c98:	bf04      	itt	eq
 8006c9a:	3301      	addeq	r3, #1
 8006c9c:	b21c      	sxtheq	r4, r3
 8006c9e:	f000 fcbd 	bl	800761c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8006ca2:	e7f5      	b.n	8006c90 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	b018      	add	sp, #96	; 0x60
 8006ca8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cac:	b003      	add	sp, #12
 8006cae:	4770      	bx	lr

08006cb0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8006cb0:	b40e      	push	{r1, r2, r3}
 8006cb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cb4:	b098      	sub	sp, #96	; 0x60
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	26ff      	movs	r6, #255	; 0xff
 8006cba:	ab1d      	add	r3, sp, #116	; 0x74
 8006cbc:	a802      	add	r0, sp, #8
 8006cbe:	f853 5b04 	ldr.w	r5, [r3], #4
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	f000 f8cc 	bl	8006e60 <_ZN8touchgfx12TextProviderC1Ev>
 8006cc8:	6823      	ldr	r3, [r4, #0]
 8006cca:	4620      	mov	r0, r4
 8006ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cce:	4798      	blx	r3
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	9a00      	ldr	r2, [sp, #0]
 8006cd6:	a802      	add	r0, sp, #8
 8006cd8:	ad18      	add	r5, sp, #96	; 0x60
 8006cda:	f000 f906 	bl	8006eea <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8006cde:	2100      	movs	r1, #0
 8006ce0:	4622      	mov	r2, r4
 8006ce2:	a802      	add	r0, sp, #8
 8006ce4:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8006ce8:	462b      	mov	r3, r5
 8006cea:	f000 fbf9 	bl	80074e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8006cee:	b1d8      	cbz	r0, 8006d28 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8006cf0:	280a      	cmp	r0, #10
 8006cf2:	d012      	beq.n	8006d1a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8006cf4:	9801      	ldr	r0, [sp, #4]
 8006cf6:	b180      	cbz	r0, 8006d1a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8006cf8:	7b47      	ldrb	r7, [r0, #13]
 8006cfa:	7922      	ldrb	r2, [r4, #4]
 8006cfc:	00fb      	lsls	r3, r7, #3
 8006cfe:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8006d02:	7a03      	ldrb	r3, [r0, #8]
 8006d04:	430b      	orrs	r3, r1
 8006d06:	0679      	lsls	r1, r7, #25
 8006d08:	bf44      	itt	mi
 8006d0a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8006d0e:	b21b      	sxthmi	r3, r3
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	429e      	cmp	r6, r3
 8006d16:	bf28      	it	cs
 8006d18:	461e      	movcs	r6, r3
 8006d1a:	462b      	mov	r3, r5
 8006d1c:	4622      	mov	r2, r4
 8006d1e:	2100      	movs	r1, #0
 8006d20:	a802      	add	r0, sp, #8
 8006d22:	f000 fbdd 	bl	80074e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8006d26:	e7e2      	b.n	8006cee <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8006d28:	4630      	mov	r0, r6
 8006d2a:	b018      	add	sp, #96	; 0x60
 8006d2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006d30:	b003      	add	sp, #12
 8006d32:	4770      	bx	lr

08006d34 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8006d34:	b530      	push	{r4, r5, lr}
 8006d36:	8083      	strh	r3, [r0, #4]
 8006d38:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8006d3c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8006d40:	7183      	strb	r3, [r0, #6]
 8006d42:	79c3      	ldrb	r3, [r0, #7]
 8006d44:	6101      	str	r1, [r0, #16]
 8006d46:	f365 0306 	bfi	r3, r5, #0, #7
 8006d4a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8006d4e:	8282      	strh	r2, [r0, #20]
 8006d50:	f365 13c7 	bfi	r3, r5, #7, #1
 8006d54:	71c3      	strb	r3, [r0, #7]
 8006d56:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006d5a:	7203      	strb	r3, [r0, #8]
 8006d5c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8006d60:	7243      	strb	r3, [r0, #9]
 8006d62:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8006d66:	8143      	strh	r3, [r0, #10]
 8006d68:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8006d6c:	8183      	strh	r3, [r0, #12]
 8006d6e:	4b01      	ldr	r3, [pc, #4]	; (8006d74 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8006d70:	6003      	str	r3, [r0, #0]
 8006d72:	bd30      	pop	{r4, r5, pc}
 8006d74:	0800beb0 	.word	0x0800beb0

08006d78 <_ZNK8touchgfx9ConstFont4findEt>:
 8006d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d7a:	6904      	ldr	r4, [r0, #16]
 8006d7c:	b3bc      	cbz	r4, 8006dee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8006d7e:	88a3      	ldrh	r3, [r4, #4]
 8006d80:	8a82      	ldrh	r2, [r0, #20]
 8006d82:	1acb      	subs	r3, r1, r3
 8006d84:	f102 32ff 	add.w	r2, r2, #4294967295
 8006d88:	d431      	bmi.n	8006dee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	dd0c      	ble.n	8006da8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8006d8e:	230e      	movs	r3, #14
 8006d90:	fb03 4302 	mla	r3, r3, r2, r4
 8006d94:	889b      	ldrh	r3, [r3, #4]
 8006d96:	1a5b      	subs	r3, r3, r1
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	db27      	blt.n	8006dee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	bfbc      	itt	lt
 8006da2:	2302      	movlt	r3, #2
 8006da4:	fb92 f3f3 	sdivlt	r3, r2, r3
 8006da8:	2500      	movs	r5, #0
 8006daa:	260e      	movs	r6, #14
 8006dac:	4295      	cmp	r5, r2
 8006dae:	dc1e      	bgt.n	8006dee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8006db0:	fb06 4003 	mla	r0, r6, r3, r4
 8006db4:	8887      	ldrh	r7, [r0, #4]
 8006db6:	42b9      	cmp	r1, r7
 8006db8:	d01a      	beq.n	8006df0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8006dba:	d20d      	bcs.n	8006dd8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8006dbc:	1e5a      	subs	r2, r3, #1
 8006dbe:	4295      	cmp	r5, r2
 8006dc0:	dc15      	bgt.n	8006dee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8006dc2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8006dc6:	1a5b      	subs	r3, r3, r1
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	db0f      	blt.n	8006dee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8006dce:	429d      	cmp	r5, r3
 8006dd0:	ddec      	ble.n	8006dac <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8006dd2:	1953      	adds	r3, r2, r5
 8006dd4:	105b      	asrs	r3, r3, #1
 8006dd6:	e7e9      	b.n	8006dac <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8006dd8:	1c5d      	adds	r5, r3, #1
 8006dda:	42aa      	cmp	r2, r5
 8006ddc:	db07      	blt.n	8006dee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8006dde:	8a43      	ldrh	r3, [r0, #18]
 8006de0:	1acb      	subs	r3, r1, r3
 8006de2:	442b      	add	r3, r5
 8006de4:	429d      	cmp	r5, r3
 8006de6:	dc02      	bgt.n	8006dee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8006de8:	429a      	cmp	r2, r3
 8006dea:	dadf      	bge.n	8006dac <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8006dec:	e7f1      	b.n	8006dd2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8006dee:	2000      	movs	r0, #0
 8006df0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006df2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8006df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df4:	4604      	mov	r4, r0
 8006df6:	4617      	mov	r7, r2
 8006df8:	461e      	mov	r6, r3
 8006dfa:	b911      	cbnz	r1, 8006e02 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8006dfc:	2500      	movs	r5, #0
 8006dfe:	4628      	mov	r0, r5
 8006e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e02:	290a      	cmp	r1, #10
 8006e04:	d0fa      	beq.n	8006dfc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8006e06:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8006e0a:	4291      	cmp	r1, r2
 8006e0c:	d0f6      	beq.n	8006dfc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8006e0e:	f242 020b 	movw	r2, #8203	; 0x200b
 8006e12:	4291      	cmp	r1, r2
 8006e14:	d0f2      	beq.n	8006dfc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8006e16:	f7ff ffaf 	bl	8006d78 <_ZNK8touchgfx9ConstFont4findEt>
 8006e1a:	4605      	mov	r5, r0
 8006e1c:	b950      	cbnz	r0, 8006e34 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	4620      	mov	r0, r4
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	4798      	blx	r3
 8006e26:	4601      	mov	r1, r0
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f7ff ffa5 	bl	8006d78 <_ZNK8touchgfx9ConstFont4findEt>
 8006e2e:	4605      	mov	r5, r0
 8006e30:	2800      	cmp	r0, #0
 8006e32:	d0e3      	beq.n	8006dfc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8006e34:	6823      	ldr	r3, [r4, #0]
 8006e36:	4629      	mov	r1, r5
 8006e38:	4620      	mov	r0, r4
 8006e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e3c:	4798      	blx	r3
 8006e3e:	6038      	str	r0, [r7, #0]
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	4620      	mov	r0, r4
 8006e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e46:	4798      	blx	r3
 8006e48:	7030      	strb	r0, [r6, #0]
 8006e4a:	e7d8      	b.n	8006dfe <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08006e4c <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8006e4c:	2002      	movs	r0, #2
 8006e4e:	4770      	bx	lr

08006e50 <_ZN8touchgfx12GestureEventD1Ev>:
 8006e50:	4770      	bx	lr

08006e52 <_ZN8touchgfx12GestureEventD0Ev>:
 8006e52:	b510      	push	{r4, lr}
 8006e54:	4604      	mov	r4, r0
 8006e56:	210c      	movs	r1, #12
 8006e58:	f002 fee6 	bl	8009c28 <_ZdlPvj>
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	bd10      	pop	{r4, pc}

08006e60 <_ZN8touchgfx12TextProviderC1Ev>:
 8006e60:	2300      	movs	r3, #0
 8006e62:	2201      	movs	r2, #1
 8006e64:	b510      	push	{r4, lr}
 8006e66:	4604      	mov	r4, r0
 8006e68:	60c3      	str	r3, [r0, #12]
 8006e6a:	7403      	strb	r3, [r0, #16]
 8006e6c:	82c3      	strh	r3, [r0, #22]
 8006e6e:	8303      	strh	r3, [r0, #24]
 8006e70:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8006e72:	8603      	strh	r3, [r0, #48]	; 0x30
 8006e74:	86c3      	strh	r3, [r0, #54]	; 0x36
 8006e76:	8703      	strh	r3, [r0, #56]	; 0x38
 8006e78:	63c3      	str	r3, [r0, #60]	; 0x3c
 8006e7a:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8006e7e:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8006e82:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8006e86:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 8006e8a:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 8006e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e92:	f7fc fc47 	bl	8003724 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8006e96:	4620      	mov	r0, r4
 8006e98:	bd10      	pop	{r4, pc}

08006e9a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8006e9a:	b530      	push	{r4, r5, lr}
 8006e9c:	2500      	movs	r5, #0
 8006e9e:	2401      	movs	r4, #1
 8006ea0:	6843      	ldr	r3, [r0, #4]
 8006ea2:	b913      	cbnz	r3, 8006eaa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8006ea4:	6803      	ldr	r3, [r0, #0]
 8006ea6:	b1f3      	cbz	r3, 8006ee6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8006ea8:	6043      	str	r3, [r0, #4]
 8006eaa:	7c03      	ldrb	r3, [r0, #16]
 8006eac:	b143      	cbz	r3, 8006ec0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8006eae:	68c3      	ldr	r3, [r0, #12]
 8006eb0:	b12b      	cbz	r3, 8006ebe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8006eb2:	881a      	ldrh	r2, [r3, #0]
 8006eb4:	b11a      	cbz	r2, 8006ebe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8006eb6:	1c9a      	adds	r2, r3, #2
 8006eb8:	60c2      	str	r2, [r0, #12]
 8006eba:	8818      	ldrh	r0, [r3, #0]
 8006ebc:	bd30      	pop	{r4, r5, pc}
 8006ebe:	7405      	strb	r5, [r0, #16]
 8006ec0:	6843      	ldr	r3, [r0, #4]
 8006ec2:	8819      	ldrh	r1, [r3, #0]
 8006ec4:	b179      	cbz	r1, 8006ee6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8006ec6:	1c9a      	adds	r2, r3, #2
 8006ec8:	2902      	cmp	r1, #2
 8006eca:	6042      	str	r2, [r0, #4]
 8006ecc:	d1f5      	bne.n	8006eba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8006ece:	6883      	ldr	r3, [r0, #8]
 8006ed0:	1d1a      	adds	r2, r3, #4
 8006ed2:	6082      	str	r2, [r0, #8]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	60c3      	str	r3, [r0, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d0e1      	beq.n	8006ea0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8006edc:	881b      	ldrh	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d0de      	beq.n	8006ea0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8006ee2:	7404      	strb	r4, [r0, #16]
 8006ee4:	e7dc      	b.n	8006ea0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	e7e8      	b.n	8006ebc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08006eea <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 8006eea:	63c3      	str	r3, [r0, #60]	; 0x3c
 8006eec:	2300      	movs	r3, #0
 8006eee:	6082      	str	r2, [r0, #8]
 8006ef0:	6001      	str	r1, [r0, #0]
 8006ef2:	6043      	str	r3, [r0, #4]
 8006ef4:	60c3      	str	r3, [r0, #12]
 8006ef6:	7403      	strb	r3, [r0, #16]
 8006ef8:	8603      	strh	r3, [r0, #48]	; 0x30
 8006efa:	8303      	strh	r3, [r0, #24]
 8006efc:	8703      	strh	r3, [r0, #56]	; 0x38
 8006efe:	b410      	push	{r4}
 8006f00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f04:	f7fc bc0e 	b.w	8003724 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08006f08 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8006f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f0a:	4605      	mov	r5, r0
 8006f0c:	4608      	mov	r0, r1
 8006f0e:	b1f1      	cbz	r1, 8006f4e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8006f10:	f105 0440 	add.w	r4, r5, #64	; 0x40
 8006f14:	460b      	mov	r3, r1
 8006f16:	f101 0708 	add.w	r7, r1, #8
 8006f1a:	4622      	mov	r2, r4
 8006f1c:	6818      	ldr	r0, [r3, #0]
 8006f1e:	3308      	adds	r3, #8
 8006f20:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8006f24:	4626      	mov	r6, r4
 8006f26:	42bb      	cmp	r3, r7
 8006f28:	c603      	stmia	r6!, {r0, r1}
 8006f2a:	4634      	mov	r4, r6
 8006f2c:	d1f6      	bne.n	8006f1c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8006f2e:	6818      	ldr	r0, [r3, #0]
 8006f30:	6030      	str	r0, [r6, #0]
 8006f32:	4610      	mov	r0, r2
 8006f34:	889b      	ldrh	r3, [r3, #4]
 8006f36:	80b3      	strh	r3, [r6, #4]
 8006f38:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 8006f3c:	015b      	lsls	r3, r3, #5
 8006f3e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8006f42:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8006f46:	430b      	orrs	r3, r1
 8006f48:	425b      	negs	r3, r3
 8006f4a:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 8006f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f50 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	460c      	mov	r4, r1
 8006f54:	6811      	ldr	r1, [r2, #0]
 8006f56:	4610      	mov	r0, r2
 8006f58:	68cd      	ldr	r5, [r1, #12]
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	47a8      	blx	r5
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	bf08      	it	eq
 8006f62:	4620      	moveq	r0, r4
 8006f64:	bd38      	pop	{r3, r4, r5, pc}
	...

08006f68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8006f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	4615      	mov	r5, r2
 8006f6e:	4608      	mov	r0, r1
 8006f70:	b93a      	cbnz	r2, 8006f82 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8006f72:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8006f76:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 8006f7a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8006f7e:	4628      	mov	r0, r5
 8006f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f82:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8006f86:	8893      	ldrh	r3, [r2, #4]
 8006f88:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8006f8c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8006f90:	79ee      	ldrb	r6, [r5, #7]
 8006f92:	4316      	orrs	r6, r2
 8006f94:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8006f98:	189a      	adds	r2, r3, r2
 8006f9a:	b2b7      	uxth	r7, r6
 8006f9c:	b291      	uxth	r1, r2
 8006f9e:	291d      	cmp	r1, #29
 8006fa0:	f200 8084 	bhi.w	80070ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	10f6      	asrs	r6, r6, #3
 8006fa8:	408a      	lsls	r2, r1
 8006faa:	4978      	ldr	r1, [pc, #480]	; (800718c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 8006fac:	420a      	tst	r2, r1
 8006fae:	d12e      	bne.n	800700e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8006fb0:	f412 7f60 	tst.w	r2, #896	; 0x380
 8006fb4:	d07a      	beq.n	80070ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8006fb6:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8006fba:	462b      	mov	r3, r5
 8006fbc:	f105 0e08 	add.w	lr, r5, #8
 8006fc0:	4615      	mov	r5, r2
 8006fc2:	6818      	ldr	r0, [r3, #0]
 8006fc4:	3308      	adds	r3, #8
 8006fc6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8006fca:	4694      	mov	ip, r2
 8006fcc:	4573      	cmp	r3, lr
 8006fce:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8006fd2:	4662      	mov	r2, ip
 8006fd4:	d1f5      	bne.n	8006fc2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 8006fd6:	6818      	ldr	r0, [r3, #0]
 8006fd8:	f8cc 0000 	str.w	r0, [ip]
 8006fdc:	889b      	ldrh	r3, [r3, #4]
 8006fde:	f8ac 3004 	strh.w	r3, [ip, #4]
 8006fe2:	b2b3      	uxth	r3, r6
 8006fe4:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8006fe8:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 8006fec:	1aca      	subs	r2, r1, r3
 8006fee:	1bcf      	subs	r7, r1, r7
 8006ff0:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8006ff4:	b292      	uxth	r2, r2
 8006ff6:	1afb      	subs	r3, r7, r3
 8006ff8:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 8006ffc:	10d2      	asrs	r2, r2, #3
 8006ffe:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8007002:	4302      	orrs	r2, r0
 8007004:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 8007008:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 800700c:	e7b7      	b.n	8006f7e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800700e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8007010:	b92b      	cbnz	r3, 800701e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 8007012:	4b5f      	ldr	r3, [pc, #380]	; (8007190 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 8007014:	21c0      	movs	r1, #192	; 0xc0
 8007016:	4a5f      	ldr	r2, [pc, #380]	; (8007194 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8007018:	485f      	ldr	r0, [pc, #380]	; (8007198 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 800701a:	f002 fe5f 	bl	8009cdc <__assert_func>
 800701e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8007020:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8007024:	8b59      	ldrh	r1, [r3, #26]
 8007026:	f640 6333 	movw	r3, #3635	; 0xe33
 800702a:	4299      	cmp	r1, r3
 800702c:	d110      	bne.n	8007050 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 800702e:	6803      	ldr	r3, [r0, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	4798      	blx	r3
 8007034:	7b41      	ldrb	r1, [r0, #13]
 8007036:	00cb      	lsls	r3, r1, #3
 8007038:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800703c:	7a03      	ldrb	r3, [r0, #8]
 800703e:	0648      	lsls	r0, r1, #25
 8007040:	ea43 0302 	orr.w	r3, r3, r2
 8007044:	bf44      	itt	mi
 8007046:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800704a:	b21b      	sxthmi	r3, r3
 800704c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8007050:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 8007054:	462a      	mov	r2, r5
 8007056:	f105 0c08 	add.w	ip, r5, #8
 800705a:	443b      	add	r3, r7
 800705c:	4433      	add	r3, r6
 800705e:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8007062:	b29b      	uxth	r3, r3
 8007064:	4635      	mov	r5, r6
 8007066:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800706a:	6810      	ldr	r0, [r2, #0]
 800706c:	3208      	adds	r2, #8
 800706e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8007072:	4637      	mov	r7, r6
 8007074:	4562      	cmp	r2, ip
 8007076:	c703      	stmia	r7!, {r0, r1}
 8007078:	463e      	mov	r6, r7
 800707a:	d1f6      	bne.n	800706a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 800707c:	6810      	ldr	r0, [r2, #0]
 800707e:	6038      	str	r0, [r7, #0]
 8007080:	8892      	ldrh	r2, [r2, #4]
 8007082:	80ba      	strh	r2, [r7, #4]
 8007084:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8007088:	10db      	asrs	r3, r3, #3
 800708a:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 800708e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007092:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007096:	4313      	orrs	r3, r2
 8007098:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 800709c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 80070a0:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 80070a4:	1a9b      	subs	r3, r3, r2
 80070a6:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 80070aa:	e768      	b.n	8006f7e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80070ac:	f023 0204 	bic.w	r2, r3, #4
 80070b0:	f640 611b 	movw	r1, #3611	; 0xe1b
 80070b4:	428a      	cmp	r2, r1
 80070b6:	d003      	beq.n	80070c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 80070b8:	f640 621d 	movw	r2, #3613	; 0xe1d
 80070bc:	4293      	cmp	r3, r2
 80070be:	d120      	bne.n	8007102 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 80070c0:	3b01      	subs	r3, #1
 80070c2:	4602      	mov	r2, r0
 80070c4:	4629      	mov	r1, r5
 80070c6:	4620      	mov	r0, r4
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	f7ff ff41 	bl	8006f50 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80070ce:	7b41      	ldrb	r1, [r0, #13]
 80070d0:	00cb      	lsls	r3, r1, #3
 80070d2:	0649      	lsls	r1, r1, #25
 80070d4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80070d8:	7a03      	ldrb	r3, [r0, #8]
 80070da:	ea43 0302 	orr.w	r3, r3, r2
 80070de:	bf44      	itt	mi
 80070e0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80070e4:	b21b      	sxthmi	r3, r3
 80070e6:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 80070ea:	7b6b      	ldrb	r3, [r5, #13]
 80070ec:	7aaa      	ldrb	r2, [r5, #10]
 80070ee:	005b      	lsls	r3, r3, #1
 80070f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f4:	4313      	orrs	r3, r2
 80070f6:	115a      	asrs	r2, r3, #5
 80070f8:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80070fc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8007100:	e035      	b.n	800716e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 8007102:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8007106:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800710a:	f402 7180 	and.w	r1, r2, #256	; 0x100
 800710e:	7a2a      	ldrb	r2, [r5, #8]
 8007110:	ea42 0201 	orr.w	r2, r2, r1
 8007114:	f640 6109 	movw	r1, #3593	; 0xe09
 8007118:	bf1c      	itt	ne
 800711a:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 800711e:	b212      	sxthne	r2, r2
 8007120:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8007124:	f023 0210 	bic.w	r2, r3, #16
 8007128:	428a      	cmp	r2, r1
 800712a:	d003      	beq.n	8007134 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 800712c:	f640 6213 	movw	r2, #3603	; 0xe13
 8007130:	4293      	cmp	r3, r2
 8007132:	d129      	bne.n	8007188 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 8007134:	7b6e      	ldrb	r6, [r5, #13]
 8007136:	4629      	mov	r1, r5
 8007138:	0076      	lsls	r6, r6, #1
 800713a:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800713e:	7aae      	ldrb	r6, [r5, #10]
 8007140:	4316      	orrs	r6, r2
 8007142:	f640 6213 	movw	r2, #3603	; 0xe13
 8007146:	4293      	cmp	r3, r2
 8007148:	4602      	mov	r2, r0
 800714a:	4620      	mov	r0, r4
 800714c:	bf16      	itet	ne
 800714e:	f103 33ff 	addne.w	r3, r3, #4294967295
 8007152:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8007156:	b29b      	uxthne	r3, r3
 8007158:	f7ff fefa 	bl	8006f50 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800715c:	7b43      	ldrb	r3, [r0, #13]
 800715e:	7a82      	ldrb	r2, [r0, #10]
 8007160:	005b      	lsls	r3, r3, #1
 8007162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007166:	4313      	orrs	r3, r2
 8007168:	1af6      	subs	r6, r6, r3
 800716a:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 800716e:	7b69      	ldrb	r1, [r5, #13]
 8007170:	00cb      	lsls	r3, r1, #3
 8007172:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8007176:	7a2b      	ldrb	r3, [r5, #8]
 8007178:	4313      	orrs	r3, r2
 800717a:	064a      	lsls	r2, r1, #25
 800717c:	bf44      	itt	mi
 800717e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8007182:	b21b      	sxthmi	r3, r3
 8007184:	1bdb      	subs	r3, r3, r7
 8007186:	e73f      	b.n	8007008 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8007188:	2300      	movs	r3, #0
 800718a:	e7b7      	b.n	80070fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 800718c:	3fc00079 	.word	0x3fc00079
 8007190:	0800bf10 	.word	0x0800bf10
 8007194:	0800c182 	.word	0x0800c182
 8007198:	0800bf19 	.word	0x0800bf19

0800719c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800719c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071a0:	4604      	mov	r4, r0
 80071a2:	b942      	cbnz	r2, 80071b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80071a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071a8:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 80071ac:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 80071b0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80071b4:	e046      	b.n	8007244 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 80071b6:	7b51      	ldrb	r1, [r2, #13]
 80071b8:	8893      	ldrh	r3, [r2, #4]
 80071ba:	010f      	lsls	r7, r1, #4
 80071bc:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80071c0:	79d7      	ldrb	r7, [r2, #7]
 80071c2:	4307      	orrs	r7, r0
 80071c4:	2f04      	cmp	r7, #4
 80071c6:	b2bd      	uxth	r5, r7
 80071c8:	bfcc      	ite	gt
 80071ca:	08bf      	lsrgt	r7, r7, #2
 80071cc:	2701      	movle	r7, #1
 80071ce:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80071d2:	f200 80ab 	bhi.w	800732c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 80071d6:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80071da:	4283      	cmp	r3, r0
 80071dc:	d216      	bcs.n	800720c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80071de:	f240 605b 	movw	r0, #1627	; 0x65b
 80071e2:	4283      	cmp	r3, r0
 80071e4:	d859      	bhi.n	800729a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 80071e6:	f240 6057 	movw	r0, #1623	; 0x657
 80071ea:	4283      	cmp	r3, r0
 80071ec:	d20e      	bcs.n	800720c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80071ee:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80071f2:	d24a      	bcs.n	800728a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 80071f4:	f240 604e 	movw	r0, #1614	; 0x64e
 80071f8:	4283      	cmp	r3, r0
 80071fa:	d207      	bcs.n	800720c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80071fc:	f240 601a 	movw	r0, #1562	; 0x61a
 8007200:	4283      	cmp	r3, r0
 8007202:	d02a      	beq.n	800725a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8007204:	d821      	bhi.n	800724a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 8007206:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800720a:	d35b      	bcc.n	80072c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800720c:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 8007210:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8007214:	f040 80d0 	bne.w	80073b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8007218:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 800721c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8007220:	f040 80ca 	bne.w	80073b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8007224:	00cb      	lsls	r3, r1, #3
 8007226:	0649      	lsls	r1, r1, #25
 8007228:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800722c:	7a13      	ldrb	r3, [r2, #8]
 800722e:	ea43 0300 	orr.w	r3, r3, r0
 8007232:	bf44      	itt	mi
 8007234:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8007238:	b21b      	sxthmi	r3, r3
 800723a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800723e:	1b5d      	subs	r5, r3, r5
 8007240:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8007244:	4610      	mov	r0, r2
 8007246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800724a:	f240 604b 	movw	r0, #1611	; 0x64b
 800724e:	4283      	cmp	r3, r0
 8007250:	d338      	bcc.n	80072c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8007252:	f240 604c 	movw	r0, #1612	; 0x64c
 8007256:	4283      	cmp	r3, r0
 8007258:	d9d8      	bls.n	800720c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800725a:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 800725e:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 8007262:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8007266:	f040 80f2 	bne.w	800744e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 800726a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800726e:	f040 80ee 	bne.w	800744e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8007272:	00cb      	lsls	r3, r1, #3
 8007274:	064e      	lsls	r6, r1, #25
 8007276:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800727a:	7a13      	ldrb	r3, [r2, #8]
 800727c:	ea43 0300 	orr.w	r3, r3, r0
 8007280:	bf44      	itt	mi
 8007282:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8007286:	b21b      	sxthmi	r3, r3
 8007288:	e7d9      	b.n	800723e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 800728a:	f240 6054 	movw	r0, #1620	; 0x654
 800728e:	4283      	cmp	r3, r0
 8007290:	d8e3      	bhi.n	800725a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8007292:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8007296:	d9e0      	bls.n	800725a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8007298:	e7b8      	b.n	800720c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800729a:	f240 6074 	movw	r0, #1652	; 0x674
 800729e:	4283      	cmp	r3, r0
 80072a0:	d0b4      	beq.n	800720c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80072a2:	d82d      	bhi.n	8007300 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 80072a4:	f240 605e 	movw	r0, #1630	; 0x65e
 80072a8:	4283      	cmp	r3, r0
 80072aa:	d804      	bhi.n	80072b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 80072ac:	f240 605d 	movw	r0, #1629	; 0x65d
 80072b0:	4283      	cmp	r3, r0
 80072b2:	d3d2      	bcc.n	800725a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80072b4:	e7aa      	b.n	800720c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80072b6:	f240 605f 	movw	r0, #1631	; 0x65f
 80072ba:	4283      	cmp	r3, r0
 80072bc:	d0cd      	beq.n	800725a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80072be:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80072c2:	d0a3      	beq.n	800720c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80072c4:	00cb      	lsls	r3, r1, #3
 80072c6:	0649      	lsls	r1, r1, #25
 80072c8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80072cc:	7a13      	ldrb	r3, [r2, #8]
 80072ce:	ea43 0300 	orr.w	r3, r3, r0
 80072d2:	bf44      	itt	mi
 80072d4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80072d8:	b21b      	sxthmi	r3, r3
 80072da:	1b5d      	subs	r5, r3, r5
 80072dc:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 80072e0:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 80072e4:	7b53      	ldrb	r3, [r2, #13]
 80072e6:	015b      	lsls	r3, r3, #5
 80072e8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80072ec:	7993      	ldrb	r3, [r2, #6]
 80072ee:	430b      	orrs	r3, r1
 80072f0:	2105      	movs	r1, #5
 80072f2:	005b      	lsls	r3, r3, #1
 80072f4:	fb93 f3f1 	sdiv	r3, r3, r1
 80072f8:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80072fc:	440b      	add	r3, r1
 80072fe:	e757      	b.n	80071b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8007300:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8007304:	4283      	cmp	r3, r0
 8007306:	d809      	bhi.n	800731c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8007308:	f240 60df 	movw	r0, #1759	; 0x6df
 800730c:	4283      	cmp	r3, r0
 800730e:	f4bf af7d 	bcs.w	800720c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8007312:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8007316:	2b05      	cmp	r3, #5
 8007318:	d8d4      	bhi.n	80072c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800731a:	e777      	b.n	800720c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800731c:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8007320:	4283      	cmp	r3, r0
 8007322:	d09a      	beq.n	800725a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8007324:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8007328:	4283      	cmp	r3, r0
 800732a:	e7ca      	b.n	80072c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 800732c:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8007330:	d22b      	bcs.n	800738a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 8007332:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8007336:	4283      	cmp	r3, r0
 8007338:	d28f      	bcs.n	800725a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800733a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800733e:	4283      	cmp	r3, r0
 8007340:	d816      	bhi.n	8007370 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 8007342:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8007346:	4283      	cmp	r3, r0
 8007348:	f4bf af60 	bcs.w	800720c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800734c:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8007350:	4283      	cmp	r3, r0
 8007352:	d80a      	bhi.n	800736a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8007354:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8007358:	4283      	cmp	r3, r0
 800735a:	f4bf af57 	bcs.w	800720c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800735e:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8007362:	4283      	cmp	r3, r0
 8007364:	f43f af79 	beq.w	800725a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8007368:	e7ac      	b.n	80072c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800736a:	f240 60ed 	movw	r0, #1773	; 0x6ed
 800736e:	e7f8      	b.n	8007362 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8007370:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8007374:	4283      	cmp	r3, r0
 8007376:	d802      	bhi.n	800737e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8007378:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800737c:	e798      	b.n	80072b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 800737e:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8007382:	4283      	cmp	r3, r0
 8007384:	f47f af42 	bne.w	800720c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8007388:	e767      	b.n	800725a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800738a:	f640 00f6 	movw	r0, #2294	; 0x8f6
 800738e:	4283      	cmp	r3, r0
 8007390:	f43f af63 	beq.w	800725a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8007394:	d802      	bhi.n	800739c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8007396:	f640 00f2 	movw	r0, #2290	; 0x8f2
 800739a:	e7f2      	b.n	8007382 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 800739c:	f640 00fa 	movw	r0, #2298	; 0x8fa
 80073a0:	4283      	cmp	r3, r0
 80073a2:	d805      	bhi.n	80073b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 80073a4:	f640 00f9 	movw	r0, #2297	; 0x8f9
 80073a8:	4283      	cmp	r3, r0
 80073aa:	f4ff af2f 	bcc.w	800720c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80073ae:	e754      	b.n	800725a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80073b0:	f640 00fe 	movw	r0, #2302	; 0x8fe
 80073b4:	4283      	cmp	r3, r0
 80073b6:	e7af      	b.n	8007318 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 80073b8:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 80073bc:	4617      	mov	r7, r2
 80073be:	f102 0808 	add.w	r8, r2, #8
 80073c2:	4666      	mov	r6, ip
 80073c4:	6838      	ldr	r0, [r7, #0]
 80073c6:	3708      	adds	r7, #8
 80073c8:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80073cc:	46e6      	mov	lr, ip
 80073ce:	4547      	cmp	r7, r8
 80073d0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80073d4:	46f4      	mov	ip, lr
 80073d6:	d1f5      	bne.n	80073c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 80073d8:	6838      	ldr	r0, [r7, #0]
 80073da:	f8ce 0000 	str.w	r0, [lr]
 80073de:	88b9      	ldrh	r1, [r7, #4]
 80073e0:	f8ae 1004 	strh.w	r1, [lr, #4]
 80073e4:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 80073e8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80073ec:	d009      	beq.n	8007402 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 80073ee:	7b51      	ldrb	r1, [r2, #13]
 80073f0:	7992      	ldrb	r2, [r2, #6]
 80073f2:	0149      	lsls	r1, r1, #5
 80073f4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80073f8:	4311      	orrs	r1, r2
 80073fa:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80073fe:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 8007402:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8007406:	d00d      	beq.n	8007424 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 8007408:	442b      	add	r3, r5
 800740a:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 800740e:	b29b      	uxth	r3, r3
 8007410:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007414:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8007418:	10db      	asrs	r3, r3, #3
 800741a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800741e:	4313      	orrs	r3, r2
 8007420:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8007424:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8007428:	00cb      	lsls	r3, r1, #3
 800742a:	064f      	lsls	r7, r1, #25
 800742c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8007430:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8007434:	ea43 0302 	orr.w	r3, r3, r2
 8007438:	bf44      	itt	mi
 800743a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800743e:	b21b      	sxthmi	r3, r3
 8007440:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8007444:	1b5d      	subs	r5, r3, r5
 8007446:	4632      	mov	r2, r6
 8007448:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 800744c:	e6fa      	b.n	8007244 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 800744e:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8007452:	4694      	mov	ip, r2
 8007454:	f102 0908 	add.w	r9, r2, #8
 8007458:	4676      	mov	r6, lr
 800745a:	f8dc 0000 	ldr.w	r0, [ip]
 800745e:	f10c 0c08 	add.w	ip, ip, #8
 8007462:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 8007466:	46f0      	mov	r8, lr
 8007468:	45cc      	cmp	ip, r9
 800746a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800746e:	46c6      	mov	lr, r8
 8007470:	d1f3      	bne.n	800745a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 8007472:	f8dc 0000 	ldr.w	r0, [ip]
 8007476:	f8c8 0000 	str.w	r0, [r8]
 800747a:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 800747e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8007482:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8007486:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800748a:	d009      	beq.n	80074a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 800748c:	7b51      	ldrb	r1, [r2, #13]
 800748e:	7992      	ldrb	r2, [r2, #6]
 8007490:	0149      	lsls	r1, r1, #5
 8007492:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8007496:	4311      	orrs	r1, r2
 8007498:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800749c:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 80074a0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80074a4:	d00d      	beq.n	80074c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 80074a6:	1bdb      	subs	r3, r3, r7
 80074a8:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80074b2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 80074b6:	10db      	asrs	r3, r3, #3
 80074b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074bc:	4313      	orrs	r3, r2
 80074be:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 80074c2:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 80074c6:	00cb      	lsls	r3, r1, #3
 80074c8:	0648      	lsls	r0, r1, #25
 80074ca:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80074ce:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80074d2:	ea43 0302 	orr.w	r3, r3, r2
 80074d6:	bf44      	itt	mi
 80074d8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80074dc:	b21b      	sxthmi	r3, r3
 80074de:	e7b1      	b.n	8007444 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

080074e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80074e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074e4:	461e      	mov	r6, r3
 80074e6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80074e8:	4604      	mov	r4, r0
 80074ea:	4617      	mov	r7, r2
 80074ec:	b92b      	cbnz	r3, 80074fa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 80074ee:	4b25      	ldr	r3, [pc, #148]	; (8007584 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 80074f0:	21c0      	movs	r1, #192	; 0xc0
 80074f2:	4a25      	ldr	r2, [pc, #148]	; (8007588 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 80074f4:	4825      	ldr	r0, [pc, #148]	; (800758c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 80074f6:	f002 fbf1 	bl	8009cdc <__assert_func>
 80074fa:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80074fc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8007500:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8007504:	f7fc f8be 	bl	8003684 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8007508:	4605      	mov	r5, r0
 800750a:	b918      	cbnz	r0, 8007514 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 800750c:	6030      	str	r0, [r6, #0]
 800750e:	4628      	mov	r0, r5
 8007510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	4601      	mov	r1, r0
 8007518:	4638      	mov	r0, r7
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	4798      	blx	r3
 800751e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8007522:	4602      	mov	r2, r0
 8007524:	6030      	str	r0, [r6, #0]
 8007526:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800752a:	d213      	bcs.n	8007554 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 800752c:	4643      	mov	r3, r8
 800752e:	4639      	mov	r1, r7
 8007530:	4620      	mov	r0, r4
 8007532:	f7ff fe33 	bl	800719c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8007536:	6030      	str	r0, [r6, #0]
 8007538:	6833      	ldr	r3, [r6, #0]
 800753a:	b143      	cbz	r3, 800754e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 800753c:	7b5a      	ldrb	r2, [r3, #13]
 800753e:	7a9b      	ldrb	r3, [r3, #10]
 8007540:	0052      	lsls	r2, r2, #1
 8007542:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8007546:	4313      	orrs	r3, r2
 8007548:	bf0c      	ite	eq
 800754a:	2301      	moveq	r3, #1
 800754c:	2300      	movne	r3, #0
 800754e:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8007552:	e7dc      	b.n	800750e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 8007554:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8007558:	b29b      	uxth	r3, r3
 800755a:	2b7f      	cmp	r3, #127	; 0x7f
 800755c:	d804      	bhi.n	8007568 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 800755e:	4639      	mov	r1, r7
 8007560:	4620      	mov	r0, r4
 8007562:	f7ff fd01 	bl	8006f68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8007566:	e7e6      	b.n	8007536 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8007568:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0e3      	beq.n	8007538 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8007570:	f640 1302 	movw	r3, #2306	; 0x902
 8007574:	429d      	cmp	r5, r3
 8007576:	d1df      	bne.n	8007538 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8007578:	4601      	mov	r1, r0
 800757a:	4620      	mov	r0, r4
 800757c:	f7ff fcc4 	bl	8006f08 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8007580:	e7d9      	b.n	8007536 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8007582:	bf00      	nop
 8007584:	0800bf10 	.word	0x0800bf10
 8007588:	0800c182 	.word	0x0800c182
 800758c:	0800bf19 	.word	0x0800bf19

08007590 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8007590:	b510      	push	{r4, lr}
 8007592:	4604      	mov	r4, r0
 8007594:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8007596:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8007598:	b9d9      	cbnz	r1, 80075d2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 800759a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800759c:	2b0a      	cmp	r3, #10
 800759e:	d036      	beq.n	800760e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 80075a0:	4620      	mov	r0, r4
 80075a2:	f7ff fc7a 	bl	8006e9a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80075a6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80075a8:	2b09      	cmp	r3, #9
 80075aa:	d906      	bls.n	80075ba <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 80075ac:	4b18      	ldr	r3, [pc, #96]	; (8007610 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 80075ae:	f44f 7182 	mov.w	r1, #260	; 0x104
 80075b2:	4a18      	ldr	r2, [pc, #96]	; (8007614 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 80075b4:	4818      	ldr	r0, [pc, #96]	; (8007618 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 80075b6:	f002 fb91 	bl	8009cdc <__assert_func>
 80075ba:	1c5a      	adds	r2, r3, #1
 80075bc:	8622      	strh	r2, [r4, #48]	; 0x30
 80075be:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80075c0:	4413      	add	r3, r2
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	2b09      	cmp	r3, #9
 80075c6:	bf88      	it	hi
 80075c8:	3b0a      	subhi	r3, #10
 80075ca:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80075ce:	8358      	strh	r0, [r3, #26]
 80075d0:	e7e3      	b.n	800759a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 80075d2:	2b0a      	cmp	r3, #10
 80075d4:	d01b      	beq.n	800760e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 80075d6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80075d8:	3901      	subs	r1, #1
 80075da:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80075de:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 80075e0:	8721      	strh	r1, [r4, #56]	; 0x38
 80075e2:	1c51      	adds	r1, r2, #1
 80075e4:	b289      	uxth	r1, r1
 80075e6:	2901      	cmp	r1, #1
 80075e8:	bf8a      	itet	hi
 80075ea:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80075ee:	86e1      	strhls	r1, [r4, #54]	; 0x36
 80075f0:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 80075f2:	2b09      	cmp	r3, #9
 80075f4:	d8da      	bhi.n	80075ac <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 80075f6:	1c5a      	adds	r2, r3, #1
 80075f8:	8622      	strh	r2, [r4, #48]	; 0x30
 80075fa:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80075fc:	4413      	add	r3, r2
 80075fe:	b29b      	uxth	r3, r3
 8007600:	2b09      	cmp	r3, #9
 8007602:	bf88      	it	hi
 8007604:	3b0a      	subhi	r3, #10
 8007606:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800760a:	8358      	strh	r0, [r3, #26]
 800760c:	e7c2      	b.n	8007594 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800760e:	bd10      	pop	{r4, pc}
 8007610:	0800bf45 	.word	0x0800bf45
 8007614:	0800c2d8 	.word	0x0800c2d8
 8007618:	0800bf19 	.word	0x0800bf19

0800761c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800761c:	b538      	push	{r3, r4, r5, lr}
 800761e:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8007620:	4604      	mov	r4, r0
 8007622:	b92a      	cbnz	r2, 8007630 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8007624:	4b13      	ldr	r3, [pc, #76]	; (8007674 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8007626:	21d5      	movs	r1, #213	; 0xd5
 8007628:	4a13      	ldr	r2, [pc, #76]	; (8007678 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 800762a:	4814      	ldr	r0, [pc, #80]	; (800767c <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 800762c:	f002 fb56 	bl	8009cdc <__assert_func>
 8007630:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8007632:	3a01      	subs	r2, #1
 8007634:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8007638:	8b4d      	ldrh	r5, [r1, #26]
 800763a:	8602      	strh	r2, [r0, #48]	; 0x30
 800763c:	1c5a      	adds	r2, r3, #1
 800763e:	b292      	uxth	r2, r2
 8007640:	2a09      	cmp	r2, #9
 8007642:	bf8a      	itet	hi
 8007644:	3b09      	subhi	r3, #9
 8007646:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 8007648:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 800764a:	f7ff ffa1 	bl	8007590 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800764e:	8b23      	ldrh	r3, [r4, #24]
 8007650:	2b01      	cmp	r3, #1
 8007652:	bf9c      	itt	ls
 8007654:	3301      	addls	r3, #1
 8007656:	8323      	strhls	r3, [r4, #24]
 8007658:	8ae3      	ldrh	r3, [r4, #22]
 800765a:	b90b      	cbnz	r3, 8007660 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 800765c:	2302      	movs	r3, #2
 800765e:	82e3      	strh	r3, [r4, #22]
 8007660:	8ae3      	ldrh	r3, [r4, #22]
 8007662:	4628      	mov	r0, r5
 8007664:	3b01      	subs	r3, #1
 8007666:	b29b      	uxth	r3, r3
 8007668:	82e3      	strh	r3, [r4, #22]
 800766a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800766e:	8265      	strh	r5, [r4, #18]
 8007670:	bd38      	pop	{r3, r4, r5, pc}
 8007672:	bf00      	nop
 8007674:	0800bf10 	.word	0x0800bf10
 8007678:	0800c22d 	.word	0x0800c22d
 800767c:	0800bf19 	.word	0x0800bf19

08007680 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8007680:	428a      	cmp	r2, r1
 8007682:	b538      	push	{r3, r4, r5, lr}
 8007684:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 8007686:	d90c      	bls.n	80076a2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8007688:	b92c      	cbnz	r4, 8007696 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 800768a:	4b1c      	ldr	r3, [pc, #112]	; (80076fc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 800768c:	21e1      	movs	r1, #225	; 0xe1
 800768e:	4a1c      	ldr	r2, [pc, #112]	; (8007700 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8007690:	481c      	ldr	r0, [pc, #112]	; (8007704 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8007692:	f002 fb23 	bl	8009cdc <__assert_func>
 8007696:	3c01      	subs	r4, #1
 8007698:	4b1b      	ldr	r3, [pc, #108]	; (8007708 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 800769a:	4a1c      	ldr	r2, [pc, #112]	; (800770c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 800769c:	21c5      	movs	r1, #197	; 0xc5
 800769e:	8604      	strh	r4, [r0, #48]	; 0x30
 80076a0:	e7f6      	b.n	8007690 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80076a2:	428c      	cmp	r4, r1
 80076a4:	d203      	bcs.n	80076ae <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 80076a6:	4b1a      	ldr	r3, [pc, #104]	; (8007710 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 80076a8:	21cb      	movs	r1, #203	; 0xcb
 80076aa:	4a1a      	ldr	r2, [pc, #104]	; (8007714 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 80076ac:	e7f0      	b.n	8007690 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80076ae:	1a64      	subs	r4, r4, r1
 80076b0:	250a      	movs	r5, #10
 80076b2:	8604      	strh	r4, [r0, #48]	; 0x30
 80076b4:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80076b6:	4421      	add	r1, r4
 80076b8:	b289      	uxth	r1, r1
 80076ba:	2909      	cmp	r1, #9
 80076bc:	bf88      	it	hi
 80076be:	390a      	subhi	r1, #10
 80076c0:	85c1      	strh	r1, [r0, #46]	; 0x2e
 80076c2:	b1ba      	cbz	r2, 80076f4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 80076c4:	3a01      	subs	r2, #1
 80076c6:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 80076c8:	b292      	uxth	r2, r2
 80076ca:	2909      	cmp	r1, #9
 80076cc:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80076d0:	d903      	bls.n	80076da <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 80076d2:	4b11      	ldr	r3, [pc, #68]	; (8007718 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 80076d4:	21e6      	movs	r1, #230	; 0xe6
 80076d6:	4a11      	ldr	r2, [pc, #68]	; (800771c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 80076d8:	e7da      	b.n	8007690 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80076da:	3101      	adds	r1, #1
 80076dc:	8601      	strh	r1, [r0, #48]	; 0x30
 80076de:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 80076e0:	b901      	cbnz	r1, 80076e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 80076e2:	85c5      	strh	r5, [r0, #46]	; 0x2e
 80076e4:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 80076e6:	3901      	subs	r1, #1
 80076e8:	b289      	uxth	r1, r1
 80076ea:	85c1      	strh	r1, [r0, #46]	; 0x2e
 80076ec:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80076f0:	834c      	strh	r4, [r1, #26]
 80076f2:	e7e6      	b.n	80076c2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 80076f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076f8:	f7ff bf4a 	b.w	8007590 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80076fc:	0800bf10 	.word	0x0800bf10
 8007700:	0800c006 	.word	0x0800c006
 8007704:	0800bf19 	.word	0x0800bf19
 8007708:	0800bf51 	.word	0x0800bf51
 800770c:	0800c0b0 	.word	0x0800c0b0
 8007710:	0800bf5f 	.word	0x0800bf5f
 8007714:	0800c387 	.word	0x0800c387
 8007718:	0800bf6b 	.word	0x0800bf6b
 800771c:	0800bf7e 	.word	0x0800bf7e

08007720 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8007720:	3a01      	subs	r2, #1
 8007722:	b570      	push	{r4, r5, r6, lr}
 8007724:	b292      	uxth	r2, r2
 8007726:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800772a:	42b2      	cmp	r2, r6
 800772c:	d019      	beq.n	8007762 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 800772e:	8b04      	ldrh	r4, [r0, #24]
 8007730:	f831 5b02 	ldrh.w	r5, [r1], #2
 8007734:	4294      	cmp	r4, r2
 8007736:	d805      	bhi.n	8007744 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8007738:	4b19      	ldr	r3, [pc, #100]	; (80077a0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 800773a:	4a1a      	ldr	r2, [pc, #104]	; (80077a4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 800773c:	21c5      	movs	r1, #197	; 0xc5
 800773e:	481a      	ldr	r0, [pc, #104]	; (80077a8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8007740:	f002 facc 	bl	8009cdc <__assert_func>
 8007744:	8ac4      	ldrh	r4, [r0, #22]
 8007746:	4414      	add	r4, r2
 8007748:	3a01      	subs	r2, #1
 800774a:	b2a4      	uxth	r4, r4
 800774c:	b292      	uxth	r2, r2
 800774e:	2c01      	cmp	r4, #1
 8007750:	bf88      	it	hi
 8007752:	3c02      	subhi	r4, #2
 8007754:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8007758:	8a64      	ldrh	r4, [r4, #18]
 800775a:	42ac      	cmp	r4, r5
 800775c:	d0e5      	beq.n	800772a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 800775e:	2000      	movs	r0, #0
 8007760:	bd70      	pop	{r4, r5, r6, pc}
 8007762:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8007766:	2400      	movs	r4, #0
 8007768:	4413      	add	r3, r2
 800776a:	b2a2      	uxth	r2, r4
 800776c:	429a      	cmp	r2, r3
 800776e:	da14      	bge.n	800779a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8007770:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 8007772:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8007776:	4296      	cmp	r6, r2
 8007778:	d802      	bhi.n	8007780 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 800777a:	4b09      	ldr	r3, [pc, #36]	; (80077a0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 800777c:	4a0b      	ldr	r2, [pc, #44]	; (80077ac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 800777e:	e7dd      	b.n	800773c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8007780:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 8007782:	3401      	adds	r4, #1
 8007784:	4432      	add	r2, r6
 8007786:	b292      	uxth	r2, r2
 8007788:	2a09      	cmp	r2, #9
 800778a:	bf88      	it	hi
 800778c:	3a0a      	subhi	r2, #10
 800778e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8007792:	8b52      	ldrh	r2, [r2, #26]
 8007794:	42aa      	cmp	r2, r5
 8007796:	d0e8      	beq.n	800776a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 8007798:	e7e1      	b.n	800775e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 800779a:	2001      	movs	r0, #1
 800779c:	e7e0      	b.n	8007760 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 800779e:	bf00      	nop
 80077a0:	0800bf51 	.word	0x0800bf51
 80077a4:	0800c40b 	.word	0x0800c40b
 80077a8:	0800bf19 	.word	0x0800bf19
 80077ac:	0800c0b0 	.word	0x0800c0b0

080077b0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80077b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b4:	4605      	mov	r5, r0
 80077b6:	4616      	mov	r6, r2
 80077b8:	1c8c      	adds	r4, r1, #2
 80077ba:	8809      	ldrh	r1, [r1, #0]
 80077bc:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80077c0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80077c4:	42b3      	cmp	r3, r6
 80077c6:	d124      	bne.n	8007812 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80077c8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80077cc:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80077d0:	f001 070f 	and.w	r7, r1, #15
 80077d4:	4652      	mov	r2, sl
 80077d6:	f8cd 8000 	str.w	r8, [sp]
 80077da:	464b      	mov	r3, r9
 80077dc:	4621      	mov	r1, r4
 80077de:	4628      	mov	r0, r5
 80077e0:	f7ff ff9e 	bl	8007720 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80077e4:	4683      	mov	fp, r0
 80077e6:	b168      	cbz	r0, 8007804 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80077e8:	eb0a 0109 	add.w	r1, sl, r9
 80077ec:	463a      	mov	r2, r7
 80077ee:	4628      	mov	r0, r5
 80077f0:	4441      	add	r1, r8
 80077f2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80077f6:	4649      	mov	r1, r9
 80077f8:	f7ff ff42 	bl	8007680 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80077fc:	4658      	mov	r0, fp
 80077fe:	b003      	add	sp, #12
 8007800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007804:	eb07 010a 	add.w	r1, r7, sl
 8007808:	4449      	add	r1, r9
 800780a:	4441      	add	r1, r8
 800780c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8007810:	e7d2      	b.n	80077b8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8007812:	f04f 0b00 	mov.w	fp, #0
 8007816:	e7f1      	b.n	80077fc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08007818 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8007818:	b570      	push	{r4, r5, r6, lr}
 800781a:	8810      	ldrh	r0, [r2, #0]
 800781c:	4298      	cmp	r0, r3
 800781e:	d817      	bhi.n	8007850 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8007820:	1e48      	subs	r0, r1, #1
 8007822:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8007826:	4298      	cmp	r0, r3
 8007828:	d312      	bcc.n	8007850 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800782a:	2400      	movs	r4, #0
 800782c:	428c      	cmp	r4, r1
 800782e:	d20f      	bcs.n	8007850 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8007830:	1860      	adds	r0, r4, r1
 8007832:	1040      	asrs	r0, r0, #1
 8007834:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8007838:	0085      	lsls	r5, r0, #2
 800783a:	42b3      	cmp	r3, r6
 800783c:	d902      	bls.n	8007844 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800783e:	3001      	adds	r0, #1
 8007840:	b284      	uxth	r4, r0
 8007842:	e7f3      	b.n	800782c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8007844:	d201      	bcs.n	800784a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8007846:	b281      	uxth	r1, r0
 8007848:	e7f0      	b.n	800782c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800784a:	442a      	add	r2, r5
 800784c:	8850      	ldrh	r0, [r2, #2]
 800784e:	bd70      	pop	{r4, r5, r6, pc}
 8007850:	2000      	movs	r0, #0
 8007852:	e7fc      	b.n	800784e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08007854 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8007854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007858:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800785a:	4604      	mov	r4, r0
 800785c:	260b      	movs	r6, #11
 800785e:	886f      	ldrh	r7, [r5, #2]
 8007860:	087f      	lsrs	r7, r7, #1
 8007862:	3e01      	subs	r6, #1
 8007864:	d01b      	beq.n	800789e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8007866:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8007868:	b92b      	cbnz	r3, 8007876 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 800786a:	4b0e      	ldr	r3, [pc, #56]	; (80078a4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 800786c:	21c0      	movs	r1, #192	; 0xc0
 800786e:	4a0e      	ldr	r2, [pc, #56]	; (80078a8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8007870:	480e      	ldr	r0, [pc, #56]	; (80078ac <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 8007872:	f002 fa33 	bl	8009cdc <__assert_func>
 8007876:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8007878:	462a      	mov	r2, r5
 800787a:	4639      	mov	r1, r7
 800787c:	4620      	mov	r0, r4
 800787e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8007882:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8007886:	4643      	mov	r3, r8
 8007888:	f7ff ffc6 	bl	8007818 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800788c:	b138      	cbz	r0, 800789e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 800788e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8007892:	4642      	mov	r2, r8
 8007894:	4620      	mov	r0, r4
 8007896:	f7ff ff8b 	bl	80077b0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800789a:	2800      	cmp	r0, #0
 800789c:	d1e1      	bne.n	8007862 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800789e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078a2:	bf00      	nop
 80078a4:	0800bf10 	.word	0x0800bf10
 80078a8:	0800c182 	.word	0x0800c182
 80078ac:	0800bf19 	.word	0x0800bf19

080078b0 <_ZN8touchgfx8ceil28_4El>:
 80078b0:	f110 030f 	adds.w	r3, r0, #15
 80078b4:	d401      	bmi.n	80078ba <_ZN8touchgfx8ceil28_4El+0xa>
 80078b6:	1118      	asrs	r0, r3, #4
 80078b8:	4770      	bx	lr
 80078ba:	2210      	movs	r2, #16
 80078bc:	f1c0 0001 	rsb	r0, r0, #1
 80078c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80078c4:	f010 000f 	ands.w	r0, r0, #15
 80078c8:	bf18      	it	ne
 80078ca:	2001      	movne	r0, #1
 80078cc:	1a18      	subs	r0, r3, r0
 80078ce:	4770      	bx	lr

080078d0 <_ZN8touchgfx11floorDivModEllRlS0_>:
 80078d0:	2900      	cmp	r1, #0
 80078d2:	b538      	push	{r3, r4, r5, lr}
 80078d4:	dc05      	bgt.n	80078e2 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 80078d6:	4b0f      	ldr	r3, [pc, #60]	; (8007914 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 80078d8:	21fa      	movs	r1, #250	; 0xfa
 80078da:	4a0f      	ldr	r2, [pc, #60]	; (8007918 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 80078dc:	480f      	ldr	r0, [pc, #60]	; (800791c <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 80078de:	f002 f9fd 	bl	8009cdc <__assert_func>
 80078e2:	2800      	cmp	r0, #0
 80078e4:	db06      	blt.n	80078f4 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 80078e6:	fb90 f4f1 	sdiv	r4, r0, r1
 80078ea:	fb01 0114 	mls	r1, r1, r4, r0
 80078ee:	6014      	str	r4, [r2, #0]
 80078f0:	6019      	str	r1, [r3, #0]
 80078f2:	bd38      	pop	{r3, r4, r5, pc}
 80078f4:	4240      	negs	r0, r0
 80078f6:	fb90 f4f1 	sdiv	r4, r0, r1
 80078fa:	4265      	negs	r5, r4
 80078fc:	fb01 0014 	mls	r0, r1, r4, r0
 8007900:	6015      	str	r5, [r2, #0]
 8007902:	6018      	str	r0, [r3, #0]
 8007904:	2800      	cmp	r0, #0
 8007906:	d0f4      	beq.n	80078f2 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 8007908:	6810      	ldr	r0, [r2, #0]
 800790a:	3801      	subs	r0, #1
 800790c:	6010      	str	r0, [r2, #0]
 800790e:	6818      	ldr	r0, [r3, #0]
 8007910:	1a09      	subs	r1, r1, r0
 8007912:	e7ed      	b.n	80078f0 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 8007914:	0800c4dc 	.word	0x0800c4dc
 8007918:	0800c51b 	.word	0x0800c51b
 800791c:	0800c4ec 	.word	0x0800c4ec

08007920 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8007920:	b570      	push	{r4, r5, r6, lr}
 8007922:	694a      	ldr	r2, [r1, #20]
 8007924:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8007926:	684b      	ldr	r3, [r1, #4]
 8007928:	1b54      	subs	r4, r2, r5
 800792a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 800792c:	f000 8106 	beq.w	8007b3c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8007930:	1b9b      	subs	r3, r3, r6
 8007932:	d003      	beq.n	800793c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8007934:	4363      	muls	r3, r4
 8007936:	2210      	movs	r2, #16
 8007938:	fb93 f3f2 	sdiv	r3, r3, r2
 800793c:	680c      	ldr	r4, [r1, #0]
 800793e:	698a      	ldr	r2, [r1, #24]
 8007940:	1b65      	subs	r5, r4, r5
 8007942:	f000 80fd 	beq.w	8007b40 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8007946:	1b92      	subs	r2, r2, r6
 8007948:	d003      	beq.n	8007952 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800794a:	436a      	muls	r2, r5
 800794c:	2410      	movs	r4, #16
 800794e:	fb92 f2f4 	sdiv	r2, r2, r4
 8007952:	1a9b      	subs	r3, r3, r2
 8007954:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8007b7c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8007958:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800795c:	460a      	mov	r2, r1
 800795e:	ee07 3a90 	vmov	s15, r3
 8007962:	f100 040c 	add.w	r4, r0, #12
 8007966:	4603      	mov	r3, r0
 8007968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800796c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007970:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8007974:	eeb1 6a43 	vneg.f32	s12, s6
 8007978:	edd2 7a02 	vldr	s15, [r2, #8]
 800797c:	3214      	adds	r2, #20
 800797e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007982:	ece3 6a01 	vstmia	r3!, {s13}
 8007986:	429c      	cmp	r4, r3
 8007988:	ed52 7a02 	vldr	s15, [r2, #-8]
 800798c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007990:	edc3 7a02 	vstr	s15, [r3, #8]
 8007994:	ed52 7a01 	vldr	s15, [r2, #-4]
 8007998:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800799c:	edc3 7a05 	vstr	s15, [r3, #20]
 80079a0:	d1ea      	bne.n	8007978 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80079a2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80079a4:	698b      	ldr	r3, [r1, #24]
 80079a6:	edd0 4a02 	vldr	s9, [r0, #8]
 80079aa:	1a9b      	subs	r3, r3, r2
 80079ac:	edd0 3a00 	vldr	s7, [r0]
 80079b0:	edd0 6a01 	vldr	s13, [r0, #4]
 80079b4:	ee07 3a90 	vmov	s15, r3
 80079b8:	684b      	ldr	r3, [r1, #4]
 80079ba:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80079be:	ed90 5a05 	vldr	s10, [r0, #20]
 80079c2:	1a9b      	subs	r3, r3, r2
 80079c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079c8:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80079cc:	ed90 2a03 	vldr	s4, [r0, #12]
 80079d0:	ee07 3a10 	vmov	s14, r3
 80079d4:	edd0 5a04 	vldr	s11, [r0, #16]
 80079d8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80079dc:	ed90 1a07 	vldr	s2, [r0, #28]
 80079e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80079e4:	edd0 2a06 	vldr	s5, [r0, #24]
 80079e8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80079ec:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80079f0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80079f4:	ee32 5a45 	vsub.f32	s10, s4, s10
 80079f8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80079fc:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007a00:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8007a04:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8007a06:	694a      	ldr	r2, [r1, #20]
 8007a08:	1b13      	subs	r3, r2, r4
 8007a0a:	ee07 3a10 	vmov	s14, r3
 8007a0e:	680b      	ldr	r3, [r1, #0]
 8007a10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007a14:	1b1b      	subs	r3, r3, r4
 8007a16:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007a1a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8007a1e:	ee07 3a10 	vmov	s14, r3
 8007a22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007a26:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007a2a:	eee6 4a87 	vfma.f32	s9, s13, s14
 8007a2e:	ee64 4a86 	vmul.f32	s9, s9, s12
 8007a32:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8007a36:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007a38:	698b      	ldr	r3, [r1, #24]
 8007a3a:	1a9b      	subs	r3, r3, r2
 8007a3c:	ee06 3a90 	vmov	s13, r3
 8007a40:	684b      	ldr	r3, [r1, #4]
 8007a42:	1a9b      	subs	r3, r3, r2
 8007a44:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007a48:	ee07 3a10 	vmov	s14, r3
 8007a4c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8007a50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007a54:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8007a58:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007a5c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8007a60:	ee66 6a83 	vmul.f32	s13, s13, s6
 8007a64:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8007a68:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8007a6a:	694a      	ldr	r2, [r1, #20]
 8007a6c:	1b13      	subs	r3, r2, r4
 8007a6e:	ee07 3a10 	vmov	s14, r3
 8007a72:	680b      	ldr	r3, [r1, #0]
 8007a74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007a78:	1b1b      	subs	r3, r3, r4
 8007a7a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007a7e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8007a82:	ee07 3a10 	vmov	s14, r3
 8007a86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007a8a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007a8e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8007a92:	edd0 5a08 	vldr	s11, [r0, #32]
 8007a96:	ee31 1a65 	vsub.f32	s2, s2, s11
 8007a9a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8007a9e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8007aa2:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8007aa6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007aa8:	698b      	ldr	r3, [r1, #24]
 8007aaa:	1a9b      	subs	r3, r3, r2
 8007aac:	ee07 3a10 	vmov	s14, r3
 8007ab0:	684b      	ldr	r3, [r1, #4]
 8007ab2:	1a9b      	subs	r3, r3, r2
 8007ab4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007ab8:	ee01 3a90 	vmov	s3, r3
 8007abc:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007ac0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8007ac4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8007ac8:	ee61 1a84 	vmul.f32	s3, s3, s8
 8007acc:	eea1 7a21 	vfma.f32	s14, s2, s3
 8007ad0:	ee27 7a03 	vmul.f32	s14, s14, s6
 8007ad4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8007ad8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8007ada:	694a      	ldr	r2, [r1, #20]
 8007adc:	1b13      	subs	r3, r2, r4
 8007ade:	ee03 3a10 	vmov	s6, r3
 8007ae2:	680b      	ldr	r3, [r1, #0]
 8007ae4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8007ae8:	1b1b      	subs	r3, r3, r4
 8007aea:	ee23 3a04 	vmul.f32	s6, s6, s8
 8007aee:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8007af2:	ee03 3a10 	vmov	s6, r3
 8007af6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8007afa:	ee23 4a04 	vmul.f32	s8, s6, s8
 8007afe:	eee1 5a04 	vfma.f32	s11, s2, s8
 8007b02:	ee25 6a86 	vmul.f32	s12, s11, s12
 8007b06:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8007b0a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8007b0e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8007b12:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8007b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b1a:	dd13      	ble.n	8007b44 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8007b1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b20:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8007b24:	63c3      	str	r3, [r0, #60]	; 0x3c
 8007b26:	eee3 7a87 	vfma.f32	s15, s7, s14
 8007b2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b32:	dd15      	ble.n	8007b60 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8007b34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b38:	6403      	str	r3, [r0, #64]	; 0x40
 8007b3a:	bd70      	pop	{r4, r5, r6, pc}
 8007b3c:	4623      	mov	r3, r4
 8007b3e:	e6fd      	b.n	800793c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8007b40:	462a      	mov	r2, r5
 8007b42:	e706      	b.n	8007952 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8007b44:	d502      	bpl.n	8007b4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8007b46:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007b4a:	e7e9      	b.n	8007b20 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8007b4c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8007b50:	eea3 2a85 	vfma.f32	s4, s7, s10
 8007b54:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8007b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b5c:	dade      	bge.n	8007b1c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8007b5e:	e7f2      	b.n	8007b46 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8007b60:	d502      	bpl.n	8007b68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8007b62:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007b66:	e7e7      	b.n	8007b38 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8007b68:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8007b6c:	eee3 4a86 	vfma.f32	s9, s7, s12
 8007b70:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8007b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b78:	dadc      	bge.n	8007b34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8007b7a:	e7f2      	b.n	8007b62 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8007b7c:	3d800000 	.word	0x3d800000

08007b80 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8007b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b84:	f04f 0814 	mov.w	r8, #20
 8007b88:	4604      	mov	r4, r0
 8007b8a:	4617      	mov	r7, r2
 8007b8c:	460d      	mov	r5, r1
 8007b8e:	fb08 f903 	mul.w	r9, r8, r3
 8007b92:	461e      	mov	r6, r3
 8007b94:	eb02 0a09 	add.w	sl, r2, r9
 8007b98:	f8da 0004 	ldr.w	r0, [sl, #4]
 8007b9c:	f7ff fe88 	bl	80078b0 <_ZN8touchgfx8ceil28_4El>
 8007ba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ba2:	6160      	str	r0, [r4, #20]
 8007ba4:	fb08 f803 	mul.w	r8, r8, r3
 8007ba8:	9001      	str	r0, [sp, #4]
 8007baa:	eb07 0b08 	add.w	fp, r7, r8
 8007bae:	f8db 0004 	ldr.w	r0, [fp, #4]
 8007bb2:	f7ff fe7d 	bl	80078b0 <_ZN8touchgfx8ceil28_4El>
 8007bb6:	9a01      	ldr	r2, [sp, #4]
 8007bb8:	1a80      	subs	r0, r0, r2
 8007bba:	61a0      	str	r0, [r4, #24]
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	f000 8088 	beq.w	8007cd2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 8007bc2:	f857 3009 	ldr.w	r3, [r7, r9]
 8007bc6:	f857 c008 	ldr.w	ip, [r7, r8]
 8007bca:	f8db 0004 	ldr.w	r0, [fp, #4]
 8007bce:	ebac 0c03 	sub.w	ip, ip, r3
 8007bd2:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007bd6:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 8007bda:	1a40      	subs	r0, r0, r1
 8007bdc:	fb0b f202 	mul.w	r2, fp, r2
 8007be0:	ea4f 1800 	mov.w	r8, r0, lsl #4
 8007be4:	fb0c 2211 	mls	r2, ip, r1, r2
 8007be8:	4641      	mov	r1, r8
 8007bea:	fb00 2003 	mla	r0, r0, r3, r2
 8007bee:	f104 0310 	add.w	r3, r4, #16
 8007bf2:	4622      	mov	r2, r4
 8007bf4:	3801      	subs	r0, #1
 8007bf6:	4440      	add	r0, r8
 8007bf8:	f7ff fe6a 	bl	80078d0 <_ZN8touchgfx11floorDivModEllRlS0_>
 8007bfc:	f104 0308 	add.w	r3, r4, #8
 8007c00:	1d22      	adds	r2, r4, #4
 8007c02:	4641      	mov	r1, r8
 8007c04:	4658      	mov	r0, fp
 8007c06:	f7ff fe63 	bl	80078d0 <_ZN8touchgfx11floorDivModEllRlS0_>
 8007c0a:	f8c4 800c 	str.w	r8, [r4, #12]
 8007c0e:	6962      	ldr	r2, [r4, #20]
 8007c10:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007c14:	eddf 6a31 	vldr	s13, [pc, #196]	; 8007cdc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8007c18:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8007c1c:	6822      	ldr	r2, [r4, #0]
 8007c1e:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8007c22:	ee07 3a10 	vmov	s14, r3
 8007c26:	f857 3009 	ldr.w	r3, [r7, r9]
 8007c2a:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8007c2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007c32:	ee07 3a90 	vmov	s15, r3
 8007c36:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 8007c3a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007c46:	edd3 6a00 	vldr	s13, [r3]
 8007c4a:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007c4e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8007c52:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007c56:	edc4 6a07 	vstr	s13, [r4, #28]
 8007c5a:	edd4 6a01 	vldr	s13, [r4, #4]
 8007c5e:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 8007c62:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007c66:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8007c6a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8007c6e:	ed84 6a08 	vstr	s12, [r4, #32]
 8007c72:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8007c74:	6262      	str	r2, [r4, #36]	; 0x24
 8007c76:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 8007c7a:	ed93 6a03 	vldr	s12, [r3, #12]
 8007c7e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8007c82:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8007c86:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8007c8a:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 8007c8e:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8007c92:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 8007c96:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8007c9a:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 8007c9e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8007ca0:	6322      	str	r2, [r4, #48]	; 0x30
 8007ca2:	ed93 6a06 	vldr	s12, [r3, #24]
 8007ca6:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 8007caa:	eea5 6a87 	vfma.f32	s12, s11, s14
 8007cae:	eeb0 7a46 	vmov.f32	s14, s12
 8007cb2:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 8007cb6:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007cba:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 8007cbe:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 8007cc2:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 8007cc6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007cca:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 8007cce:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8007cd0:	63e3      	str	r3, [r4, #60]	; 0x3c
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	b003      	add	sp, #12
 8007cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cda:	bf00      	nop
 8007cdc:	3d800000 	.word	0x3d800000

08007ce0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8007ce0:	4b06      	ldr	r3, [pc, #24]	; (8007cfc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8007ce2:	881a      	ldrh	r2, [r3, #0]
 8007ce4:	4282      	cmp	r2, r0
 8007ce6:	d807      	bhi.n	8007cf8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8007ce8:	4b05      	ldr	r3, [pc, #20]	; (8007d00 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8007cea:	881b      	ldrh	r3, [r3, #0]
 8007cec:	4413      	add	r3, r2
 8007cee:	4298      	cmp	r0, r3
 8007cf0:	bfac      	ite	ge
 8007cf2:	2000      	movge	r0, #0
 8007cf4:	2001      	movlt	r0, #1
 8007cf6:	4770      	bx	lr
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	4770      	bx	lr
 8007cfc:	200010fc 	.word	0x200010fc
 8007d00:	200010fe 	.word	0x200010fe

08007d04 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8007d04:	b508      	push	{r3, lr}
 8007d06:	4601      	mov	r1, r0
 8007d08:	f7ff ffea 	bl	8007ce0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8007d0c:	b118      	cbz	r0, 8007d16 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8007d0e:	4b02      	ldr	r3, [pc, #8]	; (8007d18 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8007d16:	bd08      	pop	{r3, pc}
 8007d18:	200010f4 	.word	0x200010f4

08007d1c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8007d1c:	b508      	push	{r3, lr}
 8007d1e:	4b14      	ldr	r3, [pc, #80]	; (8007d70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8007d20:	6819      	ldr	r1, [r3, #0]
 8007d22:	b931      	cbnz	r1, 8007d32 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8007d24:	4b13      	ldr	r3, [pc, #76]	; (8007d74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8007d26:	f240 3187 	movw	r1, #903	; 0x387
 8007d2a:	4a13      	ldr	r2, [pc, #76]	; (8007d78 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8007d2c:	4813      	ldr	r0, [pc, #76]	; (8007d7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8007d2e:	f001 ffd5 	bl	8009cdc <__assert_func>
 8007d32:	4a13      	ldr	r2, [pc, #76]	; (8007d80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8007d34:	8803      	ldrh	r3, [r0, #0]
 8007d36:	8812      	ldrh	r2, [r2, #0]
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d204      	bcs.n	8007d46 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8007d3c:	2214      	movs	r2, #20
 8007d3e:	fb02 1303 	mla	r3, r2, r3, r1
 8007d42:	8918      	ldrh	r0, [r3, #8]
 8007d44:	bd08      	pop	{r3, pc}
 8007d46:	490f      	ldr	r1, [pc, #60]	; (8007d84 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8007d48:	8809      	ldrh	r1, [r1, #0]
 8007d4a:	4411      	add	r1, r2
 8007d4c:	428b      	cmp	r3, r1
 8007d4e:	da06      	bge.n	8007d5e <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8007d50:	1a9b      	subs	r3, r3, r2
 8007d52:	4a0d      	ldr	r2, [pc, #52]	; (8007d88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8007d54:	210e      	movs	r1, #14
 8007d56:	6812      	ldr	r2, [r2, #0]
 8007d58:	fb01 2303 	mla	r3, r1, r3, r2
 8007d5c:	e7f1      	b.n	8007d42 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8007d5e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007d62:	4293      	cmp	r3, r2
 8007d64:	bf0a      	itet	eq
 8007d66:	4b09      	ldreq	r3, [pc, #36]	; (8007d8c <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8007d68:	2000      	movne	r0, #0
 8007d6a:	8818      	ldrheq	r0, [r3, #0]
 8007d6c:	e7ea      	b.n	8007d44 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8007d6e:	bf00      	nop
 8007d70:	20001100 	.word	0x20001100
 8007d74:	0800c5b9 	.word	0x0800c5b9
 8007d78:	0800c65c 	.word	0x0800c65c
 8007d7c:	0800c594 	.word	0x0800c594
 8007d80:	200010fc 	.word	0x200010fc
 8007d84:	200010fe 	.word	0x200010fe
 8007d88:	200010f8 	.word	0x200010f8
 8007d8c:	200010a4 	.word	0x200010a4

08007d90 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8007d90:	b508      	push	{r3, lr}
 8007d92:	4b14      	ldr	r3, [pc, #80]	; (8007de4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8007d94:	6819      	ldr	r1, [r3, #0]
 8007d96:	b931      	cbnz	r1, 8007da6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8007d98:	4b13      	ldr	r3, [pc, #76]	; (8007de8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8007d9a:	f240 319b 	movw	r1, #923	; 0x39b
 8007d9e:	4a13      	ldr	r2, [pc, #76]	; (8007dec <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8007da0:	4813      	ldr	r0, [pc, #76]	; (8007df0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8007da2:	f001 ff9b 	bl	8009cdc <__assert_func>
 8007da6:	4a13      	ldr	r2, [pc, #76]	; (8007df4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8007da8:	8803      	ldrh	r3, [r0, #0]
 8007daa:	8812      	ldrh	r2, [r2, #0]
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d204      	bcs.n	8007dba <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8007db0:	2214      	movs	r2, #20
 8007db2:	fb02 1303 	mla	r3, r2, r3, r1
 8007db6:	8958      	ldrh	r0, [r3, #10]
 8007db8:	bd08      	pop	{r3, pc}
 8007dba:	490f      	ldr	r1, [pc, #60]	; (8007df8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8007dbc:	8809      	ldrh	r1, [r1, #0]
 8007dbe:	4411      	add	r1, r2
 8007dc0:	428b      	cmp	r3, r1
 8007dc2:	da06      	bge.n	8007dd2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8007dc4:	1a9b      	subs	r3, r3, r2
 8007dc6:	4a0d      	ldr	r2, [pc, #52]	; (8007dfc <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8007dc8:	210e      	movs	r1, #14
 8007dca:	6812      	ldr	r2, [r2, #0]
 8007dcc:	fb01 2303 	mla	r3, r1, r3, r2
 8007dd0:	e7f1      	b.n	8007db6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8007dd2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	bf0a      	itet	eq
 8007dda:	4b09      	ldreq	r3, [pc, #36]	; (8007e00 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8007ddc:	2000      	movne	r0, #0
 8007dde:	8818      	ldrheq	r0, [r3, #0]
 8007de0:	e7ea      	b.n	8007db8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8007de2:	bf00      	nop
 8007de4:	20001100 	.word	0x20001100
 8007de8:	0800c5b9 	.word	0x0800c5b9
 8007dec:	0800c688 	.word	0x0800c688
 8007df0:	0800c594 	.word	0x0800c594
 8007df4:	200010fc 	.word	0x200010fc
 8007df8:	200010fe 	.word	0x200010fe
 8007dfc:	200010f8 	.word	0x200010f8
 8007e00:	200010a6 	.word	0x200010a6

08007e04 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8007e04:	4b23      	ldr	r3, [pc, #140]	; (8007e94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8007e06:	b510      	push	{r4, lr}
 8007e08:	681c      	ldr	r4, [r3, #0]
 8007e0a:	b934      	cbnz	r4, 8007e1a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8007e0c:	4b22      	ldr	r3, [pc, #136]	; (8007e98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8007e0e:	f240 31af 	movw	r1, #943	; 0x3af
 8007e12:	4a22      	ldr	r2, [pc, #136]	; (8007e9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8007e14:	4822      	ldr	r0, [pc, #136]	; (8007ea0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8007e16:	f001 ff61 	bl	8009cdc <__assert_func>
 8007e1a:	4a22      	ldr	r2, [pc, #136]	; (8007ea4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8007e1c:	880b      	ldrh	r3, [r1, #0]
 8007e1e:	8812      	ldrh	r2, [r2, #0]
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d211      	bcs.n	8007e48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8007e24:	2214      	movs	r2, #20
 8007e26:	fb02 4303 	mla	r3, r2, r3, r4
 8007e2a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8007e2e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8007e32:	8a1a      	ldrh	r2, [r3, #16]
 8007e34:	8a5b      	ldrh	r3, [r3, #18]
 8007e36:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8007e3a:	8004      	strh	r4, [r0, #0]
 8007e3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e40:	8041      	strh	r1, [r0, #2]
 8007e42:	8082      	strh	r2, [r0, #4]
 8007e44:	80c3      	strh	r3, [r0, #6]
 8007e46:	e00e      	b.n	8007e66 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8007e48:	4917      	ldr	r1, [pc, #92]	; (8007ea8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8007e4a:	8809      	ldrh	r1, [r1, #0]
 8007e4c:	4411      	add	r1, r2
 8007e4e:	428b      	cmp	r3, r1
 8007e50:	da0a      	bge.n	8007e68 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8007e52:	1a9b      	subs	r3, r3, r2
 8007e54:	4a15      	ldr	r2, [pc, #84]	; (8007eac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8007e56:	210e      	movs	r1, #14
 8007e58:	6812      	ldr	r2, [r2, #0]
 8007e5a:	fb01 2303 	mla	r3, r1, r3, r2
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	6002      	str	r2, [r0, #0]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	6042      	str	r2, [r0, #4]
 8007e66:	bd10      	pop	{r4, pc}
 8007e68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d10b      	bne.n	8007e88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8007e70:	4b0f      	ldr	r3, [pc, #60]	; (8007eb0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8007e72:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007e76:	4b0f      	ldr	r3, [pc, #60]	; (8007eb4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8007e78:	8081      	strh	r1, [r0, #4]
 8007e7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007e7e:	2300      	movs	r3, #0
 8007e80:	80c2      	strh	r2, [r0, #6]
 8007e82:	8003      	strh	r3, [r0, #0]
 8007e84:	8043      	strh	r3, [r0, #2]
 8007e86:	e7ee      	b.n	8007e66 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	8003      	strh	r3, [r0, #0]
 8007e8c:	8043      	strh	r3, [r0, #2]
 8007e8e:	8083      	strh	r3, [r0, #4]
 8007e90:	e7d8      	b.n	8007e44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8007e92:	bf00      	nop
 8007e94:	20001100 	.word	0x20001100
 8007e98:	0800c5b9 	.word	0x0800c5b9
 8007e9c:	0800c5f5 	.word	0x0800c5f5
 8007ea0:	0800c594 	.word	0x0800c594
 8007ea4:	200010fc 	.word	0x200010fc
 8007ea8:	200010fe 	.word	0x200010fe
 8007eac:	200010f8 	.word	0x200010f8
 8007eb0:	200010a4 	.word	0x200010a4
 8007eb4:	200010a6 	.word	0x200010a6

08007eb8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8007eb8:	4b18      	ldr	r3, [pc, #96]	; (8007f1c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	b34b      	cbz	r3, 8007f12 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8007ebe:	4a18      	ldr	r2, [pc, #96]	; (8007f20 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8007ec0:	8800      	ldrh	r0, [r0, #0]
 8007ec2:	8812      	ldrh	r2, [r2, #0]
 8007ec4:	4290      	cmp	r0, r2
 8007ec6:	d211      	bcs.n	8007eec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8007ec8:	2214      	movs	r2, #20
 8007eca:	fb02 3300 	mla	r3, r2, r0, r3
 8007ece:	8a1a      	ldrh	r2, [r3, #16]
 8007ed0:	8919      	ldrh	r1, [r3, #8]
 8007ed2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8007ed6:	428a      	cmp	r2, r1
 8007ed8:	db1d      	blt.n	8007f16 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8007eda:	8a58      	ldrh	r0, [r3, #18]
 8007edc:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8007ee0:	895b      	ldrh	r3, [r3, #10]
 8007ee2:	4298      	cmp	r0, r3
 8007ee4:	bfac      	ite	ge
 8007ee6:	2000      	movge	r0, #0
 8007ee8:	2001      	movlt	r0, #1
 8007eea:	4770      	bx	lr
 8007eec:	4b0d      	ldr	r3, [pc, #52]	; (8007f24 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8007eee:	881b      	ldrh	r3, [r3, #0]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	4298      	cmp	r0, r3
 8007ef4:	da0d      	bge.n	8007f12 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8007ef6:	4b0c      	ldr	r3, [pc, #48]	; (8007f28 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8007ef8:	1a80      	subs	r0, r0, r2
 8007efa:	220e      	movs	r2, #14
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	fb02 3300 	mla	r3, r2, r0, r3
 8007f02:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8007f06:	891a      	ldrh	r2, [r3, #8]
 8007f08:	4291      	cmp	r1, r2
 8007f0a:	db04      	blt.n	8007f16 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8007f0c:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8007f10:	e7e6      	b.n	8007ee0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8007f12:	2000      	movs	r0, #0
 8007f14:	4770      	bx	lr
 8007f16:	2001      	movs	r0, #1
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	20001100 	.word	0x20001100
 8007f20:	200010fc 	.word	0x200010fc
 8007f24:	200010fe 	.word	0x200010fe
 8007f28:	200010f8 	.word	0x200010f8

08007f2c <_ZNK8touchgfx6Bitmap7getDataEv>:
 8007f2c:	b508      	push	{r3, lr}
 8007f2e:	4b12      	ldr	r3, [pc, #72]	; (8007f78 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8007f30:	6819      	ldr	r1, [r3, #0]
 8007f32:	b931      	cbnz	r1, 8007f42 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8007f34:	4b11      	ldr	r3, [pc, #68]	; (8007f7c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8007f36:	f240 31d3 	movw	r1, #979	; 0x3d3
 8007f3a:	4a11      	ldr	r2, [pc, #68]	; (8007f80 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8007f3c:	4811      	ldr	r0, [pc, #68]	; (8007f84 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8007f3e:	f001 fecd 	bl	8009cdc <__assert_func>
 8007f42:	8803      	ldrh	r3, [r0, #0]
 8007f44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d012      	beq.n	8007f72 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8007f4c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d103      	bne.n	8007f5c <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8007f54:	4b0c      	ldr	r3, [pc, #48]	; (8007f88 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8007f5a:	bd08      	pop	{r3, pc}
 8007f5c:	4a0b      	ldr	r2, [pc, #44]	; (8007f8c <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8007f5e:	6812      	ldr	r2, [r2, #0]
 8007f60:	b11a      	cbz	r2, 8007f6a <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8007f62:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007f66:	2800      	cmp	r0, #0
 8007f68:	d1f7      	bne.n	8007f5a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8007f6a:	2214      	movs	r2, #20
 8007f6c:	4353      	muls	r3, r2
 8007f6e:	58c8      	ldr	r0, [r1, r3]
 8007f70:	e7f3      	b.n	8007f5a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8007f72:	2000      	movs	r0, #0
 8007f74:	e7f1      	b.n	8007f5a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8007f76:	bf00      	nop
 8007f78:	20001100 	.word	0x20001100
 8007f7c:	0800c5b9 	.word	0x0800c5b9
 8007f80:	0800c62b 	.word	0x0800c62b
 8007f84:	0800c594 	.word	0x0800c594
 8007f88:	200010b0 	.word	0x200010b0
 8007f8c:	200010f4 	.word	0x200010f4

08007f90 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8007f90:	8802      	ldrh	r2, [r0, #0]
 8007f92:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d845      	bhi.n	8008026 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8007f9a:	4b24      	ldr	r3, [pc, #144]	; (800802c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8007f9c:	8818      	ldrh	r0, [r3, #0]
 8007f9e:	4282      	cmp	r2, r0
 8007fa0:	d221      	bcs.n	8007fe6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 8007fa2:	4b23      	ldr	r3, [pc, #140]	; (8008030 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8007fa4:	6819      	ldr	r1, [r3, #0]
 8007fa6:	2314      	movs	r3, #20
 8007fa8:	fb03 1302 	mla	r3, r3, r2, r1
 8007fac:	6858      	ldr	r0, [r3, #4]
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d03a      	beq.n	8008028 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8007fb2:	4920      	ldr	r1, [pc, #128]	; (8008034 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8007fb4:	6809      	ldr	r1, [r1, #0]
 8007fb6:	2900      	cmp	r1, #0
 8007fb8:	d036      	beq.n	8008028 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8007fba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8007fbe:	2900      	cmp	r1, #0
 8007fc0:	d032      	beq.n	8008028 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8007fc2:	891a      	ldrh	r2, [r3, #8]
 8007fc4:	8958      	ldrh	r0, [r3, #10]
 8007fc6:	4350      	muls	r0, r2
 8007fc8:	7c5a      	ldrb	r2, [r3, #17]
 8007fca:	7cdb      	ldrb	r3, [r3, #19]
 8007fcc:	0952      	lsrs	r2, r2, #5
 8007fce:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8007fd2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007fd6:	2b0b      	cmp	r3, #11
 8007fd8:	bf18      	it	ne
 8007fda:	0040      	lslne	r0, r0, #1
 8007fdc:	3003      	adds	r0, #3
 8007fde:	f020 0003 	bic.w	r0, r0, #3
 8007fe2:	4408      	add	r0, r1
 8007fe4:	4770      	bx	lr
 8007fe6:	4b14      	ldr	r3, [pc, #80]	; (8008038 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 8007fe8:	881b      	ldrh	r3, [r3, #0]
 8007fea:	4403      	add	r3, r0
 8007fec:	429a      	cmp	r2, r3
 8007fee:	da1a      	bge.n	8008026 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8007ff0:	4b12      	ldr	r3, [pc, #72]	; (800803c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 8007ff2:	1a10      	subs	r0, r2, r0
 8007ff4:	210e      	movs	r1, #14
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	fb01 3000 	mla	r0, r1, r0, r3
 8007ffc:	7b03      	ldrb	r3, [r0, #12]
 8007ffe:	f003 031f 	and.w	r3, r3, #31
 8008002:	2b0b      	cmp	r3, #11
 8008004:	d10b      	bne.n	800801e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8008006:	8903      	ldrh	r3, [r0, #8]
 8008008:	8940      	ldrh	r0, [r0, #10]
 800800a:	4358      	muls	r0, r3
 800800c:	4b09      	ldr	r3, [pc, #36]	; (8008034 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 800800e:	3003      	adds	r0, #3
 8008010:	6819      	ldr	r1, [r3, #0]
 8008012:	f020 0303 	bic.w	r3, r0, #3
 8008016:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800801a:	4418      	add	r0, r3
 800801c:	4770      	bx	lr
 800801e:	2b0d      	cmp	r3, #13
 8008020:	d101      	bne.n	8008026 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8008022:	300d      	adds	r0, #13
 8008024:	4770      	bx	lr
 8008026:	2000      	movs	r0, #0
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	200010fc 	.word	0x200010fc
 8008030:	20001100 	.word	0x20001100
 8008034:	200010f4 	.word	0x200010f4
 8008038:	200010fe 	.word	0x200010fe
 800803c:	200010f8 	.word	0x200010f8

08008040 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8008040:	4b19      	ldr	r3, [pc, #100]	; (80080a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8008042:	6819      	ldr	r1, [r3, #0]
 8008044:	8803      	ldrh	r3, [r0, #0]
 8008046:	b1e9      	cbz	r1, 8008084 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8008048:	4a18      	ldr	r2, [pc, #96]	; (80080ac <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 800804a:	8812      	ldrh	r2, [r2, #0]
 800804c:	429a      	cmp	r2, r3
 800804e:	d90a      	bls.n	8008066 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8008050:	2214      	movs	r2, #20
 8008052:	fb02 1303 	mla	r3, r2, r3, r1
 8008056:	7c58      	ldrb	r0, [r3, #17]
 8008058:	0942      	lsrs	r2, r0, #5
 800805a:	7cd8      	ldrb	r0, [r3, #19]
 800805c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8008060:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8008064:	4770      	bx	lr
 8008066:	4912      	ldr	r1, [pc, #72]	; (80080b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8008068:	8809      	ldrh	r1, [r1, #0]
 800806a:	4411      	add	r1, r2
 800806c:	428b      	cmp	r3, r1
 800806e:	da09      	bge.n	8008084 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8008070:	1a9b      	subs	r3, r3, r2
 8008072:	4a10      	ldr	r2, [pc, #64]	; (80080b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 8008074:	210e      	movs	r1, #14
 8008076:	6812      	ldr	r2, [r2, #0]
 8008078:	fb01 2303 	mla	r3, r1, r3, r2
 800807c:	7b18      	ldrb	r0, [r3, #12]
 800807e:	f000 001f 	and.w	r0, r0, #31
 8008082:	4770      	bx	lr
 8008084:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008088:	4293      	cmp	r3, r2
 800808a:	d10a      	bne.n	80080a2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 800808c:	4b0a      	ldr	r3, [pc, #40]	; (80080b8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8008094:	b10a      	cbz	r2, 800809a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8008096:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008098:	b900      	cbnz	r0, 800809c <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 800809a:	6898      	ldr	r0, [r3, #8]
 800809c:	6803      	ldr	r3, [r0, #0]
 800809e:	6a1b      	ldr	r3, [r3, #32]
 80080a0:	4718      	bx	r3
 80080a2:	2000      	movs	r0, #0
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	20001100 	.word	0x20001100
 80080ac:	200010fc 	.word	0x200010fc
 80080b0:	200010fe 	.word	0x200010fe
 80080b4:	200010f8 	.word	0x200010f8
 80080b8:	200010b0 	.word	0x200010b0

080080bc <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 80080bc:	2010      	movs	r0, #16
 80080be:	4770      	bx	lr

080080c0 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr

080080c4 <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 80080c4:	00d2      	lsls	r2, r2, #3
 80080c6:	0209      	lsls	r1, r1, #8
 80080c8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80080cc:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 80080d0:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 80080d4:	4310      	orrs	r0, r2
 80080d6:	4770      	bx	lr

080080d8 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 80080d8:	0a09      	lsrs	r1, r1, #8
 80080da:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 80080de:	4770      	bx	lr

080080e0 <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 80080e0:	08c9      	lsrs	r1, r1, #3
 80080e2:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 80080e6:	4770      	bx	lr

080080e8 <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 80080e8:	00c9      	lsls	r1, r1, #3
 80080ea:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 80080ee:	4770      	bx	lr

080080f0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80080f0:	2bff      	cmp	r3, #255	; 0xff
 80080f2:	d050      	beq.n	8008196 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 80080f4:	2a0b      	cmp	r2, #11
 80080f6:	d04a      	beq.n	800818e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80080f8:	d80e      	bhi.n	8008118 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 80080fa:	2a03      	cmp	r2, #3
 80080fc:	d03f      	beq.n	800817e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 80080fe:	d804      	bhi.n	800810a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8008100:	2a01      	cmp	r2, #1
 8008102:	d03e      	beq.n	8008182 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8008104:	d93f      	bls.n	8008186 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8008106:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8008108:	4770      	bx	lr
 800810a:	2a09      	cmp	r2, #9
 800810c:	d03f      	beq.n	800818e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 800810e:	d83c      	bhi.n	800818a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8008110:	2a08      	cmp	r2, #8
 8008112:	d03a      	beq.n	800818a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8008114:	2000      	movs	r0, #0
 8008116:	4770      	bx	lr
 8008118:	2a2f      	cmp	r2, #47	; 0x2f
 800811a:	d024      	beq.n	8008166 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 800811c:	d80d      	bhi.n	800813a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 800811e:	2a2d      	cmp	r2, #45	; 0x2d
 8008120:	d014      	beq.n	800814c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8008122:	d826      	bhi.n	8008172 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8008124:	2a2c      	cmp	r2, #44	; 0x2c
 8008126:	d1f5      	bne.n	8008114 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8008128:	684b      	ldr	r3, [r1, #4]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d018      	beq.n	8008162 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8008130:	d323      	bcc.n	800817a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8008132:	2b02      	cmp	r3, #2
 8008134:	d1ee      	bne.n	8008114 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8008136:	6880      	ldr	r0, [r0, #8]
 8008138:	4770      	bx	lr
 800813a:	2a31      	cmp	r2, #49	; 0x31
 800813c:	d004      	beq.n	8008148 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 800813e:	d328      	bcc.n	8008192 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8008140:	2a32      	cmp	r2, #50	; 0x32
 8008142:	d026      	beq.n	8008192 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8008144:	2a33      	cmp	r2, #51	; 0x33
 8008146:	d1e5      	bne.n	8008114 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8008148:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800814a:	4770      	bx	lr
 800814c:	684b      	ldr	r3, [r1, #4]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d004      	beq.n	800815e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8008154:	d30b      	bcc.n	800816e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8008156:	2b02      	cmp	r3, #2
 8008158:	d1dc      	bne.n	8008114 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800815a:	6900      	ldr	r0, [r0, #16]
 800815c:	4770      	bx	lr
 800815e:	6a00      	ldr	r0, [r0, #32]
 8008160:	4770      	bx	lr
 8008162:	6980      	ldr	r0, [r0, #24]
 8008164:	4770      	bx	lr
 8008166:	684b      	ldr	r3, [r1, #4]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1d2      	bne.n	8008114 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800816e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008170:	4770      	bx	lr
 8008172:	684b      	ldr	r3, [r1, #4]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1cc      	bne.n	8008114 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800817a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800817c:	4770      	bx	lr
 800817e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8008180:	4770      	bx	lr
 8008182:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8008184:	4770      	bx	lr
 8008186:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8008188:	4770      	bx	lr
 800818a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800818c:	4770      	bx	lr
 800818e:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8008190:	4770      	bx	lr
 8008192:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8008194:	4770      	bx	lr
 8008196:	2a0b      	cmp	r2, #11
 8008198:	d049      	beq.n	800822e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 800819a:	d80e      	bhi.n	80081ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 800819c:	2a03      	cmp	r2, #3
 800819e:	d040      	beq.n	8008222 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 80081a0:	d804      	bhi.n	80081ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 80081a2:	2a01      	cmp	r2, #1
 80081a4:	d03f      	beq.n	8008226 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 80081a6:	d940      	bls.n	800822a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 80081a8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80081aa:	4770      	bx	lr
 80081ac:	2a09      	cmp	r2, #9
 80081ae:	d03e      	beq.n	800822e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80081b0:	d801      	bhi.n	80081b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 80081b2:	2a08      	cmp	r2, #8
 80081b4:	d1ae      	bne.n	8008114 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80081b6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80081b8:	4770      	bx	lr
 80081ba:	2a2f      	cmp	r2, #47	; 0x2f
 80081bc:	d024      	beq.n	8008208 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 80081be:	d80d      	bhi.n	80081dc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 80081c0:	2a2d      	cmp	r2, #45	; 0x2d
 80081c2:	d014      	beq.n	80081ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 80081c4:	d826      	bhi.n	8008214 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 80081c6:	2a2c      	cmp	r2, #44	; 0x2c
 80081c8:	d1a4      	bne.n	8008114 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80081ca:	684b      	ldr	r3, [r1, #4]
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d018      	beq.n	8008204 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 80081d2:	d324      	bcc.n	800821e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d19d      	bne.n	8008114 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80081d8:	68c0      	ldr	r0, [r0, #12]
 80081da:	4770      	bx	lr
 80081dc:	2a31      	cmp	r2, #49	; 0x31
 80081de:	d004      	beq.n	80081ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 80081e0:	d327      	bcc.n	8008232 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 80081e2:	2a32      	cmp	r2, #50	; 0x32
 80081e4:	d025      	beq.n	8008232 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 80081e6:	2a33      	cmp	r2, #51	; 0x33
 80081e8:	d194      	bne.n	8008114 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80081ea:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80081ec:	4770      	bx	lr
 80081ee:	684b      	ldr	r3, [r1, #4]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d004      	beq.n	8008200 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 80081f6:	d30b      	bcc.n	8008210 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d18b      	bne.n	8008114 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80081fc:	6940      	ldr	r0, [r0, #20]
 80081fe:	4770      	bx	lr
 8008200:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008202:	4770      	bx	lr
 8008204:	69c0      	ldr	r0, [r0, #28]
 8008206:	4770      	bx	lr
 8008208:	684b      	ldr	r3, [r1, #4]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d181      	bne.n	8008114 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8008210:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8008212:	4770      	bx	lr
 8008214:	684b      	ldr	r3, [r1, #4]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	f47f af7b 	bne.w	8008114 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800821e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8008220:	4770      	bx	lr
 8008222:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008224:	4770      	bx	lr
 8008226:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8008228:	4770      	bx	lr
 800822a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800822c:	4770      	bx	lr
 800822e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8008230:	4770      	bx	lr
 8008232:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8008234:	4770      	bx	lr

08008236 <_ZN8touchgfx8LCD16bppD1Ev>:
 8008236:	4770      	bx	lr

08008238 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8008238:	b508      	push	{r3, lr}
 800823a:	4b06      	ldr	r3, [pc, #24]	; (8008254 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 800823c:	8818      	ldrh	r0, [r3, #0]
 800823e:	b928      	cbnz	r0, 800824c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8008240:	4b05      	ldr	r3, [pc, #20]	; (8008258 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 8008242:	2154      	movs	r1, #84	; 0x54
 8008244:	4a05      	ldr	r2, [pc, #20]	; (800825c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8008246:	4806      	ldr	r0, [pc, #24]	; (8008260 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8008248:	f001 fd48 	bl	8009cdc <__assert_func>
 800824c:	0040      	lsls	r0, r0, #1
 800824e:	b280      	uxth	r0, r0
 8008250:	bd08      	pop	{r3, pc}
 8008252:	bf00      	nop
 8008254:	200010aa 	.word	0x200010aa
 8008258:	0800ca71 	.word	0x0800ca71
 800825c:	0800cd5d 	.word	0x0800cd5d
 8008260:	0800cab3 	.word	0x0800cab3

08008264 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8008264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008268:	b08b      	sub	sp, #44	; 0x2c
 800826a:	460f      	mov	r7, r1
 800826c:	4616      	mov	r6, r2
 800826e:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8008272:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8008276:	f1bb 0f00 	cmp.w	fp, #0
 800827a:	d046      	beq.n	800830a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 800827c:	6810      	ldr	r0, [r2, #0]
 800827e:	ad06      	add	r5, sp, #24
 8008280:	6851      	ldr	r1, [r2, #4]
 8008282:	c503      	stmia	r5!, {r0, r1}
 8008284:	6818      	ldr	r0, [r3, #0]
 8008286:	ad08      	add	r5, sp, #32
 8008288:	6859      	ldr	r1, [r3, #4]
 800828a:	c503      	stmia	r5!, {r0, r1}
 800828c:	a806      	add	r0, sp, #24
 800828e:	f7fe fc11 	bl	8006ab4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8008292:	4631      	mov	r1, r6
 8008294:	a808      	add	r0, sp, #32
 8008296:	f7fe fbf5 	bl	8006a84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800829a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800829e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80082a2:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80082a6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80082aa:	fb16 2103 	smlabb	r1, r6, r3, r2
 80082ae:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80082b2:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 80082b6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80082ba:	4f5d      	ldr	r7, [pc, #372]	; (8008430 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 80082bc:	440a      	add	r2, r1
 80082be:	6838      	ldr	r0, [r7, #0]
 80082c0:	46b9      	mov	r9, r7
 80082c2:	f8ad 2020 	strh.w	r2, [sp, #32]
 80082c6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80082ca:	4413      	add	r3, r2
 80082cc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80082d0:	6803      	ldr	r3, [r0, #0]
 80082d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d4:	4798      	blx	r3
 80082d6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80082da:	d019      	beq.n	8008310 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80082dc:	f010 0f04 	tst.w	r0, #4
 80082e0:	d01a      	beq.n	8008318 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 80082e2:	f8d9 0000 	ldr.w	r0, [r9]
 80082e6:	b2ad      	uxth	r5, r5
 80082e8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80082ec:	6801      	ldr	r1, [r0, #0]
 80082ee:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80082f2:	9501      	str	r5, [sp, #4]
 80082f4:	e9cd b403 	strd	fp, r4, [sp, #12]
 80082f8:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80082fc:	9402      	str	r4, [sp, #8]
 80082fe:	fa1f f488 	uxth.w	r4, r8
 8008302:	9400      	str	r4, [sp, #0]
 8008304:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8008306:	4631      	mov	r1, r6
 8008308:	47a0      	blx	r4
 800830a:	b00b      	add	sp, #44	; 0x2c
 800830c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008310:	b914      	cbnz	r4, 8008318 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8008312:	f010 0f01 	tst.w	r0, #1
 8008316:	e7e3      	b.n	80082e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 8008318:	f8d9 0000 	ldr.w	r0, [r9]
 800831c:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8008320:	6803      	ldr	r3, [r0, #0]
 8008322:	6a1b      	ldr	r3, [r3, #32]
 8008324:	4798      	blx	r3
 8008326:	4b43      	ldr	r3, [pc, #268]	; (8008434 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d0>)
 8008328:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 800832c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8008330:	881a      	ldrh	r2, [r3, #0]
 8008332:	469a      	mov	sl, r3
 8008334:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8008338:	fb05 f502 	mul.w	r5, r5, r2
 800833c:	fb02 1404 	mla	r4, r2, r4, r1
 8008340:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8008344:	d058      	beq.n	80083f8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x194>
 8008346:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 800834a:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800834e:	fa1f f28b 	uxth.w	r2, fp
 8008352:	469e      	mov	lr, r3
 8008354:	fa1f f989 	uxth.w	r9, r9
 8008358:	42ac      	cmp	r4, r5
 800835a:	d263      	bcs.n	8008424 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 800835c:	eb04 0a07 	add.w	sl, r4, r7
 8008360:	4554      	cmp	r4, sl
 8008362:	d23c      	bcs.n	80083de <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17a>
 8008364:	8821      	ldrh	r1, [r4, #0]
 8008366:	f836 3b02 	ldrh.w	r3, [r6], #2
 800836a:	1208      	asrs	r0, r1, #8
 800836c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8008370:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8008374:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8008378:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 800837c:	00c9      	lsls	r1, r1, #3
 800837e:	fb10 f009 	smulbb	r0, r0, r9
 8008382:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8008386:	b2c9      	uxtb	r1, r1
 8008388:	fb0c 0c02 	mla	ip, ip, r2, r0
 800838c:	10d8      	asrs	r0, r3, #3
 800838e:	fb11 f109 	smulbb	r1, r1, r9
 8008392:	00db      	lsls	r3, r3, #3
 8008394:	fa1f fc8c 	uxth.w	ip, ip
 8008398:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 800839c:	fb1b fb09 	smulbb	fp, fp, r9
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	fb03 1302 	mla	r3, r3, r2, r1
 80083a6:	f10c 0101 	add.w	r1, ip, #1
 80083aa:	fb00 b002 	mla	r0, r0, r2, fp
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80083b4:	1c59      	adds	r1, r3, #1
 80083b6:	b280      	uxth	r0, r0
 80083b8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80083bc:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80083c0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80083c4:	ea4c 0c03 	orr.w	ip, ip, r3
 80083c8:	1c43      	adds	r3, r0, #1
 80083ca:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80083ce:	0940      	lsrs	r0, r0, #5
 80083d0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80083d4:	ea4c 0c00 	orr.w	ip, ip, r0
 80083d8:	f824 cb02 	strh.w	ip, [r4], #2
 80083dc:	e7c0      	b.n	8008360 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 80083de:	f8be 3000 	ldrh.w	r3, [lr]
 80083e2:	eba3 0308 	sub.w	r3, r3, r8
 80083e6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80083ea:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80083ee:	eba3 0308 	sub.w	r3, r3, r8
 80083f2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80083f6:	e7af      	b.n	8008358 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 80083f8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80083fc:	f8d9 0000 	ldr.w	r0, [r9]
 8008400:	42ac      	cmp	r4, r5
 8008402:	6803      	ldr	r3, [r0, #0]
 8008404:	d20e      	bcs.n	8008424 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 8008406:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
 800840a:	4632      	mov	r2, r6
 800840c:	463b      	mov	r3, r7
 800840e:	4621      	mov	r1, r4
 8008410:	47c0      	blx	r8
 8008412:	f8ba 3000 	ldrh.w	r3, [sl]
 8008416:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800841a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800841e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8008422:	e7eb      	b.n	80083fc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 8008424:	4b02      	ldr	r3, [pc, #8]	; (8008430 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 8008426:	6818      	ldr	r0, [r3, #0]
 8008428:	6803      	ldr	r3, [r0, #0]
 800842a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842c:	4798      	blx	r3
 800842e:	e76c      	b.n	800830a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8008430:	200010b0 	.word	0x200010b0
 8008434:	200010aa 	.word	0x200010aa

08008438 <_ZN8touchgfx8LCD16bppD0Ev>:
 8008438:	b510      	push	{r4, lr}
 800843a:	4604      	mov	r4, r0
 800843c:	2178      	movs	r1, #120	; 0x78
 800843e:	f001 fbf3 	bl	8009c28 <_ZdlPvj>
 8008442:	4620      	mov	r0, r4
 8008444:	bd10      	pop	{r4, pc}
	...

08008448 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8008448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844c:	460d      	mov	r5, r1
 800844e:	b087      	sub	sp, #28
 8008450:	4614      	mov	r4, r2
 8008452:	4698      	mov	r8, r3
 8008454:	b333      	cbz	r3, 80084a4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8008456:	4608      	mov	r0, r1
 8008458:	f7fe fb44 	bl	8006ae4 <_ZNK8touchgfx4Rect7isEmptyEv>
 800845c:	bb10      	cbnz	r0, 80084a4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 800845e:	6828      	ldr	r0, [r5, #0]
 8008460:	ab04      	add	r3, sp, #16
 8008462:	6869      	ldr	r1, [r5, #4]
 8008464:	4e72      	ldr	r6, [pc, #456]	; (8008630 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1e8>)
 8008466:	c303      	stmia	r3!, {r0, r1}
 8008468:	a804      	add	r0, sp, #16
 800846a:	f7fe fb23 	bl	8006ab4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800846e:	6830      	ldr	r0, [r6, #0]
 8008470:	6803      	ldr	r3, [r0, #0]
 8008472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008474:	4798      	blx	r3
 8008476:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800847a:	d016      	beq.n	80084aa <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 800847c:	f010 0f08 	tst.w	r0, #8
 8008480:	d016      	beq.n	80084b0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 8008482:	f8bd 5016 	ldrh.w	r5, [sp, #22]
 8008486:	6830      	ldr	r0, [r6, #0]
 8008488:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800848c:	6801      	ldr	r1, [r0, #0]
 800848e:	9501      	str	r5, [sp, #4]
 8008490:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8008494:	f8cd 8008 	str.w	r8, [sp, #8]
 8008498:	9500      	str	r5, [sp, #0]
 800849a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800849e:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 80084a0:	4621      	mov	r1, r4
 80084a2:	47a8      	blx	r5
 80084a4:	b007      	add	sp, #28
 80084a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084aa:	f010 0f02 	tst.w	r0, #2
 80084ae:	e7e7      	b.n	8008480 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x38>
 80084b0:	6830      	ldr	r0, [r6, #0]
 80084b2:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 80084b6:	6803      	ldr	r3, [r0, #0]
 80084b8:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	4798      	blx	r3
 80084c0:	495c      	ldr	r1, [pc, #368]	; (8008634 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ec>)
 80084c2:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 80084c6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80084ca:	880b      	ldrh	r3, [r1, #0]
 80084cc:	468e      	mov	lr, r1
 80084ce:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 80084d2:	fb03 c202 	mla	r2, r3, r2, ip
 80084d6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80084da:	fb07 f203 	mul.w	r2, r7, r3
 80084de:	d053      	beq.n	8008588 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x140>
 80084e0:	fa1f f388 	uxth.w	r3, r8
 80084e4:	f1c8 07ff 	rsb	r7, r8, #255	; 0xff
 80084e8:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 80084ec:	ea4f 2814 	mov.w	r8, r4, lsr #8
 80084f0:	00e4      	lsls	r4, r4, #3
 80084f2:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80084f6:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 80084fa:	eb00 0142 	add.w	r1, r0, r2, lsl #1
 80084fe:	b2e4      	uxtb	r4, r4
 8008500:	fb09 f903 	mul.w	r9, r9, r3
 8008504:	fb08 f803 	mul.w	r8, r8, r3
 8008508:	006d      	lsls	r5, r5, #1
 800850a:	4363      	muls	r3, r4
 800850c:	b2bc      	uxth	r4, r7
 800850e:	4288      	cmp	r0, r1
 8008510:	f080 8088 	bcs.w	8008624 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 8008514:	eb00 0a05 	add.w	sl, r0, r5
 8008518:	4550      	cmp	r0, sl
 800851a:	d22f      	bcs.n	800857c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 800851c:	8802      	ldrh	r2, [r0, #0]
 800851e:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8008522:	10d7      	asrs	r7, r2, #3
 8008524:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8008528:	00d2      	lsls	r2, r2, #3
 800852a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 800852e:	fb1c fc04 	smulbb	ip, ip, r4
 8008532:	b2d2      	uxtb	r2, r2
 8008534:	fb17 f704 	smulbb	r7, r7, r4
 8008538:	fb12 f204 	smulbb	r2, r2, r4
 800853c:	44c4      	add	ip, r8
 800853e:	444f      	add	r7, r9
 8008540:	fa1f fc8c 	uxth.w	ip, ip
 8008544:	441a      	add	r2, r3
 8008546:	b2bf      	uxth	r7, r7
 8008548:	b292      	uxth	r2, r2
 800854a:	f10c 0b01 	add.w	fp, ip, #1
 800854e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8008552:	f102 0b01 	add.w	fp, r2, #1
 8008556:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 800855a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 800855e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8008562:	ea4c 0202 	orr.w	r2, ip, r2
 8008566:	f107 0c01 	add.w	ip, r7, #1
 800856a:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 800856e:	097f      	lsrs	r7, r7, #5
 8008570:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8008574:	433a      	orrs	r2, r7
 8008576:	f820 2b02 	strh.w	r2, [r0], #2
 800857a:	e7cd      	b.n	8008518 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd0>
 800857c:	f8be 2000 	ldrh.w	r2, [lr]
 8008580:	ebc5 0242 	rsb	r2, r5, r2, lsl #1
 8008584:	4410      	add	r0, r2
 8008586:	e7c2      	b.n	800850e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xc6>
 8008588:	07db      	lsls	r3, r3, #31
 800858a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800858e:	d50e      	bpl.n	80085ae <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x166>
 8008590:	006d      	lsls	r5, r5, #1
 8008592:	4290      	cmp	r0, r2
 8008594:	d246      	bcs.n	8008624 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 8008596:	1943      	adds	r3, r0, r5
 8008598:	4298      	cmp	r0, r3
 800859a:	d202      	bcs.n	80085a2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15a>
 800859c:	f820 4b02 	strh.w	r4, [r0], #2
 80085a0:	e7fa      	b.n	8008598 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x150>
 80085a2:	f8be 3000 	ldrh.w	r3, [lr]
 80085a6:	ebc5 0343 	rsb	r3, r5, r3, lsl #1
 80085aa:	4418      	add	r0, r3
 80085ac:	e7f1      	b.n	8008592 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x14a>
 80085ae:	0787      	lsls	r7, r0, #30
 80085b0:	462b      	mov	r3, r5
 80085b2:	d00a      	beq.n	80085ca <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x182>
 80085b4:	4603      	mov	r3, r0
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d205      	bcs.n	80085c6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17e>
 80085ba:	801c      	strh	r4, [r3, #0]
 80085bc:	f8be 1000 	ldrh.w	r1, [lr]
 80085c0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80085c4:	e7f7      	b.n	80085b6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 80085c6:	3002      	adds	r0, #2
 80085c8:	1e6b      	subs	r3, r5, #1
 80085ca:	07dd      	lsls	r5, r3, #31
 80085cc:	d50d      	bpl.n	80085ea <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a2>
 80085ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80085d2:	3901      	subs	r1, #1
 80085d4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80085d8:	4291      	cmp	r1, r2
 80085da:	d205      	bcs.n	80085e8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a0>
 80085dc:	800c      	strh	r4, [r1, #0]
 80085de:	f8be 5000 	ldrh.w	r5, [lr]
 80085e2:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 80085e6:	e7f7      	b.n	80085d8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>
 80085e8:	3b01      	subs	r3, #1
 80085ea:	b1db      	cbz	r3, 8008624 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 80085ec:	b2a1      	uxth	r1, r4
 80085ee:	105b      	asrs	r3, r3, #1
 80085f0:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	4290      	cmp	r0, r2
 80085f8:	d214      	bcs.n	8008624 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 80085fa:	0781      	lsls	r1, r0, #30
 80085fc:	d006      	beq.n	800860c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c4>
 80085fe:	4b0e      	ldr	r3, [pc, #56]	; (8008638 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f0>)
 8008600:	f44f 7162 	mov.w	r1, #904	; 0x388
 8008604:	4a0d      	ldr	r2, [pc, #52]	; (800863c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f4>)
 8008606:	480e      	ldr	r0, [pc, #56]	; (8008640 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f8>)
 8008608:	f001 fb68 	bl	8009cdc <__assert_func>
 800860c:	18c5      	adds	r5, r0, r3
 800860e:	4601      	mov	r1, r0
 8008610:	42a9      	cmp	r1, r5
 8008612:	d202      	bcs.n	800861a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1d2>
 8008614:	f841 4b04 	str.w	r4, [r1], #4
 8008618:	e7fa      	b.n	8008610 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c8>
 800861a:	f8be 1000 	ldrh.w	r1, [lr]
 800861e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8008622:	e7e8      	b.n	80085f6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ae>
 8008624:	6830      	ldr	r0, [r6, #0]
 8008626:	6803      	ldr	r3, [r0, #0]
 8008628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862a:	4798      	blx	r3
 800862c:	e73a      	b.n	80084a4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 800862e:	bf00      	nop
 8008630:	200010b0 	.word	0x200010b0
 8008634:	200010aa 	.word	0x200010aa
 8008638:	0800ca10 	.word	0x0800ca10
 800863c:	0800ceb5 	.word	0x0800ceb5
 8008640:	0800ca3f 	.word	0x0800ca3f

08008644 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8008644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008648:	4f97      	ldr	r7, [pc, #604]	; (80088a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 800864a:	4616      	mov	r6, r2
 800864c:	b08f      	sub	sp, #60	; 0x3c
 800864e:	4604      	mov	r4, r0
 8008650:	683a      	ldr	r2, [r7, #0]
 8008652:	4689      	mov	r9, r1
 8008654:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8008658:	2a02      	cmp	r2, #2
 800865a:	d106      	bne.n	800866a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 800865c:	4b93      	ldr	r3, [pc, #588]	; (80088ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 800865e:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 8008662:	4a93      	ldr	r2, [pc, #588]	; (80088b0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8008664:	4893      	ldr	r0, [pc, #588]	; (80088b4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 8008666:	f001 fb39 	bl	8009cdc <__assert_func>
 800866a:	ad0e      	add	r5, sp, #56	; 0x38
 800866c:	f825 3d24 	strh.w	r3, [r5, #-36]!
 8008670:	4628      	mov	r0, r5
 8008672:	f7ff fce5 	bl	8008040 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	4680      	mov	r8, r0
 800867a:	4620      	mov	r0, r4
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	4798      	blx	r3
 8008680:	4580      	cmp	r8, r0
 8008682:	d004      	beq.n	800868e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8008684:	4b8c      	ldr	r3, [pc, #560]	; (80088b8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 8008686:	f240 21ca 	movw	r1, #714	; 0x2ca
 800868a:	4a89      	ldr	r2, [pc, #548]	; (80088b0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 800868c:	e7ea      	b.n	8008664 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 800868e:	4628      	mov	r0, r5
 8008690:	f7ff fc4c 	bl	8007f2c <_ZNK8touchgfx6Bitmap7getDataEv>
 8008694:	4680      	mov	r8, r0
 8008696:	b920      	cbnz	r0, 80086a2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8008698:	4b88      	ldr	r3, [pc, #544]	; (80088bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 800869a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 800869e:	4a84      	ldr	r2, [pc, #528]	; (80088b0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 80086a0:	e7e0      	b.n	8008664 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80086a2:	6830      	ldr	r0, [r6, #0]
 80086a4:	ab06      	add	r3, sp, #24
 80086a6:	6871      	ldr	r1, [r6, #4]
 80086a8:	f10d 0b20 	add.w	fp, sp, #32
 80086ac:	f9b6 a000 	ldrsh.w	sl, [r6]
 80086b0:	c303      	stmia	r3!, {r0, r1}
 80086b2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80086b6:	ab08      	add	r3, sp, #32
 80086b8:	f8d9 0000 	ldr.w	r0, [r9]
 80086bc:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 80086c0:	c303      	stmia	r3!, {r0, r1}
 80086c2:	4628      	mov	r0, r5
 80086c4:	f7ff fb2a 	bl	8007d1c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80086c8:	4606      	mov	r6, r0
 80086ca:	4628      	mov	r0, r5
 80086cc:	4d7c      	ldr	r5, [pc, #496]	; (80088c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 80086ce:	f7ff fb5f 	bl	8007d90 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80086d2:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 80086d6:	a806      	add	r0, sp, #24
 80086d8:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80086dc:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 80086e0:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 80086e4:	f7fe f9e6 	bl	8006ab4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80086e8:	4658      	mov	r0, fp
 80086ea:	f7fe f9e3 	bl	8006ab4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80086ee:	a80a      	add	r0, sp, #40	; 0x28
 80086f0:	f7fe f9e0 	bl	8006ab4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80086f4:	4b73      	ldr	r3, [pc, #460]	; (80088c4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 80086f6:	2100      	movs	r1, #0
 80086f8:	f9b5 2000 	ldrsh.w	r2, [r5]
 80086fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008700:	4658      	mov	r0, fp
 8008702:	910c      	str	r1, [sp, #48]	; 0x30
 8008704:	a90c      	add	r1, sp, #48	; 0x30
 8008706:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800870a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800870e:	f7fc fda9 	bl	8005264 <_ZN8touchgfx4RectaNERKS0_>
 8008712:	4658      	mov	r0, fp
 8008714:	f7fe f9e6 	bl	8006ae4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8008718:	2800      	cmp	r0, #0
 800871a:	f040 809a 	bne.w	8008852 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 800871e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8008722:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8008726:	4288      	cmp	r0, r1
 8008728:	db38      	blt.n	800879c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 800872a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 800872e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8008732:	429a      	cmp	r2, r3
 8008734:	db32      	blt.n	800879c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8008736:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 800873a:	4430      	add	r0, r6
 800873c:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8008740:	4431      	add	r1, r6
 8008742:	b200      	sxth	r0, r0
 8008744:	b209      	sxth	r1, r1
 8008746:	4288      	cmp	r0, r1
 8008748:	dc28      	bgt.n	800879c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 800874a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800874e:	440a      	add	r2, r1
 8008750:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8008754:	440b      	add	r3, r1
 8008756:	b212      	sxth	r2, r2
 8008758:	b21b      	sxth	r3, r3
 800875a:	429a      	cmp	r2, r3
 800875c:	dc1e      	bgt.n	800879c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 800875e:	6823      	ldr	r3, [r4, #0]
 8008760:	4620      	mov	r0, r4
 8008762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008764:	4798      	blx	r3
 8008766:	4682      	mov	sl, r0
 8008768:	6838      	ldr	r0, [r7, #0]
 800876a:	6803      	ldr	r3, [r0, #0]
 800876c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876e:	4798      	blx	r3
 8008770:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8008774:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008778:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 800877c:	1a5b      	subs	r3, r3, r1
 800877e:	b29b      	uxth	r3, r3
 8008780:	b21c      	sxth	r4, r3
 8008782:	2c00      	cmp	r4, #0
 8008784:	dc0f      	bgt.n	80087a6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 8008786:	bf18      	it	ne
 8008788:	f8ad 1020 	strhne.w	r1, [sp, #32]
 800878c:	4644      	mov	r4, r8
 800878e:	bf1e      	ittt	ne
 8008790:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 8008794:	185b      	addne	r3, r3, r1
 8008796:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 800879a:	e009      	b.n	80087b0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 800879c:	4b4a      	ldr	r3, [pc, #296]	; (80088c8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 800879e:	f240 21da 	movw	r1, #730	; 0x2da
 80087a2:	4a43      	ldr	r2, [pc, #268]	; (80088b0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 80087a4:	e75e      	b.n	8008664 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 80087ac:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80087b0:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 80087b4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80087b8:	1b9b      	subs	r3, r3, r6
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	b219      	sxth	r1, r3
 80087be:	2900      	cmp	r1, #0
 80087c0:	dd4b      	ble.n	800885a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 80087c2:	4351      	muls	r1, r2
 80087c4:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80087c8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80087cc:	1acb      	subs	r3, r1, r3
 80087ce:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80087d2:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 80087d6:	2e00      	cmp	r6, #0
 80087d8:	dd3b      	ble.n	8008852 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 80087da:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80087de:	2b00      	cmp	r3, #0
 80087e0:	dd37      	ble.n	8008852 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 80087e2:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80087e6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80087ea:	fb0a f90c 	mul.w	r9, sl, ip
 80087ee:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 80087f2:	4481      	add	r9, r0
 80087f4:	8828      	ldrh	r0, [r5, #0]
 80087f6:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 80087fa:	1a41      	subs	r1, r0, r1
 80087fc:	42ae      	cmp	r6, r5
 80087fe:	bfa8      	it	ge
 8008800:	462e      	movge	r6, r5
 8008802:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8008806:	428e      	cmp	r6, r1
 8008808:	bfa8      	it	ge
 800880a:	460e      	movge	r6, r1
 800880c:	429d      	cmp	r5, r3
 800880e:	bfa8      	it	ge
 8008810:	461d      	movge	r5, r3
 8008812:	4b2c      	ldr	r3, [pc, #176]	; (80088c4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8008814:	881b      	ldrh	r3, [r3, #0]
 8008816:	eba3 030c 	sub.w	r3, r3, ip
 800881a:	429d      	cmp	r5, r3
 800881c:	bfa8      	it	ge
 800881e:	461d      	movge	r5, r3
 8008820:	42b0      	cmp	r0, r6
 8008822:	d12c      	bne.n	800887e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8008824:	4290      	cmp	r0, r2
 8008826:	d12a      	bne.n	800887e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8008828:	6838      	ldr	r0, [r7, #0]
 800882a:	9203      	str	r2, [sp, #12]
 800882c:	6803      	ldr	r3, [r0, #0]
 800882e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008830:	4798      	blx	r3
 8008832:	07c3      	lsls	r3, r0, #31
 8008834:	d51a      	bpl.n	800886c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8008836:	9a03      	ldr	r2, [sp, #12]
 8008838:	6838      	ldr	r0, [r7, #0]
 800883a:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 800883e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8008842:	6803      	ldr	r3, [r0, #0]
 8008844:	9200      	str	r2, [sp, #0]
 8008846:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8008848:	4623      	mov	r3, r4
 800884a:	e89b 0006 	ldmia.w	fp, {r1, r2}
 800884e:	47a8      	blx	r5
 8008850:	4680      	mov	r8, r0
 8008852:	4640      	mov	r0, r8
 8008854:	b00f      	add	sp, #60	; 0x3c
 8008856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800885a:	bf1f      	itttt	ne
 800885c:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 8008860:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 8008864:	185b      	addne	r3, r3, r1
 8008866:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 800886a:	e7b2      	b.n	80087d2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 800886c:	6838      	ldr	r0, [r7, #0]
 800886e:	464a      	mov	r2, r9
 8008870:	4621      	mov	r1, r4
 8008872:	6803      	ldr	r3, [r0, #0]
 8008874:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8008876:	fb05 f30a 	mul.w	r3, r5, sl
 800887a:	47b0      	blx	r6
 800887c:	e7e9      	b.n	8008852 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 800887e:	4355      	muls	r5, r2
 8008880:	0076      	lsls	r6, r6, #1
 8008882:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 8008886:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 800888a:	9303      	str	r3, [sp, #12]
 800888c:	9b03      	ldr	r3, [sp, #12]
 800888e:	429c      	cmp	r4, r3
 8008890:	d2df      	bcs.n	8008852 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8008892:	6838      	ldr	r0, [r7, #0]
 8008894:	464a      	mov	r2, r9
 8008896:	4621      	mov	r1, r4
 8008898:	44d1      	add	r9, sl
 800889a:	6803      	ldr	r3, [r0, #0]
 800889c:	445c      	add	r4, fp
 800889e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a0:	461d      	mov	r5, r3
 80088a2:	4633      	mov	r3, r6
 80088a4:	47a8      	blx	r5
 80088a6:	e7f1      	b.n	800888c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 80088a8:	200010b0 	.word	0x200010b0
 80088ac:	0800c847 	.word	0x0800c847
 80088b0:	0800cd98 	.word	0x0800cd98
 80088b4:	0800ca3f 	.word	0x0800ca3f
 80088b8:	0800c8f9 	.word	0x0800c8f9
 80088bc:	0800c94e 	.word	0x0800c94e
 80088c0:	200010aa 	.word	0x200010aa
 80088c4:	200010ac 	.word	0x200010ac
 80088c8:	0800c98c 	.word	0x0800c98c

080088cc <_ZN8touchgfx8LCD16bppC1Ev>:
 80088cc:	2200      	movs	r2, #0
 80088ce:	4910      	ldr	r1, [pc, #64]	; (8008910 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 80088d0:	6042      	str	r2, [r0, #4]
 80088d2:	6001      	str	r1, [r0, #0]
 80088d4:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80088d8:	e9c0 2204 	strd	r2, r2, [r0, #16]
 80088dc:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80088e0:	e9c0 2208 	strd	r2, r2, [r0, #32]
 80088e4:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 80088e8:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 80088ec:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 80088f0:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 80088f4:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 80088f8:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 80088fc:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8008900:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8008904:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8008908:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	0800caf0 	.word	0x0800caf0

08008914 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8008914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008918:	b08b      	sub	sp, #44	; 0x2c
 800891a:	460d      	mov	r5, r1
 800891c:	4604      	mov	r4, r0
 800891e:	4699      	mov	r9, r3
 8008920:	6808      	ldr	r0, [r1, #0]
 8008922:	ab06      	add	r3, sp, #24
 8008924:	6849      	ldr	r1, [r1, #4]
 8008926:	c303      	stmia	r3!, {r0, r1}
 8008928:	6810      	ldr	r0, [r2, #0]
 800892a:	ab08      	add	r3, sp, #32
 800892c:	6851      	ldr	r1, [r2, #4]
 800892e:	c303      	stmia	r3!, {r0, r1}
 8008930:	a806      	add	r0, sp, #24
 8008932:	f7fe f8bf 	bl	8006ab4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8008936:	4629      	mov	r1, r5
 8008938:	a808      	add	r0, sp, #32
 800893a:	4d63      	ldr	r5, [pc, #396]	; (8008ac8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 800893c:	f7fe f8a2 	bl	8006a84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8008940:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8008944:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8008948:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800894c:	6828      	ldr	r0, [r5, #0]
 800894e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8008952:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8008956:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 800895a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800895e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8008962:	440a      	add	r2, r1
 8008964:	f8ad 2020 	strh.w	r2, [sp, #32]
 8008968:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800896c:	4413      	add	r3, r2
 800896e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8008972:	6803      	ldr	r3, [r0, #0]
 8008974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008976:	4798      	blx	r3
 8008978:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800897c:	d118      	bne.n	80089b0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 800897e:	f010 0f20 	tst.w	r0, #32
 8008982:	6828      	ldr	r0, [r5, #0]
 8008984:	d017      	beq.n	80089b6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8008986:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 800898a:	b2b6      	uxth	r6, r6
 800898c:	6801      	ldr	r1, [r0, #0]
 800898e:	9502      	str	r5, [sp, #8]
 8008990:	fa1f f588 	uxth.w	r5, r8
 8008994:	f8cd 900c 	str.w	r9, [sp, #12]
 8008998:	9601      	str	r6, [sp, #4]
 800899a:	9500      	str	r5, [sp, #0]
 800899c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80089a0:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 80089a2:	4621      	mov	r1, r4
 80089a4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80089a8:	47a8      	blx	r5
 80089aa:	b00b      	add	sp, #44	; 0x2c
 80089ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80089b4:	e7e5      	b.n	8008982 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 80089b6:	6803      	ldr	r3, [r0, #0]
 80089b8:	6a1b      	ldr	r3, [r3, #32]
 80089ba:	4798      	blx	r3
 80089bc:	4a43      	ldr	r2, [pc, #268]	; (8008acc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 80089be:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80089c2:	f8b2 e000 	ldrh.w	lr, [r2]
 80089c6:	4692      	mov	sl, r2
 80089c8:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80089cc:	fb0e 1303 	mla	r3, lr, r3, r1
 80089d0:	fb0e fe06 	mul.w	lr, lr, r6
 80089d4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80089d8:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80089dc:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 80089e0:	9305      	str	r3, [sp, #20]
 80089e2:	4570      	cmp	r0, lr
 80089e4:	d26a      	bcs.n	8008abc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a8>
 80089e6:	9b05      	ldr	r3, [sp, #20]
 80089e8:	4621      	mov	r1, r4
 80089ea:	eb00 0b03 	add.w	fp, r0, r3
 80089ee:	4558      	cmp	r0, fp
 80089f0:	d257      	bcs.n	8008aa2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18e>
 80089f2:	f851 4b04 	ldr.w	r4, [r1], #4
 80089f6:	0e22      	lsrs	r2, r4, #24
 80089f8:	d012      	beq.n	8008a20 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 80089fa:	2aff      	cmp	r2, #255	; 0xff
 80089fc:	ea4f 2714 	mov.w	r7, r4, lsr #8
 8008a00:	d110      	bne.n	8008a24 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8008a02:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8008a06:	d10d      	bne.n	8008a24 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8008a08:	0963      	lsrs	r3, r4, #5
 8008a0a:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8008a0e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8008a12:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8008a16:	f027 0707 	bic.w	r7, r7, #7
 8008a1a:	431f      	orrs	r7, r3
 8008a1c:	433c      	orrs	r4, r7
 8008a1e:	8004      	strh	r4, [r0, #0]
 8008a20:	3002      	adds	r0, #2
 8008a22:	e7e4      	b.n	80089ee <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xda>
 8008a24:	fb09 f302 	mul.w	r3, r9, r2
 8008a28:	f8b0 c000 	ldrh.w	ip, [r0]
 8008a2c:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8008a30:	b2ff      	uxtb	r7, r7
 8008a32:	1c5a      	adds	r2, r3, #1
 8008a34:	ea4f 262c 	mov.w	r6, ip, asr #8
 8008a38:	b2e4      	uxtb	r4, r4
 8008a3a:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8008a3e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8008a42:	1212      	asrs	r2, r2, #8
 8008a44:	b293      	uxth	r3, r2
 8008a46:	43d2      	mvns	r2, r2
 8008a48:	fb15 f503 	smulbb	r5, r5, r3
 8008a4c:	b2d2      	uxtb	r2, r2
 8008a4e:	fb17 f703 	smulbb	r7, r7, r3
 8008a52:	fb06 5602 	mla	r6, r6, r2, r5
 8008a56:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8008a5a:	fb14 f403 	smulbb	r4, r4, r3
 8008a5e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8008a62:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8008a66:	b2b6      	uxth	r6, r6
 8008a68:	fa5f fc8c 	uxtb.w	ip, ip
 8008a6c:	fb05 7702 	mla	r7, r5, r2, r7
 8008a70:	1c73      	adds	r3, r6, #1
 8008a72:	fb0c 4202 	mla	r2, ip, r2, r4
 8008a76:	b2bf      	uxth	r7, r7
 8008a78:	b292      	uxth	r2, r2
 8008a7a:	1c7d      	adds	r5, r7, #1
 8008a7c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8008a80:	f102 0c01 	add.w	ip, r2, #1
 8008a84:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8008a88:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8008a8c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8008a90:	097f      	lsrs	r7, r7, #5
 8008a92:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8008a96:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8008a9a:	4316      	orrs	r6, r2
 8008a9c:	433e      	orrs	r6, r7
 8008a9e:	8006      	strh	r6, [r0, #0]
 8008aa0:	e7be      	b.n	8008a20 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 8008aa2:	f8ba 3000 	ldrh.w	r3, [sl]
 8008aa6:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 8008aaa:	eba3 0308 	sub.w	r3, r3, r8
 8008aae:	eba4 0408 	sub.w	r4, r4, r8
 8008ab2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8008ab6:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8008aba:	e792      	b.n	80089e2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8008abc:	4b02      	ldr	r3, [pc, #8]	; (8008ac8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 8008abe:	6818      	ldr	r0, [r3, #0]
 8008ac0:	6803      	ldr	r3, [r0, #0]
 8008ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac4:	4798      	blx	r3
 8008ac6:	e770      	b.n	80089aa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8008ac8:	200010b0 	.word	0x200010b0
 8008acc:	200010aa 	.word	0x200010aa

08008ad0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8008ad0:	b570      	push	{r4, r5, r6, lr}
 8008ad2:	9d04      	ldr	r5, [sp, #16]
 8008ad4:	460c      	mov	r4, r1
 8008ad6:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8008ada:	4619      	mov	r1, r3
 8008adc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008ae0:	2a0d      	cmp	r2, #13
 8008ae2:	d820      	bhi.n	8008b26 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 8008ae4:	e8df f002 	tbb	[pc, r2]
 8008ae8:	18121807 	.word	0x18121807
 8008aec:	18181818 	.word	0x18181818
 8008af0:	18181818 	.word	0x18181818
 8008af4:	1818      	.short	0x1818
 8008af6:	6802      	ldr	r2, [r0, #0]
 8008af8:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8008afc:	68d6      	ldr	r6, [r2, #12]
 8008afe:	462b      	mov	r3, r5
 8008b00:	460a      	mov	r2, r1
 8008b02:	4621      	mov	r1, r4
 8008b04:	46b4      	mov	ip, r6
 8008b06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b0a:	4760      	bx	ip
 8008b0c:	462a      	mov	r2, r5
 8008b0e:	4620      	mov	r0, r4
 8008b10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b14:	f7ff befe 	b.w	8008914 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8008b18:	4b03      	ldr	r3, [pc, #12]	; (8008b28 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 8008b1a:	f240 21c1 	movw	r1, #705	; 0x2c1
 8008b1e:	4a03      	ldr	r2, [pc, #12]	; (8008b2c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 8008b20:	4803      	ldr	r0, [pc, #12]	; (8008b30 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 8008b22:	f001 f8db 	bl	8009cdc <__assert_func>
 8008b26:	bd70      	pop	{r4, r5, r6, pc}
 8008b28:	0800c9db 	.word	0x0800c9db
 8008b2c:	0800ce1e 	.word	0x0800ce1e
 8008b30:	0800ca3f 	.word	0x0800ca3f

08008b34 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8008b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b38:	b093      	sub	sp, #76	; 0x4c
 8008b3a:	880f      	ldrh	r7, [r1, #0]
 8008b3c:	4604      	mov	r4, r0
 8008b3e:	4688      	mov	r8, r1
 8008b40:	4616      	mov	r6, r2
 8008b42:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8008b46:	b12f      	cbz	r7, 8008b54 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8008b48:	4b6f      	ldr	r3, [pc, #444]	; (8008d08 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 8008b4a:	21e2      	movs	r1, #226	; 0xe2
 8008b4c:	4a6f      	ldr	r2, [pc, #444]	; (8008d0c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8008b4e:	4870      	ldr	r0, [pc, #448]	; (8008d10 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8008b50:	f001 f8c4 	bl	8009cdc <__assert_func>
 8008b54:	6810      	ldr	r0, [r2, #0]
 8008b56:	ad0e      	add	r5, sp, #56	; 0x38
 8008b58:	6851      	ldr	r1, [r2, #4]
 8008b5a:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8008d18 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>
 8008b5e:	c503      	stmia	r5!, {r0, r1}
 8008b60:	6818      	ldr	r0, [r3, #0]
 8008b62:	ad10      	add	r5, sp, #64	; 0x40
 8008b64:	6859      	ldr	r1, [r3, #4]
 8008b66:	c503      	stmia	r5!, {r0, r1}
 8008b68:	a80e      	add	r0, sp, #56	; 0x38
 8008b6a:	f7fd ffa3 	bl	8006ab4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8008b6e:	4631      	mov	r1, r6
 8008b70:	a810      	add	r0, sp, #64	; 0x40
 8008b72:	4e68      	ldr	r6, [pc, #416]	; (8008d14 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8008b74:	f7fd ff86 	bl	8006a84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8008b78:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8008b7c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8008b80:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8008b84:	f8db 0000 	ldr.w	r0, [fp]
 8008b88:	fb11 2103 	smlabb	r1, r1, r3, r2
 8008b8c:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8008b90:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8008b94:	440c      	add	r4, r1
 8008b96:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8008b9a:	440a      	add	r2, r1
 8008b9c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8008ba0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8008ba4:	4413      	add	r3, r2
 8008ba6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8008baa:	6803      	ldr	r3, [r0, #0]
 8008bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bb0:	4798      	blx	r3
 8008bb2:	2801      	cmp	r0, #1
 8008bb4:	d11d      	bne.n	8008bf2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 8008bb6:	220b      	movs	r2, #11
 8008bb8:	9708      	str	r7, [sp, #32]
 8008bba:	b2ad      	uxth	r5, r5
 8008bbc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8008bc0:	9207      	str	r2, [sp, #28]
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	8832      	ldrh	r2, [r6, #0]
 8008bc6:	f8cd a010 	str.w	sl, [sp, #16]
 8008bca:	9502      	str	r5, [sp, #8]
 8008bcc:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8008bd0:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8008bd4:	9203      	str	r2, [sp, #12]
 8008bd6:	fa1f f289 	uxth.w	r2, r9
 8008bda:	9201      	str	r2, [sp, #4]
 8008bdc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8008be0:	9200      	str	r2, [sp, #0]
 8008be2:	4642      	mov	r2, r8
 8008be4:	f8db 0000 	ldr.w	r0, [fp]
 8008be8:	f7fc fd1c 	bl	8005624 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8008bec:	b013      	add	sp, #76	; 0x4c
 8008bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bf2:	f8db 0000 	ldr.w	r0, [fp]
 8008bf6:	6803      	ldr	r3, [r0, #0]
 8008bf8:	6a1b      	ldr	r3, [r3, #32]
 8008bfa:	4798      	blx	r3
 8008bfc:	8832      	ldrh	r2, [r6, #0]
 8008bfe:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8008c02:	f04f 0e04 	mov.w	lr, #4
 8008c06:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8008c0a:	4355      	muls	r5, r2
 8008c0c:	960d      	str	r6, [sp, #52]	; 0x34
 8008c0e:	fb02 1303 	mla	r3, r2, r3, r1
 8008c12:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8008c16:	eb00 0345 	add.w	r3, r0, r5, lsl #1
 8008c1a:	930c      	str	r3, [sp, #48]	; 0x30
 8008c1c:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8008c20:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c24:	4298      	cmp	r0, r3
 8008c26:	d269      	bcs.n	8008cfc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8008c28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c2a:	4621      	mov	r1, r4
 8008c2c:	eb00 0b03 	add.w	fp, r0, r3
 8008c30:	4558      	cmp	r0, fp
 8008c32:	460b      	mov	r3, r1
 8008c34:	d256      	bcs.n	8008ce4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	3101      	adds	r1, #1
 8008c3a:	fb1e e303 	smlabb	r3, lr, r3, lr
 8008c3e:	f858 2003 	ldr.w	r2, [r8, r3]
 8008c42:	0e14      	lsrs	r4, r2, #24
 8008c44:	d012      	beq.n	8008c6c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 8008c46:	2cff      	cmp	r4, #255	; 0xff
 8008c48:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8008c4c:	d110      	bne.n	8008c70 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8008c4e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8008c52:	d10d      	bne.n	8008c70 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8008c54:	0953      	lsrs	r3, r2, #5
 8008c56:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8008c5a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8008c5e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8008c62:	f026 0607 	bic.w	r6, r6, #7
 8008c66:	431e      	orrs	r6, r3
 8008c68:	4332      	orrs	r2, r6
 8008c6a:	8002      	strh	r2, [r0, #0]
 8008c6c:	3002      	adds	r0, #2
 8008c6e:	e7df      	b.n	8008c30 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfc>
 8008c70:	fb0a f404 	mul.w	r4, sl, r4
 8008c74:	8807      	ldrh	r7, [r0, #0]
 8008c76:	b2f6      	uxtb	r6, r6
 8008c78:	1c63      	adds	r3, r4, #1
 8008c7a:	123d      	asrs	r5, r7, #8
 8008c7c:	eb03 2324 	add.w	r3, r3, r4, asr #8
 8008c80:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8008c84:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8008c88:	b2d2      	uxtb	r2, r2
 8008c8a:	121b      	asrs	r3, r3, #8
 8008c8c:	fa1f fc83 	uxth.w	ip, r3
 8008c90:	43db      	mvns	r3, r3
 8008c92:	fb14 f40c 	smulbb	r4, r4, ip
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	fb12 f20c 	smulbb	r2, r2, ip
 8008c9c:	fb05 4503 	mla	r5, r5, r3, r4
 8008ca0:	10fc      	asrs	r4, r7, #3
 8008ca2:	fb16 f60c 	smulbb	r6, r6, ip
 8008ca6:	00ff      	lsls	r7, r7, #3
 8008ca8:	b2ad      	uxth	r5, r5
 8008caa:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8008cae:	b2ff      	uxtb	r7, r7
 8008cb0:	fb04 6603 	mla	r6, r4, r3, r6
 8008cb4:	fb07 2203 	mla	r2, r7, r3, r2
 8008cb8:	1c6b      	adds	r3, r5, #1
 8008cba:	b2b6      	uxth	r6, r6
 8008cbc:	b292      	uxth	r2, r2
 8008cbe:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8008cc2:	1c54      	adds	r4, r2, #1
 8008cc4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8008cc8:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8008ccc:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8008cd0:	4325      	orrs	r5, r4
 8008cd2:	1c74      	adds	r4, r6, #1
 8008cd4:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8008cd8:	0976      	lsrs	r6, r6, #5
 8008cda:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8008cde:	4335      	orrs	r5, r6
 8008ce0:	8005      	strh	r5, [r0, #0]
 8008ce2:	e7c3      	b.n	8008c6c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 8008ce4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ce6:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8008cea:	881b      	ldrh	r3, [r3, #0]
 8008cec:	eba4 0409 	sub.w	r4, r4, r9
 8008cf0:	eba3 0309 	sub.w	r3, r3, r9
 8008cf4:	440c      	add	r4, r1
 8008cf6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8008cfa:	e792      	b.n	8008c22 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8008cfc:	4b06      	ldr	r3, [pc, #24]	; (8008d18 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8008cfe:	6818      	ldr	r0, [r3, #0]
 8008d00:	6803      	ldr	r3, [r0, #0]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d04:	4798      	blx	r3
 8008d06:	e771      	b.n	8008bec <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 8008d08:	0800c7f7 	.word	0x0800c7f7
 8008d0c:	0800ccd2 	.word	0x0800ccd2
 8008d10:	0800ca3f 	.word	0x0800ca3f
 8008d14:	200010aa 	.word	0x200010aa
 8008d18:	200010b0 	.word	0x200010b0

08008d1c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8008d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d20:	4614      	mov	r4, r2
 8008d22:	880a      	ldrh	r2, [r1, #0]
 8008d24:	b091      	sub	sp, #68	; 0x44
 8008d26:	4607      	mov	r7, r0
 8008d28:	2a02      	cmp	r2, #2
 8008d2a:	4689      	mov	r9, r1
 8008d2c:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 8008d30:	d006      	beq.n	8008d40 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 8008d32:	4b77      	ldr	r3, [pc, #476]	; (8008f10 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f4>)
 8008d34:	f240 113b 	movw	r1, #315	; 0x13b
 8008d38:	4a76      	ldr	r2, [pc, #472]	; (8008f14 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f8>)
 8008d3a:	4877      	ldr	r0, [pc, #476]	; (8008f18 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1fc>)
 8008d3c:	f000 ffce 	bl	8009cdc <__assert_func>
 8008d40:	2e00      	cmp	r6, #0
 8008d42:	d04b      	beq.n	8008ddc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8008d44:	6820      	ldr	r0, [r4, #0]
 8008d46:	ad0c      	add	r5, sp, #48	; 0x30
 8008d48:	6861      	ldr	r1, [r4, #4]
 8008d4a:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8008f20 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>
 8008d4e:	c503      	stmia	r5!, {r0, r1}
 8008d50:	6818      	ldr	r0, [r3, #0]
 8008d52:	ad0e      	add	r5, sp, #56	; 0x38
 8008d54:	6859      	ldr	r1, [r3, #4]
 8008d56:	c503      	stmia	r5!, {r0, r1}
 8008d58:	a80c      	add	r0, sp, #48	; 0x30
 8008d5a:	f7fd feab 	bl	8006ab4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8008d5e:	4621      	mov	r1, r4
 8008d60:	a80e      	add	r0, sp, #56	; 0x38
 8008d62:	f7fd fe8f 	bl	8006a84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8008d66:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8008d6a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8008d6e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8008d72:	f8da 0000 	ldr.w	r0, [sl]
 8008d76:	fb11 2103 	smlabb	r1, r1, r3, r2
 8008d7a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8008d7e:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8008d82:	187c      	adds	r4, r7, r1
 8008d84:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8008d88:	4f64      	ldr	r7, [pc, #400]	; (8008f1c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 8008d8a:	440a      	add	r2, r1
 8008d8c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8008d90:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8008d94:	4413      	add	r3, r2
 8008d96:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8008d9a:	6803      	ldr	r3, [r0, #0]
 8008d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008da0:	4798      	blx	r3
 8008da2:	2801      	cmp	r0, #1
 8008da4:	d11d      	bne.n	8008de2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 8008da6:	2200      	movs	r2, #0
 8008da8:	210b      	movs	r1, #11
 8008daa:	b2ad      	uxth	r5, r5
 8008dac:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8008db0:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8008db4:	8839      	ldrh	r1, [r7, #0]
 8008db6:	9604      	str	r6, [sp, #16]
 8008db8:	9502      	str	r5, [sp, #8]
 8008dba:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8008dbe:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8008dc2:	4621      	mov	r1, r4
 8008dc4:	9203      	str	r2, [sp, #12]
 8008dc6:	fa1f f288 	uxth.w	r2, r8
 8008dca:	9201      	str	r2, [sp, #4]
 8008dcc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8008dd0:	9200      	str	r2, [sp, #0]
 8008dd2:	464a      	mov	r2, r9
 8008dd4:	f8da 0000 	ldr.w	r0, [sl]
 8008dd8:	f7fc fc24 	bl	8005624 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8008ddc:	b011      	add	sp, #68	; 0x44
 8008dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de2:	f8da 0000 	ldr.w	r0, [sl]
 8008de6:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 8008dea:	6803      	ldr	r3, [r0, #0]
 8008dec:	6a1b      	ldr	r3, [r3, #32]
 8008dee:	4798      	blx	r3
 8008df0:	8839      	ldrh	r1, [r7, #0]
 8008df2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8008df6:	2eff      	cmp	r6, #255	; 0xff
 8008df8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8008dfc:	fb05 f501 	mul.w	r5, r5, r1
 8008e00:	fb01 2303 	mla	r3, r1, r3, r2
 8008e04:	f109 0204 	add.w	r2, r9, #4
 8008e08:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8008e0c:	d05f      	beq.n	8008ece <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b2>
 8008e0e:	f1c6 09ff 	rsb	r9, r6, #255	; 0xff
 8008e12:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8008e16:	b2b6      	uxth	r6, r6
 8008e18:	970b      	str	r7, [sp, #44]	; 0x2c
 8008e1a:	fa1f f989 	uxth.w	r9, r9
 8008e1e:	42a8      	cmp	r0, r5
 8008e20:	d26f      	bcs.n	8008f02 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 8008e22:	eb00 010b 	add.w	r1, r0, fp
 8008e26:	4288      	cmp	r0, r1
 8008e28:	4623      	mov	r3, r4
 8008e2a:	d244      	bcs.n	8008eb6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19a>
 8008e2c:	8807      	ldrh	r7, [r0, #0]
 8008e2e:	3401      	adds	r4, #1
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	ea4f 2c27 	mov.w	ip, r7, asr #8
 8008e36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e3a:	ea4f 0ae7 	mov.w	sl, r7, asr #3
 8008e3e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8008e42:	00ff      	lsls	r7, r7, #3
 8008e44:	ea4f 2e23 	mov.w	lr, r3, asr #8
 8008e48:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8008e4c:	fb1c fc09 	smulbb	ip, ip, r9
 8008e50:	b2ff      	uxtb	r7, r7
 8008e52:	fb1a fa09 	smulbb	sl, sl, r9
 8008e56:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8008e5a:	fb17 f709 	smulbb	r7, r7, r9
 8008e5e:	fb0e ce06 	mla	lr, lr, r6, ip
 8008e62:	ea4f 0ce3 	mov.w	ip, r3, asr #3
 8008e66:	00db      	lsls	r3, r3, #3
 8008e68:	fa1f fe8e 	uxth.w	lr, lr
 8008e6c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	fb0c ac06 	mla	ip, ip, r6, sl
 8008e76:	f10e 0a01 	add.w	sl, lr, #1
 8008e7a:	fb03 7306 	mla	r3, r3, r6, r7
 8008e7e:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	f40e 4a78 	and.w	sl, lr, #63488	; 0xf800
 8008e88:	fa1f fc8c 	uxth.w	ip, ip
 8008e8c:	f103 0e01 	add.w	lr, r3, #1
 8008e90:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8008e94:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8008e98:	ea4a 0e03 	orr.w	lr, sl, r3
 8008e9c:	f10c 0a01 	add.w	sl, ip, #1
 8008ea0:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8008ea4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8008ea8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8008eac:	ea4e 0e0c 	orr.w	lr, lr, ip
 8008eb0:	f820 eb02 	strh.w	lr, [r0], #2
 8008eb4:	e7b7      	b.n	8008e26 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 8008eb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eb8:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8008ebc:	881b      	ldrh	r3, [r3, #0]
 8008ebe:	eba1 0108 	sub.w	r1, r1, r8
 8008ec2:	eba3 0308 	sub.w	r3, r3, r8
 8008ec6:	440c      	add	r4, r1
 8008ec8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8008ecc:	e7a7      	b.n	8008e1e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
 8008ece:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8008ed2:	42a8      	cmp	r0, r5
 8008ed4:	d215      	bcs.n	8008f02 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 8008ed6:	eb00 010b 	add.w	r1, r0, fp
 8008eda:	4288      	cmp	r0, r1
 8008edc:	d206      	bcs.n	8008eec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1d0>
 8008ede:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ee6:	f820 3b02 	strh.w	r3, [r0], #2
 8008eea:	e7f6      	b.n	8008eda <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1be>
 8008eec:	883b      	ldrh	r3, [r7, #0]
 8008eee:	eba3 0308 	sub.w	r3, r3, r8
 8008ef2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8008ef6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8008efa:	eba3 0308 	sub.w	r3, r3, r8
 8008efe:	441c      	add	r4, r3
 8008f00:	e7e7      	b.n	8008ed2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b6>
 8008f02:	4b07      	ldr	r3, [pc, #28]	; (8008f20 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 8008f04:	6818      	ldr	r0, [r3, #0]
 8008f06:	6803      	ldr	r3, [r0, #0]
 8008f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0a:	4798      	blx	r3
 8008f0c:	e766      	b.n	8008ddc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8008f0e:	bf00      	nop
 8008f10:	0800c6b5 	.word	0x0800c6b5
 8008f14:	0800cb3c 	.word	0x0800cb3c
 8008f18:	0800ca3f 	.word	0x0800ca3f
 8008f1c:	200010aa 	.word	0x200010aa
 8008f20:	200010b0 	.word	0x200010b0

08008f24 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8008f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f28:	4614      	mov	r4, r2
 8008f2a:	880a      	ldrh	r2, [r1, #0]
 8008f2c:	b091      	sub	sp, #68	; 0x44
 8008f2e:	4606      	mov	r6, r0
 8008f30:	2a01      	cmp	r2, #1
 8008f32:	4688      	mov	r8, r1
 8008f34:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8008f38:	d006      	beq.n	8008f48 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 8008f3a:	4b7c      	ldr	r3, [pc, #496]	; (800912c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x208>)
 8008f3c:	f240 1197 	movw	r1, #407	; 0x197
 8008f40:	4a7b      	ldr	r2, [pc, #492]	; (8009130 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20c>)
 8008f42:	487c      	ldr	r0, [pc, #496]	; (8009134 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x210>)
 8008f44:	f000 feca 	bl	8009cdc <__assert_func>
 8008f48:	2f00      	cmp	r7, #0
 8008f4a:	d04b      	beq.n	8008fe4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8008f4c:	6820      	ldr	r0, [r4, #0]
 8008f4e:	ad0c      	add	r5, sp, #48	; 0x30
 8008f50:	6861      	ldr	r1, [r4, #4]
 8008f52:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8009140 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8008f56:	c503      	stmia	r5!, {r0, r1}
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	ad0e      	add	r5, sp, #56	; 0x38
 8008f5c:	6859      	ldr	r1, [r3, #4]
 8008f5e:	c503      	stmia	r5!, {r0, r1}
 8008f60:	a80c      	add	r0, sp, #48	; 0x30
 8008f62:	f7fd fda7 	bl	8006ab4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8008f66:	4621      	mov	r1, r4
 8008f68:	a80e      	add	r0, sp, #56	; 0x38
 8008f6a:	f7fd fd8b 	bl	8006a84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8008f6e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8008f72:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8008f76:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8008f7a:	f8da 0000 	ldr.w	r0, [sl]
 8008f7e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8008f82:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 8008f86:	f9bd 903e 	ldrsh.w	r9, [sp, #62]	; 0x3e
 8008f8a:	1874      	adds	r4, r6, r1
 8008f8c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8008f90:	4e69      	ldr	r6, [pc, #420]	; (8009138 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x214>)
 8008f92:	440a      	add	r2, r1
 8008f94:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8008f98:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8008f9c:	4413      	add	r3, r2
 8008f9e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8008fa2:	6803      	ldr	r3, [r0, #0]
 8008fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fa8:	4798      	blx	r3
 8008faa:	2801      	cmp	r0, #1
 8008fac:	d11d      	bne.n	8008fea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 8008fae:	220b      	movs	r2, #11
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	b2ad      	uxth	r5, r5
 8008fb4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8008fb8:	e9cd 2107 	strd	r2, r1, [sp, #28]
 8008fbc:	8832      	ldrh	r2, [r6, #0]
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	9704      	str	r7, [sp, #16]
 8008fc2:	9501      	str	r5, [sp, #4]
 8008fc4:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8008fc8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8008fcc:	9203      	str	r2, [sp, #12]
 8008fce:	fa1f f289 	uxth.w	r2, r9
 8008fd2:	9202      	str	r2, [sp, #8]
 8008fd4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8008fd8:	9200      	str	r2, [sp, #0]
 8008fda:	4642      	mov	r2, r8
 8008fdc:	f8da 0000 	ldr.w	r0, [sl]
 8008fe0:	f7fc fb20 	bl	8005624 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8008fe4:	b011      	add	sp, #68	; 0x44
 8008fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fea:	f8da 0000 	ldr.w	r0, [sl]
 8008fee:	6803      	ldr	r3, [r0, #0]
 8008ff0:	6a1b      	ldr	r3, [r3, #32]
 8008ff2:	4798      	blx	r3
 8008ff4:	8832      	ldrh	r2, [r6, #0]
 8008ff6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8008ffa:	2fff      	cmp	r7, #255	; 0xff
 8008ffc:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8009000:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 8009004:	fb09 f902 	mul.w	r9, r9, r2
 8009008:	fb02 1303 	mla	r3, r2, r3, r1
 800900c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8009010:	d056      	beq.n	80090c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 8009012:	ea6f 0c07 	mvn.w	ip, r7
 8009016:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 800901a:	b2bb      	uxth	r3, r7
 800901c:	960b      	str	r6, [sp, #44]	; 0x2c
 800901e:	fa5f fc8c 	uxtb.w	ip, ip
 8009022:	4548      	cmp	r0, r9
 8009024:	d27b      	bcs.n	800911e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 8009026:	eb00 0a0e 	add.w	sl, r0, lr
 800902a:	4550      	cmp	r0, sl
 800902c:	4622      	mov	r2, r4
 800902e:	d23d      	bcs.n	80090ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x188>
 8009030:	7811      	ldrb	r1, [r2, #0]
 8009032:	2604      	movs	r6, #4
 8009034:	2203      	movs	r2, #3
 8009036:	3401      	adds	r4, #1
 8009038:	fb12 6101 	smlabb	r1, r2, r1, r6
 800903c:	8802      	ldrh	r2, [r0, #0]
 800903e:	eb08 0b01 	add.w	fp, r8, r1
 8009042:	1217      	asrs	r7, r2, #8
 8009044:	f818 1001 	ldrb.w	r1, [r8, r1]
 8009048:	f89b 6002 	ldrb.w	r6, [fp, #2]
 800904c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8009050:	f89b b001 	ldrb.w	fp, [fp, #1]
 8009054:	fb16 f603 	smulbb	r6, r6, r3
 8009058:	fb1b fb03 	smulbb	fp, fp, r3
 800905c:	fb07 670c 	mla	r7, r7, ip, r6
 8009060:	10d6      	asrs	r6, r2, #3
 8009062:	00d2      	lsls	r2, r2, #3
 8009064:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8009068:	b2bf      	uxth	r7, r7
 800906a:	b2d2      	uxtb	r2, r2
 800906c:	fb06 b60c 	mla	r6, r6, ip, fp
 8009070:	fb12 f20c 	smulbb	r2, r2, ip
 8009074:	b2b6      	uxth	r6, r6
 8009076:	fb01 2103 	mla	r1, r1, r3, r2
 800907a:	1c7a      	adds	r2, r7, #1
 800907c:	f106 0b01 	add.w	fp, r6, #1
 8009080:	b289      	uxth	r1, r1
 8009082:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8009086:	1c4a      	adds	r2, r1, #1
 8009088:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 800908c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8009090:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8009094:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8009098:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 800909c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80090a0:	4317      	orrs	r7, r2
 80090a2:	ea47 070b 	orr.w	r7, r7, fp
 80090a6:	f820 7b02 	strh.w	r7, [r0], #2
 80090aa:	e7be      	b.n	800902a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 80090ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090ae:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 80090b2:	8812      	ldrh	r2, [r2, #0]
 80090b4:	1b49      	subs	r1, r1, r5
 80090b6:	1b52      	subs	r2, r2, r5
 80090b8:	440c      	add	r4, r1
 80090ba:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80090be:	e7b0      	b.n	8009022 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfe>
 80090c0:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 80090c4:	2203      	movs	r2, #3
 80090c6:	2704      	movs	r7, #4
 80090c8:	491c      	ldr	r1, [pc, #112]	; (800913c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 80090ca:	4548      	cmp	r0, r9
 80090cc:	d227      	bcs.n	800911e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 80090ce:	eb00 0c0e 	add.w	ip, r0, lr
 80090d2:	4560      	cmp	r0, ip
 80090d4:	4623      	mov	r3, r4
 80090d6:	d219      	bcs.n	800910c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e8>
 80090d8:	f893 a000 	ldrb.w	sl, [r3]
 80090dc:	3401      	adds	r4, #1
 80090de:	fb12 7a0a 	smlabb	sl, r2, sl, r7
 80090e2:	eb08 0b0a 	add.w	fp, r8, sl
 80090e6:	f818 a00a 	ldrb.w	sl, [r8, sl]
 80090ea:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80090ee:	f89b b001 	ldrb.w	fp, [fp, #1]
 80090f2:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 80090f6:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80090fa:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80090fe:	ea43 030b 	orr.w	r3, r3, fp
 8009102:	ea43 03da 	orr.w	r3, r3, sl, lsr #3
 8009106:	f820 3b02 	strh.w	r3, [r0], #2
 800910a:	e7e2      	b.n	80090d2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 800910c:	8833      	ldrh	r3, [r6, #0]
 800910e:	1b5b      	subs	r3, r3, r5
 8009110:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8009114:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8009118:	1b5b      	subs	r3, r3, r5
 800911a:	441c      	add	r4, r3
 800911c:	e7d5      	b.n	80090ca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 800911e:	4b08      	ldr	r3, [pc, #32]	; (8009140 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8009120:	6818      	ldr	r0, [r3, #0]
 8009122:	6803      	ldr	r3, [r0, #0]
 8009124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009126:	4798      	blx	r3
 8009128:	e75c      	b.n	8008fe4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 800912a:	bf00      	nop
 800912c:	0800c703 	.word	0x0800c703
 8009130:	0800cbc5 	.word	0x0800cbc5
 8009134:	0800ca3f 	.word	0x0800ca3f
 8009138:	200010aa 	.word	0x200010aa
 800913c:	fffff800 	.word	0xfffff800
 8009140:	200010b0 	.word	0x200010b0

08009144 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8009144:	b430      	push	{r4, r5}
 8009146:	780d      	ldrb	r5, [r1, #0]
 8009148:	f89d 4008 	ldrb.w	r4, [sp, #8]
 800914c:	2d01      	cmp	r5, #1
 800914e:	d00a      	beq.n	8009166 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8009150:	d305      	bcc.n	800915e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8009152:	2d02      	cmp	r5, #2
 8009154:	d10b      	bne.n	800916e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8009156:	9402      	str	r4, [sp, #8]
 8009158:	bc30      	pop	{r4, r5}
 800915a:	f7ff bddf 	b.w	8008d1c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 800915e:	9402      	str	r4, [sp, #8]
 8009160:	bc30      	pop	{r4, r5}
 8009162:	f7ff bce7 	b.w	8008b34 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8009166:	9402      	str	r4, [sp, #8]
 8009168:	bc30      	pop	{r4, r5}
 800916a:	f7ff bedb 	b.w	8008f24 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 800916e:	bc30      	pop	{r4, r5}
 8009170:	4770      	bx	lr
	...

08009174 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8009174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009178:	b087      	sub	sp, #28
 800917a:	4604      	mov	r4, r0
 800917c:	460e      	mov	r6, r1
 800917e:	6810      	ldr	r0, [r2, #0]
 8009180:	6851      	ldr	r1, [r2, #4]
 8009182:	ad02      	add	r5, sp, #8
 8009184:	4617      	mov	r7, r2
 8009186:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 800918a:	f8df 9230 	ldr.w	r9, [pc, #560]	; 80093bc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 800918e:	c503      	stmia	r5!, {r0, r1}
 8009190:	6818      	ldr	r0, [r3, #0]
 8009192:	ad04      	add	r5, sp, #16
 8009194:	6859      	ldr	r1, [r3, #4]
 8009196:	c503      	stmia	r5!, {r0, r1}
 8009198:	a802      	add	r0, sp, #8
 800919a:	f7fd fc8b 	bl	8006ab4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800919e:	4639      	mov	r1, r7
 80091a0:	a804      	add	r0, sp, #16
 80091a2:	f7fd fc6f 	bl	8006a84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80091a6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80091aa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80091ae:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80091b2:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80091b6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80091ba:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 80091be:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80091c2:	440e      	add	r6, r1
 80091c4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80091c8:	440a      	add	r2, r1
 80091ca:	f8ad 2010 	strh.w	r2, [sp, #16]
 80091ce:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80091d2:	4413      	add	r3, r2
 80091d4:	f8ad 3012 	strh.w	r3, [sp, #18]
 80091d8:	4b77      	ldr	r3, [pc, #476]	; (80093b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80091da:	6818      	ldr	r0, [r3, #0]
 80091dc:	6803      	ldr	r3, [r0, #0]
 80091de:	6a1b      	ldr	r3, [r3, #32]
 80091e0:	4798      	blx	r3
 80091e2:	f8b9 b000 	ldrh.w	fp, [r9]
 80091e6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80091ea:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80091ee:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80091f2:	fb05 f50b 	mul.w	r5, r5, fp
 80091f6:	fb0b 2303 	mla	r3, fp, r3, r2
 80091fa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80091fe:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	d068      	beq.n	80092d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x164>
 8009206:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 800920a:	4558      	cmp	r0, fp
 800920c:	f080 80cc 	bcs.w	80093a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8009210:	9b00      	ldr	r3, [sp, #0]
 8009212:	4631      	mov	r1, r6
 8009214:	18c3      	adds	r3, r0, r3
 8009216:	9301      	str	r3, [sp, #4]
 8009218:	9b01      	ldr	r3, [sp, #4]
 800921a:	4298      	cmp	r0, r3
 800921c:	d24e      	bcs.n	80092bc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x148>
 800921e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009222:	2a00      	cmp	r2, #0
 8009224:	d047      	beq.n	80092b6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 8009226:	fb0a f202 	mul.w	r2, sl, r2
 800922a:	1c53      	adds	r3, r2, #1
 800922c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8009230:	121b      	asrs	r3, r3, #8
 8009232:	d040      	beq.n	80092b6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 8009234:	8802      	ldrh	r2, [r0, #0]
 8009236:	b29e      	uxth	r6, r3
 8009238:	f8b4 c000 	ldrh.w	ip, [r4]
 800923c:	43db      	mvns	r3, r3
 800923e:	1215      	asrs	r5, r2, #8
 8009240:	b2db      	uxtb	r3, r3
 8009242:	ea4f 272c 	mov.w	r7, ip, asr #8
 8009246:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 800924a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 800924e:	fb15 f503 	smulbb	r5, r5, r3
 8009252:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8009256:	00d2      	lsls	r2, r2, #3
 8009258:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 800925c:	fb07 5706 	mla	r7, r7, r6, r5
 8009260:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8009264:	b2d2      	uxtb	r2, r2
 8009266:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800926a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 800926e:	fb1e fe03 	smulbb	lr, lr, r3
 8009272:	b2bf      	uxth	r7, r7
 8009274:	fb12 f203 	smulbb	r2, r2, r3
 8009278:	fa5f fc8c 	uxtb.w	ip, ip
 800927c:	fb05 e506 	mla	r5, r5, r6, lr
 8009280:	1c7b      	adds	r3, r7, #1
 8009282:	fb0c 2c06 	mla	ip, ip, r6, r2
 8009286:	b2ad      	uxth	r5, r5
 8009288:	fa1f fc8c 	uxth.w	ip, ip
 800928c:	f105 0e01 	add.w	lr, r5, #1
 8009290:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8009294:	f10c 0601 	add.w	r6, ip, #1
 8009298:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 800929c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80092a0:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80092a4:	096d      	lsrs	r5, r5, #5
 80092a6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80092aa:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80092ae:	ea47 070c 	orr.w	r7, r7, ip
 80092b2:	432f      	orrs	r7, r5
 80092b4:	8007      	strh	r7, [r0, #0]
 80092b6:	3002      	adds	r0, #2
 80092b8:	3402      	adds	r4, #2
 80092ba:	e7ad      	b.n	8009218 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 80092bc:	f8b9 3000 	ldrh.w	r3, [r9]
 80092c0:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80092c4:	eba3 0308 	sub.w	r3, r3, r8
 80092c8:	eba6 0608 	sub.w	r6, r6, r8
 80092cc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80092d0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80092d4:	440e      	add	r6, r1
 80092d6:	e798      	b.n	800920a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 80092d8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80092dc:	42a8      	cmp	r0, r5
 80092de:	d263      	bcs.n	80093a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80092e0:	9b00      	ldr	r3, [sp, #0]
 80092e2:	4631      	mov	r1, r6
 80092e4:	eb00 0b03 	add.w	fp, r0, r3
 80092e8:	4558      	cmp	r0, fp
 80092ea:	d24f      	bcs.n	800938c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 80092ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092f0:	b12b      	cbz	r3, 80092fe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 80092f2:	2bff      	cmp	r3, #255	; 0xff
 80092f4:	f8b4 e000 	ldrh.w	lr, [r4]
 80092f8:	d104      	bne.n	8009304 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x190>
 80092fa:	f8a0 e000 	strh.w	lr, [r0]
 80092fe:	3002      	adds	r0, #2
 8009300:	3402      	adds	r4, #2
 8009302:	e7f1      	b.n	80092e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x174>
 8009304:	8802      	ldrh	r2, [r0, #0]
 8009306:	b29f      	uxth	r7, r3
 8009308:	43db      	mvns	r3, r3
 800930a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 800930e:	1216      	asrs	r6, r2, #8
 8009310:	b2db      	uxtb	r3, r3
 8009312:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8009316:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 800931a:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 800931e:	00d2      	lsls	r2, r2, #3
 8009320:	fb16 f603 	smulbb	r6, r6, r3
 8009324:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8009328:	b2d2      	uxtb	r2, r2
 800932a:	fb0c 6c07 	mla	ip, ip, r7, r6
 800932e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8009332:	fb1a fa03 	smulbb	sl, sl, r3
 8009336:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800933a:	fb12 f303 	smulbb	r3, r2, r3
 800933e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8009342:	fa5f fe8e 	uxtb.w	lr, lr
 8009346:	fb06 a607 	mla	r6, r6, r7, sl
 800934a:	fa1f fc8c 	uxth.w	ip, ip
 800934e:	fb0e 3e07 	mla	lr, lr, r7, r3
 8009352:	b2b6      	uxth	r6, r6
 8009354:	f10c 0201 	add.w	r2, ip, #1
 8009358:	fa1f fe8e 	uxth.w	lr, lr
 800935c:	f106 0a01 	add.w	sl, r6, #1
 8009360:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8009364:	f10e 0301 	add.w	r3, lr, #1
 8009368:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 800936c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8009370:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8009374:	0976      	lsrs	r6, r6, #5
 8009376:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 800937a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 800937e:	ea4c 0c0e 	orr.w	ip, ip, lr
 8009382:	ea4c 0c06 	orr.w	ip, ip, r6
 8009386:	f8a0 c000 	strh.w	ip, [r0]
 800938a:	e7b8      	b.n	80092fe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 800938c:	f8b9 3000 	ldrh.w	r3, [r9]
 8009390:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8009394:	eba3 0308 	sub.w	r3, r3, r8
 8009398:	eba6 0608 	sub.w	r6, r6, r8
 800939c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80093a0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80093a4:	440e      	add	r6, r1
 80093a6:	e799      	b.n	80092dc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 80093a8:	4b03      	ldr	r3, [pc, #12]	; (80093b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80093aa:	6818      	ldr	r0, [r3, #0]
 80093ac:	6803      	ldr	r3, [r0, #0]
 80093ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b0:	4798      	blx	r3
 80093b2:	b007      	add	sp, #28
 80093b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b8:	200010b0 	.word	0x200010b0
 80093bc:	200010aa 	.word	0x200010aa

080093c0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80093c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c4:	b089      	sub	sp, #36	; 0x24
 80093c6:	4682      	mov	sl, r0
 80093c8:	460d      	mov	r5, r1
 80093ca:	4691      	mov	r9, r2
 80093cc:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 80093d0:	4698      	mov	r8, r3
 80093d2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80093d4:	b3ae      	cbz	r6, 8009442 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80093d6:	4608      	mov	r0, r1
 80093d8:	f7fe fca0 	bl	8007d1c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80093dc:	4607      	mov	r7, r0
 80093de:	4628      	mov	r0, r5
 80093e0:	f7fe fcd6 	bl	8007d90 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80093e4:	f8ad 000e 	strh.w	r0, [sp, #14]
 80093e8:	4628      	mov	r0, r5
 80093ea:	f8ad 9008 	strh.w	r9, [sp, #8]
 80093ee:	f8ad 800a 	strh.w	r8, [sp, #10]
 80093f2:	f8ad 700c 	strh.w	r7, [sp, #12]
 80093f6:	f7fe fe23 	bl	8008040 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80093fa:	b178      	cbz	r0, 800941c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80093fc:	4628      	mov	r0, r5
 80093fe:	f7fe fe1f 	bl	8008040 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8009402:	2802      	cmp	r0, #2
 8009404:	d00a      	beq.n	800941c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8009406:	4628      	mov	r0, r5
 8009408:	f7fe fe1a 	bl	8008040 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800940c:	280b      	cmp	r0, #11
 800940e:	d005      	beq.n	800941c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8009410:	4b69      	ldr	r3, [pc, #420]	; (80095b8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 8009412:	214b      	movs	r1, #75	; 0x4b
 8009414:	4a69      	ldr	r2, [pc, #420]	; (80095bc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 8009416:	486a      	ldr	r0, [pc, #424]	; (80095c0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 8009418:	f000 fc60 	bl	8009cdc <__assert_func>
 800941c:	4628      	mov	r0, r5
 800941e:	f7fe fd85 	bl	8007f2c <_ZNK8touchgfx6Bitmap7getDataEv>
 8009422:	4607      	mov	r7, r0
 8009424:	4628      	mov	r0, r5
 8009426:	f7fe fdb3 	bl	8007f90 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 800942a:	4681      	mov	r9, r0
 800942c:	4628      	mov	r0, r5
 800942e:	f7fe fe07 	bl	8008040 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8009432:	2802      	cmp	r0, #2
 8009434:	d108      	bne.n	8009448 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8009436:	4633      	mov	r3, r6
 8009438:	4622      	mov	r2, r4
 800943a:	a902      	add	r1, sp, #8
 800943c:	4638      	mov	r0, r7
 800943e:	f7ff fa69 	bl	8008914 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8009442:	b009      	add	sp, #36	; 0x24
 8009444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009448:	4628      	mov	r0, r5
 800944a:	f7fe fdf9 	bl	8008040 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800944e:	280b      	cmp	r0, #11
 8009450:	d107      	bne.n	8009462 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 8009452:	9600      	str	r6, [sp, #0]
 8009454:	4623      	mov	r3, r4
 8009456:	aa02      	add	r2, sp, #8
 8009458:	4649      	mov	r1, r9
 800945a:	4638      	mov	r0, r7
 800945c:	f7ff fe72 	bl	8009144 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8009460:	e7ef      	b.n	8009442 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8009462:	4628      	mov	r0, r5
 8009464:	f7fe fd28 	bl	8007eb8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8009468:	b950      	cbnz	r0, 8009480 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 800946a:	f8da 3000 	ldr.w	r3, [sl]
 800946e:	aa02      	add	r2, sp, #8
 8009470:	4639      	mov	r1, r7
 8009472:	e9cd 6000 	strd	r6, r0, [sp]
 8009476:	4650      	mov	r0, sl
 8009478:	68dd      	ldr	r5, [r3, #12]
 800947a:	4623      	mov	r3, r4
 800947c:	47a8      	blx	r5
 800947e:	e7e0      	b.n	8009442 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8009480:	f10d 0818 	add.w	r8, sp, #24
 8009484:	4629      	mov	r1, r5
 8009486:	ad04      	add	r5, sp, #16
 8009488:	4640      	mov	r0, r8
 800948a:	f7fe fcbb 	bl	8007e04 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800948e:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009492:	e885 0003 	stmia.w	r5, {r0, r1}
 8009496:	4628      	mov	r0, r5
 8009498:	4621      	mov	r1, r4
 800949a:	f7fb fee3 	bl	8005264 <_ZN8touchgfx4RectaNERKS0_>
 800949e:	4628      	mov	r0, r5
 80094a0:	f7fd fb20 	bl	8006ae4 <_ZNK8touchgfx4Rect7isEmptyEv>
 80094a4:	b138      	cbz	r0, 80094b6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 80094a6:	4623      	mov	r3, r4
 80094a8:	9600      	str	r6, [sp, #0]
 80094aa:	aa02      	add	r2, sp, #8
 80094ac:	4649      	mov	r1, r9
 80094ae:	4638      	mov	r0, r7
 80094b0:	f7ff fe60 	bl	8009174 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80094b4:	e7c5      	b.n	8009442 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80094b6:	f8da 3000 	ldr.w	r3, [sl]
 80094ba:	aa02      	add	r2, sp, #8
 80094bc:	4639      	mov	r1, r7
 80094be:	e9cd 6000 	strd	r6, r0, [sp]
 80094c2:	4650      	mov	r0, sl
 80094c4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 80094c8:	462b      	mov	r3, r5
 80094ca:	47d8      	blx	fp
 80094cc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80094d0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80094d4:	4293      	cmp	r3, r2
 80094d6:	dd13      	ble.n	8009500 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 80094d8:	f9b4 0000 	ldrsh.w	r0, [r4]
 80094dc:	1a9b      	subs	r3, r3, r2
 80094de:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80094e2:	f8ad 0018 	strh.w	r0, [sp, #24]
 80094e6:	4638      	mov	r0, r7
 80094e8:	f8ad 201a 	strh.w	r2, [sp, #26]
 80094ec:	aa02      	add	r2, sp, #8
 80094ee:	f8ad 101c 	strh.w	r1, [sp, #28]
 80094f2:	4649      	mov	r1, r9
 80094f4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80094f8:	4643      	mov	r3, r8
 80094fa:	9600      	str	r6, [sp, #0]
 80094fc:	f7ff fe3a 	bl	8009174 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8009500:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8009504:	f9b4 2000 	ldrsh.w	r2, [r4]
 8009508:	4293      	cmp	r3, r2
 800950a:	dd13      	ble.n	8009534 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 800950c:	1a9b      	subs	r3, r3, r2
 800950e:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8009512:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8009516:	f8ad 2018 	strh.w	r2, [sp, #24]
 800951a:	aa02      	add	r2, sp, #8
 800951c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8009520:	4638      	mov	r0, r7
 8009522:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009526:	4643      	mov	r3, r8
 8009528:	f8ad 101e 	strh.w	r1, [sp, #30]
 800952c:	4649      	mov	r1, r9
 800952e:	9600      	str	r6, [sp, #0]
 8009530:	f7ff fe20 	bl	8009174 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8009534:	88a2      	ldrh	r2, [r4, #4]
 8009536:	8823      	ldrh	r3, [r4, #0]
 8009538:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800953c:	4413      	add	r3, r2
 800953e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8009542:	440a      	add	r2, r1
 8009544:	b29b      	uxth	r3, r3
 8009546:	b292      	uxth	r2, r2
 8009548:	b218      	sxth	r0, r3
 800954a:	b211      	sxth	r1, r2
 800954c:	4288      	cmp	r0, r1
 800954e:	dd13      	ble.n	8009578 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 8009550:	1a9b      	subs	r3, r3, r2
 8009552:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8009556:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 800955a:	aa02      	add	r2, sp, #8
 800955c:	f8ad 1018 	strh.w	r1, [sp, #24]
 8009560:	4649      	mov	r1, r9
 8009562:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009566:	4643      	mov	r3, r8
 8009568:	f8ad 001e 	strh.w	r0, [sp, #30]
 800956c:	4638      	mov	r0, r7
 800956e:	9600      	str	r6, [sp, #0]
 8009570:	f8ad 501a 	strh.w	r5, [sp, #26]
 8009574:	f7ff fdfe 	bl	8009174 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8009578:	88e2      	ldrh	r2, [r4, #6]
 800957a:	8863      	ldrh	r3, [r4, #2]
 800957c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8009580:	4413      	add	r3, r2
 8009582:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8009586:	440a      	add	r2, r1
 8009588:	b29b      	uxth	r3, r3
 800958a:	b292      	uxth	r2, r2
 800958c:	b218      	sxth	r0, r3
 800958e:	b211      	sxth	r1, r2
 8009590:	4288      	cmp	r0, r1
 8009592:	f77f af56 	ble.w	8009442 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8009596:	f9b4 5000 	ldrsh.w	r5, [r4]
 800959a:	1a9b      	subs	r3, r3, r2
 800959c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80095a0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80095a4:	4643      	mov	r3, r8
 80095a6:	f8ad 5018 	strh.w	r5, [sp, #24]
 80095aa:	f8ad 101a 	strh.w	r1, [sp, #26]
 80095ae:	f8ad 001c 	strh.w	r0, [sp, #28]
 80095b2:	9600      	str	r6, [sp, #0]
 80095b4:	e779      	b.n	80094aa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 80095b6:	bf00      	nop
 80095b8:	0800c751 	.word	0x0800c751
 80095bc:	0800cc4e 	.word	0x0800cc4e
 80095c0:	0800ca3f 	.word	0x0800ca3f

080095c4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 80095c4:	b508      	push	{r3, lr}
 80095c6:	b180      	cbz	r0, 80095ea <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 80095c8:	2902      	cmp	r1, #2
 80095ca:	d014      	beq.n	80095f6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 80095cc:	2903      	cmp	r1, #3
 80095ce:	d01d      	beq.n	800960c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 80095d0:	2901      	cmp	r1, #1
 80095d2:	d101      	bne.n	80095d8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 80095d4:	2001      	movs	r0, #1
 80095d6:	bd08      	pop	{r3, pc}
 80095d8:	4b0e      	ldr	r3, [pc, #56]	; (8009614 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 80095da:	8818      	ldrh	r0, [r3, #0]
 80095dc:	b990      	cbnz	r0, 8009604 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 80095de:	4b0e      	ldr	r3, [pc, #56]	; (8009618 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 80095e0:	2154      	movs	r1, #84	; 0x54
 80095e2:	4a0e      	ldr	r2, [pc, #56]	; (800961c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 80095e4:	480e      	ldr	r0, [pc, #56]	; (8009620 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 80095e6:	f000 fb79 	bl	8009cdc <__assert_func>
 80095ea:	2902      	cmp	r1, #2
 80095ec:	d00e      	beq.n	800960c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 80095ee:	2903      	cmp	r1, #3
 80095f0:	d0f2      	beq.n	80095d8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 80095f2:	2901      	cmp	r1, #1
 80095f4:	d1ee      	bne.n	80095d4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 80095f6:	4b07      	ldr	r3, [pc, #28]	; (8009614 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 80095f8:	8818      	ldrh	r0, [r3, #0]
 80095fa:	2800      	cmp	r0, #0
 80095fc:	d0ef      	beq.n	80095de <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 80095fe:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8009602:	e7e8      	b.n	80095d6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8009604:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8009608:	4240      	negs	r0, r0
 800960a:	e7e4      	b.n	80095d6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 800960c:	f04f 30ff 	mov.w	r0, #4294967295
 8009610:	e7e1      	b.n	80095d6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8009612:	bf00      	nop
 8009614:	200010aa 	.word	0x200010aa
 8009618:	0800ca71 	.word	0x0800ca71
 800961c:	0800cd5d 	.word	0x0800cd5d
 8009620:	0800cab3 	.word	0x0800cab3

08009624 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8009624:	b508      	push	{r3, lr}
 8009626:	b180      	cbz	r0, 800964a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8009628:	2902      	cmp	r1, #2
 800962a:	d014      	beq.n	8009656 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 800962c:	2903      	cmp	r1, #3
 800962e:	d018      	beq.n	8009662 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8009630:	2901      	cmp	r1, #1
 8009632:	d001      	beq.n	8009638 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8009634:	2001      	movs	r0, #1
 8009636:	e013      	b.n	8009660 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8009638:	4b0e      	ldr	r3, [pc, #56]	; (8009674 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 800963a:	8818      	ldrh	r0, [r3, #0]
 800963c:	b970      	cbnz	r0, 800965c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 800963e:	4b0e      	ldr	r3, [pc, #56]	; (8009678 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 8009640:	2154      	movs	r1, #84	; 0x54
 8009642:	4a0e      	ldr	r2, [pc, #56]	; (800967c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 8009644:	480e      	ldr	r0, [pc, #56]	; (8009680 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8009646:	f000 fb49 	bl	8009cdc <__assert_func>
 800964a:	2902      	cmp	r1, #2
 800964c:	d009      	beq.n	8009662 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 800964e:	2903      	cmp	r1, #3
 8009650:	d0f0      	beq.n	8009634 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 8009652:	2901      	cmp	r1, #1
 8009654:	d1f0      	bne.n	8009638 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8009656:	f04f 30ff 	mov.w	r0, #4294967295
 800965a:	e001      	b.n	8009660 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 800965c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8009660:	bd08      	pop	{r3, pc}
 8009662:	4b04      	ldr	r3, [pc, #16]	; (8009674 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8009664:	8818      	ldrh	r0, [r3, #0]
 8009666:	2800      	cmp	r0, #0
 8009668:	d0e9      	beq.n	800963e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 800966a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800966e:	4240      	negs	r0, r0
 8009670:	e7f6      	b.n	8009660 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8009672:	bf00      	nop
 8009674:	200010aa 	.word	0x200010aa
 8009678:	0800ca71 	.word	0x0800ca71
 800967c:	0800cd5d 	.word	0x0800cd5d
 8009680:	0800cab3 	.word	0x0800cab3

08009684 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8009684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009688:	b099      	sub	sp, #100	; 0x64
 800968a:	910b      	str	r1, [sp, #44]	; 0x2c
 800968c:	a914      	add	r1, sp, #80	; 0x50
 800968e:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 8009692:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 8009696:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 800969a:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 800969e:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 80096a2:	e881 000c 	stmia.w	r1, {r2, r3}
 80096a6:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 80096aa:	f89d 10a4 	ldrb.w	r1, [sp, #164]	; 0xa4
 80096ae:	9308      	str	r3, [sp, #32]
 80096b0:	910c      	str	r1, [sp, #48]	; 0x30
 80096b2:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
 80096b6:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 80096ba:	910d      	str	r1, [sp, #52]	; 0x34
 80096bc:	f893 b00d 	ldrb.w	fp, [r3, #13]
 80096c0:	7998      	ldrb	r0, [r3, #6]
 80096c2:	ea4f 114b 	mov.w	r1, fp, lsl #5
 80096c6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80096ca:	4301      	orrs	r1, r0
 80096cc:	9109      	str	r1, [sp, #36]	; 0x24
 80096ce:	f000 81e4 	beq.w	8009a9a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 80096d2:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 80096d6:	79d9      	ldrb	r1, [r3, #7]
 80096d8:	f40b 7b80 	and.w	fp, fp, #256	; 0x100
 80096dc:	ea51 0b0b 	orrs.w	fp, r1, fp
 80096e0:	f000 81db 	beq.w	8009a9a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 80096e4:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	2e00      	cmp	r6, #0
 80096ec:	f000 80fd 	beq.w	80098ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 80096f0:	1af6      	subs	r6, r6, r3
 80096f2:	b2b6      	uxth	r6, r6
 80096f4:	0433      	lsls	r3, r6, #16
 80096f6:	d502      	bpl.n	80096fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 80096f8:	1bad      	subs	r5, r5, r6
 80096fa:	2600      	movs	r6, #0
 80096fc:	b22d      	sxth	r5, r5
 80096fe:	f9b2 1000 	ldrsh.w	r1, [r2]
 8009702:	a814      	add	r0, sp, #80	; 0x50
 8009704:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8009708:	428d      	cmp	r5, r1
 800970a:	b28b      	uxth	r3, r1
 800970c:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009710:	bfbf      	itttt	lt
 8009712:	18f6      	addlt	r6, r6, r3
 8009714:	1b75      	sublt	r5, r6, r5
 8009716:	b2ae      	uxthlt	r6, r5
 8009718:	460d      	movlt	r5, r1
 800971a:	8891      	ldrh	r1, [r2, #4]
 800971c:	440b      	add	r3, r1
 800971e:	4629      	mov	r1, r5
 8009720:	b21b      	sxth	r3, r3
 8009722:	9311      	str	r3, [sp, #68]	; 0x44
 8009724:	8853      	ldrh	r3, [r2, #2]
 8009726:	88d2      	ldrh	r2, [r2, #6]
 8009728:	4413      	add	r3, r2
 800972a:	9a08      	ldr	r2, [sp, #32]
 800972c:	b21b      	sxth	r3, r3
 800972e:	9310      	str	r3, [sp, #64]	; 0x40
 8009730:	4bb1      	ldr	r3, [pc, #708]	; (80099f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 8009732:	f893 9000 	ldrb.w	r9, [r3]
 8009736:	f109 3cff 	add.w	ip, r9, #4294967295
 800973a:	f1dc 0300 	rsbs	r3, ip, #0
 800973e:	eb43 030c 	adc.w	r3, r3, ip
 8009742:	930f      	str	r3, [sp, #60]	; 0x3c
 8009744:	4653      	mov	r3, sl
 8009746:	f7fd f827 	bl	8006798 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 800974a:	4629      	mov	r1, r5
 800974c:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8009750:	4653      	mov	r3, sl
 8009752:	9a08      	ldr	r2, [sp, #32]
 8009754:	a814      	add	r0, sp, #80	; 0x50
 8009756:	f7fd f837 	bl	80067c8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 800975a:	a918      	add	r1, sp, #96	; 0x60
 800975c:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8009760:	a817      	add	r0, sp, #92	; 0x5c
 8009762:	f7fd f979 	bl	8006a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8009766:	f1ba 0f00 	cmp.w	sl, #0
 800976a:	f040 80c1 	bne.w	80098f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26c>
 800976e:	f1b9 0f01 	cmp.w	r9, #1
 8009772:	f040 80c5 	bne.w	8009900 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27c>
 8009776:	2301      	movs	r3, #1
 8009778:	f1b8 0f01 	cmp.w	r8, #1
 800977c:	fa03 f308 	lsl.w	r3, r3, r8
 8009780:	f103 33ff 	add.w	r3, r3, #4294967295
 8009784:	b2db      	uxtb	r3, r3
 8009786:	930a      	str	r3, [sp, #40]	; 0x28
 8009788:	f000 80e5 	beq.w	8009956 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d2>
 800978c:	f1b8 0f02 	cmp.w	r8, #2
 8009790:	f000 80e4 	beq.w	800995c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 8009794:	f1b8 0f04 	cmp.w	r8, #4
 8009798:	bf15      	itete	ne
 800979a:	46c1      	movne	r9, r8
 800979c:	f04f 0904 	moveq.w	r9, #4
 80097a0:	2301      	movne	r3, #1
 80097a2:	2311      	moveq	r3, #17
 80097a4:	9307      	str	r3, [sp, #28]
 80097a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097a8:	b153      	cbz	r3, 80097c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 80097aa:	2408      	movs	r4, #8
 80097ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097ae:	fb94 f3f9 	sdiv	r3, r4, r9
 80097b2:	1e5c      	subs	r4, r3, #1
 80097b4:	4414      	add	r4, r2
 80097b6:	fb94 f4f3 	sdiv	r4, r4, r3
 80097ba:	fb14 f403 	smulbb	r4, r4, r3
 80097be:	b2a4      	uxth	r4, r4
 80097c0:	b906      	cbnz	r6, 80097c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 80097c2:	b16f      	cbz	r7, 80097e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15c>
 80097c4:	fb07 6304 	mla	r3, r7, r4, r6
 80097c8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80097ca:	4639      	mov	r1, r7
 80097cc:	fb08 f303 	mul.w	r3, r8, r3
 80097d0:	f003 0707 	and.w	r7, r3, #7
 80097d4:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
 80097d8:	9328      	str	r3, [sp, #160]	; 0xa0
 80097da:	ebab 0301 	sub.w	r3, fp, r1
 80097de:	930e      	str	r3, [sp, #56]	; 0x38
 80097e0:	4651      	mov	r1, sl
 80097e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80097e4:	f7ff feee 	bl	80095c4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 80097e8:	4651      	mov	r1, sl
 80097ea:	4683      	mov	fp, r0
 80097ec:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80097ee:	f7ff ff19 	bl	8009624 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 80097f2:	9a08      	ldr	r2, [sp, #32]
 80097f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097f6:	4682      	mov	sl, r0
 80097f8:	1a9b      	subs	r3, r3, r2
 80097fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097fc:	429a      	cmp	r2, r3
 80097fe:	bfa8      	it	ge
 8009800:	461a      	movge	r2, r3
 8009802:	2a00      	cmp	r2, #0
 8009804:	9208      	str	r2, [sp, #32]
 8009806:	f340 8148 	ble.w	8009a9a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 800980a:	1bad      	subs	r5, r5, r6
 800980c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800980e:	1b5d      	subs	r5, r3, r5
 8009810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009812:	429d      	cmp	r5, r3
 8009814:	bfd4      	ite	le
 8009816:	ebc6 0605 	rsble	r6, r6, r5
 800981a:	ebc6 0603 	rsbgt	r6, r6, r3
 800981e:	2e00      	cmp	r6, #0
 8009820:	f340 813b 	ble.w	8009a9a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8009824:	1ba4      	subs	r4, r4, r6
 8009826:	fb09 f304 	mul.w	r3, r9, r4
 800982a:	930e      	str	r3, [sp, #56]	; 0x38
 800982c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800982e:	2b00      	cmp	r3, #0
 8009830:	f040 809d 	bne.w	800996e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ea>
 8009834:	4b71      	ldr	r3, [pc, #452]	; (80099fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8009836:	6818      	ldr	r0, [r3, #0]
 8009838:	6803      	ldr	r3, [r0, #0]
 800983a:	6a1b      	ldr	r3, [r3, #32]
 800983c:	4798      	blx	r3
 800983e:	4970      	ldr	r1, [pc, #448]	; (8009a00 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 8009840:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8009844:	880c      	ldrh	r4, [r1, #0]
 8009846:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 800984a:	fb04 1303 	mla	r3, r4, r3, r1
 800984e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009852:	9309      	str	r3, [sp, #36]	; 0x24
 8009854:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009856:	7819      	ldrb	r1, [r3, #0]
 8009858:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800985a:	4139      	asrs	r1, r7
 800985c:	0a1b      	lsrs	r3, r3, #8
 800985e:	b2c9      	uxtb	r1, r1
 8009860:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8009864:	930f      	str	r3, [sp, #60]	; 0x3c
 8009866:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009868:	08db      	lsrs	r3, r3, #3
 800986a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 800986e:	9310      	str	r3, [sp, #64]	; 0x40
 8009870:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009872:	00db      	lsls	r3, r3, #3
 8009874:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8009878:	9311      	str	r3, [sp, #68]	; 0x44
 800987a:	ea4f 034b 	mov.w	r3, fp, lsl #1
 800987e:	fb0b ab16 	mls	fp, fp, r6, sl
 8009882:	fb03 fa06 	mul.w	sl, r3, r6
 8009886:	930c      	str	r3, [sp, #48]	; 0x30
 8009888:	eb0a 034b 	add.w	r3, sl, fp, lsl #1
 800988c:	9312      	str	r3, [sp, #72]	; 0x48
 800988e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009890:	b29b      	uxth	r3, r3
 8009892:	9313      	str	r3, [sp, #76]	; 0x4c
 8009894:	9b08      	ldr	r3, [sp, #32]
 8009896:	3b01      	subs	r3, #1
 8009898:	9308      	str	r3, [sp, #32]
 800989a:	3301      	adds	r3, #1
 800989c:	f000 80c4 	beq.w	8009a28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 80098a0:	46b2      	mov	sl, r6
 80098a2:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80098a6:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80098aa:	f0c0 80ab 	bcc.w	8009a04 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 80098ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098b0:	400b      	ands	r3, r1
 80098b2:	d00a      	beq.n	80098ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x246>
 80098b4:	9807      	ldr	r0, [sp, #28]
 80098b6:	fb13 f300 	smulbb	r3, r3, r0
 80098ba:	2bfe      	cmp	r3, #254	; 0xfe
 80098bc:	dd59      	ble.n	8009972 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 80098be:	980d      	ldr	r0, [sp, #52]	; 0x34
 80098c0:	28ff      	cmp	r0, #255	; 0xff
 80098c2:	d156      	bne.n	8009972 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 80098c4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80098c6:	f8ae 4000 	strh.w	r4, [lr]
 80098ca:	4447      	add	r7, r8
 80098cc:	b2bf      	uxth	r7, r7
 80098ce:	2f07      	cmp	r7, #7
 80098d0:	bf89      	itett	hi
 80098d2:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 80098d4:	fa41 f109 	asrls.w	r1, r1, r9
 80098d8:	2700      	movhi	r7, #0
 80098da:	7859      	ldrbhi	r1, [r3, #1]
 80098dc:	bf8a      	itet	hi
 80098de:	3301      	addhi	r3, #1
 80098e0:	b2c9      	uxtbls	r1, r1
 80098e2:	9328      	strhi	r3, [sp, #160]	; 0xa0
 80098e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098e6:	449e      	add	lr, r3
 80098e8:	e7dd      	b.n	80098a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x222>
 80098ea:	441d      	add	r5, r3
 80098ec:	b22d      	sxth	r5, r5
 80098ee:	e706      	b.n	80096fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 80098f0:	f1ba 0f01 	cmp.w	sl, #1
 80098f4:	f47f af3f 	bne.w	8009776 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 80098f8:	f1b9 0f01 	cmp.w	r9, #1
 80098fc:	f47f af3b 	bne.w	8009776 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8009900:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80099fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8009904:	f8d9 0000 	ldr.w	r0, [r9]
 8009908:	6803      	ldr	r3, [r0, #0]
 800990a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800990c:	4798      	blx	r3
 800990e:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8009912:	464a      	mov	r2, r9
 8009914:	d006      	beq.n	8009924 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 8009916:	f1b8 0f04 	cmp.w	r8, #4
 800991a:	d11a      	bne.n	8009952 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 800991c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800991e:	3300      	adds	r3, #0
 8009920:	bf18      	it	ne
 8009922:	2301      	movne	r3, #1
 8009924:	05c0      	lsls	r0, r0, #23
 8009926:	f140 8088 	bpl.w	8009a3a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 800992a:	f1b8 0f08 	cmp.w	r8, #8
 800992e:	f040 8084 	bne.w	8009a3a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 8009932:	2b00      	cmp	r3, #0
 8009934:	bf14      	ite	ne
 8009936:	2180      	movne	r1, #128	; 0x80
 8009938:	f44f 7180 	moveq.w	r1, #256	; 0x100
 800993c:	2e00      	cmp	r6, #0
 800993e:	f040 80af 	bne.w	8009aa0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x41c>
 8009942:	2f00      	cmp	r7, #0
 8009944:	f000 8083 	beq.w	8009a4e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8009948:	23ff      	movs	r3, #255	; 0xff
 800994a:	46c1      	mov	r9, r8
 800994c:	930a      	str	r3, [sp, #40]	; 0x28
 800994e:	2301      	movs	r3, #1
 8009950:	e728      	b.n	80097a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 8009952:	2300      	movs	r3, #0
 8009954:	e7e6      	b.n	8009924 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 8009956:	46c1      	mov	r9, r8
 8009958:	23ff      	movs	r3, #255	; 0xff
 800995a:	e723      	b.n	80097a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 800995c:	46c1      	mov	r9, r8
 800995e:	2355      	movs	r3, #85	; 0x55
 8009960:	e720      	b.n	80097a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 8009962:	23ff      	movs	r3, #255	; 0xff
 8009964:	46c1      	mov	r9, r8
 8009966:	930a      	str	r3, [sp, #40]	; 0x28
 8009968:	2301      	movs	r3, #1
 800996a:	9307      	str	r3, [sp, #28]
 800996c:	e71d      	b.n	80097aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x126>
 800996e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009970:	e765      	b.n	800983e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ba>
 8009972:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009974:	f8be 5000 	ldrh.w	r5, [lr]
 8009978:	fb10 f303 	smulbb	r3, r0, r3
 800997c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800997e:	122c      	asrs	r4, r5, #8
 8009980:	b29b      	uxth	r3, r3
 8009982:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8009986:	1c58      	adds	r0, r3, #1
 8009988:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 800998c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800998e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8009992:	fa1f fc83 	uxth.w	ip, r3
 8009996:	43db      	mvns	r3, r3
 8009998:	fb10 f00c 	smulbb	r0, r0, ip
 800999c:	b2db      	uxtb	r3, r3
 800999e:	fb1c fb02 	smulbb	fp, ip, r2
 80099a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80099a4:	fb04 0403 	mla	r4, r4, r3, r0
 80099a8:	10e8      	asrs	r0, r5, #3
 80099aa:	fb1c fc02 	smulbb	ip, ip, r2
 80099ae:	00ed      	lsls	r5, r5, #3
 80099b0:	b2a4      	uxth	r4, r4
 80099b2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80099b6:	b2ed      	uxtb	r5, r5
 80099b8:	fb00 b003 	mla	r0, r0, r3, fp
 80099bc:	fb05 cc03 	mla	ip, r5, r3, ip
 80099c0:	1c63      	adds	r3, r4, #1
 80099c2:	b280      	uxth	r0, r0
 80099c4:	fa1f fc8c 	uxth.w	ip, ip
 80099c8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80099cc:	f10c 0b01 	add.w	fp, ip, #1
 80099d0:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80099d4:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 80099d8:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80099dc:	ea44 040b 	orr.w	r4, r4, fp
 80099e0:	f100 0b01 	add.w	fp, r0, #1
 80099e4:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 80099e8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80099ec:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80099f0:	ea44 040b 	orr.w	r4, r4, fp
 80099f4:	e767      	b.n	80098c6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x242>
 80099f6:	bf00      	nop
 80099f8:	200010a8 	.word	0x200010a8
 80099fc:	200010b0 	.word	0x200010b0
 8009a00:	200010aa 	.word	0x200010aa
 8009a04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a06:	b153      	cbz	r3, 8009a1e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8009a08:	441f      	add	r7, r3
 8009a0a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009a0c:	b2bf      	uxth	r7, r7
 8009a0e:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 8009a12:	f007 0707 	and.w	r7, r7, #7
 8009a16:	7819      	ldrb	r1, [r3, #0]
 8009a18:	9328      	str	r3, [sp, #160]	; 0xa0
 8009a1a:	4139      	asrs	r1, r7
 8009a1c:	b2c9      	uxtb	r1, r1
 8009a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a22:	441a      	add	r2, r3
 8009a24:	9209      	str	r2, [sp, #36]	; 0x24
 8009a26:	e735      	b.n	8009894 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x210>
 8009a28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d135      	bne.n	8009a9a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8009a2e:	4b21      	ldr	r3, [pc, #132]	; (8009ab4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x430>)
 8009a30:	6818      	ldr	r0, [r3, #0]
 8009a32:	6803      	ldr	r3, [r0, #0]
 8009a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a36:	4798      	blx	r3
 8009a38:	e02f      	b.n	8009a9a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f43f ae9b 	beq.w	8009776 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8009a40:	2e00      	cmp	r6, #0
 8009a42:	f47f ae98 	bne.w	8009776 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8009a46:	2f00      	cmp	r7, #0
 8009a48:	f47f ae95 	bne.w	8009776 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8009a4c:	2180      	movs	r1, #128	; 0x80
 8009a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a50:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009a52:	18eb      	adds	r3, r5, r3
 8009a54:	4283      	cmp	r3, r0
 8009a56:	f73f ae8e 	bgt.w	8009776 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8009a5a:	9b08      	ldr	r3, [sp, #32]
 8009a5c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009a5e:	445b      	add	r3, fp
 8009a60:	4283      	cmp	r3, r0
 8009a62:	f73f ae88 	bgt.w	8009776 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8009a66:	f1b8 0f08 	cmp.w	r8, #8
 8009a6a:	6810      	ldr	r0, [r2, #0]
 8009a6c:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8009a70:	bf18      	it	ne
 8009a72:	3401      	addne	r4, #1
 8009a74:	6805      	ldr	r5, [r0, #0]
 8009a76:	9105      	str	r1, [sp, #20]
 8009a78:	bf18      	it	ne
 8009a7a:	f024 0401 	bicne.w	r4, r4, #1
 8009a7e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009a80:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8009a84:	bf18      	it	ne
 8009a86:	b2a4      	uxthne	r4, r4
 8009a88:	9104      	str	r1, [sp, #16]
 8009a8a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8009a8c:	e9cd 4b00 	strd	r4, fp, [sp]
 8009a90:	e9cd 4102 	strd	r4, r1, [sp, #8]
 8009a94:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8009a96:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8009a98:	47a0      	blx	r4
 8009a9a:	b019      	add	sp, #100	; 0x64
 8009a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	f47f af5d 	bne.w	8009962 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8009aa8:	23ff      	movs	r3, #255	; 0xff
 8009aaa:	46c1      	mov	r9, r8
 8009aac:	930a      	str	r3, [sp, #40]	; 0x28
 8009aae:	2301      	movs	r3, #1
 8009ab0:	9307      	str	r3, [sp, #28]
 8009ab2:	e687      	b.n	80097c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 8009ab4:	200010b0 	.word	0x200010b0

08009ab8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8009ab8:	6101      	str	r1, [r0, #16]
 8009aba:	4770      	bx	lr

08009abc <_ZN8touchgfx8Gestures4tickEv>:
 8009abc:	7b83      	ldrb	r3, [r0, #14]
 8009abe:	b14b      	cbz	r3, 8009ad4 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8009ac0:	8903      	ldrh	r3, [r0, #8]
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	2b07      	cmp	r3, #7
 8009ac8:	8103      	strh	r3, [r0, #8]
 8009aca:	bf81      	itttt	hi
 8009acc:	2300      	movhi	r3, #0
 8009ace:	8143      	strhhi	r3, [r0, #10]
 8009ad0:	8183      	strhhi	r3, [r0, #12]
 8009ad2:	7383      	strbhi	r3, [r0, #14]
 8009ad4:	4770      	bx	lr
	...

08009ad8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8009ad8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009adc:	4604      	mov	r4, r0
 8009ade:	4698      	mov	r8, r3
 8009ae0:	8880      	ldrh	r0, [r0, #4]
 8009ae2:	4617      	mov	r7, r2
 8009ae4:	4b1d      	ldr	r3, [pc, #116]	; (8009b5c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8009ae6:	460e      	mov	r6, r1
 8009ae8:	f8ad 0006 	strh.w	r0, [sp, #6]
 8009aec:	eba8 0000 	sub.w	r0, r8, r0
 8009af0:	9300      	str	r3, [sp, #0]
 8009af2:	2300      	movs	r3, #0
 8009af4:	b280      	uxth	r0, r0
 8009af6:	8aa2      	ldrh	r2, [r4, #20]
 8009af8:	f88d 3004 	strb.w	r3, [sp, #4]
 8009afc:	b203      	sxth	r3, r0
 8009afe:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8009b02:	88e1      	ldrh	r1, [r4, #6]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f8ad 800a 	strh.w	r8, [sp, #10]
 8009b0a:	f8ad 1008 	strh.w	r1, [sp, #8]
 8009b0e:	bfb8      	it	lt
 8009b10:	4240      	neglt	r0, r0
 8009b12:	f8ad 500c 	strh.w	r5, [sp, #12]
 8009b16:	bfb8      	it	lt
 8009b18:	b203      	sxthlt	r3, r0
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	dc08      	bgt.n	8009b30 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8009b1e:	1a69      	subs	r1, r5, r1
 8009b20:	b289      	uxth	r1, r1
 8009b22:	b20b      	sxth	r3, r1
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	bfbc      	itt	lt
 8009b28:	4249      	neglt	r1, r1
 8009b2a:	b20b      	sxthlt	r3, r1
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	da13      	bge.n	8009b58 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8009b30:	6920      	ldr	r0, [r4, #16]
 8009b32:	4669      	mov	r1, sp
 8009b34:	eba8 0606 	sub.w	r6, r8, r6
 8009b38:	1bef      	subs	r7, r5, r7
 8009b3a:	6803      	ldr	r3, [r0, #0]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	4798      	blx	r3
 8009b40:	2300      	movs	r3, #0
 8009b42:	2001      	movs	r0, #1
 8009b44:	8166      	strh	r6, [r4, #10]
 8009b46:	8123      	strh	r3, [r4, #8]
 8009b48:	81a7      	strh	r7, [r4, #12]
 8009b4a:	f8a4 8004 	strh.w	r8, [r4, #4]
 8009b4e:	80e5      	strh	r5, [r4, #6]
 8009b50:	73a0      	strb	r0, [r4, #14]
 8009b52:	b004      	add	sp, #16
 8009b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b58:	2000      	movs	r0, #0
 8009b5a:	e7fa      	b.n	8009b52 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8009b5c:	0800b140 	.word	0x0800b140

08009b60 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8009b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b62:	461e      	mov	r6, r3
 8009b64:	1e4b      	subs	r3, r1, #1
 8009b66:	b085      	sub	sp, #20
 8009b68:	4604      	mov	r4, r0
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	460d      	mov	r5, r1
 8009b6e:	4617      	mov	r7, r2
 8009b70:	d84b      	bhi.n	8009c0a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8009b72:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8009b76:	1cd3      	adds	r3, r2, #3
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	2b06      	cmp	r3, #6
 8009b7c:	d916      	bls.n	8009bac <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8009b7e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8009c20 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8009b82:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8009b86:	f8cd c004 	str.w	ip, [sp, #4]
 8009b8a:	f04f 0c00 	mov.w	ip, #0
 8009b8e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8009b92:	6900      	ldr	r0, [r0, #16]
 8009b94:	f8ad 100c 	strh.w	r1, [sp, #12]
 8009b98:	a901      	add	r1, sp, #4
 8009b9a:	f88d c008 	strb.w	ip, [sp, #8]
 8009b9e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8009ba2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009ba6:	6803      	ldr	r3, [r0, #0]
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	4798      	blx	r3
 8009bac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bb0:	1cd3      	adds	r3, r2, #3
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	2b06      	cmp	r3, #6
 8009bb6:	d916      	bls.n	8009be6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8009bb8:	f8df c064 	ldr.w	ip, [pc, #100]	; 8009c20 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8009bbc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8009bc0:	f8cd c004 	str.w	ip, [sp, #4]
 8009bc4:	f04f 0c01 	mov.w	ip, #1
 8009bc8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8009bcc:	6920      	ldr	r0, [r4, #16]
 8009bce:	f8ad 100c 	strh.w	r1, [sp, #12]
 8009bd2:	a901      	add	r1, sp, #4
 8009bd4:	f88d c008 	strb.w	ip, [sp, #8]
 8009bd8:	f8ad 200a 	strh.w	r2, [sp, #10]
 8009bdc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009be0:	6803      	ldr	r3, [r0, #0]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	4798      	blx	r3
 8009be6:	4b0d      	ldr	r3, [pc, #52]	; (8009c1c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8009be8:	a901      	add	r1, sp, #4
 8009bea:	6920      	ldr	r0, [r4, #16]
 8009bec:	9301      	str	r3, [sp, #4]
 8009bee:	2300      	movs	r3, #0
 8009bf0:	f88d 5008 	strb.w	r5, [sp, #8]
 8009bf4:	f8ad 700a 	strh.w	r7, [sp, #10]
 8009bf8:	f8ad 600c 	strh.w	r6, [sp, #12]
 8009bfc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009c00:	6803      	ldr	r3, [r0, #0]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4798      	blx	r3
 8009c06:	b005      	add	sp, #20
 8009c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c0a:	2900      	cmp	r1, #0
 8009c0c:	d1eb      	bne.n	8009be6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8009c0e:	80a2      	strh	r2, [r4, #4]
 8009c10:	80c6      	strh	r6, [r0, #6]
 8009c12:	60a1      	str	r1, [r4, #8]
 8009c14:	81a1      	strh	r1, [r4, #12]
 8009c16:	73a1      	strb	r1, [r4, #14]
 8009c18:	e7e5      	b.n	8009be6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8009c1a:	bf00      	nop
 8009c1c:	0800b12c 	.word	0x0800b12c
 8009c20:	0800bf04 	.word	0x0800bf04

08009c24 <_ZdlPv>:
 8009c24:	f000 b8bc 	b.w	8009da0 <free>

08009c28 <_ZdlPvj>:
 8009c28:	f7ff bffc 	b.w	8009c24 <_ZdlPv>

08009c2c <__cxa_guard_acquire>:
 8009c2c:	6803      	ldr	r3, [r0, #0]
 8009c2e:	07db      	lsls	r3, r3, #31
 8009c30:	d406      	bmi.n	8009c40 <__cxa_guard_acquire+0x14>
 8009c32:	7843      	ldrb	r3, [r0, #1]
 8009c34:	b103      	cbz	r3, 8009c38 <__cxa_guard_acquire+0xc>
 8009c36:	deff      	udf	#255	; 0xff
 8009c38:	2301      	movs	r3, #1
 8009c3a:	7043      	strb	r3, [r0, #1]
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	4770      	bx	lr
 8009c40:	2000      	movs	r0, #0
 8009c42:	4770      	bx	lr

08009c44 <__cxa_guard_release>:
 8009c44:	2301      	movs	r3, #1
 8009c46:	6003      	str	r3, [r0, #0]
 8009c48:	4770      	bx	lr

08009c4a <_Znwj>:
 8009c4a:	2801      	cmp	r0, #1
 8009c4c:	bf38      	it	cc
 8009c4e:	2001      	movcc	r0, #1
 8009c50:	b510      	push	{r4, lr}
 8009c52:	4604      	mov	r4, r0
 8009c54:	4620      	mov	r0, r4
 8009c56:	f000 f89b 	bl	8009d90 <malloc>
 8009c5a:	b930      	cbnz	r0, 8009c6a <_Znwj+0x20>
 8009c5c:	f000 f82e 	bl	8009cbc <_ZSt15get_new_handlerv>
 8009c60:	b908      	cbnz	r0, 8009c66 <_Znwj+0x1c>
 8009c62:	f000 f833 	bl	8009ccc <abort>
 8009c66:	4780      	blx	r0
 8009c68:	e7f4      	b.n	8009c54 <_Znwj+0xa>
 8009c6a:	bd10      	pop	{r4, pc}

08009c6c <__cxa_pure_virtual>:
 8009c6c:	b508      	push	{r3, lr}
 8009c6e:	f000 f81f 	bl	8009cb0 <_ZSt9terminatev>

08009c72 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 8009c72:	684b      	ldr	r3, [r1, #4]
 8009c74:	6043      	str	r3, [r0, #4]
 8009c76:	684b      	ldr	r3, [r1, #4]
 8009c78:	6001      	str	r1, [r0, #0]
 8009c7a:	6018      	str	r0, [r3, #0]
 8009c7c:	6048      	str	r0, [r1, #4]
 8009c7e:	4770      	bx	lr

08009c80 <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 8009c80:	e9d0 3200 	ldrd	r3, r2, [r0]
 8009c84:	6013      	str	r3, [r2, #0]
 8009c86:	605a      	str	r2, [r3, #4]
 8009c88:	4770      	bx	lr

08009c8a <_ZSt17__throw_bad_allocv>:
 8009c8a:	b508      	push	{r3, lr}
 8009c8c:	f000 f81e 	bl	8009ccc <abort>

08009c90 <_ZSt20__throw_length_errorPKc>:
 8009c90:	b508      	push	{r3, lr}
 8009c92:	f000 f81b 	bl	8009ccc <abort>

08009c96 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009c96:	b508      	push	{r3, lr}
 8009c98:	4780      	blx	r0
 8009c9a:	f000 f817 	bl	8009ccc <abort>
	...

08009ca0 <_ZSt13get_terminatev>:
 8009ca0:	4b02      	ldr	r3, [pc, #8]	; (8009cac <_ZSt13get_terminatev+0xc>)
 8009ca2:	6818      	ldr	r0, [r3, #0]
 8009ca4:	f3bf 8f5b 	dmb	ish
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	2000003c 	.word	0x2000003c

08009cb0 <_ZSt9terminatev>:
 8009cb0:	b508      	push	{r3, lr}
 8009cb2:	f7ff fff5 	bl	8009ca0 <_ZSt13get_terminatev>
 8009cb6:	f7ff ffee 	bl	8009c96 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08009cbc <_ZSt15get_new_handlerv>:
 8009cbc:	4b02      	ldr	r3, [pc, #8]	; (8009cc8 <_ZSt15get_new_handlerv+0xc>)
 8009cbe:	6818      	ldr	r0, [r3, #0]
 8009cc0:	f3bf 8f5b 	dmb	ish
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop
 8009cc8:	20001104 	.word	0x20001104

08009ccc <abort>:
 8009ccc:	b508      	push	{r3, lr}
 8009cce:	2006      	movs	r0, #6
 8009cd0:	f000 fc60 	bl	800a594 <raise>
 8009cd4:	2001      	movs	r0, #1
 8009cd6:	f001 f8c1 	bl	800ae5c <_exit>
	...

08009cdc <__assert_func>:
 8009cdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cde:	4614      	mov	r4, r2
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	4b09      	ldr	r3, [pc, #36]	; (8009d08 <__assert_func+0x2c>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4605      	mov	r5, r0
 8009ce8:	68d8      	ldr	r0, [r3, #12]
 8009cea:	b14c      	cbz	r4, 8009d00 <__assert_func+0x24>
 8009cec:	4b07      	ldr	r3, [pc, #28]	; (8009d0c <__assert_func+0x30>)
 8009cee:	9100      	str	r1, [sp, #0]
 8009cf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cf4:	4906      	ldr	r1, [pc, #24]	; (8009d10 <__assert_func+0x34>)
 8009cf6:	462b      	mov	r3, r5
 8009cf8:	f000 f814 	bl	8009d24 <fiprintf>
 8009cfc:	f7ff ffe6 	bl	8009ccc <abort>
 8009d00:	4b04      	ldr	r3, [pc, #16]	; (8009d14 <__assert_func+0x38>)
 8009d02:	461c      	mov	r4, r3
 8009d04:	e7f3      	b.n	8009cee <__assert_func+0x12>
 8009d06:	bf00      	nop
 8009d08:	20000040 	.word	0x20000040
 8009d0c:	0800cf14 	.word	0x0800cf14
 8009d10:	0800cf21 	.word	0x0800cf21
 8009d14:	0800cf4f 	.word	0x0800cf4f

08009d18 <atexit>:
 8009d18:	2300      	movs	r3, #0
 8009d1a:	4601      	mov	r1, r0
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f000 bd14 	b.w	800a74c <__register_exitproc>

08009d24 <fiprintf>:
 8009d24:	b40e      	push	{r1, r2, r3}
 8009d26:	b503      	push	{r0, r1, lr}
 8009d28:	4601      	mov	r1, r0
 8009d2a:	ab03      	add	r3, sp, #12
 8009d2c:	4805      	ldr	r0, [pc, #20]	; (8009d44 <fiprintf+0x20>)
 8009d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d32:	6800      	ldr	r0, [r0, #0]
 8009d34:	9301      	str	r3, [sp, #4]
 8009d36:	f000 f931 	bl	8009f9c <_vfiprintf_r>
 8009d3a:	b002      	add	sp, #8
 8009d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d40:	b003      	add	sp, #12
 8009d42:	4770      	bx	lr
 8009d44:	20000040 	.word	0x20000040

08009d48 <__libc_init_array>:
 8009d48:	b570      	push	{r4, r5, r6, lr}
 8009d4a:	4d0d      	ldr	r5, [pc, #52]	; (8009d80 <__libc_init_array+0x38>)
 8009d4c:	4c0d      	ldr	r4, [pc, #52]	; (8009d84 <__libc_init_array+0x3c>)
 8009d4e:	1b64      	subs	r4, r4, r5
 8009d50:	10a4      	asrs	r4, r4, #2
 8009d52:	2600      	movs	r6, #0
 8009d54:	42a6      	cmp	r6, r4
 8009d56:	d109      	bne.n	8009d6c <__libc_init_array+0x24>
 8009d58:	4d0b      	ldr	r5, [pc, #44]	; (8009d88 <__libc_init_array+0x40>)
 8009d5a:	4c0c      	ldr	r4, [pc, #48]	; (8009d8c <__libc_init_array+0x44>)
 8009d5c:	f001 f880 	bl	800ae60 <_init>
 8009d60:	1b64      	subs	r4, r4, r5
 8009d62:	10a4      	asrs	r4, r4, #2
 8009d64:	2600      	movs	r6, #0
 8009d66:	42a6      	cmp	r6, r4
 8009d68:	d105      	bne.n	8009d76 <__libc_init_array+0x2e>
 8009d6a:	bd70      	pop	{r4, r5, r6, pc}
 8009d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d70:	4798      	blx	r3
 8009d72:	3601      	adds	r6, #1
 8009d74:	e7ee      	b.n	8009d54 <__libc_init_array+0xc>
 8009d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d7a:	4798      	blx	r3
 8009d7c:	3601      	adds	r6, #1
 8009d7e:	e7f2      	b.n	8009d66 <__libc_init_array+0x1e>
 8009d80:	0800db74 	.word	0x0800db74
 8009d84:	0800db74 	.word	0x0800db74
 8009d88:	0800db74 	.word	0x0800db74
 8009d8c:	0800db90 	.word	0x0800db90

08009d90 <malloc>:
 8009d90:	4b02      	ldr	r3, [pc, #8]	; (8009d9c <malloc+0xc>)
 8009d92:	4601      	mov	r1, r0
 8009d94:	6818      	ldr	r0, [r3, #0]
 8009d96:	f000 b87d 	b.w	8009e94 <_malloc_r>
 8009d9a:	bf00      	nop
 8009d9c:	20000040 	.word	0x20000040

08009da0 <free>:
 8009da0:	4b02      	ldr	r3, [pc, #8]	; (8009dac <free+0xc>)
 8009da2:	4601      	mov	r1, r0
 8009da4:	6818      	ldr	r0, [r3, #0]
 8009da6:	f000 b825 	b.w	8009df4 <_free_r>
 8009daa:	bf00      	nop
 8009dac:	20000040 	.word	0x20000040

08009db0 <memmove>:
 8009db0:	4288      	cmp	r0, r1
 8009db2:	b510      	push	{r4, lr}
 8009db4:	eb01 0402 	add.w	r4, r1, r2
 8009db8:	d902      	bls.n	8009dc0 <memmove+0x10>
 8009dba:	4284      	cmp	r4, r0
 8009dbc:	4623      	mov	r3, r4
 8009dbe:	d807      	bhi.n	8009dd0 <memmove+0x20>
 8009dc0:	1e43      	subs	r3, r0, #1
 8009dc2:	42a1      	cmp	r1, r4
 8009dc4:	d008      	beq.n	8009dd8 <memmove+0x28>
 8009dc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009dce:	e7f8      	b.n	8009dc2 <memmove+0x12>
 8009dd0:	4402      	add	r2, r0
 8009dd2:	4601      	mov	r1, r0
 8009dd4:	428a      	cmp	r2, r1
 8009dd6:	d100      	bne.n	8009dda <memmove+0x2a>
 8009dd8:	bd10      	pop	{r4, pc}
 8009dda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009dde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009de2:	e7f7      	b.n	8009dd4 <memmove+0x24>

08009de4 <memset>:
 8009de4:	4402      	add	r2, r0
 8009de6:	4603      	mov	r3, r0
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d100      	bne.n	8009dee <memset+0xa>
 8009dec:	4770      	bx	lr
 8009dee:	f803 1b01 	strb.w	r1, [r3], #1
 8009df2:	e7f9      	b.n	8009de8 <memset+0x4>

08009df4 <_free_r>:
 8009df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009df6:	2900      	cmp	r1, #0
 8009df8:	d048      	beq.n	8009e8c <_free_r+0x98>
 8009dfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dfe:	9001      	str	r0, [sp, #4]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f1a1 0404 	sub.w	r4, r1, #4
 8009e06:	bfb8      	it	lt
 8009e08:	18e4      	addlt	r4, r4, r3
 8009e0a:	f000 ff21 	bl	800ac50 <__malloc_lock>
 8009e0e:	4a20      	ldr	r2, [pc, #128]	; (8009e90 <_free_r+0x9c>)
 8009e10:	9801      	ldr	r0, [sp, #4]
 8009e12:	6813      	ldr	r3, [r2, #0]
 8009e14:	4615      	mov	r5, r2
 8009e16:	b933      	cbnz	r3, 8009e26 <_free_r+0x32>
 8009e18:	6063      	str	r3, [r4, #4]
 8009e1a:	6014      	str	r4, [r2, #0]
 8009e1c:	b003      	add	sp, #12
 8009e1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e22:	f000 bf1b 	b.w	800ac5c <__malloc_unlock>
 8009e26:	42a3      	cmp	r3, r4
 8009e28:	d90b      	bls.n	8009e42 <_free_r+0x4e>
 8009e2a:	6821      	ldr	r1, [r4, #0]
 8009e2c:	1862      	adds	r2, r4, r1
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	bf04      	itt	eq
 8009e32:	681a      	ldreq	r2, [r3, #0]
 8009e34:	685b      	ldreq	r3, [r3, #4]
 8009e36:	6063      	str	r3, [r4, #4]
 8009e38:	bf04      	itt	eq
 8009e3a:	1852      	addeq	r2, r2, r1
 8009e3c:	6022      	streq	r2, [r4, #0]
 8009e3e:	602c      	str	r4, [r5, #0]
 8009e40:	e7ec      	b.n	8009e1c <_free_r+0x28>
 8009e42:	461a      	mov	r2, r3
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	b10b      	cbz	r3, 8009e4c <_free_r+0x58>
 8009e48:	42a3      	cmp	r3, r4
 8009e4a:	d9fa      	bls.n	8009e42 <_free_r+0x4e>
 8009e4c:	6811      	ldr	r1, [r2, #0]
 8009e4e:	1855      	adds	r5, r2, r1
 8009e50:	42a5      	cmp	r5, r4
 8009e52:	d10b      	bne.n	8009e6c <_free_r+0x78>
 8009e54:	6824      	ldr	r4, [r4, #0]
 8009e56:	4421      	add	r1, r4
 8009e58:	1854      	adds	r4, r2, r1
 8009e5a:	42a3      	cmp	r3, r4
 8009e5c:	6011      	str	r1, [r2, #0]
 8009e5e:	d1dd      	bne.n	8009e1c <_free_r+0x28>
 8009e60:	681c      	ldr	r4, [r3, #0]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	6053      	str	r3, [r2, #4]
 8009e66:	4421      	add	r1, r4
 8009e68:	6011      	str	r1, [r2, #0]
 8009e6a:	e7d7      	b.n	8009e1c <_free_r+0x28>
 8009e6c:	d902      	bls.n	8009e74 <_free_r+0x80>
 8009e6e:	230c      	movs	r3, #12
 8009e70:	6003      	str	r3, [r0, #0]
 8009e72:	e7d3      	b.n	8009e1c <_free_r+0x28>
 8009e74:	6825      	ldr	r5, [r4, #0]
 8009e76:	1961      	adds	r1, r4, r5
 8009e78:	428b      	cmp	r3, r1
 8009e7a:	bf04      	itt	eq
 8009e7c:	6819      	ldreq	r1, [r3, #0]
 8009e7e:	685b      	ldreq	r3, [r3, #4]
 8009e80:	6063      	str	r3, [r4, #4]
 8009e82:	bf04      	itt	eq
 8009e84:	1949      	addeq	r1, r1, r5
 8009e86:	6021      	streq	r1, [r4, #0]
 8009e88:	6054      	str	r4, [r2, #4]
 8009e8a:	e7c7      	b.n	8009e1c <_free_r+0x28>
 8009e8c:	b003      	add	sp, #12
 8009e8e:	bd30      	pop	{r4, r5, pc}
 8009e90:	20001108 	.word	0x20001108

08009e94 <_malloc_r>:
 8009e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e96:	1ccd      	adds	r5, r1, #3
 8009e98:	f025 0503 	bic.w	r5, r5, #3
 8009e9c:	3508      	adds	r5, #8
 8009e9e:	2d0c      	cmp	r5, #12
 8009ea0:	bf38      	it	cc
 8009ea2:	250c      	movcc	r5, #12
 8009ea4:	2d00      	cmp	r5, #0
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	db01      	blt.n	8009eae <_malloc_r+0x1a>
 8009eaa:	42a9      	cmp	r1, r5
 8009eac:	d903      	bls.n	8009eb6 <_malloc_r+0x22>
 8009eae:	230c      	movs	r3, #12
 8009eb0:	6033      	str	r3, [r6, #0]
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eb6:	f000 fecb 	bl	800ac50 <__malloc_lock>
 8009eba:	4921      	ldr	r1, [pc, #132]	; (8009f40 <_malloc_r+0xac>)
 8009ebc:	680a      	ldr	r2, [r1, #0]
 8009ebe:	4614      	mov	r4, r2
 8009ec0:	b99c      	cbnz	r4, 8009eea <_malloc_r+0x56>
 8009ec2:	4f20      	ldr	r7, [pc, #128]	; (8009f44 <_malloc_r+0xb0>)
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	b923      	cbnz	r3, 8009ed2 <_malloc_r+0x3e>
 8009ec8:	4621      	mov	r1, r4
 8009eca:	4630      	mov	r0, r6
 8009ecc:	f000 fb2a 	bl	800a524 <_sbrk_r>
 8009ed0:	6038      	str	r0, [r7, #0]
 8009ed2:	4629      	mov	r1, r5
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	f000 fb25 	bl	800a524 <_sbrk_r>
 8009eda:	1c43      	adds	r3, r0, #1
 8009edc:	d123      	bne.n	8009f26 <_malloc_r+0x92>
 8009ede:	230c      	movs	r3, #12
 8009ee0:	6033      	str	r3, [r6, #0]
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	f000 feba 	bl	800ac5c <__malloc_unlock>
 8009ee8:	e7e3      	b.n	8009eb2 <_malloc_r+0x1e>
 8009eea:	6823      	ldr	r3, [r4, #0]
 8009eec:	1b5b      	subs	r3, r3, r5
 8009eee:	d417      	bmi.n	8009f20 <_malloc_r+0x8c>
 8009ef0:	2b0b      	cmp	r3, #11
 8009ef2:	d903      	bls.n	8009efc <_malloc_r+0x68>
 8009ef4:	6023      	str	r3, [r4, #0]
 8009ef6:	441c      	add	r4, r3
 8009ef8:	6025      	str	r5, [r4, #0]
 8009efa:	e004      	b.n	8009f06 <_malloc_r+0x72>
 8009efc:	6863      	ldr	r3, [r4, #4]
 8009efe:	42a2      	cmp	r2, r4
 8009f00:	bf0c      	ite	eq
 8009f02:	600b      	streq	r3, [r1, #0]
 8009f04:	6053      	strne	r3, [r2, #4]
 8009f06:	4630      	mov	r0, r6
 8009f08:	f000 fea8 	bl	800ac5c <__malloc_unlock>
 8009f0c:	f104 000b 	add.w	r0, r4, #11
 8009f10:	1d23      	adds	r3, r4, #4
 8009f12:	f020 0007 	bic.w	r0, r0, #7
 8009f16:	1ac2      	subs	r2, r0, r3
 8009f18:	d0cc      	beq.n	8009eb4 <_malloc_r+0x20>
 8009f1a:	1a1b      	subs	r3, r3, r0
 8009f1c:	50a3      	str	r3, [r4, r2]
 8009f1e:	e7c9      	b.n	8009eb4 <_malloc_r+0x20>
 8009f20:	4622      	mov	r2, r4
 8009f22:	6864      	ldr	r4, [r4, #4]
 8009f24:	e7cc      	b.n	8009ec0 <_malloc_r+0x2c>
 8009f26:	1cc4      	adds	r4, r0, #3
 8009f28:	f024 0403 	bic.w	r4, r4, #3
 8009f2c:	42a0      	cmp	r0, r4
 8009f2e:	d0e3      	beq.n	8009ef8 <_malloc_r+0x64>
 8009f30:	1a21      	subs	r1, r4, r0
 8009f32:	4630      	mov	r0, r6
 8009f34:	f000 faf6 	bl	800a524 <_sbrk_r>
 8009f38:	3001      	adds	r0, #1
 8009f3a:	d1dd      	bne.n	8009ef8 <_malloc_r+0x64>
 8009f3c:	e7cf      	b.n	8009ede <_malloc_r+0x4a>
 8009f3e:	bf00      	nop
 8009f40:	20001108 	.word	0x20001108
 8009f44:	2000110c 	.word	0x2000110c

08009f48 <__sfputc_r>:
 8009f48:	6893      	ldr	r3, [r2, #8]
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	b410      	push	{r4}
 8009f50:	6093      	str	r3, [r2, #8]
 8009f52:	da08      	bge.n	8009f66 <__sfputc_r+0x1e>
 8009f54:	6994      	ldr	r4, [r2, #24]
 8009f56:	42a3      	cmp	r3, r4
 8009f58:	db01      	blt.n	8009f5e <__sfputc_r+0x16>
 8009f5a:	290a      	cmp	r1, #10
 8009f5c:	d103      	bne.n	8009f66 <__sfputc_r+0x1e>
 8009f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f62:	f000 bb33 	b.w	800a5cc <__swbuf_r>
 8009f66:	6813      	ldr	r3, [r2, #0]
 8009f68:	1c58      	adds	r0, r3, #1
 8009f6a:	6010      	str	r0, [r2, #0]
 8009f6c:	7019      	strb	r1, [r3, #0]
 8009f6e:	4608      	mov	r0, r1
 8009f70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f74:	4770      	bx	lr

08009f76 <__sfputs_r>:
 8009f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f78:	4606      	mov	r6, r0
 8009f7a:	460f      	mov	r7, r1
 8009f7c:	4614      	mov	r4, r2
 8009f7e:	18d5      	adds	r5, r2, r3
 8009f80:	42ac      	cmp	r4, r5
 8009f82:	d101      	bne.n	8009f88 <__sfputs_r+0x12>
 8009f84:	2000      	movs	r0, #0
 8009f86:	e007      	b.n	8009f98 <__sfputs_r+0x22>
 8009f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f8c:	463a      	mov	r2, r7
 8009f8e:	4630      	mov	r0, r6
 8009f90:	f7ff ffda 	bl	8009f48 <__sfputc_r>
 8009f94:	1c43      	adds	r3, r0, #1
 8009f96:	d1f3      	bne.n	8009f80 <__sfputs_r+0xa>
 8009f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f9c <_vfiprintf_r>:
 8009f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa0:	460d      	mov	r5, r1
 8009fa2:	b09d      	sub	sp, #116	; 0x74
 8009fa4:	4614      	mov	r4, r2
 8009fa6:	4698      	mov	r8, r3
 8009fa8:	4606      	mov	r6, r0
 8009faa:	b118      	cbz	r0, 8009fb4 <_vfiprintf_r+0x18>
 8009fac:	6983      	ldr	r3, [r0, #24]
 8009fae:	b90b      	cbnz	r3, 8009fb4 <_vfiprintf_r+0x18>
 8009fb0:	f000 fd48 	bl	800aa44 <__sinit>
 8009fb4:	4b89      	ldr	r3, [pc, #548]	; (800a1dc <_vfiprintf_r+0x240>)
 8009fb6:	429d      	cmp	r5, r3
 8009fb8:	d11b      	bne.n	8009ff2 <_vfiprintf_r+0x56>
 8009fba:	6875      	ldr	r5, [r6, #4]
 8009fbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fbe:	07d9      	lsls	r1, r3, #31
 8009fc0:	d405      	bmi.n	8009fce <_vfiprintf_r+0x32>
 8009fc2:	89ab      	ldrh	r3, [r5, #12]
 8009fc4:	059a      	lsls	r2, r3, #22
 8009fc6:	d402      	bmi.n	8009fce <_vfiprintf_r+0x32>
 8009fc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fca:	f000 fdd9 	bl	800ab80 <__retarget_lock_acquire_recursive>
 8009fce:	89ab      	ldrh	r3, [r5, #12]
 8009fd0:	071b      	lsls	r3, r3, #28
 8009fd2:	d501      	bpl.n	8009fd8 <_vfiprintf_r+0x3c>
 8009fd4:	692b      	ldr	r3, [r5, #16]
 8009fd6:	b9eb      	cbnz	r3, 800a014 <_vfiprintf_r+0x78>
 8009fd8:	4629      	mov	r1, r5
 8009fda:	4630      	mov	r0, r6
 8009fdc:	f000 fb48 	bl	800a670 <__swsetup_r>
 8009fe0:	b1c0      	cbz	r0, 800a014 <_vfiprintf_r+0x78>
 8009fe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fe4:	07dc      	lsls	r4, r3, #31
 8009fe6:	d50e      	bpl.n	800a006 <_vfiprintf_r+0x6a>
 8009fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fec:	b01d      	add	sp, #116	; 0x74
 8009fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff2:	4b7b      	ldr	r3, [pc, #492]	; (800a1e0 <_vfiprintf_r+0x244>)
 8009ff4:	429d      	cmp	r5, r3
 8009ff6:	d101      	bne.n	8009ffc <_vfiprintf_r+0x60>
 8009ff8:	68b5      	ldr	r5, [r6, #8]
 8009ffa:	e7df      	b.n	8009fbc <_vfiprintf_r+0x20>
 8009ffc:	4b79      	ldr	r3, [pc, #484]	; (800a1e4 <_vfiprintf_r+0x248>)
 8009ffe:	429d      	cmp	r5, r3
 800a000:	bf08      	it	eq
 800a002:	68f5      	ldreq	r5, [r6, #12]
 800a004:	e7da      	b.n	8009fbc <_vfiprintf_r+0x20>
 800a006:	89ab      	ldrh	r3, [r5, #12]
 800a008:	0598      	lsls	r0, r3, #22
 800a00a:	d4ed      	bmi.n	8009fe8 <_vfiprintf_r+0x4c>
 800a00c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a00e:	f000 fdb9 	bl	800ab84 <__retarget_lock_release_recursive>
 800a012:	e7e9      	b.n	8009fe8 <_vfiprintf_r+0x4c>
 800a014:	2300      	movs	r3, #0
 800a016:	9309      	str	r3, [sp, #36]	; 0x24
 800a018:	2320      	movs	r3, #32
 800a01a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a01e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a022:	2330      	movs	r3, #48	; 0x30
 800a024:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a1e8 <_vfiprintf_r+0x24c>
 800a028:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a02c:	f04f 0901 	mov.w	r9, #1
 800a030:	4623      	mov	r3, r4
 800a032:	469a      	mov	sl, r3
 800a034:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a038:	b10a      	cbz	r2, 800a03e <_vfiprintf_r+0xa2>
 800a03a:	2a25      	cmp	r2, #37	; 0x25
 800a03c:	d1f9      	bne.n	800a032 <_vfiprintf_r+0x96>
 800a03e:	ebba 0b04 	subs.w	fp, sl, r4
 800a042:	d00b      	beq.n	800a05c <_vfiprintf_r+0xc0>
 800a044:	465b      	mov	r3, fp
 800a046:	4622      	mov	r2, r4
 800a048:	4629      	mov	r1, r5
 800a04a:	4630      	mov	r0, r6
 800a04c:	f7ff ff93 	bl	8009f76 <__sfputs_r>
 800a050:	3001      	adds	r0, #1
 800a052:	f000 80aa 	beq.w	800a1aa <_vfiprintf_r+0x20e>
 800a056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a058:	445a      	add	r2, fp
 800a05a:	9209      	str	r2, [sp, #36]	; 0x24
 800a05c:	f89a 3000 	ldrb.w	r3, [sl]
 800a060:	2b00      	cmp	r3, #0
 800a062:	f000 80a2 	beq.w	800a1aa <_vfiprintf_r+0x20e>
 800a066:	2300      	movs	r3, #0
 800a068:	f04f 32ff 	mov.w	r2, #4294967295
 800a06c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a070:	f10a 0a01 	add.w	sl, sl, #1
 800a074:	9304      	str	r3, [sp, #16]
 800a076:	9307      	str	r3, [sp, #28]
 800a078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a07c:	931a      	str	r3, [sp, #104]	; 0x68
 800a07e:	4654      	mov	r4, sl
 800a080:	2205      	movs	r2, #5
 800a082:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a086:	4858      	ldr	r0, [pc, #352]	; (800a1e8 <_vfiprintf_r+0x24c>)
 800a088:	f7f6 f8c2 	bl	8000210 <memchr>
 800a08c:	9a04      	ldr	r2, [sp, #16]
 800a08e:	b9d8      	cbnz	r0, 800a0c8 <_vfiprintf_r+0x12c>
 800a090:	06d1      	lsls	r1, r2, #27
 800a092:	bf44      	itt	mi
 800a094:	2320      	movmi	r3, #32
 800a096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a09a:	0713      	lsls	r3, r2, #28
 800a09c:	bf44      	itt	mi
 800a09e:	232b      	movmi	r3, #43	; 0x2b
 800a0a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a0a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a0aa:	d015      	beq.n	800a0d8 <_vfiprintf_r+0x13c>
 800a0ac:	9a07      	ldr	r2, [sp, #28]
 800a0ae:	4654      	mov	r4, sl
 800a0b0:	2000      	movs	r0, #0
 800a0b2:	f04f 0c0a 	mov.w	ip, #10
 800a0b6:	4621      	mov	r1, r4
 800a0b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0bc:	3b30      	subs	r3, #48	; 0x30
 800a0be:	2b09      	cmp	r3, #9
 800a0c0:	d94e      	bls.n	800a160 <_vfiprintf_r+0x1c4>
 800a0c2:	b1b0      	cbz	r0, 800a0f2 <_vfiprintf_r+0x156>
 800a0c4:	9207      	str	r2, [sp, #28]
 800a0c6:	e014      	b.n	800a0f2 <_vfiprintf_r+0x156>
 800a0c8:	eba0 0308 	sub.w	r3, r0, r8
 800a0cc:	fa09 f303 	lsl.w	r3, r9, r3
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	9304      	str	r3, [sp, #16]
 800a0d4:	46a2      	mov	sl, r4
 800a0d6:	e7d2      	b.n	800a07e <_vfiprintf_r+0xe2>
 800a0d8:	9b03      	ldr	r3, [sp, #12]
 800a0da:	1d19      	adds	r1, r3, #4
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	9103      	str	r1, [sp, #12]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	bfbb      	ittet	lt
 800a0e4:	425b      	neglt	r3, r3
 800a0e6:	f042 0202 	orrlt.w	r2, r2, #2
 800a0ea:	9307      	strge	r3, [sp, #28]
 800a0ec:	9307      	strlt	r3, [sp, #28]
 800a0ee:	bfb8      	it	lt
 800a0f0:	9204      	strlt	r2, [sp, #16]
 800a0f2:	7823      	ldrb	r3, [r4, #0]
 800a0f4:	2b2e      	cmp	r3, #46	; 0x2e
 800a0f6:	d10c      	bne.n	800a112 <_vfiprintf_r+0x176>
 800a0f8:	7863      	ldrb	r3, [r4, #1]
 800a0fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a0fc:	d135      	bne.n	800a16a <_vfiprintf_r+0x1ce>
 800a0fe:	9b03      	ldr	r3, [sp, #12]
 800a100:	1d1a      	adds	r2, r3, #4
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	9203      	str	r2, [sp, #12]
 800a106:	2b00      	cmp	r3, #0
 800a108:	bfb8      	it	lt
 800a10a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a10e:	3402      	adds	r4, #2
 800a110:	9305      	str	r3, [sp, #20]
 800a112:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a1f8 <_vfiprintf_r+0x25c>
 800a116:	7821      	ldrb	r1, [r4, #0]
 800a118:	2203      	movs	r2, #3
 800a11a:	4650      	mov	r0, sl
 800a11c:	f7f6 f878 	bl	8000210 <memchr>
 800a120:	b140      	cbz	r0, 800a134 <_vfiprintf_r+0x198>
 800a122:	2340      	movs	r3, #64	; 0x40
 800a124:	eba0 000a 	sub.w	r0, r0, sl
 800a128:	fa03 f000 	lsl.w	r0, r3, r0
 800a12c:	9b04      	ldr	r3, [sp, #16]
 800a12e:	4303      	orrs	r3, r0
 800a130:	3401      	adds	r4, #1
 800a132:	9304      	str	r3, [sp, #16]
 800a134:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a138:	482c      	ldr	r0, [pc, #176]	; (800a1ec <_vfiprintf_r+0x250>)
 800a13a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a13e:	2206      	movs	r2, #6
 800a140:	f7f6 f866 	bl	8000210 <memchr>
 800a144:	2800      	cmp	r0, #0
 800a146:	d03f      	beq.n	800a1c8 <_vfiprintf_r+0x22c>
 800a148:	4b29      	ldr	r3, [pc, #164]	; (800a1f0 <_vfiprintf_r+0x254>)
 800a14a:	bb1b      	cbnz	r3, 800a194 <_vfiprintf_r+0x1f8>
 800a14c:	9b03      	ldr	r3, [sp, #12]
 800a14e:	3307      	adds	r3, #7
 800a150:	f023 0307 	bic.w	r3, r3, #7
 800a154:	3308      	adds	r3, #8
 800a156:	9303      	str	r3, [sp, #12]
 800a158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a15a:	443b      	add	r3, r7
 800a15c:	9309      	str	r3, [sp, #36]	; 0x24
 800a15e:	e767      	b.n	800a030 <_vfiprintf_r+0x94>
 800a160:	fb0c 3202 	mla	r2, ip, r2, r3
 800a164:	460c      	mov	r4, r1
 800a166:	2001      	movs	r0, #1
 800a168:	e7a5      	b.n	800a0b6 <_vfiprintf_r+0x11a>
 800a16a:	2300      	movs	r3, #0
 800a16c:	3401      	adds	r4, #1
 800a16e:	9305      	str	r3, [sp, #20]
 800a170:	4619      	mov	r1, r3
 800a172:	f04f 0c0a 	mov.w	ip, #10
 800a176:	4620      	mov	r0, r4
 800a178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a17c:	3a30      	subs	r2, #48	; 0x30
 800a17e:	2a09      	cmp	r2, #9
 800a180:	d903      	bls.n	800a18a <_vfiprintf_r+0x1ee>
 800a182:	2b00      	cmp	r3, #0
 800a184:	d0c5      	beq.n	800a112 <_vfiprintf_r+0x176>
 800a186:	9105      	str	r1, [sp, #20]
 800a188:	e7c3      	b.n	800a112 <_vfiprintf_r+0x176>
 800a18a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a18e:	4604      	mov	r4, r0
 800a190:	2301      	movs	r3, #1
 800a192:	e7f0      	b.n	800a176 <_vfiprintf_r+0x1da>
 800a194:	ab03      	add	r3, sp, #12
 800a196:	9300      	str	r3, [sp, #0]
 800a198:	462a      	mov	r2, r5
 800a19a:	4b16      	ldr	r3, [pc, #88]	; (800a1f4 <_vfiprintf_r+0x258>)
 800a19c:	a904      	add	r1, sp, #16
 800a19e:	4630      	mov	r0, r6
 800a1a0:	f3af 8000 	nop.w
 800a1a4:	4607      	mov	r7, r0
 800a1a6:	1c78      	adds	r0, r7, #1
 800a1a8:	d1d6      	bne.n	800a158 <_vfiprintf_r+0x1bc>
 800a1aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1ac:	07d9      	lsls	r1, r3, #31
 800a1ae:	d405      	bmi.n	800a1bc <_vfiprintf_r+0x220>
 800a1b0:	89ab      	ldrh	r3, [r5, #12]
 800a1b2:	059a      	lsls	r2, r3, #22
 800a1b4:	d402      	bmi.n	800a1bc <_vfiprintf_r+0x220>
 800a1b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1b8:	f000 fce4 	bl	800ab84 <__retarget_lock_release_recursive>
 800a1bc:	89ab      	ldrh	r3, [r5, #12]
 800a1be:	065b      	lsls	r3, r3, #25
 800a1c0:	f53f af12 	bmi.w	8009fe8 <_vfiprintf_r+0x4c>
 800a1c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1c6:	e711      	b.n	8009fec <_vfiprintf_r+0x50>
 800a1c8:	ab03      	add	r3, sp, #12
 800a1ca:	9300      	str	r3, [sp, #0]
 800a1cc:	462a      	mov	r2, r5
 800a1ce:	4b09      	ldr	r3, [pc, #36]	; (800a1f4 <_vfiprintf_r+0x258>)
 800a1d0:	a904      	add	r1, sp, #16
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	f000 f880 	bl	800a2d8 <_printf_i>
 800a1d8:	e7e4      	b.n	800a1a4 <_vfiprintf_r+0x208>
 800a1da:	bf00      	nop
 800a1dc:	0800cfac 	.word	0x0800cfac
 800a1e0:	0800cfcc 	.word	0x0800cfcc
 800a1e4:	0800cf8c 	.word	0x0800cf8c
 800a1e8:	0800cf54 	.word	0x0800cf54
 800a1ec:	0800cf5e 	.word	0x0800cf5e
 800a1f0:	00000000 	.word	0x00000000
 800a1f4:	08009f77 	.word	0x08009f77
 800a1f8:	0800cf5a 	.word	0x0800cf5a

0800a1fc <_printf_common>:
 800a1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a200:	4616      	mov	r6, r2
 800a202:	4699      	mov	r9, r3
 800a204:	688a      	ldr	r2, [r1, #8]
 800a206:	690b      	ldr	r3, [r1, #16]
 800a208:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a20c:	4293      	cmp	r3, r2
 800a20e:	bfb8      	it	lt
 800a210:	4613      	movlt	r3, r2
 800a212:	6033      	str	r3, [r6, #0]
 800a214:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a218:	4607      	mov	r7, r0
 800a21a:	460c      	mov	r4, r1
 800a21c:	b10a      	cbz	r2, 800a222 <_printf_common+0x26>
 800a21e:	3301      	adds	r3, #1
 800a220:	6033      	str	r3, [r6, #0]
 800a222:	6823      	ldr	r3, [r4, #0]
 800a224:	0699      	lsls	r1, r3, #26
 800a226:	bf42      	ittt	mi
 800a228:	6833      	ldrmi	r3, [r6, #0]
 800a22a:	3302      	addmi	r3, #2
 800a22c:	6033      	strmi	r3, [r6, #0]
 800a22e:	6825      	ldr	r5, [r4, #0]
 800a230:	f015 0506 	ands.w	r5, r5, #6
 800a234:	d106      	bne.n	800a244 <_printf_common+0x48>
 800a236:	f104 0a19 	add.w	sl, r4, #25
 800a23a:	68e3      	ldr	r3, [r4, #12]
 800a23c:	6832      	ldr	r2, [r6, #0]
 800a23e:	1a9b      	subs	r3, r3, r2
 800a240:	42ab      	cmp	r3, r5
 800a242:	dc26      	bgt.n	800a292 <_printf_common+0x96>
 800a244:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a248:	1e13      	subs	r3, r2, #0
 800a24a:	6822      	ldr	r2, [r4, #0]
 800a24c:	bf18      	it	ne
 800a24e:	2301      	movne	r3, #1
 800a250:	0692      	lsls	r2, r2, #26
 800a252:	d42b      	bmi.n	800a2ac <_printf_common+0xb0>
 800a254:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a258:	4649      	mov	r1, r9
 800a25a:	4638      	mov	r0, r7
 800a25c:	47c0      	blx	r8
 800a25e:	3001      	adds	r0, #1
 800a260:	d01e      	beq.n	800a2a0 <_printf_common+0xa4>
 800a262:	6823      	ldr	r3, [r4, #0]
 800a264:	68e5      	ldr	r5, [r4, #12]
 800a266:	6832      	ldr	r2, [r6, #0]
 800a268:	f003 0306 	and.w	r3, r3, #6
 800a26c:	2b04      	cmp	r3, #4
 800a26e:	bf08      	it	eq
 800a270:	1aad      	subeq	r5, r5, r2
 800a272:	68a3      	ldr	r3, [r4, #8]
 800a274:	6922      	ldr	r2, [r4, #16]
 800a276:	bf0c      	ite	eq
 800a278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a27c:	2500      	movne	r5, #0
 800a27e:	4293      	cmp	r3, r2
 800a280:	bfc4      	itt	gt
 800a282:	1a9b      	subgt	r3, r3, r2
 800a284:	18ed      	addgt	r5, r5, r3
 800a286:	2600      	movs	r6, #0
 800a288:	341a      	adds	r4, #26
 800a28a:	42b5      	cmp	r5, r6
 800a28c:	d11a      	bne.n	800a2c4 <_printf_common+0xc8>
 800a28e:	2000      	movs	r0, #0
 800a290:	e008      	b.n	800a2a4 <_printf_common+0xa8>
 800a292:	2301      	movs	r3, #1
 800a294:	4652      	mov	r2, sl
 800a296:	4649      	mov	r1, r9
 800a298:	4638      	mov	r0, r7
 800a29a:	47c0      	blx	r8
 800a29c:	3001      	adds	r0, #1
 800a29e:	d103      	bne.n	800a2a8 <_printf_common+0xac>
 800a2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2a8:	3501      	adds	r5, #1
 800a2aa:	e7c6      	b.n	800a23a <_printf_common+0x3e>
 800a2ac:	18e1      	adds	r1, r4, r3
 800a2ae:	1c5a      	adds	r2, r3, #1
 800a2b0:	2030      	movs	r0, #48	; 0x30
 800a2b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2b6:	4422      	add	r2, r4
 800a2b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2c0:	3302      	adds	r3, #2
 800a2c2:	e7c7      	b.n	800a254 <_printf_common+0x58>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	4622      	mov	r2, r4
 800a2c8:	4649      	mov	r1, r9
 800a2ca:	4638      	mov	r0, r7
 800a2cc:	47c0      	blx	r8
 800a2ce:	3001      	adds	r0, #1
 800a2d0:	d0e6      	beq.n	800a2a0 <_printf_common+0xa4>
 800a2d2:	3601      	adds	r6, #1
 800a2d4:	e7d9      	b.n	800a28a <_printf_common+0x8e>
	...

0800a2d8 <_printf_i>:
 800a2d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2dc:	460c      	mov	r4, r1
 800a2de:	4691      	mov	r9, r2
 800a2e0:	7e27      	ldrb	r7, [r4, #24]
 800a2e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a2e4:	2f78      	cmp	r7, #120	; 0x78
 800a2e6:	4680      	mov	r8, r0
 800a2e8:	469a      	mov	sl, r3
 800a2ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2ee:	d807      	bhi.n	800a300 <_printf_i+0x28>
 800a2f0:	2f62      	cmp	r7, #98	; 0x62
 800a2f2:	d80a      	bhi.n	800a30a <_printf_i+0x32>
 800a2f4:	2f00      	cmp	r7, #0
 800a2f6:	f000 80d8 	beq.w	800a4aa <_printf_i+0x1d2>
 800a2fa:	2f58      	cmp	r7, #88	; 0x58
 800a2fc:	f000 80a3 	beq.w	800a446 <_printf_i+0x16e>
 800a300:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a304:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a308:	e03a      	b.n	800a380 <_printf_i+0xa8>
 800a30a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a30e:	2b15      	cmp	r3, #21
 800a310:	d8f6      	bhi.n	800a300 <_printf_i+0x28>
 800a312:	a001      	add	r0, pc, #4	; (adr r0, 800a318 <_printf_i+0x40>)
 800a314:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a318:	0800a371 	.word	0x0800a371
 800a31c:	0800a385 	.word	0x0800a385
 800a320:	0800a301 	.word	0x0800a301
 800a324:	0800a301 	.word	0x0800a301
 800a328:	0800a301 	.word	0x0800a301
 800a32c:	0800a301 	.word	0x0800a301
 800a330:	0800a385 	.word	0x0800a385
 800a334:	0800a301 	.word	0x0800a301
 800a338:	0800a301 	.word	0x0800a301
 800a33c:	0800a301 	.word	0x0800a301
 800a340:	0800a301 	.word	0x0800a301
 800a344:	0800a491 	.word	0x0800a491
 800a348:	0800a3b5 	.word	0x0800a3b5
 800a34c:	0800a473 	.word	0x0800a473
 800a350:	0800a301 	.word	0x0800a301
 800a354:	0800a301 	.word	0x0800a301
 800a358:	0800a4b3 	.word	0x0800a4b3
 800a35c:	0800a301 	.word	0x0800a301
 800a360:	0800a3b5 	.word	0x0800a3b5
 800a364:	0800a301 	.word	0x0800a301
 800a368:	0800a301 	.word	0x0800a301
 800a36c:	0800a47b 	.word	0x0800a47b
 800a370:	680b      	ldr	r3, [r1, #0]
 800a372:	1d1a      	adds	r2, r3, #4
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	600a      	str	r2, [r1, #0]
 800a378:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a37c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a380:	2301      	movs	r3, #1
 800a382:	e0a3      	b.n	800a4cc <_printf_i+0x1f4>
 800a384:	6825      	ldr	r5, [r4, #0]
 800a386:	6808      	ldr	r0, [r1, #0]
 800a388:	062e      	lsls	r6, r5, #24
 800a38a:	f100 0304 	add.w	r3, r0, #4
 800a38e:	d50a      	bpl.n	800a3a6 <_printf_i+0xce>
 800a390:	6805      	ldr	r5, [r0, #0]
 800a392:	600b      	str	r3, [r1, #0]
 800a394:	2d00      	cmp	r5, #0
 800a396:	da03      	bge.n	800a3a0 <_printf_i+0xc8>
 800a398:	232d      	movs	r3, #45	; 0x2d
 800a39a:	426d      	negs	r5, r5
 800a39c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3a0:	485e      	ldr	r0, [pc, #376]	; (800a51c <_printf_i+0x244>)
 800a3a2:	230a      	movs	r3, #10
 800a3a4:	e019      	b.n	800a3da <_printf_i+0x102>
 800a3a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a3aa:	6805      	ldr	r5, [r0, #0]
 800a3ac:	600b      	str	r3, [r1, #0]
 800a3ae:	bf18      	it	ne
 800a3b0:	b22d      	sxthne	r5, r5
 800a3b2:	e7ef      	b.n	800a394 <_printf_i+0xbc>
 800a3b4:	680b      	ldr	r3, [r1, #0]
 800a3b6:	6825      	ldr	r5, [r4, #0]
 800a3b8:	1d18      	adds	r0, r3, #4
 800a3ba:	6008      	str	r0, [r1, #0]
 800a3bc:	0628      	lsls	r0, r5, #24
 800a3be:	d501      	bpl.n	800a3c4 <_printf_i+0xec>
 800a3c0:	681d      	ldr	r5, [r3, #0]
 800a3c2:	e002      	b.n	800a3ca <_printf_i+0xf2>
 800a3c4:	0669      	lsls	r1, r5, #25
 800a3c6:	d5fb      	bpl.n	800a3c0 <_printf_i+0xe8>
 800a3c8:	881d      	ldrh	r5, [r3, #0]
 800a3ca:	4854      	ldr	r0, [pc, #336]	; (800a51c <_printf_i+0x244>)
 800a3cc:	2f6f      	cmp	r7, #111	; 0x6f
 800a3ce:	bf0c      	ite	eq
 800a3d0:	2308      	moveq	r3, #8
 800a3d2:	230a      	movne	r3, #10
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3da:	6866      	ldr	r6, [r4, #4]
 800a3dc:	60a6      	str	r6, [r4, #8]
 800a3de:	2e00      	cmp	r6, #0
 800a3e0:	bfa2      	ittt	ge
 800a3e2:	6821      	ldrge	r1, [r4, #0]
 800a3e4:	f021 0104 	bicge.w	r1, r1, #4
 800a3e8:	6021      	strge	r1, [r4, #0]
 800a3ea:	b90d      	cbnz	r5, 800a3f0 <_printf_i+0x118>
 800a3ec:	2e00      	cmp	r6, #0
 800a3ee:	d04d      	beq.n	800a48c <_printf_i+0x1b4>
 800a3f0:	4616      	mov	r6, r2
 800a3f2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a3f6:	fb03 5711 	mls	r7, r3, r1, r5
 800a3fa:	5dc7      	ldrb	r7, [r0, r7]
 800a3fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a400:	462f      	mov	r7, r5
 800a402:	42bb      	cmp	r3, r7
 800a404:	460d      	mov	r5, r1
 800a406:	d9f4      	bls.n	800a3f2 <_printf_i+0x11a>
 800a408:	2b08      	cmp	r3, #8
 800a40a:	d10b      	bne.n	800a424 <_printf_i+0x14c>
 800a40c:	6823      	ldr	r3, [r4, #0]
 800a40e:	07df      	lsls	r7, r3, #31
 800a410:	d508      	bpl.n	800a424 <_printf_i+0x14c>
 800a412:	6923      	ldr	r3, [r4, #16]
 800a414:	6861      	ldr	r1, [r4, #4]
 800a416:	4299      	cmp	r1, r3
 800a418:	bfde      	ittt	le
 800a41a:	2330      	movle	r3, #48	; 0x30
 800a41c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a420:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a424:	1b92      	subs	r2, r2, r6
 800a426:	6122      	str	r2, [r4, #16]
 800a428:	f8cd a000 	str.w	sl, [sp]
 800a42c:	464b      	mov	r3, r9
 800a42e:	aa03      	add	r2, sp, #12
 800a430:	4621      	mov	r1, r4
 800a432:	4640      	mov	r0, r8
 800a434:	f7ff fee2 	bl	800a1fc <_printf_common>
 800a438:	3001      	adds	r0, #1
 800a43a:	d14c      	bne.n	800a4d6 <_printf_i+0x1fe>
 800a43c:	f04f 30ff 	mov.w	r0, #4294967295
 800a440:	b004      	add	sp, #16
 800a442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a446:	4835      	ldr	r0, [pc, #212]	; (800a51c <_printf_i+0x244>)
 800a448:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a44c:	6823      	ldr	r3, [r4, #0]
 800a44e:	680e      	ldr	r6, [r1, #0]
 800a450:	061f      	lsls	r7, r3, #24
 800a452:	f856 5b04 	ldr.w	r5, [r6], #4
 800a456:	600e      	str	r6, [r1, #0]
 800a458:	d514      	bpl.n	800a484 <_printf_i+0x1ac>
 800a45a:	07d9      	lsls	r1, r3, #31
 800a45c:	bf44      	itt	mi
 800a45e:	f043 0320 	orrmi.w	r3, r3, #32
 800a462:	6023      	strmi	r3, [r4, #0]
 800a464:	b91d      	cbnz	r5, 800a46e <_printf_i+0x196>
 800a466:	6823      	ldr	r3, [r4, #0]
 800a468:	f023 0320 	bic.w	r3, r3, #32
 800a46c:	6023      	str	r3, [r4, #0]
 800a46e:	2310      	movs	r3, #16
 800a470:	e7b0      	b.n	800a3d4 <_printf_i+0xfc>
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	f043 0320 	orr.w	r3, r3, #32
 800a478:	6023      	str	r3, [r4, #0]
 800a47a:	2378      	movs	r3, #120	; 0x78
 800a47c:	4828      	ldr	r0, [pc, #160]	; (800a520 <_printf_i+0x248>)
 800a47e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a482:	e7e3      	b.n	800a44c <_printf_i+0x174>
 800a484:	065e      	lsls	r6, r3, #25
 800a486:	bf48      	it	mi
 800a488:	b2ad      	uxthmi	r5, r5
 800a48a:	e7e6      	b.n	800a45a <_printf_i+0x182>
 800a48c:	4616      	mov	r6, r2
 800a48e:	e7bb      	b.n	800a408 <_printf_i+0x130>
 800a490:	680b      	ldr	r3, [r1, #0]
 800a492:	6826      	ldr	r6, [r4, #0]
 800a494:	6960      	ldr	r0, [r4, #20]
 800a496:	1d1d      	adds	r5, r3, #4
 800a498:	600d      	str	r5, [r1, #0]
 800a49a:	0635      	lsls	r5, r6, #24
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	d501      	bpl.n	800a4a4 <_printf_i+0x1cc>
 800a4a0:	6018      	str	r0, [r3, #0]
 800a4a2:	e002      	b.n	800a4aa <_printf_i+0x1d2>
 800a4a4:	0671      	lsls	r1, r6, #25
 800a4a6:	d5fb      	bpl.n	800a4a0 <_printf_i+0x1c8>
 800a4a8:	8018      	strh	r0, [r3, #0]
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	6123      	str	r3, [r4, #16]
 800a4ae:	4616      	mov	r6, r2
 800a4b0:	e7ba      	b.n	800a428 <_printf_i+0x150>
 800a4b2:	680b      	ldr	r3, [r1, #0]
 800a4b4:	1d1a      	adds	r2, r3, #4
 800a4b6:	600a      	str	r2, [r1, #0]
 800a4b8:	681e      	ldr	r6, [r3, #0]
 800a4ba:	6862      	ldr	r2, [r4, #4]
 800a4bc:	2100      	movs	r1, #0
 800a4be:	4630      	mov	r0, r6
 800a4c0:	f7f5 fea6 	bl	8000210 <memchr>
 800a4c4:	b108      	cbz	r0, 800a4ca <_printf_i+0x1f2>
 800a4c6:	1b80      	subs	r0, r0, r6
 800a4c8:	6060      	str	r0, [r4, #4]
 800a4ca:	6863      	ldr	r3, [r4, #4]
 800a4cc:	6123      	str	r3, [r4, #16]
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4d4:	e7a8      	b.n	800a428 <_printf_i+0x150>
 800a4d6:	6923      	ldr	r3, [r4, #16]
 800a4d8:	4632      	mov	r2, r6
 800a4da:	4649      	mov	r1, r9
 800a4dc:	4640      	mov	r0, r8
 800a4de:	47d0      	blx	sl
 800a4e0:	3001      	adds	r0, #1
 800a4e2:	d0ab      	beq.n	800a43c <_printf_i+0x164>
 800a4e4:	6823      	ldr	r3, [r4, #0]
 800a4e6:	079b      	lsls	r3, r3, #30
 800a4e8:	d413      	bmi.n	800a512 <_printf_i+0x23a>
 800a4ea:	68e0      	ldr	r0, [r4, #12]
 800a4ec:	9b03      	ldr	r3, [sp, #12]
 800a4ee:	4298      	cmp	r0, r3
 800a4f0:	bfb8      	it	lt
 800a4f2:	4618      	movlt	r0, r3
 800a4f4:	e7a4      	b.n	800a440 <_printf_i+0x168>
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	4632      	mov	r2, r6
 800a4fa:	4649      	mov	r1, r9
 800a4fc:	4640      	mov	r0, r8
 800a4fe:	47d0      	blx	sl
 800a500:	3001      	adds	r0, #1
 800a502:	d09b      	beq.n	800a43c <_printf_i+0x164>
 800a504:	3501      	adds	r5, #1
 800a506:	68e3      	ldr	r3, [r4, #12]
 800a508:	9903      	ldr	r1, [sp, #12]
 800a50a:	1a5b      	subs	r3, r3, r1
 800a50c:	42ab      	cmp	r3, r5
 800a50e:	dcf2      	bgt.n	800a4f6 <_printf_i+0x21e>
 800a510:	e7eb      	b.n	800a4ea <_printf_i+0x212>
 800a512:	2500      	movs	r5, #0
 800a514:	f104 0619 	add.w	r6, r4, #25
 800a518:	e7f5      	b.n	800a506 <_printf_i+0x22e>
 800a51a:	bf00      	nop
 800a51c:	0800cf65 	.word	0x0800cf65
 800a520:	0800cf76 	.word	0x0800cf76

0800a524 <_sbrk_r>:
 800a524:	b538      	push	{r3, r4, r5, lr}
 800a526:	4d06      	ldr	r5, [pc, #24]	; (800a540 <_sbrk_r+0x1c>)
 800a528:	2300      	movs	r3, #0
 800a52a:	4604      	mov	r4, r0
 800a52c:	4608      	mov	r0, r1
 800a52e:	602b      	str	r3, [r5, #0]
 800a530:	f000 fc7e 	bl	800ae30 <_sbrk>
 800a534:	1c43      	adds	r3, r0, #1
 800a536:	d102      	bne.n	800a53e <_sbrk_r+0x1a>
 800a538:	682b      	ldr	r3, [r5, #0]
 800a53a:	b103      	cbz	r3, 800a53e <_sbrk_r+0x1a>
 800a53c:	6023      	str	r3, [r4, #0]
 800a53e:	bd38      	pop	{r3, r4, r5, pc}
 800a540:	20001530 	.word	0x20001530

0800a544 <_raise_r>:
 800a544:	291f      	cmp	r1, #31
 800a546:	b538      	push	{r3, r4, r5, lr}
 800a548:	4604      	mov	r4, r0
 800a54a:	460d      	mov	r5, r1
 800a54c:	d904      	bls.n	800a558 <_raise_r+0x14>
 800a54e:	2316      	movs	r3, #22
 800a550:	6003      	str	r3, [r0, #0]
 800a552:	f04f 30ff 	mov.w	r0, #4294967295
 800a556:	bd38      	pop	{r3, r4, r5, pc}
 800a558:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a55a:	b112      	cbz	r2, 800a562 <_raise_r+0x1e>
 800a55c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a560:	b94b      	cbnz	r3, 800a576 <_raise_r+0x32>
 800a562:	4620      	mov	r0, r4
 800a564:	f000 f830 	bl	800a5c8 <_getpid_r>
 800a568:	462a      	mov	r2, r5
 800a56a:	4601      	mov	r1, r0
 800a56c:	4620      	mov	r0, r4
 800a56e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a572:	f000 b817 	b.w	800a5a4 <_kill_r>
 800a576:	2b01      	cmp	r3, #1
 800a578:	d00a      	beq.n	800a590 <_raise_r+0x4c>
 800a57a:	1c59      	adds	r1, r3, #1
 800a57c:	d103      	bne.n	800a586 <_raise_r+0x42>
 800a57e:	2316      	movs	r3, #22
 800a580:	6003      	str	r3, [r0, #0]
 800a582:	2001      	movs	r0, #1
 800a584:	e7e7      	b.n	800a556 <_raise_r+0x12>
 800a586:	2400      	movs	r4, #0
 800a588:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a58c:	4628      	mov	r0, r5
 800a58e:	4798      	blx	r3
 800a590:	2000      	movs	r0, #0
 800a592:	e7e0      	b.n	800a556 <_raise_r+0x12>

0800a594 <raise>:
 800a594:	4b02      	ldr	r3, [pc, #8]	; (800a5a0 <raise+0xc>)
 800a596:	4601      	mov	r1, r0
 800a598:	6818      	ldr	r0, [r3, #0]
 800a59a:	f7ff bfd3 	b.w	800a544 <_raise_r>
 800a59e:	bf00      	nop
 800a5a0:	20000040 	.word	0x20000040

0800a5a4 <_kill_r>:
 800a5a4:	b538      	push	{r3, r4, r5, lr}
 800a5a6:	4d07      	ldr	r5, [pc, #28]	; (800a5c4 <_kill_r+0x20>)
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	4608      	mov	r0, r1
 800a5ae:	4611      	mov	r1, r2
 800a5b0:	602b      	str	r3, [r5, #0]
 800a5b2:	f000 fc25 	bl	800ae00 <_kill>
 800a5b6:	1c43      	adds	r3, r0, #1
 800a5b8:	d102      	bne.n	800a5c0 <_kill_r+0x1c>
 800a5ba:	682b      	ldr	r3, [r5, #0]
 800a5bc:	b103      	cbz	r3, 800a5c0 <_kill_r+0x1c>
 800a5be:	6023      	str	r3, [r4, #0]
 800a5c0:	bd38      	pop	{r3, r4, r5, pc}
 800a5c2:	bf00      	nop
 800a5c4:	20001530 	.word	0x20001530

0800a5c8 <_getpid_r>:
 800a5c8:	f000 bc0a 	b.w	800ade0 <_getpid>

0800a5cc <__swbuf_r>:
 800a5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ce:	460e      	mov	r6, r1
 800a5d0:	4614      	mov	r4, r2
 800a5d2:	4605      	mov	r5, r0
 800a5d4:	b118      	cbz	r0, 800a5de <__swbuf_r+0x12>
 800a5d6:	6983      	ldr	r3, [r0, #24]
 800a5d8:	b90b      	cbnz	r3, 800a5de <__swbuf_r+0x12>
 800a5da:	f000 fa33 	bl	800aa44 <__sinit>
 800a5de:	4b21      	ldr	r3, [pc, #132]	; (800a664 <__swbuf_r+0x98>)
 800a5e0:	429c      	cmp	r4, r3
 800a5e2:	d12b      	bne.n	800a63c <__swbuf_r+0x70>
 800a5e4:	686c      	ldr	r4, [r5, #4]
 800a5e6:	69a3      	ldr	r3, [r4, #24]
 800a5e8:	60a3      	str	r3, [r4, #8]
 800a5ea:	89a3      	ldrh	r3, [r4, #12]
 800a5ec:	071a      	lsls	r2, r3, #28
 800a5ee:	d52f      	bpl.n	800a650 <__swbuf_r+0x84>
 800a5f0:	6923      	ldr	r3, [r4, #16]
 800a5f2:	b36b      	cbz	r3, 800a650 <__swbuf_r+0x84>
 800a5f4:	6923      	ldr	r3, [r4, #16]
 800a5f6:	6820      	ldr	r0, [r4, #0]
 800a5f8:	1ac0      	subs	r0, r0, r3
 800a5fa:	6963      	ldr	r3, [r4, #20]
 800a5fc:	b2f6      	uxtb	r6, r6
 800a5fe:	4283      	cmp	r3, r0
 800a600:	4637      	mov	r7, r6
 800a602:	dc04      	bgt.n	800a60e <__swbuf_r+0x42>
 800a604:	4621      	mov	r1, r4
 800a606:	4628      	mov	r0, r5
 800a608:	f000 f988 	bl	800a91c <_fflush_r>
 800a60c:	bb30      	cbnz	r0, 800a65c <__swbuf_r+0x90>
 800a60e:	68a3      	ldr	r3, [r4, #8]
 800a610:	3b01      	subs	r3, #1
 800a612:	60a3      	str	r3, [r4, #8]
 800a614:	6823      	ldr	r3, [r4, #0]
 800a616:	1c5a      	adds	r2, r3, #1
 800a618:	6022      	str	r2, [r4, #0]
 800a61a:	701e      	strb	r6, [r3, #0]
 800a61c:	6963      	ldr	r3, [r4, #20]
 800a61e:	3001      	adds	r0, #1
 800a620:	4283      	cmp	r3, r0
 800a622:	d004      	beq.n	800a62e <__swbuf_r+0x62>
 800a624:	89a3      	ldrh	r3, [r4, #12]
 800a626:	07db      	lsls	r3, r3, #31
 800a628:	d506      	bpl.n	800a638 <__swbuf_r+0x6c>
 800a62a:	2e0a      	cmp	r6, #10
 800a62c:	d104      	bne.n	800a638 <__swbuf_r+0x6c>
 800a62e:	4621      	mov	r1, r4
 800a630:	4628      	mov	r0, r5
 800a632:	f000 f973 	bl	800a91c <_fflush_r>
 800a636:	b988      	cbnz	r0, 800a65c <__swbuf_r+0x90>
 800a638:	4638      	mov	r0, r7
 800a63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a63c:	4b0a      	ldr	r3, [pc, #40]	; (800a668 <__swbuf_r+0x9c>)
 800a63e:	429c      	cmp	r4, r3
 800a640:	d101      	bne.n	800a646 <__swbuf_r+0x7a>
 800a642:	68ac      	ldr	r4, [r5, #8]
 800a644:	e7cf      	b.n	800a5e6 <__swbuf_r+0x1a>
 800a646:	4b09      	ldr	r3, [pc, #36]	; (800a66c <__swbuf_r+0xa0>)
 800a648:	429c      	cmp	r4, r3
 800a64a:	bf08      	it	eq
 800a64c:	68ec      	ldreq	r4, [r5, #12]
 800a64e:	e7ca      	b.n	800a5e6 <__swbuf_r+0x1a>
 800a650:	4621      	mov	r1, r4
 800a652:	4628      	mov	r0, r5
 800a654:	f000 f80c 	bl	800a670 <__swsetup_r>
 800a658:	2800      	cmp	r0, #0
 800a65a:	d0cb      	beq.n	800a5f4 <__swbuf_r+0x28>
 800a65c:	f04f 37ff 	mov.w	r7, #4294967295
 800a660:	e7ea      	b.n	800a638 <__swbuf_r+0x6c>
 800a662:	bf00      	nop
 800a664:	0800cfac 	.word	0x0800cfac
 800a668:	0800cfcc 	.word	0x0800cfcc
 800a66c:	0800cf8c 	.word	0x0800cf8c

0800a670 <__swsetup_r>:
 800a670:	4b32      	ldr	r3, [pc, #200]	; (800a73c <__swsetup_r+0xcc>)
 800a672:	b570      	push	{r4, r5, r6, lr}
 800a674:	681d      	ldr	r5, [r3, #0]
 800a676:	4606      	mov	r6, r0
 800a678:	460c      	mov	r4, r1
 800a67a:	b125      	cbz	r5, 800a686 <__swsetup_r+0x16>
 800a67c:	69ab      	ldr	r3, [r5, #24]
 800a67e:	b913      	cbnz	r3, 800a686 <__swsetup_r+0x16>
 800a680:	4628      	mov	r0, r5
 800a682:	f000 f9df 	bl	800aa44 <__sinit>
 800a686:	4b2e      	ldr	r3, [pc, #184]	; (800a740 <__swsetup_r+0xd0>)
 800a688:	429c      	cmp	r4, r3
 800a68a:	d10f      	bne.n	800a6ac <__swsetup_r+0x3c>
 800a68c:	686c      	ldr	r4, [r5, #4]
 800a68e:	89a3      	ldrh	r3, [r4, #12]
 800a690:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a694:	0719      	lsls	r1, r3, #28
 800a696:	d42c      	bmi.n	800a6f2 <__swsetup_r+0x82>
 800a698:	06dd      	lsls	r5, r3, #27
 800a69a:	d411      	bmi.n	800a6c0 <__swsetup_r+0x50>
 800a69c:	2309      	movs	r3, #9
 800a69e:	6033      	str	r3, [r6, #0]
 800a6a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6a4:	81a3      	strh	r3, [r4, #12]
 800a6a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6aa:	e03e      	b.n	800a72a <__swsetup_r+0xba>
 800a6ac:	4b25      	ldr	r3, [pc, #148]	; (800a744 <__swsetup_r+0xd4>)
 800a6ae:	429c      	cmp	r4, r3
 800a6b0:	d101      	bne.n	800a6b6 <__swsetup_r+0x46>
 800a6b2:	68ac      	ldr	r4, [r5, #8]
 800a6b4:	e7eb      	b.n	800a68e <__swsetup_r+0x1e>
 800a6b6:	4b24      	ldr	r3, [pc, #144]	; (800a748 <__swsetup_r+0xd8>)
 800a6b8:	429c      	cmp	r4, r3
 800a6ba:	bf08      	it	eq
 800a6bc:	68ec      	ldreq	r4, [r5, #12]
 800a6be:	e7e6      	b.n	800a68e <__swsetup_r+0x1e>
 800a6c0:	0758      	lsls	r0, r3, #29
 800a6c2:	d512      	bpl.n	800a6ea <__swsetup_r+0x7a>
 800a6c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6c6:	b141      	cbz	r1, 800a6da <__swsetup_r+0x6a>
 800a6c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6cc:	4299      	cmp	r1, r3
 800a6ce:	d002      	beq.n	800a6d6 <__swsetup_r+0x66>
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	f7ff fb8f 	bl	8009df4 <_free_r>
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	6363      	str	r3, [r4, #52]	; 0x34
 800a6da:	89a3      	ldrh	r3, [r4, #12]
 800a6dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6e0:	81a3      	strh	r3, [r4, #12]
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	6063      	str	r3, [r4, #4]
 800a6e6:	6923      	ldr	r3, [r4, #16]
 800a6e8:	6023      	str	r3, [r4, #0]
 800a6ea:	89a3      	ldrh	r3, [r4, #12]
 800a6ec:	f043 0308 	orr.w	r3, r3, #8
 800a6f0:	81a3      	strh	r3, [r4, #12]
 800a6f2:	6923      	ldr	r3, [r4, #16]
 800a6f4:	b94b      	cbnz	r3, 800a70a <__swsetup_r+0x9a>
 800a6f6:	89a3      	ldrh	r3, [r4, #12]
 800a6f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a700:	d003      	beq.n	800a70a <__swsetup_r+0x9a>
 800a702:	4621      	mov	r1, r4
 800a704:	4630      	mov	r0, r6
 800a706:	f000 fa63 	bl	800abd0 <__smakebuf_r>
 800a70a:	89a0      	ldrh	r0, [r4, #12]
 800a70c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a710:	f010 0301 	ands.w	r3, r0, #1
 800a714:	d00a      	beq.n	800a72c <__swsetup_r+0xbc>
 800a716:	2300      	movs	r3, #0
 800a718:	60a3      	str	r3, [r4, #8]
 800a71a:	6963      	ldr	r3, [r4, #20]
 800a71c:	425b      	negs	r3, r3
 800a71e:	61a3      	str	r3, [r4, #24]
 800a720:	6923      	ldr	r3, [r4, #16]
 800a722:	b943      	cbnz	r3, 800a736 <__swsetup_r+0xc6>
 800a724:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a728:	d1ba      	bne.n	800a6a0 <__swsetup_r+0x30>
 800a72a:	bd70      	pop	{r4, r5, r6, pc}
 800a72c:	0781      	lsls	r1, r0, #30
 800a72e:	bf58      	it	pl
 800a730:	6963      	ldrpl	r3, [r4, #20]
 800a732:	60a3      	str	r3, [r4, #8]
 800a734:	e7f4      	b.n	800a720 <__swsetup_r+0xb0>
 800a736:	2000      	movs	r0, #0
 800a738:	e7f7      	b.n	800a72a <__swsetup_r+0xba>
 800a73a:	bf00      	nop
 800a73c:	20000040 	.word	0x20000040
 800a740:	0800cfac 	.word	0x0800cfac
 800a744:	0800cfcc 	.word	0x0800cfcc
 800a748:	0800cf8c 	.word	0x0800cf8c

0800a74c <__register_exitproc>:
 800a74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a750:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800a80c <__register_exitproc+0xc0>
 800a754:	4606      	mov	r6, r0
 800a756:	f8d8 0000 	ldr.w	r0, [r8]
 800a75a:	461f      	mov	r7, r3
 800a75c:	460d      	mov	r5, r1
 800a75e:	4691      	mov	r9, r2
 800a760:	f000 fa0e 	bl	800ab80 <__retarget_lock_acquire_recursive>
 800a764:	4b25      	ldr	r3, [pc, #148]	; (800a7fc <__register_exitproc+0xb0>)
 800a766:	681c      	ldr	r4, [r3, #0]
 800a768:	b934      	cbnz	r4, 800a778 <__register_exitproc+0x2c>
 800a76a:	4c25      	ldr	r4, [pc, #148]	; (800a800 <__register_exitproc+0xb4>)
 800a76c:	601c      	str	r4, [r3, #0]
 800a76e:	4b25      	ldr	r3, [pc, #148]	; (800a804 <__register_exitproc+0xb8>)
 800a770:	b113      	cbz	r3, 800a778 <__register_exitproc+0x2c>
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800a778:	6863      	ldr	r3, [r4, #4]
 800a77a:	2b1f      	cmp	r3, #31
 800a77c:	dd07      	ble.n	800a78e <__register_exitproc+0x42>
 800a77e:	f8d8 0000 	ldr.w	r0, [r8]
 800a782:	f000 f9ff 	bl	800ab84 <__retarget_lock_release_recursive>
 800a786:	f04f 30ff 	mov.w	r0, #4294967295
 800a78a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a78e:	b34e      	cbz	r6, 800a7e4 <__register_exitproc+0x98>
 800a790:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800a794:	b988      	cbnz	r0, 800a7ba <__register_exitproc+0x6e>
 800a796:	4b1c      	ldr	r3, [pc, #112]	; (800a808 <__register_exitproc+0xbc>)
 800a798:	b923      	cbnz	r3, 800a7a4 <__register_exitproc+0x58>
 800a79a:	f8d8 0000 	ldr.w	r0, [r8]
 800a79e:	f000 f9f0 	bl	800ab82 <__retarget_lock_release>
 800a7a2:	e7f0      	b.n	800a786 <__register_exitproc+0x3a>
 800a7a4:	f44f 7084 	mov.w	r0, #264	; 0x108
 800a7a8:	f7ff faf2 	bl	8009d90 <malloc>
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	d0f4      	beq.n	800a79a <__register_exitproc+0x4e>
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800a7b6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800a7ba:	6863      	ldr	r3, [r4, #4]
 800a7bc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	409a      	lsls	r2, r3
 800a7c4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800a7c8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	2e02      	cmp	r6, #2
 800a7d0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800a7d4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 800a7d8:	bf02      	ittt	eq
 800a7da:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800a7de:	431a      	orreq	r2, r3
 800a7e0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 800a7e4:	6863      	ldr	r3, [r4, #4]
 800a7e6:	f8d8 0000 	ldr.w	r0, [r8]
 800a7ea:	1c5a      	adds	r2, r3, #1
 800a7ec:	3302      	adds	r3, #2
 800a7ee:	6062      	str	r2, [r4, #4]
 800a7f0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800a7f4:	f000 f9c6 	bl	800ab84 <__retarget_lock_release_recursive>
 800a7f8:	2000      	movs	r0, #0
 800a7fa:	e7c6      	b.n	800a78a <__register_exitproc+0x3e>
 800a7fc:	200012a4 	.word	0x200012a4
 800a800:	20001218 	.word	0x20001218
 800a804:	0800cf88 	.word	0x0800cf88
 800a808:	08009d91 	.word	0x08009d91
 800a80c:	200000a4 	.word	0x200000a4

0800a810 <__sflush_r>:
 800a810:	898a      	ldrh	r2, [r1, #12]
 800a812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a816:	4605      	mov	r5, r0
 800a818:	0710      	lsls	r0, r2, #28
 800a81a:	460c      	mov	r4, r1
 800a81c:	d458      	bmi.n	800a8d0 <__sflush_r+0xc0>
 800a81e:	684b      	ldr	r3, [r1, #4]
 800a820:	2b00      	cmp	r3, #0
 800a822:	dc05      	bgt.n	800a830 <__sflush_r+0x20>
 800a824:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a826:	2b00      	cmp	r3, #0
 800a828:	dc02      	bgt.n	800a830 <__sflush_r+0x20>
 800a82a:	2000      	movs	r0, #0
 800a82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a830:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a832:	2e00      	cmp	r6, #0
 800a834:	d0f9      	beq.n	800a82a <__sflush_r+0x1a>
 800a836:	2300      	movs	r3, #0
 800a838:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a83c:	682f      	ldr	r7, [r5, #0]
 800a83e:	602b      	str	r3, [r5, #0]
 800a840:	d032      	beq.n	800a8a8 <__sflush_r+0x98>
 800a842:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a844:	89a3      	ldrh	r3, [r4, #12]
 800a846:	075a      	lsls	r2, r3, #29
 800a848:	d505      	bpl.n	800a856 <__sflush_r+0x46>
 800a84a:	6863      	ldr	r3, [r4, #4]
 800a84c:	1ac0      	subs	r0, r0, r3
 800a84e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a850:	b10b      	cbz	r3, 800a856 <__sflush_r+0x46>
 800a852:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a854:	1ac0      	subs	r0, r0, r3
 800a856:	2300      	movs	r3, #0
 800a858:	4602      	mov	r2, r0
 800a85a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a85c:	6a21      	ldr	r1, [r4, #32]
 800a85e:	4628      	mov	r0, r5
 800a860:	47b0      	blx	r6
 800a862:	1c43      	adds	r3, r0, #1
 800a864:	89a3      	ldrh	r3, [r4, #12]
 800a866:	d106      	bne.n	800a876 <__sflush_r+0x66>
 800a868:	6829      	ldr	r1, [r5, #0]
 800a86a:	291d      	cmp	r1, #29
 800a86c:	d82c      	bhi.n	800a8c8 <__sflush_r+0xb8>
 800a86e:	4a2a      	ldr	r2, [pc, #168]	; (800a918 <__sflush_r+0x108>)
 800a870:	40ca      	lsrs	r2, r1
 800a872:	07d6      	lsls	r6, r2, #31
 800a874:	d528      	bpl.n	800a8c8 <__sflush_r+0xb8>
 800a876:	2200      	movs	r2, #0
 800a878:	6062      	str	r2, [r4, #4]
 800a87a:	04d9      	lsls	r1, r3, #19
 800a87c:	6922      	ldr	r2, [r4, #16]
 800a87e:	6022      	str	r2, [r4, #0]
 800a880:	d504      	bpl.n	800a88c <__sflush_r+0x7c>
 800a882:	1c42      	adds	r2, r0, #1
 800a884:	d101      	bne.n	800a88a <__sflush_r+0x7a>
 800a886:	682b      	ldr	r3, [r5, #0]
 800a888:	b903      	cbnz	r3, 800a88c <__sflush_r+0x7c>
 800a88a:	6560      	str	r0, [r4, #84]	; 0x54
 800a88c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a88e:	602f      	str	r7, [r5, #0]
 800a890:	2900      	cmp	r1, #0
 800a892:	d0ca      	beq.n	800a82a <__sflush_r+0x1a>
 800a894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a898:	4299      	cmp	r1, r3
 800a89a:	d002      	beq.n	800a8a2 <__sflush_r+0x92>
 800a89c:	4628      	mov	r0, r5
 800a89e:	f7ff faa9 	bl	8009df4 <_free_r>
 800a8a2:	2000      	movs	r0, #0
 800a8a4:	6360      	str	r0, [r4, #52]	; 0x34
 800a8a6:	e7c1      	b.n	800a82c <__sflush_r+0x1c>
 800a8a8:	6a21      	ldr	r1, [r4, #32]
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	4628      	mov	r0, r5
 800a8ae:	47b0      	blx	r6
 800a8b0:	1c41      	adds	r1, r0, #1
 800a8b2:	d1c7      	bne.n	800a844 <__sflush_r+0x34>
 800a8b4:	682b      	ldr	r3, [r5, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d0c4      	beq.n	800a844 <__sflush_r+0x34>
 800a8ba:	2b1d      	cmp	r3, #29
 800a8bc:	d001      	beq.n	800a8c2 <__sflush_r+0xb2>
 800a8be:	2b16      	cmp	r3, #22
 800a8c0:	d101      	bne.n	800a8c6 <__sflush_r+0xb6>
 800a8c2:	602f      	str	r7, [r5, #0]
 800a8c4:	e7b1      	b.n	800a82a <__sflush_r+0x1a>
 800a8c6:	89a3      	ldrh	r3, [r4, #12]
 800a8c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8cc:	81a3      	strh	r3, [r4, #12]
 800a8ce:	e7ad      	b.n	800a82c <__sflush_r+0x1c>
 800a8d0:	690f      	ldr	r7, [r1, #16]
 800a8d2:	2f00      	cmp	r7, #0
 800a8d4:	d0a9      	beq.n	800a82a <__sflush_r+0x1a>
 800a8d6:	0793      	lsls	r3, r2, #30
 800a8d8:	680e      	ldr	r6, [r1, #0]
 800a8da:	bf08      	it	eq
 800a8dc:	694b      	ldreq	r3, [r1, #20]
 800a8de:	600f      	str	r7, [r1, #0]
 800a8e0:	bf18      	it	ne
 800a8e2:	2300      	movne	r3, #0
 800a8e4:	eba6 0807 	sub.w	r8, r6, r7
 800a8e8:	608b      	str	r3, [r1, #8]
 800a8ea:	f1b8 0f00 	cmp.w	r8, #0
 800a8ee:	dd9c      	ble.n	800a82a <__sflush_r+0x1a>
 800a8f0:	6a21      	ldr	r1, [r4, #32]
 800a8f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8f4:	4643      	mov	r3, r8
 800a8f6:	463a      	mov	r2, r7
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	47b0      	blx	r6
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	dc06      	bgt.n	800a90e <__sflush_r+0xfe>
 800a900:	89a3      	ldrh	r3, [r4, #12]
 800a902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a906:	81a3      	strh	r3, [r4, #12]
 800a908:	f04f 30ff 	mov.w	r0, #4294967295
 800a90c:	e78e      	b.n	800a82c <__sflush_r+0x1c>
 800a90e:	4407      	add	r7, r0
 800a910:	eba8 0800 	sub.w	r8, r8, r0
 800a914:	e7e9      	b.n	800a8ea <__sflush_r+0xda>
 800a916:	bf00      	nop
 800a918:	20400001 	.word	0x20400001

0800a91c <_fflush_r>:
 800a91c:	b538      	push	{r3, r4, r5, lr}
 800a91e:	690b      	ldr	r3, [r1, #16]
 800a920:	4605      	mov	r5, r0
 800a922:	460c      	mov	r4, r1
 800a924:	b913      	cbnz	r3, 800a92c <_fflush_r+0x10>
 800a926:	2500      	movs	r5, #0
 800a928:	4628      	mov	r0, r5
 800a92a:	bd38      	pop	{r3, r4, r5, pc}
 800a92c:	b118      	cbz	r0, 800a936 <_fflush_r+0x1a>
 800a92e:	6983      	ldr	r3, [r0, #24]
 800a930:	b90b      	cbnz	r3, 800a936 <_fflush_r+0x1a>
 800a932:	f000 f887 	bl	800aa44 <__sinit>
 800a936:	4b14      	ldr	r3, [pc, #80]	; (800a988 <_fflush_r+0x6c>)
 800a938:	429c      	cmp	r4, r3
 800a93a:	d11b      	bne.n	800a974 <_fflush_r+0x58>
 800a93c:	686c      	ldr	r4, [r5, #4]
 800a93e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d0ef      	beq.n	800a926 <_fflush_r+0xa>
 800a946:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a948:	07d0      	lsls	r0, r2, #31
 800a94a:	d404      	bmi.n	800a956 <_fflush_r+0x3a>
 800a94c:	0599      	lsls	r1, r3, #22
 800a94e:	d402      	bmi.n	800a956 <_fflush_r+0x3a>
 800a950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a952:	f000 f915 	bl	800ab80 <__retarget_lock_acquire_recursive>
 800a956:	4628      	mov	r0, r5
 800a958:	4621      	mov	r1, r4
 800a95a:	f7ff ff59 	bl	800a810 <__sflush_r>
 800a95e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a960:	07da      	lsls	r2, r3, #31
 800a962:	4605      	mov	r5, r0
 800a964:	d4e0      	bmi.n	800a928 <_fflush_r+0xc>
 800a966:	89a3      	ldrh	r3, [r4, #12]
 800a968:	059b      	lsls	r3, r3, #22
 800a96a:	d4dd      	bmi.n	800a928 <_fflush_r+0xc>
 800a96c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a96e:	f000 f909 	bl	800ab84 <__retarget_lock_release_recursive>
 800a972:	e7d9      	b.n	800a928 <_fflush_r+0xc>
 800a974:	4b05      	ldr	r3, [pc, #20]	; (800a98c <_fflush_r+0x70>)
 800a976:	429c      	cmp	r4, r3
 800a978:	d101      	bne.n	800a97e <_fflush_r+0x62>
 800a97a:	68ac      	ldr	r4, [r5, #8]
 800a97c:	e7df      	b.n	800a93e <_fflush_r+0x22>
 800a97e:	4b04      	ldr	r3, [pc, #16]	; (800a990 <_fflush_r+0x74>)
 800a980:	429c      	cmp	r4, r3
 800a982:	bf08      	it	eq
 800a984:	68ec      	ldreq	r4, [r5, #12]
 800a986:	e7da      	b.n	800a93e <_fflush_r+0x22>
 800a988:	0800cfac 	.word	0x0800cfac
 800a98c:	0800cfcc 	.word	0x0800cfcc
 800a990:	0800cf8c 	.word	0x0800cf8c

0800a994 <std>:
 800a994:	2300      	movs	r3, #0
 800a996:	b510      	push	{r4, lr}
 800a998:	4604      	mov	r4, r0
 800a99a:	e9c0 3300 	strd	r3, r3, [r0]
 800a99e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9a2:	6083      	str	r3, [r0, #8]
 800a9a4:	8181      	strh	r1, [r0, #12]
 800a9a6:	6643      	str	r3, [r0, #100]	; 0x64
 800a9a8:	81c2      	strh	r2, [r0, #14]
 800a9aa:	6183      	str	r3, [r0, #24]
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	2208      	movs	r2, #8
 800a9b0:	305c      	adds	r0, #92	; 0x5c
 800a9b2:	f7ff fa17 	bl	8009de4 <memset>
 800a9b6:	4b05      	ldr	r3, [pc, #20]	; (800a9cc <std+0x38>)
 800a9b8:	6263      	str	r3, [r4, #36]	; 0x24
 800a9ba:	4b05      	ldr	r3, [pc, #20]	; (800a9d0 <std+0x3c>)
 800a9bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a9be:	4b05      	ldr	r3, [pc, #20]	; (800a9d4 <std+0x40>)
 800a9c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a9c2:	4b05      	ldr	r3, [pc, #20]	; (800a9d8 <std+0x44>)
 800a9c4:	6224      	str	r4, [r4, #32]
 800a9c6:	6323      	str	r3, [r4, #48]	; 0x30
 800a9c8:	bd10      	pop	{r4, pc}
 800a9ca:	bf00      	nop
 800a9cc:	0800ac69 	.word	0x0800ac69
 800a9d0:	0800ac8b 	.word	0x0800ac8b
 800a9d4:	0800acc3 	.word	0x0800acc3
 800a9d8:	0800ace7 	.word	0x0800ace7

0800a9dc <_cleanup_r>:
 800a9dc:	4901      	ldr	r1, [pc, #4]	; (800a9e4 <_cleanup_r+0x8>)
 800a9de:	f000 b8af 	b.w	800ab40 <_fwalk_reent>
 800a9e2:	bf00      	nop
 800a9e4:	0800a91d 	.word	0x0800a91d

0800a9e8 <__sfmoreglue>:
 800a9e8:	b570      	push	{r4, r5, r6, lr}
 800a9ea:	1e4a      	subs	r2, r1, #1
 800a9ec:	2568      	movs	r5, #104	; 0x68
 800a9ee:	4355      	muls	r5, r2
 800a9f0:	460e      	mov	r6, r1
 800a9f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a9f6:	f7ff fa4d 	bl	8009e94 <_malloc_r>
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	b140      	cbz	r0, 800aa10 <__sfmoreglue+0x28>
 800a9fe:	2100      	movs	r1, #0
 800aa00:	e9c0 1600 	strd	r1, r6, [r0]
 800aa04:	300c      	adds	r0, #12
 800aa06:	60a0      	str	r0, [r4, #8]
 800aa08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa0c:	f7ff f9ea 	bl	8009de4 <memset>
 800aa10:	4620      	mov	r0, r4
 800aa12:	bd70      	pop	{r4, r5, r6, pc}

0800aa14 <__sfp_lock_acquire>:
 800aa14:	4801      	ldr	r0, [pc, #4]	; (800aa1c <__sfp_lock_acquire+0x8>)
 800aa16:	f000 b8b3 	b.w	800ab80 <__retarget_lock_acquire_recursive>
 800aa1a:	bf00      	nop
 800aa1c:	20001528 	.word	0x20001528

0800aa20 <__sfp_lock_release>:
 800aa20:	4801      	ldr	r0, [pc, #4]	; (800aa28 <__sfp_lock_release+0x8>)
 800aa22:	f000 b8af 	b.w	800ab84 <__retarget_lock_release_recursive>
 800aa26:	bf00      	nop
 800aa28:	20001528 	.word	0x20001528

0800aa2c <__sinit_lock_acquire>:
 800aa2c:	4801      	ldr	r0, [pc, #4]	; (800aa34 <__sinit_lock_acquire+0x8>)
 800aa2e:	f000 b8a7 	b.w	800ab80 <__retarget_lock_acquire_recursive>
 800aa32:	bf00      	nop
 800aa34:	20001527 	.word	0x20001527

0800aa38 <__sinit_lock_release>:
 800aa38:	4801      	ldr	r0, [pc, #4]	; (800aa40 <__sinit_lock_release+0x8>)
 800aa3a:	f000 b8a3 	b.w	800ab84 <__retarget_lock_release_recursive>
 800aa3e:	bf00      	nop
 800aa40:	20001527 	.word	0x20001527

0800aa44 <__sinit>:
 800aa44:	b510      	push	{r4, lr}
 800aa46:	4604      	mov	r4, r0
 800aa48:	f7ff fff0 	bl	800aa2c <__sinit_lock_acquire>
 800aa4c:	69a3      	ldr	r3, [r4, #24]
 800aa4e:	b11b      	cbz	r3, 800aa58 <__sinit+0x14>
 800aa50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa54:	f7ff bff0 	b.w	800aa38 <__sinit_lock_release>
 800aa58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aa5c:	6523      	str	r3, [r4, #80]	; 0x50
 800aa5e:	4b13      	ldr	r3, [pc, #76]	; (800aaac <__sinit+0x68>)
 800aa60:	4a13      	ldr	r2, [pc, #76]	; (800aab0 <__sinit+0x6c>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa66:	42a3      	cmp	r3, r4
 800aa68:	bf04      	itt	eq
 800aa6a:	2301      	moveq	r3, #1
 800aa6c:	61a3      	streq	r3, [r4, #24]
 800aa6e:	4620      	mov	r0, r4
 800aa70:	f000 f820 	bl	800aab4 <__sfp>
 800aa74:	6060      	str	r0, [r4, #4]
 800aa76:	4620      	mov	r0, r4
 800aa78:	f000 f81c 	bl	800aab4 <__sfp>
 800aa7c:	60a0      	str	r0, [r4, #8]
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f000 f818 	bl	800aab4 <__sfp>
 800aa84:	2200      	movs	r2, #0
 800aa86:	60e0      	str	r0, [r4, #12]
 800aa88:	2104      	movs	r1, #4
 800aa8a:	6860      	ldr	r0, [r4, #4]
 800aa8c:	f7ff ff82 	bl	800a994 <std>
 800aa90:	68a0      	ldr	r0, [r4, #8]
 800aa92:	2201      	movs	r2, #1
 800aa94:	2109      	movs	r1, #9
 800aa96:	f7ff ff7d 	bl	800a994 <std>
 800aa9a:	68e0      	ldr	r0, [r4, #12]
 800aa9c:	2202      	movs	r2, #2
 800aa9e:	2112      	movs	r1, #18
 800aaa0:	f7ff ff78 	bl	800a994 <std>
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	61a3      	str	r3, [r4, #24]
 800aaa8:	e7d2      	b.n	800aa50 <__sinit+0xc>
 800aaaa:	bf00      	nop
 800aaac:	0800cf50 	.word	0x0800cf50
 800aab0:	0800a9dd 	.word	0x0800a9dd

0800aab4 <__sfp>:
 800aab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aab6:	4607      	mov	r7, r0
 800aab8:	f7ff ffac 	bl	800aa14 <__sfp_lock_acquire>
 800aabc:	4b1e      	ldr	r3, [pc, #120]	; (800ab38 <__sfp+0x84>)
 800aabe:	681e      	ldr	r6, [r3, #0]
 800aac0:	69b3      	ldr	r3, [r6, #24]
 800aac2:	b913      	cbnz	r3, 800aaca <__sfp+0x16>
 800aac4:	4630      	mov	r0, r6
 800aac6:	f7ff ffbd 	bl	800aa44 <__sinit>
 800aaca:	3648      	adds	r6, #72	; 0x48
 800aacc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aad0:	3b01      	subs	r3, #1
 800aad2:	d503      	bpl.n	800aadc <__sfp+0x28>
 800aad4:	6833      	ldr	r3, [r6, #0]
 800aad6:	b30b      	cbz	r3, 800ab1c <__sfp+0x68>
 800aad8:	6836      	ldr	r6, [r6, #0]
 800aada:	e7f7      	b.n	800aacc <__sfp+0x18>
 800aadc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aae0:	b9d5      	cbnz	r5, 800ab18 <__sfp+0x64>
 800aae2:	4b16      	ldr	r3, [pc, #88]	; (800ab3c <__sfp+0x88>)
 800aae4:	60e3      	str	r3, [r4, #12]
 800aae6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aaea:	6665      	str	r5, [r4, #100]	; 0x64
 800aaec:	f000 f847 	bl	800ab7e <__retarget_lock_init_recursive>
 800aaf0:	f7ff ff96 	bl	800aa20 <__sfp_lock_release>
 800aaf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aaf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aafc:	6025      	str	r5, [r4, #0]
 800aafe:	61a5      	str	r5, [r4, #24]
 800ab00:	2208      	movs	r2, #8
 800ab02:	4629      	mov	r1, r5
 800ab04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab08:	f7ff f96c 	bl	8009de4 <memset>
 800ab0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab14:	4620      	mov	r0, r4
 800ab16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab18:	3468      	adds	r4, #104	; 0x68
 800ab1a:	e7d9      	b.n	800aad0 <__sfp+0x1c>
 800ab1c:	2104      	movs	r1, #4
 800ab1e:	4638      	mov	r0, r7
 800ab20:	f7ff ff62 	bl	800a9e8 <__sfmoreglue>
 800ab24:	4604      	mov	r4, r0
 800ab26:	6030      	str	r0, [r6, #0]
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	d1d5      	bne.n	800aad8 <__sfp+0x24>
 800ab2c:	f7ff ff78 	bl	800aa20 <__sfp_lock_release>
 800ab30:	230c      	movs	r3, #12
 800ab32:	603b      	str	r3, [r7, #0]
 800ab34:	e7ee      	b.n	800ab14 <__sfp+0x60>
 800ab36:	bf00      	nop
 800ab38:	0800cf50 	.word	0x0800cf50
 800ab3c:	ffff0001 	.word	0xffff0001

0800ab40 <_fwalk_reent>:
 800ab40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab44:	4606      	mov	r6, r0
 800ab46:	4688      	mov	r8, r1
 800ab48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab4c:	2700      	movs	r7, #0
 800ab4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab52:	f1b9 0901 	subs.w	r9, r9, #1
 800ab56:	d505      	bpl.n	800ab64 <_fwalk_reent+0x24>
 800ab58:	6824      	ldr	r4, [r4, #0]
 800ab5a:	2c00      	cmp	r4, #0
 800ab5c:	d1f7      	bne.n	800ab4e <_fwalk_reent+0xe>
 800ab5e:	4638      	mov	r0, r7
 800ab60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab64:	89ab      	ldrh	r3, [r5, #12]
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d907      	bls.n	800ab7a <_fwalk_reent+0x3a>
 800ab6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab6e:	3301      	adds	r3, #1
 800ab70:	d003      	beq.n	800ab7a <_fwalk_reent+0x3a>
 800ab72:	4629      	mov	r1, r5
 800ab74:	4630      	mov	r0, r6
 800ab76:	47c0      	blx	r8
 800ab78:	4307      	orrs	r7, r0
 800ab7a:	3568      	adds	r5, #104	; 0x68
 800ab7c:	e7e9      	b.n	800ab52 <_fwalk_reent+0x12>

0800ab7e <__retarget_lock_init_recursive>:
 800ab7e:	4770      	bx	lr

0800ab80 <__retarget_lock_acquire_recursive>:
 800ab80:	4770      	bx	lr

0800ab82 <__retarget_lock_release>:
 800ab82:	4770      	bx	lr

0800ab84 <__retarget_lock_release_recursive>:
 800ab84:	4770      	bx	lr

0800ab86 <__swhatbuf_r>:
 800ab86:	b570      	push	{r4, r5, r6, lr}
 800ab88:	460e      	mov	r6, r1
 800ab8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab8e:	2900      	cmp	r1, #0
 800ab90:	b096      	sub	sp, #88	; 0x58
 800ab92:	4614      	mov	r4, r2
 800ab94:	461d      	mov	r5, r3
 800ab96:	da07      	bge.n	800aba8 <__swhatbuf_r+0x22>
 800ab98:	2300      	movs	r3, #0
 800ab9a:	602b      	str	r3, [r5, #0]
 800ab9c:	89b3      	ldrh	r3, [r6, #12]
 800ab9e:	061a      	lsls	r2, r3, #24
 800aba0:	d410      	bmi.n	800abc4 <__swhatbuf_r+0x3e>
 800aba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aba6:	e00e      	b.n	800abc6 <__swhatbuf_r+0x40>
 800aba8:	466a      	mov	r2, sp
 800abaa:	f000 f8c3 	bl	800ad34 <_fstat_r>
 800abae:	2800      	cmp	r0, #0
 800abb0:	dbf2      	blt.n	800ab98 <__swhatbuf_r+0x12>
 800abb2:	9a01      	ldr	r2, [sp, #4]
 800abb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800abb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800abbc:	425a      	negs	r2, r3
 800abbe:	415a      	adcs	r2, r3
 800abc0:	602a      	str	r2, [r5, #0]
 800abc2:	e7ee      	b.n	800aba2 <__swhatbuf_r+0x1c>
 800abc4:	2340      	movs	r3, #64	; 0x40
 800abc6:	2000      	movs	r0, #0
 800abc8:	6023      	str	r3, [r4, #0]
 800abca:	b016      	add	sp, #88	; 0x58
 800abcc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800abd0 <__smakebuf_r>:
 800abd0:	898b      	ldrh	r3, [r1, #12]
 800abd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800abd4:	079d      	lsls	r5, r3, #30
 800abd6:	4606      	mov	r6, r0
 800abd8:	460c      	mov	r4, r1
 800abda:	d507      	bpl.n	800abec <__smakebuf_r+0x1c>
 800abdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800abe0:	6023      	str	r3, [r4, #0]
 800abe2:	6123      	str	r3, [r4, #16]
 800abe4:	2301      	movs	r3, #1
 800abe6:	6163      	str	r3, [r4, #20]
 800abe8:	b002      	add	sp, #8
 800abea:	bd70      	pop	{r4, r5, r6, pc}
 800abec:	ab01      	add	r3, sp, #4
 800abee:	466a      	mov	r2, sp
 800abf0:	f7ff ffc9 	bl	800ab86 <__swhatbuf_r>
 800abf4:	9900      	ldr	r1, [sp, #0]
 800abf6:	4605      	mov	r5, r0
 800abf8:	4630      	mov	r0, r6
 800abfa:	f7ff f94b 	bl	8009e94 <_malloc_r>
 800abfe:	b948      	cbnz	r0, 800ac14 <__smakebuf_r+0x44>
 800ac00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac04:	059a      	lsls	r2, r3, #22
 800ac06:	d4ef      	bmi.n	800abe8 <__smakebuf_r+0x18>
 800ac08:	f023 0303 	bic.w	r3, r3, #3
 800ac0c:	f043 0302 	orr.w	r3, r3, #2
 800ac10:	81a3      	strh	r3, [r4, #12]
 800ac12:	e7e3      	b.n	800abdc <__smakebuf_r+0xc>
 800ac14:	4b0d      	ldr	r3, [pc, #52]	; (800ac4c <__smakebuf_r+0x7c>)
 800ac16:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac18:	89a3      	ldrh	r3, [r4, #12]
 800ac1a:	6020      	str	r0, [r4, #0]
 800ac1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac20:	81a3      	strh	r3, [r4, #12]
 800ac22:	9b00      	ldr	r3, [sp, #0]
 800ac24:	6163      	str	r3, [r4, #20]
 800ac26:	9b01      	ldr	r3, [sp, #4]
 800ac28:	6120      	str	r0, [r4, #16]
 800ac2a:	b15b      	cbz	r3, 800ac44 <__smakebuf_r+0x74>
 800ac2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac30:	4630      	mov	r0, r6
 800ac32:	f000 f891 	bl	800ad58 <_isatty_r>
 800ac36:	b128      	cbz	r0, 800ac44 <__smakebuf_r+0x74>
 800ac38:	89a3      	ldrh	r3, [r4, #12]
 800ac3a:	f023 0303 	bic.w	r3, r3, #3
 800ac3e:	f043 0301 	orr.w	r3, r3, #1
 800ac42:	81a3      	strh	r3, [r4, #12]
 800ac44:	89a0      	ldrh	r0, [r4, #12]
 800ac46:	4305      	orrs	r5, r0
 800ac48:	81a5      	strh	r5, [r4, #12]
 800ac4a:	e7cd      	b.n	800abe8 <__smakebuf_r+0x18>
 800ac4c:	0800a9dd 	.word	0x0800a9dd

0800ac50 <__malloc_lock>:
 800ac50:	4801      	ldr	r0, [pc, #4]	; (800ac58 <__malloc_lock+0x8>)
 800ac52:	f7ff bf95 	b.w	800ab80 <__retarget_lock_acquire_recursive>
 800ac56:	bf00      	nop
 800ac58:	20001524 	.word	0x20001524

0800ac5c <__malloc_unlock>:
 800ac5c:	4801      	ldr	r0, [pc, #4]	; (800ac64 <__malloc_unlock+0x8>)
 800ac5e:	f7ff bf91 	b.w	800ab84 <__retarget_lock_release_recursive>
 800ac62:	bf00      	nop
 800ac64:	20001524 	.word	0x20001524

0800ac68 <__sread>:
 800ac68:	b510      	push	{r4, lr}
 800ac6a:	460c      	mov	r4, r1
 800ac6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac70:	f000 f894 	bl	800ad9c <_read_r>
 800ac74:	2800      	cmp	r0, #0
 800ac76:	bfab      	itete	ge
 800ac78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac7a:	89a3      	ldrhlt	r3, [r4, #12]
 800ac7c:	181b      	addge	r3, r3, r0
 800ac7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac82:	bfac      	ite	ge
 800ac84:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac86:	81a3      	strhlt	r3, [r4, #12]
 800ac88:	bd10      	pop	{r4, pc}

0800ac8a <__swrite>:
 800ac8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac8e:	461f      	mov	r7, r3
 800ac90:	898b      	ldrh	r3, [r1, #12]
 800ac92:	05db      	lsls	r3, r3, #23
 800ac94:	4605      	mov	r5, r0
 800ac96:	460c      	mov	r4, r1
 800ac98:	4616      	mov	r6, r2
 800ac9a:	d505      	bpl.n	800aca8 <__swrite+0x1e>
 800ac9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aca0:	2302      	movs	r3, #2
 800aca2:	2200      	movs	r2, #0
 800aca4:	f000 f868 	bl	800ad78 <_lseek_r>
 800aca8:	89a3      	ldrh	r3, [r4, #12]
 800acaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acb2:	81a3      	strh	r3, [r4, #12]
 800acb4:	4632      	mov	r2, r6
 800acb6:	463b      	mov	r3, r7
 800acb8:	4628      	mov	r0, r5
 800acba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acbe:	f000 b817 	b.w	800acf0 <_write_r>

0800acc2 <__sseek>:
 800acc2:	b510      	push	{r4, lr}
 800acc4:	460c      	mov	r4, r1
 800acc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acca:	f000 f855 	bl	800ad78 <_lseek_r>
 800acce:	1c43      	adds	r3, r0, #1
 800acd0:	89a3      	ldrh	r3, [r4, #12]
 800acd2:	bf15      	itete	ne
 800acd4:	6560      	strne	r0, [r4, #84]	; 0x54
 800acd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acde:	81a3      	strheq	r3, [r4, #12]
 800ace0:	bf18      	it	ne
 800ace2:	81a3      	strhne	r3, [r4, #12]
 800ace4:	bd10      	pop	{r4, pc}

0800ace6 <__sclose>:
 800ace6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acea:	f000 b813 	b.w	800ad14 <_close_r>
	...

0800acf0 <_write_r>:
 800acf0:	b538      	push	{r3, r4, r5, lr}
 800acf2:	4d07      	ldr	r5, [pc, #28]	; (800ad10 <_write_r+0x20>)
 800acf4:	4604      	mov	r4, r0
 800acf6:	4608      	mov	r0, r1
 800acf8:	4611      	mov	r1, r2
 800acfa:	2200      	movs	r2, #0
 800acfc:	602a      	str	r2, [r5, #0]
 800acfe:	461a      	mov	r2, r3
 800ad00:	f000 f8a4 	bl	800ae4c <_write>
 800ad04:	1c43      	adds	r3, r0, #1
 800ad06:	d102      	bne.n	800ad0e <_write_r+0x1e>
 800ad08:	682b      	ldr	r3, [r5, #0]
 800ad0a:	b103      	cbz	r3, 800ad0e <_write_r+0x1e>
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	bd38      	pop	{r3, r4, r5, pc}
 800ad10:	20001530 	.word	0x20001530

0800ad14 <_close_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	4d06      	ldr	r5, [pc, #24]	; (800ad30 <_close_r+0x1c>)
 800ad18:	2300      	movs	r3, #0
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	4608      	mov	r0, r1
 800ad1e:	602b      	str	r3, [r5, #0]
 800ad20:	f000 f84e 	bl	800adc0 <_close>
 800ad24:	1c43      	adds	r3, r0, #1
 800ad26:	d102      	bne.n	800ad2e <_close_r+0x1a>
 800ad28:	682b      	ldr	r3, [r5, #0]
 800ad2a:	b103      	cbz	r3, 800ad2e <_close_r+0x1a>
 800ad2c:	6023      	str	r3, [r4, #0]
 800ad2e:	bd38      	pop	{r3, r4, r5, pc}
 800ad30:	20001530 	.word	0x20001530

0800ad34 <_fstat_r>:
 800ad34:	b538      	push	{r3, r4, r5, lr}
 800ad36:	4d07      	ldr	r5, [pc, #28]	; (800ad54 <_fstat_r+0x20>)
 800ad38:	2300      	movs	r3, #0
 800ad3a:	4604      	mov	r4, r0
 800ad3c:	4608      	mov	r0, r1
 800ad3e:	4611      	mov	r1, r2
 800ad40:	602b      	str	r3, [r5, #0]
 800ad42:	f000 f845 	bl	800add0 <_fstat>
 800ad46:	1c43      	adds	r3, r0, #1
 800ad48:	d102      	bne.n	800ad50 <_fstat_r+0x1c>
 800ad4a:	682b      	ldr	r3, [r5, #0]
 800ad4c:	b103      	cbz	r3, 800ad50 <_fstat_r+0x1c>
 800ad4e:	6023      	str	r3, [r4, #0]
 800ad50:	bd38      	pop	{r3, r4, r5, pc}
 800ad52:	bf00      	nop
 800ad54:	20001530 	.word	0x20001530

0800ad58 <_isatty_r>:
 800ad58:	b538      	push	{r3, r4, r5, lr}
 800ad5a:	4d06      	ldr	r5, [pc, #24]	; (800ad74 <_isatty_r+0x1c>)
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	4604      	mov	r4, r0
 800ad60:	4608      	mov	r0, r1
 800ad62:	602b      	str	r3, [r5, #0]
 800ad64:	f000 f844 	bl	800adf0 <_isatty>
 800ad68:	1c43      	adds	r3, r0, #1
 800ad6a:	d102      	bne.n	800ad72 <_isatty_r+0x1a>
 800ad6c:	682b      	ldr	r3, [r5, #0]
 800ad6e:	b103      	cbz	r3, 800ad72 <_isatty_r+0x1a>
 800ad70:	6023      	str	r3, [r4, #0]
 800ad72:	bd38      	pop	{r3, r4, r5, pc}
 800ad74:	20001530 	.word	0x20001530

0800ad78 <_lseek_r>:
 800ad78:	b538      	push	{r3, r4, r5, lr}
 800ad7a:	4d07      	ldr	r5, [pc, #28]	; (800ad98 <_lseek_r+0x20>)
 800ad7c:	4604      	mov	r4, r0
 800ad7e:	4608      	mov	r0, r1
 800ad80:	4611      	mov	r1, r2
 800ad82:	2200      	movs	r2, #0
 800ad84:	602a      	str	r2, [r5, #0]
 800ad86:	461a      	mov	r2, r3
 800ad88:	f000 f842 	bl	800ae10 <_lseek>
 800ad8c:	1c43      	adds	r3, r0, #1
 800ad8e:	d102      	bne.n	800ad96 <_lseek_r+0x1e>
 800ad90:	682b      	ldr	r3, [r5, #0]
 800ad92:	b103      	cbz	r3, 800ad96 <_lseek_r+0x1e>
 800ad94:	6023      	str	r3, [r4, #0]
 800ad96:	bd38      	pop	{r3, r4, r5, pc}
 800ad98:	20001530 	.word	0x20001530

0800ad9c <_read_r>:
 800ad9c:	b538      	push	{r3, r4, r5, lr}
 800ad9e:	4d07      	ldr	r5, [pc, #28]	; (800adbc <_read_r+0x20>)
 800ada0:	4604      	mov	r4, r0
 800ada2:	4608      	mov	r0, r1
 800ada4:	4611      	mov	r1, r2
 800ada6:	2200      	movs	r2, #0
 800ada8:	602a      	str	r2, [r5, #0]
 800adaa:	461a      	mov	r2, r3
 800adac:	f000 f838 	bl	800ae20 <_read>
 800adb0:	1c43      	adds	r3, r0, #1
 800adb2:	d102      	bne.n	800adba <_read_r+0x1e>
 800adb4:	682b      	ldr	r3, [r5, #0]
 800adb6:	b103      	cbz	r3, 800adba <_read_r+0x1e>
 800adb8:	6023      	str	r3, [r4, #0]
 800adba:	bd38      	pop	{r3, r4, r5, pc}
 800adbc:	20001530 	.word	0x20001530

0800adc0 <_close>:
 800adc0:	4b02      	ldr	r3, [pc, #8]	; (800adcc <_close+0xc>)
 800adc2:	2258      	movs	r2, #88	; 0x58
 800adc4:	601a      	str	r2, [r3, #0]
 800adc6:	f04f 30ff 	mov.w	r0, #4294967295
 800adca:	4770      	bx	lr
 800adcc:	20001530 	.word	0x20001530

0800add0 <_fstat>:
 800add0:	4b02      	ldr	r3, [pc, #8]	; (800addc <_fstat+0xc>)
 800add2:	2258      	movs	r2, #88	; 0x58
 800add4:	601a      	str	r2, [r3, #0]
 800add6:	f04f 30ff 	mov.w	r0, #4294967295
 800adda:	4770      	bx	lr
 800addc:	20001530 	.word	0x20001530

0800ade0 <_getpid>:
 800ade0:	4b02      	ldr	r3, [pc, #8]	; (800adec <_getpid+0xc>)
 800ade2:	2258      	movs	r2, #88	; 0x58
 800ade4:	601a      	str	r2, [r3, #0]
 800ade6:	f04f 30ff 	mov.w	r0, #4294967295
 800adea:	4770      	bx	lr
 800adec:	20001530 	.word	0x20001530

0800adf0 <_isatty>:
 800adf0:	4b02      	ldr	r3, [pc, #8]	; (800adfc <_isatty+0xc>)
 800adf2:	2258      	movs	r2, #88	; 0x58
 800adf4:	601a      	str	r2, [r3, #0]
 800adf6:	2000      	movs	r0, #0
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	20001530 	.word	0x20001530

0800ae00 <_kill>:
 800ae00:	4b02      	ldr	r3, [pc, #8]	; (800ae0c <_kill+0xc>)
 800ae02:	2258      	movs	r2, #88	; 0x58
 800ae04:	601a      	str	r2, [r3, #0]
 800ae06:	f04f 30ff 	mov.w	r0, #4294967295
 800ae0a:	4770      	bx	lr
 800ae0c:	20001530 	.word	0x20001530

0800ae10 <_lseek>:
 800ae10:	4b02      	ldr	r3, [pc, #8]	; (800ae1c <_lseek+0xc>)
 800ae12:	2258      	movs	r2, #88	; 0x58
 800ae14:	601a      	str	r2, [r3, #0]
 800ae16:	f04f 30ff 	mov.w	r0, #4294967295
 800ae1a:	4770      	bx	lr
 800ae1c:	20001530 	.word	0x20001530

0800ae20 <_read>:
 800ae20:	4b02      	ldr	r3, [pc, #8]	; (800ae2c <_read+0xc>)
 800ae22:	2258      	movs	r2, #88	; 0x58
 800ae24:	601a      	str	r2, [r3, #0]
 800ae26:	f04f 30ff 	mov.w	r0, #4294967295
 800ae2a:	4770      	bx	lr
 800ae2c:	20001530 	.word	0x20001530

0800ae30 <_sbrk>:
 800ae30:	4b04      	ldr	r3, [pc, #16]	; (800ae44 <_sbrk+0x14>)
 800ae32:	6819      	ldr	r1, [r3, #0]
 800ae34:	4602      	mov	r2, r0
 800ae36:	b909      	cbnz	r1, 800ae3c <_sbrk+0xc>
 800ae38:	4903      	ldr	r1, [pc, #12]	; (800ae48 <_sbrk+0x18>)
 800ae3a:	6019      	str	r1, [r3, #0]
 800ae3c:	6818      	ldr	r0, [r3, #0]
 800ae3e:	4402      	add	r2, r0
 800ae40:	601a      	str	r2, [r3, #0]
 800ae42:	4770      	bx	lr
 800ae44:	200012a8 	.word	0x200012a8
 800ae48:	20001538 	.word	0x20001538

0800ae4c <_write>:
 800ae4c:	4b02      	ldr	r3, [pc, #8]	; (800ae58 <_write+0xc>)
 800ae4e:	2258      	movs	r2, #88	; 0x58
 800ae50:	601a      	str	r2, [r3, #0]
 800ae52:	f04f 30ff 	mov.w	r0, #4294967295
 800ae56:	4770      	bx	lr
 800ae58:	20001530 	.word	0x20001530

0800ae5c <_exit>:
 800ae5c:	e7fe      	b.n	800ae5c <_exit>
	...

0800ae60 <_init>:
 800ae60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae62:	bf00      	nop
 800ae64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae66:	bc08      	pop	{r3}
 800ae68:	469e      	mov	lr, r3
 800ae6a:	4770      	bx	lr

0800ae6c <_fini>:
 800ae6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae6e:	bf00      	nop
 800ae70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae72:	bc08      	pop	{r3}
 800ae74:	469e      	mov	lr, r3
 800ae76:	4770      	bx	lr
