
STM32CubeIDE-RealtimeOscilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017714  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ee8  080178e4  080178e4  000278e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000cc2  0801a7cc  0801a7cc  0002a7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000020  0801b490  0801b490  0002b490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0801b4b0  0801b4b0  000300ac  2**0
                  CONTENTS
  6 .ARM          00000008  0801b4b0  0801b4b0  0002b4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0801b4b8  0801b4b8  000300ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000024  0801b4b8  0801b4b8  0002b4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000018  0801b4dc  0801b4dc  0002b4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000000ac  20000000  0801b4f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001a94  200000ac  0801b5a0  000300ac  2**2
                  ALLOC
 12 ._user_heap_stack 00002000  20001b40  0801b5a0  00031b40  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   000bc430  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00016c0f  00000000  00000000  000ec50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00004368  00000000  00000000  00103120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003e88  00000000  00000000  00107488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ef1b  00000000  00000000  0010b310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0005e8f0  00000000  00000000  0014a22b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00137690  00000000  00000000  001a8b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000d2  00000000  00000000  002e01ab  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00013aa4  00000000  00000000  002e0280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080178cc 	.word	0x080178cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b0 	.word	0x200000b0
 800020c:	080178cc 	.word	0x080178cc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <_ZN17ButtonsController11getInstanceEv>:
                      interface::ButtonsControllerCallbackProvider::CallbackMethod> CallbackProvider;

    ButtonsController();
    virtual ~ButtonsController();

    static ButtonsController & getInstance() { assert(_pInstance); return *_pInstance; }    ///< Access to single instance
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <_ZN17ButtonsController11getInstanceEv+0x20>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d105      	bne.n	80005d0 <_ZN17ButtonsController11getInstanceEv+0x18>
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <_ZN17ButtonsController11getInstanceEv+0x24>)
 80005c6:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <_ZN17ButtonsController11getInstanceEv+0x28>)
 80005c8:	2119      	movs	r1, #25
 80005ca:	4806      	ldr	r0, [pc, #24]	; (80005e4 <_ZN17ButtonsController11getInstanceEv+0x2c>)
 80005cc:	f015 ff4e 	bl	801646c <__assert_func>
 80005d0:	4b01      	ldr	r3, [pc, #4]	; (80005d8 <_ZN17ButtonsController11getInstanceEv+0x20>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	2000101c 	.word	0x2000101c
 80005dc:	080178e4 	.word	0x080178e4
 80005e0:	080178f0 	.word	0x080178f0
 80005e4:	0801792c 	.word	0x0801792c

080005e8 <HAL_GPIO_EXTI_Callback>:

#include "stm32f7xx_hal.h"
#include "main.h"
#include "board/buttonscontroller.h"

extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	2b80      	cmp	r3, #128	; 0x80
 80005f6:	d009      	beq.n	800060c <HAL_GPIO_EXTI_Callback+0x24>
 80005f8:	2b80      	cmp	r3, #128	; 0x80
 80005fa:	dc10      	bgt.n	800061e <HAL_GPIO_EXTI_Callback+0x36>
 80005fc:	2b40      	cmp	r3, #64	; 0x40
 80005fe:	d005      	beq.n	800060c <HAL_GPIO_EXTI_Callback+0x24>
 8000600:	2b40      	cmp	r3, #64	; 0x40
 8000602:	dc0c      	bgt.n	800061e <HAL_GPIO_EXTI_Callback+0x36>
 8000604:	2b04      	cmp	r3, #4
 8000606:	d001      	beq.n	800060c <HAL_GPIO_EXTI_Callback+0x24>
 8000608:	2b08      	cmp	r3, #8
 800060a:	d108      	bne.n	800061e <HAL_GPIO_EXTI_Callback+0x36>
	case BUTTON0_Pin:
	case BUTTON1_Pin:
	case BUTTON2_Pin:
	case BUTTON3_Pin:
		ButtonsController::getInstance().onIrq();
 800060c:	f7ff ffd4 	bl	80005b8 <_ZN17ButtonsController11getInstanceEv>
 8000610:	4603      	mov	r3, r0
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	3208      	adds	r2, #8
 8000616:	6812      	ldr	r2, [r2, #0]
 8000618:	4618      	mov	r0, r3
 800061a:	4790      	blx	r2
		break;
 800061c:	e000      	b.n	8000620 <HAL_GPIO_EXTI_Callback+0x38>
	default:
		break;
 800061e:	bf00      	nop
	}
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <HAL_ADC_ConvCpltCallback>:

extern "C" void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	//volatile uint32_t value = HAL_ADC_GetValue(hadc);
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <HAL_TIM_OC_DelayElapsedCallback>:

extern "C" void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
			pinState = GPIO_PIN_RESET;
		}

		HAL_GPIO_WritePin(TEST_TIM1_GPIO_Port, TEST_TIM1_Pin, pinState);
	}*/
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f002 fa2b 	bl	8002aae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f832 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f000 ff4c 	bl	80014f8 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000660:	f000 f8e6 	bl	8000830 <MX_ADC3_Init>
  MX_CRC_Init();
 8000664:	f000 f936 	bl	80008d4 <MX_CRC_Init>
  MX_DCMI_Init();
 8000668:	f000 f956 	bl	8000918 <MX_DCMI_Init>
  MX_DMA2D_Init();
 800066c:	f000 f988 	bl	8000980 <MX_DMA2D_Init>
  MX_I2C3_Init();
 8000670:	f000 f9b8 	bl	80009e4 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000674:	f000 f9f6 	bl	8000a64 <MX_LTDC_Init>
  MX_RTC_Init();
 8000678:	f000 fa76 	bl	8000b68 <MX_RTC_Init>
  MX_SAI2_Init();
 800067c:	f000 fb1a 	bl	8000cb4 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 8000680:	f000 fbc0 	bl	8000e04 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000684:	f000 fbee 	bl	8000e64 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000688:	f000 fc2a 	bl	8000ee0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800068c:	f000 fcd4 	bl	8001038 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000690:	f000 fd48 	bl	8001124 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000694:	f000 fdbe 	bl	8001214 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000698:	f000 fe34 	bl	8001304 <MX_TIM8_Init>
  MX_TIM12_Init();
 800069c:	f000 fe86 	bl	80013ac <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80006a0:	f000 feca 	bl	8001438 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80006a4:	f000 fef8 	bl	8001498 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80006a8:	2100      	movs	r1, #0
 80006aa:	4803      	ldr	r0, [pc, #12]	; (80006b8 <main+0x68>)
 80006ac:	f007 fcbe 	bl	800802c <HAL_TIM_OC_Start_IT>
  HAL_ADC_Start_IT(&hadc3);
 80006b0:	4802      	ldr	r0, [pc, #8]	; (80006bc <main+0x6c>)
 80006b2:	f002 fa6d 	bl	8002b90 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <main+0x66>
 80006b8:	20001a48 	.word	0x20001a48
 80006bc:	200017b0 	.word	0x200017b0

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b0b4      	sub	sp, #208	; 0xd0
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f015 ff64 	bl	801659c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2284      	movs	r2, #132	; 0x84
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f015 ff55 	bl	801659c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006f2:	f004 ffc5 	bl	8005680 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f6:	4b4b      	ldr	r3, [pc, #300]	; (8000824 <SystemClock_Config+0x164>)
 80006f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fa:	4a4a      	ldr	r2, [pc, #296]	; (8000824 <SystemClock_Config+0x164>)
 80006fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000700:	6413      	str	r3, [r2, #64]	; 0x40
 8000702:	4b48      	ldr	r3, [pc, #288]	; (8000824 <SystemClock_Config+0x164>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070e:	4b46      	ldr	r3, [pc, #280]	; (8000828 <SystemClock_Config+0x168>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a45      	ldr	r2, [pc, #276]	; (8000828 <SystemClock_Config+0x168>)
 8000714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000718:	6013      	str	r3, [r2, #0]
 800071a:	4b43      	ldr	r3, [pc, #268]	; (8000828 <SystemClock_Config+0x168>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000726:	2309      	movs	r3, #9
 8000728:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000730:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000740:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000744:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000748:	2319      	movs	r3, #25
 800074a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800074e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000752:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000756:	2302      	movs	r3, #2
 8000758:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800075c:	2309      	movs	r3, #9
 800075e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000762:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000766:	4618      	mov	r0, r3
 8000768:	f004 ffea 	bl	8005740 <HAL_RCC_OscConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000772:	f001 f9f1 	bl	8001b58 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000776:	f004 ff93 	bl	80056a0 <HAL_PWREx_EnableOverDrive>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000780:	f001 f9ea 	bl	8001b58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2302      	movs	r3, #2
 800078c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000796:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800079a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800079e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80007a6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007aa:	2106      	movs	r1, #6
 80007ac:	4618      	mov	r0, r3
 80007ae:	f005 fa6b 	bl	8005c88 <HAL_RCC_ClockConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80007b8:	f001 f9ce 	bl	8001b58 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <SystemClock_Config+0x16c>)
 80007be:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80007c0:	2364      	movs	r3, #100	; 0x64
 80007c2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80007d0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007d4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80007d6:	2305      	movs	r3, #5
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80007da:	2302      	movs	r3, #2
 80007dc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80007de:	2303      	movs	r3, #3
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80007e2:	2301      	movs	r3, #1
 80007e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80007ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007ee:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80007f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007f4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80007f6:	2300      	movs	r3, #0
 80007f8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007fa:	2300      	movs	r3, #0
 80007fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80007fe:	2300      	movs	r3, #0
 8000800:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000802:	2300      	movs	r3, #0
 8000804:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	4618      	mov	r0, r3
 800080c:	f005 fc44 	bl	8006098 <HAL_RCCEx_PeriphCLKConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x15a>
  {
    Error_Handler();
 8000816:	f001 f99f 	bl	8001b58 <Error_Handler>
  }
}
 800081a:	bf00      	nop
 800081c:	37d0      	adds	r7, #208	; 0xd0
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800
 8000828:	40007000 	.word	0x40007000
 800082c:	01110868 	.word	0x01110868

08000830 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000836:	463b      	mov	r3, r7
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000842:	4b22      	ldr	r3, [pc, #136]	; (80008cc <MX_ADC3_Init+0x9c>)
 8000844:	4a22      	ldr	r2, [pc, #136]	; (80008d0 <MX_ADC3_Init+0xa0>)
 8000846:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000848:	4b20      	ldr	r3, [pc, #128]	; (80008cc <MX_ADC3_Init+0x9c>)
 800084a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800084e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000850:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <MX_ADC3_Init+0x9c>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_ADC3_Init+0x9c>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_ADC3_Init+0x9c>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_ADC3_Init+0x9c>)
 8000864:	2200      	movs	r2, #0
 8000866:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_ADC3_Init+0x9c>)
 800086c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000870:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_ADC3_Init+0x9c>)
 8000874:	2200      	movs	r2, #0
 8000876:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_ADC3_Init+0x9c>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_ADC3_Init+0x9c>)
 8000880:	2201      	movs	r2, #1
 8000882:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_ADC3_Init+0x9c>)
 8000886:	2200      	movs	r2, #0
 8000888:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_ADC3_Init+0x9c>)
 800088e:	2201      	movs	r2, #1
 8000890:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000892:	480e      	ldr	r0, [pc, #56]	; (80008cc <MX_ADC3_Init+0x9c>)
 8000894:	f002 f938 	bl	8002b08 <HAL_ADC_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_ADC3_Init+0x72>
  {
    Error_Handler();
 800089e:	f001 f95b 	bl	8001b58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008ae:	463b      	mov	r3, r7
 80008b0:	4619      	mov	r1, r3
 80008b2:	4806      	ldr	r0, [pc, #24]	; (80008cc <MX_ADC3_Init+0x9c>)
 80008b4:	f002 fb9a 	bl	8002fec <HAL_ADC_ConfigChannel>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC3_Init+0x92>
  {
    Error_Handler();
 80008be:	f001 f94b 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200017b0 	.word	0x200017b0
 80008d0:	40012200 	.word	0x40012200

080008d4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008d8:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <MX_CRC_Init+0x3c>)
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <MX_CRC_Init+0x40>)
 80008dc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_CRC_Init+0x3c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <MX_CRC_Init+0x3c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_CRC_Init+0x3c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <MX_CRC_Init+0x3c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_CRC_Init+0x3c>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_CRC_Init+0x3c>)
 80008fe:	f002 fea5 	bl	800364c <HAL_CRC_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000908:	f001 f926 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000178c 	.word	0x2000178c
 8000914:	40023000 	.word	0x40023000

08000918 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_DCMI_Init+0x60>)
 800091e:	4a17      	ldr	r2, [pc, #92]	; (800097c <MX_DCMI_Init+0x64>)
 8000920:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_DCMI_Init+0x60>)
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <MX_DCMI_Init+0x60>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_DCMI_Init+0x60>)
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000934:	4b10      	ldr	r3, [pc, #64]	; (8000978 <MX_DCMI_Init+0x60>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_DCMI_Init+0x60>)
 800093c:	2200      	movs	r2, #0
 800093e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <MX_DCMI_Init+0x60>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_DCMI_Init+0x60>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <MX_DCMI_Init+0x60>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_DCMI_Init+0x60>)
 8000954:	2200      	movs	r2, #0
 8000956:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <MX_DCMI_Init+0x60>)
 800095a:	2200      	movs	r2, #0
 800095c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_DCMI_Init+0x60>)
 8000960:	2200      	movs	r2, #0
 8000962:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_DCMI_Init+0x60>)
 8000966:	f002 ff5b 	bl	8003820 <HAL_DCMI_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000970:	f001 f8f2 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200019f8 	.word	0x200019f8
 800097c:	50050000 	.word	0x50050000

08000980 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <MX_DMA2D_Init+0x5c>)
 8000986:	4a16      	ldr	r2, [pc, #88]	; (80009e0 <MX_DMA2D_Init+0x60>)
 8000988:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_DMA2D_Init+0x5c>)
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <MX_DMA2D_Init+0x5c>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_DMA2D_Init+0x5c>)
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_DMA2D_Init+0x5c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_DMA2D_Init+0x5c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_DMA2D_Init+0x5c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_DMA2D_Init+0x5c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009b4:	4809      	ldr	r0, [pc, #36]	; (80009dc <MX_DMA2D_Init+0x5c>)
 80009b6:	f003 f83b 	bl	8003a30 <HAL_DMA2D_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80009c0:	f001 f8ca 	bl	8001b58 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009c4:	2101      	movs	r1, #1
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_DMA2D_Init+0x5c>)
 80009c8:	f003 f98c 	bl	8003ce4 <HAL_DMA2D_ConfigLayer>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80009d2:	f001 f8c1 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20001574 	.word	0x20001574
 80009e0:	4002b000 	.word	0x4002b000

080009e4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_I2C3_Init+0x74>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <MX_I2C3_Init+0x78>)
 80009ec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_I2C3_Init+0x74>)
 80009f0:	4a1b      	ldr	r2, [pc, #108]	; (8000a60 <MX_I2C3_Init+0x7c>)
 80009f2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_I2C3_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_I2C3_Init+0x74>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <MX_I2C3_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_I2C3_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_I2C3_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_I2C3_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_I2C3_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a1e:	480e      	ldr	r0, [pc, #56]	; (8000a58 <MX_I2C3_Init+0x74>)
 8000a20:	f003 fcf4 	bl	800440c <HAL_I2C_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000a2a:	f001 f895 	bl	8001b58 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4809      	ldr	r0, [pc, #36]	; (8000a58 <MX_I2C3_Init+0x74>)
 8000a32:	f004 f9f5 	bl	8004e20 <HAL_I2CEx_ConfigAnalogFilter>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000a3c:	f001 f88c 	bl	8001b58 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a40:	2100      	movs	r1, #0
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_I2C3_Init+0x74>)
 8000a44:	f004 fa37 	bl	8004eb6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000a4e:	f001 f883 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200015b4 	.word	0x200015b4
 8000a5c:	40005c00 	.word	0x40005c00
 8000a60:	00c0eaff 	.word	0x00c0eaff

08000a64 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08e      	sub	sp, #56	; 0x38
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2234      	movs	r2, #52	; 0x34
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f015 fd93 	bl	801659c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000a76:	4b3a      	ldr	r3, [pc, #232]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000a78:	4a3a      	ldr	r2, [pc, #232]	; (8000b64 <MX_LTDC_Init+0x100>)
 8000a7a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a7c:	4b38      	ldr	r3, [pc, #224]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a82:	4b37      	ldr	r3, [pc, #220]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a88:	4b35      	ldr	r3, [pc, #212]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a8e:	4b34      	ldr	r3, [pc, #208]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000a94:	4b32      	ldr	r3, [pc, #200]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000a96:	2228      	movs	r2, #40	; 0x28
 8000a98:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000a9a:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000a9c:	2209      	movs	r2, #9
 8000a9e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000aa0:	4b2f      	ldr	r3, [pc, #188]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000aa2:	2235      	movs	r2, #53	; 0x35
 8000aa4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000aa6:	4b2e      	ldr	r3, [pc, #184]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000aa8:	220b      	movs	r2, #11
 8000aaa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000aac:	4b2c      	ldr	r3, [pc, #176]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000aae:	f240 2215 	movw	r2, #533	; 0x215
 8000ab2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000ab4:	4b2a      	ldr	r3, [pc, #168]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000ab6:	f240 121b 	movw	r2, #283	; 0x11b
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000abc:	4b28      	ldr	r3, [pc, #160]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000abe:	f240 2235 	movw	r2, #565	; 0x235
 8000ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000ac4:	4b26      	ldr	r3, [pc, #152]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000ac6:	f240 121d 	movw	r2, #285	; 0x11d
 8000aca:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000acc:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000adc:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ae4:	481e      	ldr	r0, [pc, #120]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000ae6:	f004 fa33 	bl	8004f50 <HAL_LTDC_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000af0:	f001 f832 	bl	8001b58 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000af8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000afc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000b02:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b06:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000b0c:	23ff      	movs	r3, #255	; 0xff
 8000b0e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b14:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b18:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000b1e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000b24:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000b2a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b2e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2200      	movs	r2, #0
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_LTDC_Init+0xfc>)
 8000b4a:	f004 fb89 	bl	8005260 <HAL_LTDC_ConfigLayer>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000b54:	f001 f800 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	3738      	adds	r7, #56	; 0x38
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20001468 	.word	0x20001468
 8000b64:	40016800 	.word	0x40016800

08000b68 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b092      	sub	sp, #72	; 0x48
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]
 8000b7e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000b84:	463b      	mov	r3, r7
 8000b86:	222c      	movs	r2, #44	; 0x2c
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f015 fd06 	bl	801659c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b90:	4b46      	ldr	r3, [pc, #280]	; (8000cac <MX_RTC_Init+0x144>)
 8000b92:	4a47      	ldr	r2, [pc, #284]	; (8000cb0 <MX_RTC_Init+0x148>)
 8000b94:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b96:	4b45      	ldr	r3, [pc, #276]	; (8000cac <MX_RTC_Init+0x144>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b9c:	4b43      	ldr	r3, [pc, #268]	; (8000cac <MX_RTC_Init+0x144>)
 8000b9e:	227f      	movs	r2, #127	; 0x7f
 8000ba0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ba2:	4b42      	ldr	r3, [pc, #264]	; (8000cac <MX_RTC_Init+0x144>)
 8000ba4:	22ff      	movs	r2, #255	; 0xff
 8000ba6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ba8:	4b40      	ldr	r3, [pc, #256]	; (8000cac <MX_RTC_Init+0x144>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bae:	4b3f      	ldr	r3, [pc, #252]	; (8000cac <MX_RTC_Init+0x144>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bb4:	4b3d      	ldr	r3, [pc, #244]	; (8000cac <MX_RTC_Init+0x144>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000bba:	483c      	ldr	r0, [pc, #240]	; (8000cac <MX_RTC_Init+0x144>)
 8000bbc:	f005 ffa0 	bl	8006b00 <HAL_RTC_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000bc6:	f000 ffc7 	bl	8001b58 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000be0:	2300      	movs	r3, #0
 8000be2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000be4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000be8:	2201      	movs	r2, #1
 8000bea:	4619      	mov	r1, r3
 8000bec:	482f      	ldr	r0, [pc, #188]	; (8000cac <MX_RTC_Init+0x144>)
 8000bee:	f006 f819 	bl	8006c24 <HAL_RTC_SetTime>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000bf8:	f000 ffae 	bl	8001b58 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000c02:	2301      	movs	r3, #1
 8000c04:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4823      	ldr	r0, [pc, #140]	; (8000cac <MX_RTC_Init+0x144>)
 8000c1e:	f006 f8bf 	bl	8006da0 <HAL_RTC_SetDate>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000c28:	f000 ff96 	bl	8001b58 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000c50:	2301      	movs	r3, #1
 8000c52:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000c56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4619      	mov	r1, r3
 8000c62:	4812      	ldr	r0, [pc, #72]	; (8000cac <MX_RTC_Init+0x144>)
 8000c64:	f006 f944 	bl	8006ef0 <HAL_RTC_SetAlarm>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000c6e:	f000 ff73 	bl	8001b58 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000c72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c78:	463b      	mov	r3, r7
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480b      	ldr	r0, [pc, #44]	; (8000cac <MX_RTC_Init+0x144>)
 8000c80:	f006 f936 	bl	8006ef0 <HAL_RTC_SetAlarm>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000c8a:	f000 ff65 	bl	8001b58 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000c8e:	2202      	movs	r2, #2
 8000c90:	2100      	movs	r1, #0
 8000c92:	4806      	ldr	r0, [pc, #24]	; (8000cac <MX_RTC_Init+0x144>)
 8000c94:	f006 fab6 	bl	8007204 <HAL_RTCEx_SetTimeStamp>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000c9e:	f000 ff5b 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	3748      	adds	r7, #72	; 0x48
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20001448 	.word	0x20001448
 8000cb0:	40002800 	.word	0x40002800

08000cb4 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000cb8:	4b4d      	ldr	r3, [pc, #308]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000cba:	4a4e      	ldr	r2, [pc, #312]	; (8000df4 <MX_SAI2_Init+0x140>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000cbe:	4b4c      	ldr	r3, [pc, #304]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000cc4:	4b4a      	ldr	r3, [pc, #296]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000cca:	4b49      	ldr	r3, [pc, #292]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000ccc:	2240      	movs	r2, #64	; 0x40
 8000cce:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000cd0:	4b47      	ldr	r3, [pc, #284]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000cd6:	4b46      	ldr	r3, [pc, #280]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000cdc:	4b44      	ldr	r3, [pc, #272]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ce2:	4b43      	ldr	r3, [pc, #268]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000ce8:	4b41      	ldr	r3, [pc, #260]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000cee:	4b40      	ldr	r3, [pc, #256]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000cf4:	4b3e      	ldr	r3, [pc, #248]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000cf6:	4a40      	ldr	r2, [pc, #256]	; (8000df8 <MX_SAI2_Init+0x144>)
 8000cf8:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000cfa:	4b3d      	ldr	r3, [pc, #244]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d00:	4b3b      	ldr	r3, [pc, #236]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d06:	4b3a      	ldr	r3, [pc, #232]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d0c:	4b38      	ldr	r3, [pc, #224]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000d12:	4b37      	ldr	r3, [pc, #220]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000d14:	2208      	movs	r2, #8
 8000d16:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000d18:	4b35      	ldr	r3, [pc, #212]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d1e:	4b34      	ldr	r3, [pc, #208]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d24:	4b32      	ldr	r3, [pc, #200]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d2a:	4b31      	ldr	r3, [pc, #196]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000d30:	4b2f      	ldr	r3, [pc, #188]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d36:	4b2e      	ldr	r3, [pc, #184]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000d3c:	4b2c      	ldr	r3, [pc, #176]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000d42:	4b2b      	ldr	r3, [pc, #172]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000d48:	4829      	ldr	r0, [pc, #164]	; (8000df0 <MX_SAI2_Init+0x13c>)
 8000d4a:	f006 fab1 	bl	80072b0 <HAL_SAI_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000d54:	f000 ff00 	bl	8001b58 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000d58:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <MX_SAI2_Init+0x148>)
 8000d5a:	4a29      	ldr	r2, [pc, #164]	; (8000e00 <MX_SAI2_Init+0x14c>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d5e:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <MX_SAI2_Init+0x148>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000d64:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <MX_SAI2_Init+0x148>)
 8000d66:	2203      	movs	r2, #3
 8000d68:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000d6a:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <MX_SAI2_Init+0x148>)
 8000d6c:	2240      	movs	r2, #64	; 0x40
 8000d6e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d70:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <MX_SAI2_Init+0x148>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d76:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <MX_SAI2_Init+0x148>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000d7c:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <MX_SAI2_Init+0x148>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d82:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <MX_SAI2_Init+0x148>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d88:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <MX_SAI2_Init+0x148>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d8e:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <MX_SAI2_Init+0x148>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d94:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <MX_SAI2_Init+0x148>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <MX_SAI2_Init+0x148>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <MX_SAI2_Init+0x148>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <MX_SAI2_Init+0x148>)
 8000da8:	2208      	movs	r2, #8
 8000daa:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000dac:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <MX_SAI2_Init+0x148>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000db2:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_SAI2_Init+0x148>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000db8:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <MX_SAI2_Init+0x148>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_SAI2_Init+0x148>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <MX_SAI2_Init+0x148>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_SAI2_Init+0x148>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <MX_SAI2_Init+0x148>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_SAI2_Init+0x148>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000ddc:	4807      	ldr	r0, [pc, #28]	; (8000dfc <MX_SAI2_Init+0x148>)
 8000dde:	f006 fa67 	bl	80072b0 <HAL_SAI_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000de8:	f000 feb6 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20001684 	.word	0x20001684
 8000df4:	40015c04 	.word	0x40015c04
 8000df8:	0002ee00 	.word	0x0002ee00
 8000dfc:	20001600 	.word	0x20001600
 8000e00:	40015c24 	.word	0x40015c24

08000e04 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <MX_SPDIFRX_Init+0x5c>)
 8000e0a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000e0e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <MX_SPDIFRX_Init+0x5c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_SPDIFRX_Init+0x5c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000e1c:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <MX_SPDIFRX_Init+0x5c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_SPDIFRX_Init+0x5c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000e28:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <MX_SPDIFRX_Init+0x5c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_SPDIFRX_Init+0x5c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <MX_SPDIFRX_Init+0x5c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_SPDIFRX_Init+0x5c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000e40:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <MX_SPDIFRX_Init+0x5c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_SPDIFRX_Init+0x5c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <MX_SPDIFRX_Init+0x5c>)
 8000e4e:	f006 fbe5 	bl	800761c <HAL_SPDIFRX_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000e58:	f000 fe7e 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	200018c8 	.word	0x200018c8

08000e64 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <MX_SPI2_Init+0x74>)
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <MX_SPI2_Init+0x78>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_SPI2_Init+0x74>)
 8000e70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_SPI2_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <MX_SPI2_Init+0x74>)
 8000e7e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e82:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_SPI2_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <MX_SPI2_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_SPI2_Init+0x74>)
 8000e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e96:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_SPI2_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <MX_SPI2_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_SPI2_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <MX_SPI2_Init+0x74>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_SPI2_Init+0x74>)
 8000eb2:	2207      	movs	r2, #7
 8000eb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <MX_SPI2_Init+0x74>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_SPI2_Init+0x74>)
 8000ebe:	2208      	movs	r2, #8
 8000ec0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MX_SPI2_Init+0x74>)
 8000ec4:	f006 fc06 	bl	80076d4 <HAL_SPI_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000ece:	f000 fe43 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20001510 	.word	0x20001510
 8000edc:	40003800 	.word	0x40003800

08000ee0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b09a      	sub	sp, #104	; 0x68
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
 8000f10:	615a      	str	r2, [r3, #20]
 8000f12:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	222c      	movs	r2, #44	; 0x2c
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f015 fb3e 	bl	801659c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f20:	4b43      	ldr	r3, [pc, #268]	; (8001030 <MX_TIM1_Init+0x150>)
 8000f22:	4a44      	ldr	r2, [pc, #272]	; (8001034 <MX_TIM1_Init+0x154>)
 8000f24:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200;
 8000f26:	4b42      	ldr	r3, [pc, #264]	; (8001030 <MX_TIM1_Init+0x150>)
 8000f28:	22c8      	movs	r2, #200	; 0xc8
 8000f2a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2c:	4b40      	ldr	r3, [pc, #256]	; (8001030 <MX_TIM1_Init+0x150>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000f32:	4b3f      	ldr	r3, [pc, #252]	; (8001030 <MX_TIM1_Init+0x150>)
 8000f34:	2264      	movs	r2, #100	; 0x64
 8000f36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f38:	4b3d      	ldr	r3, [pc, #244]	; (8001030 <MX_TIM1_Init+0x150>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f3e:	4b3c      	ldr	r3, [pc, #240]	; (8001030 <MX_TIM1_Init+0x150>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f44:	4b3a      	ldr	r3, [pc, #232]	; (8001030 <MX_TIM1_Init+0x150>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f4a:	4839      	ldr	r0, [pc, #228]	; (8001030 <MX_TIM1_Init+0x150>)
 8000f4c:	f006 ff3c 	bl	8007dc8 <HAL_TIM_Base_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f56:	f000 fdff 	bl	8001b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f64:	4619      	mov	r1, r3
 8000f66:	4832      	ldr	r0, [pc, #200]	; (8001030 <MX_TIM1_Init+0x150>)
 8000f68:	f007 fc9c 	bl	80088a4 <HAL_TIM_ConfigClockSource>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f72:	f000 fdf1 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000f76:	482e      	ldr	r0, [pc, #184]	; (8001030 <MX_TIM1_Init+0x150>)
 8000f78:	f006 fff6 	bl	8007f68 <HAL_TIM_OC_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000f82:	f000 fde9 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f86:	2300      	movs	r3, #0
 8000f88:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f96:	4619      	mov	r1, r3
 8000f98:	4825      	ldr	r0, [pc, #148]	; (8001030 <MX_TIM1_Init+0x150>)
 8000f9a:	f008 f925 	bl	80091e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000fa4:	f000 fdd8 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000fa8:	2330      	movs	r3, #48	; 0x30
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4818      	ldr	r0, [pc, #96]	; (8001030 <MX_TIM1_Init+0x150>)
 8000fce:	f007 fae3 	bl	8008598 <HAL_TIM_OC_ConfigChannel>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000fd8:	f000 fdbe 	bl	8001b58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ff0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ffe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	4619      	mov	r1, r3
 8001010:	4807      	ldr	r0, [pc, #28]	; (8001030 <MX_TIM1_Init+0x150>)
 8001012:	f008 f977 	bl	8009304 <HAL_TIMEx_ConfigBreakDeadTime>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800101c:	f000 fd9c 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001020:	4803      	ldr	r0, [pc, #12]	; (8001030 <MX_TIM1_Init+0x150>)
 8001022:	f001 f9a9 	bl	8002378 <HAL_TIM_MspPostInit>

}
 8001026:	bf00      	nop
 8001028:	3768      	adds	r7, #104	; 0x68
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20001a48 	.word	0x20001a48
 8001034:	40010000 	.word	0x40010000

08001038 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08e      	sub	sp, #56	; 0x38
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001058:	463b      	mov	r3, r7
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]
 8001066:	615a      	str	r2, [r3, #20]
 8001068:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800106a:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <MX_TIM2_Init+0xe8>)
 800106c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001070:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001072:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <MX_TIM2_Init+0xe8>)
 8001074:	2200      	movs	r2, #0
 8001076:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001078:	4b29      	ldr	r3, [pc, #164]	; (8001120 <MX_TIM2_Init+0xe8>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800107e:	4b28      	ldr	r3, [pc, #160]	; (8001120 <MX_TIM2_Init+0xe8>)
 8001080:	f04f 32ff 	mov.w	r2, #4294967295
 8001084:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001086:	4b26      	ldr	r3, [pc, #152]	; (8001120 <MX_TIM2_Init+0xe8>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108c:	4b24      	ldr	r3, [pc, #144]	; (8001120 <MX_TIM2_Init+0xe8>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001092:	4823      	ldr	r0, [pc, #140]	; (8001120 <MX_TIM2_Init+0xe8>)
 8001094:	f006 fe98 	bl	8007dc8 <HAL_TIM_Base_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800109e:	f000 fd5b 	bl	8001b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ac:	4619      	mov	r1, r3
 80010ae:	481c      	ldr	r0, [pc, #112]	; (8001120 <MX_TIM2_Init+0xe8>)
 80010b0:	f007 fbf8 	bl	80088a4 <HAL_TIM_ConfigClockSource>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80010ba:	f000 fd4d 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010be:	4818      	ldr	r0, [pc, #96]	; (8001120 <MX_TIM2_Init+0xe8>)
 80010c0:	f007 f8f4 	bl	80082ac <HAL_TIM_PWM_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80010ca:	f000 fd45 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	4619      	mov	r1, r3
 80010dc:	4810      	ldr	r0, [pc, #64]	; (8001120 <MX_TIM2_Init+0xe8>)
 80010de:	f008 f883 	bl	80091e8 <HAL_TIMEx_MasterConfigSynchronization>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80010e8:	f000 fd36 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ec:	2360      	movs	r3, #96	; 0x60
 80010ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010fc:	463b      	mov	r3, r7
 80010fe:	2200      	movs	r2, #0
 8001100:	4619      	mov	r1, r3
 8001102:	4807      	ldr	r0, [pc, #28]	; (8001120 <MX_TIM2_Init+0xe8>)
 8001104:	f007 fabe 	bl	8008684 <HAL_TIM_PWM_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800110e:	f000 fd23 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001112:	4803      	ldr	r0, [pc, #12]	; (8001120 <MX_TIM2_Init+0xe8>)
 8001114:	f001 f930 	bl	8002378 <HAL_TIM_MspPostInit>

}
 8001118:	bf00      	nop
 800111a:	3738      	adds	r7, #56	; 0x38
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20001960 	.word	0x20001960

08001124 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08e      	sub	sp, #56	; 0x38
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001144:	463b      	mov	r3, r7
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]
 8001152:	615a      	str	r2, [r3, #20]
 8001154:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001156:	4b2d      	ldr	r3, [pc, #180]	; (800120c <MX_TIM3_Init+0xe8>)
 8001158:	4a2d      	ldr	r2, [pc, #180]	; (8001210 <MX_TIM3_Init+0xec>)
 800115a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800115c:	4b2b      	ldr	r3, [pc, #172]	; (800120c <MX_TIM3_Init+0xe8>)
 800115e:	2200      	movs	r2, #0
 8001160:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001162:	4b2a      	ldr	r3, [pc, #168]	; (800120c <MX_TIM3_Init+0xe8>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001168:	4b28      	ldr	r3, [pc, #160]	; (800120c <MX_TIM3_Init+0xe8>)
 800116a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800116e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001170:	4b26      	ldr	r3, [pc, #152]	; (800120c <MX_TIM3_Init+0xe8>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001176:	4b25      	ldr	r3, [pc, #148]	; (800120c <MX_TIM3_Init+0xe8>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800117c:	4823      	ldr	r0, [pc, #140]	; (800120c <MX_TIM3_Init+0xe8>)
 800117e:	f006 fe23 	bl	8007dc8 <HAL_TIM_Base_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001188:	f000 fce6 	bl	8001b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800118c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001196:	4619      	mov	r1, r3
 8001198:	481c      	ldr	r0, [pc, #112]	; (800120c <MX_TIM3_Init+0xe8>)
 800119a:	f007 fb83 	bl	80088a4 <HAL_TIM_ConfigClockSource>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80011a4:	f000 fcd8 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011a8:	4818      	ldr	r0, [pc, #96]	; (800120c <MX_TIM3_Init+0xe8>)
 80011aa:	f007 f87f 	bl	80082ac <HAL_TIM_PWM_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80011b4:	f000 fcd0 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4619      	mov	r1, r3
 80011c6:	4811      	ldr	r0, [pc, #68]	; (800120c <MX_TIM3_Init+0xe8>)
 80011c8:	f008 f80e 	bl	80091e8 <HAL_TIMEx_MasterConfigSynchronization>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80011d2:	f000 fcc1 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d6:	2360      	movs	r3, #96	; 0x60
 80011d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011e6:	463b      	mov	r3, r7
 80011e8:	2200      	movs	r2, #0
 80011ea:	4619      	mov	r1, r3
 80011ec:	4807      	ldr	r0, [pc, #28]	; (800120c <MX_TIM3_Init+0xe8>)
 80011ee:	f007 fa49 	bl	8008684 <HAL_TIM_PWM_ConfigChannel>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80011f8:	f000 fcae 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011fc:	4803      	ldr	r0, [pc, #12]	; (800120c <MX_TIM3_Init+0xe8>)
 80011fe:	f001 f8bb 	bl	8002378 <HAL_TIM_MspPostInit>

}
 8001202:	bf00      	nop
 8001204:	3738      	adds	r7, #56	; 0x38
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200019ac 	.word	0x200019ac
 8001210:	40000400 	.word	0x40000400

08001214 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08e      	sub	sp, #56	; 0x38
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001234:	463b      	mov	r3, r7
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]
 8001242:	615a      	str	r2, [r3, #20]
 8001244:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001246:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <MX_TIM5_Init+0xe8>)
 8001248:	4a2d      	ldr	r2, [pc, #180]	; (8001300 <MX_TIM5_Init+0xec>)
 800124a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800124c:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <MX_TIM5_Init+0xe8>)
 800124e:	2200      	movs	r2, #0
 8001250:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001252:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <MX_TIM5_Init+0xe8>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001258:	4b28      	ldr	r3, [pc, #160]	; (80012fc <MX_TIM5_Init+0xe8>)
 800125a:	f04f 32ff 	mov.w	r2, #4294967295
 800125e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001260:	4b26      	ldr	r3, [pc, #152]	; (80012fc <MX_TIM5_Init+0xe8>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001266:	4b25      	ldr	r3, [pc, #148]	; (80012fc <MX_TIM5_Init+0xe8>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800126c:	4823      	ldr	r0, [pc, #140]	; (80012fc <MX_TIM5_Init+0xe8>)
 800126e:	f006 fdab 	bl	8007dc8 <HAL_TIM_Base_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001278:	f000 fc6e 	bl	8001b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001286:	4619      	mov	r1, r3
 8001288:	481c      	ldr	r0, [pc, #112]	; (80012fc <MX_TIM5_Init+0xe8>)
 800128a:	f007 fb0b 	bl	80088a4 <HAL_TIM_ConfigClockSource>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001294:	f000 fc60 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001298:	4818      	ldr	r0, [pc, #96]	; (80012fc <MX_TIM5_Init+0xe8>)
 800129a:	f007 f807 	bl	80082ac <HAL_TIM_PWM_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80012a4:	f000 fc58 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	4811      	ldr	r0, [pc, #68]	; (80012fc <MX_TIM5_Init+0xe8>)
 80012b8:	f007 ff96 	bl	80091e8 <HAL_TIMEx_MasterConfigSynchronization>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80012c2:	f000 fc49 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c6:	2360      	movs	r3, #96	; 0x60
 80012c8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012d6:	463b      	mov	r3, r7
 80012d8:	220c      	movs	r2, #12
 80012da:	4619      	mov	r1, r3
 80012dc:	4807      	ldr	r0, [pc, #28]	; (80012fc <MX_TIM5_Init+0xe8>)
 80012de:	f007 f9d1 	bl	8008684 <HAL_TIM_PWM_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80012e8:	f000 fc36 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80012ec:	4803      	ldr	r0, [pc, #12]	; (80012fc <MX_TIM5_Init+0xe8>)
 80012ee:	f001 f843 	bl	8002378 <HAL_TIM_MspPostInit>

}
 80012f2:	bf00      	nop
 80012f4:	3738      	adds	r7, #56	; 0x38
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20001914 	.word	0x20001914
 8001300:	40000c00 	.word	0x40000c00

08001304 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130a:	f107 0310 	add.w	r3, r7, #16
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001322:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <MX_TIM8_Init+0xa0>)
 8001324:	4a20      	ldr	r2, [pc, #128]	; (80013a8 <MX_TIM8_Init+0xa4>)
 8001326:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001328:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <MX_TIM8_Init+0xa0>)
 800132a:	2200      	movs	r2, #0
 800132c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <MX_TIM8_Init+0xa0>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <MX_TIM8_Init+0xa0>)
 8001336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800133a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <MX_TIM8_Init+0xa0>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <MX_TIM8_Init+0xa0>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001348:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <MX_TIM8_Init+0xa0>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800134e:	4815      	ldr	r0, [pc, #84]	; (80013a4 <MX_TIM8_Init+0xa0>)
 8001350:	f006 fd3a 	bl	8007dc8 <HAL_TIM_Base_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800135a:	f000 fbfd 	bl	8001b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001362:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	4619      	mov	r1, r3
 800136a:	480e      	ldr	r0, [pc, #56]	; (80013a4 <MX_TIM8_Init+0xa0>)
 800136c:	f007 fa9a 	bl	80088a4 <HAL_TIM_ConfigClockSource>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001376:	f000 fbef 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	4619      	mov	r1, r3
 800138a:	4806      	ldr	r0, [pc, #24]	; (80013a4 <MX_TIM8_Init+0xa0>)
 800138c:	f007 ff2c 	bl	80091e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001396:	f000 fbdf 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	3720      	adds	r7, #32
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20001a94 	.word	0x20001a94
 80013a8:	40010400 	.word	0x40010400

080013ac <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
 80013c0:	615a      	str	r2, [r3, #20]
 80013c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80013c4:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <MX_TIM12_Init+0x84>)
 80013c6:	4a1b      	ldr	r2, [pc, #108]	; (8001434 <MX_TIM12_Init+0x88>)
 80013c8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80013ca:	4b19      	ldr	r3, [pc, #100]	; (8001430 <MX_TIM12_Init+0x84>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <MX_TIM12_Init+0x84>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <MX_TIM12_Init+0x84>)
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <MX_TIM12_Init+0x84>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <MX_TIM12_Init+0x84>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80013ea:	4811      	ldr	r0, [pc, #68]	; (8001430 <MX_TIM12_Init+0x84>)
 80013ec:	f006 ff5e 	bl	80082ac <HAL_TIM_PWM_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80013f6:	f000 fbaf 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013fa:	2360      	movs	r3, #96	; 0x60
 80013fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2200      	movs	r2, #0
 800140e:	4619      	mov	r1, r3
 8001410:	4807      	ldr	r0, [pc, #28]	; (8001430 <MX_TIM12_Init+0x84>)
 8001412:	f007 f937 	bl	8008684 <HAL_TIM_PWM_ConfigChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800141c:	f000 fb9c 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001420:	4803      	ldr	r0, [pc, #12]	; (8001430 <MX_TIM12_Init+0x84>)
 8001422:	f000 ffa9 	bl	8002378 <HAL_TIM_MspPostInit>

}
 8001426:	bf00      	nop
 8001428:	3720      	adds	r7, #32
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200017f8 	.word	0x200017f8
 8001434:	40001800 	.word	0x40001800

08001438 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <MX_USART1_UART_Init+0x58>)
 800143e:	4a15      	ldr	r2, [pc, #84]	; (8001494 <MX_USART1_UART_Init+0x5c>)
 8001440:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <MX_USART1_UART_Init+0x58>)
 8001444:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001448:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_USART1_UART_Init+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_USART1_UART_Init+0x58>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <MX_USART1_UART_Init+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_USART1_UART_Init+0x58>)
 800145e:	220c      	movs	r2, #12
 8001460:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <MX_USART1_UART_Init+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_USART1_UART_Init+0x58>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <MX_USART1_UART_Init+0x58>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_USART1_UART_Init+0x58>)
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_USART1_UART_Init+0x58>)
 800147c:	f007 ffde 	bl	800943c <HAL_UART_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001486:	f000 fb67 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20001708 	.word	0x20001708
 8001494:	40011000 	.word	0x40011000

08001498 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <MX_USART6_UART_Init+0x58>)
 800149e:	4a15      	ldr	r2, [pc, #84]	; (80014f4 <MX_USART6_UART_Init+0x5c>)
 80014a0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <MX_USART6_UART_Init+0x58>)
 80014a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <MX_USART6_UART_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <MX_USART6_UART_Init+0x58>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <MX_USART6_UART_Init+0x58>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <MX_USART6_UART_Init+0x58>)
 80014be:	220c      	movs	r2, #12
 80014c0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <MX_USART6_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <MX_USART6_UART_Init+0x58>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <MX_USART6_UART_Init+0x58>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <MX_USART6_UART_Init+0x58>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014da:	4805      	ldr	r0, [pc, #20]	; (80014f0 <MX_USART6_UART_Init+0x58>)
 80014dc:	f007 ffae 	bl	800943c <HAL_UART_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80014e6:	f000 fb37 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20001844 	.word	0x20001844
 80014f4:	40011400 	.word	0x40011400

080014f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b090      	sub	sp, #64	; 0x40
 80014fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800150e:	4baf      	ldr	r3, [pc, #700]	; (80017cc <MX_GPIO_Init+0x2d4>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4aae      	ldr	r2, [pc, #696]	; (80017cc <MX_GPIO_Init+0x2d4>)
 8001514:	f043 0310 	orr.w	r3, r3, #16
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4bac      	ldr	r3, [pc, #688]	; (80017cc <MX_GPIO_Init+0x2d4>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0310 	and.w	r3, r3, #16
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
 8001524:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001526:	4ba9      	ldr	r3, [pc, #676]	; (80017cc <MX_GPIO_Init+0x2d4>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4aa8      	ldr	r2, [pc, #672]	; (80017cc <MX_GPIO_Init+0x2d4>)
 800152c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4ba6      	ldr	r3, [pc, #664]	; (80017cc <MX_GPIO_Init+0x2d4>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	4ba3      	ldr	r3, [pc, #652]	; (80017cc <MX_GPIO_Init+0x2d4>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4aa2      	ldr	r2, [pc, #648]	; (80017cc <MX_GPIO_Init+0x2d4>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4ba0      	ldr	r3, [pc, #640]	; (80017cc <MX_GPIO_Init+0x2d4>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	623b      	str	r3, [r7, #32]
 8001554:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001556:	4b9d      	ldr	r3, [pc, #628]	; (80017cc <MX_GPIO_Init+0x2d4>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a9c      	ldr	r2, [pc, #624]	; (80017cc <MX_GPIO_Init+0x2d4>)
 800155c:	f043 0308 	orr.w	r3, r3, #8
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b9a      	ldr	r3, [pc, #616]	; (80017cc <MX_GPIO_Init+0x2d4>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	61fb      	str	r3, [r7, #28]
 800156c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156e:	4b97      	ldr	r3, [pc, #604]	; (80017cc <MX_GPIO_Init+0x2d4>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a96      	ldr	r2, [pc, #600]	; (80017cc <MX_GPIO_Init+0x2d4>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b94      	ldr	r3, [pc, #592]	; (80017cc <MX_GPIO_Init+0x2d4>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	61bb      	str	r3, [r7, #24]
 8001584:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	4b91      	ldr	r3, [pc, #580]	; (80017cc <MX_GPIO_Init+0x2d4>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a90      	ldr	r2, [pc, #576]	; (80017cc <MX_GPIO_Init+0x2d4>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b8e      	ldr	r3, [pc, #568]	; (80017cc <MX_GPIO_Init+0x2d4>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800159e:	4b8b      	ldr	r3, [pc, #556]	; (80017cc <MX_GPIO_Init+0x2d4>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a8a      	ldr	r2, [pc, #552]	; (80017cc <MX_GPIO_Init+0x2d4>)
 80015a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b88      	ldr	r3, [pc, #544]	; (80017cc <MX_GPIO_Init+0x2d4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80015b6:	4b85      	ldr	r3, [pc, #532]	; (80017cc <MX_GPIO_Init+0x2d4>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a84      	ldr	r2, [pc, #528]	; (80017cc <MX_GPIO_Init+0x2d4>)
 80015bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b82      	ldr	r3, [pc, #520]	; (80017cc <MX_GPIO_Init+0x2d4>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80015ce:	4b7f      	ldr	r3, [pc, #508]	; (80017cc <MX_GPIO_Init+0x2d4>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a7e      	ldr	r2, [pc, #504]	; (80017cc <MX_GPIO_Init+0x2d4>)
 80015d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b7c      	ldr	r3, [pc, #496]	; (80017cc <MX_GPIO_Init+0x2d4>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015e6:	4b79      	ldr	r3, [pc, #484]	; (80017cc <MX_GPIO_Init+0x2d4>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a78      	ldr	r2, [pc, #480]	; (80017cc <MX_GPIO_Init+0x2d4>)
 80015ec:	f043 0320 	orr.w	r3, r3, #32
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b76      	ldr	r3, [pc, #472]	; (80017cc <MX_GPIO_Init+0x2d4>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0320 	and.w	r3, r3, #32
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015fe:	4b73      	ldr	r3, [pc, #460]	; (80017cc <MX_GPIO_Init+0x2d4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a72      	ldr	r2, [pc, #456]	; (80017cc <MX_GPIO_Init+0x2d4>)
 8001604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b70      	ldr	r3, [pc, #448]	; (80017cc <MX_GPIO_Init+0x2d4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001616:	2201      	movs	r2, #1
 8001618:	2120      	movs	r1, #32
 800161a:	486d      	ldr	r0, [pc, #436]	; (80017d0 <MX_GPIO_Init+0x2d8>)
 800161c:	f002 fec4 	bl	80043a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001620:	2201      	movs	r2, #1
 8001622:	2108      	movs	r1, #8
 8001624:	486b      	ldr	r0, [pc, #428]	; (80017d4 <MX_GPIO_Init+0x2dc>)
 8001626:	f002 febf 	bl	80043a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800162a:	2201      	movs	r2, #1
 800162c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001630:	4869      	ldr	r0, [pc, #420]	; (80017d8 <MX_GPIO_Init+0x2e0>)
 8001632:	f002 feb9 	bl	80043a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800163c:	4867      	ldr	r0, [pc, #412]	; (80017dc <MX_GPIO_Init+0x2e4>)
 800163e:	f002 feb3 	bl	80043a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_TIM1_GPIO_Port, TEST_TIM1_Pin, GPIO_PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001648:	4865      	ldr	r0, [pc, #404]	; (80017e0 <MX_GPIO_Init+0x2e8>)
 800164a:	f002 fead 	bl	80043a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	2108      	movs	r1, #8
 8001652:	4864      	ldr	r0, [pc, #400]	; (80017e4 <MX_GPIO_Init+0x2ec>)
 8001654:	f002 fea8 	bl	80043a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001658:	2308      	movs	r3, #8
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165c:	2300      	movs	r3, #0
 800165e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001668:	4619      	mov	r1, r3
 800166a:	485f      	ldr	r0, [pc, #380]	; (80017e8 <MX_GPIO_Init+0x2f0>)
 800166c:	f002 fbcc 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001670:	2304      	movs	r3, #4
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001680:	2309      	movs	r3, #9
 8001682:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001684:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001688:	4619      	mov	r1, r3
 800168a:	4857      	ldr	r0, [pc, #348]	; (80017e8 <MX_GPIO_Init+0x2f0>)
 800168c:	f002 fbbc 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001690:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001694:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016a2:	230b      	movs	r3, #11
 80016a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016aa:	4619      	mov	r1, r3
 80016ac:	484d      	ldr	r0, [pc, #308]	; (80017e4 <MX_GPIO_Init+0x2ec>)
 80016ae:	f002 fbab 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80016b2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80016b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016c4:	230c      	movs	r3, #12
 80016c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016cc:	4619      	mov	r1, r3
 80016ce:	4846      	ldr	r0, [pc, #280]	; (80017e8 <MX_GPIO_Init+0x2f0>)
 80016d0:	f002 fb9a 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80016d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016da:	2312      	movs	r3, #18
 80016dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016de:	2301      	movs	r3, #1
 80016e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016e6:	2304      	movs	r3, #4
 80016e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ee:	4619      	mov	r1, r3
 80016f0:	483e      	ldr	r0, [pc, #248]	; (80017ec <MX_GPIO_Init+0x2f4>)
 80016f2:	f002 fb89 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80016f6:	f643 4323 	movw	r3, #15395	; 0x3c23
 80016fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001708:	230a      	movs	r3, #10
 800170a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001710:	4619      	mov	r1, r3
 8001712:	4836      	ldr	r0, [pc, #216]	; (80017ec <MX_GPIO_Init+0x2f4>)
 8001714:	f002 fb78 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001718:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800171c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001726:	2303      	movs	r3, #3
 8001728:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800172a:	230c      	movs	r3, #12
 800172c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001732:	4619      	mov	r1, r3
 8001734:	482e      	ldr	r0, [pc, #184]	; (80017f0 <MX_GPIO_Init+0x2f8>)
 8001736:	f002 fb67 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800173a:	2340      	movs	r3, #64	; 0x40
 800173c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001746:	2303      	movs	r3, #3
 8001748:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800174a:	230a      	movs	r3, #10
 800174c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800174e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001752:	4619      	mov	r1, r3
 8001754:	4825      	ldr	r0, [pc, #148]	; (80017ec <MX_GPIO_Init+0x2f4>)
 8001756:	f002 fb57 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800175a:	f248 1333 	movw	r3, #33075	; 0x8133
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001768:	2303      	movs	r3, #3
 800176a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800176c:	230c      	movs	r3, #12
 800176e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001770:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001774:	4619      	mov	r1, r3
 8001776:	481b      	ldr	r0, [pc, #108]	; (80017e4 <MX_GPIO_Init+0x2ec>)
 8001778:	f002 fb46 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800177c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001782:	2300      	movs	r3, #0
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800178a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800178e:	4619      	mov	r1, r3
 8001790:	4818      	ldr	r0, [pc, #96]	; (80017f4 <MX_GPIO_Init+0x2fc>)
 8001792:	f002 fb39 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001796:	f24c 7303 	movw	r3, #50947	; 0xc703
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017a8:	230c      	movs	r3, #12
 80017aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b0:	4619      	mov	r1, r3
 80017b2:	4807      	ldr	r0, [pc, #28]	; (80017d0 <MX_GPIO_Init+0x2d8>)
 80017b4:	f002 fb28 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80017b8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e016      	b.n	80017f8 <MX_GPIO_Init+0x300>
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020c00 	.word	0x40020c00
 80017d4:	40022800 	.word	0x40022800
 80017d8:	40022000 	.word	0x40022000
 80017dc:	40021c00 	.word	0x40021c00
 80017e0:	40021400 	.word	0x40021400
 80017e4:	40021800 	.word	0x40021800
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40020400 	.word	0x40020400
 80017f0:	40020800 	.word	0x40020800
 80017f4:	40022400 	.word	0x40022400
 80017f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017fa:	230a      	movs	r3, #10
 80017fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001802:	4619      	mov	r1, r3
 8001804:	48be      	ldr	r0, [pc, #760]	; (8001b00 <MX_GPIO_Init+0x608>)
 8001806:	f002 faff 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800180a:	2320      	movs	r3, #32
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180e:	2301      	movs	r3, #1
 8001810:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800181a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800181e:	4619      	mov	r1, r3
 8001820:	48b8      	ldr	r0, [pc, #736]	; (8001b04 <MX_GPIO_Init+0x60c>)
 8001822:	f002 faf1 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON0_Pin;
 8001826:	230c      	movs	r3, #12
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800182a:	4bb7      	ldr	r3, [pc, #732]	; (8001b08 <MX_GPIO_Init+0x610>)
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800182e:	2301      	movs	r3, #1
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001832:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001836:	4619      	mov	r1, r3
 8001838:	48b4      	ldr	r0, [pc, #720]	; (8001b0c <MX_GPIO_Init+0x614>)
 800183a:	f002 fae5 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800183e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001844:	2300      	movs	r3, #0
 8001846:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800184c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001850:	4619      	mov	r1, r3
 8001852:	48af      	ldr	r0, [pc, #700]	; (8001b10 <MX_GPIO_Init+0x618>)
 8001854:	f002 fad8 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001858:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001866:	2303      	movs	r3, #3
 8001868:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800186a:	230c      	movs	r3, #12
 800186c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800186e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001872:	4619      	mov	r1, r3
 8001874:	48a7      	ldr	r0, [pc, #668]	; (8001b14 <MX_GPIO_Init+0x61c>)
 8001876:	f002 fac7 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800187a:	2308      	movs	r3, #8
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187e:	2301      	movs	r3, #1
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800188a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800188e:	4619      	mov	r1, r3
 8001890:	48a1      	ldr	r0, [pc, #644]	; (8001b18 <MX_GPIO_Init+0x620>)
 8001892:	f002 fab9 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001896:	2310      	movs	r3, #16
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189a:	2300      	movs	r3, #0
 800189c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a6:	4619      	mov	r1, r3
 80018a8:	4896      	ldr	r0, [pc, #600]	; (8001b04 <MX_GPIO_Init+0x60c>)
 80018aa:	f002 faad 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80018ae:	2304      	movs	r3, #4
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ba:	2303      	movs	r3, #3
 80018bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80018be:	230c      	movs	r3, #12
 80018c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80018c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c6:	4619      	mov	r1, r3
 80018c8:	488e      	ldr	r0, [pc, #568]	; (8001b04 <MX_GPIO_Init+0x60c>)
 80018ca:	f002 fa9d 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80018ce:	f248 0304 	movw	r3, #32772	; 0x8004
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d4:	2300      	movs	r3, #0
 80018d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e0:	4619      	mov	r1, r3
 80018e2:	488e      	ldr	r0, [pc, #568]	; (8001b1c <MX_GPIO_Init+0x624>)
 80018e4:	f002 fa90 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 80018e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ee:	2301      	movs	r3, #1
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80018fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018fe:	4619      	mov	r1, r3
 8001900:	4882      	ldr	r0, [pc, #520]	; (8001b0c <MX_GPIO_Init+0x614>)
 8001902:	f002 fa81 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001906:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190c:	2301      	movs	r3, #1
 800190e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800191c:	4619      	mov	r1, r3
 800191e:	487f      	ldr	r0, [pc, #508]	; (8001b1c <MX_GPIO_Init+0x624>)
 8001920:	f002 fa72 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001924:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800192a:	4b7d      	ldr	r3, [pc, #500]	; (8001b20 <MX_GPIO_Init+0x628>)
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001936:	4619      	mov	r1, r3
 8001938:	4874      	ldr	r0, [pc, #464]	; (8001b0c <MX_GPIO_Init+0x614>)
 800193a:	f002 fa65 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800193e:	2310      	movs	r3, #16
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800194e:	230a      	movs	r3, #10
 8001950:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001956:	4619      	mov	r1, r3
 8001958:	4870      	ldr	r0, [pc, #448]	; (8001b1c <MX_GPIO_Init+0x624>)
 800195a:	f002 fa55 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800195e:	2328      	movs	r3, #40	; 0x28
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800196e:	230c      	movs	r3, #12
 8001970:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001972:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001976:	4619      	mov	r1, r3
 8001978:	4868      	ldr	r0, [pc, #416]	; (8001b1c <MX_GPIO_Init+0x624>)
 800197a:	f002 fa45 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 800197e:	23c0      	movs	r3, #192	; 0xc0
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001982:	4b61      	ldr	r3, [pc, #388]	; (8001b08 <MX_GPIO_Init+0x610>)
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001986:	2301      	movs	r3, #1
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800198a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198e:	4619      	mov	r1, r3
 8001990:	4864      	ldr	r0, [pc, #400]	; (8001b24 <MX_GPIO_Init+0x62c>)
 8001992:	f002 fa39 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_TIM1_Pin */
  GPIO_InitStruct.Pin = TEST_TIM1_Pin;
 8001996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199c:	2301      	movs	r3, #1
 800199e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TEST_TIM1_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ac:	4619      	mov	r1, r3
 80019ae:	4859      	ldr	r0, [pc, #356]	; (8001b14 <MX_GPIO_Init+0x61c>)
 80019b0:	f002 fa2a 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80019b4:	2308      	movs	r3, #8
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c0:	2303      	movs	r3, #3
 80019c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019c4:	230c      	movs	r3, #12
 80019c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80019c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019cc:	4619      	mov	r1, r3
 80019ce:	4850      	ldr	r0, [pc, #320]	; (8001b10 <MX_GPIO_Init+0x618>)
 80019d0:	f002 fa1a 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80019d4:	2305      	movs	r3, #5
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019e4:	230a      	movs	r3, #10
 80019e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ec:	4619      	mov	r1, r3
 80019ee:	4848      	ldr	r0, [pc, #288]	; (8001b10 <MX_GPIO_Init+0x618>)
 80019f0:	f002 fa0a 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80019f4:	2332      	movs	r3, #50	; 0x32
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a00:	2303      	movs	r3, #3
 8001a02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a04:	230b      	movs	r3, #11
 8001a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4840      	ldr	r0, [pc, #256]	; (8001b10 <MX_GPIO_Init+0x618>)
 8001a10:	f002 f9fa 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a14:	2304      	movs	r3, #4
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a24:	2309      	movs	r3, #9
 8001a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	483e      	ldr	r0, [pc, #248]	; (8001b28 <MX_GPIO_Init+0x630>)
 8001a30:	f002 f9ea 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001a34:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a42:	2303      	movs	r3, #3
 8001a44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a46:	2309      	movs	r3, #9
 8001a48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a4e:	4619      	mov	r1, r3
 8001a50:	482c      	ldr	r0, [pc, #176]	; (8001b04 <MX_GPIO_Init+0x60c>)
 8001a52:	f002 f9d9 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001a56:	2308      	movs	r3, #8
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	482d      	ldr	r0, [pc, #180]	; (8001b24 <MX_GPIO_Init+0x62c>)
 8001a6e:	f002 f9cb 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001a72:	2304      	movs	r3, #4
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a76:	2300      	movs	r3, #0
 8001a78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001a7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a82:	4619      	mov	r1, r3
 8001a84:	4827      	ldr	r0, [pc, #156]	; (8001b24 <MX_GPIO_Init+0x62c>)
 8001a86:	f002 f9bf 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001a8a:	2386      	movs	r3, #134	; 0x86
 8001a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a96:	2303      	movs	r3, #3
 8001a98:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a9a:	230b      	movs	r3, #11
 8001a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4816      	ldr	r0, [pc, #88]	; (8001b00 <MX_GPIO_Init+0x608>)
 8001aa6:	f002 f9af 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001aaa:	2328      	movs	r3, #40	; 0x28
 8001aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001aba:	230a      	movs	r3, #10
 8001abc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	480e      	ldr	r0, [pc, #56]	; (8001b00 <MX_GPIO_Init+0x608>)
 8001ac6:	f002 f99f 	bl	8003e08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	2008      	movs	r0, #8
 8001ad0:	f001 fd92 	bl	80035f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001ad4:	2008      	movs	r0, #8
 8001ad6:	f001 fdab 	bl	8003630 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2100      	movs	r1, #0
 8001ade:	2009      	movs	r0, #9
 8001ae0:	f001 fd8a 	bl	80035f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001ae4:	2009      	movs	r0, #9
 8001ae6:	f001 fda3 	bl	8003630 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2100      	movs	r1, #0
 8001aee:	2017      	movs	r0, #23
 8001af0:	f001 fd82 	bl	80035f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001af4:	2017      	movs	r0, #23
 8001af6:	f001 fd9b 	bl	8003630 <HAL_NVIC_EnableIRQ>

}
 8001afa:	bf00      	nop
 8001afc:	e016      	b.n	8001b2c <MX_GPIO_Init+0x634>
 8001afe:	bf00      	nop
 8001b00:	40020000 	.word	0x40020000
 8001b04:	40020c00 	.word	0x40020c00
 8001b08:	10310000 	.word	0x10310000
 8001b0c:	40022000 	.word	0x40022000
 8001b10:	40020800 	.word	0x40020800
 8001b14:	40021400 	.word	0x40021400
 8001b18:	40022800 	.word	0x40022800
 8001b1c:	40021c00 	.word	0x40021c00
 8001b20:	10120000 	.word	0x10120000
 8001b24:	40021800 	.word	0x40021800
 8001b28:	40020400 	.word	0x40020400
 8001b2c:	3740      	adds	r7, #64	; 0x40
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop

08001b34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d101      	bne.n	8001b4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b46:	f000 ffbf 	bl	8002ac8 <HAL_IncTick>
		  XF_tick();
	  }
  }
#endif
  /* USER CODE END Callback 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40001000 	.word	0x40001000

08001b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5c:	b672      	cpsid	i
}
 8001b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <Error_Handler+0x8>
	...

08001b64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <HAL_MspInit+0x44>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ba8 <HAL_MspInit+0x44>)
 8001b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b74:	6413      	str	r3, [r2, #64]	; 0x40
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <HAL_MspInit+0x44>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_MspInit+0x44>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <HAL_MspInit+0x44>)
 8001b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_MspInit+0x44>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800

08001bac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a25      	ldr	r2, [pc, #148]	; (8001c60 <HAL_ADC_MspInit+0xb4>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d144      	bne.n	8001c58 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001bce:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <HAL_ADC_MspInit+0xb8>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	4a24      	ldr	r2, [pc, #144]	; (8001c64 <HAL_ADC_MspInit+0xb8>)
 8001bd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bda:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <HAL_ADC_MspInit+0xb8>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001be6:	4b1f      	ldr	r3, [pc, #124]	; (8001c64 <HAL_ADC_MspInit+0xb8>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a1e      	ldr	r2, [pc, #120]	; (8001c64 <HAL_ADC_MspInit+0xb8>)
 8001bec:	f043 0320 	orr.w	r3, r3, #32
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <HAL_ADC_MspInit+0xb8>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0320 	and.w	r3, r3, #32
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_ADC_MspInit+0xb8>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <HAL_ADC_MspInit+0xb8>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <HAL_ADC_MspInit+0xb8>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> ADC3_IN4
    PF10     ------> ADC3_IN8
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A3_Pin;
 8001c16:	f44f 63b8 	mov.w	r3, #1472	; 0x5c0
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4619      	mov	r1, r3
 8001c2a:	480f      	ldr	r0, [pc, #60]	; (8001c68 <HAL_ADC_MspInit+0xbc>)
 8001c2c:	f002 f8ec 	bl	8003e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001c30:	2301      	movs	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c34:	2303      	movs	r3, #3
 8001c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	4619      	mov	r1, r3
 8001c42:	480a      	ldr	r0, [pc, #40]	; (8001c6c <HAL_ADC_MspInit+0xc0>)
 8001c44:	f002 f8e0 	bl	8003e08 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	2012      	movs	r0, #18
 8001c4e:	f001 fcd3 	bl	80035f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001c52:	2012      	movs	r0, #18
 8001c54:	f001 fcec 	bl	8003630 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001c58:	bf00      	nop
 8001c5a:	3728      	adds	r7, #40	; 0x28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40012200 	.word	0x40012200
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40021400 	.word	0x40021400
 8001c6c:	40020000 	.word	0x40020000

08001c70 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <HAL_CRC_MspInit+0x38>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d10b      	bne.n	8001c9a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_CRC_MspInit+0x3c>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <HAL_CRC_MspInit+0x3c>)
 8001c88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b07      	ldr	r3, [pc, #28]	; (8001cac <HAL_CRC_MspInit+0x3c>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001c9a:	bf00      	nop
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40023000 	.word	0x40023000
 8001cac:	40023800 	.word	0x40023800

08001cb0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08e      	sub	sp, #56	; 0x38
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a50      	ldr	r2, [pc, #320]	; (8001e10 <HAL_DCMI_MspInit+0x160>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	f040 809a 	bne.w	8001e08 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001cd4:	4b4f      	ldr	r3, [pc, #316]	; (8001e14 <HAL_DCMI_MspInit+0x164>)
 8001cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd8:	4a4e      	ldr	r2, [pc, #312]	; (8001e14 <HAL_DCMI_MspInit+0x164>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6353      	str	r3, [r2, #52]	; 0x34
 8001ce0:	4b4c      	ldr	r3, [pc, #304]	; (8001e14 <HAL_DCMI_MspInit+0x164>)
 8001ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	623b      	str	r3, [r7, #32]
 8001cea:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cec:	4b49      	ldr	r3, [pc, #292]	; (8001e14 <HAL_DCMI_MspInit+0x164>)
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf0:	4a48      	ldr	r2, [pc, #288]	; (8001e14 <HAL_DCMI_MspInit+0x164>)
 8001cf2:	f043 0310 	orr.w	r3, r3, #16
 8001cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf8:	4b46      	ldr	r3, [pc, #280]	; (8001e14 <HAL_DCMI_MspInit+0x164>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	61fb      	str	r3, [r7, #28]
 8001d02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d04:	4b43      	ldr	r3, [pc, #268]	; (8001e14 <HAL_DCMI_MspInit+0x164>)
 8001d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d08:	4a42      	ldr	r2, [pc, #264]	; (8001e14 <HAL_DCMI_MspInit+0x164>)
 8001d0a:	f043 0308 	orr.w	r3, r3, #8
 8001d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d10:	4b40      	ldr	r3, [pc, #256]	; (8001e14 <HAL_DCMI_MspInit+0x164>)
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d1c:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <HAL_DCMI_MspInit+0x164>)
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	4a3c      	ldr	r2, [pc, #240]	; (8001e14 <HAL_DCMI_MspInit+0x164>)
 8001d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d26:	6313      	str	r3, [r2, #48]	; 0x30
 8001d28:	4b3a      	ldr	r3, [pc, #232]	; (8001e14 <HAL_DCMI_MspInit+0x164>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d34:	4b37      	ldr	r3, [pc, #220]	; (8001e14 <HAL_DCMI_MspInit+0x164>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	4a36      	ldr	r2, [pc, #216]	; (8001e14 <HAL_DCMI_MspInit+0x164>)
 8001d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d40:	4b34      	ldr	r3, [pc, #208]	; (8001e14 <HAL_DCMI_MspInit+0x164>)
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4c:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <HAL_DCMI_MspInit+0x164>)
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	4a30      	ldr	r2, [pc, #192]	; (8001e14 <HAL_DCMI_MspInit+0x164>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6313      	str	r3, [r2, #48]	; 0x30
 8001d58:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <HAL_DCMI_MspInit+0x164>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001d64:	2360      	movs	r3, #96	; 0x60
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d74:	230d      	movs	r3, #13
 8001d76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4826      	ldr	r0, [pc, #152]	; (8001e18 <HAL_DCMI_MspInit+0x168>)
 8001d80:	f002 f842 	bl	8003e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001d84:	2308      	movs	r3, #8
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d94:	230d      	movs	r3, #13
 8001d96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	481f      	ldr	r0, [pc, #124]	; (8001e1c <HAL_DCMI_MspInit+0x16c>)
 8001da0:	f002 f832 	bl	8003e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001db6:	230d      	movs	r3, #13
 8001db8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4817      	ldr	r0, [pc, #92]	; (8001e20 <HAL_DCMI_MspInit+0x170>)
 8001dc2:	f002 f821 	bl	8003e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001dc6:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001dd8:	230d      	movs	r3, #13
 8001dda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de0:	4619      	mov	r1, r3
 8001de2:	4810      	ldr	r0, [pc, #64]	; (8001e24 <HAL_DCMI_MspInit+0x174>)
 8001de4:	f002 f810 	bl	8003e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001de8:	2350      	movs	r3, #80	; 0x50
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001df8:	230d      	movs	r3, #13
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e00:	4619      	mov	r1, r3
 8001e02:	4809      	ldr	r0, [pc, #36]	; (8001e28 <HAL_DCMI_MspInit+0x178>)
 8001e04:	f002 f800 	bl	8003e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001e08:	bf00      	nop
 8001e0a:	3738      	adds	r7, #56	; 0x38
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	50050000 	.word	0x50050000
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40020c00 	.word	0x40020c00
 8001e20:	40021800 	.word	0x40021800
 8001e24:	40021c00 	.word	0x40021c00
 8001e28:	40020000 	.word	0x40020000

08001e2c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <HAL_DMA2D_MspInit+0x44>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d113      	bne.n	8001e66 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <HAL_DMA2D_MspInit+0x48>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a0c      	ldr	r2, [pc, #48]	; (8001e74 <HAL_DMA2D_MspInit+0x48>)
 8001e44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <HAL_DMA2D_MspInit+0x48>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2100      	movs	r1, #0
 8001e5a:	205a      	movs	r0, #90	; 0x5a
 8001e5c:	f001 fbcc 	bl	80035f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001e60:	205a      	movs	r0, #90	; 0x5a
 8001e62:	f001 fbe5 	bl	8003630 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	4002b000 	.word	0x4002b000
 8001e74:	40023800 	.word	0x40023800

08001e78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08a      	sub	sp, #40	; 0x28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a17      	ldr	r2, [pc, #92]	; (8001ef4 <HAL_I2C_MspInit+0x7c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d128      	bne.n	8001eec <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <HAL_I2C_MspInit+0x80>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a16      	ldr	r2, [pc, #88]	; (8001ef8 <HAL_I2C_MspInit+0x80>)
 8001ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <HAL_I2C_MspInit+0x80>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001eb2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eb8:	2312      	movs	r3, #18
 8001eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	4619      	mov	r1, r3
 8001ece:	480b      	ldr	r0, [pc, #44]	; (8001efc <HAL_I2C_MspInit+0x84>)
 8001ed0:	f001 ff9a 	bl	8003e08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_I2C_MspInit+0x80>)
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	4a07      	ldr	r2, [pc, #28]	; (8001ef8 <HAL_I2C_MspInit+0x80>)
 8001eda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ede:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_I2C_MspInit+0x80>)
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001eec:	bf00      	nop
 8001eee:	3728      	adds	r7, #40	; 0x28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40005c00 	.word	0x40005c00
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40021c00 	.word	0x40021c00

08001f00 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <HAL_I2C_MspDeInit+0x38>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d10e      	bne.n	8001f30 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_I2C_MspDeInit+0x3c>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	4a09      	ldr	r2, [pc, #36]	; (8001f3c <HAL_I2C_MspDeInit+0x3c>)
 8001f18:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f1c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8001f1e:	2180      	movs	r1, #128	; 0x80
 8001f20:	4807      	ldr	r0, [pc, #28]	; (8001f40 <HAL_I2C_MspDeInit+0x40>)
 8001f22:	f002 f91d 	bl	8004160 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8001f26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f2a:	4805      	ldr	r0, [pc, #20]	; (8001f40 <HAL_I2C_MspDeInit+0x40>)
 8001f2c:	f002 f918 	bl	8004160 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40005c00 	.word	0x40005c00
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40021c00 	.word	0x40021c00

08001f44 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08e      	sub	sp, #56	; 0x38
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a55      	ldr	r2, [pc, #340]	; (80020b8 <HAL_LTDC_MspInit+0x174>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	f040 80a3 	bne.w	80020ae <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001f68:	4b54      	ldr	r3, [pc, #336]	; (80020bc <HAL_LTDC_MspInit+0x178>)
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	4a53      	ldr	r2, [pc, #332]	; (80020bc <HAL_LTDC_MspInit+0x178>)
 8001f6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f72:	6453      	str	r3, [r2, #68]	; 0x44
 8001f74:	4b51      	ldr	r3, [pc, #324]	; (80020bc <HAL_LTDC_MspInit+0x178>)
 8001f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f7c:	623b      	str	r3, [r7, #32]
 8001f7e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f80:	4b4e      	ldr	r3, [pc, #312]	; (80020bc <HAL_LTDC_MspInit+0x178>)
 8001f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f84:	4a4d      	ldr	r2, [pc, #308]	; (80020bc <HAL_LTDC_MspInit+0x178>)
 8001f86:	f043 0310 	orr.w	r3, r3, #16
 8001f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8c:	4b4b      	ldr	r3, [pc, #300]	; (80020bc <HAL_LTDC_MspInit+0x178>)
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	f003 0310 	and.w	r3, r3, #16
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001f98:	4b48      	ldr	r3, [pc, #288]	; (80020bc <HAL_LTDC_MspInit+0x178>)
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	4a47      	ldr	r2, [pc, #284]	; (80020bc <HAL_LTDC_MspInit+0x178>)
 8001f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa4:	4b45      	ldr	r3, [pc, #276]	; (80020bc <HAL_LTDC_MspInit+0x178>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fac:	61bb      	str	r3, [r7, #24]
 8001fae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001fb0:	4b42      	ldr	r3, [pc, #264]	; (80020bc <HAL_LTDC_MspInit+0x178>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	4a41      	ldr	r2, [pc, #260]	; (80020bc <HAL_LTDC_MspInit+0x178>)
 8001fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fba:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbc:	4b3f      	ldr	r3, [pc, #252]	; (80020bc <HAL_LTDC_MspInit+0x178>)
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fc8:	4b3c      	ldr	r3, [pc, #240]	; (80020bc <HAL_LTDC_MspInit+0x178>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	4a3b      	ldr	r2, [pc, #236]	; (80020bc <HAL_LTDC_MspInit+0x178>)
 8001fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd4:	4b39      	ldr	r3, [pc, #228]	; (80020bc <HAL_LTDC_MspInit+0x178>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001fe0:	4b36      	ldr	r3, [pc, #216]	; (80020bc <HAL_LTDC_MspInit+0x178>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	4a35      	ldr	r2, [pc, #212]	; (80020bc <HAL_LTDC_MspInit+0x178>)
 8001fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fea:	6313      	str	r3, [r2, #48]	; 0x30
 8001fec:	4b33      	ldr	r3, [pc, #204]	; (80020bc <HAL_LTDC_MspInit+0x178>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001ff8:	2310      	movs	r3, #16
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002008:	230e      	movs	r3, #14
 800200a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800200c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002010:	4619      	mov	r1, r3
 8002012:	482b      	ldr	r0, [pc, #172]	; (80020c0 <HAL_LTDC_MspInit+0x17c>)
 8002014:	f001 fef8 	bl	8003e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002018:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800202a:	230e      	movs	r3, #14
 800202c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800202e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002032:	4619      	mov	r1, r3
 8002034:	4823      	ldr	r0, [pc, #140]	; (80020c4 <HAL_LTDC_MspInit+0x180>)
 8002036:	f001 fee7 	bl	8003e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800203a:	23f7      	movs	r3, #247	; 0xf7
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002046:	2300      	movs	r3, #0
 8002048:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800204a:	230e      	movs	r3, #14
 800204c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800204e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002052:	4619      	mov	r1, r3
 8002054:	481c      	ldr	r0, [pc, #112]	; (80020c8 <HAL_LTDC_MspInit+0x184>)
 8002056:	f001 fed7 	bl	8003e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800205a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002060:	2302      	movs	r3, #2
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002068:	2300      	movs	r3, #0
 800206a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800206c:	2309      	movs	r3, #9
 800206e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002074:	4619      	mov	r1, r3
 8002076:	4815      	ldr	r0, [pc, #84]	; (80020cc <HAL_LTDC_MspInit+0x188>)
 8002078:	f001 fec6 	bl	8003e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800207c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208a:	2300      	movs	r3, #0
 800208c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800208e:	230e      	movs	r3, #14
 8002090:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002096:	4619      	mov	r1, r3
 8002098:	480d      	ldr	r0, [pc, #52]	; (80020d0 <HAL_LTDC_MspInit+0x18c>)
 800209a:	f001 feb5 	bl	8003e08 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	2058      	movs	r0, #88	; 0x58
 80020a4:	f001 faa8 	bl	80035f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80020a8:	2058      	movs	r0, #88	; 0x58
 80020aa:	f001 fac1 	bl	8003630 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80020ae:	bf00      	nop
 80020b0:	3738      	adds	r7, #56	; 0x38
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40016800 	.word	0x40016800
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40022400 	.word	0x40022400
 80020c8:	40022800 	.word	0x40022800
 80020cc:	40021800 	.word	0x40021800
 80020d0:	40022000 	.word	0x40022000

080020d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a07      	ldr	r2, [pc, #28]	; (8002100 <HAL_RTC_MspInit+0x2c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d105      	bne.n	80020f2 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <HAL_RTC_MspInit+0x30>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ea:	4a06      	ldr	r2, [pc, #24]	; (8002104 <HAL_RTC_MspInit+0x30>)
 80020ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40002800 	.word	0x40002800
 8002104:	40023800 	.word	0x40023800

08002108 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	; 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002128:	d127      	bne.n	800217a <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800212a:	4b16      	ldr	r3, [pc, #88]	; (8002184 <HAL_SPDIFRX_MspInit+0x7c>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	4a15      	ldr	r2, [pc, #84]	; (8002184 <HAL_SPDIFRX_MspInit+0x7c>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002134:	6413      	str	r3, [r2, #64]	; 0x40
 8002136:	4b13      	ldr	r3, [pc, #76]	; (8002184 <HAL_SPDIFRX_MspInit+0x7c>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <HAL_SPDIFRX_MspInit+0x7c>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a0f      	ldr	r2, [pc, #60]	; (8002184 <HAL_SPDIFRX_MspInit+0x7c>)
 8002148:	f043 0308 	orr.w	r3, r3, #8
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <HAL_SPDIFRX_MspInit+0x7c>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215e:	2302      	movs	r3, #2
 8002160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800216a:	2308      	movs	r3, #8
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800216e:	f107 0314 	add.w	r3, r7, #20
 8002172:	4619      	mov	r1, r3
 8002174:	4804      	ldr	r0, [pc, #16]	; (8002188 <HAL_SPDIFRX_MspInit+0x80>)
 8002176:	f001 fe47 	bl	8003e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800217a:	bf00      	nop
 800217c:	3728      	adds	r7, #40	; 0x28
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800
 8002188:	40020c00 	.word	0x40020c00

0800218c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08a      	sub	sp, #40	; 0x28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a25      	ldr	r2, [pc, #148]	; (8002240 <HAL_SPI_MspInit+0xb4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d144      	bne.n	8002238 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021ae:	4b25      	ldr	r3, [pc, #148]	; (8002244 <HAL_SPI_MspInit+0xb8>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	4a24      	ldr	r2, [pc, #144]	; (8002244 <HAL_SPI_MspInit+0xb8>)
 80021b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ba:	4b22      	ldr	r3, [pc, #136]	; (8002244 <HAL_SPI_MspInit+0xb8>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80021c6:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <HAL_SPI_MspInit+0xb8>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a1e      	ldr	r2, [pc, #120]	; (8002244 <HAL_SPI_MspInit+0xb8>)
 80021cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b1c      	ldr	r3, [pc, #112]	; (8002244 <HAL_SPI_MspInit+0xb8>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021de:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_SPI_MspInit+0xb8>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a18      	ldr	r2, [pc, #96]	; (8002244 <HAL_SPI_MspInit+0xb8>)
 80021e4:	f043 0302 	orr.w	r3, r3, #2
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b16      	ldr	r3, [pc, #88]	; (8002244 <HAL_SPI_MspInit+0xb8>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80021f6:	2302      	movs	r3, #2
 80021f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002202:	2300      	movs	r3, #0
 8002204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002206:	2305      	movs	r3, #5
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800220a:	f107 0314 	add.w	r3, r7, #20
 800220e:	4619      	mov	r1, r3
 8002210:	480d      	ldr	r0, [pc, #52]	; (8002248 <HAL_SPI_MspInit+0xbc>)
 8002212:	f001 fdf9 	bl	8003e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002216:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800221a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2300      	movs	r3, #0
 8002226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002228:	2305      	movs	r3, #5
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	4619      	mov	r1, r3
 8002232:	4806      	ldr	r0, [pc, #24]	; (800224c <HAL_SPI_MspInit+0xc0>)
 8002234:	f001 fde8 	bl	8003e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002238:	bf00      	nop
 800223a:	3728      	adds	r7, #40	; 0x28
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40003800 	.word	0x40003800
 8002244:	40023800 	.word	0x40023800
 8002248:	40022000 	.word	0x40022000
 800224c:	40020400 	.word	0x40020400

08002250 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a31      	ldr	r2, [pc, #196]	; (8002324 <HAL_TIM_Base_MspInit+0xd4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d114      	bne.n	800228c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002262:	4b31      	ldr	r3, [pc, #196]	; (8002328 <HAL_TIM_Base_MspInit+0xd8>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	4a30      	ldr	r2, [pc, #192]	; (8002328 <HAL_TIM_Base_MspInit+0xd8>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6453      	str	r3, [r2, #68]	; 0x44
 800226e:	4b2e      	ldr	r3, [pc, #184]	; (8002328 <HAL_TIM_Base_MspInit+0xd8>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	61fb      	str	r3, [r7, #28]
 8002278:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	2100      	movs	r1, #0
 800227e:	201b      	movs	r0, #27
 8002280:	f001 f9ba 	bl	80035f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002284:	201b      	movs	r0, #27
 8002286:	f001 f9d3 	bl	8003630 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800228a:	e046      	b.n	800231a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002294:	d10c      	bne.n	80022b0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002296:	4b24      	ldr	r3, [pc, #144]	; (8002328 <HAL_TIM_Base_MspInit+0xd8>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	4a23      	ldr	r2, [pc, #140]	; (8002328 <HAL_TIM_Base_MspInit+0xd8>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6413      	str	r3, [r2, #64]	; 0x40
 80022a2:	4b21      	ldr	r3, [pc, #132]	; (8002328 <HAL_TIM_Base_MspInit+0xd8>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	61bb      	str	r3, [r7, #24]
 80022ac:	69bb      	ldr	r3, [r7, #24]
}
 80022ae:	e034      	b.n	800231a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM3)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a1d      	ldr	r2, [pc, #116]	; (800232c <HAL_TIM_Base_MspInit+0xdc>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d10c      	bne.n	80022d4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022ba:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_TIM_Base_MspInit+0xd8>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	4a1a      	ldr	r2, [pc, #104]	; (8002328 <HAL_TIM_Base_MspInit+0xd8>)
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	6413      	str	r3, [r2, #64]	; 0x40
 80022c6:	4b18      	ldr	r3, [pc, #96]	; (8002328 <HAL_TIM_Base_MspInit+0xd8>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697b      	ldr	r3, [r7, #20]
}
 80022d2:	e022      	b.n	800231a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM5)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a15      	ldr	r2, [pc, #84]	; (8002330 <HAL_TIM_Base_MspInit+0xe0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d10c      	bne.n	80022f8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022de:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_TIM_Base_MspInit+0xd8>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	4a11      	ldr	r2, [pc, #68]	; (8002328 <HAL_TIM_Base_MspInit+0xd8>)
 80022e4:	f043 0308 	orr.w	r3, r3, #8
 80022e8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ea:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <HAL_TIM_Base_MspInit+0xd8>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]
}
 80022f6:	e010      	b.n	800231a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM8)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a0d      	ldr	r2, [pc, #52]	; (8002334 <HAL_TIM_Base_MspInit+0xe4>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d10b      	bne.n	800231a <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_TIM_Base_MspInit+0xd8>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	4a08      	ldr	r2, [pc, #32]	; (8002328 <HAL_TIM_Base_MspInit+0xd8>)
 8002308:	f043 0302 	orr.w	r3, r3, #2
 800230c:	6453      	str	r3, [r2, #68]	; 0x44
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_TIM_Base_MspInit+0xd8>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
}
 800231a:	bf00      	nop
 800231c:	3720      	adds	r7, #32
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40010000 	.word	0x40010000
 8002328:	40023800 	.word	0x40023800
 800232c:	40000400 	.word	0x40000400
 8002330:	40000c00 	.word	0x40000c00
 8002334:	40010400 	.word	0x40010400

08002338 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <HAL_TIM_PWM_MspInit+0x38>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d10b      	bne.n	8002362 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800234a:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <HAL_TIM_PWM_MspInit+0x3c>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	4a09      	ldr	r2, [pc, #36]	; (8002374 <HAL_TIM_PWM_MspInit+0x3c>)
 8002350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002354:	6413      	str	r3, [r2, #64]	; 0x40
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <HAL_TIM_PWM_MspInit+0x3c>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002362:	bf00      	nop
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40001800 	.word	0x40001800
 8002374:	40023800 	.word	0x40023800

08002378 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08c      	sub	sp, #48	; 0x30
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 031c 	add.w	r3, r7, #28
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a56      	ldr	r2, [pc, #344]	; (80024f0 <HAL_TIM_MspPostInit+0x178>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d11d      	bne.n	80023d6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239a:	4b56      	ldr	r3, [pc, #344]	; (80024f4 <HAL_TIM_MspPostInit+0x17c>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	4a55      	ldr	r2, [pc, #340]	; (80024f4 <HAL_TIM_MspPostInit+0x17c>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
 80023a6:	4b53      	ldr	r3, [pc, #332]	; (80024f4 <HAL_TIM_MspPostInit+0x17c>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	61bb      	str	r3, [r7, #24]
 80023b0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = LED2_Pin;
 80023b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	2302      	movs	r3, #2
 80023ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c0:	2300      	movs	r3, #0
 80023c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023c4:	2301      	movs	r3, #1
 80023c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80023c8:	f107 031c 	add.w	r3, r7, #28
 80023cc:	4619      	mov	r1, r3
 80023ce:	484a      	ldr	r0, [pc, #296]	; (80024f8 <HAL_TIM_MspPostInit+0x180>)
 80023d0:	f001 fd1a 	bl	8003e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80023d4:	e087      	b.n	80024e6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023de:	d11d      	bne.n	800241c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e0:	4b44      	ldr	r3, [pc, #272]	; (80024f4 <HAL_TIM_MspPostInit+0x17c>)
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	4a43      	ldr	r2, [pc, #268]	; (80024f4 <HAL_TIM_MspPostInit+0x17c>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	6313      	str	r3, [r2, #48]	; 0x30
 80023ec:	4b41      	ldr	r3, [pc, #260]	; (80024f4 <HAL_TIM_MspPostInit+0x17c>)
 80023ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LED0_Pin;
 80023f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fe:	2302      	movs	r3, #2
 8002400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002406:	2300      	movs	r3, #0
 8002408:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800240a:	2301      	movs	r3, #1
 800240c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800240e:	f107 031c 	add.w	r3, r7, #28
 8002412:	4619      	mov	r1, r3
 8002414:	4838      	ldr	r0, [pc, #224]	; (80024f8 <HAL_TIM_MspPostInit+0x180>)
 8002416:	f001 fcf7 	bl	8003e08 <HAL_GPIO_Init>
}
 800241a:	e064      	b.n	80024e6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a36      	ldr	r2, [pc, #216]	; (80024fc <HAL_TIM_MspPostInit+0x184>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d11c      	bne.n	8002460 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002426:	4b33      	ldr	r3, [pc, #204]	; (80024f4 <HAL_TIM_MspPostInit+0x17c>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4a32      	ldr	r2, [pc, #200]	; (80024f4 <HAL_TIM_MspPostInit+0x17c>)
 800242c:	f043 0302 	orr.w	r3, r3, #2
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b30      	ldr	r3, [pc, #192]	; (80024f4 <HAL_TIM_MspPostInit+0x17c>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LED3_Pin;
 800243e:	2310      	movs	r3, #16
 8002440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002442:	2302      	movs	r3, #2
 8002444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244a:	2300      	movs	r3, #0
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800244e:	2302      	movs	r3, #2
 8002450:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8002452:	f107 031c 	add.w	r3, r7, #28
 8002456:	4619      	mov	r1, r3
 8002458:	4829      	ldr	r0, [pc, #164]	; (8002500 <HAL_TIM_MspPostInit+0x188>)
 800245a:	f001 fcd5 	bl	8003e08 <HAL_GPIO_Init>
}
 800245e:	e042      	b.n	80024e6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a27      	ldr	r2, [pc, #156]	; (8002504 <HAL_TIM_MspPostInit+0x18c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d11c      	bne.n	80024a4 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800246a:	4b22      	ldr	r3, [pc, #136]	; (80024f4 <HAL_TIM_MspPostInit+0x17c>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a21      	ldr	r2, [pc, #132]	; (80024f4 <HAL_TIM_MspPostInit+0x17c>)
 8002470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <HAL_TIM_MspPostInit+0x17c>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002482:	2301      	movs	r3, #1
 8002484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248e:	2300      	movs	r3, #0
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002492:	2302      	movs	r3, #2
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002496:	f107 031c 	add.w	r3, r7, #28
 800249a:	4619      	mov	r1, r3
 800249c:	481a      	ldr	r0, [pc, #104]	; (8002508 <HAL_TIM_MspPostInit+0x190>)
 800249e:	f001 fcb3 	bl	8003e08 <HAL_GPIO_Init>
}
 80024a2:	e020      	b.n	80024e6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a18      	ldr	r2, [pc, #96]	; (800250c <HAL_TIM_MspPostInit+0x194>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d11b      	bne.n	80024e6 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80024ae:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <HAL_TIM_MspPostInit+0x17c>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	4a10      	ldr	r2, [pc, #64]	; (80024f4 <HAL_TIM_MspPostInit+0x17c>)
 80024b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <HAL_TIM_MspPostInit+0x17c>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LED1_Pin;
 80024c6:	2340      	movs	r3, #64	; 0x40
 80024c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d2:	2300      	movs	r3, #0
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80024d6:	2309      	movs	r3, #9
 80024d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80024da:	f107 031c 	add.w	r3, r7, #28
 80024de:	4619      	mov	r1, r3
 80024e0:	480b      	ldr	r0, [pc, #44]	; (8002510 <HAL_TIM_MspPostInit+0x198>)
 80024e2:	f001 fc91 	bl	8003e08 <HAL_GPIO_Init>
}
 80024e6:	bf00      	nop
 80024e8:	3730      	adds	r7, #48	; 0x30
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40010000 	.word	0x40010000
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40020000 	.word	0x40020000
 80024fc:	40000400 	.word	0x40000400
 8002500:	40020400 	.word	0x40020400
 8002504:	40000c00 	.word	0x40000c00
 8002508:	40022000 	.word	0x40022000
 800250c:	40001800 	.word	0x40001800
 8002510:	40021c00 	.word	0x40021c00

08002514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08c      	sub	sp, #48	; 0x30
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 031c 	add.w	r3, r7, #28
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a3c      	ldr	r2, [pc, #240]	; (8002624 <HAL_UART_MspInit+0x110>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d145      	bne.n	80025c2 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002536:	4b3c      	ldr	r3, [pc, #240]	; (8002628 <HAL_UART_MspInit+0x114>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	4a3b      	ldr	r2, [pc, #236]	; (8002628 <HAL_UART_MspInit+0x114>)
 800253c:	f043 0310 	orr.w	r3, r3, #16
 8002540:	6453      	str	r3, [r2, #68]	; 0x44
 8002542:	4b39      	ldr	r3, [pc, #228]	; (8002628 <HAL_UART_MspInit+0x114>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800254e:	4b36      	ldr	r3, [pc, #216]	; (8002628 <HAL_UART_MspInit+0x114>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a35      	ldr	r2, [pc, #212]	; (8002628 <HAL_UART_MspInit+0x114>)
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	4b33      	ldr	r3, [pc, #204]	; (8002628 <HAL_UART_MspInit+0x114>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002566:	4b30      	ldr	r3, [pc, #192]	; (8002628 <HAL_UART_MspInit+0x114>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a2f      	ldr	r2, [pc, #188]	; (8002628 <HAL_UART_MspInit+0x114>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <HAL_UART_MspInit+0x114>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800257e:	2380      	movs	r3, #128	; 0x80
 8002580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002582:	2302      	movs	r3, #2
 8002584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258a:	2300      	movs	r3, #0
 800258c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800258e:	2307      	movs	r3, #7
 8002590:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002592:	f107 031c 	add.w	r3, r7, #28
 8002596:	4619      	mov	r1, r3
 8002598:	4824      	ldr	r0, [pc, #144]	; (800262c <HAL_UART_MspInit+0x118>)
 800259a:	f001 fc35 	bl	8003e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800259e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a4:	2302      	movs	r3, #2
 80025a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ac:	2300      	movs	r3, #0
 80025ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025b0:	2307      	movs	r3, #7
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80025b4:	f107 031c 	add.w	r3, r7, #28
 80025b8:	4619      	mov	r1, r3
 80025ba:	481d      	ldr	r0, [pc, #116]	; (8002630 <HAL_UART_MspInit+0x11c>)
 80025bc:	f001 fc24 	bl	8003e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80025c0:	e02c      	b.n	800261c <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a1b      	ldr	r2, [pc, #108]	; (8002634 <HAL_UART_MspInit+0x120>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d127      	bne.n	800261c <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80025cc:	4b16      	ldr	r3, [pc, #88]	; (8002628 <HAL_UART_MspInit+0x114>)
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	4a15      	ldr	r2, [pc, #84]	; (8002628 <HAL_UART_MspInit+0x114>)
 80025d2:	f043 0320 	orr.w	r3, r3, #32
 80025d6:	6453      	str	r3, [r2, #68]	; 0x44
 80025d8:	4b13      	ldr	r3, [pc, #76]	; (8002628 <HAL_UART_MspInit+0x114>)
 80025da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025dc:	f003 0320 	and.w	r3, r3, #32
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e4:	4b10      	ldr	r3, [pc, #64]	; (8002628 <HAL_UART_MspInit+0x114>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	4a0f      	ldr	r2, [pc, #60]	; (8002628 <HAL_UART_MspInit+0x114>)
 80025ea:	f043 0304 	orr.w	r3, r3, #4
 80025ee:	6313      	str	r3, [r2, #48]	; 0x30
 80025f0:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <HAL_UART_MspInit+0x114>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80025fc:	23c0      	movs	r3, #192	; 0xc0
 80025fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	2302      	movs	r3, #2
 8002602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002608:	2303      	movs	r3, #3
 800260a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800260c:	2308      	movs	r3, #8
 800260e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002610:	f107 031c 	add.w	r3, r7, #28
 8002614:	4619      	mov	r1, r3
 8002616:	4808      	ldr	r0, [pc, #32]	; (8002638 <HAL_UART_MspInit+0x124>)
 8002618:	f001 fbf6 	bl	8003e08 <HAL_GPIO_Init>
}
 800261c:	bf00      	nop
 800261e:	3730      	adds	r7, #48	; 0x30
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40011000 	.word	0x40011000
 8002628:	40023800 	.word	0x40023800
 800262c:	40020400 	.word	0x40020400
 8002630:	40020000 	.word	0x40020000
 8002634:	40011400 	.word	0x40011400
 8002638:	40020800 	.word	0x40020800

0800263c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08a      	sub	sp, #40	; 0x28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a2b      	ldr	r2, [pc, #172]	; (80026f8 <HAL_SAI_MspInit+0xbc>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d124      	bne.n	8002698 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800264e:	4b2b      	ldr	r3, [pc, #172]	; (80026fc <HAL_SAI_MspInit+0xc0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10b      	bne.n	800266e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002656:	4b2a      	ldr	r3, [pc, #168]	; (8002700 <HAL_SAI_MspInit+0xc4>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	4a29      	ldr	r2, [pc, #164]	; (8002700 <HAL_SAI_MspInit+0xc4>)
 800265c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002660:	6453      	str	r3, [r2, #68]	; 0x44
 8002662:	4b27      	ldr	r3, [pc, #156]	; (8002700 <HAL_SAI_MspInit+0xc4>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800266e:	4b23      	ldr	r3, [pc, #140]	; (80026fc <HAL_SAI_MspInit+0xc0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	3301      	adds	r3, #1
 8002674:	4a21      	ldr	r2, [pc, #132]	; (80026fc <HAL_SAI_MspInit+0xc0>)
 8002676:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002678:	23f0      	movs	r3, #240	; 0xf0
 800267a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267c:	2302      	movs	r3, #2
 800267e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002684:	2300      	movs	r3, #0
 8002686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002688:	230a      	movs	r3, #10
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	4619      	mov	r1, r3
 8002692:	481c      	ldr	r0, [pc, #112]	; (8002704 <HAL_SAI_MspInit+0xc8>)
 8002694:	f001 fbb8 	bl	8003e08 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a1a      	ldr	r2, [pc, #104]	; (8002708 <HAL_SAI_MspInit+0xcc>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d125      	bne.n	80026ee <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <HAL_SAI_MspInit+0xc0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10b      	bne.n	80026c2 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80026aa:	4b15      	ldr	r3, [pc, #84]	; (8002700 <HAL_SAI_MspInit+0xc4>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	4a14      	ldr	r2, [pc, #80]	; (8002700 <HAL_SAI_MspInit+0xc4>)
 80026b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026b4:	6453      	str	r3, [r2, #68]	; 0x44
 80026b6:	4b12      	ldr	r3, [pc, #72]	; (8002700 <HAL_SAI_MspInit+0xc4>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <HAL_SAI_MspInit+0xc0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	3301      	adds	r3, #1
 80026c8:	4a0c      	ldr	r2, [pc, #48]	; (80026fc <HAL_SAI_MspInit+0xc0>)
 80026ca:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80026cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026da:	2300      	movs	r3, #0
 80026dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80026de:	230a      	movs	r3, #10
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80026e2:	f107 0314 	add.w	r3, r7, #20
 80026e6:	4619      	mov	r1, r3
 80026e8:	4808      	ldr	r0, [pc, #32]	; (800270c <HAL_SAI_MspInit+0xd0>)
 80026ea:	f001 fb8d 	bl	8003e08 <HAL_GPIO_Init>

    }
}
 80026ee:	bf00      	nop
 80026f0:	3728      	adds	r7, #40	; 0x28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40015c04 	.word	0x40015c04
 80026fc:	200000c8 	.word	0x200000c8
 8002700:	40023800 	.word	0x40023800
 8002704:	40022000 	.word	0x40022000
 8002708:	40015c24 	.word	0x40015c24
 800270c:	40021800 	.word	0x40021800

08002710 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08c      	sub	sp, #48	; 0x30
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002720:	2200      	movs	r2, #0
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	2036      	movs	r0, #54	; 0x36
 8002726:	f000 ff67 	bl	80035f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800272a:	2036      	movs	r0, #54	; 0x36
 800272c:	f000 ff80 	bl	8003630 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002730:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <HAL_InitTick+0xa0>)
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	4a1e      	ldr	r2, [pc, #120]	; (80027b0 <HAL_InitTick+0xa0>)
 8002736:	f043 0310 	orr.w	r3, r3, #16
 800273a:	6413      	str	r3, [r2, #64]	; 0x40
 800273c:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <HAL_InitTick+0xa0>)
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002748:	f107 0210 	add.w	r2, r7, #16
 800274c:	f107 0314 	add.w	r3, r7, #20
 8002750:	4611      	mov	r1, r2
 8002752:	4618      	mov	r0, r3
 8002754:	f003 fc6e 	bl	8006034 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002758:	f003 fc44 	bl	8005fe4 <HAL_RCC_GetPCLK1Freq>
 800275c:	4603      	mov	r3, r0
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	4a13      	ldr	r2, [pc, #76]	; (80027b4 <HAL_InitTick+0xa4>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	0c9b      	lsrs	r3, r3, #18
 800276c:	3b01      	subs	r3, #1
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_InitTick+0xa8>)
 8002772:	4a12      	ldr	r2, [pc, #72]	; (80027bc <HAL_InitTick+0xac>)
 8002774:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002776:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <HAL_InitTick+0xa8>)
 8002778:	f240 32e7 	movw	r2, #999	; 0x3e7
 800277c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800277e:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <HAL_InitTick+0xa8>)
 8002780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002782:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <HAL_InitTick+0xa8>)
 8002786:	2200      	movs	r2, #0
 8002788:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800278a:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <HAL_InitTick+0xa8>)
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002790:	4809      	ldr	r0, [pc, #36]	; (80027b8 <HAL_InitTick+0xa8>)
 8002792:	f005 fb19 	bl	8007dc8 <HAL_TIM_Base_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d104      	bne.n	80027a6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800279c:	4806      	ldr	r0, [pc, #24]	; (80027b8 <HAL_InitTick+0xa8>)
 800279e:	f005 fb6b 	bl	8007e78 <HAL_TIM_Base_Start_IT>
 80027a2:	4603      	mov	r3, r0
 80027a4:	e000      	b.n	80027a8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3730      	adds	r7, #48	; 0x30
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40023800 	.word	0x40023800
 80027b4:	431bde83 	.word	0x431bde83
 80027b8:	20001ae0 	.word	0x20001ae0
 80027bc:	40001000 	.word	0x40001000

080027c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027c4:	e7fe      	b.n	80027c4 <NMI_Handler+0x4>

080027c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ca:	e7fe      	b.n	80027ca <HardFault_Handler+0x4>

080027cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027d0:	e7fe      	b.n	80027d0 <MemManage_Handler+0x4>

080027d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027d6:	e7fe      	b.n	80027d6 <BusFault_Handler+0x4>

080027d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027dc:	e7fe      	b.n	80027dc <UsageFault_Handler+0x4>

080027de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027de:	b480      	push	{r7}
 80027e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800281a:	2004      	movs	r0, #4
 800281c:	f001 fdde 	bl	80043dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}

08002824 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002828:	2008      	movs	r0, #8
 800282a:	f001 fdd7 	bl	80043dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002838:	4802      	ldr	r0, [pc, #8]	; (8002844 <ADC_IRQHandler+0x10>)
 800283a:	f000 fa81 	bl	8002d40 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	200017b0 	.word	0x200017b0

08002848 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800284c:	2040      	movs	r0, #64	; 0x40
 800284e:	f001 fdc5 	bl	80043dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002852:	2080      	movs	r0, #128	; 0x80
 8002854:	f001 fdc2 	bl	80043dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002858:	bf00      	nop
 800285a:	bd80      	pop	{r7, pc}

0800285c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002860:	4802      	ldr	r0, [pc, #8]	; (800286c <TIM1_CC_IRQHandler+0x10>)
 8002862:	f005 fd7a 	bl	800835a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20001a48 	.word	0x20001a48

08002870 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002874:	4802      	ldr	r0, [pc, #8]	; (8002880 <TIM6_DAC_IRQHandler+0x10>)
 8002876:	f005 fd70 	bl	800835a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20001ae0 	.word	0x20001ae0

08002884 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002888:	4802      	ldr	r0, [pc, #8]	; (8002894 <LTDC_IRQHandler+0x10>)
 800288a:	f002 fc31 	bl	80050f0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20001468 	.word	0x20001468

08002898 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800289c:	4802      	ldr	r0, [pc, #8]	; (80028a8 <DMA2D_IRQHandler+0x10>)
 800289e:	f001 f911 	bl	8003ac4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20001574 	.word	0x20001574

080028ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
	return 1;
 80028b0:	2301      	movs	r3, #1
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <_kill>:

int _kill(int pid, int sig)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028c6:	f013 fdf5 	bl	80164b4 <__errno>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2216      	movs	r2, #22
 80028ce:	601a      	str	r2, [r3, #0]
	return -1;
 80028d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <_exit>:

void _exit (int status)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028e4:	f04f 31ff 	mov.w	r1, #4294967295
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff ffe7 	bl	80028bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80028ee:	e7fe      	b.n	80028ee <_exit+0x12>

080028f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	e00a      	b.n	8002918 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002902:	f3af 8000 	nop.w
 8002906:	4601      	mov	r1, r0
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	60ba      	str	r2, [r7, #8]
 800290e:	b2ca      	uxtb	r2, r1
 8002910:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	3301      	adds	r3, #1
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	429a      	cmp	r2, r3
 800291e:	dbf0      	blt.n	8002902 <_read+0x12>
	}

return len;
 8002920:	687b      	ldr	r3, [r7, #4]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b086      	sub	sp, #24
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	e009      	b.n	8002950 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	60ba      	str	r2, [r7, #8]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	3301      	adds	r3, #1
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	429a      	cmp	r2, r3
 8002956:	dbf1      	blt.n	800293c <_write+0x12>
	}
	return len;
 8002958:	687b      	ldr	r3, [r7, #4]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <_close>:

int _close(int file)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
	return -1;
 800296a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800298a:	605a      	str	r2, [r3, #4]
	return 0;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <_isatty>:

int _isatty(int file)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
	return 1;
 80029a2:	2301      	movs	r3, #1
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
	return 0;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029d4:	4a14      	ldr	r2, [pc, #80]	; (8002a28 <_sbrk+0x5c>)
 80029d6:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <_sbrk+0x60>)
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029e0:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <_sbrk+0x64>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d102      	bne.n	80029ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029e8:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <_sbrk+0x64>)
 80029ea:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <_sbrk+0x68>)
 80029ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <_sbrk+0x64>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4413      	add	r3, r2
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d207      	bcs.n	8002a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029fc:	f013 fd5a 	bl	80164b4 <__errno>
 8002a00:	4603      	mov	r3, r0
 8002a02:	220c      	movs	r2, #12
 8002a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a06:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0a:	e009      	b.n	8002a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a0c:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <_sbrk+0x64>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a12:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <_sbrk+0x64>)
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4413      	add	r3, r2
 8002a1a:	4a05      	ldr	r2, [pc, #20]	; (8002a30 <_sbrk+0x64>)
 8002a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20050000 	.word	0x20050000
 8002a2c:	00001000 	.word	0x00001000
 8002a30:	200000cc 	.word	0x200000cc
 8002a34:	20001b40 	.word	0x20001b40

08002a38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <SystemInit+0x20>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a42:	4a05      	ldr	r2, [pc, #20]	; (8002a58 <SystemInit+0x20>)
 8002a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a60:	480d      	ldr	r0, [pc, #52]	; (8002a98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a62:	490e      	ldr	r1, [pc, #56]	; (8002a9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a64:	4a0e      	ldr	r2, [pc, #56]	; (8002aa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a68:	e002      	b.n	8002a70 <LoopCopyDataInit>

08002a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a6e:	3304      	adds	r3, #4

08002a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a74:	d3f9      	bcc.n	8002a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a76:	4a0b      	ldr	r2, [pc, #44]	; (8002aa4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a78:	4c0b      	ldr	r4, [pc, #44]	; (8002aa8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a7c:	e001      	b.n	8002a82 <LoopFillZerobss>

08002a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a80:	3204      	adds	r2, #4

08002a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a84:	d3fb      	bcc.n	8002a7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a86:	f7ff ffd7 	bl	8002a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a8a:	f013 fd2b 	bl	80164e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a8e:	f7fd fddf 	bl	8000650 <main>
  bx  lr    
 8002a92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a94:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a9c:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8002aa0:	0801b4f4 	.word	0x0801b4f4
  ldr r2, =_sbss
 8002aa4:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8002aa8:	20001b40 	.word	0x20001b40

08002aac <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aac:	e7fe      	b.n	8002aac <CAN1_RX0_IRQHandler>

08002aae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ab2:	2003      	movs	r0, #3
 8002ab4:	f000 fd95 	bl	80035e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ab8:	200f      	movs	r0, #15
 8002aba:	f7ff fe29 	bl	8002710 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002abe:	f7ff f851 	bl	8001b64 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002acc:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <HAL_IncTick+0x20>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_IncTick+0x24>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	4a04      	ldr	r2, [pc, #16]	; (8002aec <HAL_IncTick+0x24>)
 8002ada:	6013      	str	r3, [r2, #0]
}
 8002adc:	bf00      	nop
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	20000008 	.word	0x20000008
 8002aec:	20001b2c 	.word	0x20001b2c

08002af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  return uwTick;
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <HAL_GetTick+0x14>)
 8002af6:	681b      	ldr	r3, [r3, #0]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20001b2c 	.word	0x20001b2c

08002b08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e031      	b.n	8002b82 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7ff f840 	bl	8001bac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d116      	bne.n	8002b74 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b4a:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <HAL_ADC_Init+0x84>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	f043 0202 	orr.w	r2, r3, #2
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fb92 	bl	8003280 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f023 0303 	bic.w	r3, r3, #3
 8002b6a:	f043 0201 	orr.w	r2, r3, #1
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40
 8002b72:	e001      	b.n	8002b78 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	ffffeefd 	.word	0xffffeefd

08002b90 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_Start_IT+0x1a>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e0b5      	b.n	8002d16 <HAL_ADC_Start_IT+0x186>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d018      	beq.n	8002bf2 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002bd0:	4b54      	ldr	r3, [pc, #336]	; (8002d24 <HAL_ADC_Start_IT+0x194>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a54      	ldr	r2, [pc, #336]	; (8002d28 <HAL_ADC_Start_IT+0x198>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	0c9a      	lsrs	r2, r3, #18
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002be4:	e002      	b.n	8002bec <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f9      	bne.n	8002be6 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d17d      	bne.n	8002cfc <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c04:	4b49      	ldr	r3, [pc, #292]	; (8002d2c <HAL_ADC_Start_IT+0x19c>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d007      	beq.n	8002c2e <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c26:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c3a:	d106      	bne.n	8002c4a <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c40:	f023 0206 	bic.w	r2, r3, #6
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	645a      	str	r2, [r3, #68]	; 0x44
 8002c48:	e002      	b.n	8002c50 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002c60:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6859      	ldr	r1, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4b30      	ldr	r3, [pc, #192]	; (8002d30 <HAL_ADC_Start_IT+0x1a0>)
 8002c6e:	430b      	orrs	r3, r1
 8002c70:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002c72:	4b30      	ldr	r3, [pc, #192]	; (8002d34 <HAL_ADC_Start_IT+0x1a4>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 031f 	and.w	r3, r3, #31
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10f      	bne.n	8002c9e <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d143      	bne.n	8002d14 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	e03a      	b.n	8002d14 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a25      	ldr	r2, [pc, #148]	; (8002d38 <HAL_ADC_Start_IT+0x1a8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d10e      	bne.n	8002cc6 <HAL_ADC_Start_IT+0x136>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d107      	bne.n	8002cc6 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cc4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002cc6:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <HAL_ADC_Start_IT+0x1a4>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d120      	bne.n	8002d14 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a19      	ldr	r2, [pc, #100]	; (8002d3c <HAL_ADC_Start_IT+0x1ac>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d11b      	bne.n	8002d14 <HAL_ADC_Start_IT+0x184>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d114      	bne.n	8002d14 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	e00b      	b.n	8002d14 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f043 0210 	orr.w	r2, r3, #16
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0c:	f043 0201 	orr.w	r2, r3, #1
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20000000 	.word	0x20000000
 8002d28:	431bde83 	.word	0x431bde83
 8002d2c:	fffff8fe 	.word	0xfffff8fe
 8002d30:	04000020 	.word	0x04000020
 8002d34:	40012300 	.word	0x40012300
 8002d38:	40012000 	.word	0x40012000
 8002d3c:	40012200 	.word	0x40012200

08002d40 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	bf0c      	ite	eq
 8002d5e:	2301      	moveq	r3, #1
 8002d60:	2300      	movne	r3, #0
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	bf0c      	ite	eq
 8002d74:	2301      	moveq	r3, #1
 8002d76:	2300      	movne	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d049      	beq.n	8002e16 <HAL_ADC_IRQHandler+0xd6>
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d046      	beq.n	8002e16 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d105      	bne.n	8002da0 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d12b      	bne.n	8002e06 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d127      	bne.n	8002e06 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d006      	beq.n	8002dd2 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d119      	bne.n	8002e06 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0220 	bic.w	r2, r2, #32
 8002de0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d105      	bne.n	8002e06 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f043 0201 	orr.w	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fd fc0e 	bl	8000628 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f06f 0212 	mvn.w	r2, #18
 8002e14:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	bf0c      	ite	eq
 8002e24:	2301      	moveq	r3, #1
 8002e26:	2300      	movne	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e36:	2b80      	cmp	r3, #128	; 0x80
 8002e38:	bf0c      	ite	eq
 8002e3a:	2301      	moveq	r3, #1
 8002e3c:	2300      	movne	r3, #0
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d057      	beq.n	8002ef8 <HAL_ADC_IRQHandler+0x1b8>
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d054      	beq.n	8002ef8 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d105      	bne.n	8002e66 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d139      	bne.n	8002ee8 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d006      	beq.n	8002e90 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d12b      	bne.n	8002ee8 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d124      	bne.n	8002ee8 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d11d      	bne.n	8002ee8 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d119      	bne.n	8002ee8 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ec2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d105      	bne.n	8002ee8 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	f043 0201 	orr.w	r2, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 fac3 	bl	8003474 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f06f 020c 	mvn.w	r2, #12
 8002ef6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	bf0c      	ite	eq
 8002f06:	2301      	moveq	r3, #1
 8002f08:	2300      	movne	r3, #0
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f18:	2b40      	cmp	r3, #64	; 0x40
 8002f1a:	bf0c      	ite	eq
 8002f1c:	2301      	moveq	r3, #1
 8002f1e:	2300      	movne	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d017      	beq.n	8002f5a <HAL_ADC_IRQHandler+0x21a>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d014      	beq.n	8002f5a <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d10d      	bne.n	8002f5a <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f839 	bl	8002fc2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f06f 0201 	mvn.w	r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	2b20      	cmp	r3, #32
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f7e:	bf0c      	ite	eq
 8002f80:	2301      	moveq	r3, #1
 8002f82:	2300      	movne	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d015      	beq.n	8002fba <HAL_ADC_IRQHandler+0x27a>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d012      	beq.n	8002fba <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f98:	f043 0202 	orr.w	r2, r3, #2
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0220 	mvn.w	r2, #32
 8002fa8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f813 	bl	8002fd6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0220 	mvn.w	r2, #32
 8002fb8:	601a      	str	r2, [r3, #0]
  }
}
 8002fba:	bf00      	nop
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x1c>
 8003004:	2302      	movs	r3, #2
 8003006:	e12a      	b.n	800325e <HAL_ADC_ConfigChannel+0x272>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b09      	cmp	r3, #9
 8003016:	d93a      	bls.n	800308e <HAL_ADC_ConfigChannel+0xa2>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003020:	d035      	beq.n	800308e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68d9      	ldr	r1, [r3, #12]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	b29b      	uxth	r3, r3
 800302e:	461a      	mov	r2, r3
 8003030:	4613      	mov	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4413      	add	r3, r2
 8003036:	3b1e      	subs	r3, #30
 8003038:	2207      	movs	r2, #7
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43da      	mvns	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	400a      	ands	r2, r1
 8003046:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a87      	ldr	r2, [pc, #540]	; (800326c <HAL_ADC_ConfigChannel+0x280>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d10a      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68d9      	ldr	r1, [r3, #12]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	061a      	lsls	r2, r3, #24
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003066:	e035      	b.n	80030d4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68d9      	ldr	r1, [r3, #12]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	b29b      	uxth	r3, r3
 8003078:	4618      	mov	r0, r3
 800307a:	4603      	mov	r3, r0
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	4403      	add	r3, r0
 8003080:	3b1e      	subs	r3, #30
 8003082:	409a      	lsls	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800308c:	e022      	b.n	80030d4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6919      	ldr	r1, [r3, #16]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	b29b      	uxth	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	4613      	mov	r3, r2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4413      	add	r3, r2
 80030a2:	2207      	movs	r2, #7
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43da      	mvns	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	400a      	ands	r2, r1
 80030b0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6919      	ldr	r1, [r3, #16]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	4618      	mov	r0, r3
 80030c4:	4603      	mov	r3, r0
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4403      	add	r3, r0
 80030ca:	409a      	lsls	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b06      	cmp	r3, #6
 80030da:	d824      	bhi.n	8003126 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	3b05      	subs	r3, #5
 80030ee:	221f      	movs	r2, #31
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43da      	mvns	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	400a      	ands	r2, r1
 80030fc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	b29b      	uxth	r3, r3
 800310a:	4618      	mov	r0, r3
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	3b05      	subs	r3, #5
 8003118:	fa00 f203 	lsl.w	r2, r0, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	635a      	str	r2, [r3, #52]	; 0x34
 8003124:	e04c      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b0c      	cmp	r3, #12
 800312c:	d824      	bhi.n	8003178 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	3b23      	subs	r3, #35	; 0x23
 8003140:	221f      	movs	r2, #31
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43da      	mvns	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	400a      	ands	r2, r1
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	b29b      	uxth	r3, r3
 800315c:	4618      	mov	r0, r3
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	3b23      	subs	r3, #35	; 0x23
 800316a:	fa00 f203 	lsl.w	r2, r0, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	631a      	str	r2, [r3, #48]	; 0x30
 8003176:	e023      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	3b41      	subs	r3, #65	; 0x41
 800318a:	221f      	movs	r2, #31
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43da      	mvns	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	400a      	ands	r2, r1
 8003198:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	4618      	mov	r0, r3
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	3b41      	subs	r3, #65	; 0x41
 80031b4:	fa00 f203 	lsl.w	r2, r0, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a2a      	ldr	r2, [pc, #168]	; (8003270 <HAL_ADC_ConfigChannel+0x284>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d10a      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x1f4>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031d2:	d105      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80031d4:	4b27      	ldr	r3, [pc, #156]	; (8003274 <HAL_ADC_ConfigChannel+0x288>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	4a26      	ldr	r2, [pc, #152]	; (8003274 <HAL_ADC_ConfigChannel+0x288>)
 80031da:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80031de:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a22      	ldr	r2, [pc, #136]	; (8003270 <HAL_ADC_ConfigChannel+0x284>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d109      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x212>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b12      	cmp	r3, #18
 80031f0:	d105      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80031f2:	4b20      	ldr	r3, [pc, #128]	; (8003274 <HAL_ADC_ConfigChannel+0x288>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	4a1f      	ldr	r2, [pc, #124]	; (8003274 <HAL_ADC_ConfigChannel+0x288>)
 80031f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031fc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1b      	ldr	r2, [pc, #108]	; (8003270 <HAL_ADC_ConfigChannel+0x284>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d125      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x268>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a17      	ldr	r2, [pc, #92]	; (800326c <HAL_ADC_ConfigChannel+0x280>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d003      	beq.n	800321a <HAL_ADC_ConfigChannel+0x22e>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b11      	cmp	r3, #17
 8003218:	d11c      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800321a:	4b16      	ldr	r3, [pc, #88]	; (8003274 <HAL_ADC_ConfigChannel+0x288>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	4a15      	ldr	r2, [pc, #84]	; (8003274 <HAL_ADC_ConfigChannel+0x288>)
 8003220:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003224:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a10      	ldr	r2, [pc, #64]	; (800326c <HAL_ADC_ConfigChannel+0x280>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d111      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003230:	4b11      	ldr	r3, [pc, #68]	; (8003278 <HAL_ADC_ConfigChannel+0x28c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a11      	ldr	r2, [pc, #68]	; (800327c <HAL_ADC_ConfigChannel+0x290>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	0c9a      	lsrs	r2, r3, #18
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003246:	e002      	b.n	800324e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	3b01      	subs	r3, #1
 800324c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1f9      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	10000012 	.word	0x10000012
 8003270:	40012000 	.word	0x40012000
 8003274:	40012300 	.word	0x40012300
 8003278:	20000000 	.word	0x20000000
 800327c:	431bde83 	.word	0x431bde83

08003280 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003288:	4b78      	ldr	r3, [pc, #480]	; (800346c <ADC_Init+0x1ec>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4a77      	ldr	r2, [pc, #476]	; (800346c <ADC_Init+0x1ec>)
 800328e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003292:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003294:	4b75      	ldr	r3, [pc, #468]	; (800346c <ADC_Init+0x1ec>)
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	4973      	ldr	r1, [pc, #460]	; (800346c <ADC_Init+0x1ec>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6859      	ldr	r1, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	021a      	lsls	r2, r3, #8
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6859      	ldr	r1, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6899      	ldr	r1, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	4a58      	ldr	r2, [pc, #352]	; (8003470 <ADC_Init+0x1f0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d022      	beq.n	800335a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003322:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6899      	ldr	r1, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003344:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6899      	ldr	r1, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	e00f      	b.n	800337a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003368:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003378:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0202 	bic.w	r2, r2, #2
 8003388:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6899      	ldr	r1, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	005a      	lsls	r2, r3, #1
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d01b      	beq.n	80033e0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6859      	ldr	r1, [r3, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	3b01      	subs	r3, #1
 80033d4:	035a      	lsls	r2, r3, #13
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
 80033de:	e007      	b.n	80033f0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80033fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	3b01      	subs	r3, #1
 800340c:	051a      	lsls	r2, r3, #20
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003424:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6899      	ldr	r1, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003432:	025a      	lsls	r2, r3, #9
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800344a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6899      	ldr	r1, [r3, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	029a      	lsls	r2, r3, #10
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	609a      	str	r2, [r3, #8]
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	40012300 	.word	0x40012300
 8003470:	0f000001 	.word	0x0f000001

08003474 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <__NVIC_SetPriorityGrouping+0x40>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034a4:	4013      	ands	r3, r2
 80034a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034b0:	4b06      	ldr	r3, [pc, #24]	; (80034cc <__NVIC_SetPriorityGrouping+0x44>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034b6:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <__NVIC_SetPriorityGrouping+0x40>)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	60d3      	str	r3, [r2, #12]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000ed00 	.word	0xe000ed00
 80034cc:	05fa0000 	.word	0x05fa0000

080034d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d4:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <__NVIC_GetPriorityGrouping+0x18>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	0a1b      	lsrs	r3, r3, #8
 80034da:	f003 0307 	and.w	r3, r3, #7
}
 80034de:	4618      	mov	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	e000ed00 	.word	0xe000ed00

080034ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	db0b      	blt.n	8003516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	f003 021f 	and.w	r2, r3, #31
 8003504:	4907      	ldr	r1, [pc, #28]	; (8003524 <__NVIC_EnableIRQ+0x38>)
 8003506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	2001      	movs	r0, #1
 800350e:	fa00 f202 	lsl.w	r2, r0, r2
 8003512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	e000e100 	.word	0xe000e100

08003528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	6039      	str	r1, [r7, #0]
 8003532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003538:	2b00      	cmp	r3, #0
 800353a:	db0a      	blt.n	8003552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	b2da      	uxtb	r2, r3
 8003540:	490c      	ldr	r1, [pc, #48]	; (8003574 <__NVIC_SetPriority+0x4c>)
 8003542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003546:	0112      	lsls	r2, r2, #4
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	440b      	add	r3, r1
 800354c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003550:	e00a      	b.n	8003568 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	b2da      	uxtb	r2, r3
 8003556:	4908      	ldr	r1, [pc, #32]	; (8003578 <__NVIC_SetPriority+0x50>)
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	3b04      	subs	r3, #4
 8003560:	0112      	lsls	r2, r2, #4
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	440b      	add	r3, r1
 8003566:	761a      	strb	r2, [r3, #24]
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	e000e100 	.word	0xe000e100
 8003578:	e000ed00 	.word	0xe000ed00

0800357c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800357c:	b480      	push	{r7}
 800357e:	b089      	sub	sp, #36	; 0x24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f1c3 0307 	rsb	r3, r3, #7
 8003596:	2b04      	cmp	r3, #4
 8003598:	bf28      	it	cs
 800359a:	2304      	movcs	r3, #4
 800359c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	3304      	adds	r3, #4
 80035a2:	2b06      	cmp	r3, #6
 80035a4:	d902      	bls.n	80035ac <NVIC_EncodePriority+0x30>
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	3b03      	subs	r3, #3
 80035aa:	e000      	b.n	80035ae <NVIC_EncodePriority+0x32>
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b0:	f04f 32ff 	mov.w	r2, #4294967295
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43da      	mvns	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	401a      	ands	r2, r3
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c4:	f04f 31ff 	mov.w	r1, #4294967295
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	fa01 f303 	lsl.w	r3, r1, r3
 80035ce:	43d9      	mvns	r1, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d4:	4313      	orrs	r3, r2
         );
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3724      	adds	r7, #36	; 0x24
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b082      	sub	sp, #8
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff ff4c 	bl	8003488 <__NVIC_SetPriorityGrouping>
}
 80035f0:	bf00      	nop
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800360a:	f7ff ff61 	bl	80034d0 <__NVIC_GetPriorityGrouping>
 800360e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	68b9      	ldr	r1, [r7, #8]
 8003614:	6978      	ldr	r0, [r7, #20]
 8003616:	f7ff ffb1 	bl	800357c <NVIC_EncodePriority>
 800361a:	4602      	mov	r2, r0
 800361c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003620:	4611      	mov	r1, r2
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff ff80 	bl	8003528 <__NVIC_SetPriority>
}
 8003628:	bf00      	nop
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800363a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff ff54 	bl	80034ec <__NVIC_EnableIRQ>
}
 8003644:	bf00      	nop
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e054      	b.n	8003708 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	7f5b      	ldrb	r3, [r3, #29]
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d105      	bne.n	8003674 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fe fafe 	bl	8001c70 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	791b      	ldrb	r3, [r3, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10c      	bne.n	800369c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a22      	ldr	r2, [pc, #136]	; (8003710 <HAL_CRC_Init+0xc4>)
 8003688:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0218 	bic.w	r2, r2, #24
 8003698:	609a      	str	r2, [r3, #8]
 800369a:	e00c      	b.n	80036b6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6899      	ldr	r1, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	461a      	mov	r2, r3
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f834 	bl	8003714 <HAL_CRCEx_Polynomial_Set>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e028      	b.n	8003708 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	795b      	ldrb	r3, [r3, #5]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d105      	bne.n	80036ca <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f04f 32ff 	mov.w	r2, #4294967295
 80036c6:	611a      	str	r2, [r3, #16]
 80036c8:	e004      	b.n	80036d4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6912      	ldr	r2, [r2, #16]
 80036d2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699a      	ldr	r2, [r3, #24]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	04c11db7 	.word	0x04c11db7

08003714 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003724:	231f      	movs	r3, #31
 8003726:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003728:	bf00      	nop
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1e5a      	subs	r2, r3, #1
 800372e:	613a      	str	r2, [r7, #16]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d009      	beq.n	8003748 <HAL_CRCEx_Polynomial_Set+0x34>
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	fa22 f303 	lsr.w	r3, r2, r3
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0f0      	beq.n	800372a <HAL_CRCEx_Polynomial_Set+0x16>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b18      	cmp	r3, #24
 800374c:	d846      	bhi.n	80037dc <HAL_CRCEx_Polynomial_Set+0xc8>
 800374e:	a201      	add	r2, pc, #4	; (adr r2, 8003754 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003754:	080037e3 	.word	0x080037e3
 8003758:	080037dd 	.word	0x080037dd
 800375c:	080037dd 	.word	0x080037dd
 8003760:	080037dd 	.word	0x080037dd
 8003764:	080037dd 	.word	0x080037dd
 8003768:	080037dd 	.word	0x080037dd
 800376c:	080037dd 	.word	0x080037dd
 8003770:	080037dd 	.word	0x080037dd
 8003774:	080037d1 	.word	0x080037d1
 8003778:	080037dd 	.word	0x080037dd
 800377c:	080037dd 	.word	0x080037dd
 8003780:	080037dd 	.word	0x080037dd
 8003784:	080037dd 	.word	0x080037dd
 8003788:	080037dd 	.word	0x080037dd
 800378c:	080037dd 	.word	0x080037dd
 8003790:	080037dd 	.word	0x080037dd
 8003794:	080037c5 	.word	0x080037c5
 8003798:	080037dd 	.word	0x080037dd
 800379c:	080037dd 	.word	0x080037dd
 80037a0:	080037dd 	.word	0x080037dd
 80037a4:	080037dd 	.word	0x080037dd
 80037a8:	080037dd 	.word	0x080037dd
 80037ac:	080037dd 	.word	0x080037dd
 80037b0:	080037dd 	.word	0x080037dd
 80037b4:	080037b9 	.word	0x080037b9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	2b06      	cmp	r3, #6
 80037bc:	d913      	bls.n	80037e6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80037c2:	e010      	b.n	80037e6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	2b07      	cmp	r3, #7
 80037c8:	d90f      	bls.n	80037ea <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80037ce:	e00c      	b.n	80037ea <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	2b0f      	cmp	r3, #15
 80037d4:	d90b      	bls.n	80037ee <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80037da:	e008      	b.n	80037ee <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	75fb      	strb	r3, [r7, #23]
      break;
 80037e0:	e006      	b.n	80037f0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80037e2:	bf00      	nop
 80037e4:	e004      	b.n	80037f0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80037e6:	bf00      	nop
 80037e8:	e002      	b.n	80037f0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80037ea:	bf00      	nop
 80037ec:	e000      	b.n	80037f0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80037ee:	bf00      	nop
  }
  if (status == HAL_OK)
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10d      	bne.n	8003812 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f023 0118 	bic.w	r1, r3, #24
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	430a      	orrs	r2, r1
 8003810:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003812:	7dfb      	ldrb	r3, [r7, #23]
}
 8003814:	4618      	mov	r0, r3
 8003816:	371c      	adds	r7, #28
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e069      	b.n	8003906 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d102      	bne.n	8003844 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fe fa36 	bl	8001cb0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6819      	ldr	r1, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4b2a      	ldr	r3, [pc, #168]	; (8003910 <HAL_DCMI_Init+0xf0>)
 8003866:	400b      	ands	r3, r1
 8003868:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6819      	ldr	r1, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800387e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800388a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003896:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80038a2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80038ae:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b10      	cmp	r3, #16
 80038be:	d112      	bne.n	80038e6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	7f1b      	ldrb	r3, [r3, #28]
 80038c4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	7f5b      	ldrb	r3, [r3, #29]
 80038ca:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80038cc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	7f9b      	ldrb	r3, [r3, #30]
 80038d2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80038d4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	7fdb      	ldrb	r3, [r3, #31]
 80038dc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80038e2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80038e4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f042 021e 	orr.w	r2, r2, #30
 80038f4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	ffe0f007 	.word	0xffe0f007

08003914 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_DMA_Start_IT+0x26>
 8003936:	2302      	movs	r3, #2
 8003938:	e048      	b.n	80039cc <HAL_DMA_Start_IT+0xb8>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b01      	cmp	r3, #1
 800394c:	d137      	bne.n	80039be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2202      	movs	r2, #2
 8003952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f836 	bl	80039d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396c:	223f      	movs	r2, #63	; 0x3f
 800396e:	409a      	lsls	r2, r3
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0216 	orr.w	r2, r2, #22
 8003982:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695a      	ldr	r2, [r3, #20]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003992:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	2b00      	cmp	r3, #0
 800399a:	d007      	beq.n	80039ac <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0208 	orr.w	r2, r2, #8
 80039aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0201 	orr.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	e005      	b.n	80039ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039c6:	2302      	movs	r3, #2
 80039c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b40      	cmp	r3, #64	; 0x40
 8003a00:	d108      	bne.n	8003a14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a12:	e007      	b.n	8003a24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	60da      	str	r2, [r3, #12]
}
 8003a24:	bf00      	nop
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e039      	b.n	8003ab6 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fe f9e8 	bl	8001e2c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a80:	f023 0107 	bic.w	r1, r3, #7
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a96:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <HAL_DMA2D_Init+0x90>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	68d1      	ldr	r1, [r2, #12]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	ffffc000 	.word	0xffffc000

08003ac4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d026      	beq.n	8003b34 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d021      	beq.n	8003b34 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003afe:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b04:	f043 0201 	orr.w	r2, r3, #1
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2201      	movs	r2, #1
 8003b12:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2204      	movs	r2, #4
 8003b18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d026      	beq.n	8003b8c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d021      	beq.n	8003b8c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b56:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b64:	f043 0202 	orr.w	r2, r3, #2
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2204      	movs	r2, #4
 8003b70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d026      	beq.n	8003be4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d021      	beq.n	8003be4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bae:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2208      	movs	r2, #8
 8003bb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbc:	f043 0204 	orr.w	r2, r3, #4
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2204      	movs	r2, #4
 8003bc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d013      	beq.n	8003c16 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00e      	beq.n	8003c16 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c06:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2204      	movs	r2, #4
 8003c0e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f853 	bl	8003cbc <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d024      	beq.n	8003c6a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d01f      	beq.n	8003c6a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c38:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f003 0310 	and.w	r3, r3, #16
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01f      	beq.n	8003cb4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d01a      	beq.n	8003cb4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c8c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2210      	movs	r2, #16
 8003c94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f80e 	bl	8003cd0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_DMA2D_ConfigLayer+0x20>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e079      	b.n	8003df8 <HAL_DMA2D_ConfigLayer+0x114>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	3318      	adds	r3, #24
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	041b      	lsls	r3, r3, #16
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003d2e:	4b35      	ldr	r3, [pc, #212]	; (8003e04 <HAL_DMA2D_ConfigLayer+0x120>)
 8003d30:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b0a      	cmp	r3, #10
 8003d38:	d003      	beq.n	8003d42 <HAL_DMA2D_ConfigLayer+0x5e>
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b09      	cmp	r3, #9
 8003d40:	d107      	bne.n	8003d52 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	e005      	b.n	8003d5e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	061b      	lsls	r3, r3, #24
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d120      	bne.n	8003da6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	ea02 0103 	and.w	r1, r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	6812      	ldr	r2, [r2, #0]
 8003d84:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b0a      	cmp	r3, #10
 8003d8c:	d003      	beq.n	8003d96 <HAL_DMA2D_ConfigLayer+0xb2>
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b09      	cmp	r3, #9
 8003d94:	d127      	bne.n	8003de6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003da2:	629a      	str	r2, [r3, #40]	; 0x28
 8003da4:	e01f      	b.n	8003de6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69da      	ldr	r2, [r3, #28]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	43db      	mvns	r3, r3
 8003db0:	ea02 0103 	and.w	r1, r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	6812      	ldr	r2, [r2, #0]
 8003dc6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b0a      	cmp	r3, #10
 8003dce:	d003      	beq.n	8003dd8 <HAL_DMA2D_ConfigLayer+0xf4>
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b09      	cmp	r3, #9
 8003dd6:	d106      	bne.n	8003de6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003de4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	371c      	adds	r7, #28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	ff03000f 	.word	0xff03000f

08003e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b089      	sub	sp, #36	; 0x24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e22:	2300      	movs	r3, #0
 8003e24:	61fb      	str	r3, [r7, #28]
 8003e26:	e175      	b.n	8004114 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003e28:	2201      	movs	r2, #1
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	f040 8164 	bne.w	800410e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d00b      	beq.n	8003e66 <HAL_GPIO_Init+0x5e>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d007      	beq.n	8003e66 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e5a:	2b11      	cmp	r3, #17
 8003e5c:	d003      	beq.n	8003e66 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b12      	cmp	r3, #18
 8003e64:	d130      	bne.n	8003ec8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	2203      	movs	r2, #3
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43db      	mvns	r3, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f003 0201 	and.w	r2, r3, #1
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	2203      	movs	r2, #3
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	4013      	ands	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d003      	beq.n	8003f08 <HAL_GPIO_Init+0x100>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b12      	cmp	r3, #18
 8003f06:	d123      	bne.n	8003f50 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	08da      	lsrs	r2, r3, #3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3208      	adds	r2, #8
 8003f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	220f      	movs	r2, #15
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	43db      	mvns	r3, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	691a      	ldr	r2, [r3, #16]
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	08da      	lsrs	r2, r3, #3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3208      	adds	r2, #8
 8003f4a:	69b9      	ldr	r1, [r7, #24]
 8003f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	2203      	movs	r2, #3
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	43db      	mvns	r3, r3
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	4013      	ands	r3, r2
 8003f66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f003 0203 	and.w	r2, r3, #3
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 80be 	beq.w	800410e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f92:	4b66      	ldr	r3, [pc, #408]	; (800412c <HAL_GPIO_Init+0x324>)
 8003f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f96:	4a65      	ldr	r2, [pc, #404]	; (800412c <HAL_GPIO_Init+0x324>)
 8003f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f9e:	4b63      	ldr	r3, [pc, #396]	; (800412c <HAL_GPIO_Init+0x324>)
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003faa:	4a61      	ldr	r2, [pc, #388]	; (8004130 <HAL_GPIO_Init+0x328>)
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	089b      	lsrs	r3, r3, #2
 8003fb0:	3302      	adds	r3, #2
 8003fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f003 0303 	and.w	r3, r3, #3
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	220f      	movs	r2, #15
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a58      	ldr	r2, [pc, #352]	; (8004134 <HAL_GPIO_Init+0x32c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d037      	beq.n	8004046 <HAL_GPIO_Init+0x23e>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a57      	ldr	r2, [pc, #348]	; (8004138 <HAL_GPIO_Init+0x330>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d031      	beq.n	8004042 <HAL_GPIO_Init+0x23a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a56      	ldr	r2, [pc, #344]	; (800413c <HAL_GPIO_Init+0x334>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d02b      	beq.n	800403e <HAL_GPIO_Init+0x236>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a55      	ldr	r2, [pc, #340]	; (8004140 <HAL_GPIO_Init+0x338>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d025      	beq.n	800403a <HAL_GPIO_Init+0x232>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a54      	ldr	r2, [pc, #336]	; (8004144 <HAL_GPIO_Init+0x33c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d01f      	beq.n	8004036 <HAL_GPIO_Init+0x22e>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a53      	ldr	r2, [pc, #332]	; (8004148 <HAL_GPIO_Init+0x340>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d019      	beq.n	8004032 <HAL_GPIO_Init+0x22a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a52      	ldr	r2, [pc, #328]	; (800414c <HAL_GPIO_Init+0x344>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <HAL_GPIO_Init+0x226>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a51      	ldr	r2, [pc, #324]	; (8004150 <HAL_GPIO_Init+0x348>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00d      	beq.n	800402a <HAL_GPIO_Init+0x222>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a50      	ldr	r2, [pc, #320]	; (8004154 <HAL_GPIO_Init+0x34c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d007      	beq.n	8004026 <HAL_GPIO_Init+0x21e>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a4f      	ldr	r2, [pc, #316]	; (8004158 <HAL_GPIO_Init+0x350>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d101      	bne.n	8004022 <HAL_GPIO_Init+0x21a>
 800401e:	2309      	movs	r3, #9
 8004020:	e012      	b.n	8004048 <HAL_GPIO_Init+0x240>
 8004022:	230a      	movs	r3, #10
 8004024:	e010      	b.n	8004048 <HAL_GPIO_Init+0x240>
 8004026:	2308      	movs	r3, #8
 8004028:	e00e      	b.n	8004048 <HAL_GPIO_Init+0x240>
 800402a:	2307      	movs	r3, #7
 800402c:	e00c      	b.n	8004048 <HAL_GPIO_Init+0x240>
 800402e:	2306      	movs	r3, #6
 8004030:	e00a      	b.n	8004048 <HAL_GPIO_Init+0x240>
 8004032:	2305      	movs	r3, #5
 8004034:	e008      	b.n	8004048 <HAL_GPIO_Init+0x240>
 8004036:	2304      	movs	r3, #4
 8004038:	e006      	b.n	8004048 <HAL_GPIO_Init+0x240>
 800403a:	2303      	movs	r3, #3
 800403c:	e004      	b.n	8004048 <HAL_GPIO_Init+0x240>
 800403e:	2302      	movs	r3, #2
 8004040:	e002      	b.n	8004048 <HAL_GPIO_Init+0x240>
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <HAL_GPIO_Init+0x240>
 8004046:	2300      	movs	r3, #0
 8004048:	69fa      	ldr	r2, [r7, #28]
 800404a:	f002 0203 	and.w	r2, r2, #3
 800404e:	0092      	lsls	r2, r2, #2
 8004050:	4093      	lsls	r3, r2
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	4313      	orrs	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004058:	4935      	ldr	r1, [pc, #212]	; (8004130 <HAL_GPIO_Init+0x328>)
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	089b      	lsrs	r3, r3, #2
 800405e:	3302      	adds	r3, #2
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004066:	4b3d      	ldr	r3, [pc, #244]	; (800415c <HAL_GPIO_Init+0x354>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	43db      	mvns	r3, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	4013      	ands	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800408a:	4a34      	ldr	r2, [pc, #208]	; (800415c <HAL_GPIO_Init+0x354>)
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004090:	4b32      	ldr	r3, [pc, #200]	; (800415c <HAL_GPIO_Init+0x354>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	43db      	mvns	r3, r3
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4013      	ands	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040b4:	4a29      	ldr	r2, [pc, #164]	; (800415c <HAL_GPIO_Init+0x354>)
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040ba:	4b28      	ldr	r3, [pc, #160]	; (800415c <HAL_GPIO_Init+0x354>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	43db      	mvns	r3, r3
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	4013      	ands	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040de:	4a1f      	ldr	r2, [pc, #124]	; (800415c <HAL_GPIO_Init+0x354>)
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040e4:	4b1d      	ldr	r3, [pc, #116]	; (800415c <HAL_GPIO_Init+0x354>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	43db      	mvns	r3, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4013      	ands	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004108:	4a14      	ldr	r2, [pc, #80]	; (800415c <HAL_GPIO_Init+0x354>)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	3301      	adds	r3, #1
 8004112:	61fb      	str	r3, [r7, #28]
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	2b0f      	cmp	r3, #15
 8004118:	f67f ae86 	bls.w	8003e28 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800411c:	bf00      	nop
 800411e:	bf00      	nop
 8004120:	3724      	adds	r7, #36	; 0x24
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40023800 	.word	0x40023800
 8004130:	40013800 	.word	0x40013800
 8004134:	40020000 	.word	0x40020000
 8004138:	40020400 	.word	0x40020400
 800413c:	40020800 	.word	0x40020800
 8004140:	40020c00 	.word	0x40020c00
 8004144:	40021000 	.word	0x40021000
 8004148:	40021400 	.word	0x40021400
 800414c:	40021800 	.word	0x40021800
 8004150:	40021c00 	.word	0x40021c00
 8004154:	40022000 	.word	0x40022000
 8004158:	40022400 	.word	0x40022400
 800415c:	40013c00 	.word	0x40013c00

08004160 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004172:	2300      	movs	r3, #0
 8004174:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	e0d9      	b.n	8004330 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800417c:	2201      	movs	r2, #1
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	4013      	ands	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	429a      	cmp	r2, r3
 8004194:	f040 80c9 	bne.w	800432a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004198:	4a6b      	ldr	r2, [pc, #428]	; (8004348 <HAL_GPIO_DeInit+0x1e8>)
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	089b      	lsrs	r3, r3, #2
 800419e:	3302      	adds	r3, #2
 80041a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f003 0303 	and.w	r3, r3, #3
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	220f      	movs	r2, #15
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	4013      	ands	r3, r2
 80041b8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a63      	ldr	r2, [pc, #396]	; (800434c <HAL_GPIO_DeInit+0x1ec>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d037      	beq.n	8004232 <HAL_GPIO_DeInit+0xd2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a62      	ldr	r2, [pc, #392]	; (8004350 <HAL_GPIO_DeInit+0x1f0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d031      	beq.n	800422e <HAL_GPIO_DeInit+0xce>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a61      	ldr	r2, [pc, #388]	; (8004354 <HAL_GPIO_DeInit+0x1f4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d02b      	beq.n	800422a <HAL_GPIO_DeInit+0xca>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a60      	ldr	r2, [pc, #384]	; (8004358 <HAL_GPIO_DeInit+0x1f8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d025      	beq.n	8004226 <HAL_GPIO_DeInit+0xc6>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a5f      	ldr	r2, [pc, #380]	; (800435c <HAL_GPIO_DeInit+0x1fc>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01f      	beq.n	8004222 <HAL_GPIO_DeInit+0xc2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a5e      	ldr	r2, [pc, #376]	; (8004360 <HAL_GPIO_DeInit+0x200>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d019      	beq.n	800421e <HAL_GPIO_DeInit+0xbe>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a5d      	ldr	r2, [pc, #372]	; (8004364 <HAL_GPIO_DeInit+0x204>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d013      	beq.n	800421a <HAL_GPIO_DeInit+0xba>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a5c      	ldr	r2, [pc, #368]	; (8004368 <HAL_GPIO_DeInit+0x208>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00d      	beq.n	8004216 <HAL_GPIO_DeInit+0xb6>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a5b      	ldr	r2, [pc, #364]	; (800436c <HAL_GPIO_DeInit+0x20c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d007      	beq.n	8004212 <HAL_GPIO_DeInit+0xb2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a5a      	ldr	r2, [pc, #360]	; (8004370 <HAL_GPIO_DeInit+0x210>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d101      	bne.n	800420e <HAL_GPIO_DeInit+0xae>
 800420a:	2309      	movs	r3, #9
 800420c:	e012      	b.n	8004234 <HAL_GPIO_DeInit+0xd4>
 800420e:	230a      	movs	r3, #10
 8004210:	e010      	b.n	8004234 <HAL_GPIO_DeInit+0xd4>
 8004212:	2308      	movs	r3, #8
 8004214:	e00e      	b.n	8004234 <HAL_GPIO_DeInit+0xd4>
 8004216:	2307      	movs	r3, #7
 8004218:	e00c      	b.n	8004234 <HAL_GPIO_DeInit+0xd4>
 800421a:	2306      	movs	r3, #6
 800421c:	e00a      	b.n	8004234 <HAL_GPIO_DeInit+0xd4>
 800421e:	2305      	movs	r3, #5
 8004220:	e008      	b.n	8004234 <HAL_GPIO_DeInit+0xd4>
 8004222:	2304      	movs	r3, #4
 8004224:	e006      	b.n	8004234 <HAL_GPIO_DeInit+0xd4>
 8004226:	2303      	movs	r3, #3
 8004228:	e004      	b.n	8004234 <HAL_GPIO_DeInit+0xd4>
 800422a:	2302      	movs	r3, #2
 800422c:	e002      	b.n	8004234 <HAL_GPIO_DeInit+0xd4>
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <HAL_GPIO_DeInit+0xd4>
 8004232:	2300      	movs	r3, #0
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	f002 0203 	and.w	r2, r2, #3
 800423a:	0092      	lsls	r2, r2, #2
 800423c:	4093      	lsls	r3, r2
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	429a      	cmp	r2, r3
 8004242:	d132      	bne.n	80042aa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004244:	4b4b      	ldr	r3, [pc, #300]	; (8004374 <HAL_GPIO_DeInit+0x214>)
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	43db      	mvns	r3, r3
 800424c:	4949      	ldr	r1, [pc, #292]	; (8004374 <HAL_GPIO_DeInit+0x214>)
 800424e:	4013      	ands	r3, r2
 8004250:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004252:	4b48      	ldr	r3, [pc, #288]	; (8004374 <HAL_GPIO_DeInit+0x214>)
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	43db      	mvns	r3, r3
 800425a:	4946      	ldr	r1, [pc, #280]	; (8004374 <HAL_GPIO_DeInit+0x214>)
 800425c:	4013      	ands	r3, r2
 800425e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004260:	4b44      	ldr	r3, [pc, #272]	; (8004374 <HAL_GPIO_DeInit+0x214>)
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	43db      	mvns	r3, r3
 8004268:	4942      	ldr	r1, [pc, #264]	; (8004374 <HAL_GPIO_DeInit+0x214>)
 800426a:	4013      	ands	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800426e:	4b41      	ldr	r3, [pc, #260]	; (8004374 <HAL_GPIO_DeInit+0x214>)
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	43db      	mvns	r3, r3
 8004276:	493f      	ldr	r1, [pc, #252]	; (8004374 <HAL_GPIO_DeInit+0x214>)
 8004278:	4013      	ands	r3, r2
 800427a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	220f      	movs	r2, #15
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800428c:	4a2e      	ldr	r2, [pc, #184]	; (8004348 <HAL_GPIO_DeInit+0x1e8>)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	089b      	lsrs	r3, r3, #2
 8004292:	3302      	adds	r3, #2
 8004294:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	43da      	mvns	r2, r3
 800429c:	482a      	ldr	r0, [pc, #168]	; (8004348 <HAL_GPIO_DeInit+0x1e8>)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	089b      	lsrs	r3, r3, #2
 80042a2:	400a      	ands	r2, r1
 80042a4:	3302      	adds	r3, #2
 80042a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	2103      	movs	r1, #3
 80042b4:	fa01 f303 	lsl.w	r3, r1, r3
 80042b8:	43db      	mvns	r3, r3
 80042ba:	401a      	ands	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	08da      	lsrs	r2, r3, #3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3208      	adds	r2, #8
 80042c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	220f      	movs	r2, #15
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	43db      	mvns	r3, r3
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	08d2      	lsrs	r2, r2, #3
 80042e0:	4019      	ands	r1, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	3208      	adds	r2, #8
 80042e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	2103      	movs	r1, #3
 80042f4:	fa01 f303 	lsl.w	r3, r1, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	401a      	ands	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	2101      	movs	r1, #1
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	fa01 f303 	lsl.w	r3, r1, r3
 800430c:	43db      	mvns	r3, r3
 800430e:	401a      	ands	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	2103      	movs	r1, #3
 800431e:	fa01 f303 	lsl.w	r3, r1, r3
 8004322:	43db      	mvns	r3, r3
 8004324:	401a      	ands	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	3301      	adds	r3, #1
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	2b0f      	cmp	r3, #15
 8004334:	f67f af22 	bls.w	800417c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004338:	bf00      	nop
 800433a:	bf00      	nop
 800433c:	371c      	adds	r7, #28
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40013800 	.word	0x40013800
 800434c:	40020000 	.word	0x40020000
 8004350:	40020400 	.word	0x40020400
 8004354:	40020800 	.word	0x40020800
 8004358:	40020c00 	.word	0x40020c00
 800435c:	40021000 	.word	0x40021000
 8004360:	40021400 	.word	0x40021400
 8004364:	40021800 	.word	0x40021800
 8004368:	40021c00 	.word	0x40021c00
 800436c:	40022000 	.word	0x40022000
 8004370:	40022400 	.word	0x40022400
 8004374:	40013c00 	.word	0x40013c00

08004378 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	887b      	ldrh	r3, [r7, #2]
 800438a:	4013      	ands	r3, r2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
 8004394:	e001      	b.n	800439a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004396:	2300      	movs	r3, #0
 8004398:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800439a:	7bfb      	ldrb	r3, [r7, #15]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	807b      	strh	r3, [r7, #2]
 80043b4:	4613      	mov	r3, r2
 80043b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043b8:	787b      	ldrb	r3, [r7, #1]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043be:	887a      	ldrh	r2, [r7, #2]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80043c4:	e003      	b.n	80043ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80043c6:	887b      	ldrh	r3, [r7, #2]
 80043c8:	041a      	lsls	r2, r3, #16
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	619a      	str	r2, [r3, #24]
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
	...

080043dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	4603      	mov	r3, r0
 80043e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80043e6:	4b08      	ldr	r3, [pc, #32]	; (8004408 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043e8:	695a      	ldr	r2, [r3, #20]
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	4013      	ands	r3, r2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d006      	beq.n	8004400 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043f2:	4a05      	ldr	r2, [pc, #20]	; (8004408 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043f4:	88fb      	ldrh	r3, [r7, #6]
 80043f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043f8:	88fb      	ldrh	r3, [r7, #6]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fc f8f4 	bl	80005e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004400:	bf00      	nop
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40013c00 	.word	0x40013c00

0800440c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e07f      	b.n	800451e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d106      	bne.n	8004438 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fd fd20 	bl	8001e78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2224      	movs	r2, #36	; 0x24
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0201 	bic.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800445c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800446c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d107      	bne.n	8004486 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004482:	609a      	str	r2, [r3, #8]
 8004484:	e006      	b.n	8004494 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004492:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d104      	bne.n	80044a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6859      	ldr	r1, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	4b1d      	ldr	r3, [pc, #116]	; (8004528 <HAL_I2C_Init+0x11c>)
 80044b2:	430b      	orrs	r3, r1
 80044b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691a      	ldr	r2, [r3, #16]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	ea42 0103 	orr.w	r1, r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	021a      	lsls	r2, r3, #8
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	69d9      	ldr	r1, [r3, #28]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1a      	ldr	r2, [r3, #32]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	02008000 	.word	0x02008000

0800452c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e021      	b.n	8004582 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2224      	movs	r2, #36	; 0x24
 8004542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0201 	bic.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fd fcd2 	bl	8001f00 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b088      	sub	sp, #32
 8004590:	af02      	add	r7, sp, #8
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	4608      	mov	r0, r1
 8004596:	4611      	mov	r1, r2
 8004598:	461a      	mov	r2, r3
 800459a:	4603      	mov	r3, r0
 800459c:	817b      	strh	r3, [r7, #10]
 800459e:	460b      	mov	r3, r1
 80045a0:	813b      	strh	r3, [r7, #8]
 80045a2:	4613      	mov	r3, r2
 80045a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b20      	cmp	r3, #32
 80045b0:	f040 80f9 	bne.w	80047a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <HAL_I2C_Mem_Write+0x34>
 80045ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d105      	bne.n	80045cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0ed      	b.n	80047a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d101      	bne.n	80045da <HAL_I2C_Mem_Write+0x4e>
 80045d6:	2302      	movs	r3, #2
 80045d8:	e0e6      	b.n	80047a8 <HAL_I2C_Mem_Write+0x21c>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045e2:	f7fe fa85 	bl	8002af0 <HAL_GetTick>
 80045e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	2319      	movs	r3, #25
 80045ee:	2201      	movs	r2, #1
 80045f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 fac3 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e0d1      	b.n	80047a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2221      	movs	r2, #33	; 0x21
 8004608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2240      	movs	r2, #64	; 0x40
 8004610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a3a      	ldr	r2, [r7, #32]
 800461e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004624:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800462c:	88f8      	ldrh	r0, [r7, #6]
 800462e:	893a      	ldrh	r2, [r7, #8]
 8004630:	8979      	ldrh	r1, [r7, #10]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	9301      	str	r3, [sp, #4]
 8004636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	4603      	mov	r3, r0
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 f9d3 	bl	80049e8 <I2C_RequestMemoryWrite>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d005      	beq.n	8004654 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e0a9      	b.n	80047a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	2bff      	cmp	r3, #255	; 0xff
 800465c:	d90e      	bls.n	800467c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	22ff      	movs	r2, #255	; 0xff
 8004662:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004668:	b2da      	uxtb	r2, r3
 800466a:	8979      	ldrh	r1, [r7, #10]
 800466c:	2300      	movs	r3, #0
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 fba5 	bl	8004dc4 <I2C_TransferConfig>
 800467a:	e00f      	b.n	800469c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468a:	b2da      	uxtb	r2, r3
 800468c:	8979      	ldrh	r1, [r7, #10]
 800468e:	2300      	movs	r3, #0
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 fb94 	bl	8004dc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 faad 	bl	8004c00 <I2C_WaitOnTXISFlagUntilTimeout>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e07b      	b.n	80047a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	781a      	ldrb	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d034      	beq.n	8004754 <HAL_I2C_Mem_Write+0x1c8>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d130      	bne.n	8004754 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f8:	2200      	movs	r2, #0
 80046fa:	2180      	movs	r1, #128	; 0x80
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 fa3f 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e04d      	b.n	80047a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004710:	b29b      	uxth	r3, r3
 8004712:	2bff      	cmp	r3, #255	; 0xff
 8004714:	d90e      	bls.n	8004734 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	22ff      	movs	r2, #255	; 0xff
 800471a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004720:	b2da      	uxtb	r2, r3
 8004722:	8979      	ldrh	r1, [r7, #10]
 8004724:	2300      	movs	r3, #0
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 fb49 	bl	8004dc4 <I2C_TransferConfig>
 8004732:	e00f      	b.n	8004754 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004742:	b2da      	uxtb	r2, r3
 8004744:	8979      	ldrh	r1, [r7, #10]
 8004746:	2300      	movs	r3, #0
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 fb38 	bl	8004dc4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d19e      	bne.n	800469c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 fa8c 	bl	8004c80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e01a      	b.n	80047a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2220      	movs	r2, #32
 8004778:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6859      	ldr	r1, [r3, #4]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <HAL_I2C_Mem_Write+0x224>)
 8004786:	400b      	ands	r3, r1
 8004788:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2220      	movs	r2, #32
 800478e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e000      	b.n	80047a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80047a6:	2302      	movs	r3, #2
  }
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	fe00e800 	.word	0xfe00e800

080047b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af02      	add	r7, sp, #8
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	4608      	mov	r0, r1
 80047be:	4611      	mov	r1, r2
 80047c0:	461a      	mov	r2, r3
 80047c2:	4603      	mov	r3, r0
 80047c4:	817b      	strh	r3, [r7, #10]
 80047c6:	460b      	mov	r3, r1
 80047c8:	813b      	strh	r3, [r7, #8]
 80047ca:	4613      	mov	r3, r2
 80047cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	f040 80fd 	bne.w	80049d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <HAL_I2C_Mem_Read+0x34>
 80047e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d105      	bne.n	80047f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e0f1      	b.n	80049d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <HAL_I2C_Mem_Read+0x4e>
 80047fe:	2302      	movs	r3, #2
 8004800:	e0ea      	b.n	80049d8 <HAL_I2C_Mem_Read+0x224>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800480a:	f7fe f971 	bl	8002af0 <HAL_GetTick>
 800480e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	2319      	movs	r3, #25
 8004816:	2201      	movs	r2, #1
 8004818:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 f9af 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e0d5      	b.n	80049d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2222      	movs	r2, #34	; 0x22
 8004830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2240      	movs	r2, #64	; 0x40
 8004838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a3a      	ldr	r2, [r7, #32]
 8004846:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800484c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004854:	88f8      	ldrh	r0, [r7, #6]
 8004856:	893a      	ldrh	r2, [r7, #8]
 8004858:	8979      	ldrh	r1, [r7, #10]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	9301      	str	r3, [sp, #4]
 800485e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	4603      	mov	r3, r0
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 f913 	bl	8004a90 <I2C_RequestMemoryRead>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e0ad      	b.n	80049d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004880:	b29b      	uxth	r3, r3
 8004882:	2bff      	cmp	r3, #255	; 0xff
 8004884:	d90e      	bls.n	80048a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	22ff      	movs	r2, #255	; 0xff
 800488a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004890:	b2da      	uxtb	r2, r3
 8004892:	8979      	ldrh	r1, [r7, #10]
 8004894:	4b52      	ldr	r3, [pc, #328]	; (80049e0 <HAL_I2C_Mem_Read+0x22c>)
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 fa91 	bl	8004dc4 <I2C_TransferConfig>
 80048a2:	e00f      	b.n	80048c4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	8979      	ldrh	r1, [r7, #10]
 80048b6:	4b4a      	ldr	r3, [pc, #296]	; (80049e0 <HAL_I2C_Mem_Read+0x22c>)
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 fa80 	bl	8004dc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ca:	2200      	movs	r2, #0
 80048cc:	2104      	movs	r1, #4
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 f956 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e07c      	b.n	80049d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	b2d2      	uxtb	r2, r2
 80048ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004906:	b29b      	uxth	r3, r3
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d034      	beq.n	8004984 <HAL_I2C_Mem_Read+0x1d0>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491e:	2b00      	cmp	r3, #0
 8004920:	d130      	bne.n	8004984 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004928:	2200      	movs	r2, #0
 800492a:	2180      	movs	r1, #128	; 0x80
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f927 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e04d      	b.n	80049d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004940:	b29b      	uxth	r3, r3
 8004942:	2bff      	cmp	r3, #255	; 0xff
 8004944:	d90e      	bls.n	8004964 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	22ff      	movs	r2, #255	; 0xff
 800494a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004950:	b2da      	uxtb	r2, r3
 8004952:	8979      	ldrh	r1, [r7, #10]
 8004954:	2300      	movs	r3, #0
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 fa31 	bl	8004dc4 <I2C_TransferConfig>
 8004962:	e00f      	b.n	8004984 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004968:	b29a      	uxth	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004972:	b2da      	uxtb	r2, r3
 8004974:	8979      	ldrh	r1, [r7, #10]
 8004976:	2300      	movs	r3, #0
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 fa20 	bl	8004dc4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d19a      	bne.n	80048c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 f974 	bl	8004c80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e01a      	b.n	80049d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2220      	movs	r2, #32
 80049a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6859      	ldr	r1, [r3, #4]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <HAL_I2C_Mem_Read+0x230>)
 80049b6:	400b      	ands	r3, r1
 80049b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	e000      	b.n	80049d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80049d6:	2302      	movs	r3, #2
  }
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	80002400 	.word	0x80002400
 80049e4:	fe00e800 	.word	0xfe00e800

080049e8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af02      	add	r7, sp, #8
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	4608      	mov	r0, r1
 80049f2:	4611      	mov	r1, r2
 80049f4:	461a      	mov	r2, r3
 80049f6:	4603      	mov	r3, r0
 80049f8:	817b      	strh	r3, [r7, #10]
 80049fa:	460b      	mov	r3, r1
 80049fc:	813b      	strh	r3, [r7, #8]
 80049fe:	4613      	mov	r3, r2
 8004a00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004a02:	88fb      	ldrh	r3, [r7, #6]
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	8979      	ldrh	r1, [r7, #10]
 8004a08:	4b20      	ldr	r3, [pc, #128]	; (8004a8c <I2C_RequestMemoryWrite+0xa4>)
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 f9d7 	bl	8004dc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	69b9      	ldr	r1, [r7, #24]
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 f8f0 	bl	8004c00 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e02c      	b.n	8004a84 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a2a:	88fb      	ldrh	r3, [r7, #6]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d105      	bne.n	8004a3c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a30:	893b      	ldrh	r3, [r7, #8]
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	629a      	str	r2, [r3, #40]	; 0x28
 8004a3a:	e015      	b.n	8004a68 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a3c:	893b      	ldrh	r3, [r7, #8]
 8004a3e:	0a1b      	lsrs	r3, r3, #8
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a4a:	69fa      	ldr	r2, [r7, #28]
 8004a4c:	69b9      	ldr	r1, [r7, #24]
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 f8d6 	bl	8004c00 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e012      	b.n	8004a84 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a5e:	893b      	ldrh	r3, [r7, #8]
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	2180      	movs	r1, #128	; 0x80
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 f884 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	80002000 	.word	0x80002000

08004a90 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af02      	add	r7, sp, #8
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	4608      	mov	r0, r1
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	817b      	strh	r3, [r7, #10]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	813b      	strh	r3, [r7, #8]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004aaa:	88fb      	ldrh	r3, [r7, #6]
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	8979      	ldrh	r1, [r7, #10]
 8004ab0:	4b20      	ldr	r3, [pc, #128]	; (8004b34 <I2C_RequestMemoryRead+0xa4>)
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 f984 	bl	8004dc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004abc:	69fa      	ldr	r2, [r7, #28]
 8004abe:	69b9      	ldr	r1, [r7, #24]
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 f89d 	bl	8004c00 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e02c      	b.n	8004b2a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ad0:	88fb      	ldrh	r3, [r7, #6]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d105      	bne.n	8004ae2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ad6:	893b      	ldrh	r3, [r7, #8]
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	629a      	str	r2, [r3, #40]	; 0x28
 8004ae0:	e015      	b.n	8004b0e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ae2:	893b      	ldrh	r3, [r7, #8]
 8004ae4:	0a1b      	lsrs	r3, r3, #8
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004af0:	69fa      	ldr	r2, [r7, #28]
 8004af2:	69b9      	ldr	r1, [r7, #24]
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 f883 	bl	8004c00 <I2C_WaitOnTXISFlagUntilTimeout>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e012      	b.n	8004b2a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b04:	893b      	ldrh	r3, [r7, #8]
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2200      	movs	r2, #0
 8004b16:	2140      	movs	r1, #64	; 0x40
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 f831 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e000      	b.n	8004b2a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	80002000 	.word	0x80002000

08004b38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d103      	bne.n	8004b56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2200      	movs	r2, #0
 8004b54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d007      	beq.n	8004b74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699a      	ldr	r2, [r3, #24]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	619a      	str	r2, [r3, #24]
  }
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b90:	e022      	b.n	8004bd8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b98:	d01e      	beq.n	8004bd8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b9a:	f7fd ffa9 	bl	8002af0 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d302      	bcc.n	8004bb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d113      	bne.n	8004bd8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb4:	f043 0220 	orr.w	r2, r3, #32
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e00f      	b.n	8004bf8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699a      	ldr	r2, [r3, #24]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	4013      	ands	r3, r2
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	bf0c      	ite	eq
 8004be8:	2301      	moveq	r3, #1
 8004bea:	2300      	movne	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	461a      	mov	r2, r3
 8004bf0:	79fb      	ldrb	r3, [r7, #7]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d0cd      	beq.n	8004b92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c0c:	e02c      	b.n	8004c68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	68b9      	ldr	r1, [r7, #8]
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 f870 	bl	8004cf8 <I2C_IsAcknowledgeFailed>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e02a      	b.n	8004c78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c28:	d01e      	beq.n	8004c68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2a:	f7fd ff61 	bl	8002af0 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d302      	bcc.n	8004c40 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d113      	bne.n	8004c68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c44:	f043 0220 	orr.w	r2, r3, #32
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e007      	b.n	8004c78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d1cb      	bne.n	8004c0e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c8c:	e028      	b.n	8004ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 f830 	bl	8004cf8 <I2C_IsAcknowledgeFailed>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e026      	b.n	8004cf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca2:	f7fd ff25 	bl	8002af0 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d302      	bcc.n	8004cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d113      	bne.n	8004ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cbc:	f043 0220 	orr.w	r2, r3, #32
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e007      	b.n	8004cf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	f003 0320 	and.w	r3, r3, #32
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	d1cf      	bne.n	8004c8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	2b10      	cmp	r3, #16
 8004d10:	d151      	bne.n	8004db6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d12:	e022      	b.n	8004d5a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1a:	d01e      	beq.n	8004d5a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d1c:	f7fd fee8 	bl	8002af0 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d302      	bcc.n	8004d32 <I2C_IsAcknowledgeFailed+0x3a>
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d113      	bne.n	8004d5a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d36:	f043 0220 	orr.w	r2, r3, #32
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e02e      	b.n	8004db8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	f003 0320 	and.w	r3, r3, #32
 8004d64:	2b20      	cmp	r3, #32
 8004d66:	d1d5      	bne.n	8004d14 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2210      	movs	r2, #16
 8004d6e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2220      	movs	r2, #32
 8004d76:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f7ff fedd 	bl	8004b38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6859      	ldr	r1, [r3, #4]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <I2C_IsAcknowledgeFailed+0xc8>)
 8004d8a:	400b      	ands	r3, r1
 8004d8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d92:	f043 0204 	orr.w	r2, r3, #4
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	fe00e800 	.word	0xfe00e800

08004dc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	607b      	str	r3, [r7, #4]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	817b      	strh	r3, [r7, #10]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	0d5b      	lsrs	r3, r3, #21
 8004de0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004de4:	4b0d      	ldr	r3, [pc, #52]	; (8004e1c <I2C_TransferConfig+0x58>)
 8004de6:	430b      	orrs	r3, r1
 8004de8:	43db      	mvns	r3, r3
 8004dea:	ea02 0103 	and.w	r1, r2, r3
 8004dee:	897b      	ldrh	r3, [r7, #10]
 8004df0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004df4:	7a7b      	ldrb	r3, [r7, #9]
 8004df6:	041b      	lsls	r3, r3, #16
 8004df8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	431a      	orrs	r2, r3
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	431a      	orrs	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004e0e:	bf00      	nop
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	03ff63ff 	.word	0x03ff63ff

08004e20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	d138      	bne.n	8004ea8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e032      	b.n	8004eaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2224      	movs	r2, #36	; 0x24
 8004e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0201 	bic.w	r2, r2, #1
 8004e62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6819      	ldr	r1, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0201 	orr.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	e000      	b.n	8004eaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ea8:	2302      	movs	r3, #2
  }
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b085      	sub	sp, #20
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	d139      	bne.n	8004f40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e033      	b.n	8004f42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2224      	movs	r2, #36	; 0x24
 8004ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0201 	bic.w	r2, r2, #1
 8004ef8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	021b      	lsls	r3, r3, #8
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	e000      	b.n	8004f42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f40:	2302      	movs	r3, #2
  }
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
	...

08004f50 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e0bf      	b.n	80050e2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fc ffe4 	bl	8001f44 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699a      	ldr	r2, [r3, #24]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004f92:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6999      	ldr	r1, [r3, #24]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004fa8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6899      	ldr	r1, [r3, #8]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	4b4a      	ldr	r3, [pc, #296]	; (80050ec <HAL_LTDC_Init+0x19c>)
 8004fc4:	400b      	ands	r3, r1
 8004fc6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	041b      	lsls	r3, r3, #16
 8004fce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6899      	ldr	r1, [r3, #8]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699a      	ldr	r2, [r3, #24]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68d9      	ldr	r1, [r3, #12]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	4b3e      	ldr	r3, [pc, #248]	; (80050ec <HAL_LTDC_Init+0x19c>)
 8004ff2:	400b      	ands	r3, r1
 8004ff4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	041b      	lsls	r3, r3, #16
 8004ffc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68d9      	ldr	r1, [r3, #12]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1a      	ldr	r2, [r3, #32]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6919      	ldr	r1, [r3, #16]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	4b33      	ldr	r3, [pc, #204]	; (80050ec <HAL_LTDC_Init+0x19c>)
 8005020:	400b      	ands	r3, r1
 8005022:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	041b      	lsls	r3, r3, #16
 800502a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6919      	ldr	r1, [r3, #16]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	431a      	orrs	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6959      	ldr	r1, [r3, #20]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	4b27      	ldr	r3, [pc, #156]	; (80050ec <HAL_LTDC_Init+0x19c>)
 800504e:	400b      	ands	r3, r1
 8005050:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005056:	041b      	lsls	r3, r3, #16
 8005058:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6959      	ldr	r1, [r3, #20]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005080:	041b      	lsls	r3, r3, #16
 8005082:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005092:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4313      	orrs	r3, r2
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0206 	orr.w	r2, r2, #6
 80050be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699a      	ldr	r2, [r3, #24]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	f000f800 	.word	0xf000f800

080050f0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005106:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f003 0304 	and.w	r3, r3, #4
 800510e:	2b00      	cmp	r3, #0
 8005110:	d023      	beq.n	800515a <HAL_LTDC_IRQHandler+0x6a>
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01e      	beq.n	800515a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0204 	bic.w	r2, r2, #4
 800512a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2204      	movs	r2, #4
 8005132:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800513a:	f043 0201 	orr.w	r2, r3, #1
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2204      	movs	r2, #4
 8005148:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f86f 	bl	8005238 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d023      	beq.n	80051ac <HAL_LTDC_IRQHandler+0xbc>
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d01e      	beq.n	80051ac <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 0202 	bic.w	r2, r2, #2
 800517c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2202      	movs	r2, #2
 8005184:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800518c:	f043 0202 	orr.w	r2, r3, #2
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2204      	movs	r2, #4
 800519a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f846 	bl	8005238 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d01b      	beq.n	80051ee <HAL_LTDC_IRQHandler+0xfe>
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d016      	beq.n	80051ee <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0201 	bic.w	r2, r2, #1
 80051ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2201      	movs	r2, #1
 80051d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f007 fb0f 	bl	800c80c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01b      	beq.n	8005230 <HAL_LTDC_IRQHandler+0x140>
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d016      	beq.n	8005230 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0208 	bic.w	r2, r2, #8
 8005210:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2208      	movs	r2, #8
 8005218:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f80e 	bl	800524c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005230:	bf00      	nop
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005260:	b5b0      	push	{r4, r5, r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <HAL_LTDC_ConfigLayer+0x1a>
 8005276:	2302      	movs	r3, #2
 8005278:	e02c      	b.n	80052d4 <HAL_LTDC_ConfigLayer+0x74>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2202      	movs	r2, #2
 8005286:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2134      	movs	r1, #52	; 0x34
 8005290:	fb01 f303 	mul.w	r3, r1, r3
 8005294:	4413      	add	r3, r2
 8005296:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	4614      	mov	r4, r2
 800529e:	461d      	mov	r5, r3
 80052a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052ac:	682b      	ldr	r3, [r5, #0]
 80052ae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	68b9      	ldr	r1, [r7, #8]
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 f849 	bl	800534c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2201      	movs	r2, #1
 80052c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bdb0      	pop	{r4, r5, r7, pc}

080052dc <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d101      	bne.n	80052f4 <HAL_LTDC_ProgramLineEvent+0x18>
 80052f0:	2302      	movs	r3, #2
 80052f2:	e023      	b.n	800533c <HAL_LTDC_ProgramLineEvent+0x60>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0201 	bic.w	r2, r2, #1
 8005312:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005314:	4a0c      	ldr	r2, [pc, #48]	; (8005348 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f042 0201 	orr.w	r2, r2, #1
 8005328:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	40016800 	.word	0x40016800

0800534c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800534c:	b480      	push	{r7}
 800534e:	b089      	sub	sp, #36	; 0x24
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	0c1b      	lsrs	r3, r3, #16
 8005364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005368:	4413      	add	r3, r2
 800536a:	041b      	lsls	r3, r3, #16
 800536c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	01db      	lsls	r3, r3, #7
 8005378:	4413      	add	r3, r2
 800537a:	3384      	adds	r3, #132	; 0x84
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	6812      	ldr	r2, [r2, #0]
 8005382:	4611      	mov	r1, r2
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	01d2      	lsls	r2, r2, #7
 8005388:	440a      	add	r2, r1
 800538a:	3284      	adds	r2, #132	; 0x84
 800538c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005390:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	0c1b      	lsrs	r3, r3, #16
 800539e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a2:	4413      	add	r3, r2
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4619      	mov	r1, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	01db      	lsls	r3, r3, #7
 80053b0:	440b      	add	r3, r1
 80053b2:	3384      	adds	r3, #132	; 0x84
 80053b4:	4619      	mov	r1, r3
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	68da      	ldr	r2, [r3, #12]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053ca:	4413      	add	r3, r2
 80053cc:	041b      	lsls	r3, r3, #16
 80053ce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	461a      	mov	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	01db      	lsls	r3, r3, #7
 80053da:	4413      	add	r3, r2
 80053dc:	3384      	adds	r3, #132	; 0x84
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	6812      	ldr	r2, [r2, #0]
 80053e4:	4611      	mov	r1, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	01d2      	lsls	r2, r2, #7
 80053ea:	440a      	add	r2, r1
 80053ec:	3284      	adds	r2, #132	; 0x84
 80053ee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80053f2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005402:	4413      	add	r3, r2
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4619      	mov	r1, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	01db      	lsls	r3, r3, #7
 8005410:	440b      	add	r3, r1
 8005412:	3384      	adds	r3, #132	; 0x84
 8005414:	4619      	mov	r1, r3
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	4313      	orrs	r3, r2
 800541a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	461a      	mov	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	01db      	lsls	r3, r3, #7
 8005426:	4413      	add	r3, r2
 8005428:	3384      	adds	r3, #132	; 0x84
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	6812      	ldr	r2, [r2, #0]
 8005430:	4611      	mov	r1, r2
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	01d2      	lsls	r2, r2, #7
 8005436:	440a      	add	r2, r1
 8005438:	3284      	adds	r2, #132	; 0x84
 800543a:	f023 0307 	bic.w	r3, r3, #7
 800543e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	01db      	lsls	r3, r3, #7
 800544a:	4413      	add	r3, r2
 800544c:	3384      	adds	r3, #132	; 0x84
 800544e:	461a      	mov	r2, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800545c:	021b      	lsls	r3, r3, #8
 800545e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005466:	041b      	lsls	r3, r3, #16
 8005468:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	061b      	lsls	r3, r3, #24
 8005470:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	01db      	lsls	r3, r3, #7
 800547c:	4413      	add	r3, r2
 800547e:	3384      	adds	r3, #132	; 0x84
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	461a      	mov	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	01db      	lsls	r3, r3, #7
 800548c:	4413      	add	r3, r2
 800548e:	3384      	adds	r3, #132	; 0x84
 8005490:	461a      	mov	r2, r3
 8005492:	2300      	movs	r3, #0
 8005494:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800549c:	461a      	mov	r2, r3
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	431a      	orrs	r2, r3
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	431a      	orrs	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4619      	mov	r1, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	01db      	lsls	r3, r3, #7
 80054b0:	440b      	add	r3, r1
 80054b2:	3384      	adds	r3, #132	; 0x84
 80054b4:	4619      	mov	r1, r3
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	461a      	mov	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	01db      	lsls	r3, r3, #7
 80054c6:	4413      	add	r3, r2
 80054c8:	3384      	adds	r3, #132	; 0x84
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	6812      	ldr	r2, [r2, #0]
 80054d0:	4611      	mov	r1, r2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	01d2      	lsls	r2, r2, #7
 80054d6:	440a      	add	r2, r1
 80054d8:	3284      	adds	r2, #132	; 0x84
 80054da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80054de:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	01db      	lsls	r3, r3, #7
 80054ea:	4413      	add	r3, r2
 80054ec:	3384      	adds	r3, #132	; 0x84
 80054ee:	461a      	mov	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	01db      	lsls	r3, r3, #7
 8005500:	4413      	add	r3, r2
 8005502:	3384      	adds	r3, #132	; 0x84
 8005504:	69da      	ldr	r2, [r3, #28]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4619      	mov	r1, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	01db      	lsls	r3, r3, #7
 8005510:	440b      	add	r3, r1
 8005512:	3384      	adds	r3, #132	; 0x84
 8005514:	4619      	mov	r1, r3
 8005516:	4b58      	ldr	r3, [pc, #352]	; (8005678 <LTDC_SetConfig+0x32c>)
 8005518:	4013      	ands	r3, r2
 800551a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	69da      	ldr	r2, [r3, #28]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	68f9      	ldr	r1, [r7, #12]
 8005526:	6809      	ldr	r1, [r1, #0]
 8005528:	4608      	mov	r0, r1
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	01c9      	lsls	r1, r1, #7
 800552e:	4401      	add	r1, r0
 8005530:	3184      	adds	r1, #132	; 0x84
 8005532:	4313      	orrs	r3, r2
 8005534:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	01db      	lsls	r3, r3, #7
 8005540:	4413      	add	r3, r2
 8005542:	3384      	adds	r3, #132	; 0x84
 8005544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	01db      	lsls	r3, r3, #7
 8005550:	4413      	add	r3, r2
 8005552:	3384      	adds	r3, #132	; 0x84
 8005554:	461a      	mov	r2, r3
 8005556:	2300      	movs	r3, #0
 8005558:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	461a      	mov	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	01db      	lsls	r3, r3, #7
 8005564:	4413      	add	r3, r2
 8005566:	3384      	adds	r3, #132	; 0x84
 8005568:	461a      	mov	r2, r3
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d102      	bne.n	800557e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005578:	2304      	movs	r3, #4
 800557a:	61fb      	str	r3, [r7, #28]
 800557c:	e01b      	b.n	80055b6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d102      	bne.n	800558c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005586:	2303      	movs	r3, #3
 8005588:	61fb      	str	r3, [r7, #28]
 800558a:	e014      	b.n	80055b6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	2b04      	cmp	r3, #4
 8005592:	d00b      	beq.n	80055ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005598:	2b02      	cmp	r3, #2
 800559a:	d007      	beq.n	80055ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d003      	beq.n	80055ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80055a8:	2b07      	cmp	r3, #7
 80055aa:	d102      	bne.n	80055b2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80055ac:	2302      	movs	r3, #2
 80055ae:	61fb      	str	r3, [r7, #28]
 80055b0:	e001      	b.n	80055b6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80055b2:	2301      	movs	r3, #1
 80055b4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	461a      	mov	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	01db      	lsls	r3, r3, #7
 80055c0:	4413      	add	r3, r2
 80055c2:	3384      	adds	r3, #132	; 0x84
 80055c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	6812      	ldr	r2, [r2, #0]
 80055ca:	4611      	mov	r1, r2
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	01d2      	lsls	r2, r2, #7
 80055d0:	440a      	add	r2, r1
 80055d2:	3284      	adds	r2, #132	; 0x84
 80055d4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80055d8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055de:	69fa      	ldr	r2, [r7, #28]
 80055e0:	fb02 f303 	mul.w	r3, r2, r3
 80055e4:	041a      	lsls	r2, r3, #16
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	6859      	ldr	r1, [r3, #4]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	1acb      	subs	r3, r1, r3
 80055f0:	69f9      	ldr	r1, [r7, #28]
 80055f2:	fb01 f303 	mul.w	r3, r1, r3
 80055f6:	3303      	adds	r3, #3
 80055f8:	68f9      	ldr	r1, [r7, #12]
 80055fa:	6809      	ldr	r1, [r1, #0]
 80055fc:	4608      	mov	r0, r1
 80055fe:	6879      	ldr	r1, [r7, #4]
 8005600:	01c9      	lsls	r1, r1, #7
 8005602:	4401      	add	r1, r0
 8005604:	3184      	adds	r1, #132	; 0x84
 8005606:	4313      	orrs	r3, r2
 8005608:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	01db      	lsls	r3, r3, #7
 8005614:	4413      	add	r3, r2
 8005616:	3384      	adds	r3, #132	; 0x84
 8005618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4619      	mov	r1, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	01db      	lsls	r3, r3, #7
 8005624:	440b      	add	r3, r1
 8005626:	3384      	adds	r3, #132	; 0x84
 8005628:	4619      	mov	r1, r3
 800562a:	4b14      	ldr	r3, [pc, #80]	; (800567c <LTDC_SetConfig+0x330>)
 800562c:	4013      	ands	r3, r2
 800562e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	01db      	lsls	r3, r3, #7
 800563a:	4413      	add	r3, r2
 800563c:	3384      	adds	r3, #132	; 0x84
 800563e:	461a      	mov	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	01db      	lsls	r3, r3, #7
 8005650:	4413      	add	r3, r2
 8005652:	3384      	adds	r3, #132	; 0x84
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	6812      	ldr	r2, [r2, #0]
 800565a:	4611      	mov	r1, r2
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	01d2      	lsls	r2, r2, #7
 8005660:	440a      	add	r2, r1
 8005662:	3284      	adds	r2, #132	; 0x84
 8005664:	f043 0301 	orr.w	r3, r3, #1
 8005668:	6013      	str	r3, [r2, #0]
}
 800566a:	bf00      	nop
 800566c:	3724      	adds	r7, #36	; 0x24
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	fffff8f8 	.word	0xfffff8f8
 800567c:	fffff800 	.word	0xfffff800

08005680 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005680:	b480      	push	{r7}
 8005682:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005684:	4b05      	ldr	r3, [pc, #20]	; (800569c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a04      	ldr	r2, [pc, #16]	; (800569c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800568a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800568e:	6013      	str	r3, [r2, #0]
}
 8005690:	bf00      	nop
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40007000 	.word	0x40007000

080056a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80056a6:	2300      	movs	r3, #0
 80056a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80056aa:	4b23      	ldr	r3, [pc, #140]	; (8005738 <HAL_PWREx_EnableOverDrive+0x98>)
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	4a22      	ldr	r2, [pc, #136]	; (8005738 <HAL_PWREx_EnableOverDrive+0x98>)
 80056b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b4:	6413      	str	r3, [r2, #64]	; 0x40
 80056b6:	4b20      	ldr	r3, [pc, #128]	; (8005738 <HAL_PWREx_EnableOverDrive+0x98>)
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056be:	603b      	str	r3, [r7, #0]
 80056c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80056c2:	4b1e      	ldr	r3, [pc, #120]	; (800573c <HAL_PWREx_EnableOverDrive+0x9c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a1d      	ldr	r2, [pc, #116]	; (800573c <HAL_PWREx_EnableOverDrive+0x9c>)
 80056c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056ce:	f7fd fa0f 	bl	8002af0 <HAL_GetTick>
 80056d2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80056d4:	e009      	b.n	80056ea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80056d6:	f7fd fa0b 	bl	8002af0 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056e4:	d901      	bls.n	80056ea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e022      	b.n	8005730 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80056ea:	4b14      	ldr	r3, [pc, #80]	; (800573c <HAL_PWREx_EnableOverDrive+0x9c>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f6:	d1ee      	bne.n	80056d6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80056f8:	4b10      	ldr	r3, [pc, #64]	; (800573c <HAL_PWREx_EnableOverDrive+0x9c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a0f      	ldr	r2, [pc, #60]	; (800573c <HAL_PWREx_EnableOverDrive+0x9c>)
 80056fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005702:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005704:	f7fd f9f4 	bl	8002af0 <HAL_GetTick>
 8005708:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800570a:	e009      	b.n	8005720 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800570c:	f7fd f9f0 	bl	8002af0 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800571a:	d901      	bls.n	8005720 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e007      	b.n	8005730 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005720:	4b06      	ldr	r3, [pc, #24]	; (800573c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005728:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800572c:	d1ee      	bne.n	800570c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40023800 	.word	0x40023800
 800573c:	40007000 	.word	0x40007000

08005740 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005748:	2300      	movs	r3, #0
 800574a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e291      	b.n	8005c7a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 8087 	beq.w	8005872 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005764:	4b96      	ldr	r3, [pc, #600]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f003 030c 	and.w	r3, r3, #12
 800576c:	2b04      	cmp	r3, #4
 800576e:	d00c      	beq.n	800578a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005770:	4b93      	ldr	r3, [pc, #588]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f003 030c 	and.w	r3, r3, #12
 8005778:	2b08      	cmp	r3, #8
 800577a:	d112      	bne.n	80057a2 <HAL_RCC_OscConfig+0x62>
 800577c:	4b90      	ldr	r3, [pc, #576]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005784:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005788:	d10b      	bne.n	80057a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800578a:	4b8d      	ldr	r3, [pc, #564]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d06c      	beq.n	8005870 <HAL_RCC_OscConfig+0x130>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d168      	bne.n	8005870 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e26b      	b.n	8005c7a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057aa:	d106      	bne.n	80057ba <HAL_RCC_OscConfig+0x7a>
 80057ac:	4b84      	ldr	r3, [pc, #528]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a83      	ldr	r2, [pc, #524]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 80057b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	e02e      	b.n	8005818 <HAL_RCC_OscConfig+0xd8>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10c      	bne.n	80057dc <HAL_RCC_OscConfig+0x9c>
 80057c2:	4b7f      	ldr	r3, [pc, #508]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a7e      	ldr	r2, [pc, #504]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 80057c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	4b7c      	ldr	r3, [pc, #496]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a7b      	ldr	r2, [pc, #492]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 80057d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	e01d      	b.n	8005818 <HAL_RCC_OscConfig+0xd8>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057e4:	d10c      	bne.n	8005800 <HAL_RCC_OscConfig+0xc0>
 80057e6:	4b76      	ldr	r3, [pc, #472]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a75      	ldr	r2, [pc, #468]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 80057ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	4b73      	ldr	r3, [pc, #460]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a72      	ldr	r2, [pc, #456]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 80057f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	e00b      	b.n	8005818 <HAL_RCC_OscConfig+0xd8>
 8005800:	4b6f      	ldr	r3, [pc, #444]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a6e      	ldr	r2, [pc, #440]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 8005806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800580a:	6013      	str	r3, [r2, #0]
 800580c:	4b6c      	ldr	r3, [pc, #432]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a6b      	ldr	r2, [pc, #428]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 8005812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d013      	beq.n	8005848 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005820:	f7fd f966 	bl	8002af0 <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005826:	e008      	b.n	800583a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005828:	f7fd f962 	bl	8002af0 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b64      	cmp	r3, #100	; 0x64
 8005834:	d901      	bls.n	800583a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e21f      	b.n	8005c7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800583a:	4b61      	ldr	r3, [pc, #388]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0f0      	beq.n	8005828 <HAL_RCC_OscConfig+0xe8>
 8005846:	e014      	b.n	8005872 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005848:	f7fd f952 	bl	8002af0 <HAL_GetTick>
 800584c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800584e:	e008      	b.n	8005862 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005850:	f7fd f94e 	bl	8002af0 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b64      	cmp	r3, #100	; 0x64
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e20b      	b.n	8005c7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005862:	4b57      	ldr	r3, [pc, #348]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1f0      	bne.n	8005850 <HAL_RCC_OscConfig+0x110>
 800586e:	e000      	b.n	8005872 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d069      	beq.n	8005952 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800587e:	4b50      	ldr	r3, [pc, #320]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f003 030c 	and.w	r3, r3, #12
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00b      	beq.n	80058a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800588a:	4b4d      	ldr	r3, [pc, #308]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 030c 	and.w	r3, r3, #12
 8005892:	2b08      	cmp	r3, #8
 8005894:	d11c      	bne.n	80058d0 <HAL_RCC_OscConfig+0x190>
 8005896:	4b4a      	ldr	r3, [pc, #296]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d116      	bne.n	80058d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058a2:	4b47      	ldr	r3, [pc, #284]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d005      	beq.n	80058ba <HAL_RCC_OscConfig+0x17a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d001      	beq.n	80058ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e1df      	b.n	8005c7a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ba:	4b41      	ldr	r3, [pc, #260]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	00db      	lsls	r3, r3, #3
 80058c8:	493d      	ldr	r1, [pc, #244]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ce:	e040      	b.n	8005952 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d023      	beq.n	8005920 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058d8:	4b39      	ldr	r3, [pc, #228]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a38      	ldr	r2, [pc, #224]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 80058de:	f043 0301 	orr.w	r3, r3, #1
 80058e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e4:	f7fd f904 	bl	8002af0 <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ec:	f7fd f900 	bl	8002af0 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e1bd      	b.n	8005c7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058fe:	4b30      	ldr	r3, [pc, #192]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0f0      	beq.n	80058ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800590a:	4b2d      	ldr	r3, [pc, #180]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	4929      	ldr	r1, [pc, #164]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 800591a:	4313      	orrs	r3, r2
 800591c:	600b      	str	r3, [r1, #0]
 800591e:	e018      	b.n	8005952 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005920:	4b27      	ldr	r3, [pc, #156]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a26      	ldr	r2, [pc, #152]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 8005926:	f023 0301 	bic.w	r3, r3, #1
 800592a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800592c:	f7fd f8e0 	bl	8002af0 <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005934:	f7fd f8dc 	bl	8002af0 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e199      	b.n	8005c7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005946:	4b1e      	ldr	r3, [pc, #120]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1f0      	bne.n	8005934 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0308 	and.w	r3, r3, #8
 800595a:	2b00      	cmp	r3, #0
 800595c:	d038      	beq.n	80059d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d019      	beq.n	800599a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005966:	4b16      	ldr	r3, [pc, #88]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 8005968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800596a:	4a15      	ldr	r2, [pc, #84]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 800596c:	f043 0301 	orr.w	r3, r3, #1
 8005970:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005972:	f7fd f8bd 	bl	8002af0 <HAL_GetTick>
 8005976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005978:	e008      	b.n	800598c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800597a:	f7fd f8b9 	bl	8002af0 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e176      	b.n	8005c7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800598c:	4b0c      	ldr	r3, [pc, #48]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 800598e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0f0      	beq.n	800597a <HAL_RCC_OscConfig+0x23a>
 8005998:	e01a      	b.n	80059d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800599a:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 800599c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800599e:	4a08      	ldr	r2, [pc, #32]	; (80059c0 <HAL_RCC_OscConfig+0x280>)
 80059a0:	f023 0301 	bic.w	r3, r3, #1
 80059a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a6:	f7fd f8a3 	bl	8002af0 <HAL_GetTick>
 80059aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059ac:	e00a      	b.n	80059c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059ae:	f7fd f89f 	bl	8002af0 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d903      	bls.n	80059c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e15c      	b.n	8005c7a <HAL_RCC_OscConfig+0x53a>
 80059c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059c4:	4b91      	ldr	r3, [pc, #580]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 80059c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1ee      	bne.n	80059ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 80a4 	beq.w	8005b26 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059de:	4b8b      	ldr	r3, [pc, #556]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10d      	bne.n	8005a06 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ea:	4b88      	ldr	r3, [pc, #544]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	4a87      	ldr	r2, [pc, #540]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 80059f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059f4:	6413      	str	r3, [r2, #64]	; 0x40
 80059f6:	4b85      	ldr	r3, [pc, #532]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059fe:	60bb      	str	r3, [r7, #8]
 8005a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a02:	2301      	movs	r3, #1
 8005a04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a06:	4b82      	ldr	r3, [pc, #520]	; (8005c10 <HAL_RCC_OscConfig+0x4d0>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d118      	bne.n	8005a44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005a12:	4b7f      	ldr	r3, [pc, #508]	; (8005c10 <HAL_RCC_OscConfig+0x4d0>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a7e      	ldr	r2, [pc, #504]	; (8005c10 <HAL_RCC_OscConfig+0x4d0>)
 8005a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a1e:	f7fd f867 	bl	8002af0 <HAL_GetTick>
 8005a22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a24:	e008      	b.n	8005a38 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a26:	f7fd f863 	bl	8002af0 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b64      	cmp	r3, #100	; 0x64
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e120      	b.n	8005c7a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a38:	4b75      	ldr	r3, [pc, #468]	; (8005c10 <HAL_RCC_OscConfig+0x4d0>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0f0      	beq.n	8005a26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d106      	bne.n	8005a5a <HAL_RCC_OscConfig+0x31a>
 8005a4c:	4b6f      	ldr	r3, [pc, #444]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a50:	4a6e      	ldr	r2, [pc, #440]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005a52:	f043 0301 	orr.w	r3, r3, #1
 8005a56:	6713      	str	r3, [r2, #112]	; 0x70
 8005a58:	e02d      	b.n	8005ab6 <HAL_RCC_OscConfig+0x376>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10c      	bne.n	8005a7c <HAL_RCC_OscConfig+0x33c>
 8005a62:	4b6a      	ldr	r3, [pc, #424]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a66:	4a69      	ldr	r2, [pc, #420]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005a68:	f023 0301 	bic.w	r3, r3, #1
 8005a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a6e:	4b67      	ldr	r3, [pc, #412]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a72:	4a66      	ldr	r2, [pc, #408]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005a74:	f023 0304 	bic.w	r3, r3, #4
 8005a78:	6713      	str	r3, [r2, #112]	; 0x70
 8005a7a:	e01c      	b.n	8005ab6 <HAL_RCC_OscConfig+0x376>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	2b05      	cmp	r3, #5
 8005a82:	d10c      	bne.n	8005a9e <HAL_RCC_OscConfig+0x35e>
 8005a84:	4b61      	ldr	r3, [pc, #388]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a88:	4a60      	ldr	r2, [pc, #384]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005a8a:	f043 0304 	orr.w	r3, r3, #4
 8005a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a90:	4b5e      	ldr	r3, [pc, #376]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a94:	4a5d      	ldr	r2, [pc, #372]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005a96:	f043 0301 	orr.w	r3, r3, #1
 8005a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a9c:	e00b      	b.n	8005ab6 <HAL_RCC_OscConfig+0x376>
 8005a9e:	4b5b      	ldr	r3, [pc, #364]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa2:	4a5a      	ldr	r2, [pc, #360]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005aa4:	f023 0301 	bic.w	r3, r3, #1
 8005aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8005aaa:	4b58      	ldr	r3, [pc, #352]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aae:	4a57      	ldr	r2, [pc, #348]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005ab0:	f023 0304 	bic.w	r3, r3, #4
 8005ab4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d015      	beq.n	8005aea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005abe:	f7fd f817 	bl	8002af0 <HAL_GetTick>
 8005ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ac4:	e00a      	b.n	8005adc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ac6:	f7fd f813 	bl	8002af0 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e0ce      	b.n	8005c7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005adc:	4b4b      	ldr	r3, [pc, #300]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0ee      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x386>
 8005ae8:	e014      	b.n	8005b14 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aea:	f7fd f801 	bl	8002af0 <HAL_GetTick>
 8005aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005af0:	e00a      	b.n	8005b08 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005af2:	f7fc fffd 	bl	8002af0 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d901      	bls.n	8005b08 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e0b8      	b.n	8005c7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b08:	4b40      	ldr	r3, [pc, #256]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1ee      	bne.n	8005af2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b14:	7dfb      	ldrb	r3, [r7, #23]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d105      	bne.n	8005b26 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b1a:	4b3c      	ldr	r3, [pc, #240]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	4a3b      	ldr	r2, [pc, #236]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 80a4 	beq.w	8005c78 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b30:	4b36      	ldr	r3, [pc, #216]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f003 030c 	and.w	r3, r3, #12
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d06b      	beq.n	8005c14 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d149      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b44:	4b31      	ldr	r3, [pc, #196]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a30      	ldr	r2, [pc, #192]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b50:	f7fc ffce 	bl	8002af0 <HAL_GetTick>
 8005b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b56:	e008      	b.n	8005b6a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b58:	f7fc ffca 	bl	8002af0 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e087      	b.n	8005c7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b6a:	4b28      	ldr	r3, [pc, #160]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1f0      	bne.n	8005b58 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	69da      	ldr	r2, [r3, #28]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	019b      	lsls	r3, r3, #6
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8c:	085b      	lsrs	r3, r3, #1
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	041b      	lsls	r3, r3, #16
 8005b92:	431a      	orrs	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	061b      	lsls	r3, r3, #24
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	4a1b      	ldr	r2, [pc, #108]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005b9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ba2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ba4:	4b19      	ldr	r3, [pc, #100]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a18      	ldr	r2, [pc, #96]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb0:	f7fc ff9e 	bl	8002af0 <HAL_GetTick>
 8005bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bb6:	e008      	b.n	8005bca <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bb8:	f7fc ff9a 	bl	8002af0 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d901      	bls.n	8005bca <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e057      	b.n	8005c7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bca:	4b10      	ldr	r3, [pc, #64]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d0f0      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x478>
 8005bd6:	e04f      	b.n	8005c78 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bd8:	4b0c      	ldr	r3, [pc, #48]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a0b      	ldr	r2, [pc, #44]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005bde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be4:	f7fc ff84 	bl	8002af0 <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bec:	f7fc ff80 	bl	8002af0 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e03d      	b.n	8005c7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bfe:	4b03      	ldr	r3, [pc, #12]	; (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1f0      	bne.n	8005bec <HAL_RCC_OscConfig+0x4ac>
 8005c0a:	e035      	b.n	8005c78 <HAL_RCC_OscConfig+0x538>
 8005c0c:	40023800 	.word	0x40023800
 8005c10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005c14:	4b1b      	ldr	r3, [pc, #108]	; (8005c84 <HAL_RCC_OscConfig+0x544>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d028      	beq.n	8005c74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d121      	bne.n	8005c74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d11a      	bne.n	8005c74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c44:	4013      	ands	r3, r2
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c4a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d111      	bne.n	8005c74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5a:	085b      	lsrs	r3, r3, #1
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d107      	bne.n	8005c74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d001      	beq.n	8005c78 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e000      	b.n	8005c7a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	40023800 	.word	0x40023800

08005c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e0d0      	b.n	8005e42 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ca0:	4b6a      	ldr	r3, [pc, #424]	; (8005e4c <HAL_RCC_ClockConfig+0x1c4>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 030f 	and.w	r3, r3, #15
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d910      	bls.n	8005cd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cae:	4b67      	ldr	r3, [pc, #412]	; (8005e4c <HAL_RCC_ClockConfig+0x1c4>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f023 020f 	bic.w	r2, r3, #15
 8005cb6:	4965      	ldr	r1, [pc, #404]	; (8005e4c <HAL_RCC_ClockConfig+0x1c4>)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cbe:	4b63      	ldr	r3, [pc, #396]	; (8005e4c <HAL_RCC_ClockConfig+0x1c4>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 030f 	and.w	r3, r3, #15
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d001      	beq.n	8005cd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e0b8      	b.n	8005e42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d020      	beq.n	8005d1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0304 	and.w	r3, r3, #4
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d005      	beq.n	8005cf4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ce8:	4b59      	ldr	r3, [pc, #356]	; (8005e50 <HAL_RCC_ClockConfig+0x1c8>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	4a58      	ldr	r2, [pc, #352]	; (8005e50 <HAL_RCC_ClockConfig+0x1c8>)
 8005cee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cf2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0308 	and.w	r3, r3, #8
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d005      	beq.n	8005d0c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d00:	4b53      	ldr	r3, [pc, #332]	; (8005e50 <HAL_RCC_ClockConfig+0x1c8>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	4a52      	ldr	r2, [pc, #328]	; (8005e50 <HAL_RCC_ClockConfig+0x1c8>)
 8005d06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d0c:	4b50      	ldr	r3, [pc, #320]	; (8005e50 <HAL_RCC_ClockConfig+0x1c8>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	494d      	ldr	r1, [pc, #308]	; (8005e50 <HAL_RCC_ClockConfig+0x1c8>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d040      	beq.n	8005dac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d107      	bne.n	8005d42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d32:	4b47      	ldr	r3, [pc, #284]	; (8005e50 <HAL_RCC_ClockConfig+0x1c8>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d115      	bne.n	8005d6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e07f      	b.n	8005e42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d107      	bne.n	8005d5a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d4a:	4b41      	ldr	r3, [pc, #260]	; (8005e50 <HAL_RCC_ClockConfig+0x1c8>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d109      	bne.n	8005d6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e073      	b.n	8005e42 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d5a:	4b3d      	ldr	r3, [pc, #244]	; (8005e50 <HAL_RCC_ClockConfig+0x1c8>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e06b      	b.n	8005e42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d6a:	4b39      	ldr	r3, [pc, #228]	; (8005e50 <HAL_RCC_ClockConfig+0x1c8>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f023 0203 	bic.w	r2, r3, #3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	4936      	ldr	r1, [pc, #216]	; (8005e50 <HAL_RCC_ClockConfig+0x1c8>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d7c:	f7fc feb8 	bl	8002af0 <HAL_GetTick>
 8005d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d82:	e00a      	b.n	8005d9a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d84:	f7fc feb4 	bl	8002af0 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e053      	b.n	8005e42 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d9a:	4b2d      	ldr	r3, [pc, #180]	; (8005e50 <HAL_RCC_ClockConfig+0x1c8>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f003 020c 	and.w	r2, r3, #12
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d1eb      	bne.n	8005d84 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005dac:	4b27      	ldr	r3, [pc, #156]	; (8005e4c <HAL_RCC_ClockConfig+0x1c4>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 030f 	and.w	r3, r3, #15
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d210      	bcs.n	8005ddc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dba:	4b24      	ldr	r3, [pc, #144]	; (8005e4c <HAL_RCC_ClockConfig+0x1c4>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f023 020f 	bic.w	r2, r3, #15
 8005dc2:	4922      	ldr	r1, [pc, #136]	; (8005e4c <HAL_RCC_ClockConfig+0x1c4>)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dca:	4b20      	ldr	r3, [pc, #128]	; (8005e4c <HAL_RCC_ClockConfig+0x1c4>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 030f 	and.w	r3, r3, #15
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d001      	beq.n	8005ddc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e032      	b.n	8005e42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d008      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005de8:	4b19      	ldr	r3, [pc, #100]	; (8005e50 <HAL_RCC_ClockConfig+0x1c8>)
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	4916      	ldr	r1, [pc, #88]	; (8005e50 <HAL_RCC_ClockConfig+0x1c8>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0308 	and.w	r3, r3, #8
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d009      	beq.n	8005e1a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e06:	4b12      	ldr	r3, [pc, #72]	; (8005e50 <HAL_RCC_ClockConfig+0x1c8>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	490e      	ldr	r1, [pc, #56]	; (8005e50 <HAL_RCC_ClockConfig+0x1c8>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e1a:	f000 f821 	bl	8005e60 <HAL_RCC_GetSysClockFreq>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	4b0b      	ldr	r3, [pc, #44]	; (8005e50 <HAL_RCC_ClockConfig+0x1c8>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	091b      	lsrs	r3, r3, #4
 8005e26:	f003 030f 	and.w	r3, r3, #15
 8005e2a:	490a      	ldr	r1, [pc, #40]	; (8005e54 <HAL_RCC_ClockConfig+0x1cc>)
 8005e2c:	5ccb      	ldrb	r3, [r1, r3]
 8005e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e32:	4a09      	ldr	r2, [pc, #36]	; (8005e58 <HAL_RCC_ClockConfig+0x1d0>)
 8005e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e36:	4b09      	ldr	r3, [pc, #36]	; (8005e5c <HAL_RCC_ClockConfig+0x1d4>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fc fc68 	bl	8002710 <HAL_InitTick>

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	40023c00 	.word	0x40023c00
 8005e50:	40023800 	.word	0x40023800
 8005e54:	08018748 	.word	0x08018748
 8005e58:	20000000 	.word	0x20000000
 8005e5c:	20000004 	.word	0x20000004

08005e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e60:	b5b0      	push	{r4, r5, r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005e66:	2100      	movs	r1, #0
 8005e68:	6079      	str	r1, [r7, #4]
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	60f9      	str	r1, [r7, #12]
 8005e6e:	2100      	movs	r1, #0
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005e72:	2100      	movs	r1, #0
 8005e74:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e76:	4952      	ldr	r1, [pc, #328]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e78:	6889      	ldr	r1, [r1, #8]
 8005e7a:	f001 010c 	and.w	r1, r1, #12
 8005e7e:	2908      	cmp	r1, #8
 8005e80:	d00d      	beq.n	8005e9e <HAL_RCC_GetSysClockFreq+0x3e>
 8005e82:	2908      	cmp	r1, #8
 8005e84:	f200 8094 	bhi.w	8005fb0 <HAL_RCC_GetSysClockFreq+0x150>
 8005e88:	2900      	cmp	r1, #0
 8005e8a:	d002      	beq.n	8005e92 <HAL_RCC_GetSysClockFreq+0x32>
 8005e8c:	2904      	cmp	r1, #4
 8005e8e:	d003      	beq.n	8005e98 <HAL_RCC_GetSysClockFreq+0x38>
 8005e90:	e08e      	b.n	8005fb0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e92:	4b4c      	ldr	r3, [pc, #304]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x164>)
 8005e94:	60bb      	str	r3, [r7, #8]
      break;
 8005e96:	e08e      	b.n	8005fb6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e98:	4b4b      	ldr	r3, [pc, #300]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0x168>)
 8005e9a:	60bb      	str	r3, [r7, #8]
      break;
 8005e9c:	e08b      	b.n	8005fb6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e9e:	4948      	ldr	r1, [pc, #288]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ea0:	6849      	ldr	r1, [r1, #4]
 8005ea2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005ea6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005ea8:	4945      	ldr	r1, [pc, #276]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005eaa:	6849      	ldr	r1, [r1, #4]
 8005eac:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005eb0:	2900      	cmp	r1, #0
 8005eb2:	d024      	beq.n	8005efe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eb4:	4942      	ldr	r1, [pc, #264]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005eb6:	6849      	ldr	r1, [r1, #4]
 8005eb8:	0989      	lsrs	r1, r1, #6
 8005eba:	4608      	mov	r0, r1
 8005ebc:	f04f 0100 	mov.w	r1, #0
 8005ec0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005ec4:	f04f 0500 	mov.w	r5, #0
 8005ec8:	ea00 0204 	and.w	r2, r0, r4
 8005ecc:	ea01 0305 	and.w	r3, r1, r5
 8005ed0:	493d      	ldr	r1, [pc, #244]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0x168>)
 8005ed2:	fb01 f003 	mul.w	r0, r1, r3
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	fb01 f102 	mul.w	r1, r1, r2
 8005edc:	1844      	adds	r4, r0, r1
 8005ede:	493a      	ldr	r1, [pc, #232]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0x168>)
 8005ee0:	fba2 0101 	umull	r0, r1, r2, r1
 8005ee4:	1863      	adds	r3, r4, r1
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	461a      	mov	r2, r3
 8005eec:	f04f 0300 	mov.w	r3, #0
 8005ef0:	f7fa f9e6 	bl	80002c0 <__aeabi_uldivmod>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	4613      	mov	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	e04a      	b.n	8005f94 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005efe:	4b30      	ldr	r3, [pc, #192]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	099b      	lsrs	r3, r3, #6
 8005f04:	461a      	mov	r2, r3
 8005f06:	f04f 0300 	mov.w	r3, #0
 8005f0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f0e:	f04f 0100 	mov.w	r1, #0
 8005f12:	ea02 0400 	and.w	r4, r2, r0
 8005f16:	ea03 0501 	and.w	r5, r3, r1
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	4629      	mov	r1, r5
 8005f1e:	f04f 0200 	mov.w	r2, #0
 8005f22:	f04f 0300 	mov.w	r3, #0
 8005f26:	014b      	lsls	r3, r1, #5
 8005f28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f2c:	0142      	lsls	r2, r0, #5
 8005f2e:	4610      	mov	r0, r2
 8005f30:	4619      	mov	r1, r3
 8005f32:	1b00      	subs	r0, r0, r4
 8005f34:	eb61 0105 	sbc.w	r1, r1, r5
 8005f38:	f04f 0200 	mov.w	r2, #0
 8005f3c:	f04f 0300 	mov.w	r3, #0
 8005f40:	018b      	lsls	r3, r1, #6
 8005f42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f46:	0182      	lsls	r2, r0, #6
 8005f48:	1a12      	subs	r2, r2, r0
 8005f4a:	eb63 0301 	sbc.w	r3, r3, r1
 8005f4e:	f04f 0000 	mov.w	r0, #0
 8005f52:	f04f 0100 	mov.w	r1, #0
 8005f56:	00d9      	lsls	r1, r3, #3
 8005f58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f5c:	00d0      	lsls	r0, r2, #3
 8005f5e:	4602      	mov	r2, r0
 8005f60:	460b      	mov	r3, r1
 8005f62:	1912      	adds	r2, r2, r4
 8005f64:	eb45 0303 	adc.w	r3, r5, r3
 8005f68:	f04f 0000 	mov.w	r0, #0
 8005f6c:	f04f 0100 	mov.w	r1, #0
 8005f70:	0299      	lsls	r1, r3, #10
 8005f72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005f76:	0290      	lsls	r0, r2, #10
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	4619      	mov	r1, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	461a      	mov	r2, r3
 8005f84:	f04f 0300 	mov.w	r3, #0
 8005f88:	f7fa f99a 	bl	80002c0 <__aeabi_uldivmod>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4613      	mov	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005f94:	4b0a      	ldr	r3, [pc, #40]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	0c1b      	lsrs	r3, r3, #16
 8005f9a:	f003 0303 	and.w	r3, r3, #3
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fac:	60bb      	str	r3, [r7, #8]
      break;
 8005fae:	e002      	b.n	8005fb6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fb0:	4b04      	ldr	r3, [pc, #16]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x164>)
 8005fb2:	60bb      	str	r3, [r7, #8]
      break;
 8005fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bdb0      	pop	{r4, r5, r7, pc}
 8005fc0:	40023800 	.word	0x40023800
 8005fc4:	00f42400 	.word	0x00f42400
 8005fc8:	017d7840 	.word	0x017d7840

08005fcc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fd0:	4b03      	ldr	r3, [pc, #12]	; (8005fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	20000000 	.word	0x20000000

08005fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005fe8:	f7ff fff0 	bl	8005fcc <HAL_RCC_GetHCLKFreq>
 8005fec:	4602      	mov	r2, r0
 8005fee:	4b05      	ldr	r3, [pc, #20]	; (8006004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	0a9b      	lsrs	r3, r3, #10
 8005ff4:	f003 0307 	and.w	r3, r3, #7
 8005ff8:	4903      	ldr	r1, [pc, #12]	; (8006008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ffa:	5ccb      	ldrb	r3, [r1, r3]
 8005ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006000:	4618      	mov	r0, r3
 8006002:	bd80      	pop	{r7, pc}
 8006004:	40023800 	.word	0x40023800
 8006008:	08018758 	.word	0x08018758

0800600c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006010:	f7ff ffdc 	bl	8005fcc <HAL_RCC_GetHCLKFreq>
 8006014:	4602      	mov	r2, r0
 8006016:	4b05      	ldr	r3, [pc, #20]	; (800602c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	0b5b      	lsrs	r3, r3, #13
 800601c:	f003 0307 	and.w	r3, r3, #7
 8006020:	4903      	ldr	r1, [pc, #12]	; (8006030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006022:	5ccb      	ldrb	r3, [r1, r3]
 8006024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006028:	4618      	mov	r0, r3
 800602a:	bd80      	pop	{r7, pc}
 800602c:	40023800 	.word	0x40023800
 8006030:	08018758 	.word	0x08018758

08006034 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	220f      	movs	r2, #15
 8006042:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006044:	4b12      	ldr	r3, [pc, #72]	; (8006090 <HAL_RCC_GetClockConfig+0x5c>)
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f003 0203 	and.w	r2, r3, #3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006050:	4b0f      	ldr	r3, [pc, #60]	; (8006090 <HAL_RCC_GetClockConfig+0x5c>)
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800605c:	4b0c      	ldr	r3, [pc, #48]	; (8006090 <HAL_RCC_GetClockConfig+0x5c>)
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006068:	4b09      	ldr	r3, [pc, #36]	; (8006090 <HAL_RCC_GetClockConfig+0x5c>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	08db      	lsrs	r3, r3, #3
 800606e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006076:	4b07      	ldr	r3, [pc, #28]	; (8006094 <HAL_RCC_GetClockConfig+0x60>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 020f 	and.w	r2, r3, #15
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	601a      	str	r2, [r3, #0]
}
 8006082:	bf00      	nop
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	40023800 	.word	0x40023800
 8006094:	40023c00 	.word	0x40023c00

08006098 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80060a0:	2300      	movs	r3, #0
 80060a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80060a4:	2300      	movs	r3, #0
 80060a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80060a8:	2300      	movs	r3, #0
 80060aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80060ac:	2300      	movs	r3, #0
 80060ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80060b0:	2300      	movs	r3, #0
 80060b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d012      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060c0:	4b69      	ldr	r3, [pc, #420]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	4a68      	ldr	r2, [pc, #416]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80060ca:	6093      	str	r3, [r2, #8]
 80060cc:	4b66      	ldr	r3, [pc, #408]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d4:	4964      	ldr	r1, [pc, #400]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80060e2:	2301      	movs	r3, #1
 80060e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d017      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060f2:	4b5d      	ldr	r3, [pc, #372]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006100:	4959      	ldr	r1, [pc, #356]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006102:	4313      	orrs	r3, r2
 8006104:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006110:	d101      	bne.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006112:	2301      	movs	r3, #1
 8006114:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800611e:	2301      	movs	r3, #1
 8006120:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d017      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800612e:	4b4e      	ldr	r3, [pc, #312]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006134:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613c:	494a      	ldr	r1, [pc, #296]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800613e:	4313      	orrs	r3, r2
 8006140:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006148:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800614c:	d101      	bne.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800614e:	2301      	movs	r3, #1
 8006150:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800615a:	2301      	movs	r3, #1
 800615c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800616a:	2301      	movs	r3, #1
 800616c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0320 	and.w	r3, r3, #32
 8006176:	2b00      	cmp	r3, #0
 8006178:	f000 808b 	beq.w	8006292 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800617c:	4b3a      	ldr	r3, [pc, #232]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800617e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006180:	4a39      	ldr	r2, [pc, #228]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006186:	6413      	str	r3, [r2, #64]	; 0x40
 8006188:	4b37      	ldr	r3, [pc, #220]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800618a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006190:	60bb      	str	r3, [r7, #8]
 8006192:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006194:	4b35      	ldr	r3, [pc, #212]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a34      	ldr	r2, [pc, #208]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800619a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800619e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061a0:	f7fc fca6 	bl	8002af0 <HAL_GetTick>
 80061a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80061a6:	e008      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061a8:	f7fc fca2 	bl	8002af0 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b64      	cmp	r3, #100	; 0x64
 80061b4:	d901      	bls.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e357      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80061ba:	4b2c      	ldr	r3, [pc, #176]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d0f0      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061c6:	4b28      	ldr	r3, [pc, #160]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d035      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d02e      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061e4:	4b20      	ldr	r3, [pc, #128]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061ee:	4b1e      	ldr	r3, [pc, #120]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f2:	4a1d      	ldr	r2, [pc, #116]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061fa:	4b1b      	ldr	r3, [pc, #108]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fe:	4a1a      	ldr	r2, [pc, #104]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006204:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006206:	4a18      	ldr	r2, [pc, #96]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800620c:	4b16      	ldr	r3, [pc, #88]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800620e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b01      	cmp	r3, #1
 8006216:	d114      	bne.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006218:	f7fc fc6a 	bl	8002af0 <HAL_GetTick>
 800621c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800621e:	e00a      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006220:	f7fc fc66 	bl	8002af0 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	f241 3288 	movw	r2, #5000	; 0x1388
 800622e:	4293      	cmp	r3, r2
 8006230:	d901      	bls.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e319      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006236:	4b0c      	ldr	r3, [pc, #48]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d0ee      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800624a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800624e:	d111      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006250:	4b05      	ldr	r3, [pc, #20]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800625c:	4b04      	ldr	r3, [pc, #16]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800625e:	400b      	ands	r3, r1
 8006260:	4901      	ldr	r1, [pc, #4]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006262:	4313      	orrs	r3, r2
 8006264:	608b      	str	r3, [r1, #8]
 8006266:	e00b      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006268:	40023800 	.word	0x40023800
 800626c:	40007000 	.word	0x40007000
 8006270:	0ffffcff 	.word	0x0ffffcff
 8006274:	4bb1      	ldr	r3, [pc, #708]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	4ab0      	ldr	r2, [pc, #704]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800627a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800627e:	6093      	str	r3, [r2, #8]
 8006280:	4bae      	ldr	r3, [pc, #696]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006282:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800628c:	49ab      	ldr	r1, [pc, #684]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800628e:	4313      	orrs	r3, r2
 8006290:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0310 	and.w	r3, r3, #16
 800629a:	2b00      	cmp	r3, #0
 800629c:	d010      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800629e:	4ba7      	ldr	r3, [pc, #668]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062a4:	4aa5      	ldr	r2, [pc, #660]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80062ae:	4ba3      	ldr	r3, [pc, #652]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b8:	49a0      	ldr	r1, [pc, #640]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00a      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062cc:	4b9b      	ldr	r3, [pc, #620]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062da:	4998      	ldr	r1, [pc, #608]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062ee:	4b93      	ldr	r3, [pc, #588]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062fc:	498f      	ldr	r1, [pc, #572]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00a      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006310:	4b8a      	ldr	r3, [pc, #552]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006316:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800631e:	4987      	ldr	r1, [pc, #540]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006320:	4313      	orrs	r3, r2
 8006322:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00a      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006332:	4b82      	ldr	r3, [pc, #520]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006338:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006340:	497e      	ldr	r1, [pc, #504]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006342:	4313      	orrs	r3, r2
 8006344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00a      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006354:	4b79      	ldr	r3, [pc, #484]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635a:	f023 0203 	bic.w	r2, r3, #3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006362:	4976      	ldr	r1, [pc, #472]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006364:	4313      	orrs	r3, r2
 8006366:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00a      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006376:	4b71      	ldr	r3, [pc, #452]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800637c:	f023 020c 	bic.w	r2, r3, #12
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006384:	496d      	ldr	r1, [pc, #436]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006386:	4313      	orrs	r3, r2
 8006388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00a      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006398:	4b68      	ldr	r3, [pc, #416]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800639a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800639e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063a6:	4965      	ldr	r1, [pc, #404]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00a      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063ba:	4b60      	ldr	r3, [pc, #384]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c8:	495c      	ldr	r1, [pc, #368]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00a      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063dc:	4b57      	ldr	r3, [pc, #348]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ea:	4954      	ldr	r1, [pc, #336]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80063fe:	4b4f      	ldr	r3, [pc, #316]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006404:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800640c:	494b      	ldr	r1, [pc, #300]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800640e:	4313      	orrs	r3, r2
 8006410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00a      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006420:	4b46      	ldr	r3, [pc, #280]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006426:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800642e:	4943      	ldr	r1, [pc, #268]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006430:	4313      	orrs	r3, r2
 8006432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00a      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006442:	4b3e      	ldr	r3, [pc, #248]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006448:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006450:	493a      	ldr	r1, [pc, #232]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006452:	4313      	orrs	r3, r2
 8006454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00a      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006464:	4b35      	ldr	r3, [pc, #212]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800646a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006472:	4932      	ldr	r1, [pc, #200]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006474:	4313      	orrs	r3, r2
 8006476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d011      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006486:	4b2d      	ldr	r3, [pc, #180]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800648c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006494:	4929      	ldr	r1, [pc, #164]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006496:	4313      	orrs	r3, r2
 8006498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064a4:	d101      	bne.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80064a6:	2301      	movs	r3, #1
 80064a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0308 	and.w	r3, r3, #8
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80064b6:	2301      	movs	r3, #1
 80064b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064c6:	4b1d      	ldr	r3, [pc, #116]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80064c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064d4:	4919      	ldr	r1, [pc, #100]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00b      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80064e8:	4b14      	ldr	r3, [pc, #80]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80064ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064f8:	4910      	ldr	r1, [pc, #64]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d006      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 80d9 	beq.w	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006514:	4b09      	ldr	r3, [pc, #36]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a08      	ldr	r2, [pc, #32]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800651a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800651e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006520:	f7fc fae6 	bl	8002af0 <HAL_GetTick>
 8006524:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006526:	e00b      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006528:	f7fc fae2 	bl	8002af0 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b64      	cmp	r3, #100	; 0x64
 8006534:	d904      	bls.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e197      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800653a:	bf00      	nop
 800653c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006540:	4b6c      	ldr	r3, [pc, #432]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1ed      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b00      	cmp	r3, #0
 8006556:	d021      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800655c:	2b00      	cmp	r3, #0
 800655e:	d11d      	bne.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006560:	4b64      	ldr	r3, [pc, #400]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006566:	0c1b      	lsrs	r3, r3, #16
 8006568:	f003 0303 	and.w	r3, r3, #3
 800656c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800656e:	4b61      	ldr	r3, [pc, #388]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006574:	0e1b      	lsrs	r3, r3, #24
 8006576:	f003 030f 	and.w	r3, r3, #15
 800657a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	019a      	lsls	r2, r3, #6
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	041b      	lsls	r3, r3, #16
 8006586:	431a      	orrs	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	061b      	lsls	r3, r3, #24
 800658c:	431a      	orrs	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	071b      	lsls	r3, r3, #28
 8006594:	4957      	ldr	r1, [pc, #348]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006596:	4313      	orrs	r3, r2
 8006598:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d004      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065b0:	d00a      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d02e      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065c6:	d129      	bne.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80065c8:	4b4a      	ldr	r3, [pc, #296]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065ce:	0c1b      	lsrs	r3, r3, #16
 80065d0:	f003 0303 	and.w	r3, r3, #3
 80065d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80065d6:	4b47      	ldr	r3, [pc, #284]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065dc:	0f1b      	lsrs	r3, r3, #28
 80065de:	f003 0307 	and.w	r3, r3, #7
 80065e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	019a      	lsls	r2, r3, #6
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	041b      	lsls	r3, r3, #16
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	061b      	lsls	r3, r3, #24
 80065f6:	431a      	orrs	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	071b      	lsls	r3, r3, #28
 80065fc:	493d      	ldr	r1, [pc, #244]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006604:	4b3b      	ldr	r3, [pc, #236]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006606:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800660a:	f023 021f 	bic.w	r2, r3, #31
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	3b01      	subs	r3, #1
 8006614:	4937      	ldr	r1, [pc, #220]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006616:	4313      	orrs	r3, r2
 8006618:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d01d      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006628:	4b32      	ldr	r3, [pc, #200]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800662a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800662e:	0e1b      	lsrs	r3, r3, #24
 8006630:	f003 030f 	and.w	r3, r3, #15
 8006634:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006636:	4b2f      	ldr	r3, [pc, #188]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800663c:	0f1b      	lsrs	r3, r3, #28
 800663e:	f003 0307 	and.w	r3, r3, #7
 8006642:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	019a      	lsls	r2, r3, #6
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	041b      	lsls	r3, r3, #16
 8006650:	431a      	orrs	r2, r3
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	061b      	lsls	r3, r3, #24
 8006656:	431a      	orrs	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	071b      	lsls	r3, r3, #28
 800665c:	4925      	ldr	r1, [pc, #148]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800665e:	4313      	orrs	r3, r2
 8006660:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d011      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	019a      	lsls	r2, r3, #6
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	041b      	lsls	r3, r3, #16
 800667c:	431a      	orrs	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	061b      	lsls	r3, r3, #24
 8006684:	431a      	orrs	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	071b      	lsls	r3, r3, #28
 800668c:	4919      	ldr	r1, [pc, #100]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800668e:	4313      	orrs	r3, r2
 8006690:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006694:	4b17      	ldr	r3, [pc, #92]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a16      	ldr	r2, [pc, #88]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800669a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800669e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066a0:	f7fc fa26 	bl	8002af0 <HAL_GetTick>
 80066a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066a6:	e008      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80066a8:	f7fc fa22 	bl	8002af0 <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	2b64      	cmp	r3, #100	; 0x64
 80066b4:	d901      	bls.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e0d7      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066ba:	4b0e      	ldr	r3, [pc, #56]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d0f0      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	f040 80cd 	bne.w	8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80066ce:	4b09      	ldr	r3, [pc, #36]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a08      	ldr	r2, [pc, #32]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066da:	f7fc fa09 	bl	8002af0 <HAL_GetTick>
 80066de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066e0:	e00a      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80066e2:	f7fc fa05 	bl	8002af0 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b64      	cmp	r3, #100	; 0x64
 80066ee:	d903      	bls.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e0ba      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80066f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066f8:	4b5e      	ldr	r3, [pc, #376]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006704:	d0ed      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006716:	2b00      	cmp	r3, #0
 8006718:	d009      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006722:	2b00      	cmp	r3, #0
 8006724:	d02e      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672a:	2b00      	cmp	r3, #0
 800672c:	d12a      	bne.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800672e:	4b51      	ldr	r3, [pc, #324]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006734:	0c1b      	lsrs	r3, r3, #16
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800673c:	4b4d      	ldr	r3, [pc, #308]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800673e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006742:	0f1b      	lsrs	r3, r3, #28
 8006744:	f003 0307 	and.w	r3, r3, #7
 8006748:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	019a      	lsls	r2, r3, #6
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	041b      	lsls	r3, r3, #16
 8006754:	431a      	orrs	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	061b      	lsls	r3, r3, #24
 800675c:	431a      	orrs	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	071b      	lsls	r3, r3, #28
 8006762:	4944      	ldr	r1, [pc, #272]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006764:	4313      	orrs	r3, r2
 8006766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800676a:	4b42      	ldr	r3, [pc, #264]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800676c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006770:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006778:	3b01      	subs	r3, #1
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	493d      	ldr	r1, [pc, #244]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800677e:	4313      	orrs	r3, r2
 8006780:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d022      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006794:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006798:	d11d      	bne.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800679a:	4b36      	ldr	r3, [pc, #216]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800679c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a0:	0e1b      	lsrs	r3, r3, #24
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067a8:	4b32      	ldr	r3, [pc, #200]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ae:	0f1b      	lsrs	r3, r3, #28
 80067b0:	f003 0307 	and.w	r3, r3, #7
 80067b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	019a      	lsls	r2, r3, #6
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	041b      	lsls	r3, r3, #16
 80067c2:	431a      	orrs	r2, r3
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	061b      	lsls	r3, r3, #24
 80067c8:	431a      	orrs	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	071b      	lsls	r3, r3, #28
 80067ce:	4929      	ldr	r1, [pc, #164]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0308 	and.w	r3, r3, #8
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d028      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067e2:	4b24      	ldr	r3, [pc, #144]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e8:	0e1b      	lsrs	r3, r3, #24
 80067ea:	f003 030f 	and.w	r3, r3, #15
 80067ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80067f0:	4b20      	ldr	r3, [pc, #128]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f6:	0c1b      	lsrs	r3, r3, #16
 80067f8:	f003 0303 	and.w	r3, r3, #3
 80067fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	019a      	lsls	r2, r3, #6
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	041b      	lsls	r3, r3, #16
 8006808:	431a      	orrs	r2, r3
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	061b      	lsls	r3, r3, #24
 800680e:	431a      	orrs	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	69db      	ldr	r3, [r3, #28]
 8006814:	071b      	lsls	r3, r3, #28
 8006816:	4917      	ldr	r1, [pc, #92]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006818:	4313      	orrs	r3, r2
 800681a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800681e:	4b15      	ldr	r3, [pc, #84]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006824:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682c:	4911      	ldr	r1, [pc, #68]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800682e:	4313      	orrs	r3, r2
 8006830:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006834:	4b0f      	ldr	r3, [pc, #60]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a0e      	ldr	r2, [pc, #56]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800683a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800683e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006840:	f7fc f956 	bl	8002af0 <HAL_GetTick>
 8006844:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006846:	e008      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006848:	f7fc f952 	bl	8002af0 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b64      	cmp	r3, #100	; 0x64
 8006854:	d901      	bls.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e007      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800685a:	4b06      	ldr	r3, [pc, #24]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006862:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006866:	d1ef      	bne.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3720      	adds	r7, #32
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	40023800 	.word	0x40023800

08006878 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006880:	2300      	movs	r3, #0
 8006882:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8006884:	2300      	movs	r3, #0
 8006886:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8006888:	2300      	movs	r3, #0
 800688a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800688c:	2300      	movs	r3, #0
 800688e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006896:	f040 808c 	bne.w	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800689a:	4b95      	ldr	r3, [pc, #596]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800689c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068a0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80068a8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068b0:	d07c      	beq.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068b8:	d87d      	bhi.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d004      	beq.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068c6:	d039      	beq.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80068c8:	e075      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80068ca:	4b89      	ldr	r3, [pc, #548]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d108      	bne.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80068d6:	4b86      	ldr	r3, [pc, #536]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068de:	4a85      	ldr	r2, [pc, #532]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80068e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e4:	613b      	str	r3, [r7, #16]
 80068e6:	e007      	b.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80068e8:	4b81      	ldr	r3, [pc, #516]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068f0:	4a81      	ldr	r2, [pc, #516]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80068f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80068f8:	4b7d      	ldr	r3, [pc, #500]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80068fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068fe:	0e1b      	lsrs	r3, r3, #24
 8006900:	f003 030f 	and.w	r3, r3, #15
 8006904:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006906:	4b7a      	ldr	r3, [pc, #488]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800690c:	099b      	lsrs	r3, r3, #6
 800690e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	fb02 f203 	mul.w	r2, r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	fbb2 f3f3 	udiv	r3, r2, r3
 800691e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006920:	4b73      	ldr	r3, [pc, #460]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006926:	0a1b      	lsrs	r3, r3, #8
 8006928:	f003 031f 	and.w	r3, r3, #31
 800692c:	3301      	adds	r3, #1
 800692e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	fbb2 f3f3 	udiv	r3, r2, r3
 8006938:	617b      	str	r3, [r7, #20]
        break;
 800693a:	e03d      	b.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800693c:	4b6c      	ldr	r3, [pc, #432]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d108      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006948:	4b69      	ldr	r3, [pc, #420]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006950:	4a68      	ldr	r2, [pc, #416]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006952:	fbb2 f3f3 	udiv	r3, r2, r3
 8006956:	613b      	str	r3, [r7, #16]
 8006958:	e007      	b.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800695a:	4b65      	ldr	r3, [pc, #404]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006962:	4a65      	ldr	r2, [pc, #404]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006964:	fbb2 f3f3 	udiv	r3, r2, r3
 8006968:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800696a:	4b61      	ldr	r3, [pc, #388]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800696c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006970:	0e1b      	lsrs	r3, r3, #24
 8006972:	f003 030f 	and.w	r3, r3, #15
 8006976:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006978:	4b5d      	ldr	r3, [pc, #372]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800697a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800697e:	099b      	lsrs	r3, r3, #6
 8006980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	fb02 f203 	mul.w	r2, r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006990:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006992:	4b57      	ldr	r3, [pc, #348]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006998:	f003 031f 	and.w	r3, r3, #31
 800699c:	3301      	adds	r3, #1
 800699e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a8:	617b      	str	r3, [r7, #20]
        break;
 80069aa:	e005      	b.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 80069ac:	4b53      	ldr	r3, [pc, #332]	; (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80069ae:	617b      	str	r3, [r7, #20]
        break;
 80069b0:	e002      	b.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 80069b2:	bf00      	nop
 80069b4:	e000      	b.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 80069b6:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069be:	f040 808c 	bne.w	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 80069c2:	4b4b      	ldr	r3, [pc, #300]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80069c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069c8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80069d0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069d8:	d07c      	beq.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069e0:	d87d      	bhi.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d004      	beq.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069ee:	d039      	beq.n	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80069f0:	e075      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80069f2:	4b3f      	ldr	r3, [pc, #252]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d108      	bne.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80069fe:	4b3c      	ldr	r3, [pc, #240]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a06:	4a3b      	ldr	r2, [pc, #236]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0c:	613b      	str	r3, [r7, #16]
 8006a0e:	e007      	b.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006a10:	4b37      	ldr	r3, [pc, #220]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a18:	4a37      	ldr	r2, [pc, #220]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a1e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006a20:	4b33      	ldr	r3, [pc, #204]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a26:	0e1b      	lsrs	r3, r3, #24
 8006a28:	f003 030f 	and.w	r3, r3, #15
 8006a2c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006a2e:	4b30      	ldr	r3, [pc, #192]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a34:	099b      	lsrs	r3, r3, #6
 8006a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	fb02 f203 	mul.w	r2, r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a46:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006a48:	4b29      	ldr	r3, [pc, #164]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a4e:	0a1b      	lsrs	r3, r3, #8
 8006a50:	f003 031f 	and.w	r3, r3, #31
 8006a54:	3301      	adds	r3, #1
 8006a56:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a60:	617b      	str	r3, [r7, #20]
        break;
 8006a62:	e03d      	b.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006a64:	4b22      	ldr	r3, [pc, #136]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d108      	bne.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006a70:	4b1f      	ldr	r3, [pc, #124]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a78:	4a1e      	ldr	r2, [pc, #120]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a7e:	613b      	str	r3, [r7, #16]
 8006a80:	e007      	b.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006a82:	4b1b      	ldr	r3, [pc, #108]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a8a:	4a1b      	ldr	r2, [pc, #108]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a90:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006a92:	4b17      	ldr	r3, [pc, #92]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a98:	0e1b      	lsrs	r3, r3, #24
 8006a9a:	f003 030f 	and.w	r3, r3, #15
 8006a9e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006aa0:	4b13      	ldr	r3, [pc, #76]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aa6:	099b      	lsrs	r3, r3, #6
 8006aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	fb02 f203 	mul.w	r2, r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006aba:	4b0d      	ldr	r3, [pc, #52]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ac0:	f003 031f 	and.w	r3, r3, #31
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad0:	617b      	str	r3, [r7, #20]
        break;
 8006ad2:	e005      	b.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ad4:	4b09      	ldr	r3, [pc, #36]	; (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006ad6:	617b      	str	r3, [r7, #20]
        break;
 8006ad8:	e002      	b.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 8006ada:	bf00      	nop
 8006adc:	e000      	b.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 8006ade:	bf00      	nop

  return frequency;
 8006ae0:	697b      	ldr	r3, [r7, #20]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	371c      	adds	r7, #28
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	40023800 	.word	0x40023800
 8006af4:	00f42400 	.word	0x00f42400
 8006af8:	017d7840 	.word	0x017d7840
 8006afc:	00bb8000 	.word	0x00bb8000

08006b00 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e081      	b.n	8006c16 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	7f5b      	ldrb	r3, [r3, #29]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d105      	bne.n	8006b28 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7fb fad6 	bl	80020d4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	22ca      	movs	r2, #202	; 0xca
 8006b34:	625a      	str	r2, [r3, #36]	; 0x24
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2253      	movs	r2, #83	; 0x53
 8006b3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fb16 	bl	8007170 <RTC_EnterInitMode>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d008      	beq.n	8006b5c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	22ff      	movs	r2, #255	; 0xff
 8006b50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2204      	movs	r2, #4
 8006b56:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e05c      	b.n	8006c16 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6899      	ldr	r1, [r3, #8]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	4b2e      	ldr	r3, [pc, #184]	; (8006c20 <HAL_RTC_Init+0x120>)
 8006b68:	400b      	ands	r3, r1
 8006b6a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6899      	ldr	r1, [r3, #8]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	431a      	orrs	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	430a      	orrs	r2, r1
 8006b88:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	68d2      	ldr	r2, [r2, #12]
 8006b92:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6919      	ldr	r1, [r3, #16]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	041a      	lsls	r2, r3, #16
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68da      	ldr	r2, [r3, #12]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bb6:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f003 0320 	and.w	r3, r3, #32
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10e      	bne.n	8006be4 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 faaa 	bl	8007120 <HAL_RTC_WaitForSynchro>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d008      	beq.n	8006be4 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	22ff      	movs	r2, #255	; 0xff
 8006bd8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2204      	movs	r2, #4
 8006bde:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e018      	b.n	8006c16 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 0208 	bic.w	r2, r2, #8
 8006bf2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	699a      	ldr	r2, [r3, #24]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	22ff      	movs	r2, #255	; 0xff
 8006c0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006c14:	2300      	movs	r3, #0
  }
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	ff8fffbf 	.word	0xff8fffbf

08006c24 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c24:	b590      	push	{r4, r7, lr}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006c30:	2300      	movs	r3, #0
 8006c32:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	7f1b      	ldrb	r3, [r3, #28]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d101      	bne.n	8006c40 <HAL_RTC_SetTime+0x1c>
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e0a8      	b.n	8006d92 <HAL_RTC_SetTime+0x16e>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2201      	movs	r2, #1
 8006c44:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2202      	movs	r2, #2
 8006c4a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d126      	bne.n	8006ca0 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d102      	bne.n	8006c66 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2200      	movs	r2, #0
 8006c64:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 faac 	bl	80071c8 <RTC_ByteToBcd2>
 8006c70:	4603      	mov	r3, r0
 8006c72:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	785b      	ldrb	r3, [r3, #1]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 faa5 	bl	80071c8 <RTC_ByteToBcd2>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006c82:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	789b      	ldrb	r3, [r3, #2]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 fa9d 	bl	80071c8 <RTC_ByteToBcd2>
 8006c8e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006c90:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	7b1b      	ldrb	r3, [r3, #12]
 8006c98:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	617b      	str	r3, [r7, #20]
 8006c9e:	e018      	b.n	8006cd2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d102      	bne.n	8006cb4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	785b      	ldrb	r3, [r3, #1]
 8006cbe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006cc0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006cc6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	7b1b      	ldrb	r3, [r3, #12]
 8006ccc:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	22ca      	movs	r2, #202	; 0xca
 8006cd8:	625a      	str	r2, [r3, #36]	; 0x24
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2253      	movs	r2, #83	; 0x53
 8006ce0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f000 fa44 	bl	8007170 <RTC_EnterInitMode>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00b      	beq.n	8006d06 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	22ff      	movs	r2, #255	; 0xff
 8006cf4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2204      	movs	r2, #4
 8006cfa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e045      	b.n	8006d92 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	6979      	ldr	r1, [r7, #20]
 8006d0c:	4b23      	ldr	r3, [pc, #140]	; (8006d9c <HAL_RTC_SetTime+0x178>)
 8006d0e:	400b      	ands	r3, r1
 8006d10:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d20:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6899      	ldr	r1, [r3, #8]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	691a      	ldr	r2, [r3, #16]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	431a      	orrs	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d48:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f003 0320 	and.w	r3, r3, #32
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d111      	bne.n	8006d7c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f000 f9e1 	bl	8007120 <HAL_RTC_WaitForSynchro>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00b      	beq.n	8006d7c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	22ff      	movs	r2, #255	; 0xff
 8006d6a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2204      	movs	r2, #4
 8006d70:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e00a      	b.n	8006d92 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	22ff      	movs	r2, #255	; 0xff
 8006d82:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2201      	movs	r2, #1
 8006d88:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006d90:	2300      	movs	r3, #0
  }
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	371c      	adds	r7, #28
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd90      	pop	{r4, r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	007f7f7f 	.word	0x007f7f7f

08006da0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006da0:	b590      	push	{r4, r7, lr}
 8006da2:	b087      	sub	sp, #28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8006dac:	2300      	movs	r3, #0
 8006dae:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	7f1b      	ldrb	r3, [r3, #28]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d101      	bne.n	8006dbc <HAL_RTC_SetDate+0x1c>
 8006db8:	2302      	movs	r3, #2
 8006dba:	e092      	b.n	8006ee2 <HAL_RTC_SetDate+0x142>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10e      	bne.n	8006dec <HAL_RTC_SetDate+0x4c>
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	785b      	ldrb	r3, [r3, #1]
 8006dd2:	f003 0310 	and.w	r3, r3, #16
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d008      	beq.n	8006dec <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	785b      	ldrb	r3, [r3, #1]
 8006dde:	f023 0310 	bic.w	r3, r3, #16
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	330a      	adds	r3, #10
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d11c      	bne.n	8006e2c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	78db      	ldrb	r3, [r3, #3]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 f9e6 	bl	80071c8 <RTC_ByteToBcd2>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	785b      	ldrb	r3, [r3, #1]
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 f9df 	bl	80071c8 <RTC_ByteToBcd2>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006e0e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	789b      	ldrb	r3, [r3, #2]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f000 f9d7 	bl	80071c8 <RTC_ByteToBcd2>
 8006e1a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006e1c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006e26:	4313      	orrs	r3, r2
 8006e28:	617b      	str	r3, [r7, #20]
 8006e2a:	e00e      	b.n	8006e4a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	78db      	ldrb	r3, [r3, #3]
 8006e30:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	785b      	ldrb	r3, [r3, #1]
 8006e36:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006e38:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8006e3e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006e46:	4313      	orrs	r3, r2
 8006e48:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	22ca      	movs	r2, #202	; 0xca
 8006e50:	625a      	str	r2, [r3, #36]	; 0x24
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2253      	movs	r2, #83	; 0x53
 8006e58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 f988 	bl	8007170 <RTC_EnterInitMode>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00b      	beq.n	8006e7e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	22ff      	movs	r2, #255	; 0xff
 8006e6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2204      	movs	r2, #4
 8006e72:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e031      	b.n	8006ee2 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	6979      	ldr	r1, [r7, #20]
 8006e84:	4b19      	ldr	r3, [pc, #100]	; (8006eec <HAL_RTC_SetDate+0x14c>)
 8006e86:	400b      	ands	r3, r1
 8006e88:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68da      	ldr	r2, [r3, #12]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e98:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f003 0320 	and.w	r3, r3, #32
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d111      	bne.n	8006ecc <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 f939 	bl	8007120 <HAL_RTC_WaitForSynchro>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00b      	beq.n	8006ecc <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	22ff      	movs	r2, #255	; 0xff
 8006eba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2204      	movs	r2, #4
 8006ec0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e00a      	b.n	8006ee2 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	22ff      	movs	r2, #255	; 0xff
 8006ed2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
  }
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	371c      	adds	r7, #28
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd90      	pop	{r4, r7, pc}
 8006eea:	bf00      	nop
 8006eec:	00ffff3f 	.word	0x00ffff3f

08006ef0 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006ef0:	b590      	push	{r4, r7, lr}
 8006ef2:	b089      	sub	sp, #36	; 0x24
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8006f00:	2300      	movs	r3, #0
 8006f02:	61fb      	str	r3, [r7, #28]
 8006f04:	2300      	movs	r3, #0
 8006f06:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	7f1b      	ldrb	r3, [r3, #28]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d101      	bne.n	8006f14 <HAL_RTC_SetAlarm+0x24>
 8006f10:	2302      	movs	r3, #2
 8006f12:	e101      	b.n	8007118 <HAL_RTC_SetAlarm+0x228>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2201      	movs	r2, #1
 8006f18:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d137      	bne.n	8006f96 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d102      	bne.n	8006f3a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2200      	movs	r2, #0
 8006f38:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 f942 	bl	80071c8 <RTC_ByteToBcd2>
 8006f44:	4603      	mov	r3, r0
 8006f46:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	785b      	ldrb	r3, [r3, #1]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 f93b 	bl	80071c8 <RTC_ByteToBcd2>
 8006f52:	4603      	mov	r3, r0
 8006f54:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006f56:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	789b      	ldrb	r3, [r3, #2]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f000 f933 	bl	80071c8 <RTC_ByteToBcd2>
 8006f62:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8006f64:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	7b1b      	ldrb	r3, [r3, #12]
 8006f6c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006f6e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 f925 	bl	80071c8 <RTC_ByteToBcd2>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006f82:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8006f8a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006f90:	4313      	orrs	r3, r2
 8006f92:	61fb      	str	r3, [r7, #28]
 8006f94:	e023      	b.n	8006fde <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d102      	bne.n	8006faa <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	785b      	ldrb	r3, [r3, #1]
 8006fb4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006fb6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8006fbc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	7b1b      	ldrb	r3, [r3, #12]
 8006fc2:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006fc4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006fcc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006fce:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8006fd4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	22ca      	movs	r2, #202	; 0xca
 8006ff0:	625a      	str	r2, [r3, #36]	; 0x24
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2253      	movs	r2, #83	; 0x53
 8006ff8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007002:	d13f      	bne.n	8007084 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689a      	ldr	r2, [r3, #8]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007012:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689a      	ldr	r2, [r3, #8]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007022:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007024:	f7fb fd64 	bl	8002af0 <HAL_GetTick>
 8007028:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800702a:	e013      	b.n	8007054 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800702c:	f7fb fd60 	bl	8002af0 <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800703a:	d90b      	bls.n	8007054 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	22ff      	movs	r2, #255	; 0xff
 8007042:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2203      	movs	r2, #3
 8007048:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e061      	b.n	8007118 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d0e4      	beq.n	800702c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	69fa      	ldr	r2, [r7, #28]
 8007068:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	689a      	ldr	r2, [r3, #8]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007080:	609a      	str	r2, [r3, #8]
 8007082:	e03e      	b.n	8007102 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689a      	ldr	r2, [r3, #8]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007092:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689a      	ldr	r2, [r3, #8]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070a2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80070a4:	f7fb fd24 	bl	8002af0 <HAL_GetTick>
 80070a8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80070aa:	e013      	b.n	80070d4 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80070ac:	f7fb fd20 	bl	8002af0 <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070ba:	d90b      	bls.n	80070d4 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	22ff      	movs	r2, #255	; 0xff
 80070c2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2203      	movs	r2, #3
 80070c8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e021      	b.n	8007118 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d0e4      	beq.n	80070ac <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	69fa      	ldr	r2, [r7, #28]
 80070e8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007100:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	22ff      	movs	r2, #255	; 0xff
 8007108:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2201      	movs	r2, #1
 800710e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3724      	adds	r7, #36	; 0x24
 800711c:	46bd      	mov	sp, r7
 800711e:	bd90      	pop	{r4, r7, pc}

08007120 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007128:	2300      	movs	r3, #0
 800712a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68da      	ldr	r2, [r3, #12]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800713a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800713c:	f7fb fcd8 	bl	8002af0 <HAL_GetTick>
 8007140:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007142:	e009      	b.n	8007158 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007144:	f7fb fcd4 	bl	8002af0 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007152:	d901      	bls.n	8007158 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e007      	b.n	8007168 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f003 0320 	and.w	r3, r3, #32
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0ee      	beq.n	8007144 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007178:	2300      	movs	r3, #0
 800717a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007186:	2b00      	cmp	r3, #0
 8007188:	d119      	bne.n	80071be <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f04f 32ff 	mov.w	r2, #4294967295
 8007192:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007194:	f7fb fcac 	bl	8002af0 <HAL_GetTick>
 8007198:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800719a:	e009      	b.n	80071b0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800719c:	f7fb fca8 	bl	8002af0 <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071aa:	d901      	bls.n	80071b0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e007      	b.n	80071c0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d0ee      	beq.n	800719c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	4603      	mov	r3, r0
 80071d0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80071d6:	e005      	b.n	80071e4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	3301      	adds	r3, #1
 80071dc:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80071de:	79fb      	ldrb	r3, [r7, #7]
 80071e0:	3b0a      	subs	r3, #10
 80071e2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80071e4:	79fb      	ldrb	r3, [r7, #7]
 80071e6:	2b09      	cmp	r3, #9
 80071e8:	d8f6      	bhi.n	80071d8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	011b      	lsls	r3, r3, #4
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	79fb      	ldrb	r3, [r7, #7]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	b2db      	uxtb	r3, r3
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007210:	2300      	movs	r3, #0
 8007212:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	7f1b      	ldrb	r3, [r3, #28]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d101      	bne.n	8007220 <HAL_RTCEx_SetTimeStamp+0x1c>
 800721c:	2302      	movs	r3, #2
 800721e:	e03e      	b.n	800729e <HAL_RTCEx_SetTimeStamp+0x9a>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2201      	movs	r2, #1
 8007224:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2202      	movs	r2, #2
 800722a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689a      	ldr	r2, [r3, #8]
 8007232:	4b1e      	ldr	r3, [pc, #120]	; (80072ac <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007234:	4013      	ands	r3, r2
 8007236:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	4313      	orrs	r3, r2
 800723e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	22ca      	movs	r2, #202	; 0xca
 8007246:	625a      	str	r2, [r3, #36]	; 0x24
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2253      	movs	r2, #83	; 0x53
 800724e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 0206 	bic.w	r2, r2, #6
 800725e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	430a      	orrs	r2, r1
 800726e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689a      	ldr	r2, [r3, #8]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007286:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	22ff      	movs	r2, #255	; 0xff
 800728e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2201      	movs	r2, #1
 8007294:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	371c      	adds	r7, #28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	fffff7f7 	.word	0xfffff7f7

080072b0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b088      	sub	sp, #32
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80072b8:	2300      	movs	r3, #0
 80072ba:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80072bc:	2300      	movs	r3, #0
 80072be:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80072c0:	2300      	movs	r3, #0
 80072c2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e156      	b.n	800757c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d106      	bne.n	80072e8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7fb f9aa 	bl	800263c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f95b 	bl	80075ac <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d00c      	beq.n	8007318 <HAL_SAI_Init+0x68>
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d80d      	bhi.n	800731e <HAL_SAI_Init+0x6e>
 8007302:	2b00      	cmp	r3, #0
 8007304:	d002      	beq.n	800730c <HAL_SAI_Init+0x5c>
 8007306:	2b01      	cmp	r3, #1
 8007308:	d003      	beq.n	8007312 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800730a:	e008      	b.n	800731e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800730c:	2300      	movs	r3, #0
 800730e:	61fb      	str	r3, [r7, #28]
      break;
 8007310:	e006      	b.n	8007320 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007312:	2310      	movs	r3, #16
 8007314:	61fb      	str	r3, [r7, #28]
      break;
 8007316:	e003      	b.n	8007320 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007318:	2320      	movs	r3, #32
 800731a:	61fb      	str	r3, [r7, #28]
      break;
 800731c:	e000      	b.n	8007320 <HAL_SAI_Init+0x70>
      break;
 800731e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	2b03      	cmp	r3, #3
 8007326:	d81e      	bhi.n	8007366 <HAL_SAI_Init+0xb6>
 8007328:	a201      	add	r2, pc, #4	; (adr r2, 8007330 <HAL_SAI_Init+0x80>)
 800732a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732e:	bf00      	nop
 8007330:	08007341 	.word	0x08007341
 8007334:	08007347 	.word	0x08007347
 8007338:	0800734f 	.word	0x0800734f
 800733c:	08007357 	.word	0x08007357
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8007340:	2300      	movs	r3, #0
 8007342:	617b      	str	r3, [r7, #20]
    }
    break;
 8007344:	e010      	b.n	8007368 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800734a:	617b      	str	r3, [r7, #20]
    }
    break;
 800734c:	e00c      	b.n	8007368 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800734e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007352:	617b      	str	r3, [r7, #20]
    }
    break;
 8007354:	e008      	b.n	8007368 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007356:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800735a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	f043 0301 	orr.w	r3, r3, #1
 8007362:	61fb      	str	r3, [r7, #28]
    }
    break;
 8007364:	e000      	b.n	8007368 <HAL_SAI_Init+0xb8>
    default:
      break;
 8007366:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a85      	ldr	r2, [pc, #532]	; (8007584 <HAL_SAI_Init+0x2d4>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d004      	beq.n	800737c <HAL_SAI_Init+0xcc>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a84      	ldr	r2, [pc, #528]	; (8007588 <HAL_SAI_Init+0x2d8>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d103      	bne.n	8007384 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800737c:	4a83      	ldr	r2, [pc, #524]	; (800758c <HAL_SAI_Init+0x2dc>)
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	6013      	str	r3, [r2, #0]
 8007382:	e002      	b.n	800738a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007384:	4a82      	ldr	r2, [pc, #520]	; (8007590 <HAL_SAI_Init+0x2e0>)
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d04c      	beq.n	800742c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8007392:	2300      	movs	r3, #0
 8007394:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a7a      	ldr	r2, [pc, #488]	; (8007584 <HAL_SAI_Init+0x2d4>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d004      	beq.n	80073aa <HAL_SAI_Init+0xfa>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a78      	ldr	r2, [pc, #480]	; (8007588 <HAL_SAI_Init+0x2d8>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d104      	bne.n	80073b4 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80073aa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80073ae:	f7ff fa63 	bl	8006878 <HAL_RCCEx_GetPeriphCLKFreq>
 80073b2:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a76      	ldr	r2, [pc, #472]	; (8007594 <HAL_SAI_Init+0x2e4>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d004      	beq.n	80073c8 <HAL_SAI_Init+0x118>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a75      	ldr	r2, [pc, #468]	; (8007598 <HAL_SAI_Init+0x2e8>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d104      	bne.n	80073d2 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80073c8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80073cc:	f7ff fa54 	bl	8006878 <HAL_RCCEx_GetPeriphCLKFreq>
 80073d0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	4613      	mov	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	461a      	mov	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	025b      	lsls	r3, r3, #9
 80073e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	4a6b      	ldr	r2, [pc, #428]	; (800759c <HAL_SAI_Init+0x2ec>)
 80073ee:	fba2 2303 	umull	r2, r3, r2, r3
 80073f2:	08da      	lsrs	r2, r3, #3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80073f8:	68f9      	ldr	r1, [r7, #12]
 80073fa:	4b68      	ldr	r3, [pc, #416]	; (800759c <HAL_SAI_Init+0x2ec>)
 80073fc:	fba3 2301 	umull	r2, r3, r3, r1
 8007400:	08da      	lsrs	r2, r3, #3
 8007402:	4613      	mov	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	005b      	lsls	r3, r3, #1
 800740a:	1aca      	subs	r2, r1, r3
 800740c:	2a08      	cmp	r2, #8
 800740e:	d904      	bls.n	800741a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a1b      	ldr	r3, [r3, #32]
 8007414:	1c5a      	adds	r2, r3, #1
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741e:	2b04      	cmp	r3, #4
 8007420:	d104      	bne.n	800742c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	085a      	lsrs	r2, r3, #1
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d003      	beq.n	800743c <HAL_SAI_Init+0x18c>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	2b02      	cmp	r3, #2
 800743a:	d109      	bne.n	8007450 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007440:	2b01      	cmp	r3, #1
 8007442:	d101      	bne.n	8007448 <HAL_SAI_Init+0x198>
 8007444:	2300      	movs	r3, #0
 8007446:	e001      	b.n	800744c <HAL_SAI_Init+0x19c>
 8007448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800744c:	61bb      	str	r3, [r7, #24]
 800744e:	e008      	b.n	8007462 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007454:	2b01      	cmp	r3, #1
 8007456:	d102      	bne.n	800745e <HAL_SAI_Init+0x1ae>
 8007458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800745c:	e000      	b.n	8007460 <HAL_SAI_Init+0x1b0>
 800745e:	2300      	movs	r3, #0
 8007460:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6819      	ldr	r1, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	4b4c      	ldr	r3, [pc, #304]	; (80075a0 <HAL_SAI_Init+0x2f0>)
 800746e:	400b      	ands	r3, r1
 8007470:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	6819      	ldr	r1, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007480:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007486:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748c:	431a      	orrs	r2, r3
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800749a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80074a6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	051b      	lsls	r3, r3, #20
 80074ae:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	430a      	orrs	r2, r1
 80074b6:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6859      	ldr	r1, [r3, #4]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	4b38      	ldr	r3, [pc, #224]	; (80075a4 <HAL_SAI_Init+0x2f4>)
 80074c4:	400b      	ands	r3, r1
 80074c6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6859      	ldr	r1, [r3, #4]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	699a      	ldr	r2, [r3, #24]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d6:	431a      	orrs	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074dc:	431a      	orrs	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6899      	ldr	r1, [r3, #8]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	4b2d      	ldr	r3, [pc, #180]	; (80075a8 <HAL_SAI_Init+0x2f8>)
 80074f2:	400b      	ands	r3, r1
 80074f4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	6899      	ldr	r1, [r3, #8]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007500:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007506:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800750c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8007512:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007518:	3b01      	subs	r3, #1
 800751a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800751c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68d9      	ldr	r1, [r3, #12]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007534:	400b      	ands	r3, r1
 8007536:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68d9      	ldr	r1, [r3, #12]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007546:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800754c:	041b      	lsls	r3, r3, #16
 800754e:	431a      	orrs	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007554:	3b01      	subs	r3, #1
 8007556:	021b      	lsls	r3, r3, #8
 8007558:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	430a      	orrs	r2, r1
 8007560:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3720      	adds	r7, #32
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	40015804 	.word	0x40015804
 8007588:	40015824 	.word	0x40015824
 800758c:	40015800 	.word	0x40015800
 8007590:	40015c00 	.word	0x40015c00
 8007594:	40015c04 	.word	0x40015c04
 8007598:	40015c24 	.word	0x40015c24
 800759c:	cccccccd 	.word	0xcccccccd
 80075a0:	ff05c010 	.word	0xff05c010
 80075a4:	ffff1ff0 	.word	0xffff1ff0
 80075a8:	fff88000 	.word	0xfff88000

080075ac <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80075b4:	4b17      	ldr	r3, [pc, #92]	; (8007614 <SAI_Disable+0x68>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a17      	ldr	r2, [pc, #92]	; (8007618 <SAI_Disable+0x6c>)
 80075ba:	fba2 2303 	umull	r2, r3, r2, r3
 80075be:	0b1b      	lsrs	r3, r3, #12
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80075d6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	1e5a      	subs	r2, r3, #1
 80075dc:	60fa      	str	r2, [r7, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10a      	bne.n	80075f8 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	72fb      	strb	r3, [r7, #11]
      break;
 80075f6:	e006      	b.n	8007606 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1e8      	bne.n	80075d8 <SAI_Disable+0x2c>

  return status;
 8007606:	7afb      	ldrb	r3, [r7, #11]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3714      	adds	r7, #20
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr
 8007614:	20000000 	.word	0x20000000
 8007618:	95cbec1b 	.word	0x95cbec1b

0800761c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e04c      	b.n	80076c8 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d106      	bne.n	8007648 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7fa fd60 	bl	8002108 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2202      	movs	r2, #2
 800764c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f022 0203 	bic.w	r2, r2, #3
 800765e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	4b19      	ldr	r3, [pc, #100]	; (80076d0 <HAL_SPDIFRX_Init+0xb4>)
 800766c:	4013      	ands	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8007678:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800767e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8007684:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800768a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8007690:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8007696:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800769c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 80076a2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 80076a8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	fff88407 	.word	0xfff88407

080076d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e09d      	b.n	8007822 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d108      	bne.n	8007700 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076f6:	d009      	beq.n	800770c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	61da      	str	r2, [r3, #28]
 80076fe:	e005      	b.n	800770c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d106      	bne.n	800772c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7fa fd30 	bl	800218c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2202      	movs	r2, #2
 8007730:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007742:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800774c:	d902      	bls.n	8007754 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800774e:	2300      	movs	r3, #0
 8007750:	60fb      	str	r3, [r7, #12]
 8007752:	e002      	b.n	800775a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007758:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007762:	d007      	beq.n	8007774 <HAL_SPI_Init+0xa0>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800776c:	d002      	beq.n	8007774 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007784:	431a      	orrs	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	f003 0302 	and.w	r3, r3, #2
 800778e:	431a      	orrs	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	695b      	ldr	r3, [r3, #20]
 8007794:	f003 0301 	and.w	r3, r3, #1
 8007798:	431a      	orrs	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077a2:	431a      	orrs	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	69db      	ldr	r3, [r3, #28]
 80077a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077ac:	431a      	orrs	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077b6:	ea42 0103 	orr.w	r1, r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	430a      	orrs	r2, r1
 80077c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	0c1b      	lsrs	r3, r3, #16
 80077d0:	f003 0204 	and.w	r2, r3, #4
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d8:	f003 0310 	and.w	r3, r3, #16
 80077dc:	431a      	orrs	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077e2:	f003 0308 	and.w	r3, r3, #8
 80077e6:	431a      	orrs	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80077f0:	ea42 0103 	orr.w	r1, r2, r3
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	430a      	orrs	r2, r1
 8007800:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	69da      	ldr	r2, [r3, #28]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007810:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b088      	sub	sp, #32
 800782e:	af00      	add	r7, sp, #0
 8007830:	60f8      	str	r0, [r7, #12]
 8007832:	60b9      	str	r1, [r7, #8]
 8007834:	603b      	str	r3, [r7, #0]
 8007836:	4613      	mov	r3, r2
 8007838:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007844:	2b01      	cmp	r3, #1
 8007846:	d101      	bne.n	800784c <HAL_SPI_Transmit+0x22>
 8007848:	2302      	movs	r3, #2
 800784a:	e158      	b.n	8007afe <HAL_SPI_Transmit+0x2d4>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007854:	f7fb f94c 	bl	8002af0 <HAL_GetTick>
 8007858:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800785a:	88fb      	ldrh	r3, [r7, #6]
 800785c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b01      	cmp	r3, #1
 8007868:	d002      	beq.n	8007870 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800786a:	2302      	movs	r3, #2
 800786c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800786e:	e13d      	b.n	8007aec <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d002      	beq.n	800787c <HAL_SPI_Transmit+0x52>
 8007876:	88fb      	ldrh	r3, [r7, #6]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d102      	bne.n	8007882 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007880:	e134      	b.n	8007aec <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2203      	movs	r2, #3
 8007886:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	88fa      	ldrh	r2, [r7, #6]
 800789a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	88fa      	ldrh	r2, [r7, #6]
 80078a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078cc:	d10f      	bne.n	80078ee <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f8:	2b40      	cmp	r3, #64	; 0x40
 80078fa:	d007      	beq.n	800790c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800790a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007914:	d94b      	bls.n	80079ae <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d002      	beq.n	8007924 <HAL_SPI_Transmit+0xfa>
 800791e:	8afb      	ldrh	r3, [r7, #22]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d13e      	bne.n	80079a2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007928:	881a      	ldrh	r2, [r3, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007934:	1c9a      	adds	r2, r3, #2
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800793e:	b29b      	uxth	r3, r3
 8007940:	3b01      	subs	r3, #1
 8007942:	b29a      	uxth	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007948:	e02b      	b.n	80079a2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f003 0302 	and.w	r3, r3, #2
 8007954:	2b02      	cmp	r3, #2
 8007956:	d112      	bne.n	800797e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795c:	881a      	ldrh	r2, [r3, #0]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007968:	1c9a      	adds	r2, r3, #2
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007972:	b29b      	uxth	r3, r3
 8007974:	3b01      	subs	r3, #1
 8007976:	b29a      	uxth	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800797c:	e011      	b.n	80079a2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800797e:	f7fb f8b7 	bl	8002af0 <HAL_GetTick>
 8007982:	4602      	mov	r2, r0
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	429a      	cmp	r2, r3
 800798c:	d803      	bhi.n	8007996 <HAL_SPI_Transmit+0x16c>
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007994:	d102      	bne.n	800799c <HAL_SPI_Transmit+0x172>
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d102      	bne.n	80079a2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80079a0:	e0a4      	b.n	8007aec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1ce      	bne.n	800794a <HAL_SPI_Transmit+0x120>
 80079ac:	e07c      	b.n	8007aa8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d002      	beq.n	80079bc <HAL_SPI_Transmit+0x192>
 80079b6:	8afb      	ldrh	r3, [r7, #22]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d170      	bne.n	8007a9e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d912      	bls.n	80079ec <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ca:	881a      	ldrh	r2, [r3, #0]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d6:	1c9a      	adds	r2, r3, #2
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	3b02      	subs	r3, #2
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80079ea:	e058      	b.n	8007a9e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	330c      	adds	r3, #12
 80079f6:	7812      	ldrb	r2, [r2, #0]
 80079f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fe:	1c5a      	adds	r2, r3, #1
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007a12:	e044      	b.n	8007a9e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f003 0302 	and.w	r3, r3, #2
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d12b      	bne.n	8007a7a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d912      	bls.n	8007a52 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a30:	881a      	ldrh	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3c:	1c9a      	adds	r2, r3, #2
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	3b02      	subs	r3, #2
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a50:	e025      	b.n	8007a9e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	330c      	adds	r3, #12
 8007a5c:	7812      	ldrb	r2, [r2, #0]
 8007a5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a64:	1c5a      	adds	r2, r3, #1
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	3b01      	subs	r3, #1
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a78:	e011      	b.n	8007a9e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a7a:	f7fb f839 	bl	8002af0 <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d803      	bhi.n	8007a92 <HAL_SPI_Transmit+0x268>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a90:	d102      	bne.n	8007a98 <HAL_SPI_Transmit+0x26e>
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d102      	bne.n	8007a9e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a9c:	e026      	b.n	8007aec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1b5      	bne.n	8007a14 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 f945 	bl	8007d3c <SPI_EndRxTxTransaction>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d002      	beq.n	8007abe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2220      	movs	r2, #32
 8007abc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10a      	bne.n	8007adc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	613b      	str	r3, [r7, #16]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	613b      	str	r3, [r7, #16]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	613b      	str	r3, [r7, #16]
 8007ada:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	77fb      	strb	r3, [r7, #31]
 8007ae8:	e000      	b.n	8007aec <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007aea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007afc:	7ffb      	ldrb	r3, [r7, #31]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3720      	adds	r7, #32
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
	...

08007b08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	603b      	str	r3, [r7, #0]
 8007b14:	4613      	mov	r3, r2
 8007b16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b18:	f7fa ffea 	bl	8002af0 <HAL_GetTick>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b20:	1a9b      	subs	r3, r3, r2
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	4413      	add	r3, r2
 8007b26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b28:	f7fa ffe2 	bl	8002af0 <HAL_GetTick>
 8007b2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b2e:	4b39      	ldr	r3, [pc, #228]	; (8007c14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	015b      	lsls	r3, r3, #5
 8007b34:	0d1b      	lsrs	r3, r3, #20
 8007b36:	69fa      	ldr	r2, [r7, #28]
 8007b38:	fb02 f303 	mul.w	r3, r2, r3
 8007b3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b3e:	e054      	b.n	8007bea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b46:	d050      	beq.n	8007bea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b48:	f7fa ffd2 	bl	8002af0 <HAL_GetTick>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	69fa      	ldr	r2, [r7, #28]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d902      	bls.n	8007b5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d13d      	bne.n	8007bda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b76:	d111      	bne.n	8007b9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b80:	d004      	beq.n	8007b8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b8a:	d107      	bne.n	8007b9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ba4:	d10f      	bne.n	8007bc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e017      	b.n	8007c0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	3b01      	subs	r3, #1
 8007be8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689a      	ldr	r2, [r3, #8]
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	bf0c      	ite	eq
 8007bfa:	2301      	moveq	r3, #1
 8007bfc:	2300      	movne	r3, #0
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	79fb      	ldrb	r3, [r7, #7]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d19b      	bne.n	8007b40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3720      	adds	r7, #32
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	20000000 	.word	0x20000000

08007c18 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b088      	sub	sp, #32
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
 8007c24:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007c26:	f7fa ff63 	bl	8002af0 <HAL_GetTick>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2e:	1a9b      	subs	r3, r3, r2
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	4413      	add	r3, r2
 8007c34:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c36:	f7fa ff5b 	bl	8002af0 <HAL_GetTick>
 8007c3a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007c3c:	4b3e      	ldr	r3, [pc, #248]	; (8007d38 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	4613      	mov	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4413      	add	r3, r2
 8007c46:	00da      	lsls	r2, r3, #3
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	0d1b      	lsrs	r3, r3, #20
 8007c4c:	69fa      	ldr	r2, [r7, #28]
 8007c4e:	fb02 f303 	mul.w	r3, r2, r3
 8007c52:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8007c54:	e062      	b.n	8007d1c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007c5c:	d109      	bne.n	8007c72 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d106      	bne.n	8007c72 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	330c      	adds	r3, #12
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8007c70:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c78:	d050      	beq.n	8007d1c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c7a:	f7fa ff39 	bl	8002af0 <HAL_GetTick>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	69fa      	ldr	r2, [r7, #28]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d902      	bls.n	8007c90 <SPI_WaitFifoStateUntilTimeout+0x78>
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d13d      	bne.n	8007d0c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	685a      	ldr	r2, [r3, #4]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c9e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ca8:	d111      	bne.n	8007cce <SPI_WaitFifoStateUntilTimeout+0xb6>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cb2:	d004      	beq.n	8007cbe <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cbc:	d107      	bne.n	8007cce <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ccc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cd6:	d10f      	bne.n	8007cf8 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ce6:	601a      	str	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cf6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e010      	b.n	8007d2e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8007d12:	2300      	movs	r3, #0
 8007d14:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	689a      	ldr	r2, [r3, #8]
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	4013      	ands	r3, r2
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d194      	bne.n	8007c56 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3720      	adds	r7, #32
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	20000000 	.word	0x20000000

08007d3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af02      	add	r7, sp, #8
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f7ff ff5f 	bl	8007c18 <SPI_WaitFifoStateUntilTimeout>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d007      	beq.n	8007d70 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d64:	f043 0220 	orr.w	r2, r3, #32
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e027      	b.n	8007dc0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2200      	movs	r2, #0
 8007d78:	2180      	movs	r1, #128	; 0x80
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f7ff fec4 	bl	8007b08 <SPI_WaitFlagStateUntilTimeout>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d007      	beq.n	8007d96 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d8a:	f043 0220 	orr.w	r2, r3, #32
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e014      	b.n	8007dc0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	9300      	str	r3, [sp, #0]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f7ff ff38 	bl	8007c18 <SPI_WaitFifoStateUntilTimeout>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d007      	beq.n	8007dbe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007db2:	f043 0220 	orr.w	r2, r3, #32
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e000      	b.n	8007dc0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e049      	b.n	8007e6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d106      	bne.n	8007df4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7fa fa2e 	bl	8002250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2202      	movs	r2, #2
 8007df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3304      	adds	r3, #4
 8007e04:	4619      	mov	r1, r3
 8007e06:	4610      	mov	r0, r2
 8007e08:	f000 fe30 	bl	8008a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
	...

08007e78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d001      	beq.n	8007e90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e054      	b.n	8007f3a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2202      	movs	r2, #2
 8007e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68da      	ldr	r2, [r3, #12]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f042 0201 	orr.w	r2, r2, #1
 8007ea6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a26      	ldr	r2, [pc, #152]	; (8007f48 <HAL_TIM_Base_Start_IT+0xd0>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d022      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eba:	d01d      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a22      	ldr	r2, [pc, #136]	; (8007f4c <HAL_TIM_Base_Start_IT+0xd4>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d018      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a21      	ldr	r2, [pc, #132]	; (8007f50 <HAL_TIM_Base_Start_IT+0xd8>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d013      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a1f      	ldr	r2, [pc, #124]	; (8007f54 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d00e      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a1e      	ldr	r2, [pc, #120]	; (8007f58 <HAL_TIM_Base_Start_IT+0xe0>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d009      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a1c      	ldr	r2, [pc, #112]	; (8007f5c <HAL_TIM_Base_Start_IT+0xe4>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d004      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a1b      	ldr	r2, [pc, #108]	; (8007f60 <HAL_TIM_Base_Start_IT+0xe8>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d115      	bne.n	8007f24 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	689a      	ldr	r2, [r3, #8]
 8007efe:	4b19      	ldr	r3, [pc, #100]	; (8007f64 <HAL_TIM_Base_Start_IT+0xec>)
 8007f00:	4013      	ands	r3, r2
 8007f02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2b06      	cmp	r3, #6
 8007f08:	d015      	beq.n	8007f36 <HAL_TIM_Base_Start_IT+0xbe>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f10:	d011      	beq.n	8007f36 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f042 0201 	orr.w	r2, r2, #1
 8007f20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f22:	e008      	b.n	8007f36 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f042 0201 	orr.w	r2, r2, #1
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	e000      	b.n	8007f38 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	40010000 	.word	0x40010000
 8007f4c:	40000400 	.word	0x40000400
 8007f50:	40000800 	.word	0x40000800
 8007f54:	40000c00 	.word	0x40000c00
 8007f58:	40010400 	.word	0x40010400
 8007f5c:	40014000 	.word	0x40014000
 8007f60:	40001800 	.word	0x40001800
 8007f64:	00010007 	.word	0x00010007

08007f68 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e049      	b.n	800800e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d106      	bne.n	8007f94 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f841 	bl	8008016 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2202      	movs	r2, #2
 8007f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	f000 fd60 	bl	8008a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008016:	b480      	push	{r7}
 8008018:	b083      	sub	sp, #12
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800801e:	bf00      	nop
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
	...

0800802c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d109      	bne.n	8008050 <HAL_TIM_OC_Start_IT+0x24>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008042:	b2db      	uxtb	r3, r3
 8008044:	2b01      	cmp	r3, #1
 8008046:	bf14      	ite	ne
 8008048:	2301      	movne	r3, #1
 800804a:	2300      	moveq	r3, #0
 800804c:	b2db      	uxtb	r3, r3
 800804e:	e03c      	b.n	80080ca <HAL_TIM_OC_Start_IT+0x9e>
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	2b04      	cmp	r3, #4
 8008054:	d109      	bne.n	800806a <HAL_TIM_OC_Start_IT+0x3e>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b01      	cmp	r3, #1
 8008060:	bf14      	ite	ne
 8008062:	2301      	movne	r3, #1
 8008064:	2300      	moveq	r3, #0
 8008066:	b2db      	uxtb	r3, r3
 8008068:	e02f      	b.n	80080ca <HAL_TIM_OC_Start_IT+0x9e>
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	2b08      	cmp	r3, #8
 800806e:	d109      	bne.n	8008084 <HAL_TIM_OC_Start_IT+0x58>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b01      	cmp	r3, #1
 800807a:	bf14      	ite	ne
 800807c:	2301      	movne	r3, #1
 800807e:	2300      	moveq	r3, #0
 8008080:	b2db      	uxtb	r3, r3
 8008082:	e022      	b.n	80080ca <HAL_TIM_OC_Start_IT+0x9e>
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	2b0c      	cmp	r3, #12
 8008088:	d109      	bne.n	800809e <HAL_TIM_OC_Start_IT+0x72>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b01      	cmp	r3, #1
 8008094:	bf14      	ite	ne
 8008096:	2301      	movne	r3, #1
 8008098:	2300      	moveq	r3, #0
 800809a:	b2db      	uxtb	r3, r3
 800809c:	e015      	b.n	80080ca <HAL_TIM_OC_Start_IT+0x9e>
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b10      	cmp	r3, #16
 80080a2:	d109      	bne.n	80080b8 <HAL_TIM_OC_Start_IT+0x8c>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	bf14      	ite	ne
 80080b0:	2301      	movne	r3, #1
 80080b2:	2300      	moveq	r3, #0
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	e008      	b.n	80080ca <HAL_TIM_OC_Start_IT+0x9e>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	bf14      	ite	ne
 80080c4:	2301      	movne	r3, #1
 80080c6:	2300      	moveq	r3, #0
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d001      	beq.n	80080d2 <HAL_TIM_OC_Start_IT+0xa6>
  {
    return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e0d8      	b.n	8008284 <HAL_TIM_OC_Start_IT+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d104      	bne.n	80080e2 <HAL_TIM_OC_Start_IT+0xb6>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2202      	movs	r2, #2
 80080dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080e0:	e023      	b.n	800812a <HAL_TIM_OC_Start_IT+0xfe>
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b04      	cmp	r3, #4
 80080e6:	d104      	bne.n	80080f2 <HAL_TIM_OC_Start_IT+0xc6>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2202      	movs	r2, #2
 80080ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080f0:	e01b      	b.n	800812a <HAL_TIM_OC_Start_IT+0xfe>
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	2b08      	cmp	r3, #8
 80080f6:	d104      	bne.n	8008102 <HAL_TIM_OC_Start_IT+0xd6>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2202      	movs	r2, #2
 80080fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008100:	e013      	b.n	800812a <HAL_TIM_OC_Start_IT+0xfe>
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b0c      	cmp	r3, #12
 8008106:	d104      	bne.n	8008112 <HAL_TIM_OC_Start_IT+0xe6>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2202      	movs	r2, #2
 800810c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008110:	e00b      	b.n	800812a <HAL_TIM_OC_Start_IT+0xfe>
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	2b10      	cmp	r3, #16
 8008116:	d104      	bne.n	8008122 <HAL_TIM_OC_Start_IT+0xf6>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2202      	movs	r2, #2
 800811c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008120:	e003      	b.n	800812a <HAL_TIM_OC_Start_IT+0xfe>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2202      	movs	r2, #2
 8008126:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	2b0c      	cmp	r3, #12
 800812e:	d841      	bhi.n	80081b4 <HAL_TIM_OC_Start_IT+0x188>
 8008130:	a201      	add	r2, pc, #4	; (adr r2, 8008138 <HAL_TIM_OC_Start_IT+0x10c>)
 8008132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008136:	bf00      	nop
 8008138:	0800816d 	.word	0x0800816d
 800813c:	080081b5 	.word	0x080081b5
 8008140:	080081b5 	.word	0x080081b5
 8008144:	080081b5 	.word	0x080081b5
 8008148:	0800817f 	.word	0x0800817f
 800814c:	080081b5 	.word	0x080081b5
 8008150:	080081b5 	.word	0x080081b5
 8008154:	080081b5 	.word	0x080081b5
 8008158:	08008191 	.word	0x08008191
 800815c:	080081b5 	.word	0x080081b5
 8008160:	080081b5 	.word	0x080081b5
 8008164:	080081b5 	.word	0x080081b5
 8008168:	080081a3 	.word	0x080081a3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f042 0202 	orr.w	r2, r2, #2
 800817a:	60da      	str	r2, [r3, #12]
      break;
 800817c:	e01b      	b.n	80081b6 <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68da      	ldr	r2, [r3, #12]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f042 0204 	orr.w	r2, r2, #4
 800818c:	60da      	str	r2, [r3, #12]
      break;
 800818e:	e012      	b.n	80081b6 <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68da      	ldr	r2, [r3, #12]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f042 0208 	orr.w	r2, r2, #8
 800819e:	60da      	str	r2, [r3, #12]
      break;
 80081a0:	e009      	b.n	80081b6 <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68da      	ldr	r2, [r3, #12]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f042 0210 	orr.w	r2, r2, #16
 80081b0:	60da      	str	r2, [r3, #12]
      break;
 80081b2:	e000      	b.n	80081b6 <HAL_TIM_OC_Start_IT+0x18a>
    }

    default:
      break;
 80081b4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2201      	movs	r2, #1
 80081bc:	6839      	ldr	r1, [r7, #0]
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 ffec 	bl	800919c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a30      	ldr	r2, [pc, #192]	; (800828c <HAL_TIM_OC_Start_IT+0x260>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d004      	beq.n	80081d8 <HAL_TIM_OC_Start_IT+0x1ac>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a2f      	ldr	r2, [pc, #188]	; (8008290 <HAL_TIM_OC_Start_IT+0x264>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d101      	bne.n	80081dc <HAL_TIM_OC_Start_IT+0x1b0>
 80081d8:	2301      	movs	r3, #1
 80081da:	e000      	b.n	80081de <HAL_TIM_OC_Start_IT+0x1b2>
 80081dc:	2300      	movs	r3, #0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d007      	beq.n	80081f2 <HAL_TIM_OC_Start_IT+0x1c6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a25      	ldr	r2, [pc, #148]	; (800828c <HAL_TIM_OC_Start_IT+0x260>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d022      	beq.n	8008242 <HAL_TIM_OC_Start_IT+0x216>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008204:	d01d      	beq.n	8008242 <HAL_TIM_OC_Start_IT+0x216>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a22      	ldr	r2, [pc, #136]	; (8008294 <HAL_TIM_OC_Start_IT+0x268>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d018      	beq.n	8008242 <HAL_TIM_OC_Start_IT+0x216>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a20      	ldr	r2, [pc, #128]	; (8008298 <HAL_TIM_OC_Start_IT+0x26c>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d013      	beq.n	8008242 <HAL_TIM_OC_Start_IT+0x216>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a1f      	ldr	r2, [pc, #124]	; (800829c <HAL_TIM_OC_Start_IT+0x270>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d00e      	beq.n	8008242 <HAL_TIM_OC_Start_IT+0x216>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a19      	ldr	r2, [pc, #100]	; (8008290 <HAL_TIM_OC_Start_IT+0x264>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d009      	beq.n	8008242 <HAL_TIM_OC_Start_IT+0x216>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a1b      	ldr	r2, [pc, #108]	; (80082a0 <HAL_TIM_OC_Start_IT+0x274>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d004      	beq.n	8008242 <HAL_TIM_OC_Start_IT+0x216>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a19      	ldr	r2, [pc, #100]	; (80082a4 <HAL_TIM_OC_Start_IT+0x278>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d115      	bne.n	800826e <HAL_TIM_OC_Start_IT+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	689a      	ldr	r2, [r3, #8]
 8008248:	4b17      	ldr	r3, [pc, #92]	; (80082a8 <HAL_TIM_OC_Start_IT+0x27c>)
 800824a:	4013      	ands	r3, r2
 800824c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2b06      	cmp	r3, #6
 8008252:	d015      	beq.n	8008280 <HAL_TIM_OC_Start_IT+0x254>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800825a:	d011      	beq.n	8008280 <HAL_TIM_OC_Start_IT+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f042 0201 	orr.w	r2, r2, #1
 800826a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800826c:	e008      	b.n	8008280 <HAL_TIM_OC_Start_IT+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f042 0201 	orr.w	r2, r2, #1
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	e000      	b.n	8008282 <HAL_TIM_OC_Start_IT+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008280:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	40010000 	.word	0x40010000
 8008290:	40010400 	.word	0x40010400
 8008294:	40000400 	.word	0x40000400
 8008298:	40000800 	.word	0x40000800
 800829c:	40000c00 	.word	0x40000c00
 80082a0:	40014000 	.word	0x40014000
 80082a4:	40001800 	.word	0x40001800
 80082a8:	00010007 	.word	0x00010007

080082ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d101      	bne.n	80082be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e049      	b.n	8008352 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d106      	bne.n	80082d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7fa f830 	bl	8002338 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2202      	movs	r2, #2
 80082dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	3304      	adds	r3, #4
 80082e8:	4619      	mov	r1, r3
 80082ea:	4610      	mov	r0, r2
 80082ec:	f000 fbbe 	bl	8008a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3708      	adds	r7, #8
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b082      	sub	sp, #8
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	f003 0302 	and.w	r3, r3, #2
 800836c:	2b02      	cmp	r3, #2
 800836e:	d122      	bne.n	80083b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	f003 0302 	and.w	r3, r3, #2
 800837a:	2b02      	cmp	r3, #2
 800837c:	d11b      	bne.n	80083b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f06f 0202 	mvn.w	r2, #2
 8008386:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	f003 0303 	and.w	r3, r3, #3
 8008398:	2b00      	cmp	r3, #0
 800839a:	d003      	beq.n	80083a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fb47 	bl	8008a30 <HAL_TIM_IC_CaptureCallback>
 80083a2:	e005      	b.n	80083b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f7f8 f949 	bl	800063c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fb4a 	bl	8008a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	f003 0304 	and.w	r3, r3, #4
 80083c0:	2b04      	cmp	r3, #4
 80083c2:	d122      	bne.n	800840a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	f003 0304 	and.w	r3, r3, #4
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	d11b      	bne.n	800840a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f06f 0204 	mvn.w	r2, #4
 80083da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2202      	movs	r2, #2
 80083e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d003      	beq.n	80083f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fb1d 	bl	8008a30 <HAL_TIM_IC_CaptureCallback>
 80083f6:	e005      	b.n	8008404 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7f8 f91f 	bl	800063c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fb20 	bl	8008a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	f003 0308 	and.w	r3, r3, #8
 8008414:	2b08      	cmp	r3, #8
 8008416:	d122      	bne.n	800845e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	f003 0308 	and.w	r3, r3, #8
 8008422:	2b08      	cmp	r3, #8
 8008424:	d11b      	bne.n	800845e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f06f 0208 	mvn.w	r2, #8
 800842e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2204      	movs	r2, #4
 8008434:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	69db      	ldr	r3, [r3, #28]
 800843c:	f003 0303 	and.w	r3, r3, #3
 8008440:	2b00      	cmp	r3, #0
 8008442:	d003      	beq.n	800844c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 faf3 	bl	8008a30 <HAL_TIM_IC_CaptureCallback>
 800844a:	e005      	b.n	8008458 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7f8 f8f5 	bl	800063c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 faf6 	bl	8008a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	f003 0310 	and.w	r3, r3, #16
 8008468:	2b10      	cmp	r3, #16
 800846a:	d122      	bne.n	80084b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	f003 0310 	and.w	r3, r3, #16
 8008476:	2b10      	cmp	r3, #16
 8008478:	d11b      	bne.n	80084b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f06f 0210 	mvn.w	r2, #16
 8008482:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2208      	movs	r2, #8
 8008488:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	69db      	ldr	r3, [r3, #28]
 8008490:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008494:	2b00      	cmp	r3, #0
 8008496:	d003      	beq.n	80084a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 fac9 	bl	8008a30 <HAL_TIM_IC_CaptureCallback>
 800849e:	e005      	b.n	80084ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f7f8 f8cb 	bl	800063c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 facc 	bl	8008a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	f003 0301 	and.w	r3, r3, #1
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d10e      	bne.n	80084de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d107      	bne.n	80084de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f06f 0201 	mvn.w	r2, #1
 80084d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f7f9 fb2b 	bl	8001b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084e8:	2b80      	cmp	r3, #128	; 0x80
 80084ea:	d10e      	bne.n	800850a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084f6:	2b80      	cmp	r3, #128	; 0x80
 80084f8:	d107      	bne.n	800850a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 ff85 	bl	8009414 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008518:	d10e      	bne.n	8008538 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008524:	2b80      	cmp	r3, #128	; 0x80
 8008526:	d107      	bne.n	8008538 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 ff78 	bl	8009428 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008542:	2b40      	cmp	r3, #64	; 0x40
 8008544:	d10e      	bne.n	8008564 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008550:	2b40      	cmp	r3, #64	; 0x40
 8008552:	d107      	bne.n	8008564 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800855c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fa7a 	bl	8008a58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	f003 0320 	and.w	r3, r3, #32
 800856e:	2b20      	cmp	r3, #32
 8008570:	d10e      	bne.n	8008590 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	f003 0320 	and.w	r3, r3, #32
 800857c:	2b20      	cmp	r3, #32
 800857e:	d107      	bne.n	8008590 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f06f 0220 	mvn.w	r2, #32
 8008588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 ff38 	bl	8009400 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008590:	bf00      	nop
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d101      	bne.n	80085b2 <HAL_TIM_OC_ConfigChannel+0x1a>
 80085ae:	2302      	movs	r3, #2
 80085b0:	e064      	b.n	800867c <HAL_TIM_OC_ConfigChannel+0xe4>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2b14      	cmp	r3, #20
 80085be:	d857      	bhi.n	8008670 <HAL_TIM_OC_ConfigChannel+0xd8>
 80085c0:	a201      	add	r2, pc, #4	; (adr r2, 80085c8 <HAL_TIM_OC_ConfigChannel+0x30>)
 80085c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c6:	bf00      	nop
 80085c8:	0800861d 	.word	0x0800861d
 80085cc:	08008671 	.word	0x08008671
 80085d0:	08008671 	.word	0x08008671
 80085d4:	08008671 	.word	0x08008671
 80085d8:	0800862b 	.word	0x0800862b
 80085dc:	08008671 	.word	0x08008671
 80085e0:	08008671 	.word	0x08008671
 80085e4:	08008671 	.word	0x08008671
 80085e8:	08008639 	.word	0x08008639
 80085ec:	08008671 	.word	0x08008671
 80085f0:	08008671 	.word	0x08008671
 80085f4:	08008671 	.word	0x08008671
 80085f8:	08008647 	.word	0x08008647
 80085fc:	08008671 	.word	0x08008671
 8008600:	08008671 	.word	0x08008671
 8008604:	08008671 	.word	0x08008671
 8008608:	08008655 	.word	0x08008655
 800860c:	08008671 	.word	0x08008671
 8008610:	08008671 	.word	0x08008671
 8008614:	08008671 	.word	0x08008671
 8008618:	08008663 	.word	0x08008663
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68b9      	ldr	r1, [r7, #8]
 8008622:	4618      	mov	r0, r3
 8008624:	f000 fac2 	bl	8008bac <TIM_OC1_SetConfig>
      break;
 8008628:	e023      	b.n	8008672 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68b9      	ldr	r1, [r7, #8]
 8008630:	4618      	mov	r0, r3
 8008632:	f000 fb2d 	bl	8008c90 <TIM_OC2_SetConfig>
      break;
 8008636:	e01c      	b.n	8008672 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68b9      	ldr	r1, [r7, #8]
 800863e:	4618      	mov	r0, r3
 8008640:	f000 fb9e 	bl	8008d80 <TIM_OC3_SetConfig>
      break;
 8008644:	e015      	b.n	8008672 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68b9      	ldr	r1, [r7, #8]
 800864c:	4618      	mov	r0, r3
 800864e:	f000 fc0d 	bl	8008e6c <TIM_OC4_SetConfig>
      break;
 8008652:	e00e      	b.n	8008672 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68b9      	ldr	r1, [r7, #8]
 800865a:	4618      	mov	r0, r3
 800865c:	f000 fc5e 	bl	8008f1c <TIM_OC5_SetConfig>
      break;
 8008660:	e007      	b.n	8008672 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68b9      	ldr	r1, [r7, #8]
 8008668:	4618      	mov	r0, r3
 800866a:	f000 fca9 	bl	8008fc0 <TIM_OC6_SetConfig>
      break;
 800866e:	e000      	b.n	8008672 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8008670:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008696:	2b01      	cmp	r3, #1
 8008698:	d101      	bne.n	800869e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800869a:	2302      	movs	r3, #2
 800869c:	e0fd      	b.n	800889a <HAL_TIM_PWM_ConfigChannel+0x216>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2201      	movs	r2, #1
 80086a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2b14      	cmp	r3, #20
 80086aa:	f200 80f0 	bhi.w	800888e <HAL_TIM_PWM_ConfigChannel+0x20a>
 80086ae:	a201      	add	r2, pc, #4	; (adr r2, 80086b4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80086b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b4:	08008709 	.word	0x08008709
 80086b8:	0800888f 	.word	0x0800888f
 80086bc:	0800888f 	.word	0x0800888f
 80086c0:	0800888f 	.word	0x0800888f
 80086c4:	08008749 	.word	0x08008749
 80086c8:	0800888f 	.word	0x0800888f
 80086cc:	0800888f 	.word	0x0800888f
 80086d0:	0800888f 	.word	0x0800888f
 80086d4:	0800878b 	.word	0x0800878b
 80086d8:	0800888f 	.word	0x0800888f
 80086dc:	0800888f 	.word	0x0800888f
 80086e0:	0800888f 	.word	0x0800888f
 80086e4:	080087cb 	.word	0x080087cb
 80086e8:	0800888f 	.word	0x0800888f
 80086ec:	0800888f 	.word	0x0800888f
 80086f0:	0800888f 	.word	0x0800888f
 80086f4:	0800880d 	.word	0x0800880d
 80086f8:	0800888f 	.word	0x0800888f
 80086fc:	0800888f 	.word	0x0800888f
 8008700:	0800888f 	.word	0x0800888f
 8008704:	0800884d 	.word	0x0800884d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68b9      	ldr	r1, [r7, #8]
 800870e:	4618      	mov	r0, r3
 8008710:	f000 fa4c 	bl	8008bac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	699a      	ldr	r2, [r3, #24]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f042 0208 	orr.w	r2, r2, #8
 8008722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	699a      	ldr	r2, [r3, #24]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f022 0204 	bic.w	r2, r2, #4
 8008732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	6999      	ldr	r1, [r3, #24]
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	691a      	ldr	r2, [r3, #16]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	430a      	orrs	r2, r1
 8008744:	619a      	str	r2, [r3, #24]
      break;
 8008746:	e0a3      	b.n	8008890 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68b9      	ldr	r1, [r7, #8]
 800874e:	4618      	mov	r0, r3
 8008750:	f000 fa9e 	bl	8008c90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	699a      	ldr	r2, [r3, #24]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	699a      	ldr	r2, [r3, #24]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6999      	ldr	r1, [r3, #24]
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	021a      	lsls	r2, r3, #8
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	430a      	orrs	r2, r1
 8008786:	619a      	str	r2, [r3, #24]
      break;
 8008788:	e082      	b.n	8008890 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68b9      	ldr	r1, [r7, #8]
 8008790:	4618      	mov	r0, r3
 8008792:	f000 faf5 	bl	8008d80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	69da      	ldr	r2, [r3, #28]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f042 0208 	orr.w	r2, r2, #8
 80087a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	69da      	ldr	r2, [r3, #28]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f022 0204 	bic.w	r2, r2, #4
 80087b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	69d9      	ldr	r1, [r3, #28]
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	691a      	ldr	r2, [r3, #16]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	430a      	orrs	r2, r1
 80087c6:	61da      	str	r2, [r3, #28]
      break;
 80087c8:	e062      	b.n	8008890 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68b9      	ldr	r1, [r7, #8]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f000 fb4b 	bl	8008e6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	69da      	ldr	r2, [r3, #28]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	69da      	ldr	r2, [r3, #28]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	69d9      	ldr	r1, [r3, #28]
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	021a      	lsls	r2, r3, #8
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	430a      	orrs	r2, r1
 8008808:	61da      	str	r2, [r3, #28]
      break;
 800880a:	e041      	b.n	8008890 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68b9      	ldr	r1, [r7, #8]
 8008812:	4618      	mov	r0, r3
 8008814:	f000 fb82 	bl	8008f1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f042 0208 	orr.w	r2, r2, #8
 8008826:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f022 0204 	bic.w	r2, r2, #4
 8008836:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	691a      	ldr	r2, [r3, #16]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	430a      	orrs	r2, r1
 8008848:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800884a:	e021      	b.n	8008890 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68b9      	ldr	r1, [r7, #8]
 8008852:	4618      	mov	r0, r3
 8008854:	f000 fbb4 	bl	8008fc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008866:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008876:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	021a      	lsls	r2, r3, #8
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	430a      	orrs	r2, r1
 800888a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800888c:	e000      	b.n	8008890 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800888e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop

080088a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d101      	bne.n	80088bc <HAL_TIM_ConfigClockSource+0x18>
 80088b8:	2302      	movs	r3, #2
 80088ba:	e0b3      	b.n	8008a24 <HAL_TIM_ConfigClockSource+0x180>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2202      	movs	r2, #2
 80088c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	4b55      	ldr	r3, [pc, #340]	; (8008a2c <HAL_TIM_ConfigClockSource+0x188>)
 80088d8:	4013      	ands	r3, r2
 80088da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088f4:	d03e      	beq.n	8008974 <HAL_TIM_ConfigClockSource+0xd0>
 80088f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088fa:	f200 8087 	bhi.w	8008a0c <HAL_TIM_ConfigClockSource+0x168>
 80088fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008902:	f000 8085 	beq.w	8008a10 <HAL_TIM_ConfigClockSource+0x16c>
 8008906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800890a:	d87f      	bhi.n	8008a0c <HAL_TIM_ConfigClockSource+0x168>
 800890c:	2b70      	cmp	r3, #112	; 0x70
 800890e:	d01a      	beq.n	8008946 <HAL_TIM_ConfigClockSource+0xa2>
 8008910:	2b70      	cmp	r3, #112	; 0x70
 8008912:	d87b      	bhi.n	8008a0c <HAL_TIM_ConfigClockSource+0x168>
 8008914:	2b60      	cmp	r3, #96	; 0x60
 8008916:	d050      	beq.n	80089ba <HAL_TIM_ConfigClockSource+0x116>
 8008918:	2b60      	cmp	r3, #96	; 0x60
 800891a:	d877      	bhi.n	8008a0c <HAL_TIM_ConfigClockSource+0x168>
 800891c:	2b50      	cmp	r3, #80	; 0x50
 800891e:	d03c      	beq.n	800899a <HAL_TIM_ConfigClockSource+0xf6>
 8008920:	2b50      	cmp	r3, #80	; 0x50
 8008922:	d873      	bhi.n	8008a0c <HAL_TIM_ConfigClockSource+0x168>
 8008924:	2b40      	cmp	r3, #64	; 0x40
 8008926:	d058      	beq.n	80089da <HAL_TIM_ConfigClockSource+0x136>
 8008928:	2b40      	cmp	r3, #64	; 0x40
 800892a:	d86f      	bhi.n	8008a0c <HAL_TIM_ConfigClockSource+0x168>
 800892c:	2b30      	cmp	r3, #48	; 0x30
 800892e:	d064      	beq.n	80089fa <HAL_TIM_ConfigClockSource+0x156>
 8008930:	2b30      	cmp	r3, #48	; 0x30
 8008932:	d86b      	bhi.n	8008a0c <HAL_TIM_ConfigClockSource+0x168>
 8008934:	2b20      	cmp	r3, #32
 8008936:	d060      	beq.n	80089fa <HAL_TIM_ConfigClockSource+0x156>
 8008938:	2b20      	cmp	r3, #32
 800893a:	d867      	bhi.n	8008a0c <HAL_TIM_ConfigClockSource+0x168>
 800893c:	2b00      	cmp	r3, #0
 800893e:	d05c      	beq.n	80089fa <HAL_TIM_ConfigClockSource+0x156>
 8008940:	2b10      	cmp	r3, #16
 8008942:	d05a      	beq.n	80089fa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008944:	e062      	b.n	8008a0c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6818      	ldr	r0, [r3, #0]
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	6899      	ldr	r1, [r3, #8]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	685a      	ldr	r2, [r3, #4]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	f000 fc01 	bl	800915c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008968:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	609a      	str	r2, [r3, #8]
      break;
 8008972:	e04e      	b.n	8008a12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6818      	ldr	r0, [r3, #0]
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	6899      	ldr	r1, [r3, #8]
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	685a      	ldr	r2, [r3, #4]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	f000 fbea 	bl	800915c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	689a      	ldr	r2, [r3, #8]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008996:	609a      	str	r2, [r3, #8]
      break;
 8008998:	e03b      	b.n	8008a12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6818      	ldr	r0, [r3, #0]
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	6859      	ldr	r1, [r3, #4]
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	461a      	mov	r2, r3
 80089a8:	f000 fb5e 	bl	8009068 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2150      	movs	r1, #80	; 0x50
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 fbb7 	bl	8009126 <TIM_ITRx_SetConfig>
      break;
 80089b8:	e02b      	b.n	8008a12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6818      	ldr	r0, [r3, #0]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	6859      	ldr	r1, [r3, #4]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	461a      	mov	r2, r3
 80089c8:	f000 fb7d 	bl	80090c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2160      	movs	r1, #96	; 0x60
 80089d2:	4618      	mov	r0, r3
 80089d4:	f000 fba7 	bl	8009126 <TIM_ITRx_SetConfig>
      break;
 80089d8:	e01b      	b.n	8008a12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6818      	ldr	r0, [r3, #0]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	6859      	ldr	r1, [r3, #4]
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	461a      	mov	r2, r3
 80089e8:	f000 fb3e 	bl	8009068 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2140      	movs	r1, #64	; 0x40
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 fb97 	bl	8009126 <TIM_ITRx_SetConfig>
      break;
 80089f8:	e00b      	b.n	8008a12 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4619      	mov	r1, r3
 8008a04:	4610      	mov	r0, r2
 8008a06:	f000 fb8e 	bl	8009126 <TIM_ITRx_SetConfig>
        break;
 8008a0a:	e002      	b.n	8008a12 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008a0c:	bf00      	nop
 8008a0e:	e000      	b.n	8008a12 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008a10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	fffeff88 	.word	0xfffeff88

08008a30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a4c:	bf00      	nop
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a60:	bf00      	nop
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a40      	ldr	r2, [pc, #256]	; (8008b80 <TIM_Base_SetConfig+0x114>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d013      	beq.n	8008aac <TIM_Base_SetConfig+0x40>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a8a:	d00f      	beq.n	8008aac <TIM_Base_SetConfig+0x40>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a3d      	ldr	r2, [pc, #244]	; (8008b84 <TIM_Base_SetConfig+0x118>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d00b      	beq.n	8008aac <TIM_Base_SetConfig+0x40>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a3c      	ldr	r2, [pc, #240]	; (8008b88 <TIM_Base_SetConfig+0x11c>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d007      	beq.n	8008aac <TIM_Base_SetConfig+0x40>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a3b      	ldr	r2, [pc, #236]	; (8008b8c <TIM_Base_SetConfig+0x120>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d003      	beq.n	8008aac <TIM_Base_SetConfig+0x40>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a3a      	ldr	r2, [pc, #232]	; (8008b90 <TIM_Base_SetConfig+0x124>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d108      	bne.n	8008abe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a2f      	ldr	r2, [pc, #188]	; (8008b80 <TIM_Base_SetConfig+0x114>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d02b      	beq.n	8008b1e <TIM_Base_SetConfig+0xb2>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008acc:	d027      	beq.n	8008b1e <TIM_Base_SetConfig+0xb2>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a2c      	ldr	r2, [pc, #176]	; (8008b84 <TIM_Base_SetConfig+0x118>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d023      	beq.n	8008b1e <TIM_Base_SetConfig+0xb2>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a2b      	ldr	r2, [pc, #172]	; (8008b88 <TIM_Base_SetConfig+0x11c>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d01f      	beq.n	8008b1e <TIM_Base_SetConfig+0xb2>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a2a      	ldr	r2, [pc, #168]	; (8008b8c <TIM_Base_SetConfig+0x120>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d01b      	beq.n	8008b1e <TIM_Base_SetConfig+0xb2>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a29      	ldr	r2, [pc, #164]	; (8008b90 <TIM_Base_SetConfig+0x124>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d017      	beq.n	8008b1e <TIM_Base_SetConfig+0xb2>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a28      	ldr	r2, [pc, #160]	; (8008b94 <TIM_Base_SetConfig+0x128>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d013      	beq.n	8008b1e <TIM_Base_SetConfig+0xb2>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a27      	ldr	r2, [pc, #156]	; (8008b98 <TIM_Base_SetConfig+0x12c>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d00f      	beq.n	8008b1e <TIM_Base_SetConfig+0xb2>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a26      	ldr	r2, [pc, #152]	; (8008b9c <TIM_Base_SetConfig+0x130>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d00b      	beq.n	8008b1e <TIM_Base_SetConfig+0xb2>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a25      	ldr	r2, [pc, #148]	; (8008ba0 <TIM_Base_SetConfig+0x134>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d007      	beq.n	8008b1e <TIM_Base_SetConfig+0xb2>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a24      	ldr	r2, [pc, #144]	; (8008ba4 <TIM_Base_SetConfig+0x138>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d003      	beq.n	8008b1e <TIM_Base_SetConfig+0xb2>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a23      	ldr	r2, [pc, #140]	; (8008ba8 <TIM_Base_SetConfig+0x13c>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d108      	bne.n	8008b30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	695b      	ldr	r3, [r3, #20]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	689a      	ldr	r2, [r3, #8]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a0a      	ldr	r2, [pc, #40]	; (8008b80 <TIM_Base_SetConfig+0x114>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d003      	beq.n	8008b64 <TIM_Base_SetConfig+0xf8>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a0c      	ldr	r2, [pc, #48]	; (8008b90 <TIM_Base_SetConfig+0x124>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d103      	bne.n	8008b6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	691a      	ldr	r2, [r3, #16]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	615a      	str	r2, [r3, #20]
}
 8008b72:	bf00      	nop
 8008b74:	3714      	adds	r7, #20
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	40010000 	.word	0x40010000
 8008b84:	40000400 	.word	0x40000400
 8008b88:	40000800 	.word	0x40000800
 8008b8c:	40000c00 	.word	0x40000c00
 8008b90:	40010400 	.word	0x40010400
 8008b94:	40014000 	.word	0x40014000
 8008b98:	40014400 	.word	0x40014400
 8008b9c:	40014800 	.word	0x40014800
 8008ba0:	40001800 	.word	0x40001800
 8008ba4:	40001c00 	.word	0x40001c00
 8008ba8:	40002000 	.word	0x40002000

08008bac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b087      	sub	sp, #28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	f023 0201 	bic.w	r2, r3, #1
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a1b      	ldr	r3, [r3, #32]
 8008bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	4b2b      	ldr	r3, [pc, #172]	; (8008c84 <TIM_OC1_SetConfig+0xd8>)
 8008bd8:	4013      	ands	r3, r2
 8008bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f023 0303 	bic.w	r3, r3, #3
 8008be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	f023 0302 	bic.w	r3, r3, #2
 8008bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a21      	ldr	r2, [pc, #132]	; (8008c88 <TIM_OC1_SetConfig+0xdc>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d003      	beq.n	8008c10 <TIM_OC1_SetConfig+0x64>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a20      	ldr	r2, [pc, #128]	; (8008c8c <TIM_OC1_SetConfig+0xe0>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d10c      	bne.n	8008c2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	f023 0308 	bic.w	r3, r3, #8
 8008c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f023 0304 	bic.w	r3, r3, #4
 8008c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a16      	ldr	r2, [pc, #88]	; (8008c88 <TIM_OC1_SetConfig+0xdc>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d003      	beq.n	8008c3a <TIM_OC1_SetConfig+0x8e>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a15      	ldr	r2, [pc, #84]	; (8008c8c <TIM_OC1_SetConfig+0xe0>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d111      	bne.n	8008c5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	693a      	ldr	r2, [r7, #16]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	693a      	ldr	r2, [r7, #16]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	697a      	ldr	r2, [r7, #20]
 8008c76:	621a      	str	r2, [r3, #32]
}
 8008c78:	bf00      	nop
 8008c7a:	371c      	adds	r7, #28
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr
 8008c84:	fffeff8f 	.word	0xfffeff8f
 8008c88:	40010000 	.word	0x40010000
 8008c8c:	40010400 	.word	0x40010400

08008c90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b087      	sub	sp, #28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	f023 0210 	bic.w	r2, r3, #16
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	4b2e      	ldr	r3, [pc, #184]	; (8008d74 <TIM_OC2_SetConfig+0xe4>)
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	021b      	lsls	r3, r3, #8
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	f023 0320 	bic.w	r3, r3, #32
 8008cda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	011b      	lsls	r3, r3, #4
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a23      	ldr	r2, [pc, #140]	; (8008d78 <TIM_OC2_SetConfig+0xe8>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d003      	beq.n	8008cf8 <TIM_OC2_SetConfig+0x68>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a22      	ldr	r2, [pc, #136]	; (8008d7c <TIM_OC2_SetConfig+0xec>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d10d      	bne.n	8008d14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	011b      	lsls	r3, r3, #4
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a18      	ldr	r2, [pc, #96]	; (8008d78 <TIM_OC2_SetConfig+0xe8>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d003      	beq.n	8008d24 <TIM_OC2_SetConfig+0x94>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a17      	ldr	r2, [pc, #92]	; (8008d7c <TIM_OC2_SetConfig+0xec>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d113      	bne.n	8008d4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	693a      	ldr	r2, [r7, #16]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	697a      	ldr	r2, [r7, #20]
 8008d64:	621a      	str	r2, [r3, #32]
}
 8008d66:	bf00      	nop
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	feff8fff 	.word	0xfeff8fff
 8008d78:	40010000 	.word	0x40010000
 8008d7c:	40010400 	.word	0x40010400

08008d80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b087      	sub	sp, #28
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a1b      	ldr	r3, [r3, #32]
 8008d8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	69db      	ldr	r3, [r3, #28]
 8008da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	4b2d      	ldr	r3, [pc, #180]	; (8008e60 <TIM_OC3_SetConfig+0xe0>)
 8008dac:	4013      	ands	r3, r2
 8008dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f023 0303 	bic.w	r3, r3, #3
 8008db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	021b      	lsls	r3, r3, #8
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a22      	ldr	r2, [pc, #136]	; (8008e64 <TIM_OC3_SetConfig+0xe4>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d003      	beq.n	8008de6 <TIM_OC3_SetConfig+0x66>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a21      	ldr	r2, [pc, #132]	; (8008e68 <TIM_OC3_SetConfig+0xe8>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d10d      	bne.n	8008e02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008dec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	021b      	lsls	r3, r3, #8
 8008df4:	697a      	ldr	r2, [r7, #20]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a17      	ldr	r2, [pc, #92]	; (8008e64 <TIM_OC3_SetConfig+0xe4>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d003      	beq.n	8008e12 <TIM_OC3_SetConfig+0x92>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a16      	ldr	r2, [pc, #88]	; (8008e68 <TIM_OC3_SetConfig+0xe8>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d113      	bne.n	8008e3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	695b      	ldr	r3, [r3, #20]
 8008e26:	011b      	lsls	r3, r3, #4
 8008e28:	693a      	ldr	r2, [r7, #16]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	011b      	lsls	r3, r3, #4
 8008e34:	693a      	ldr	r2, [r7, #16]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	685a      	ldr	r2, [r3, #4]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	621a      	str	r2, [r3, #32]
}
 8008e54:	bf00      	nop
 8008e56:	371c      	adds	r7, #28
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr
 8008e60:	fffeff8f 	.word	0xfffeff8f
 8008e64:	40010000 	.word	0x40010000
 8008e68:	40010400 	.word	0x40010400

08008e6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b087      	sub	sp, #28
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a1b      	ldr	r3, [r3, #32]
 8008e7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a1b      	ldr	r3, [r3, #32]
 8008e86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	69db      	ldr	r3, [r3, #28]
 8008e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	4b1e      	ldr	r3, [pc, #120]	; (8008f10 <TIM_OC4_SetConfig+0xa4>)
 8008e98:	4013      	ands	r3, r2
 8008e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	021b      	lsls	r3, r3, #8
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008eb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	031b      	lsls	r3, r3, #12
 8008ebe:	693a      	ldr	r2, [r7, #16]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a13      	ldr	r2, [pc, #76]	; (8008f14 <TIM_OC4_SetConfig+0xa8>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d003      	beq.n	8008ed4 <TIM_OC4_SetConfig+0x68>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a12      	ldr	r2, [pc, #72]	; (8008f18 <TIM_OC4_SetConfig+0xac>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d109      	bne.n	8008ee8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008eda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	695b      	ldr	r3, [r3, #20]
 8008ee0:	019b      	lsls	r3, r3, #6
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	685a      	ldr	r2, [r3, #4]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	621a      	str	r2, [r3, #32]
}
 8008f02:	bf00      	nop
 8008f04:	371c      	adds	r7, #28
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	feff8fff 	.word	0xfeff8fff
 8008f14:	40010000 	.word	0x40010000
 8008f18:	40010400 	.word	0x40010400

08008f1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b087      	sub	sp, #28
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	4b1b      	ldr	r3, [pc, #108]	; (8008fb4 <TIM_OC5_SetConfig+0x98>)
 8008f48:	4013      	ands	r3, r2
 8008f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008f5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	041b      	lsls	r3, r3, #16
 8008f64:	693a      	ldr	r2, [r7, #16]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a12      	ldr	r2, [pc, #72]	; (8008fb8 <TIM_OC5_SetConfig+0x9c>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d003      	beq.n	8008f7a <TIM_OC5_SetConfig+0x5e>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a11      	ldr	r2, [pc, #68]	; (8008fbc <TIM_OC5_SetConfig+0xa0>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d109      	bne.n	8008f8e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	695b      	ldr	r3, [r3, #20]
 8008f86:	021b      	lsls	r3, r3, #8
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	685a      	ldr	r2, [r3, #4]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	621a      	str	r2, [r3, #32]
}
 8008fa8:	bf00      	nop
 8008faa:	371c      	adds	r7, #28
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr
 8008fb4:	fffeff8f 	.word	0xfffeff8f
 8008fb8:	40010000 	.word	0x40010000
 8008fbc:	40010400 	.word	0x40010400

08008fc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b087      	sub	sp, #28
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a1b      	ldr	r3, [r3, #32]
 8008fce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	4b1c      	ldr	r3, [pc, #112]	; (800905c <TIM_OC6_SetConfig+0x9c>)
 8008fec:	4013      	ands	r3, r2
 8008fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	021b      	lsls	r3, r3, #8
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009002:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	051b      	lsls	r3, r3, #20
 800900a:	693a      	ldr	r2, [r7, #16]
 800900c:	4313      	orrs	r3, r2
 800900e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a13      	ldr	r2, [pc, #76]	; (8009060 <TIM_OC6_SetConfig+0xa0>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d003      	beq.n	8009020 <TIM_OC6_SetConfig+0x60>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4a12      	ldr	r2, [pc, #72]	; (8009064 <TIM_OC6_SetConfig+0xa4>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d109      	bne.n	8009034 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009026:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	695b      	ldr	r3, [r3, #20]
 800902c:	029b      	lsls	r3, r3, #10
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	4313      	orrs	r3, r2
 8009032:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	697a      	ldr	r2, [r7, #20]
 8009038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	685a      	ldr	r2, [r3, #4]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	693a      	ldr	r2, [r7, #16]
 800904c:	621a      	str	r2, [r3, #32]
}
 800904e:	bf00      	nop
 8009050:	371c      	adds	r7, #28
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	feff8fff 	.word	0xfeff8fff
 8009060:	40010000 	.word	0x40010000
 8009064:	40010400 	.word	0x40010400

08009068 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009068:	b480      	push	{r7}
 800906a:	b087      	sub	sp, #28
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6a1b      	ldr	r3, [r3, #32]
 8009078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	f023 0201 	bic.w	r2, r3, #1
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	011b      	lsls	r3, r3, #4
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	4313      	orrs	r3, r2
 800909c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f023 030a 	bic.w	r3, r3, #10
 80090a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	697a      	ldr	r2, [r7, #20]
 80090b8:	621a      	str	r2, [r3, #32]
}
 80090ba:	bf00      	nop
 80090bc:	371c      	adds	r7, #28
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090c6:	b480      	push	{r7}
 80090c8:	b087      	sub	sp, #28
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	60f8      	str	r0, [r7, #12]
 80090ce:	60b9      	str	r1, [r7, #8]
 80090d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6a1b      	ldr	r3, [r3, #32]
 80090d6:	f023 0210 	bic.w	r2, r3, #16
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6a1b      	ldr	r3, [r3, #32]
 80090e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80090f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	031b      	lsls	r3, r3, #12
 80090f6:	697a      	ldr	r2, [r7, #20]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009102:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	011b      	lsls	r3, r3, #4
 8009108:	693a      	ldr	r2, [r7, #16]
 800910a:	4313      	orrs	r3, r2
 800910c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	621a      	str	r2, [r3, #32]
}
 800911a:	bf00      	nop
 800911c:	371c      	adds	r7, #28
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009126:	b480      	push	{r7}
 8009128:	b085      	sub	sp, #20
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800913c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	4313      	orrs	r3, r2
 8009144:	f043 0307 	orr.w	r3, r3, #7
 8009148:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	609a      	str	r2, [r3, #8]
}
 8009150:	bf00      	nop
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800915c:	b480      	push	{r7}
 800915e:	b087      	sub	sp, #28
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	607a      	str	r2, [r7, #4]
 8009168:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009176:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	021a      	lsls	r2, r3, #8
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	431a      	orrs	r2, r3
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	4313      	orrs	r3, r2
 8009184:	697a      	ldr	r2, [r7, #20]
 8009186:	4313      	orrs	r3, r2
 8009188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	697a      	ldr	r2, [r7, #20]
 800918e:	609a      	str	r2, [r3, #8]
}
 8009190:	bf00      	nop
 8009192:	371c      	adds	r7, #28
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800919c:	b480      	push	{r7}
 800919e:	b087      	sub	sp, #28
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	f003 031f 	and.w	r3, r3, #31
 80091ae:	2201      	movs	r2, #1
 80091b0:	fa02 f303 	lsl.w	r3, r2, r3
 80091b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6a1a      	ldr	r2, [r3, #32]
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	43db      	mvns	r3, r3
 80091be:	401a      	ands	r2, r3
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6a1a      	ldr	r2, [r3, #32]
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	f003 031f 	and.w	r3, r3, #31
 80091ce:	6879      	ldr	r1, [r7, #4]
 80091d0:	fa01 f303 	lsl.w	r3, r1, r3
 80091d4:	431a      	orrs	r2, r3
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	621a      	str	r2, [r3, #32]
}
 80091da:	bf00      	nop
 80091dc:	371c      	adds	r7, #28
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
	...

080091e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b085      	sub	sp, #20
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d101      	bne.n	8009200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091fc:	2302      	movs	r3, #2
 80091fe:	e06d      	b.n	80092dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2202      	movs	r2, #2
 800920c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a30      	ldr	r2, [pc, #192]	; (80092e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d004      	beq.n	8009234 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a2f      	ldr	r2, [pc, #188]	; (80092ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d108      	bne.n	8009246 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800923a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	4313      	orrs	r3, r2
 8009244:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800924c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	4313      	orrs	r3, r2
 8009256:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a20      	ldr	r2, [pc, #128]	; (80092e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d022      	beq.n	80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009272:	d01d      	beq.n	80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a1d      	ldr	r2, [pc, #116]	; (80092f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d018      	beq.n	80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a1c      	ldr	r2, [pc, #112]	; (80092f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d013      	beq.n	80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a1a      	ldr	r2, [pc, #104]	; (80092f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d00e      	beq.n	80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a15      	ldr	r2, [pc, #84]	; (80092ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d009      	beq.n	80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a16      	ldr	r2, [pc, #88]	; (80092fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d004      	beq.n	80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a15      	ldr	r2, [pc, #84]	; (8009300 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d10c      	bne.n	80092ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	4313      	orrs	r3, r2
 80092c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3714      	adds	r7, #20
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	40010000 	.word	0x40010000
 80092ec:	40010400 	.word	0x40010400
 80092f0:	40000400 	.word	0x40000400
 80092f4:	40000800 	.word	0x40000800
 80092f8:	40000c00 	.word	0x40000c00
 80092fc:	40014000 	.word	0x40014000
 8009300:	40001800 	.word	0x40001800

08009304 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800930e:	2300      	movs	r3, #0
 8009310:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009318:	2b01      	cmp	r3, #1
 800931a:	d101      	bne.n	8009320 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800931c:	2302      	movs	r3, #2
 800931e:	e065      	b.n	80093ec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	4313      	orrs	r3, r2
 8009334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	4313      	orrs	r3, r2
 8009342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	4313      	orrs	r3, r2
 8009350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4313      	orrs	r3, r2
 800935e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	4313      	orrs	r3, r2
 800936c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	695b      	ldr	r3, [r3, #20]
 8009378:	4313      	orrs	r3, r2
 800937a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009386:	4313      	orrs	r3, r2
 8009388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	041b      	lsls	r3, r3, #16
 8009396:	4313      	orrs	r3, r2
 8009398:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a16      	ldr	r2, [pc, #88]	; (80093f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d004      	beq.n	80093ae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a14      	ldr	r2, [pc, #80]	; (80093fc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d115      	bne.n	80093da <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b8:	051b      	lsls	r3, r3, #20
 80093ba:	4313      	orrs	r3, r2
 80093bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	69db      	ldr	r3, [r3, #28]
 80093c8:	4313      	orrs	r3, r2
 80093ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	6a1b      	ldr	r3, [r3, #32]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	40010000 	.word	0x40010000
 80093fc:	40010400 	.word	0x40010400

08009400 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800941c:	bf00      	nop
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d101      	bne.n	800944e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e040      	b.n	80094d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009452:	2b00      	cmp	r3, #0
 8009454:	d106      	bne.n	8009464 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f7f9 f858 	bl	8002514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2224      	movs	r2, #36	; 0x24
 8009468:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f022 0201 	bic.w	r2, r2, #1
 8009478:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f95c 	bl	8009738 <UART_SetConfig>
 8009480:	4603      	mov	r3, r0
 8009482:	2b01      	cmp	r3, #1
 8009484:	d101      	bne.n	800948a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e022      	b.n	80094d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948e:	2b00      	cmp	r3, #0
 8009490:	d002      	beq.n	8009498 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fbb2 	bl	8009bfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	685a      	ldr	r2, [r3, #4]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	689a      	ldr	r2, [r3, #8]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f042 0201 	orr.w	r2, r2, #1
 80094c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 fc39 	bl	8009d40 <UART_CheckIdleState>
 80094ce:	4603      	mov	r3, r0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b08a      	sub	sp, #40	; 0x28
 80094dc:	af02      	add	r7, sp, #8
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	603b      	str	r3, [r7, #0]
 80094e4:	4613      	mov	r3, r2
 80094e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094ec:	2b20      	cmp	r3, #32
 80094ee:	f040 8081 	bne.w	80095f4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d002      	beq.n	80094fe <HAL_UART_Transmit+0x26>
 80094f8:	88fb      	ldrh	r3, [r7, #6]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d101      	bne.n	8009502 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	e079      	b.n	80095f6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009508:	2b01      	cmp	r3, #1
 800950a:	d101      	bne.n	8009510 <HAL_UART_Transmit+0x38>
 800950c:	2302      	movs	r3, #2
 800950e:	e072      	b.n	80095f6 <HAL_UART_Transmit+0x11e>
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2200      	movs	r2, #0
 800951c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2221      	movs	r2, #33	; 0x21
 8009524:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009526:	f7f9 fae3 	bl	8002af0 <HAL_GetTick>
 800952a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	88fa      	ldrh	r2, [r7, #6]
 8009530:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	88fa      	ldrh	r2, [r7, #6]
 8009538:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009544:	d108      	bne.n	8009558 <HAL_UART_Transmit+0x80>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d104      	bne.n	8009558 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800954e:	2300      	movs	r3, #0
 8009550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	61bb      	str	r3, [r7, #24]
 8009556:	e003      	b.n	8009560 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800955c:	2300      	movs	r3, #0
 800955e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009568:	e02c      	b.n	80095c4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	9300      	str	r3, [sp, #0]
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	2200      	movs	r2, #0
 8009572:	2180      	movs	r1, #128	; 0x80
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f000 fc16 	bl	8009da6 <UART_WaitOnFlagUntilTimeout>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d001      	beq.n	8009584 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009580:	2303      	movs	r3, #3
 8009582:	e038      	b.n	80095f6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10b      	bne.n	80095a2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	881b      	ldrh	r3, [r3, #0]
 800958e:	461a      	mov	r2, r3
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009598:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	3302      	adds	r3, #2
 800959e:	61bb      	str	r3, [r7, #24]
 80095a0:	e007      	b.n	80095b2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	781a      	ldrb	r2, [r3, #0]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	3301      	adds	r3, #1
 80095b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	3b01      	subs	r3, #1
 80095bc:	b29a      	uxth	r2, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d1cc      	bne.n	800956a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	2200      	movs	r2, #0
 80095d8:	2140      	movs	r1, #64	; 0x40
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f000 fbe3 	bl	8009da6 <UART_WaitOnFlagUntilTimeout>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80095e6:	2303      	movs	r3, #3
 80095e8:	e005      	b.n	80095f6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2220      	movs	r2, #32
 80095ee:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80095f0:	2300      	movs	r3, #0
 80095f2:	e000      	b.n	80095f6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80095f4:	2302      	movs	r3, #2
  }
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3720      	adds	r7, #32
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
	...

08009600 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	4613      	mov	r3, r2
 800960c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009612:	2b20      	cmp	r3, #32
 8009614:	d166      	bne.n	80096e4 <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d002      	beq.n	8009622 <HAL_UART_Transmit_DMA+0x22>
 800961c:	88fb      	ldrh	r3, [r7, #6]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d101      	bne.n	8009626 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	e05f      	b.n	80096e6 <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800962c:	2b01      	cmp	r3, #1
 800962e:	d101      	bne.n	8009634 <HAL_UART_Transmit_DMA+0x34>
 8009630:	2302      	movs	r3, #2
 8009632:	e058      	b.n	80096e6 <HAL_UART_Transmit_DMA+0xe6>
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	68ba      	ldr	r2, [r7, #8]
 8009640:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	88fa      	ldrh	r2, [r7, #6]
 8009646:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	88fa      	ldrh	r2, [r7, #6]
 800964e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2221      	movs	r2, #33	; 0x21
 800965e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009664:	2b00      	cmp	r3, #0
 8009666:	d02b      	beq.n	80096c0 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800966c:	4a20      	ldr	r2, [pc, #128]	; (80096f0 <HAL_UART_Transmit_DMA+0xf0>)
 800966e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009674:	4a1f      	ldr	r2, [pc, #124]	; (80096f4 <HAL_UART_Transmit_DMA+0xf4>)
 8009676:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800967c:	4a1e      	ldr	r2, [pc, #120]	; (80096f8 <HAL_UART_Transmit_DMA+0xf8>)
 800967e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009684:	2200      	movs	r2, #0
 8009686:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009690:	4619      	mov	r1, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	3328      	adds	r3, #40	; 0x28
 8009698:	461a      	mov	r2, r3
 800969a:	88fb      	ldrh	r3, [r7, #6]
 800969c:	f7fa f93a 	bl	8003914 <HAL_DMA_Start_IT>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00c      	beq.n	80096c0 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2210      	movs	r2, #16
 80096aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2220      	movs	r2, #32
 80096ba:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	e012      	b.n	80096e6 <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2240      	movs	r2, #64	; 0x40
 80096c6:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	689a      	ldr	r2, [r3, #8]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80096de:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	e000      	b.n	80096e6 <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 80096e4:	2302      	movs	r3, #2
  }
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	08009f27 	.word	0x08009f27
 80096f4:	08009f77 	.word	0x08009f77
 80096f8:	08009f93 	.word	0x08009f93

080096fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009704:	bf00      	nop
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800972c:	bf00      	nop
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b088      	sub	sp, #32
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009740:	2300      	movs	r3, #0
 8009742:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	689a      	ldr	r2, [r3, #8]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	431a      	orrs	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	431a      	orrs	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	69db      	ldr	r3, [r3, #28]
 8009758:	4313      	orrs	r3, r2
 800975a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	4ba7      	ldr	r3, [pc, #668]	; (8009a00 <UART_SetConfig+0x2c8>)
 8009764:	4013      	ands	r3, r2
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	6812      	ldr	r2, [r2, #0]
 800976a:	6979      	ldr	r1, [r7, #20]
 800976c:	430b      	orrs	r3, r1
 800976e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	68da      	ldr	r2, [r3, #12]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	430a      	orrs	r2, r1
 8009784:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6a1b      	ldr	r3, [r3, #32]
 8009790:	697a      	ldr	r2, [r7, #20]
 8009792:	4313      	orrs	r3, r2
 8009794:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	430a      	orrs	r2, r1
 80097a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a95      	ldr	r2, [pc, #596]	; (8009a04 <UART_SetConfig+0x2cc>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d120      	bne.n	80097f6 <UART_SetConfig+0xbe>
 80097b4:	4b94      	ldr	r3, [pc, #592]	; (8009a08 <UART_SetConfig+0x2d0>)
 80097b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097ba:	f003 0303 	and.w	r3, r3, #3
 80097be:	2b03      	cmp	r3, #3
 80097c0:	d816      	bhi.n	80097f0 <UART_SetConfig+0xb8>
 80097c2:	a201      	add	r2, pc, #4	; (adr r2, 80097c8 <UART_SetConfig+0x90>)
 80097c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c8:	080097d9 	.word	0x080097d9
 80097cc:	080097e5 	.word	0x080097e5
 80097d0:	080097df 	.word	0x080097df
 80097d4:	080097eb 	.word	0x080097eb
 80097d8:	2301      	movs	r3, #1
 80097da:	77fb      	strb	r3, [r7, #31]
 80097dc:	e14f      	b.n	8009a7e <UART_SetConfig+0x346>
 80097de:	2302      	movs	r3, #2
 80097e0:	77fb      	strb	r3, [r7, #31]
 80097e2:	e14c      	b.n	8009a7e <UART_SetConfig+0x346>
 80097e4:	2304      	movs	r3, #4
 80097e6:	77fb      	strb	r3, [r7, #31]
 80097e8:	e149      	b.n	8009a7e <UART_SetConfig+0x346>
 80097ea:	2308      	movs	r3, #8
 80097ec:	77fb      	strb	r3, [r7, #31]
 80097ee:	e146      	b.n	8009a7e <UART_SetConfig+0x346>
 80097f0:	2310      	movs	r3, #16
 80097f2:	77fb      	strb	r3, [r7, #31]
 80097f4:	e143      	b.n	8009a7e <UART_SetConfig+0x346>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a84      	ldr	r2, [pc, #528]	; (8009a0c <UART_SetConfig+0x2d4>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d132      	bne.n	8009866 <UART_SetConfig+0x12e>
 8009800:	4b81      	ldr	r3, [pc, #516]	; (8009a08 <UART_SetConfig+0x2d0>)
 8009802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009806:	f003 030c 	and.w	r3, r3, #12
 800980a:	2b0c      	cmp	r3, #12
 800980c:	d828      	bhi.n	8009860 <UART_SetConfig+0x128>
 800980e:	a201      	add	r2, pc, #4	; (adr r2, 8009814 <UART_SetConfig+0xdc>)
 8009810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009814:	08009849 	.word	0x08009849
 8009818:	08009861 	.word	0x08009861
 800981c:	08009861 	.word	0x08009861
 8009820:	08009861 	.word	0x08009861
 8009824:	08009855 	.word	0x08009855
 8009828:	08009861 	.word	0x08009861
 800982c:	08009861 	.word	0x08009861
 8009830:	08009861 	.word	0x08009861
 8009834:	0800984f 	.word	0x0800984f
 8009838:	08009861 	.word	0x08009861
 800983c:	08009861 	.word	0x08009861
 8009840:	08009861 	.word	0x08009861
 8009844:	0800985b 	.word	0x0800985b
 8009848:	2300      	movs	r3, #0
 800984a:	77fb      	strb	r3, [r7, #31]
 800984c:	e117      	b.n	8009a7e <UART_SetConfig+0x346>
 800984e:	2302      	movs	r3, #2
 8009850:	77fb      	strb	r3, [r7, #31]
 8009852:	e114      	b.n	8009a7e <UART_SetConfig+0x346>
 8009854:	2304      	movs	r3, #4
 8009856:	77fb      	strb	r3, [r7, #31]
 8009858:	e111      	b.n	8009a7e <UART_SetConfig+0x346>
 800985a:	2308      	movs	r3, #8
 800985c:	77fb      	strb	r3, [r7, #31]
 800985e:	e10e      	b.n	8009a7e <UART_SetConfig+0x346>
 8009860:	2310      	movs	r3, #16
 8009862:	77fb      	strb	r3, [r7, #31]
 8009864:	e10b      	b.n	8009a7e <UART_SetConfig+0x346>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a69      	ldr	r2, [pc, #420]	; (8009a10 <UART_SetConfig+0x2d8>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d120      	bne.n	80098b2 <UART_SetConfig+0x17a>
 8009870:	4b65      	ldr	r3, [pc, #404]	; (8009a08 <UART_SetConfig+0x2d0>)
 8009872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009876:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800987a:	2b30      	cmp	r3, #48	; 0x30
 800987c:	d013      	beq.n	80098a6 <UART_SetConfig+0x16e>
 800987e:	2b30      	cmp	r3, #48	; 0x30
 8009880:	d814      	bhi.n	80098ac <UART_SetConfig+0x174>
 8009882:	2b20      	cmp	r3, #32
 8009884:	d009      	beq.n	800989a <UART_SetConfig+0x162>
 8009886:	2b20      	cmp	r3, #32
 8009888:	d810      	bhi.n	80098ac <UART_SetConfig+0x174>
 800988a:	2b00      	cmp	r3, #0
 800988c:	d002      	beq.n	8009894 <UART_SetConfig+0x15c>
 800988e:	2b10      	cmp	r3, #16
 8009890:	d006      	beq.n	80098a0 <UART_SetConfig+0x168>
 8009892:	e00b      	b.n	80098ac <UART_SetConfig+0x174>
 8009894:	2300      	movs	r3, #0
 8009896:	77fb      	strb	r3, [r7, #31]
 8009898:	e0f1      	b.n	8009a7e <UART_SetConfig+0x346>
 800989a:	2302      	movs	r3, #2
 800989c:	77fb      	strb	r3, [r7, #31]
 800989e:	e0ee      	b.n	8009a7e <UART_SetConfig+0x346>
 80098a0:	2304      	movs	r3, #4
 80098a2:	77fb      	strb	r3, [r7, #31]
 80098a4:	e0eb      	b.n	8009a7e <UART_SetConfig+0x346>
 80098a6:	2308      	movs	r3, #8
 80098a8:	77fb      	strb	r3, [r7, #31]
 80098aa:	e0e8      	b.n	8009a7e <UART_SetConfig+0x346>
 80098ac:	2310      	movs	r3, #16
 80098ae:	77fb      	strb	r3, [r7, #31]
 80098b0:	e0e5      	b.n	8009a7e <UART_SetConfig+0x346>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a57      	ldr	r2, [pc, #348]	; (8009a14 <UART_SetConfig+0x2dc>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d120      	bne.n	80098fe <UART_SetConfig+0x1c6>
 80098bc:	4b52      	ldr	r3, [pc, #328]	; (8009a08 <UART_SetConfig+0x2d0>)
 80098be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80098c6:	2bc0      	cmp	r3, #192	; 0xc0
 80098c8:	d013      	beq.n	80098f2 <UART_SetConfig+0x1ba>
 80098ca:	2bc0      	cmp	r3, #192	; 0xc0
 80098cc:	d814      	bhi.n	80098f8 <UART_SetConfig+0x1c0>
 80098ce:	2b80      	cmp	r3, #128	; 0x80
 80098d0:	d009      	beq.n	80098e6 <UART_SetConfig+0x1ae>
 80098d2:	2b80      	cmp	r3, #128	; 0x80
 80098d4:	d810      	bhi.n	80098f8 <UART_SetConfig+0x1c0>
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d002      	beq.n	80098e0 <UART_SetConfig+0x1a8>
 80098da:	2b40      	cmp	r3, #64	; 0x40
 80098dc:	d006      	beq.n	80098ec <UART_SetConfig+0x1b4>
 80098de:	e00b      	b.n	80098f8 <UART_SetConfig+0x1c0>
 80098e0:	2300      	movs	r3, #0
 80098e2:	77fb      	strb	r3, [r7, #31]
 80098e4:	e0cb      	b.n	8009a7e <UART_SetConfig+0x346>
 80098e6:	2302      	movs	r3, #2
 80098e8:	77fb      	strb	r3, [r7, #31]
 80098ea:	e0c8      	b.n	8009a7e <UART_SetConfig+0x346>
 80098ec:	2304      	movs	r3, #4
 80098ee:	77fb      	strb	r3, [r7, #31]
 80098f0:	e0c5      	b.n	8009a7e <UART_SetConfig+0x346>
 80098f2:	2308      	movs	r3, #8
 80098f4:	77fb      	strb	r3, [r7, #31]
 80098f6:	e0c2      	b.n	8009a7e <UART_SetConfig+0x346>
 80098f8:	2310      	movs	r3, #16
 80098fa:	77fb      	strb	r3, [r7, #31]
 80098fc:	e0bf      	b.n	8009a7e <UART_SetConfig+0x346>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a45      	ldr	r2, [pc, #276]	; (8009a18 <UART_SetConfig+0x2e0>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d125      	bne.n	8009954 <UART_SetConfig+0x21c>
 8009908:	4b3f      	ldr	r3, [pc, #252]	; (8009a08 <UART_SetConfig+0x2d0>)
 800990a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800990e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009916:	d017      	beq.n	8009948 <UART_SetConfig+0x210>
 8009918:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800991c:	d817      	bhi.n	800994e <UART_SetConfig+0x216>
 800991e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009922:	d00b      	beq.n	800993c <UART_SetConfig+0x204>
 8009924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009928:	d811      	bhi.n	800994e <UART_SetConfig+0x216>
 800992a:	2b00      	cmp	r3, #0
 800992c:	d003      	beq.n	8009936 <UART_SetConfig+0x1fe>
 800992e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009932:	d006      	beq.n	8009942 <UART_SetConfig+0x20a>
 8009934:	e00b      	b.n	800994e <UART_SetConfig+0x216>
 8009936:	2300      	movs	r3, #0
 8009938:	77fb      	strb	r3, [r7, #31]
 800993a:	e0a0      	b.n	8009a7e <UART_SetConfig+0x346>
 800993c:	2302      	movs	r3, #2
 800993e:	77fb      	strb	r3, [r7, #31]
 8009940:	e09d      	b.n	8009a7e <UART_SetConfig+0x346>
 8009942:	2304      	movs	r3, #4
 8009944:	77fb      	strb	r3, [r7, #31]
 8009946:	e09a      	b.n	8009a7e <UART_SetConfig+0x346>
 8009948:	2308      	movs	r3, #8
 800994a:	77fb      	strb	r3, [r7, #31]
 800994c:	e097      	b.n	8009a7e <UART_SetConfig+0x346>
 800994e:	2310      	movs	r3, #16
 8009950:	77fb      	strb	r3, [r7, #31]
 8009952:	e094      	b.n	8009a7e <UART_SetConfig+0x346>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a30      	ldr	r2, [pc, #192]	; (8009a1c <UART_SetConfig+0x2e4>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d125      	bne.n	80099aa <UART_SetConfig+0x272>
 800995e:	4b2a      	ldr	r3, [pc, #168]	; (8009a08 <UART_SetConfig+0x2d0>)
 8009960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009964:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009968:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800996c:	d017      	beq.n	800999e <UART_SetConfig+0x266>
 800996e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009972:	d817      	bhi.n	80099a4 <UART_SetConfig+0x26c>
 8009974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009978:	d00b      	beq.n	8009992 <UART_SetConfig+0x25a>
 800997a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800997e:	d811      	bhi.n	80099a4 <UART_SetConfig+0x26c>
 8009980:	2b00      	cmp	r3, #0
 8009982:	d003      	beq.n	800998c <UART_SetConfig+0x254>
 8009984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009988:	d006      	beq.n	8009998 <UART_SetConfig+0x260>
 800998a:	e00b      	b.n	80099a4 <UART_SetConfig+0x26c>
 800998c:	2301      	movs	r3, #1
 800998e:	77fb      	strb	r3, [r7, #31]
 8009990:	e075      	b.n	8009a7e <UART_SetConfig+0x346>
 8009992:	2302      	movs	r3, #2
 8009994:	77fb      	strb	r3, [r7, #31]
 8009996:	e072      	b.n	8009a7e <UART_SetConfig+0x346>
 8009998:	2304      	movs	r3, #4
 800999a:	77fb      	strb	r3, [r7, #31]
 800999c:	e06f      	b.n	8009a7e <UART_SetConfig+0x346>
 800999e:	2308      	movs	r3, #8
 80099a0:	77fb      	strb	r3, [r7, #31]
 80099a2:	e06c      	b.n	8009a7e <UART_SetConfig+0x346>
 80099a4:	2310      	movs	r3, #16
 80099a6:	77fb      	strb	r3, [r7, #31]
 80099a8:	e069      	b.n	8009a7e <UART_SetConfig+0x346>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a1c      	ldr	r2, [pc, #112]	; (8009a20 <UART_SetConfig+0x2e8>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d137      	bne.n	8009a24 <UART_SetConfig+0x2ec>
 80099b4:	4b14      	ldr	r3, [pc, #80]	; (8009a08 <UART_SetConfig+0x2d0>)
 80099b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80099be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80099c2:	d017      	beq.n	80099f4 <UART_SetConfig+0x2bc>
 80099c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80099c8:	d817      	bhi.n	80099fa <UART_SetConfig+0x2c2>
 80099ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099ce:	d00b      	beq.n	80099e8 <UART_SetConfig+0x2b0>
 80099d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099d4:	d811      	bhi.n	80099fa <UART_SetConfig+0x2c2>
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d003      	beq.n	80099e2 <UART_SetConfig+0x2aa>
 80099da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099de:	d006      	beq.n	80099ee <UART_SetConfig+0x2b6>
 80099e0:	e00b      	b.n	80099fa <UART_SetConfig+0x2c2>
 80099e2:	2300      	movs	r3, #0
 80099e4:	77fb      	strb	r3, [r7, #31]
 80099e6:	e04a      	b.n	8009a7e <UART_SetConfig+0x346>
 80099e8:	2302      	movs	r3, #2
 80099ea:	77fb      	strb	r3, [r7, #31]
 80099ec:	e047      	b.n	8009a7e <UART_SetConfig+0x346>
 80099ee:	2304      	movs	r3, #4
 80099f0:	77fb      	strb	r3, [r7, #31]
 80099f2:	e044      	b.n	8009a7e <UART_SetConfig+0x346>
 80099f4:	2308      	movs	r3, #8
 80099f6:	77fb      	strb	r3, [r7, #31]
 80099f8:	e041      	b.n	8009a7e <UART_SetConfig+0x346>
 80099fa:	2310      	movs	r3, #16
 80099fc:	77fb      	strb	r3, [r7, #31]
 80099fe:	e03e      	b.n	8009a7e <UART_SetConfig+0x346>
 8009a00:	efff69f3 	.word	0xefff69f3
 8009a04:	40011000 	.word	0x40011000
 8009a08:	40023800 	.word	0x40023800
 8009a0c:	40004400 	.word	0x40004400
 8009a10:	40004800 	.word	0x40004800
 8009a14:	40004c00 	.word	0x40004c00
 8009a18:	40005000 	.word	0x40005000
 8009a1c:	40011400 	.word	0x40011400
 8009a20:	40007800 	.word	0x40007800
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a71      	ldr	r2, [pc, #452]	; (8009bf0 <UART_SetConfig+0x4b8>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d125      	bne.n	8009a7a <UART_SetConfig+0x342>
 8009a2e:	4b71      	ldr	r3, [pc, #452]	; (8009bf4 <UART_SetConfig+0x4bc>)
 8009a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009a38:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009a3c:	d017      	beq.n	8009a6e <UART_SetConfig+0x336>
 8009a3e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009a42:	d817      	bhi.n	8009a74 <UART_SetConfig+0x33c>
 8009a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a48:	d00b      	beq.n	8009a62 <UART_SetConfig+0x32a>
 8009a4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a4e:	d811      	bhi.n	8009a74 <UART_SetConfig+0x33c>
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d003      	beq.n	8009a5c <UART_SetConfig+0x324>
 8009a54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a58:	d006      	beq.n	8009a68 <UART_SetConfig+0x330>
 8009a5a:	e00b      	b.n	8009a74 <UART_SetConfig+0x33c>
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	77fb      	strb	r3, [r7, #31]
 8009a60:	e00d      	b.n	8009a7e <UART_SetConfig+0x346>
 8009a62:	2302      	movs	r3, #2
 8009a64:	77fb      	strb	r3, [r7, #31]
 8009a66:	e00a      	b.n	8009a7e <UART_SetConfig+0x346>
 8009a68:	2304      	movs	r3, #4
 8009a6a:	77fb      	strb	r3, [r7, #31]
 8009a6c:	e007      	b.n	8009a7e <UART_SetConfig+0x346>
 8009a6e:	2308      	movs	r3, #8
 8009a70:	77fb      	strb	r3, [r7, #31]
 8009a72:	e004      	b.n	8009a7e <UART_SetConfig+0x346>
 8009a74:	2310      	movs	r3, #16
 8009a76:	77fb      	strb	r3, [r7, #31]
 8009a78:	e001      	b.n	8009a7e <UART_SetConfig+0x346>
 8009a7a:	2310      	movs	r3, #16
 8009a7c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	69db      	ldr	r3, [r3, #28]
 8009a82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a86:	d15b      	bne.n	8009b40 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8009a88:	7ffb      	ldrb	r3, [r7, #31]
 8009a8a:	2b08      	cmp	r3, #8
 8009a8c:	d827      	bhi.n	8009ade <UART_SetConfig+0x3a6>
 8009a8e:	a201      	add	r2, pc, #4	; (adr r2, 8009a94 <UART_SetConfig+0x35c>)
 8009a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a94:	08009ab9 	.word	0x08009ab9
 8009a98:	08009ac1 	.word	0x08009ac1
 8009a9c:	08009ac9 	.word	0x08009ac9
 8009aa0:	08009adf 	.word	0x08009adf
 8009aa4:	08009acf 	.word	0x08009acf
 8009aa8:	08009adf 	.word	0x08009adf
 8009aac:	08009adf 	.word	0x08009adf
 8009ab0:	08009adf 	.word	0x08009adf
 8009ab4:	08009ad7 	.word	0x08009ad7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ab8:	f7fc fa94 	bl	8005fe4 <HAL_RCC_GetPCLK1Freq>
 8009abc:	61b8      	str	r0, [r7, #24]
        break;
 8009abe:	e013      	b.n	8009ae8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ac0:	f7fc faa4 	bl	800600c <HAL_RCC_GetPCLK2Freq>
 8009ac4:	61b8      	str	r0, [r7, #24]
        break;
 8009ac6:	e00f      	b.n	8009ae8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ac8:	4b4b      	ldr	r3, [pc, #300]	; (8009bf8 <UART_SetConfig+0x4c0>)
 8009aca:	61bb      	str	r3, [r7, #24]
        break;
 8009acc:	e00c      	b.n	8009ae8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ace:	f7fc f9c7 	bl	8005e60 <HAL_RCC_GetSysClockFreq>
 8009ad2:	61b8      	str	r0, [r7, #24]
        break;
 8009ad4:	e008      	b.n	8009ae8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ada:	61bb      	str	r3, [r7, #24]
        break;
 8009adc:	e004      	b.n	8009ae8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	77bb      	strb	r3, [r7, #30]
        break;
 8009ae6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d074      	beq.n	8009bd8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	005a      	lsls	r2, r3, #1
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	085b      	lsrs	r3, r3, #1
 8009af8:	441a      	add	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	2b0f      	cmp	r3, #15
 8009b0a:	d916      	bls.n	8009b3a <UART_SetConfig+0x402>
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b12:	d212      	bcs.n	8009b3a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	f023 030f 	bic.w	r3, r3, #15
 8009b1c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	085b      	lsrs	r3, r3, #1
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	f003 0307 	and.w	r3, r3, #7
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	89fb      	ldrh	r3, [r7, #14]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	89fa      	ldrh	r2, [r7, #14]
 8009b36:	60da      	str	r2, [r3, #12]
 8009b38:	e04e      	b.n	8009bd8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	77bb      	strb	r3, [r7, #30]
 8009b3e:	e04b      	b.n	8009bd8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b40:	7ffb      	ldrb	r3, [r7, #31]
 8009b42:	2b08      	cmp	r3, #8
 8009b44:	d827      	bhi.n	8009b96 <UART_SetConfig+0x45e>
 8009b46:	a201      	add	r2, pc, #4	; (adr r2, 8009b4c <UART_SetConfig+0x414>)
 8009b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4c:	08009b71 	.word	0x08009b71
 8009b50:	08009b79 	.word	0x08009b79
 8009b54:	08009b81 	.word	0x08009b81
 8009b58:	08009b97 	.word	0x08009b97
 8009b5c:	08009b87 	.word	0x08009b87
 8009b60:	08009b97 	.word	0x08009b97
 8009b64:	08009b97 	.word	0x08009b97
 8009b68:	08009b97 	.word	0x08009b97
 8009b6c:	08009b8f 	.word	0x08009b8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b70:	f7fc fa38 	bl	8005fe4 <HAL_RCC_GetPCLK1Freq>
 8009b74:	61b8      	str	r0, [r7, #24]
        break;
 8009b76:	e013      	b.n	8009ba0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b78:	f7fc fa48 	bl	800600c <HAL_RCC_GetPCLK2Freq>
 8009b7c:	61b8      	str	r0, [r7, #24]
        break;
 8009b7e:	e00f      	b.n	8009ba0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b80:	4b1d      	ldr	r3, [pc, #116]	; (8009bf8 <UART_SetConfig+0x4c0>)
 8009b82:	61bb      	str	r3, [r7, #24]
        break;
 8009b84:	e00c      	b.n	8009ba0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b86:	f7fc f96b 	bl	8005e60 <HAL_RCC_GetSysClockFreq>
 8009b8a:	61b8      	str	r0, [r7, #24]
        break;
 8009b8c:	e008      	b.n	8009ba0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b92:	61bb      	str	r3, [r7, #24]
        break;
 8009b94:	e004      	b.n	8009ba0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8009b96:	2300      	movs	r3, #0
 8009b98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	77bb      	strb	r3, [r7, #30]
        break;
 8009b9e:	bf00      	nop
    }

    if (pclk != 0U)
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d018      	beq.n	8009bd8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	085a      	lsrs	r2, r3, #1
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	441a      	add	r2, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	2b0f      	cmp	r3, #15
 8009bc0:	d908      	bls.n	8009bd4 <UART_SetConfig+0x49c>
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bc8:	d204      	bcs.n	8009bd4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	693a      	ldr	r2, [r7, #16]
 8009bd0:	60da      	str	r2, [r3, #12]
 8009bd2:	e001      	b.n	8009bd8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009be4:	7fbb      	ldrb	r3, [r7, #30]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3720      	adds	r7, #32
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	40007c00 	.word	0x40007c00
 8009bf4:	40023800 	.word	0x40023800
 8009bf8:	00f42400 	.word	0x00f42400

08009bfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c08:	f003 0301 	and.w	r3, r3, #1
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d00a      	beq.n	8009c26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	430a      	orrs	r2, r1
 8009c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2a:	f003 0302 	and.w	r3, r3, #2
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00a      	beq.n	8009c48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	430a      	orrs	r2, r1
 8009c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4c:	f003 0304 	and.w	r3, r3, #4
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d00a      	beq.n	8009c6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	430a      	orrs	r2, r1
 8009c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6e:	f003 0308 	and.w	r3, r3, #8
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00a      	beq.n	8009c8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	430a      	orrs	r2, r1
 8009c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c90:	f003 0310 	and.w	r3, r3, #16
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00a      	beq.n	8009cae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	430a      	orrs	r2, r1
 8009cac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb2:	f003 0320 	and.w	r3, r3, #32
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00a      	beq.n	8009cd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	430a      	orrs	r2, r1
 8009cce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d01a      	beq.n	8009d12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	430a      	orrs	r2, r1
 8009cf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cfa:	d10a      	bne.n	8009d12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	430a      	orrs	r2, r1
 8009d10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00a      	beq.n	8009d34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	430a      	orrs	r2, r1
 8009d32:	605a      	str	r2, [r3, #4]
  }
}
 8009d34:	bf00      	nop
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b086      	sub	sp, #24
 8009d44:	af02      	add	r7, sp, #8
 8009d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d50:	f7f8 fece 	bl	8002af0 <HAL_GetTick>
 8009d54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f003 0308 	and.w	r3, r3, #8
 8009d60:	2b08      	cmp	r3, #8
 8009d62:	d10e      	bne.n	8009d82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d68:	9300      	str	r3, [sp, #0]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 f817 	bl	8009da6 <UART_WaitOnFlagUntilTimeout>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d001      	beq.n	8009d82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d7e:	2303      	movs	r3, #3
 8009d80:	e00d      	b.n	8009d9e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2220      	movs	r2, #32
 8009d86:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2220      	movs	r2, #32
 8009d8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b084      	sub	sp, #16
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	60f8      	str	r0, [r7, #12]
 8009dae:	60b9      	str	r1, [r7, #8]
 8009db0:	603b      	str	r3, [r7, #0]
 8009db2:	4613      	mov	r3, r2
 8009db4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009db6:	e05e      	b.n	8009e76 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dbe:	d05a      	beq.n	8009e76 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dc0:	f7f8 fe96 	bl	8002af0 <HAL_GetTick>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	1ad3      	subs	r3, r2, r3
 8009dca:	69ba      	ldr	r2, [r7, #24]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d302      	bcc.n	8009dd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d11b      	bne.n	8009e0e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009de4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	689a      	ldr	r2, [r3, #8]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f022 0201 	bic.w	r2, r2, #1
 8009df4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2220      	movs	r2, #32
 8009dfa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2220      	movs	r2, #32
 8009e00:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	e043      	b.n	8009e96 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f003 0304 	and.w	r3, r3, #4
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d02c      	beq.n	8009e76 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	69db      	ldr	r3, [r3, #28]
 8009e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e2a:	d124      	bne.n	8009e76 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e34:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009e44:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	689a      	ldr	r2, [r3, #8]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f022 0201 	bic.w	r2, r2, #1
 8009e54:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2220      	movs	r2, #32
 8009e5a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2220      	movs	r2, #32
 8009e60:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2220      	movs	r2, #32
 8009e66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009e72:	2303      	movs	r3, #3
 8009e74:	e00f      	b.n	8009e96 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	69da      	ldr	r2, [r3, #28]
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	4013      	ands	r3, r2
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	bf0c      	ite	eq
 8009e86:	2301      	moveq	r3, #1
 8009e88:	2300      	movne	r3, #0
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	79fb      	ldrb	r3, [r7, #7]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d091      	beq.n	8009db8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b083      	sub	sp, #12
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009eb4:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2220      	movs	r2, #32
 8009eba:	679a      	str	r2, [r3, #120]	; 0x78
}
 8009ebc:	bf00      	nop
 8009ebe:	370c      	adds	r7, #12
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009ede:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	689a      	ldr	r2, [r3, #8]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f022 0201 	bic.w	r2, r2, #1
 8009eee:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d107      	bne.n	8009f08 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f022 0210 	bic.w	r2, r2, #16
 8009f06:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2220      	movs	r2, #32
 8009f0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009f1a:	bf00      	nop
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b084      	sub	sp, #16
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f32:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	69db      	ldr	r3, [r3, #28]
 8009f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f3c:	d014      	beq.n	8009f68 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	689a      	ldr	r2, [r3, #8]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f54:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f64:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f66:	e002      	b.n	8009f6e <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f7ff fbc7 	bl	80096fc <HAL_UART_TxCpltCallback>
}
 8009f6e:	bf00      	nop
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b084      	sub	sp, #16
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f82:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f7ff fbc3 	bl	8009710 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f8a:	bf00      	nop
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b086      	sub	sp, #24
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fa4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009faa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fb6:	2b80      	cmp	r3, #128	; 0x80
 8009fb8:	d109      	bne.n	8009fce <UART_DMAError+0x3c>
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	2b21      	cmp	r3, #33	; 0x21
 8009fbe:	d106      	bne.n	8009fce <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8009fc8:	6978      	ldr	r0, [r7, #20]
 8009fca:	f7ff ff68 	bl	8009e9e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd8:	2b40      	cmp	r3, #64	; 0x40
 8009fda:	d109      	bne.n	8009ff0 <UART_DMAError+0x5e>
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2b22      	cmp	r3, #34	; 0x22
 8009fe0:	d106      	bne.n	8009ff0 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8009fea:	6978      	ldr	r0, [r7, #20]
 8009fec:	f7ff ff6c 	bl	8009ec8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ff6:	f043 0210 	orr.w	r2, r3, #16
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a000:	6978      	ldr	r0, [r7, #20]
 800a002:	f7ff fb8f 	bl	8009724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a006:	bf00      	nop
 800a008:	3718      	adds	r7, #24
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b082      	sub	sp, #8
 800a012:	af00      	add	r7, sp, #0
 800a014:	4603      	mov	r3, r0
 800a016:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  //TS_IO_Delay(200);

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800a018:	f000 f9b4 	bl	800a384 <ft5336_I2C_InitializeIfRequired>
}
 800a01c:	bf00      	nop
 800a01e:	3708      	adds	r7, #8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	4603      	mov	r3, r0
 800a02c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800a02e:	bf00      	nop
 800a030:	370c      	adds	r7, #12
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr

0800a03a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b084      	sub	sp, #16
 800a03e:	af00      	add	r7, sp, #0
 800a040:	4603      	mov	r3, r0
 800a042:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 800a044:	2300      	movs	r3, #0
 800a046:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 800a048:	2300      	movs	r3, #0
 800a04a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800a04c:	2300      	movs	r3, #0
 800a04e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800a050:	f000 f998 	bl	800a384 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800a054:	2300      	movs	r3, #0
 800a056:	73fb      	strb	r3, [r7, #15]
 800a058:	e010      	b.n	800a07c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800a05a:	88fb      	ldrh	r3, [r7, #6]
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	21a8      	movs	r1, #168	; 0xa8
 800a060:	4618      	mov	r0, r3
 800a062:	f001 f845 	bl	800b0f0 <TS_IO_Read>
 800a066:	4603      	mov	r3, r0
 800a068:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800a06a:	7b7b      	ldrb	r3, [r7, #13]
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	2b51      	cmp	r3, #81	; 0x51
 800a070:	d101      	bne.n	800a076 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800a072:	2301      	movs	r3, #1
 800a074:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800a076:	7bfb      	ldrb	r3, [r7, #15]
 800a078:	3301      	adds	r3, #1
 800a07a:	73fb      	strb	r3, [r7, #15]
 800a07c:	7bfb      	ldrb	r3, [r7, #15]
 800a07e:	2b02      	cmp	r3, #2
 800a080:	d802      	bhi.n	800a088 <ft5336_ReadID+0x4e>
 800a082:	7bbb      	ldrb	r3, [r7, #14]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d0e8      	beq.n	800a05a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 800a088:	7b7b      	ldrb	r3, [r7, #13]
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	b29b      	uxth	r3, r3
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b082      	sub	sp, #8
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	4603      	mov	r3, r0
 800a09e:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 800a0a0:	88fb      	ldrh	r3, [r7, #6]
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f000 f97c 	bl	800a3a0 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800a0a8:	88fb      	ldrh	r3, [r7, #6]
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f000 f932 	bl	800a314 <ft5336_TS_DisableIT>
}
 800a0b0:	bf00      	nop
 800a0b2:	3708      	adds	r7, #8
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	4603      	mov	r3, r0
 800a0c0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800a0c6:	88fb      	ldrh	r3, [r7, #6]
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	2102      	movs	r1, #2
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f001 f80f 	bl	800b0f0 <TS_IO_Read>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800a0d6:	7bfb      	ldrb	r3, [r7, #15]
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	f003 030f 	and.w	r3, r3, #15
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800a0e2:	7bfb      	ldrb	r3, [r7, #15]
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	2b05      	cmp	r3, #5
 800a0e8:	d901      	bls.n	800a0ee <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 800a0ee:	7bfb      	ldrb	r3, [r7, #15]
 800a0f0:	b2da      	uxtb	r2, r3
 800a0f2:	4b05      	ldr	r3, [pc, #20]	; (800a108 <ft5336_TS_DetectTouch+0x50>)
 800a0f4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800a0f6:	4b04      	ldr	r3, [pc, #16]	; (800a108 <ft5336_TS_DetectTouch+0x50>)
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800a0fc:	7bfb      	ldrb	r3, [r7, #15]
 800a0fe:	b2db      	uxtb	r3, r3
}
 800a100:	4618      	mov	r0, r3
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	200000d0 	.word	0x200000d0

0800a10c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b086      	sub	sp, #24
 800a110:	af00      	add	r7, sp, #0
 800a112:	4603      	mov	r3, r0
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	607a      	str	r2, [r7, #4]
 800a118:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800a11a:	2300      	movs	r3, #0
 800a11c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800a11e:	2300      	movs	r3, #0
 800a120:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800a122:	2300      	movs	r3, #0
 800a124:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800a126:	2300      	movs	r3, #0
 800a128:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800a12a:	2300      	movs	r3, #0
 800a12c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800a12e:	4b6d      	ldr	r3, [pc, #436]	; (800a2e4 <ft5336_TS_GetXY+0x1d8>)
 800a130:	789a      	ldrb	r2, [r3, #2]
 800a132:	4b6c      	ldr	r3, [pc, #432]	; (800a2e4 <ft5336_TS_GetXY+0x1d8>)
 800a134:	785b      	ldrb	r3, [r3, #1]
 800a136:	429a      	cmp	r2, r3
 800a138:	f080 80cf 	bcs.w	800a2da <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800a13c:	4b69      	ldr	r3, [pc, #420]	; (800a2e4 <ft5336_TS_GetXY+0x1d8>)
 800a13e:	789b      	ldrb	r3, [r3, #2]
 800a140:	2b09      	cmp	r3, #9
 800a142:	d871      	bhi.n	800a228 <ft5336_TS_GetXY+0x11c>
 800a144:	a201      	add	r2, pc, #4	; (adr r2, 800a14c <ft5336_TS_GetXY+0x40>)
 800a146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a14a:	bf00      	nop
 800a14c:	0800a175 	.word	0x0800a175
 800a150:	0800a187 	.word	0x0800a187
 800a154:	0800a199 	.word	0x0800a199
 800a158:	0800a1ab 	.word	0x0800a1ab
 800a15c:	0800a1bd 	.word	0x0800a1bd
 800a160:	0800a1cf 	.word	0x0800a1cf
 800a164:	0800a1e1 	.word	0x0800a1e1
 800a168:	0800a1f3 	.word	0x0800a1f3
 800a16c:	0800a205 	.word	0x0800a205
 800a170:	0800a217 	.word	0x0800a217
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800a174:	2304      	movs	r3, #4
 800a176:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 800a178:	2303      	movs	r3, #3
 800a17a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800a17c:	2306      	movs	r3, #6
 800a17e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 800a180:	2305      	movs	r3, #5
 800a182:	753b      	strb	r3, [r7, #20]
      break;
 800a184:	e051      	b.n	800a22a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800a186:	230a      	movs	r3, #10
 800a188:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800a18a:	2309      	movs	r3, #9
 800a18c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800a18e:	230c      	movs	r3, #12
 800a190:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800a192:	230b      	movs	r3, #11
 800a194:	753b      	strb	r3, [r7, #20]
      break;
 800a196:	e048      	b.n	800a22a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 800a198:	2310      	movs	r3, #16
 800a19a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 800a19c:	230f      	movs	r3, #15
 800a19e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 800a1a0:	2312      	movs	r3, #18
 800a1a2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800a1a4:	2311      	movs	r3, #17
 800a1a6:	753b      	strb	r3, [r7, #20]
      break;
 800a1a8:	e03f      	b.n	800a22a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800a1aa:	2316      	movs	r3, #22
 800a1ac:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800a1ae:	2315      	movs	r3, #21
 800a1b0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800a1b2:	2318      	movs	r3, #24
 800a1b4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800a1b6:	2317      	movs	r3, #23
 800a1b8:	753b      	strb	r3, [r7, #20]
      break;
 800a1ba:	e036      	b.n	800a22a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 800a1bc:	231c      	movs	r3, #28
 800a1be:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 800a1c0:	231b      	movs	r3, #27
 800a1c2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800a1c4:	231e      	movs	r3, #30
 800a1c6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 800a1c8:	231d      	movs	r3, #29
 800a1ca:	753b      	strb	r3, [r7, #20]
      break;
 800a1cc:	e02d      	b.n	800a22a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800a1ce:	2322      	movs	r3, #34	; 0x22
 800a1d0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800a1d2:	2321      	movs	r3, #33	; 0x21
 800a1d4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800a1d6:	2324      	movs	r3, #36	; 0x24
 800a1d8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800a1da:	2323      	movs	r3, #35	; 0x23
 800a1dc:	753b      	strb	r3, [r7, #20]
      break;
 800a1de:	e024      	b.n	800a22a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 800a1e0:	2328      	movs	r3, #40	; 0x28
 800a1e2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800a1e4:	2327      	movs	r3, #39	; 0x27
 800a1e6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 800a1e8:	232a      	movs	r3, #42	; 0x2a
 800a1ea:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 800a1ec:	2329      	movs	r3, #41	; 0x29
 800a1ee:	753b      	strb	r3, [r7, #20]
      break;
 800a1f0:	e01b      	b.n	800a22a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800a1f2:	232e      	movs	r3, #46	; 0x2e
 800a1f4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800a1f6:	232d      	movs	r3, #45	; 0x2d
 800a1f8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800a1fa:	2330      	movs	r3, #48	; 0x30
 800a1fc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800a1fe:	232f      	movs	r3, #47	; 0x2f
 800a200:	753b      	strb	r3, [r7, #20]
      break;
 800a202:	e012      	b.n	800a22a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 800a204:	2334      	movs	r3, #52	; 0x34
 800a206:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 800a208:	2333      	movs	r3, #51	; 0x33
 800a20a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 800a20c:	2336      	movs	r3, #54	; 0x36
 800a20e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 800a210:	2335      	movs	r3, #53	; 0x35
 800a212:	753b      	strb	r3, [r7, #20]
      break;
 800a214:	e009      	b.n	800a22a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800a216:	233a      	movs	r3, #58	; 0x3a
 800a218:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800a21a:	2339      	movs	r3, #57	; 0x39
 800a21c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800a21e:	233c      	movs	r3, #60	; 0x3c
 800a220:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800a222:	233b      	movs	r3, #59	; 0x3b
 800a224:	753b      	strb	r3, [r7, #20]
      break;
 800a226:	e000      	b.n	800a22a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 800a228:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800a22a:	89fb      	ldrh	r3, [r7, #14]
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	7dfa      	ldrb	r2, [r7, #23]
 800a230:	4611      	mov	r1, r2
 800a232:	4618      	mov	r0, r3
 800a234:	f000 ff5c 	bl	800b0f0 <TS_IO_Read>
 800a238:	4603      	mov	r3, r0
 800a23a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800a23c:	7cfb      	ldrb	r3, [r7, #19]
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	b29a      	uxth	r2, r3
 800a242:	4b29      	ldr	r3, [pc, #164]	; (800a2e8 <ft5336_TS_GetXY+0x1dc>)
 800a244:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800a246:	89fb      	ldrh	r3, [r7, #14]
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	7dba      	ldrb	r2, [r7, #22]
 800a24c:	4611      	mov	r1, r2
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 ff4e 	bl	800b0f0 <TS_IO_Read>
 800a254:	4603      	mov	r3, r0
 800a256:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800a258:	7cfb      	ldrb	r3, [r7, #19]
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	021b      	lsls	r3, r3, #8
 800a25e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a262:	b21a      	sxth	r2, r3
 800a264:	4b20      	ldr	r3, [pc, #128]	; (800a2e8 <ft5336_TS_GetXY+0x1dc>)
 800a266:	881b      	ldrh	r3, [r3, #0]
 800a268:	b21b      	sxth	r3, r3
 800a26a:	4313      	orrs	r3, r2
 800a26c:	b21b      	sxth	r3, r3
 800a26e:	b29a      	uxth	r2, r3
 800a270:	4b1d      	ldr	r3, [pc, #116]	; (800a2e8 <ft5336_TS_GetXY+0x1dc>)
 800a272:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800a274:	4b1c      	ldr	r3, [pc, #112]	; (800a2e8 <ft5336_TS_GetXY+0x1dc>)
 800a276:	881a      	ldrh	r2, [r3, #0]
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800a27c:	89fb      	ldrh	r3, [r7, #14]
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	7d7a      	ldrb	r2, [r7, #21]
 800a282:	4611      	mov	r1, r2
 800a284:	4618      	mov	r0, r3
 800a286:	f000 ff33 	bl	800b0f0 <TS_IO_Read>
 800a28a:	4603      	mov	r3, r0
 800a28c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800a28e:	7cfb      	ldrb	r3, [r7, #19]
 800a290:	b2db      	uxtb	r3, r3
 800a292:	b29a      	uxth	r2, r3
 800a294:	4b14      	ldr	r3, [pc, #80]	; (800a2e8 <ft5336_TS_GetXY+0x1dc>)
 800a296:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800a298:	89fb      	ldrh	r3, [r7, #14]
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	7d3a      	ldrb	r2, [r7, #20]
 800a29e:	4611      	mov	r1, r2
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f000 ff25 	bl	800b0f0 <TS_IO_Read>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800a2aa:	7cfb      	ldrb	r3, [r7, #19]
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	021b      	lsls	r3, r3, #8
 800a2b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a2b4:	b21a      	sxth	r2, r3
 800a2b6:	4b0c      	ldr	r3, [pc, #48]	; (800a2e8 <ft5336_TS_GetXY+0x1dc>)
 800a2b8:	881b      	ldrh	r3, [r3, #0]
 800a2ba:	b21b      	sxth	r3, r3
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	b21b      	sxth	r3, r3
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	4b09      	ldr	r3, [pc, #36]	; (800a2e8 <ft5336_TS_GetXY+0x1dc>)
 800a2c4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800a2c6:	4b08      	ldr	r3, [pc, #32]	; (800a2e8 <ft5336_TS_GetXY+0x1dc>)
 800a2c8:	881a      	ldrh	r2, [r3, #0]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800a2ce:	4b05      	ldr	r3, [pc, #20]	; (800a2e4 <ft5336_TS_GetXY+0x1d8>)
 800a2d0:	789b      	ldrb	r3, [r3, #2]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	b2da      	uxtb	r2, r3
 800a2d6:	4b03      	ldr	r3, [pc, #12]	; (800a2e4 <ft5336_TS_GetXY+0x1d8>)
 800a2d8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800a2da:	bf00      	nop
 800a2dc:	3718      	adds	r7, #24
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	200000d0 	.word	0x200000d0
 800a2e8:	200000d4 	.word	0x200000d4

0800a2ec <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800a2fe:	88fb      	ldrh	r3, [r7, #6]
 800a300:	b2db      	uxtb	r3, r3
 800a302:	7bfa      	ldrb	r2, [r7, #15]
 800a304:	21a4      	movs	r1, #164	; 0xa4
 800a306:	4618      	mov	r0, r3
 800a308:	f000 fed8 	bl	800b0bc <TS_IO_Write>
}
 800a30c:	bf00      	nop
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	4603      	mov	r3, r0
 800a31c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800a31e:	2300      	movs	r3, #0
 800a320:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800a322:	2300      	movs	r3, #0
 800a324:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800a326:	88fb      	ldrh	r3, [r7, #6]
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	7bfa      	ldrb	r2, [r7, #15]
 800a32c:	21a4      	movs	r1, #164	; 0xa4
 800a32e:	4618      	mov	r0, r3
 800a330:	f000 fec4 	bl	800b0bc <TS_IO_Write>
}
 800a334:	bf00      	nop
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	4603      	mov	r3, r0
 800a344:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800a346:	2300      	movs	r3, #0
}
 800a348:	4618      	mov	r0, r3
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	4603      	mov	r3, r0
 800a35c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800a35e:	bf00      	nop
 800a360:	370c      	adds	r7, #12
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
	...

0800a36c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 800a36c:	b480      	push	{r7}
 800a36e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 800a370:	4b03      	ldr	r3, [pc, #12]	; (800a380 <ft5336_Get_I2C_InitializedStatus+0x14>)
 800a372:	781b      	ldrb	r3, [r3, #0]
}
 800a374:	4618      	mov	r0, r3
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
 800a37e:	bf00      	nop
 800a380:	200000d0 	.word	0x200000d0

0800a384 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800a388:	f7ff fff0 	bl	800a36c <ft5336_Get_I2C_InitializedStatus>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d102      	bne.n	800a398 <ft5336_I2C_InitializeIfRequired+0x14>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800a392:	4b02      	ldr	r3, [pc, #8]	; (800a39c <ft5336_I2C_InitializeIfRequired+0x18>)
 800a394:	2201      	movs	r2, #1
 800a396:	701a      	strb	r2, [r3, #0]
  }
}
 800a398:	bf00      	nop
 800a39a:	bd80      	pop	{r7, pc}
 800a39c:	200000d0 	.word	0x200000d0

0800a3a0 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b085      	sub	sp, #20
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3714      	adds	r7, #20
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
    {
 800a3c4:	4a04      	ldr	r2, [pc, #16]	; (800a3d8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	601a      	str	r2, [r3, #0]
    }
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr
 800a3d8:	0801877c 	.word	0x0801877c

0800a3dc <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
    }
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f7ff ffe9 	bl	800a3bc <_ZN8touchgfx12FontProviderD1Ev>
 800a3ea:	2104      	movs	r1, #4
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f00b fe0b 	bl	8016008 <_ZdlPvj>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	460b      	mov	r3, r1
 800a406:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800a408:	887b      	ldrh	r3, [r7, #2]
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d010      	beq.n	800a430 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800a40e:	2b02      	cmp	r3, #2
 800a410:	dc13      	bgt.n	800a43a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800a412:	2b00      	cmp	r3, #0
 800a414:	d002      	beq.n	800a41c <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800a416:	2b01      	cmp	r3, #1
 800a418:	d005      	beq.n	800a426 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800a41a:	e00e      	b.n	800a43a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800a41c:	f000 fc1c 	bl	800ac58 <_ZN17TypedTextDatabase8getFontsEv>
 800a420:	4603      	mov	r3, r0
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	e00a      	b.n	800a43c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800a426:	f000 fc17 	bl	800ac58 <_ZN17TypedTextDatabase8getFontsEv>
 800a42a:	4603      	mov	r3, r0
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	e005      	b.n	800a43c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800a430:	f000 fc12 	bl	800ac58 <_ZN17TypedTextDatabase8getFontsEv>
 800a434:	4603      	mov	r3, r0
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	e000      	b.n	800a43c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800a43a:	2300      	movs	r3, #0
    }
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3708      	adds	r7, #8
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	4a05      	ldr	r2, [pc, #20]	; (800a464 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	601a      	str	r2, [r3, #0]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4618      	mov	r0, r3
 800a456:	f7ff ffb1 	bl	800a3bc <_ZN8touchgfx12FontProviderD1Ev>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4618      	mov	r0, r3
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	08018768 	.word	0x08018768

0800a468 <_ZN23ApplicationFontProviderD0Ev>:
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f7ff ffe7 	bl	800a444 <_ZN23ApplicationFontProviderD1Ev>
 800a476:	2104      	movs	r1, #4
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f00b fdc5 	bl	8016008 <_ZdlPvj>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4618      	mov	r0, r3
 800a482:	3708      	adds	r7, #8
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
    {
 800a490:	4a04      	ldr	r2, [pc, #16]	; (800a4a4 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	601a      	str	r2, [r3, #0]
    }
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4618      	mov	r0, r3
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr
 800a4a4:	080187f0 	.word	0x080187f0

0800a4a8 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
    }
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f7ff ffe9 	bl	800a488 <_ZN8touchgfx4FontD1Ev>
 800a4b6:	2110      	movs	r1, #16
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f00b fda5 	bl	8016008 <_ZdlPvj>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800a4c8:	b590      	push	{r4, r7, lr}
 800a4ca:	b087      	sub	sp, #28
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800a4d4:	887b      	ldrh	r3, [r7, #2]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d101      	bne.n	800a4de <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	e010      	b.n	800a500 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	3308      	adds	r3, #8
 800a4ec:	681c      	ldr	r4, [r3, #0]
 800a4ee:	f107 030f 	add.w	r3, r7, #15
 800a4f2:	f107 0210 	add.w	r2, r7, #16
 800a4f6:	8879      	ldrh	r1, [r7, #2]
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	47a0      	blx	r4
 800a4fc:	6178      	str	r0, [r7, #20]
        return glyph;
 800a4fe:	697b      	ldr	r3, [r7, #20]
    }
 800a500:	4618      	mov	r0, r3
 800a502:	371c      	adds	r7, #28
 800a504:	46bd      	mov	sp, r7
 800a506:	bd90      	pop	{r4, r7, pc}

0800a508 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	895b      	ldrh	r3, [r3, #10]
    }
 800a514:	4618      	mov	r0, r3
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	899b      	ldrh	r3, [r3, #12]
    }
 800a52c:	4618      	mov	r0, r3
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	889b      	ldrh	r3, [r3, #4]
    }
 800a544:	4618      	mov	r0, r3
 800a546:	370c      	adds	r7, #12
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	889a      	ldrh	r2, [r3, #4]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	799b      	ldrb	r3, [r3, #6]
 800a560:	b29b      	uxth	r3, r3
 800a562:	4413      	add	r3, r2
 800a564:	b29b      	uxth	r3, r3
    }
 800a566:	4618      	mov	r0, r3
 800a568:	370c      	adds	r7, #12
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr

0800a572 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800a572:	b480      	push	{r7}
 800a574:	b083      	sub	sp, #12
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	79db      	ldrb	r3, [r3, #7]
 800a57e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800a582:	b2db      	uxtb	r3, r3
    }
 800a584:	4618      	mov	r0, r3
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	79db      	ldrb	r3, [r3, #7]
 800a59c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a5a0:	b2db      	uxtb	r3, r3
    }
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	370c      	adds	r7, #12
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
	...

0800a5b0 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	4a05      	ldr	r2, [pc, #20]	; (800a5d0 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	601a      	str	r2, [r3, #0]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7ff ff61 	bl	800a488 <_ZN8touchgfx4FontD1Ev>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3708      	adds	r7, #8
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	0801960c 	.word	0x0801960c

0800a5d4 <_ZN8touchgfx9ConstFontD0Ev>:
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f7ff ffe7 	bl	800a5b0 <_ZN8touchgfx9ConstFontD1Ev>
 800a5e2:	2118      	movs	r1, #24
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f00b fd0f 	bl	8016008 <_ZdlPvj>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3708      	adds	r7, #8
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	4a05      	ldr	r2, [pc, #20]	; (800a614 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	601a      	str	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4618      	mov	r0, r3
 800a606:	f7ff ffd3 	bl	800a5b0 <_ZN8touchgfx9ConstFontD1Ev>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4618      	mov	r0, r3
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	08018790 	.word	0x08018790

0800a618 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f7ff ffe7 	bl	800a5f4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800a626:	2124      	movs	r1, #36	; 0x24
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f00b fced 	bl	8016008 <_ZdlPvj>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4618      	mov	r0, r3
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6a1b      	ldr	r3, [r3, #32]
    }
 800a644:	4618      	mov	r0, r3
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800a650:	b580      	push	{r7, lr}
 800a652:	b08c      	sub	sp, #48	; 0x30
 800a654:	af08      	add	r7, sp, #32
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	4611      	mov	r1, r2
 800a65c:	461a      	mov	r2, r3
 800a65e:	460b      	mov	r3, r1
 800a660:	80fb      	strh	r3, [r7, #6]
 800a662:	4613      	mov	r3, r2
 800a664:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800a666:	68f8      	ldr	r0, [r7, #12]
 800a668:	88b9      	ldrh	r1, [r7, #4]
 800a66a:	88fa      	ldrh	r2, [r7, #6]
 800a66c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a66e:	9306      	str	r3, [sp, #24]
 800a670:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a672:	9305      	str	r3, [sp, #20]
 800a674:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a678:	9304      	str	r3, [sp, #16]
 800a67a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a67e:	9303      	str	r3, [sp, #12]
 800a680:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a684:	9302      	str	r3, [sp, #8]
 800a686:	7f3b      	ldrb	r3, [r7, #28]
 800a688:	9301      	str	r3, [sp, #4]
 800a68a:	7e3b      	ldrb	r3, [r7, #24]
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	460b      	mov	r3, r1
 800a690:	68b9      	ldr	r1, [r7, #8]
 800a692:	f008 fd33 	bl	80130fc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800a696:	4a08      	ldr	r2, [pc, #32]	; (800a6b8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	601a      	str	r2, [r3, #0]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6a0:	619a      	str	r2, [r3, #24]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6a6:	61da      	str	r2, [r3, #28]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a6ac:	621a      	str	r2, [r3, #32]
{
}
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3710      	adds	r7, #16
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	08018790 	.word	0x08018790

0800a6bc <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b085      	sub	sp, #20
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	699b      	ldr	r3, [r3, #24]
 800a6ca:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	889b      	ldrh	r3, [r3, #4]
 800a6d0:	0adb      	lsrs	r3, r3, #11
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	68fa      	ldr	r2, [r7, #12]
 800a6d8:	4413      	add	r3, r2
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4413      	add	r3, r2
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3714      	adds	r7, #20
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr

0800a6ee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800a6ee:	b480      	push	{r7}
 800a6f0:	b089      	sub	sp, #36	; 0x24
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	60f8      	str	r0, [r7, #12]
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	607a      	str	r2, [r7, #4]
 800a6fa:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d003      	beq.n	800a70a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	7b1b      	ldrb	r3, [r3, #12]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d101      	bne.n	800a70e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800a70a:	2300      	movs	r3, #0
 800a70c:	e030      	b.n	800a770 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	69da      	ldr	r2, [r3, #28]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	7b5b      	ldrb	r3, [r3, #13]
 800a71a:	021b      	lsls	r3, r3, #8
 800a71c:	b21b      	sxth	r3, r3
 800a71e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a722:	b219      	sxth	r1, r3
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	7adb      	ldrb	r3, [r3, #11]
 800a728:	b21b      	sxth	r3, r3
 800a72a:	430b      	orrs	r3, r1
 800a72c:	b21b      	sxth	r3, r3
 800a72e:	b29b      	uxth	r3, r3
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	4413      	add	r3, r2
 800a734:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	7b1b      	ldrb	r3, [r3, #12]
 800a73a:	837b      	strh	r3, [r7, #26]
 800a73c:	8b7b      	ldrh	r3, [r7, #26]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d015      	beq.n	800a76e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	881b      	ldrh	r3, [r3, #0]
 800a746:	897a      	ldrh	r2, [r7, #10]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d103      	bne.n	800a754 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800a752:	e00d      	b.n	800a770 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	881b      	ldrh	r3, [r3, #0]
 800a758:	897a      	ldrh	r2, [r7, #10]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d306      	bcc.n	800a76c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800a75e:	8b7b      	ldrh	r3, [r7, #26]
 800a760:	3b01      	subs	r3, #1
 800a762:	837b      	strh	r3, [r7, #26]
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	3304      	adds	r3, #4
 800a768:	61fb      	str	r3, [r7, #28]
 800a76a:	e7e7      	b.n	800a73c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800a76c:	bf00      	nop
        }
    }
    return 0;
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	3724      	adds	r7, #36	; 0x24
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 68, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800a77c:	b580      	push	{r7, lr}
 800a77e:	af00      	add	r7, sp, #0
 800a780:	4801      	ldr	r0, [pc, #4]	; (800a788 <__tcf_0+0xc>)
 800a782:	f7ff ff37 	bl	800a5f4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800a786:	bd80      	pop	{r7, pc}
 800a788:	200000d8 	.word	0x200000d8

0800a78c <_Z23getFont_verdana_10_4bppv>:
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b08a      	sub	sp, #40	; 0x28
 800a790:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 68, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800a792:	4b1e      	ldr	r3, [pc, #120]	; (800a80c <_Z23getFont_verdana_10_4bppv+0x80>)
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	f3bf 8f5b 	dmb	ish
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	f003 0301 	and.w	r3, r3, #1
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	bf0c      	ite	eq
 800a7a4:	2301      	moveq	r3, #1
 800a7a6:	2300      	movne	r3, #0
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d02a      	beq.n	800a804 <_Z23getFont_verdana_10_4bppv+0x78>
 800a7ae:	4817      	ldr	r0, [pc, #92]	; (800a80c <_Z23getFont_verdana_10_4bppv+0x80>)
 800a7b0:	f00b fc2c 	bl	801600c <__cxa_guard_acquire>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	bf14      	ite	ne
 800a7ba:	2301      	movne	r3, #1
 800a7bc:	2300      	moveq	r3, #0
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d01f      	beq.n	800a804 <_Z23getFont_verdana_10_4bppv+0x78>
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	9308      	str	r3, [sp, #32]
 800a7cc:	233f      	movs	r3, #63	; 0x3f
 800a7ce:	9307      	str	r3, [sp, #28]
 800a7d0:	4b0f      	ldr	r3, [pc, #60]	; (800a810 <_Z23getFont_verdana_10_4bppv+0x84>)
 800a7d2:	9306      	str	r3, [sp, #24]
 800a7d4:	4b0f      	ldr	r3, [pc, #60]	; (800a814 <_Z23getFont_verdana_10_4bppv+0x88>)
 800a7d6:	9305      	str	r3, [sp, #20]
 800a7d8:	2301      	movs	r3, #1
 800a7da:	9304      	str	r3, [sp, #16]
 800a7dc:	2301      	movs	r3, #1
 800a7de:	9303      	str	r3, [sp, #12]
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	9302      	str	r3, [sp, #8]
 800a7e4:	2304      	movs	r3, #4
 800a7e6:	9301      	str	r3, [sp, #4]
 800a7e8:	2302      	movs	r3, #2
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	230a      	movs	r3, #10
 800a7ee:	2244      	movs	r2, #68	; 0x44
 800a7f0:	4909      	ldr	r1, [pc, #36]	; (800a818 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800a7f2:	480a      	ldr	r0, [pc, #40]	; (800a81c <_Z23getFont_verdana_10_4bppv+0x90>)
 800a7f4:	f7ff ff2c 	bl	800a650 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800a7f8:	4804      	ldr	r0, [pc, #16]	; (800a80c <_Z23getFont_verdana_10_4bppv+0x80>)
 800a7fa:	f00b fc13 	bl	8016024 <__cxa_guard_release>
 800a7fe:	4808      	ldr	r0, [pc, #32]	; (800a820 <_Z23getFont_verdana_10_4bppv+0x94>)
 800a800:	f00b fe52 	bl	80164a8 <atexit>
    return verdana_10_4bpp;
 800a804:	4b05      	ldr	r3, [pc, #20]	; (800a81c <_Z23getFont_verdana_10_4bppv+0x90>)
}
 800a806:	4618      	mov	r0, r3
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	200000fc 	.word	0x200000fc
 800a810:	0801b490 	.word	0x0801b490
 800a814:	080187dc 	.word	0x080187dc
 800a818:	0801b09c 	.word	0x0801b09c
 800a81c:	200000d8 	.word	0x200000d8
 800a820:	0800a77d 	.word	0x0800a77d

0800a824 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800a824:	b580      	push	{r7, lr}
 800a826:	af00      	add	r7, sp, #0
 800a828:	4801      	ldr	r0, [pc, #4]	; (800a830 <__tcf_0+0xc>)
 800a82a:	f7ff fee3 	bl	800a5f4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	20000100 	.word	0x20000100

0800a834 <_Z23getFont_verdana_20_4bppv>:
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b08a      	sub	sp, #40	; 0x28
 800a838:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800a83a:	4b1e      	ldr	r3, [pc, #120]	; (800a8b4 <_Z23getFont_verdana_20_4bppv+0x80>)
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	f3bf 8f5b 	dmb	ish
 800a842:	b2db      	uxtb	r3, r3
 800a844:	f003 0301 	and.w	r3, r3, #1
 800a848:	2b00      	cmp	r3, #0
 800a84a:	bf0c      	ite	eq
 800a84c:	2301      	moveq	r3, #1
 800a84e:	2300      	movne	r3, #0
 800a850:	b2db      	uxtb	r3, r3
 800a852:	2b00      	cmp	r3, #0
 800a854:	d02a      	beq.n	800a8ac <_Z23getFont_verdana_20_4bppv+0x78>
 800a856:	4817      	ldr	r0, [pc, #92]	; (800a8b4 <_Z23getFont_verdana_20_4bppv+0x80>)
 800a858:	f00b fbd8 	bl	801600c <__cxa_guard_acquire>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	bf14      	ite	ne
 800a862:	2301      	movne	r3, #1
 800a864:	2300      	moveq	r3, #0
 800a866:	b2db      	uxtb	r3, r3
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d01f      	beq.n	800a8ac <_Z23getFont_verdana_20_4bppv+0x78>
 800a86c:	2300      	movs	r3, #0
 800a86e:	9309      	str	r3, [sp, #36]	; 0x24
 800a870:	2300      	movs	r3, #0
 800a872:	9308      	str	r3, [sp, #32]
 800a874:	233f      	movs	r3, #63	; 0x3f
 800a876:	9307      	str	r3, [sp, #28]
 800a878:	4b0f      	ldr	r3, [pc, #60]	; (800a8b8 <_Z23getFont_verdana_20_4bppv+0x84>)
 800a87a:	9306      	str	r3, [sp, #24]
 800a87c:	4b0f      	ldr	r3, [pc, #60]	; (800a8bc <_Z23getFont_verdana_20_4bppv+0x88>)
 800a87e:	9305      	str	r3, [sp, #20]
 800a880:	2300      	movs	r3, #0
 800a882:	9304      	str	r3, [sp, #16]
 800a884:	2300      	movs	r3, #0
 800a886:	9303      	str	r3, [sp, #12]
 800a888:	2301      	movs	r3, #1
 800a88a:	9302      	str	r3, [sp, #8]
 800a88c:	2304      	movs	r3, #4
 800a88e:	9301      	str	r3, [sp, #4]
 800a890:	2300      	movs	r3, #0
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	2314      	movs	r3, #20
 800a896:	2201      	movs	r2, #1
 800a898:	4909      	ldr	r1, [pc, #36]	; (800a8c0 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800a89a:	480a      	ldr	r0, [pc, #40]	; (800a8c4 <_Z23getFont_verdana_20_4bppv+0x90>)
 800a89c:	f7ff fed8 	bl	800a650 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800a8a0:	4804      	ldr	r0, [pc, #16]	; (800a8b4 <_Z23getFont_verdana_20_4bppv+0x80>)
 800a8a2:	f00b fbbf 	bl	8016024 <__cxa_guard_release>
 800a8a6:	4808      	ldr	r0, [pc, #32]	; (800a8c8 <_Z23getFont_verdana_20_4bppv+0x94>)
 800a8a8:	f00b fdfe 	bl	80164a8 <atexit>
    return verdana_20_4bpp;
 800a8ac:	4b05      	ldr	r3, [pc, #20]	; (800a8c4 <_Z23getFont_verdana_20_4bppv+0x90>)
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	20000124 	.word	0x20000124
 800a8b8:	0801b4a8 	.word	0x0801b4a8
 800a8bc:	080187e0 	.word	0x080187e0
 800a8c0:	0801b454 	.word	0x0801b454
 800a8c4:	20000100 	.word	0x20000100
 800a8c8:	0800a825 	.word	0x0800a825

0800a8cc <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 3, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	4801      	ldr	r0, [pc, #4]	; (800a8d8 <__tcf_0+0xc>)
 800a8d2:	f7ff fe8f 	bl	800a5f4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	20000128 	.word	0x20000128

0800a8dc <_Z23getFont_verdana_40_4bppv>:
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b08a      	sub	sp, #40	; 0x28
 800a8e0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 3, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800a8e2:	4b1e      	ldr	r3, [pc, #120]	; (800a95c <_Z23getFont_verdana_40_4bppv+0x80>)
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	f3bf 8f5b 	dmb	ish
 800a8ea:	b2db      	uxtb	r3, r3
 800a8ec:	f003 0301 	and.w	r3, r3, #1
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	bf0c      	ite	eq
 800a8f4:	2301      	moveq	r3, #1
 800a8f6:	2300      	movne	r3, #0
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d02a      	beq.n	800a954 <_Z23getFont_verdana_40_4bppv+0x78>
 800a8fe:	4817      	ldr	r0, [pc, #92]	; (800a95c <_Z23getFont_verdana_40_4bppv+0x80>)
 800a900:	f00b fb84 	bl	801600c <__cxa_guard_acquire>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	bf14      	ite	ne
 800a90a:	2301      	movne	r3, #1
 800a90c:	2300      	moveq	r3, #0
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	2b00      	cmp	r3, #0
 800a912:	d01f      	beq.n	800a954 <_Z23getFont_verdana_40_4bppv+0x78>
 800a914:	2300      	movs	r3, #0
 800a916:	9309      	str	r3, [sp, #36]	; 0x24
 800a918:	2300      	movs	r3, #0
 800a91a:	9308      	str	r3, [sp, #32]
 800a91c:	233f      	movs	r3, #63	; 0x3f
 800a91e:	9307      	str	r3, [sp, #28]
 800a920:	4b0f      	ldr	r3, [pc, #60]	; (800a960 <_Z23getFont_verdana_40_4bppv+0x84>)
 800a922:	9306      	str	r3, [sp, #24]
 800a924:	4b0f      	ldr	r3, [pc, #60]	; (800a964 <_Z23getFont_verdana_40_4bppv+0x88>)
 800a926:	9305      	str	r3, [sp, #20]
 800a928:	2300      	movs	r3, #0
 800a92a:	9304      	str	r3, [sp, #16]
 800a92c:	2300      	movs	r3, #0
 800a92e:	9303      	str	r3, [sp, #12]
 800a930:	2301      	movs	r3, #1
 800a932:	9302      	str	r3, [sp, #8]
 800a934:	2304      	movs	r3, #4
 800a936:	9301      	str	r3, [sp, #4]
 800a938:	2300      	movs	r3, #0
 800a93a:	9300      	str	r3, [sp, #0]
 800a93c:	2328      	movs	r3, #40	; 0x28
 800a93e:	2203      	movs	r2, #3
 800a940:	4909      	ldr	r1, [pc, #36]	; (800a968 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800a942:	480a      	ldr	r0, [pc, #40]	; (800a96c <_Z23getFont_verdana_40_4bppv+0x90>)
 800a944:	f7ff fe84 	bl	800a650 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800a948:	4804      	ldr	r0, [pc, #16]	; (800a95c <_Z23getFont_verdana_40_4bppv+0x80>)
 800a94a:	f00b fb6b 	bl	8016024 <__cxa_guard_release>
 800a94e:	4808      	ldr	r0, [pc, #32]	; (800a970 <_Z23getFont_verdana_40_4bppv+0x94>)
 800a950:	f00b fdaa 	bl	80164a8 <atexit>
    return verdana_40_4bpp;
 800a954:	4b05      	ldr	r3, [pc, #20]	; (800a96c <_Z23getFont_verdana_40_4bppv+0x90>)
}
 800a956:	4618      	mov	r0, r3
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	2000014c 	.word	0x2000014c
 800a960:	0801b4ac 	.word	0x0801b4ac
 800a964:	080187e4 	.word	0x080187e4
 800a968:	0801b464 	.word	0x0801b464
 800a96c:	20000128 	.word	0x20000128
 800a970:	0800a8cd 	.word	0x0800a8cd

0800a974 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	4618      	mov	r0, r3
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800a98c:	b480      	push	{r7}
 800a98e:	af00      	add	r7, sp, #0
    {
        return instance;
 800a990:	4b03      	ldr	r3, [pc, #12]	; (800a9a0 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800a992:	681b      	ldr	r3, [r3, #0]
    }
 800a994:	4618      	mov	r0, r3
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	20001250 	.word	0x20001250

0800a9a4 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800a9a4:	b480      	push	{r7}
 800a9a6:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800a9a8:	4b0b      	ldr	r3, [pc, #44]	; (800a9d8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d008      	beq.n	800a9c6 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800a9b4:	4b08      	ldr	r3, [pc, #32]	; (800a9d8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d003      	beq.n	800a9c6 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800a9be:	4b06      	ldr	r3, [pc, #24]	; (800a9d8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9c4:	e002      	b.n	800a9cc <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800a9c6:	4b04      	ldr	r3, [pc, #16]	; (800a9d8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	689b      	ldr	r3, [r3, #8]
        }
    }
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop
 800a9d8:	20001250 	.word	0x20001250

0800a9dc <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
    {
        return color;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
    }
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
    {
        x = 0;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	801a      	strh	r2, [r3, #0]
        y = 0;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	805a      	strh	r2, [r3, #2]
        width = 0;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	809a      	strh	r2, [r3, #4]
        height = 0;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	80da      	strh	r2, [r3, #6]
    }
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	4618      	mov	r0, r3
 800aa18:	370c      	adds	r7, #12
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr

0800aa22 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b082      	sub	sp, #8
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	807b      	strh	r3, [r7, #2]
 800aa2e:	4613      	mov	r3, r2
 800aa30:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	332c      	adds	r3, #44	; 0x2c
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800aa3e:	4611      	mov	r1, r2
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	4798      	blx	r3
        setY(y);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	3330      	adds	r3, #48	; 0x30
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f9b7 2000 	ldrsh.w	r2, [r7]
 800aa50:	4611      	mov	r1, r2
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	4798      	blx	r3
    }
 800aa56:	bf00      	nop
 800aa58:	3708      	adds	r7, #8
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800aa5e:	b480      	push	{r7}
 800aa60:	b085      	sub	sp, #20
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	60f8      	str	r0, [r7, #12]
 800aa66:	460b      	mov	r3, r1
 800aa68:	607a      	str	r2, [r7, #4]
 800aa6a:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 800aa6c:	2300      	movs	r3, #0
    }
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3714      	adds	r7, #20
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr

0800aa7a <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800aa7a:	b480      	push	{r7}
 800aa7c:	b083      	sub	sp, #12
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800aa82:	2300      	movs	r3, #0
    }
 800aa84:	4618      	mov	r0, r3
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800aa90:	b40e      	push	{r1, r2, r3}
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b085      	sub	sp, #20
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800aa9a:	f107 0320 	add.w	r3, r7, #32
 800aa9e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	69fa      	ldr	r2, [r7, #28]
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f008 fa1e 	bl	8012ee8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800aaac:	4603      	mov	r3, r0
 800aaae:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800aab0:	89fb      	ldrh	r3, [r7, #14]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3714      	adds	r7, #20
 800aab6:	46bd      	mov	sp, r7
 800aab8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aabc:	b003      	add	sp, #12
 800aabe:	4770      	bx	lr

0800aac0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800aac0:	b40c      	push	{r2, r3}
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b084      	sub	sp, #16
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
 800aaca:	460b      	mov	r3, r1
 800aacc:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800aace:	f107 031c 	add.w	r3, r7, #28
 800aad2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800aad4:	78f9      	ldrb	r1, [r7, #3]
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	69ba      	ldr	r2, [r7, #24]
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f008 fa04 	bl	8012ee8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800aae0:	4603      	mov	r3, r0
 800aae2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800aae4:	89fb      	ldrh	r3, [r7, #14]
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3710      	adds	r7, #16
 800aaea:	46bd      	mov	sp, r7
 800aaec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aaf0:	b002      	add	sp, #8
 800aaf2:	4770      	bx	lr

0800aaf4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b08a      	sub	sp, #40	; 0x28
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	460b      	mov	r3, r1
 800aafe:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d016      	beq.n	800ab36 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	331a      	adds	r3, #26
 800ab0c:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800ab0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab10:	8adb      	ldrh	r3, [r3, #22]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d105      	bne.n	800ab22 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800ab16:	4b43      	ldr	r3, [pc, #268]	; (800ac24 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800ab18:	4a43      	ldr	r2, [pc, #268]	; (800ac28 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800ab1a:	21c0      	movs	r1, #192	; 0xc0
 800ab1c:	4843      	ldr	r0, [pc, #268]	; (800ac2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800ab1e:	f00b fca5 	bl	801646c <__assert_func>
            return buffer[pos];
 800ab22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab24:	8a9b      	ldrh	r3, [r3, #20]
 800ab26:	461a      	mov	r2, r3
 800ab28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d001      	beq.n	800ab36 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800ab32:	2301      	movs	r3, #1
 800ab34:	e000      	b.n	800ab38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800ab36:	2300      	movs	r3, #0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d06a      	beq.n	800ac12 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f009 f881 	bl	8013c44 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	331a      	adds	r3, #26
 800ab46:	623b      	str	r3, [r7, #32]
 800ab48:	2301      	movs	r3, #1
 800ab4a:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800ab4c:	6a3b      	ldr	r3, [r7, #32]
 800ab4e:	8adb      	ldrh	r3, [r3, #22]
 800ab50:	8bfa      	ldrh	r2, [r7, #30]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d305      	bcc.n	800ab62 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800ab56:	4b36      	ldr	r3, [pc, #216]	; (800ac30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800ab58:	4a36      	ldr	r2, [pc, #216]	; (800ac34 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800ab5a:	21c5      	movs	r1, #197	; 0xc5
 800ab5c:	4833      	ldr	r0, [pc, #204]	; (800ac2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800ab5e:	f00b fc85 	bl	801646c <__assert_func>
            const uint16_t index = pos + offset;
 800ab62:	6a3b      	ldr	r3, [r7, #32]
 800ab64:	8a9a      	ldrh	r2, [r3, #20]
 800ab66:	8bfb      	ldrh	r3, [r7, #30]
 800ab68:	4413      	add	r3, r2
 800ab6a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800ab6c:	8bbb      	ldrh	r3, [r7, #28]
 800ab6e:	2b09      	cmp	r3, #9
 800ab70:	d801      	bhi.n	800ab76 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800ab72:	8bbb      	ldrh	r3, [r7, #28]
 800ab74:	e001      	b.n	800ab7a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800ab76:	8bbb      	ldrh	r3, [r7, #28]
 800ab78:	3b0a      	subs	r3, #10
 800ab7a:	6a3a      	ldr	r2, [r7, #32]
 800ab7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab80:	f640 123f 	movw	r2, #2367	; 0x93f
 800ab84:	4293      	cmp	r3, r2
 800ab86:	bf0c      	ite	eq
 800ab88:	2301      	moveq	r3, #1
 800ab8a:	2300      	movne	r3, #0
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d03f      	beq.n	800ac12 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	331a      	adds	r3, #26
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	321a      	adds	r2, #26
 800ab9a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800ab9c:	68ba      	ldr	r2, [r7, #8]
 800ab9e:	8ad2      	ldrh	r2, [r2, #22]
 800aba0:	2a00      	cmp	r2, #0
 800aba2:	d105      	bne.n	800abb0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800aba4:	4b1f      	ldr	r3, [pc, #124]	; (800ac24 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800aba6:	4a20      	ldr	r2, [pc, #128]	; (800ac28 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800aba8:	21c0      	movs	r1, #192	; 0xc0
 800abaa:	4820      	ldr	r0, [pc, #128]	; (800ac2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800abac:	f00b fc5e 	bl	801646c <__assert_func>
            return buffer[pos];
 800abb0:	68ba      	ldr	r2, [r7, #8]
 800abb2:	8a92      	ldrh	r2, [r2, #20]
 800abb4:	4611      	mov	r1, r2
 800abb6:	68ba      	ldr	r2, [r7, #8]
 800abb8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800abbc:	613b      	str	r3, [r7, #16]
 800abbe:	4613      	mov	r3, r2
 800abc0:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	8adb      	ldrh	r3, [r3, #22]
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d806      	bhi.n	800abd8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800abca:	4b1b      	ldr	r3, [pc, #108]	; (800ac38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800abcc:	4a1b      	ldr	r2, [pc, #108]	; (800ac3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800abce:	f240 110d 	movw	r1, #269	; 0x10d
 800abd2:	4816      	ldr	r0, [pc, #88]	; (800ac2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800abd4:	f00b fc4a 	bl	801646c <__assert_func>
            const uint16_t index = pos + 1;
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	8a9b      	ldrh	r3, [r3, #20]
 800abdc:	3301      	adds	r3, #1
 800abde:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800abe0:	89bb      	ldrh	r3, [r7, #12]
 800abe2:	2b09      	cmp	r3, #9
 800abe4:	d801      	bhi.n	800abea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800abe6:	89bb      	ldrh	r3, [r7, #12]
 800abe8:	e000      	b.n	800abec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800abea:	2300      	movs	r3, #0
 800abec:	693a      	ldr	r2, [r7, #16]
 800abee:	89f9      	ldrh	r1, [r7, #14]
 800abf0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800abf4:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	331a      	adds	r3, #26
 800abfa:	61bb      	str	r3, [r7, #24]
 800abfc:	f640 133f 	movw	r3, #2367	; 0x93f
 800ac00:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	8a9b      	ldrh	r3, [r3, #20]
 800ac06:	4619      	mov	r1, r3
 800ac08:	69bb      	ldr	r3, [r7, #24]
 800ac0a:	8afa      	ldrh	r2, [r7, #22]
 800ac0c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800ac10:	bf00      	nop
        }
    }
    return getNextChar();
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f008 fefa 	bl	8013a0c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800ac18:	4603      	mov	r3, r0
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3728      	adds	r7, #40	; 0x28
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	08017988 	.word	0x08017988
 800ac28:	08017994 	.word	0x08017994
 800ac2c:	08017a40 	.word	0x08017a40
 800ac30:	08017abc 	.word	0x08017abc
 800ac34:	08017acc 	.word	0x08017acc
 800ac38:	08017ba0 	.word	0x08017ba0
 800ac3c:	08017bac 	.word	0x08017bac

0800ac40 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f008 fe99 	bl	8013980 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800ac4e:	bf00      	nop
 800ac50:	3708      	adds	r7, #8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
	...

0800ac58 <_ZN17TypedTextDatabase8getFontsEv>:
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}

const touchgfx::Font** getFonts()
{
 800ac58:	b480      	push	{r7}
 800ac5a:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800ac5c:	4b02      	ldr	r3, [pc, #8]	; (800ac68 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr
 800ac68:	20000150 	.word	0x20000150

0800ac6c <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d113      	bne.n	800aca4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d10e      	bne.n	800aca4 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800ac86:	f7ff fdd5 	bl	800a834 <_Z23getFont_verdana_20_4bppv>
 800ac8a:	4603      	mov	r3, r0
};
 800ac8c:	4a07      	ldr	r2, [pc, #28]	; (800acac <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800ac8e:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800ac90:	f7ff fe24 	bl	800a8dc <_Z23getFont_verdana_40_4bppv>
 800ac94:	4603      	mov	r3, r0
};
 800ac96:	4a05      	ldr	r2, [pc, #20]	; (800acac <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800ac98:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800ac9a:	f7ff fd77 	bl	800a78c <_Z23getFont_verdana_10_4bppv>
 800ac9e:	4603      	mov	r3, r0
};
 800aca0:	4a02      	ldr	r2, [pc, #8]	; (800acac <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800aca2:	6093      	str	r3, [r2, #8]
}  // namespace TypedTextDatabase
 800aca4:	bf00      	nop
 800aca6:	3708      	adds	r7, #8
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	20000150 	.word	0x20000150

0800acb0 <_GLOBAL__sub_I_touchgfx_fonts>:
 800acb0:	b580      	push	{r7, lr}
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800acb8:	2001      	movs	r0, #1
 800acba:	f7ff ffd7 	bl	800ac6c <_Z41__static_initialization_and_destruction_0ii>
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <_ZN5Model11getInstanceEv>:
	if(_instance==nullptr){
		_instance = this;
	}
}

Model* Model::getInstance() {
 800acc0:	b480      	push	{r7}
 800acc2:	af00      	add	r7, sp, #0
	return _instance;
 800acc4:	4b03      	ldr	r3, [pc, #12]	; (800acd4 <_ZN5Model11getInstanceEv+0x14>)
 800acc6:	681b      	ldr	r3, [r3, #0]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	2000015c 	.word	0x2000015c

0800acd8 <_ZN5Model14setDivTimLabelENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
		xQueueSend(gui_msg_q, &msg, 0);
	}
#endif // TOUCHGFX_FREERTOS
}

void Model::setDivTimLabel(const std::string str){
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
	textDivTim = str;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	3334      	adds	r3, #52	; 0x34
 800ace6:	6839      	ldr	r1, [r7, #0]
 800ace8:	4618      	mov	r0, r3
 800acea:	f00b fa96 	bl	801621a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
#if (TOUCHGFX_BAREMETAL != 0)
	this->flagDivTim=true;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2201      	movs	r2, #1
 800acf2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
#endif // TOUCHGFX_BAREMETAL
#if (TOUCHGFX_FREERTOS != 0)
	GUI_EVENT msg = DIVTIM_EVENT;
	xQueueSend(gui_msg_q, &msg, 0);
#endif // TOUCHGFX_FREERTOS
}
 800acf6:	bf00      	nop
 800acf8:	3708      	adds	r7, #8
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <_ZN5Model13setModeSignalENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Model::setModeSignal(const std::string str){
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b082      	sub	sp, #8
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
 800ad06:	6039      	str	r1, [r7, #0]
	textMode = str;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	3304      	adds	r3, #4
 800ad0c:	6839      	ldr	r1, [r7, #0]
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f00b fa83 	bl	801621a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
#if (TOUCHGFX_BAREMETAL != 0)
	this->flagMode=true;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2201      	movs	r2, #1
 800ad18:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
#endif // TOUCHGFX_BAREMETAL
#if (TOUCHGFX_FREERTOS != 0)
	GUI_EVENT msg = MODE_EVENT;
	xQueueSend(gui_msg_q, &msg, 0);
#endif // TOUCHGFX_FREERTOS
}
 800ad1c:	bf00      	nop
 800ad1e:	3708      	adds	r7, #8
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <_ZN5Model13setFreqSignalENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Model::setFreqSignal(const std::string str){
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
	textFreq = str;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	331c      	adds	r3, #28
 800ad32:	6839      	ldr	r1, [r7, #0]
 800ad34:	4618      	mov	r0, r3
 800ad36:	f00b fa70 	bl	801621a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
#if (TOUCHGFX_BAREMETAL != 0)
	this->flagFreq=true;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
#endif // TOUCHGFX_BAREMETAL
#if (TOUCHGFX_FREERTOS != 0)
	GUI_EVENT msg = FREQUENCY_EVENT;
	xQueueSend(gui_msg_q, &msg, 0);
#endif // TOUCHGFX_FREERTOS
}
 800ad42:	bf00      	nop
 800ad44:	3708      	adds	r7, #8
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
	...

0800ad4c <_ZN8touchgfx18MCUInstrumentationD1Ev>:

    /** Initialize. */
    virtual void init() = 0;

    /** Finalizes an instance of the MCUInstrumentation class. */
    virtual ~MCUInstrumentation()
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
    {
 800ad54:	4a04      	ldr	r2, [pc, #16]	; (800ad68 <_ZN8touchgfx18MCUInstrumentationD1Ev+0x1c>)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	601a      	str	r2, [r3, #0]
    }
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr
 800ad68:	08018868 	.word	0x08018868

0800ad6c <_ZN8touchgfx18MCUInstrumentationD0Ev>:
    virtual ~MCUInstrumentation()
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
    }
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f7ff ffe9 	bl	800ad4c <_ZN8touchgfx18MCUInstrumentationD1Ev>
 800ad7a:	210c      	movs	r1, #12
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f00b f943 	bl	8016008 <_ZdlPvj>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4618      	mov	r0, r3
 800ad86:	3708      	adds	r7, #8
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb>:
    /**
     * Sets MCU activity high.
     *
     * @param  active if True, inactive otherwise.
     */
    virtual void setMCUActive(bool active)
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	460b      	mov	r3, r1
 800ad96:	70fb      	strb	r3, [r7, #3]
    {
        if (active) //idle task sched out
 800ad98:	78fb      	ldrb	r3, [r7, #3]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d011      	beq.n	800adc2 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x36>
        {
            uint32_t cc_temp = getCPUCycles() - cc_in;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	3310      	adds	r3, #16
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	4798      	blx	r3
 800adaa:	4602      	mov	r2, r0
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	1ad3      	subs	r3, r2, r3
 800adb2:	60fb      	str	r3, [r7, #12]
            cc_consumed += cc_temp;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	685a      	ldr	r2, [r3, #4]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	441a      	add	r2, r3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	605a      	str	r2, [r3, #4]
        }
        else //idle task sched in
        {
            cc_in = getCPUCycles();
        }
    }
 800adc0:	e008      	b.n	800add4 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x48>
            cc_in = getCPUCycles();
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	3310      	adds	r3, #16
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	4798      	blx	r3
 800adce:	4602      	mov	r2, r0
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	609a      	str	r2, [r3, #8]
    }
 800add4:	bf00      	nop
 800add6:	3710      	adds	r7, #16
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
    /**
     * Gets number of consumed clock cycles.
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
 800addc:	b480      	push	{r7}
 800adde:	b083      	sub	sp, #12
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
    {
        return cc_consumed;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	685b      	ldr	r3, [r3, #4]
    }
 800ade8:	4618      	mov	r0, r3
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
    /**
     * Sets number of consumed clock cycles.
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
    {
        cc_consumed = val;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	683a      	ldr	r2, [r7, #0]
 800ae02:	605a      	str	r2, [r3, #4]
    }
 800ae04:	bf00      	nop
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
void CortexMMCUInstrumentation::init()
{
 800ae10:	b480      	push	{r7}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 800ae18:	4b0b      	ldr	r3, [pc, #44]	; (800ae48 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x38>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4a0a      	ldr	r2, [pc, #40]	; (800ae48 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x38>)
 800ae1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ae22:	6013      	str	r3, [r2, #0]
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 800ae24:	4b09      	ldr	r3, [pc, #36]	; (800ae4c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x3c>)
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	4908      	ldr	r1, [pc, #32]	; (800ae4c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x3c>)
 800ae2a:	4b09      	ldr	r3, [pc, #36]	; (800ae50 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x40>)
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	600b      	str	r3, [r1, #0]
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 800ae30:	4b08      	ldr	r3, [pc, #32]	; (800ae54 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x44>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a07      	ldr	r2, [pc, #28]	; (800ae54 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x44>)
 800ae36:	f043 0301 	orr.w	r3, r3, #1
 800ae3a:	6013      	str	r3, [r2, #0]
}
 800ae3c:	bf00      	nop
 800ae3e:	370c      	adds	r7, #12
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr
 800ae48:	e000edfc 	.word	0xe000edfc
 800ae4c:	e0001fb0 	.word	0xe0001fb0
 800ae50:	c5acce55 	.word	0xc5acce55
 800ae54:	e0001000 	.word	0xe0001000

0800ae58 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	607a      	str	r2, [r7, #4]
 800ae64:	603b      	str	r3, [r7, #0]
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	1ad2      	subs	r2, r2, r3
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	085b      	lsrs	r3, r3, #1
 800ae70:	441a      	add	r2, r3
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3714      	adds	r7, #20
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
 800ae84:	b480      	push	{r7}
 800ae86:	b083      	sub	sp, #12
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
    return *((volatile unsigned int*)0xE0001004);
 800ae8c:	4b03      	ldr	r3, [pc, #12]	; (800ae9c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x18>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	370c      	adds	r7, #12
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr
 800ae9c:	e0001004 	.word	0xe0001004

0800aea0 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	460b      	mov	r3, r1
 800aeaa:	70fb      	strb	r3, [r7, #3]
    if (active) //idle task sched out
 800aeac:	78fb      	ldrb	r3, [r7, #3]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d011      	beq.n	800aed6 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x36>
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	3310      	adds	r3, #16
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	4798      	blx	r3
 800aebe:	4602      	mov	r2, r0
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	1ad3      	subs	r3, r2, r3
 800aec6:	60fb      	str	r3, [r7, #12]
        cc_consumed += cc_temp;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	685a      	ldr	r2, [r3, #4]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	441a      	add	r2, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	605a      	str	r2, [r3, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 800aed4:	e008      	b.n	800aee8 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x48>
        cc_in = getCPUCycles();
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	3310      	adds	r3, #16
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	4798      	blx	r3
 800aee2:	4602      	mov	r2, r0
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	609a      	str	r2, [r3, #8]
}
 800aee8:	bf00      	nop
 800aeea:	3710      	adds	r7, #16
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	4a05      	ldr	r2, [pc, #20]	; (800af10 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev+0x20>)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	601a      	str	r2, [r3, #0]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4618      	mov	r0, r3
 800af02:	f7ff ff23 	bl	800ad4c <_ZN8touchgfx18MCUInstrumentationD1Ev>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4618      	mov	r0, r3
 800af0a:	3708      	adds	r7, #8
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	08018840 	.word	0x08018840

0800af14 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7ff ffe7 	bl	800aef0 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>
 800af22:	210c      	movs	r1, #12
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f00b f86f 	bl	8016008 <_ZdlPvj>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	4618      	mov	r0, r3
 800af2e:	3708      	adds	r7, #8
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
    {
 800af3c:	4a04      	ldr	r2, [pc, #16]	; (800af50 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	601a      	str	r2, [r3, #0]
    }
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	4618      	mov	r0, r3
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr
 800af50:	080188a8 	.word	0x080188a8

0800af54 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
    }
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f7ff ffe9 	bl	800af34 <_ZN8touchgfx15TouchControllerD1Ev>
 800af62:	2104      	movs	r1, #4
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f00b f84f 	bl	8016008 <_ZdlPvj>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4618      	mov	r0, r3
 800af6e:	3708      	adds	r7, #8
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <_ZN20STM32TouchController4initEv>:

static TS_DrvTypeDef* tsDriver;
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800af7c:	4b05      	ldr	r3, [pc, #20]	; (800af94 <_ZN20STM32TouchController4initEv+0x20>)
 800af7e:	4a06      	ldr	r2, [pc, #24]	; (800af98 <_ZN20STM32TouchController4initEv+0x24>)
 800af80:	601a      	str	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 800af82:	4b04      	ldr	r3, [pc, #16]	; (800af94 <_ZN20STM32TouchController4initEv+0x20>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	2070      	movs	r0, #112	; 0x70
 800af8a:	4798      	blx	r3
}
 800af8c:	bf00      	nop
 800af8e:	3708      	adds	r7, #8
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	20000160 	.word	0x20000160
 800af98:	2000000c 	.word	0x2000000c

0800af9c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (tsDriver)
 800afa8:	4b0f      	ldr	r3, [pc, #60]	; (800afe8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d015      	beq.n	800afdc <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
    {
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 800afb0:	4b0d      	ldr	r3, [pc, #52]	; (800afe8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	691b      	ldr	r3, [r3, #16]
 800afb6:	2070      	movs	r0, #112	; 0x70
 800afb8:	4798      	blx	r3
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	bf14      	ite	ne
 800afc0:	2301      	movne	r3, #1
 800afc2:	2300      	moveq	r3, #0
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d008      	beq.n	800afdc <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
        {
            /* Get each touch coordinates */
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 800afca:	4b07      	ldr	r3, [pc, #28]	; (800afe8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	695b      	ldr	r3, [r3, #20]
 800afd0:	68ba      	ldr	r2, [r7, #8]
 800afd2:	6879      	ldr	r1, [r7, #4]
 800afd4:	2070      	movs	r0, #112	; 0x70
 800afd6:	4798      	blx	r3
            return true;
 800afd8:	2301      	movs	r3, #1
 800afda:	e000      	b.n	800afde <_ZN20STM32TouchController11sampleTouchERlS0_+0x42>
        }
    }
    return false;
 800afdc:	2300      	movs	r3, #0
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	20000160 	.word	0x20000160

0800afec <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef* i2c_handler, uint8_t Addr)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	460b      	mov	r3, r1
 800aff6:	70fb      	strb	r3, [r7, #3]
    /* De-initialize the I2C communication bus */
    HAL_I2C_DeInit(i2c_handler);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f7f9 fa97 	bl	800452c <HAL_I2C_DeInit>

    /* Re-Initialize the I2C communication bus */
    //I2Cx_Init(i2c_handler);
}
 800affe:	bf00      	nop
 800b000:	3708      	adds	r7, #8
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t* Buffer,
                                           uint16_t Length)
{
 800b006:	b580      	push	{r7, lr}
 800b008:	b08a      	sub	sp, #40	; 0x28
 800b00a:	af04      	add	r7, sp, #16
 800b00c:	60f8      	str	r0, [r7, #12]
 800b00e:	4608      	mov	r0, r1
 800b010:	4611      	mov	r1, r2
 800b012:	461a      	mov	r2, r3
 800b014:	4603      	mov	r3, r0
 800b016:	72fb      	strb	r3, [r7, #11]
 800b018:	460b      	mov	r3, r1
 800b01a:	813b      	strh	r3, [r7, #8]
 800b01c:	4613      	mov	r3, r2
 800b01e:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_OK;
 800b020:	2300      	movs	r3, #0
 800b022:	75fb      	strb	r3, [r7, #23]

    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800b024:	7afb      	ldrb	r3, [r7, #11]
 800b026:	b299      	uxth	r1, r3
 800b028:	88f8      	ldrh	r0, [r7, #6]
 800b02a:	893a      	ldrh	r2, [r7, #8]
 800b02c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b030:	9302      	str	r3, [sp, #8]
 800b032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b034:	9301      	str	r3, [sp, #4]
 800b036:	6a3b      	ldr	r3, [r7, #32]
 800b038:	9300      	str	r3, [sp, #0]
 800b03a:	4603      	mov	r3, r0
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f7f9 fbb9 	bl	80047b4 <HAL_I2C_Mem_Read>
 800b042:	4603      	mov	r3, r0
 800b044:	75fb      	strb	r3, [r7, #23]

    /* Check the communication status */
    if (status != HAL_OK)
 800b046:	7dfb      	ldrb	r3, [r7, #23]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d004      	beq.n	800b056 <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht+0x50>
    {
        /* I2C error occurred */
        I2Cx_Error(i2c_handler, Addr);
 800b04c:	7afb      	ldrb	r3, [r7, #11]
 800b04e:	4619      	mov	r1, r3
 800b050:	68f8      	ldr	r0, [r7, #12]
 800b052:	f7ff ffcb 	bl	800afec <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>
    }
    return status;
 800b056:	7dfb      	ldrb	r3, [r7, #23]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3718      	adds	r7, #24
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t* Buffer,
                                            uint16_t Length)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b08a      	sub	sp, #40	; 0x28
 800b064:	af04      	add	r7, sp, #16
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	4608      	mov	r0, r1
 800b06a:	4611      	mov	r1, r2
 800b06c:	461a      	mov	r2, r3
 800b06e:	4603      	mov	r3, r0
 800b070:	72fb      	strb	r3, [r7, #11]
 800b072:	460b      	mov	r3, r1
 800b074:	813b      	strh	r3, [r7, #8]
 800b076:	4613      	mov	r3, r2
 800b078:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_OK;
 800b07a:	2300      	movs	r3, #0
 800b07c:	75fb      	strb	r3, [r7, #23]

    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800b07e:	7afb      	ldrb	r3, [r7, #11]
 800b080:	b299      	uxth	r1, r3
 800b082:	88f8      	ldrh	r0, [r7, #6]
 800b084:	893a      	ldrh	r2, [r7, #8]
 800b086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b08a:	9302      	str	r3, [sp, #8]
 800b08c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b08e:	9301      	str	r3, [sp, #4]
 800b090:	6a3b      	ldr	r3, [r7, #32]
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	4603      	mov	r3, r0
 800b096:	68f8      	ldr	r0, [r7, #12]
 800b098:	f7f9 fa78 	bl	800458c <HAL_I2C_Mem_Write>
 800b09c:	4603      	mov	r3, r0
 800b09e:	75fb      	strb	r3, [r7, #23]

    /* Check the communication status */
    if (status != HAL_OK)
 800b0a0:	7dfb      	ldrb	r3, [r7, #23]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d004      	beq.n	800b0b0 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht+0x50>
    {
        /* Re-Initiaize the I2C Bus */
        I2Cx_Error(i2c_handler, Addr);
 800b0a6:	7afb      	ldrb	r3, [r7, #11]
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	f7ff ff9e 	bl	800afec <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>
    }
    return status;
 800b0b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3718      	adds	r7, #24
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
	...

0800b0bc <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b084      	sub	sp, #16
 800b0c0:	af02      	add	r7, sp, #8
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	71fb      	strb	r3, [r7, #7]
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	71bb      	strb	r3, [r7, #6]
 800b0ca:	4613      	mov	r3, r2
 800b0cc:	717b      	strb	r3, [r7, #5]
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
 800b0ce:	79bb      	ldrb	r3, [r7, #6]
 800b0d0:	b29a      	uxth	r2, r3
 800b0d2:	79f9      	ldrb	r1, [r7, #7]
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	9301      	str	r3, [sp, #4]
 800b0d8:	1d7b      	adds	r3, r7, #5
 800b0da:	9300      	str	r3, [sp, #0]
 800b0dc:	2301      	movs	r3, #1
 800b0de:	4803      	ldr	r0, [pc, #12]	; (800b0ec <TS_IO_Write+0x30>)
 800b0e0:	f7ff ffbe 	bl	800b060 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht>
}
 800b0e4:	bf00      	nop
 800b0e6:	3708      	adds	r7, #8
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	200015b4 	.word	0x200015b4

0800b0f0 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b086      	sub	sp, #24
 800b0f4:	af02      	add	r7, sp, #8
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	460a      	mov	r2, r1
 800b0fa:	71fb      	strb	r3, [r7, #7]
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	71bb      	strb	r3, [r7, #6]
    uint8_t read_value = 0;
 800b100:	2300      	movs	r3, #0
 800b102:	73fb      	strb	r3, [r7, #15]

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800b104:	79bb      	ldrb	r3, [r7, #6]
 800b106:	b29a      	uxth	r2, r3
 800b108:	79f9      	ldrb	r1, [r7, #7]
 800b10a:	2301      	movs	r3, #1
 800b10c:	9301      	str	r3, [sp, #4]
 800b10e:	f107 030f 	add.w	r3, r7, #15
 800b112:	9300      	str	r3, [sp, #0]
 800b114:	2301      	movs	r3, #1
 800b116:	4804      	ldr	r0, [pc, #16]	; (800b128 <TS_IO_Read+0x38>)
 800b118:	f7ff ff75 	bl	800b006 <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht>

    return read_value;
 800b11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	200015b4 	.word	0x200015b4

0800b12c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	4a05      	ldr	r2, [pc, #20]	; (800b14c <_ZN20STM32TouchControllerD1Ev+0x20>)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	601a      	str	r2, [r3, #0]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7ff fef9 	bl	800af34 <_ZN8touchgfx15TouchControllerD1Ev>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4618      	mov	r0, r3
 800b146:	3708      	adds	r7, #8
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	08018890 	.word	0x08018890

0800b150 <_ZN20STM32TouchControllerD0Ev>:
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f7ff ffe7 	bl	800b12c <_ZN20STM32TouchControllerD1Ev>
 800b15e:	2104      	movs	r1, #4
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f00a ff51 	bl	8016008 <_ZdlPvj>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4618      	mov	r0, r3
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	4603      	mov	r3, r0
 800b178:	71fb      	strb	r3, [r7, #7]

}
 800b17a:	bf00      	nop
 800b17c:	370c      	adds	r7, #12
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr

0800b186 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800b186:	b480      	push	{r7}
 800b188:	b083      	sub	sp, #12
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	4603      	mov	r3, r0
 800b18e:	71fb      	strb	r3, [r7, #7]

}
 800b190:	bf00      	nop
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	71fb      	strb	r3, [r7, #7]

}
 800b1a6:	bf00      	nop
 800b1a8:	370c      	adds	r7, #12
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr
	...

0800b1b4 <_ZN8touchgfx18MCUInstrumentationC1Ev>:
    MCUInstrumentation()
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
          cc_in(0)
 800b1bc:	4a07      	ldr	r2, [pc, #28]	; (800b1dc <_ZN8touchgfx18MCUInstrumentationC1Ev+0x28>)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	601a      	str	r2, [r3, #0]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	605a      	str	r2, [r3, #4]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	609a      	str	r2, [r3, #8]
    }
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	370c      	adds	r7, #12
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr
 800b1dc:	08018868 	.word	0x08018868

0800b1e0 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
    {
 800b1e8:	4a04      	ldr	r2, [pc, #16]	; (800b1fc <_ZN8touchgfx3HALD1Ev+0x1c>)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	601a      	str	r2, [r3, #0]
    }
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr
 800b1fc:	08019048 	.word	0x08019048

0800b200 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800b200:	b580      	push	{r7, lr}
 800b202:	b082      	sub	sp, #8
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
    }
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f7ff ffe9 	bl	800b1e0 <_ZN8touchgfx3HALD1Ev>
 800b20e:	217c      	movs	r1, #124	; 0x7c
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f00a fef9 	bl	8016008 <_ZdlPvj>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4618      	mov	r0, r3
 800b21a:	3708      	adds	r7, #8
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	460b      	mov	r3, r1
 800b22a:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	78fa      	ldrb	r2, [r7, #3]
 800b230:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2201      	movs	r2, #1
 800b238:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800b23c:	bf00      	nop
 800b23e:	370c      	adds	r7, #12
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr

0800b248 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800b256:	2b00      	cmp	r3, #0
 800b258:	d009      	beq.n	800b26e <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	685a      	ldr	r2, [r3, #4]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4610      	mov	r0, r2
 800b268:	4798      	blx	r3
 800b26a:	4603      	mov	r3, r0
 800b26c:	e000      	b.n	800b270 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 800b26e:	2300      	movs	r3, #0
        }
    }
 800b270:	4618      	mov	r0, r3
 800b272:	3708      	adds	r7, #8
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f006 fe05 	bl	8011e90 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	3390      	adds	r3, #144	; 0x90
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	4798      	blx	r3
    }
 800b292:	bf00      	nop
 800b294:	3708      	adds	r7, #8
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800b29a:	b480      	push	{r7}
 800b29c:	b083      	sub	sp, #12
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
 800b2a2:	6039      	str	r1, [r7, #0]
    {
        return false;
 800b2a4:	2300      	movs	r3, #0
    }
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	370c      	adds	r7, #12
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
	...

0800b2b4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	607a      	str	r2, [r7, #4]
 800b2c0:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d106      	bne.n	800b2d6 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800b2c8:	4b11      	ldr	r3, [pc, #68]	; (800b310 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800b2ca:	4a12      	ldr	r2, [pc, #72]	; (800b314 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800b2cc:	f240 216b 	movw	r1, #619	; 0x26b
 800b2d0:	4811      	ldr	r0, [pc, #68]	; (800b318 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 800b2d2:	f00b f8cb 	bl	801646c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	68ba      	ldr	r2, [r7, #8]
 800b2da:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	683a      	ldr	r2, [r7, #0]
 800b2e6:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	bf14      	ite	ne
 800b2ee:	2301      	movne	r3, #1
 800b2f0:	2300      	moveq	r3, #0
 800b2f2:	b2da      	uxtb	r2, r3
 800b2f4:	4b09      	ldr	r3, [pc, #36]	; (800b31c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 800b2f6:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	bf14      	ite	ne
 800b2fe:	2301      	movne	r3, #1
 800b300:	2300      	moveq	r3, #0
 800b302:	b2da      	uxtb	r2, r3
 800b304:	4b06      	ldr	r3, [pc, #24]	; (800b320 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 800b306:	701a      	strb	r2, [r3, #0]
    }
 800b308:	bf00      	nop
 800b30a:	3710      	adds	r7, #16
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}
 800b310:	08017c60 	.word	0x08017c60
 800b314:	08017c98 	.word	0x08017c98
 800b318:	08017ce8 	.word	0x08017ce8
 800b31c:	2000124e 	.word	0x2000124e
 800b320:	2000124f 	.word	0x2000124f

0800b324 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800b32c:	2300      	movs	r3, #0
    }
 800b32e:	4618      	mov	r0, r3
 800b330:	370c      	adds	r7, #12
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr

0800b33a <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b082      	sub	sp, #8
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
 800b342:	460b      	mov	r3, r1
 800b344:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d004      	beq.n	800b358 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b352:	887a      	ldrh	r2, [r7, #2]
 800b354:	4610      	mov	r0, r2
 800b356:	4798      	blx	r3
        }
    }
 800b358:	bf00      	nop
 800b35a:	3708      	adds	r7, #8
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 800b368:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 800b36c:	4618      	mov	r0, r3
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	685a      	ldr	r2, [r3, #4]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	3318      	adds	r3, #24
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4610      	mov	r0, r2
 800b390:	4798      	blx	r3
 800b392:	4603      	mov	r3, r0
    }
 800b394:	4618      	mov	r0, r3
 800b396:	3708      	adds	r7, #8
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d017      	beq.n	800b3e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 800b3b4:	4b1a      	ldr	r3, [pc, #104]	; (800b420 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d12a      	bne.n	800b412 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800b3bc:	4b19      	ldr	r3, [pc, #100]	; (800b424 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800b3be:	881a      	ldrh	r2, [r3, #0]
 800b3c0:	4b19      	ldr	r3, [pc, #100]	; (800b428 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800b3c2:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 800b3c4:	4b19      	ldr	r3, [pc, #100]	; (800b42c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800b3c6:	881a      	ldrh	r2, [r3, #0]
 800b3c8:	4b19      	ldr	r3, [pc, #100]	; (800b430 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800b3ca:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 800b3cc:	4b16      	ldr	r3, [pc, #88]	; (800b428 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800b3ce:	881a      	ldrh	r2, [r3, #0]
 800b3d0:	4b16      	ldr	r3, [pc, #88]	; (800b42c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800b3d2:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 800b3d4:	4b16      	ldr	r3, [pc, #88]	; (800b430 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800b3d6:	881a      	ldrh	r2, [r3, #0]
 800b3d8:	4b12      	ldr	r3, [pc, #72]	; (800b424 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800b3da:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 800b3dc:	4b10      	ldr	r3, [pc, #64]	; (800b420 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800b3de:	2201      	movs	r2, #1
 800b3e0:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800b3e2:	e016      	b.n	800b412 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 800b3e4:	4b0e      	ldr	r3, [pc, #56]	; (800b420 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d012      	beq.n	800b412 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 800b3ec:	4b0f      	ldr	r3, [pc, #60]	; (800b42c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800b3ee:	881a      	ldrh	r2, [r3, #0]
 800b3f0:	4b0d      	ldr	r3, [pc, #52]	; (800b428 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800b3f2:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 800b3f4:	4b0b      	ldr	r3, [pc, #44]	; (800b424 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800b3f6:	881a      	ldrh	r2, [r3, #0]
 800b3f8:	4b0d      	ldr	r3, [pc, #52]	; (800b430 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800b3fa:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 800b3fc:	4b0c      	ldr	r3, [pc, #48]	; (800b430 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800b3fe:	881a      	ldrh	r2, [r3, #0]
 800b400:	4b0a      	ldr	r3, [pc, #40]	; (800b42c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800b402:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 800b404:	4b08      	ldr	r3, [pc, #32]	; (800b428 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800b406:	881a      	ldrh	r2, [r3, #0]
 800b408:	4b06      	ldr	r3, [pc, #24]	; (800b424 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800b40a:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 800b40c:	4b04      	ldr	r3, [pc, #16]	; (800b420 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800b40e:	2200      	movs	r2, #0
 800b410:	701a      	strb	r2, [r3, #0]
    }
 800b412:	bf00      	nop
 800b414:	370c      	adds	r7, #12
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr
 800b41e:	bf00      	nop
 800b420:	20001248 	.word	0x20001248
 800b424:	20001244 	.word	0x20001244
 800b428:	2000124a 	.word	0x2000124a
 800b42c:	20001246 	.word	0x20001246
 800b430:	2000124c 	.word	0x2000124c

0800b434 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	4618      	mov	r0, r3
 800b440:	f005 ffbf 	bl	80113c2 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800b444:	bf00      	nop
 800b446:	3708      	adds	r7, #8
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	4a05      	ldr	r2, [pc, #20]	; (800b46c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	601a      	str	r2, [r3, #0]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7ff febf 	bl	800b1e0 <_ZN8touchgfx3HALD1Ev>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4618      	mov	r0, r3
 800b466:	3708      	adds	r7, #8
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}
 800b46c:	080189f0 	.word	0x080189f0

0800b470 <_ZN20TouchGFXGeneratedHALD0Ev>:
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f7ff ffe7 	bl	800b44c <_ZN20TouchGFXGeneratedHALD1Ev>
 800b47e:	217c      	movs	r1, #124	; 0x7c
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f00a fdc1 	bl	8016008 <_ZdlPvj>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4618      	mov	r0, r3
 800b48a:	3708      	adds	r7, #8
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7ff ffca 	bl	800b434 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800b4a0:	bf00      	nop
 800b4a2:	3708      	adds	r7, #8
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b085      	sub	sp, #20
 800b4ac:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800b4ae:	4b21      	ldr	r3, [pc, #132]	; (800b534 <SCB_CleanInvalidateDCache+0x8c>)
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b4b6:	f3bf 8f4f 	dsb	sy
}
 800b4ba:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800b4bc:	4b1d      	ldr	r3, [pc, #116]	; (800b534 <SCB_CleanInvalidateDCache+0x8c>)
 800b4be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4c2:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	0b5b      	lsrs	r3, r3, #13
 800b4c8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800b4cc:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	08db      	lsrs	r3, r3, #3
 800b4d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b4d6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	015a      	lsls	r2, r3, #5
 800b4dc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800b4e0:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800b4e2:	68ba      	ldr	r2, [r7, #8]
 800b4e4:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800b4e6:	4913      	ldr	r1, [pc, #76]	; (800b534 <SCB_CleanInvalidateDCache+0x8c>)
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	1e5a      	subs	r2, r3, #1
 800b4f2:	60ba      	str	r2, [r7, #8]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	bf14      	ite	ne
 800b4f8:	2301      	movne	r3, #1
 800b4fa:	2300      	moveq	r3, #0
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d000      	beq.n	800b504 <SCB_CleanInvalidateDCache+0x5c>
      do {
 800b502:	e7e9      	b.n	800b4d8 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	1e5a      	subs	r2, r3, #1
 800b508:	60fa      	str	r2, [r7, #12]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	bf14      	ite	ne
 800b50e:	2301      	movne	r3, #1
 800b510:	2300      	moveq	r3, #0
 800b512:	b2db      	uxtb	r3, r3
 800b514:	2b00      	cmp	r3, #0
 800b516:	d000      	beq.n	800b51a <SCB_CleanInvalidateDCache+0x72>
    do {
 800b518:	e7d9      	b.n	800b4ce <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800b51a:	f3bf 8f4f 	dsb	sy
}
 800b51e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b520:	f3bf 8f6f 	isb	sy
}
 800b524:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800b526:	bf00      	nop
 800b528:	3714      	adds	r7, #20
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	e000ed00 	.word	0xe000ed00

0800b538 <_ZN8touchgfx25CortexMMCUInstrumentationC1Ev>:
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	4618      	mov	r0, r3
 800b544:	f7ff fe36 	bl	800b1b4 <_ZN8touchgfx18MCUInstrumentationC1Ev>
 800b548:	4a03      	ldr	r2, [pc, #12]	; (800b558 <_ZN8touchgfx25CortexMMCUInstrumentationC1Ev+0x20>)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	601a      	str	r2, [r3, #0]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	4618      	mov	r0, r3
 800b552:	3708      	adds	r7, #8
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	08018840 	.word	0x08018840

0800b55c <_ZN11TouchGFXHAL9taskEntryEv>:
    enableMCULoadCalculation(true);
}

#if (TOUCHGFX_BAREMETAL != 0)
void TouchGFXHAL::taskEntry()
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
    static bool firstCall = true;

    if (firstCall)
 800b564:	4b0c      	ldr	r3, [pc, #48]	; (800b598 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d00e      	beq.n	800b58a <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
    {
        firstCall = false;
 800b56c:	4b0a      	ldr	r3, [pc, #40]	; (800b598 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 800b56e:	2200      	movs	r2, #0
 800b570:	701a      	strb	r2, [r3, #0]
        enableLCDControllerInterrupt();
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	3368      	adds	r3, #104	; 0x68
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	4798      	blx	r3
        enableInterrupts();
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	3360      	adds	r3, #96	; 0x60
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	4798      	blx	r3
    }

    OSWrappers::waitForVSync();
 800b58a:	f000 f91d 	bl	800b7c8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>

    //backPorchExited();
    // Not necessary to call here when it is done by the
    // OSWrappers::waitForVSync() method
}
 800b58e:	bf00      	nop
 800b590:	3708      	adds	r7, #8
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	20000034 	.word	0x20000034

0800b59c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f001 f8ac 	bl	800c704 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800b5ac:	4603      	mov	r3, r0
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3708      	adds	r7, #8
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b082      	sub	sp, #8
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
 800b5be:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6839      	ldr	r1, [r7, #0]
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f001 f8ab 	bl	800c720 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800b5ca:	bf00      	nop
 800b5cc:	3708      	adds	r7, #8
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
	...

0800b5d4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6839      	ldr	r1, [r7, #0]
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f001 f8b2 	bl	800c74c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    if ((SCB->CCR & SCB_CCR_DC_Msk) != 0)   // Check data cache is enabled
 800b5e8:	4b08      	ldr	r3, [pc, #32]	; (800b60c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x38>)
 800b5ea:	695b      	ldr	r3, [r3, #20]
 800b5ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	bf14      	ite	ne
 800b5f4:	2301      	movne	r3, #1
 800b5f6:	2300      	moveq	r3, #0
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d001      	beq.n	800b602 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2e>
    {
        SCB_CleanInvalidateDCache();
 800b5fe:	f7ff ff53 	bl	800b4a8 <SCB_CleanInvalidateDCache>
    }
}
 800b602:	bf00      	nop
 800b604:	3708      	adds	r7, #8
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	e000ed00 	.word	0xe000ed00

0800b610 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	60b9      	str	r1, [r7, #8]
 800b61a:	607a      	str	r2, [r7, #4]
 800b61c:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	68b9      	ldr	r1, [r7, #8]
 800b626:	f001 f8af 	bl	800c788 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800b62a:	4603      	mov	r3, r0
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3710      	adds	r7, #16
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4618      	mov	r0, r3
 800b640:	f001 f806 	bl	800c650 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800b644:	bf00      	nop
 800b646:	3708      	adds	r7, #8
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	4618      	mov	r0, r3
 800b658:	f001 f80a 	bl	800c670 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800b65c:	bf00      	nop
 800b65e:	3708      	adds	r7, #8
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4618      	mov	r0, r3
 800b670:	f001 f80c 	bl	800c68c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800b674:	bf00      	nop
 800b676:	3708      	adds	r7, #8
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4618      	mov	r0, r3
 800b688:	f001 f80e 	bl	800c6a8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800b68c:	bf00      	nop
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	4a05      	ldr	r2, [pc, #20]	; (800b6b4 <_ZN11TouchGFXHALD1Ev+0x20>)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	601a      	str	r2, [r3, #0]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f7ff fed1 	bl	800b44c <_ZN20TouchGFXGeneratedHALD1Ev>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3708      	adds	r7, #8
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	080188c0 	.word	0x080188c0

0800b6b8 <_ZN11TouchGFXHALD0Ev>:
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f7ff ffe7 	bl	800b694 <_ZN11TouchGFXHALD1Ev>
 800b6c6:	217c      	movs	r1, #124	; 0x7c
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f00a fc9d 	bl	8016008 <_ZdlPvj>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3708      	adds	r7, #8
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}

0800b6d8 <_Z41__static_initialization_and_destruction_0ii>:
        }
        return pdTRUE;
    }
	#endif // TOUCHGFX_FREERTOS

}
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d107      	bne.n	800b6f8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d102      	bne.n	800b6f8 <_Z41__static_initialization_and_destruction_0ii+0x20>
CortexMMCUInstrumentation instrumentation;
 800b6f2:	4809      	ldr	r0, [pc, #36]	; (800b718 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800b6f4:	f7ff ff20 	bl	800b538 <_ZN8touchgfx25CortexMMCUInstrumentationC1Ev>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d107      	bne.n	800b70e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b704:	4293      	cmp	r3, r2
 800b706:	d102      	bne.n	800b70e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800b708:	4803      	ldr	r0, [pc, #12]	; (800b718 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800b70a:	f7ff fbf1 	bl	800aef0 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>
}
 800b70e:	bf00      	nop
 800b710:	3708      	adds	r7, #8
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	20000164 	.word	0x20000164

0800b71c <_GLOBAL__sub_I_instrumentation>:
 800b71c:	b580      	push	{r7, lr}
 800b71e:	af00      	add	r7, sp, #0
 800b720:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b724:	2001      	movs	r0, #1
 800b726:	f7ff ffd7 	bl	800b6d8 <_Z41__static_initialization_and_destruction_0ii>
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <_GLOBAL__sub_D_instrumentation>:
 800b72c:	b580      	push	{r7, lr}
 800b72e:	af00      	add	r7, sp, #0
 800b730:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b734:	2000      	movs	r0, #0
 800b736:	f7ff ffcf 	bl	800b6d8 <_Z41__static_initialization_and_destruction_0ii>
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800b73c:	b480      	push	{r7}
 800b73e:	af00      	add	r7, sp, #0
	#if (TOUCHGFX_BAREMETAL != 0)
	  while(fb_sem);
 800b740:	4b08      	ldr	r3, [pc, #32]	; (800b764 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x28>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	bf14      	ite	ne
 800b748:	2301      	movne	r3, #1
 800b74a:	2300      	moveq	r3, #0
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d000      	beq.n	800b754 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>
 800b752:	e7f5      	b.n	800b740 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x4>
	  fb_sem = 1;
 800b754:	4b03      	ldr	r3, [pc, #12]	; (800b764 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x28>)
 800b756:	2201      	movs	r2, #1
 800b758:	601a      	str	r2, [r3, #0]
	#endif  // TOUCHGFX_BAREMETAL
	#if (TOUCHGFX_FREERTOS != 0)
	    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
	#endif // TOUCHGFX_FREERTOS
}
 800b75a:	bf00      	nop
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr
 800b764:	20000170 	.word	0x20000170

0800b768 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800b768:	b480      	push	{r7}
 800b76a:	af00      	add	r7, sp, #0
	#if (TOUCHGFX_BAREMETAL != 0)
	  fb_sem = 0;
 800b76c:	4b03      	ldr	r3, [pc, #12]	; (800b77c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 800b76e:	2200      	movs	r2, #0
 800b770:	601a      	str	r2, [r3, #0]
	#endif  // TOUCHGFX_BAREMETAL
	#if (TOUCHGFX_FREERTOS != 0)
	  osSemaphoreRelease(frame_buffer_sem);
	#endif // TOUCHGFX_FREERTOS
}
 800b772:	bf00      	nop
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr
 800b77c:	20000170 	.word	0x20000170

0800b780 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800b780:	b480      	push	{r7}
 800b782:	af00      	add	r7, sp, #0
	#if (TOUCHGFX_BAREMETAL != 0)
	  fb_sem = 1;
 800b784:	4b03      	ldr	r3, [pc, #12]	; (800b794 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800b786:	2201      	movs	r2, #1
 800b788:	601a      	str	r2, [r3, #0]
	#endif  // TOUCHGFX_BAREMETAL
	#if (TOUCHGFX_FREERTOS != 0)
	    osSemaphoreAcquire(frame_buffer_sem, 0);
	#endif // TOUCHGFX_FREERTOS
}
 800b78a:	bf00      	nop
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr
 800b794:	20000170 	.word	0x20000170

0800b798 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800b798:	b480      	push	{r7}
 800b79a:	af00      	add	r7, sp, #0
	#if (TOUCHGFX_BAREMETAL != 0)
		fb_sem = 0;
 800b79c:	4b03      	ldr	r3, [pc, #12]	; (800b7ac <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800b79e:	2200      	movs	r2, #0
 800b7a0:	601a      	str	r2, [r3, #0]
	#endif  // TOUCHGFX_BAREMETAL
	#if (TOUCHGFX_FREERTOS != 0)
	    osSemaphoreRelease(frame_buffer_sem);
	#endif // TOUCHGFX_FREERTOS
}
 800b7a2:	bf00      	nop
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr
 800b7ac:	20000170 	.word	0x20000170

0800b7b0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	af00      	add	r7, sp, #0
	#if (TOUCHGFX_BAREMETAL != 0)
	  vsync_sem = 1;
 800b7b4:	4b03      	ldr	r3, [pc, #12]	; (800b7c4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	601a      	str	r2, [r3, #0]
	#endif  // TOUCHGFX_BAREMETAL
	#if (TOUCHGFX_FREERTOS != 0)
	    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
	#endif // TOUCHGFX_FREERTOS
}
 800b7ba:	bf00      	nop
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr
 800b7c4:	20000174 	.word	0x20000174

0800b7c8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
/*
 * This function check if a VSYNC has occured.
 * If VSYNC has occured, signal TouchGFX to start a rendering
 */
void OSWrappers::waitForVSync()
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	af00      	add	r7, sp, #0
	#if (TOUCHGFX_BAREMETAL != 0)
	  if(vsync_sem)
 800b7cc:	4b0a      	ldr	r3, [pc, #40]	; (800b7f8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	bf14      	ite	ne
 800b7d4:	2301      	movne	r3, #1
 800b7d6:	2300      	moveq	r3, #0
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d00a      	beq.n	800b7f4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>
	  {
		vsync_sem = 0;
 800b7de:	4b06      	ldr	r3, [pc, #24]	; (800b7f8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	601a      	str	r2, [r3, #0]
		HAL::getInstance()->backPorchExited();
 800b7e4:	f7ff f8d2 	bl	800a98c <_ZN8touchgfx3HAL11getInstanceEv>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	3258      	adds	r2, #88	; 0x58
 800b7ee:	6812      	ldr	r2, [r2, #0]
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	4790      	blx	r2
	  osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);

	  // Then, wait for next VSYNC to occur.
	  osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
	#endif // TOUCHGFX_FREERTOS
}
 800b7f4:	bf00      	nop
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	20000174 	.word	0x20000174

0800b7fc <__NVIC_EnableIRQ>:
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	4603      	mov	r3, r0
 800b804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	db0b      	blt.n	800b826 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b80e:	79fb      	ldrb	r3, [r7, #7]
 800b810:	f003 021f 	and.w	r2, r3, #31
 800b814:	4907      	ldr	r1, [pc, #28]	; (800b834 <__NVIC_EnableIRQ+0x38>)
 800b816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b81a:	095b      	lsrs	r3, r3, #5
 800b81c:	2001      	movs	r0, #1
 800b81e:	fa00 f202 	lsl.w	r2, r0, r2
 800b822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b826:	bf00      	nop
 800b828:	370c      	adds	r7, #12
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop
 800b834:	e000e100 	.word	0xe000e100

0800b838 <__NVIC_DisableIRQ>:
{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	4603      	mov	r3, r0
 800b840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b846:	2b00      	cmp	r3, #0
 800b848:	db12      	blt.n	800b870 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b84a:	79fb      	ldrb	r3, [r7, #7]
 800b84c:	f003 021f 	and.w	r2, r3, #31
 800b850:	490a      	ldr	r1, [pc, #40]	; (800b87c <__NVIC_DisableIRQ+0x44>)
 800b852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b856:	095b      	lsrs	r3, r3, #5
 800b858:	2001      	movs	r0, #1
 800b85a:	fa00 f202 	lsl.w	r2, r0, r2
 800b85e:	3320      	adds	r3, #32
 800b860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800b864:	f3bf 8f4f 	dsb	sy
}
 800b868:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b86a:	f3bf 8f6f 	isb	sy
}
 800b86e:	bf00      	nop
}
 800b870:	bf00      	nop
 800b872:	370c      	adds	r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr
 800b87c:	e000e100 	.word	0xe000e100

0800b880 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
        : color(0)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	601a      	str	r2, [r3, #0]
    }
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4618      	mov	r0, r3
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
    {
 800b8a4:	4a04      	ldr	r2, [pc, #16]	; (800b8b8 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	601a      	str	r2, [r3, #0]
    }
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	370c      	adds	r7, #12
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr
 800b8b8:	080189cc 	.word	0x080189cc

0800b8bc <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
    }
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f7ff ffe9 	bl	800b89c <_ZN8touchgfx9DMA_QueueD1Ev>
 800b8ca:	2104      	movs	r1, #4
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f00a fb9b 	bl	8016008 <_ZdlPvj>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3708      	adds	r7, #8
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b082      	sub	sp, #8
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	3344      	adds	r3, #68	; 0x44
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	4798      	blx	r3
    }
 800b8f0:	bf00      	nop
 800b8f2:	3708      	adds	r7, #8
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
    {
 800b900:	4a04      	ldr	r2, [pc, #16]	; (800b914 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	601a      	str	r2, [r3, #0]
    }
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	4618      	mov	r0, r3
 800b90a:	370c      	adds	r7, #12
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr
 800b914:	08019494 	.word	0x08019494

0800b918 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800b918:	b580      	push	{r7, lr}
 800b91a:	b082      	sub	sp, #8
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
    }
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f7ff ffe9 	bl	800b8f8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800b926:	210c      	movs	r1, #12
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f00a fb6d 	bl	8016008 <_ZdlPvj>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	4618      	mov	r0, r3
 800b932:	3708      	adds	r7, #8
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800b938:	b480      	push	{r7}
 800b93a:	b083      	sub	sp, #12
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800b942:	4a09      	ldr	r2, [pc, #36]	; (800b968 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	601a      	str	r2, [r3, #0]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	683a      	ldr	r2, [r7, #0]
 800b94c:	605a      	str	r2, [r3, #4]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2200      	movs	r2, #0
 800b952:	721a      	strb	r2, [r3, #8]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2200      	movs	r2, #0
 800b958:	725a      	strb	r2, [r3, #9]
    {
    }
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4618      	mov	r0, r3
 800b95e:	370c      	adds	r7, #12
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr
 800b968:	08019494 	.word	0x08019494

0800b96c <_ZN10STM32F7DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 800b974:	2301      	movs	r3, #1
    }
 800b976:	4618      	mov	r0, r3
 800b978:	370c      	adds	r7, #12
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr

0800b982 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800b982:	b580      	push	{r7, lr}
 800b984:	b082      	sub	sp, #8
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	3328      	adds	r3, #40	; 0x28
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4610      	mov	r0, r2
 800b996:	4798      	blx	r3
    }
 800b998:	bf00      	nop
 800b99a:	3708      	adds	r7, #8
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	685a      	ldr	r2, [r3, #4]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	3314      	adds	r3, #20
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4610      	mov	r0, r2
 800b9b8:	4798      	blx	r3
    }
 800b9ba:	bf00      	nop
 800b9bc:	3708      	adds	r7, #8
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 800b9c2:	b580      	push	{r7, lr}
 800b9c4:	b082      	sub	sp, #8
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
    (void)handle; // Unused argument
    HAL::getInstance()->signalDMAInterrupt();
 800b9ca:	f7fe ffdf 	bl	800a98c <_ZN8touchgfx3HAL11getInstanceEv>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7ff ffe5 	bl	800b9a0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 800b9d6:	bf00      	nop
 800b9d8:	3708      	adds	r7, #8
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}

0800b9de <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b082      	sub	sp, #8
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	3318      	adds	r3, #24
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7ff ff48 	bl	800b880 <_ZN8touchgfx9colortypeC1Ev>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3708      	adds	r7, #8
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
	...

0800b9fc <_ZN10STM32F7DMAC1Ev>:
}

STM32F7DMA::STM32F7DMA()
 800b9fc:	b5b0      	push	{r4, r5, r7, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	330c      	adds	r3, #12
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	4610      	mov	r0, r2
 800ba0e:	f7ff ff93 	bl	800b938 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800ba12:	4a0e      	ldr	r2, [pc, #56]	; (800ba4c <_ZN10STM32F7DMAC1Ev+0x50>)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	601a      	str	r2, [r3, #0]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f103 000c 	add.w	r0, r3, #12
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	3320      	adds	r3, #32
 800ba22:	2260      	movs	r2, #96	; 0x60
 800ba24:	4619      	mov	r1, r3
 800ba26:	f006 fb93 	bl	8012150 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	3320      	adds	r3, #32
 800ba2e:	245f      	movs	r4, #95	; 0x5f
 800ba30:	461d      	mov	r5, r3
 800ba32:	2c00      	cmp	r4, #0
 800ba34:	db05      	blt.n	800ba42 <_ZN10STM32F7DMAC1Ev+0x46>
 800ba36:	4628      	mov	r0, r5
 800ba38:	f7ff ffd1 	bl	800b9de <_ZN8touchgfx6BlitOpC1Ev>
 800ba3c:	3520      	adds	r5, #32
 800ba3e:	3c01      	subs	r4, #1
 800ba40:	e7f7      	b.n	800ba32 <_ZN10STM32F7DMAC1Ev+0x36>
{
}
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	4618      	mov	r0, r3
 800ba46:	3708      	adds	r7, #8
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bdb0      	pop	{r4, r5, r7, pc}
 800ba4c:	0801897c 	.word	0x0801897c

0800ba50 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b082      	sub	sp, #8
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	4a09      	ldr	r2, [pc, #36]	; (800ba80 <_ZN10STM32F7DMAD1Ev+0x30>)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 800ba5e:	205a      	movs	r0, #90	; 0x5a
 800ba60:	f7ff feea 	bl	800b838 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	330c      	adds	r3, #12
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f000 fb27 	bl	800c0bc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7ff ff41 	bl	800b8f8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3708      	adds	r7, #8
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	0801897c 	.word	0x0801897c

0800ba84 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
}
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f7ff ffdf 	bl	800ba50 <_ZN10STM32F7DMAD1Ev>
 800ba92:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f00a fab6 	bl	8016008 <_ZdlPvj>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3708      	adds	r7, #8
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
	...

0800baa8 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800bab0:	4b10      	ldr	r3, [pc, #64]	; (800baf4 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800bab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab4:	4a0f      	ldr	r2, [pc, #60]	; (800baf4 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800bab6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800baba:	6313      	str	r3, [r2, #48]	; 0x30
 800babc:	4b0d      	ldr	r3, [pc, #52]	; (800baf4 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800babe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bac0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bac4:	60fb      	str	r3, [r7, #12]
 800bac6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800bac8:	4b0a      	ldr	r3, [pc, #40]	; (800baf4 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800baca:	691b      	ldr	r3, [r3, #16]
 800bacc:	4a09      	ldr	r2, [pc, #36]	; (800baf4 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800bace:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bad2:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800bad4:	4b07      	ldr	r3, [pc, #28]	; (800baf4 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800bad6:	691b      	ldr	r3, [r3, #16]
 800bad8:	4a06      	ldr	r2, [pc, #24]	; (800baf4 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800bada:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bade:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800bae0:	4b05      	ldr	r3, [pc, #20]	; (800baf8 <_ZN10STM32F7DMA10initializeEv+0x50>)
 800bae2:	4a06      	ldr	r2, [pc, #24]	; (800bafc <_ZN10STM32F7DMA10initializeEv+0x54>)
 800bae4:	611a      	str	r2, [r3, #16]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 800bae6:	205a      	movs	r0, #90	; 0x5a
 800bae8:	f7ff fe88 	bl	800b7fc <__NVIC_EnableIRQ>
}
 800baec:	bf00      	nop
 800baee:	3710      	adds	r7, #16
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	40023800 	.word	0x40023800
 800baf8:	20001574 	.word	0x20001574
 800bafc:	0800b9c3 	.word	0x0800b9c3

0800bb00 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	460b      	mov	r3, r1
 800bb0a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	60fb      	str	r3, [r7, #12]

    switch (format)
 800bb10:	78fb      	ldrb	r3, [r7, #3]
 800bb12:	2b0b      	cmp	r3, #11
 800bb14:	d826      	bhi.n	800bb64 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800bb16:	a201      	add	r2, pc, #4	; (adr r2, 800bb1c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800bb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb1c:	0800bb59 	.word	0x0800bb59
 800bb20:	0800bb53 	.word	0x0800bb53
 800bb24:	0800bb4d 	.word	0x0800bb4d
 800bb28:	0800bb65 	.word	0x0800bb65
 800bb2c:	0800bb65 	.word	0x0800bb65
 800bb30:	0800bb65 	.word	0x0800bb65
 800bb34:	0800bb65 	.word	0x0800bb65
 800bb38:	0800bb5f 	.word	0x0800bb5f
 800bb3c:	0800bb5f 	.word	0x0800bb5f
 800bb40:	0800bb5f 	.word	0x0800bb5f
 800bb44:	0800bb5f 	.word	0x0800bb5f
 800bb48:	0800bb5f 	.word	0x0800bb5f
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	60fb      	str	r3, [r7, #12]
        break;
 800bb50:	e00e      	b.n	800bb70 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 800bb52:	2301      	movs	r3, #1
 800bb54:	60fb      	str	r3, [r7, #12]
        break;
 800bb56:	e00b      	b.n	800bb70 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800bb58:	2302      	movs	r3, #2
 800bb5a:	60fb      	str	r3, [r7, #12]
        break;
 800bb5c:	e008      	b.n	800bb70 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 800bb5e:	2305      	movs	r3, #5
 800bb60:	60fb      	str	r3, [r7, #12]
        break;
 800bb62:	e005      	b.n	800bb70 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 800bb64:	4b05      	ldr	r3, [pc, #20]	; (800bb7c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800bb66:	4a06      	ldr	r2, [pc, #24]	; (800bb80 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 800bb68:	2165      	movs	r1, #101	; 0x65
 800bb6a:	4806      	ldr	r0, [pc, #24]	; (800bb84 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 800bb6c:	f00a fc7e 	bl	801646c <__assert_func>
        break;
    }

    return dma2dColorMode;
 800bb70:	68fb      	ldr	r3, [r7, #12]
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3710      	adds	r7, #16
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	08017d60 	.word	0x08017d60
 800bb80:	08017d7c 	.word	0x08017d7c
 800bb84:	08017dc8 	.word	0x08017dc8

0800bb88 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	460b      	mov	r3, r1
 800bb92:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800bb94:	2300      	movs	r3, #0
 800bb96:	60fb      	str	r3, [r7, #12]

    switch (format)
 800bb98:	78fb      	ldrb	r3, [r7, #3]
 800bb9a:	2b0a      	cmp	r3, #10
 800bb9c:	d821      	bhi.n	800bbe2 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 800bb9e:	a201      	add	r2, pc, #4	; (adr r2, 800bba4 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800bba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba4:	0800bbdd 	.word	0x0800bbdd
 800bba8:	0800bbd7 	.word	0x0800bbd7
 800bbac:	0800bbd1 	.word	0x0800bbd1
 800bbb0:	0800bbe3 	.word	0x0800bbe3
 800bbb4:	0800bbe3 	.word	0x0800bbe3
 800bbb8:	0800bbe3 	.word	0x0800bbe3
 800bbbc:	0800bbe3 	.word	0x0800bbe3
 800bbc0:	0800bbd7 	.word	0x0800bbd7
 800bbc4:	0800bbd7 	.word	0x0800bbd7
 800bbc8:	0800bbd7 	.word	0x0800bbd7
 800bbcc:	0800bbd7 	.word	0x0800bbd7
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	60fb      	str	r3, [r7, #12]
        break;
 800bbd4:	e00b      	b.n	800bbee <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	60fb      	str	r3, [r7, #12]
        break;
 800bbda:	e008      	b.n	800bbee <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800bbdc:	2302      	movs	r3, #2
 800bbde:	60fb      	str	r3, [r7, #12]
        break;
 800bbe0:	e005      	b.n	800bbee <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 800bbe2:	4b05      	ldr	r3, [pc, #20]	; (800bbf8 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 800bbe4:	4a05      	ldr	r2, [pc, #20]	; (800bbfc <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800bbe6:	2186      	movs	r1, #134	; 0x86
 800bbe8:	4805      	ldr	r0, [pc, #20]	; (800bc00 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800bbea:	f00a fc3f 	bl	801646c <__assert_func>
        break;
    }

    return dma2dColorMode;
 800bbee:	68fb      	ldr	r3, [r7, #12]
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	08017d60 	.word	0x08017d60
 800bbfc:	08017e28 	.word	0x08017e28
 800bc00:	08017dc8 	.word	0x08017dc8

0800bc04 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 800bc0c:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr

0800bc1c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 800bc1c:	b590      	push	{r4, r7, lr}
 800bc1e:	b089      	sub	sp, #36	; 0x24
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	7f5b      	ldrb	r3, [r3, #29]
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f7ff ff67 	bl	800bb00 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800bc32:	61f8      	str	r0, [r7, #28]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	7f9b      	ldrb	r3, [r3, #30]
 800bc38:	4619      	mov	r1, r3
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f7ff ff60 	bl	800bb00 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800bc40:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	7f9b      	ldrb	r3, [r3, #30]
 800bc46:	4619      	mov	r1, r3
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f7ff ff9d 	bl	800bb88 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800bc4e:	6178      	str	r0, [r7, #20]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	8adb      	ldrh	r3, [r3, #22]
 800bc54:	461a      	mov	r2, r3
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	8a1b      	ldrh	r3, [r3, #16]
 800bc5a:	1ad2      	subs	r2, r2, r3
 800bc5c:	4b8b      	ldr	r3, [pc, #556]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800bc5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	8adb      	ldrh	r3, [r3, #22]
 800bc64:	461a      	mov	r2, r3
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	8a1b      	ldrh	r3, [r3, #16]
 800bc6a:	1ad2      	subs	r2, r2, r3
 800bc6c:	4b87      	ldr	r3, [pc, #540]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800bc6e:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	8a9b      	ldrh	r3, [r3, #20]
 800bc74:	461a      	mov	r2, r3
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	8a1b      	ldrh	r3, [r3, #16]
 800bc7a:	1ad2      	subs	r2, r2, r3
 800bc7c:	4b83      	ldr	r3, [pc, #524]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800bc7e:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800bc80:	4a82      	ldr	r2, [pc, #520]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	8a5b      	ldrh	r3, [r3, #18]
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	8a1b      	ldrh	r3, [r3, #16]
 800bc90:	041b      	lsls	r3, r3, #16
 800bc92:	431a      	orrs	r2, r3
 800bc94:	4b7d      	ldr	r3, [pc, #500]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800bc96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	68da      	ldr	r2, [r3, #12]
 800bc9c:	4b7b      	ldr	r3, [pc, #492]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800bc9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	685a      	ldr	r2, [r3, #4]
 800bca4:	4b79      	ldr	r3, [pc, #484]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800bca6:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcb0:	d046      	beq.n	800bd40 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 800bcb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcb6:	f200 80f9 	bhi.w	800beac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
 800bcba:	2b80      	cmp	r3, #128	; 0x80
 800bcbc:	d00e      	beq.n	800bcdc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
 800bcbe:	2b80      	cmp	r3, #128	; 0x80
 800bcc0:	f200 80f4 	bhi.w	800beac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
 800bcc4:	2b40      	cmp	r3, #64	; 0x40
 800bcc6:	f000 80cc 	beq.w	800be62 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 800bcca:	2b40      	cmp	r3, #64	; 0x40
 800bccc:	f200 80ee 	bhi.w	800beac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
 800bcd0:	2b04      	cmp	r3, #4
 800bcd2:	d067      	beq.n	800bda4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x188>
 800bcd4:	2b20      	cmp	r3, #32
 800bcd6:	f000 80c4 	beq.w	800be62 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 800bcda:	e0e7      	b.n	800beac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	7f1b      	ldrb	r3, [r3, #28]
 800bce0:	061b      	lsls	r3, r3, #24
 800bce2:	4619      	mov	r1, r3
 800bce4:	4a69      	ldr	r2, [pc, #420]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800bce6:	4b6a      	ldr	r3, [pc, #424]	; (800be90 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 800bce8:	430b      	orrs	r3, r1
 800bcea:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	3318      	adds	r3, #24
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f7fe fe73 	bl	800a9dc <_ZNK8touchgfx9colortypecvmEv>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	021b      	lsls	r3, r3, #8
 800bcfa:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	3318      	adds	r3, #24
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7fe fe6a 	bl	800a9dc <_ZNK8touchgfx9colortypecvmEv>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	015b      	lsls	r3, r3, #5
 800bd0c:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 800bd10:	431c      	orrs	r4, r3
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	3318      	adds	r3, #24
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7fe fe60 	bl	800a9dc <_ZNK8touchgfx9colortypecvmEv>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	00db      	lsls	r3, r3, #3
 800bd20:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800bd24:	4a59      	ldr	r2, [pc, #356]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800bd26:	4323      	orrs	r3, r4
 800bd28:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800bd2a:	4a58      	ldr	r2, [pc, #352]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800bd2c:	69bb      	ldr	r3, [r7, #24]
 800bd2e:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	68da      	ldr	r2, [r3, #12]
 800bd34:	4b55      	ldr	r3, [pc, #340]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800bd36:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800bd38:	4b54      	ldr	r3, [pc, #336]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800bd3a:	4a56      	ldr	r2, [pc, #344]	; (800be94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x278>)
 800bd3c:	601a      	str	r2, [r3, #0]
        break;
 800bd3e:	e0f6      	b.n	800bf2e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x312>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	7f1b      	ldrb	r3, [r3, #28]
 800bd44:	061b      	lsls	r3, r3, #24
 800bd46:	4619      	mov	r1, r3
 800bd48:	4a50      	ldr	r2, [pc, #320]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800bd4a:	4b53      	ldr	r3, [pc, #332]	; (800be98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 800bd4c:	430b      	orrs	r3, r1
 800bd4e:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	3318      	adds	r3, #24
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7fe fe41 	bl	800a9dc <_ZNK8touchgfx9colortypecvmEv>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	021b      	lsls	r3, r3, #8
 800bd5e:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	3318      	adds	r3, #24
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7fe fe38 	bl	800a9dc <_ZNK8touchgfx9colortypecvmEv>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	015b      	lsls	r3, r3, #5
 800bd70:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 800bd74:	431c      	orrs	r4, r3
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	3318      	adds	r3, #24
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7fe fe2e 	bl	800a9dc <_ZNK8touchgfx9colortypecvmEv>
 800bd80:	4603      	mov	r3, r0
 800bd82:	00db      	lsls	r3, r3, #3
 800bd84:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800bd88:	4a40      	ldr	r2, [pc, #256]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800bd8a:	4323      	orrs	r3, r4
 800bd8c:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800bd8e:	4a3f      	ldr	r2, [pc, #252]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800bd90:	69bb      	ldr	r3, [r7, #24]
 800bd92:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	68da      	ldr	r2, [r3, #12]
 800bd98:	4b3c      	ldr	r3, [pc, #240]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800bd9a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800bd9c:	4b3b      	ldr	r3, [pc, #236]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800bd9e:	4a3d      	ldr	r2, [pc, #244]	; (800be94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x278>)
 800bda0:	601a      	str	r2, [r3, #0]
        break;
 800bda2:	e0c4      	b.n	800bf2e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x312>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	7f1b      	ldrb	r3, [r3, #28]
 800bda8:	061b      	lsls	r3, r3, #24
 800bdaa:	461a      	mov	r2, r3
 800bdac:	69fb      	ldr	r3, [r7, #28]
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	4a36      	ldr	r2, [pc, #216]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800bdb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdb6:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800bdb8:	4a34      	ldr	r2, [pc, #208]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800bdba:	69bb      	ldr	r3, [r7, #24]
 800bdbc:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	68da      	ldr	r2, [r3, #12]
 800bdc2:	4b32      	ldr	r3, [pc, #200]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800bdc4:	615a      	str	r2, [r3, #20]

        if (blitOp.srcFormat == Bitmap::L8)
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	7f5b      	ldrb	r3, [r3, #29]
 800bdca:	2b0b      	cmp	r3, #11
 800bdcc:	d145      	bne.n	800be5a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23e>
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	613b      	str	r3, [r7, #16]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	1d1a      	adds	r2, r3, #4
 800bdd8:	4b2c      	ldr	r3, [pc, #176]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800bdda:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	881b      	ldrh	r3, [r3, #0]
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d002      	beq.n	800bdec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d00d      	beq.n	800be06 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
 800bdea:	e01a      	b.n	800be22 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800bdec:	4b27      	ldr	r3, [pc, #156]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800bdee:	69da      	ldr	r2, [r3, #28]
 800bdf0:	4b2a      	ldr	r3, [pc, #168]	; (800be9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 800bdf2:	4013      	ands	r3, r2
 800bdf4:	693a      	ldr	r2, [r7, #16]
 800bdf6:	8852      	ldrh	r2, [r2, #2]
 800bdf8:	3a01      	subs	r2, #1
 800bdfa:	0212      	lsls	r2, r2, #8
 800bdfc:	4611      	mov	r1, r2
 800bdfe:	4a23      	ldr	r2, [pc, #140]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800be00:	430b      	orrs	r3, r1
 800be02:	61d3      	str	r3, [r2, #28]
                break;
 800be04:	e013      	b.n	800be2e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x212>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800be06:	4b21      	ldr	r3, [pc, #132]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800be08:	69da      	ldr	r2, [r3, #28]
 800be0a:	4b24      	ldr	r3, [pc, #144]	; (800be9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 800be0c:	4013      	ands	r3, r2
 800be0e:	693a      	ldr	r2, [r7, #16]
 800be10:	8852      	ldrh	r2, [r2, #2]
 800be12:	3a01      	subs	r2, #1
 800be14:	0212      	lsls	r2, r2, #8
 800be16:	4313      	orrs	r3, r2
 800be18:	4a1c      	ldr	r2, [pc, #112]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800be1a:	f043 0310 	orr.w	r3, r3, #16
 800be1e:	61d3      	str	r3, [r2, #28]
                break;
 800be20:	e005      	b.n	800be2e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x212>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 800be22:	4b1f      	ldr	r3, [pc, #124]	; (800bea0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x284>)
 800be24:	4a1f      	ldr	r2, [pc, #124]	; (800bea4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 800be26:	21fc      	movs	r1, #252	; 0xfc
 800be28:	481f      	ldr	r0, [pc, #124]	; (800bea8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800be2a:	f00a fb1f 	bl	801646c <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800be2e:	4b17      	ldr	r3, [pc, #92]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800be30:	69db      	ldr	r3, [r3, #28]
 800be32:	4a16      	ldr	r2, [pc, #88]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800be34:	f043 0320 	orr.w	r3, r3, #32
 800be38:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800be3a:	4b14      	ldr	r3, [pc, #80]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800be3c:	69db      	ldr	r3, [r3, #28]
 800be3e:	f003 0320 	and.w	r3, r3, #32
 800be42:	2b00      	cmp	r3, #0
 800be44:	bf14      	ite	ne
 800be46:	2301      	movne	r3, #1
 800be48:	2300      	moveq	r3, #0
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d001      	beq.n	800be54 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
            {
                __NOP();
 800be50:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800be52:	e7f2      	b.n	800be3a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21e>
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800be54:	4b0d      	ldr	r3, [pc, #52]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800be56:	2210      	movs	r2, #16
 800be58:	609a      	str	r2, [r3, #8]
        }

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800be5a:	4b0c      	ldr	r3, [pc, #48]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800be5c:	4a0d      	ldr	r2, [pc, #52]	; (800be94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x278>)
 800be5e:	601a      	str	r2, [r3, #0]
        break;
 800be60:	e065      	b.n	800bf2e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x312>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	7f1b      	ldrb	r3, [r3, #28]
 800be66:	061b      	lsls	r3, r3, #24
 800be68:	461a      	mov	r2, r3
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	4313      	orrs	r3, r2
 800be6e:	4a07      	ldr	r2, [pc, #28]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800be70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be74:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800be76:	4a05      	ldr	r2, [pc, #20]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800be78:	69bb      	ldr	r3, [r7, #24]
 800be7a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	68da      	ldr	r2, [r3, #12]
 800be80:	4b02      	ldr	r3, [pc, #8]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800be82:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800be84:	4b01      	ldr	r3, [pc, #4]	; (800be8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 800be86:	4a03      	ldr	r2, [pc, #12]	; (800be94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x278>)
 800be88:	601a      	str	r2, [r3, #0]
        break;
 800be8a:	e050      	b.n	800bf2e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x312>
 800be8c:	4002b000 	.word	0x4002b000
 800be90:	0002000a 	.word	0x0002000a
 800be94:	00020201 	.word	0x00020201
 800be98:	00020009 	.word	0x00020009
 800be9c:	ffff00ef 	.word	0xffff00ef
 800bea0:	08017e78 	.word	0x08017e78
 800bea4:	08017e94 	.word	0x08017e94
 800bea8:	08017dc8 	.word	0x08017dc8
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	7f1b      	ldrb	r3, [r3, #28]
 800beb0:	061b      	lsls	r3, r3, #24
 800beb2:	461a      	mov	r2, r3
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	4313      	orrs	r3, r2
 800beb8:	4a1f      	ldr	r2, [pc, #124]	; (800bf38 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800beba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bebe:	61d3      	str	r3, [r2, #28]

        if (blitOp.srcFormat == Bitmap::L8)
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	7f5b      	ldrb	r3, [r3, #29]
 800bec4:	2b0b      	cmp	r3, #11
 800bec6:	d12d      	bne.n	800bf24 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x308>
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	1d1a      	adds	r2, r3, #4
 800bed2:	4b19      	ldr	r3, [pc, #100]	; (800bf38 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800bed4:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Write foreground CLUT size and CLUT color mode */
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800bed6:	4b18      	ldr	r3, [pc, #96]	; (800bf38 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800bed8:	69da      	ldr	r2, [r3, #28]
 800beda:	4b18      	ldr	r3, [pc, #96]	; (800bf3c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 800bedc:	4013      	ands	r3, r2
 800bede:	68fa      	ldr	r2, [r7, #12]
 800bee0:	8852      	ldrh	r2, [r2, #2]
 800bee2:	3a01      	subs	r2, #1
 800bee4:	0212      	lsls	r2, r2, #8
 800bee6:	4313      	orrs	r3, r2
 800bee8:	4a13      	ldr	r2, [pc, #76]	; (800bf38 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800beea:	f043 0310 	orr.w	r3, r3, #16
 800beee:	61d3      	str	r3, [r2, #28]

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800bef0:	4b11      	ldr	r3, [pc, #68]	; (800bf38 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800bef2:	69db      	ldr	r3, [r3, #28]
 800bef4:	4a10      	ldr	r2, [pc, #64]	; (800bf38 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800bef6:	f043 0320 	orr.w	r3, r3, #32
 800befa:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800befc:	4b0e      	ldr	r3, [pc, #56]	; (800bf38 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800befe:	69db      	ldr	r3, [r3, #28]
 800bf00:	f003 0320 	and.w	r3, r3, #32
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	bf14      	ite	ne
 800bf08:	2301      	movne	r3, #1
 800bf0a:	2300      	moveq	r3, #0
 800bf0c:	b2db      	uxtb	r3, r3
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d001      	beq.n	800bf16 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2fa>
            {
                __NOP();
 800bf12:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800bf14:	e7f2      	b.n	800befc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e0>
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800bf16:	4b08      	ldr	r3, [pc, #32]	; (800bf38 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800bf18:	2210      	movs	r2, #16
 800bf1a:	609a      	str	r2, [r3, #8]
            /* Start DMA2D */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800bf1c:	4b06      	ldr	r3, [pc, #24]	; (800bf38 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800bf1e:	4a08      	ldr	r2, [pc, #32]	; (800bf40 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x324>)
 800bf20:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 800bf22:	e003      	b.n	800bf2c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x310>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800bf24:	4b04      	ldr	r3, [pc, #16]	; (800bf38 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31c>)
 800bf26:	f240 2201 	movw	r2, #513	; 0x201
 800bf2a:	601a      	str	r2, [r3, #0]
        break;
 800bf2c:	bf00      	nop
    }
}
 800bf2e:	bf00      	nop
 800bf30:	3724      	adds	r7, #36	; 0x24
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd90      	pop	{r4, r7, pc}
 800bf36:	bf00      	nop
 800bf38:	4002b000 	.word	0x4002b000
 800bf3c:	ffff00ef 	.word	0xffff00ef
 800bf40:	00010201 	.word	0x00010201

0800bf44 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F7DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 800bf44:	b590      	push	{r4, r7, lr}
 800bf46:	b085      	sub	sp, #20
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	7f9b      	ldrb	r3, [r3, #30]
 800bf52:	4619      	mov	r1, r3
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f7ff fe17 	bl	800bb88 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800bf5a:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800bf5c:	4a53      	ldr	r2, [pc, #332]	; (800c0ac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	8a5b      	ldrh	r3, [r3, #18]
 800bf66:	461a      	mov	r2, r3
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	8a1b      	ldrh	r3, [r3, #16]
 800bf6c:	041b      	lsls	r3, r3, #16
 800bf6e:	431a      	orrs	r2, r3
 800bf70:	4b4e      	ldr	r3, [pc, #312]	; (800c0ac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800bf72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	68da      	ldr	r2, [r3, #12]
 800bf78:	4b4c      	ldr	r3, [pc, #304]	; (800c0ac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800bf7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	8adb      	ldrh	r3, [r3, #22]
 800bf80:	461a      	mov	r2, r3
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	8a1b      	ldrh	r3, [r3, #16]
 800bf86:	1ad2      	subs	r2, r2, r3
 800bf88:	4b48      	ldr	r3, [pc, #288]	; (800c0ac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800bf8a:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	2b08      	cmp	r3, #8
 800bf92:	d14c      	bne.n	800c02e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xea>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	8adb      	ldrh	r3, [r3, #22]
 800bf98:	461a      	mov	r2, r3
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	8a1b      	ldrh	r3, [r3, #16]
 800bf9e:	1ad2      	subs	r2, r2, r3
 800bfa0:	4b42      	ldr	r3, [pc, #264]	; (800c0ac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800bfa2:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	8adb      	ldrh	r3, [r3, #22]
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	8a1b      	ldrh	r3, [r3, #16]
 800bfae:	1ad2      	subs	r2, r2, r3
 800bfb0:	4b3e      	ldr	r3, [pc, #248]	; (800c0ac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800bfb2:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800bfb4:	4a3d      	ldr	r2, [pc, #244]	; (800c0ac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	7f1b      	ldrb	r3, [r3, #28]
 800bfbe:	061b      	lsls	r3, r3, #24
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	4a3a      	ldr	r2, [pc, #232]	; (800c0ac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800bfc4:	4b3a      	ldr	r3, [pc, #232]	; (800c0b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x16c>)
 800bfc6:	430b      	orrs	r3, r1
 800bfc8:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3)) & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	7f1b      	ldrb	r3, [r3, #28]
 800bfce:	061b      	lsls	r3, r3, #24
 800bfd0:	461c      	mov	r4, r3
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	3318      	adds	r3, #24
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7fe fd00 	bl	800a9dc <_ZNK8touchgfx9colortypecvmEv>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	021b      	lsls	r3, r3, #8
 800bfe0:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 800bfe4:	431c      	orrs	r4, r3
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	3318      	adds	r3, #24
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7fe fcf6 	bl	800a9dc <_ZNK8touchgfx9colortypecvmEv>
 800bff0:	4603      	mov	r3, r0
 800bff2:	015b      	lsls	r3, r3, #5
 800bff4:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 800bff8:	431c      	orrs	r4, r3
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	3318      	adds	r3, #24
 800bffe:	4618      	mov	r0, r3
 800c000:	f7fe fcec 	bl	800a9dc <_ZNK8touchgfx9colortypecvmEv>
 800c004:	4603      	mov	r3, r0
 800c006:	00db      	lsls	r3, r3, #3
 800c008:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800c00c:	4323      	orrs	r3, r4
 800c00e:	4a27      	ldr	r2, [pc, #156]	; (800c0ac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800c010:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c014:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	68da      	ldr	r2, [r3, #12]
 800c01a:	4b24      	ldr	r3, [pc, #144]	; (800c0ac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800c01c:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	68da      	ldr	r2, [r3, #12]
 800c022:	4b22      	ldr	r3, [pc, #136]	; (800c0ac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800c024:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800c026:	4b21      	ldr	r3, [pc, #132]	; (800c0ac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800c028:	4a22      	ldr	r2, [pc, #136]	; (800c0b4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x170>)
 800c02a:	601a      	str	r2, [r3, #0]
        }

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 800c02c:	e039      	b.n	800c0a2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15e>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800c02e:	4a1f      	ldr	r2, [pc, #124]	; (800c0ac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800c034:	4b1d      	ldr	r3, [pc, #116]	; (800c0ac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800c036:	2200      	movs	r2, #0
 800c038:	611a      	str	r2, [r3, #16]
        if (blitOp.dstFormat == Bitmap::RGB565)
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	7f9b      	ldrb	r3, [r3, #30]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d108      	bne.n	800c054 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>
            WRITE_REG(DMA2D->OCOLR, blitOp.color);
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	3318      	adds	r3, #24
 800c046:	4c19      	ldr	r4, [pc, #100]	; (800c0ac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800c048:	4618      	mov	r0, r3
 800c04a:	f7fe fcc7 	bl	800a9dc <_ZNK8touchgfx9colortypecvmEv>
 800c04e:	4603      	mov	r3, r0
 800c050:	63a3      	str	r3, [r4, #56]	; 0x38
 800c052:	e023      	b.n	800c09c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x158>
            WRITE_REG(DMA2D->OCOLR, (blitOp.alpha << 24) | (blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	7f1b      	ldrb	r3, [r3, #28]
 800c058:	061b      	lsls	r3, r3, #24
 800c05a:	461c      	mov	r4, r3
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	3318      	adds	r3, #24
 800c060:	4618      	mov	r0, r3
 800c062:	f7fe fcbb 	bl	800a9dc <_ZNK8touchgfx9colortypecvmEv>
 800c066:	4603      	mov	r3, r0
 800c068:	021b      	lsls	r3, r3, #8
 800c06a:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 800c06e:	431c      	orrs	r4, r3
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	3318      	adds	r3, #24
 800c074:	4618      	mov	r0, r3
 800c076:	f7fe fcb1 	bl	800a9dc <_ZNK8touchgfx9colortypecvmEv>
 800c07a:	4603      	mov	r3, r0
 800c07c:	015b      	lsls	r3, r3, #5
 800c07e:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 800c082:	431c      	orrs	r4, r3
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	3318      	adds	r3, #24
 800c088:	4618      	mov	r0, r3
 800c08a:	f7fe fca7 	bl	800a9dc <_ZNK8touchgfx9colortypecvmEv>
 800c08e:	4603      	mov	r3, r0
 800c090:	00db      	lsls	r3, r3, #3
 800c092:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800c096:	4a05      	ldr	r2, [pc, #20]	; (800c0ac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800c098:	4323      	orrs	r3, r4
 800c09a:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800c09c:	4b03      	ldr	r3, [pc, #12]	; (800c0ac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800c09e:	4a06      	ldr	r2, [pc, #24]	; (800c0b8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x174>)
 800c0a0:	601a      	str	r2, [r3, #0]
}
 800c0a2:	bf00      	nop
 800c0a4:	3714      	adds	r7, #20
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd90      	pop	{r4, r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	4002b000 	.word	0x4002b000
 800c0b0:	00010009 	.word	0x00010009
 800c0b4:	00020201 	.word	0x00020201
 800c0b8:	00030201 	.word	0x00030201

0800c0bc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b082      	sub	sp, #8
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	4a05      	ldr	r2, [pc, #20]	; (800c0dc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	601a      	str	r2, [r3, #0]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7ff fbe5 	bl	800b89c <_ZN8touchgfx9DMA_QueueD1Ev>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3708      	adds	r7, #8
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	080194e4 	.word	0x080194e4

0800c0e0 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b082      	sub	sp, #8
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f7ff ffe7 	bl	800c0bc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800c0ee:	2114      	movs	r1, #20
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f009 ff89 	bl	8016008 <_ZdlPvj>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3708      	adds	r7, #8
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 800c100:	b480      	push	{r7}
 800c102:	b083      	sub	sp, #12
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
    {
 800c108:	4a04      	ldr	r2, [pc, #16]	; (800c11c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	601a      	str	r2, [r3, #0]
    }
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	4618      	mov	r0, r3
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr
 800c11c:	080195b8 	.word	0x080195b8

0800c120 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
    }
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f7ff ffe9 	bl	800c100 <_ZN8touchgfx3LCDD1Ev>
 800c12e:	2108      	movs	r1, #8
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f009 ff69 	bl	8016008 <_ZdlPvj>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	4618      	mov	r0, r3
 800c13a:	3708      	adds	r7, #8
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2200      	movs	r2, #0
 800c14c:	801a      	strh	r2, [r3, #0]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2200      	movs	r2, #0
 800c152:	805a      	strh	r2, [r3, #2]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2200      	movs	r2, #0
 800c158:	809a      	strh	r2, [r3, #4]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2200      	movs	r2, #0
 800c15e:	80da      	strh	r2, [r3, #6]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2200      	movs	r2, #0
 800c164:	811a      	strh	r2, [r3, #8]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2200      	movs	r2, #0
 800c16a:	815a      	strh	r2, [r3, #10]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2200      	movs	r2, #0
 800c170:	819a      	strh	r2, [r3, #12]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	739a      	strb	r2, [r3, #14]
        {
        }
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	4618      	mov	r0, r3
 800c17c:	370c      	adds	r7, #12
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr

0800c186 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800c186:	b580      	push	{r7, lr}
 800c188:	b082      	sub	sp, #8
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	4618      	mov	r0, r3
 800c192:	f7ff ffd5 	bl	800c140 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	611a      	str	r2, [r3, #16]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	829a      	strh	r2, [r3, #20]
    {
    }
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3708      	adds	r7, #8
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	607a      	str	r2, [r7, #4]
 800c1b8:	603b      	str	r3, [r7, #0]
          lastRenderVariant(HARDWARE)
 800c1ba:	4a4a      	ldr	r2, [pc, #296]	; (800c2e4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	601a      	str	r2, [r3, #0]
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	68ba      	ldr	r2, [r7, #8]
 800c1c4:	605a      	str	r2, [r3, #4]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	609a      	str	r2, [r3, #8]
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	683a      	ldr	r2, [r7, #0]
 800c1d0:	60da      	str	r2, [r3, #12]
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	611a      	str	r2, [r3, #16]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	615a      	str	r2, [r3, #20]
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	619a      	str	r2, [r3, #24]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	331c      	adds	r3, #28
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7ff ffcc 	bl	800c186 <_ZN8touchgfx8GesturesC1Ev>
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	639a      	str	r2, [r3, #56]	; 0x38
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	63da      	str	r2, [r3, #60]	; 0x3c
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	641a      	str	r2, [r3, #64]	; 0x40
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2200      	movs	r2, #0
 800c204:	645a      	str	r2, [r3, #68]	; 0x44
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2200      	movs	r2, #0
 800c20a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2201      	movs	r2, #1
 800c212:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2200      	movs	r2, #0
 800c21a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2200      	movs	r2, #0
 800c222:	64da      	str	r2, [r3, #76]	; 0x4c
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	3350      	adds	r3, #80	; 0x50
 800c228:	4618      	mov	r0, r3
 800c22a:	f7fe fbe3 	bl	800a9f4 <_ZN8touchgfx4RectC1Ev>
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2201      	movs	r2, #1
 800c232:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2200      	movs	r2, #0
 800c23a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2200      	movs	r2, #0
 800c242:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2201      	movs	r2, #1
 800c24a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2200      	movs	r2, #0
 800c252:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	2200      	movs	r2, #0
 800c25a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2200      	movs	r2, #0
 800c262:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2200      	movs	r2, #0
 800c26a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2200      	movs	r2, #0
 800c272:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	2200      	movs	r2, #0
 800c27a:	671a      	str	r2, [r3, #112]	; 0x70
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2200      	movs	r2, #0
 800c280:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2200      	movs	r2, #0
 800c288:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2201      	movs	r2, #1
 800c290:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2201      	movs	r2, #1
 800c298:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 800c29c:	4a12      	ldr	r2, [pc, #72]	; (800c2e8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x13c>)
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 800c2a2:	4a12      	ldr	r2, [pc, #72]	; (800c2ec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 800c2a4:	8b3b      	ldrh	r3, [r7, #24]
 800c2a6:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 800c2a8:	4a11      	ldr	r2, [pc, #68]	; (800c2f0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 800c2aa:	8bbb      	ldrh	r3, [r7, #28]
 800c2ac:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 800c2ae:	4b11      	ldr	r3, [pc, #68]	; (800c2f4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x148>)
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800c2b4:	4b0d      	ldr	r3, [pc, #52]	; (800c2ec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 800c2b6:	881a      	ldrh	r2, [r3, #0]
 800c2b8:	4b0f      	ldr	r3, [pc, #60]	; (800c2f8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x14c>)
 800c2ba:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 800c2bc:	4b0c      	ldr	r3, [pc, #48]	; (800c2f0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 800c2be:	881a      	ldrh	r2, [r3, #0]
 800c2c0:	4b0e      	ldr	r3, [pc, #56]	; (800c2fc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x150>)
 800c2c2:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800c2c4:	8b3a      	ldrh	r2, [r7, #24]
 800c2c6:	8bbb      	ldrh	r3, [r7, #28]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	bf34      	ite	cc
 800c2cc:	2301      	movcc	r3, #1
 800c2ce:	2300      	movcs	r3, #0
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3710      	adds	r7, #16
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	08019048 	.word	0x08019048
 800c2e8:	20001250 	.word	0x20001250
 800c2ec:	20001244 	.word	0x20001244
 800c2f0:	20001246 	.word	0x20001246
 800c2f4:	20001248 	.word	0x20001248
 800c2f8:	2000124a 	.word	0x2000124a
 800c2fc:	2000124c 	.word	0x2000124c

0800c300 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800c300:	b580      	push	{r7, lr}
 800c302:	b086      	sub	sp, #24
 800c304:	af02      	add	r7, sp, #8
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	60b9      	str	r1, [r7, #8]
 800c30a:	607a      	str	r2, [r7, #4]
 800c30c:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800c30e:	68f8      	ldr	r0, [r7, #12]
 800c310:	8bbb      	ldrh	r3, [r7, #28]
 800c312:	9301      	str	r3, [sp, #4]
 800c314:	8b3b      	ldrh	r3, [r7, #24]
 800c316:	9300      	str	r3, [sp, #0]
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	68b9      	ldr	r1, [r7, #8]
 800c31e:	f7ff ff45 	bl	800c1ac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800c322:	4a04      	ldr	r2, [pc, #16]	; (800c334 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	601a      	str	r2, [r3, #0]
    }
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	4618      	mov	r0, r3
 800c32c:	3710      	adds	r7, #16
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	080189f0 	.word	0x080189f0

0800c338 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800c338:	b580      	push	{r7, lr}
 800c33a:	b086      	sub	sp, #24
 800c33c:	af02      	add	r7, sp, #8
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	607a      	str	r2, [r7, #4]
 800c344:	603b      	str	r3, [r7, #0]
 800c346:	68f8      	ldr	r0, [r7, #12]
 800c348:	8bbb      	ldrh	r3, [r7, #28]
 800c34a:	9301      	str	r3, [sp, #4]
 800c34c:	8b3b      	ldrh	r3, [r7, #24]
 800c34e:	9300      	str	r3, [sp, #0]
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	68b9      	ldr	r1, [r7, #8]
 800c356:	f7ff ffd3 	bl	800c300 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800c35a:	4a04      	ldr	r2, [pc, #16]	; (800c36c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	601a      	str	r2, [r3, #0]
    }
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	4618      	mov	r0, r3
 800c364:	3710      	adds	r7, #16
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	080188c0 	.word	0x080188c0

0800c370 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	4a04      	ldr	r2, [pc, #16]	; (800c38c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	601a      	str	r2, [r3, #0]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	4618      	mov	r0, r3
 800c382:	370c      	adds	r7, #12
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr
 800c38c:	080188a8 	.word	0x080188a8

0800c390 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7ff ffe8 	bl	800c370 <_ZN8touchgfx15TouchControllerC1Ev>
 800c3a0:	4a03      	ldr	r2, [pc, #12]	; (800c3b0 <_ZN20STM32TouchControllerC1Ev+0x20>)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	601a      	str	r2, [r3, #0]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3708      	adds	r7, #8
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	08018890 	.word	0x08018890

0800c3b4 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	4a05      	ldr	r2, [pc, #20]	; (800c3d4 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	601a      	str	r2, [r3, #0]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7ff fe9b 	bl	800c100 <_ZN8touchgfx3LCDD1Ev>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3708      	adds	r7, #8
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	0801a274 	.word	0x0801a274

0800c3d8 <_ZN8touchgfx8LCD16bppD0Ev>:
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f7ff ffe7 	bl	800c3b4 <_ZN8touchgfx8LCD16bppD1Ev>
 800c3e6:	2178      	movs	r1, #120	; 0x78
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f009 fe0d 	bl	8016008 <_ZdlPvj>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3708      	adds	r7, #8
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <_Z41__static_initialization_and_destruction_0ii>:
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
}
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b084      	sub	sp, #16
 800c3fc:	af02      	add	r7, sp, #8
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2b01      	cmp	r3, #1
 800c406:	d119      	bne.n	800c43c <_Z41__static_initialization_and_destruction_0ii+0x44>
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c40e:	4293      	cmp	r3, r2
 800c410:	d114      	bne.n	800c43c <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 800c412:	4818      	ldr	r0, [pc, #96]	; (800c474 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800c414:	f7ff ffbc 	bl	800c390 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 800c418:	4817      	ldr	r0, [pc, #92]	; (800c478 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800c41a:	f7ff faef 	bl	800b9fc <_ZN10STM32F7DMAC1Ev>
static LCD16bpp display;
 800c41e:	4817      	ldr	r0, [pc, #92]	; (800c47c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800c420:	f008 fc44 	bl	8014cac <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 800c424:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c428:	9301      	str	r3, [sp, #4]
 800c42a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800c42e:	9300      	str	r3, [sp, #0]
 800c430:	4b10      	ldr	r3, [pc, #64]	; (800c474 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800c432:	4a12      	ldr	r2, [pc, #72]	; (800c47c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800c434:	4910      	ldr	r1, [pc, #64]	; (800c478 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800c436:	4812      	ldr	r0, [pc, #72]	; (800c480 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800c438:	f7ff ff7e 	bl	800c338 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d113      	bne.n	800c46a <_Z41__static_initialization_and_destruction_0ii+0x72>
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c448:	4293      	cmp	r3, r2
 800c44a:	d10e      	bne.n	800c46a <_Z41__static_initialization_and_destruction_0ii+0x72>
 800c44c:	480c      	ldr	r0, [pc, #48]	; (800c480 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800c44e:	f7ff f921 	bl	800b694 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800c452:	480c      	ldr	r0, [pc, #48]	; (800c484 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800c454:	f7fd fff6 	bl	800a444 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 800c458:	4808      	ldr	r0, [pc, #32]	; (800c47c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800c45a:	f7ff ffab 	bl	800c3b4 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32F7DMA dma;
 800c45e:	4806      	ldr	r0, [pc, #24]	; (800c478 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800c460:	f7ff faf6 	bl	800ba50 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 800c464:	4803      	ldr	r0, [pc, #12]	; (800c474 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800c466:	f7fe fe61 	bl	800b12c <_ZN20STM32TouchControllerD1Ev>
}
 800c46a:	bf00      	nop
 800c46c:	3708      	adds	r7, #8
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	20000178 	.word	0x20000178
 800c478:	2000017c 	.word	0x2000017c
 800c47c:	20000d9c 	.word	0x20000d9c
 800c480:	20000e14 	.word	0x20000e14
 800c484:	20000038 	.word	0x20000038

0800c488 <_GLOBAL__sub_I_touchgfx_init>:
 800c488:	b580      	push	{r7, lr}
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c490:	2001      	movs	r0, #1
 800c492:	f7ff ffb1 	bl	800c3f8 <_Z41__static_initialization_and_destruction_0ii>
 800c496:	bd80      	pop	{r7, pc}

0800c498 <_GLOBAL__sub_D_touchgfx_init>:
 800c498:	b580      	push	{r7, lr}
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c4a0:	2000      	movs	r0, #0
 800c4a2:	f7ff ffa9 	bl	800c3f8 <_Z41__static_initialization_and_destruction_0ii>
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	3318      	adds	r3, #24
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	4798      	blx	r3
    }
 800c4bc:	bf00      	nop
 800c4be:	3708      	adds	r7, #8
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800c4c4:	b480      	push	{r7}
 800c4c6:	b083      	sub	sp, #12
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	b2da      	uxtb	r2, r3
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 800c4dc:	bf00      	nop
 800c4de:	370c      	adds	r7, #12
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr

0800c4e8 <__NVIC_EnableIRQ>:
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c4f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	db0b      	blt.n	800c512 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c4fa:	79fb      	ldrb	r3, [r7, #7]
 800c4fc:	f003 021f 	and.w	r2, r3, #31
 800c500:	4907      	ldr	r1, [pc, #28]	; (800c520 <__NVIC_EnableIRQ+0x38>)
 800c502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c506:	095b      	lsrs	r3, r3, #5
 800c508:	2001      	movs	r0, #1
 800c50a:	fa00 f202 	lsl.w	r2, r0, r2
 800c50e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c512:	bf00      	nop
 800c514:	370c      	adds	r7, #12
 800c516:	46bd      	mov	sp, r7
 800c518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51c:	4770      	bx	lr
 800c51e:	bf00      	nop
 800c520:	e000e100 	.word	0xe000e100

0800c524 <__NVIC_DisableIRQ>:
{
 800c524:	b480      	push	{r7}
 800c526:	b083      	sub	sp, #12
 800c528:	af00      	add	r7, sp, #0
 800c52a:	4603      	mov	r3, r0
 800c52c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c52e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c532:	2b00      	cmp	r3, #0
 800c534:	db12      	blt.n	800c55c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c536:	79fb      	ldrb	r3, [r7, #7]
 800c538:	f003 021f 	and.w	r2, r3, #31
 800c53c:	490a      	ldr	r1, [pc, #40]	; (800c568 <__NVIC_DisableIRQ+0x44>)
 800c53e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c542:	095b      	lsrs	r3, r3, #5
 800c544:	2001      	movs	r0, #1
 800c546:	fa00 f202 	lsl.w	r2, r0, r2
 800c54a:	3320      	adds	r3, #32
 800c54c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800c550:	f3bf 8f4f 	dsb	sy
}
 800c554:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c556:	f3bf 8f6f 	isb	sy
}
 800c55a:	bf00      	nop
}
 800c55c:	bf00      	nop
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr
 800c568:	e000e100 	.word	0xe000e100

0800c56c <__NVIC_SetPriority>:
{
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
 800c572:	4603      	mov	r3, r0
 800c574:	6039      	str	r1, [r7, #0]
 800c576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	db0a      	blt.n	800c596 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	b2da      	uxtb	r2, r3
 800c584:	490c      	ldr	r1, [pc, #48]	; (800c5b8 <__NVIC_SetPriority+0x4c>)
 800c586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c58a:	0112      	lsls	r2, r2, #4
 800c58c:	b2d2      	uxtb	r2, r2
 800c58e:	440b      	add	r3, r1
 800c590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c594:	e00a      	b.n	800c5ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	b2da      	uxtb	r2, r3
 800c59a:	4908      	ldr	r1, [pc, #32]	; (800c5bc <__NVIC_SetPriority+0x50>)
 800c59c:	79fb      	ldrb	r3, [r7, #7]
 800c59e:	f003 030f 	and.w	r3, r3, #15
 800c5a2:	3b04      	subs	r3, #4
 800c5a4:	0112      	lsls	r2, r2, #4
 800c5a6:	b2d2      	uxtb	r2, r2
 800c5a8:	440b      	add	r3, r1
 800c5aa:	761a      	strb	r2, [r3, #24]
}
 800c5ac:	bf00      	nop
 800c5ae:	370c      	adds	r7, #12
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr
 800c5b8:	e000e100 	.word	0xe000e100
 800c5bc:	e000ed00 	.word	0xe000ed00

0800c5c0 <SCB_CleanInvalidateDCache>:
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b085      	sub	sp, #20
 800c5c4:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800c5c6:	4b21      	ldr	r3, [pc, #132]	; (800c64c <SCB_CleanInvalidateDCache+0x8c>)
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800c5ce:	f3bf 8f4f 	dsb	sy
}
 800c5d2:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800c5d4:	4b1d      	ldr	r3, [pc, #116]	; (800c64c <SCB_CleanInvalidateDCache+0x8c>)
 800c5d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5da:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	0b5b      	lsrs	r3, r3, #13
 800c5e0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800c5e4:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	08db      	lsrs	r3, r3, #3
 800c5ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c5ee:	60bb      	str	r3, [r7, #8]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	015a      	lsls	r2, r3, #5
 800c5f4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800c5f8:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800c5fa:	68ba      	ldr	r2, [r7, #8]
 800c5fc:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800c5fe:	4913      	ldr	r1, [pc, #76]	; (800c64c <SCB_CleanInvalidateDCache+0x8c>)
 800c600:	4313      	orrs	r3, r2
 800c602:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	1e5a      	subs	r2, r3, #1
 800c60a:	60ba      	str	r2, [r7, #8]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	bf14      	ite	ne
 800c610:	2301      	movne	r3, #1
 800c612:	2300      	moveq	r3, #0
 800c614:	b2db      	uxtb	r3, r3
 800c616:	2b00      	cmp	r3, #0
 800c618:	d000      	beq.n	800c61c <SCB_CleanInvalidateDCache+0x5c>
      do {
 800c61a:	e7e9      	b.n	800c5f0 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	1e5a      	subs	r2, r3, #1
 800c620:	60fa      	str	r2, [r7, #12]
 800c622:	2b00      	cmp	r3, #0
 800c624:	bf14      	ite	ne
 800c626:	2301      	movne	r3, #1
 800c628:	2300      	moveq	r3, #0
 800c62a:	b2db      	uxtb	r3, r3
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d000      	beq.n	800c632 <SCB_CleanInvalidateDCache+0x72>
    do {
 800c630:	e7d9      	b.n	800c5e6 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800c632:	f3bf 8f4f 	dsb	sy
}
 800c636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c638:	f3bf 8f6f 	isb	sy
}
 800c63c:	bf00      	nop
}
 800c63e:	bf00      	nop
 800c640:	3714      	adds	r7, #20
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr
 800c64a:	bf00      	nop
 800c64c:	e000ed00 	.word	0xe000ed00

0800c650 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    registerEventListener(*(Application::getInstance()));
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0xC003FC00, (void*)0);
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800c658:	2109      	movs	r1, #9
 800c65a:	205a      	movs	r0, #90	; 0x5a
 800c65c:	f7ff ff86 	bl	800c56c <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800c660:	2109      	movs	r1, #9
 800c662:	2058      	movs	r0, #88	; 0x58
 800c664:	f7ff ff82 	bl	800c56c <__NVIC_SetPriority>
}
 800c668:	bf00      	nop
 800c66a:	3708      	adds	r7, #8
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 800c678:	205a      	movs	r0, #90	; 0x5a
 800c67a:	f7ff ff35 	bl	800c4e8 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800c67e:	2058      	movs	r0, #88	; 0x58
 800c680:	f7ff ff32 	bl	800c4e8 <__NVIC_EnableIRQ>
}
 800c684:	bf00      	nop
 800c686:	3708      	adds	r7, #8
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 800c694:	205a      	movs	r0, #90	; 0x5a
 800c696:	f7ff ff45 	bl	800c524 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800c69a:	2058      	movs	r0, #88	; 0x58
 800c69c:	f7ff ff42 	bl	800c524 <__NVIC_DisableIRQ>
}
 800c6a0:	bf00      	nop
 800c6a2:	3708      	adds	r7, #8
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b083      	sub	sp, #12
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800c6b0:	4b11      	ldr	r3, [pc, #68]	; (800c6f8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800c6b2:	68db      	ldr	r3, [r3, #12]
 800c6b4:	b29b      	uxth	r3, r3
 800c6b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	3b01      	subs	r3, #1
 800c6be:	b29a      	uxth	r2, r3
 800c6c0:	4b0e      	ldr	r3, [pc, #56]	; (800c6fc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800c6c2:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800c6c4:	4b0c      	ldr	r3, [pc, #48]	; (800c6f8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800c6c6:	691b      	ldr	r3, [r3, #16]
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	3b01      	subs	r3, #1
 800c6d2:	b29a      	uxth	r2, r3
 800c6d4:	4b0a      	ldr	r3, [pc, #40]	; (800c700 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800c6d6:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800c6d8:	4b08      	ldr	r3, [pc, #32]	; (800c6fc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800c6da:	881a      	ldrh	r2, [r3, #0]
 800c6dc:	4b06      	ldr	r3, [pc, #24]	; (800c6f8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800c6de:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800c6e0:	4b05      	ldr	r3, [pc, #20]	; (800c6f8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800c6e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6e4:	4a04      	ldr	r2, [pc, #16]	; (800c6f8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800c6e6:	f043 0301 	orr.w	r3, r3, #1
 800c6ea:	6353      	str	r3, [r2, #52]	; 0x34
}
 800c6ec:	bf00      	nop
 800c6ee:	370c      	adds	r7, #12
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr
 800c6f8:	40016800 	.word	0x40016800
 800c6fc:	20000e90 	.word	0x20000e90
 800c700:	20000e92 	.word	0x20000e92

0800c704 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800c704:	b480      	push	{r7}
 800c706:	b083      	sub	sp, #12
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800c70c:	4b03      	ldr	r3, [pc, #12]	; (800c71c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 800c70e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800c710:	4618      	mov	r0, r3
 800c712:	370c      	adds	r7, #12
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr
 800c71c:	40016884 	.word	0x40016884

0800c720 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800c720:	b480      	push	{r7}
 800c722:	b083      	sub	sp, #12
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800c72a:	4a06      	ldr	r2, [pc, #24]	; (800c744 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800c730:	4b05      	ldr	r3, [pc, #20]	; (800c748 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800c732:	2201      	movs	r2, #1
 800c734:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c736:	bf00      	nop
 800c738:	370c      	adds	r7, #12
 800c73a:	46bd      	mov	sp, r7
 800c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c740:	4770      	bx	lr
 800c742:	bf00      	nop
 800c744:	40016884 	.word	0x40016884
 800c748:	40016800 	.word	0x40016800

0800c74c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6839      	ldr	r1, [r7, #0]
 800c75a:	4618      	mov	r0, r3
 800c75c:	f004 fe37 	bl	80113ce <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanInvalidateDCache().
    if ((SCB->CCR & SCB_CCR_DC_Msk) != 0)   // Check data cache is enabled
 800c760:	4b08      	ldr	r3, [pc, #32]	; (800c784 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x38>)
 800c762:	695b      	ldr	r3, [r3, #20]
 800c764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c768:	2b00      	cmp	r3, #0
 800c76a:	bf14      	ite	ne
 800c76c:	2301      	movne	r3, #1
 800c76e:	2300      	moveq	r3, #0
 800c770:	b2db      	uxtb	r3, r3
 800c772:	2b00      	cmp	r3, #0
 800c774:	d001      	beq.n	800c77a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2e>
    {
        SCB_CleanInvalidateDCache();
 800c776:	f7ff ff23 	bl	800c5c0 <SCB_CleanInvalidateDCache>
    }
}
 800c77a:	bf00      	nop
 800c77c:	3708      	adds	r7, #8
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	e000ed00 	.word	0xe000ed00

0800c788 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b084      	sub	sp, #16
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	60b9      	str	r1, [r7, #8]
 800c792:	607a      	str	r2, [r7, #4]
 800c794:	603b      	str	r3, [r7, #0]
  return HAL::blockCopy(dest, src, numBytes);
 800c796:	68f8      	ldr	r0, [r7, #12]
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	68b9      	ldr	r1, [r7, #8]
 800c79e:	f004 ff4a 	bl	8011636 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800c7a2:	4603      	mov	r3, r0
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3710      	adds	r7, #16
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanInvalidateDCache().
    if ((SCB->CCR & SCB_CCR_DC_Msk) != 0)   // Check data cache is enabled
 800c7b4:	4b08      	ldr	r3, [pc, #32]	; (800c7d8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 800c7b6:	695b      	ldr	r3, [r3, #20]
 800c7b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	bf14      	ite	ne
 800c7c0:	2301      	movne	r3, #1
 800c7c2:	2300      	moveq	r3, #0
 800c7c4:	b2db      	uxtb	r3, r3
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d001      	beq.n	800c7ce <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 800c7ca:	f7ff fef9 	bl	800c5c0 <SCB_CleanInvalidateDCache>
    }
}
 800c7ce:	bf00      	nop
 800c7d0:	3708      	adds	r7, #8
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
 800c7d6:	bf00      	nop
 800c7d8:	e000ed00 	.word	0xe000ed00

0800c7dc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b082      	sub	sp, #8
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanInvalidateDCache().
    if ((SCB->CCR & SCB_CCR_DC_Msk) != 0)   // Check data cache is enabled
 800c7e4:	4b08      	ldr	r3, [pc, #32]	; (800c808 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 800c7e6:	695b      	ldr	r3, [r3, #20]
 800c7e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	bf14      	ite	ne
 800c7f0:	2301      	movne	r3, #1
 800c7f2:	2300      	moveq	r3, #0
 800c7f4:	b2db      	uxtb	r3, r3
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d001      	beq.n	800c7fe <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 800c7fa:	f7ff fee1 	bl	800c5c0 <SCB_CleanInvalidateDCache>
    }
}
 800c7fe:	bf00      	nop
 800c800:	3708      	adds	r7, #8
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
 800c806:	bf00      	nop
 800c808:	e000ed00 	.word	0xe000ed00

0800c80c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 800c814:	4b1a      	ldr	r3, [pc, #104]	; (800c880 <HAL_LTDC_LineEventCallback+0x74>)
 800c816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c818:	4a1a      	ldr	r2, [pc, #104]	; (800c884 <HAL_LTDC_LineEventCallback+0x78>)
 800c81a:	8812      	ldrh	r2, [r2, #0]
 800c81c:	4293      	cmp	r3, r2
 800c81e:	bf0c      	ite	eq
 800c820:	2301      	moveq	r3, #1
 800c822:	2300      	movne	r3, #0
 800c824:	b2db      	uxtb	r3, r3
 800c826:	2b00      	cmp	r3, #0
 800c828:	d017      	beq.n	800c85a <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800c82a:	4b17      	ldr	r3, [pc, #92]	; (800c888 <HAL_LTDC_LineEventCallback+0x7c>)
 800c82c:	881b      	ldrh	r3, [r3, #0]
 800c82e:	4619      	mov	r1, r3
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f7f8 fd53 	bl	80052dc <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 800c836:	f7fe f8a9 	bl	800a98c <_ZN8touchgfx3HAL11getInstanceEv>
 800c83a:	4603      	mov	r3, r0
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7ff fe41 	bl	800c4c4 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800c842:	f7fe ffb5 	bl	800b7b0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800c846:	f7fe f8a1 	bl	800a98c <_ZN8touchgfx3HAL11getInstanceEv>
 800c84a:	4603      	mov	r3, r0
 800c84c:	4618      	mov	r0, r3
 800c84e:	f005 fb1f 	bl	8011e90 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800c852:	2000      	movs	r0, #0
 800c854:	f7fe fc8c 	bl	800b170 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 800c858:	e00e      	b.n	800c878 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800c85a:	4b0a      	ldr	r3, [pc, #40]	; (800c884 <HAL_LTDC_LineEventCallback+0x78>)
 800c85c:	881b      	ldrh	r3, [r3, #0]
 800c85e:	4619      	mov	r1, r3
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f7f8 fd3b 	bl	80052dc <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800c866:	2000      	movs	r0, #0
 800c868:	f7fe fc8d 	bl	800b186 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 800c86c:	f7fe f88e 	bl	800a98c <_ZN8touchgfx3HAL11getInstanceEv>
 800c870:	4603      	mov	r3, r0
 800c872:	4618      	mov	r0, r3
 800c874:	f7ff fe18 	bl	800c4a8 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 800c878:	bf00      	nop
 800c87a:	3708      	adds	r7, #8
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	40016800 	.word	0x40016800
 800c884:	20000e90 	.word	0x20000e90
 800c888:	20000e92 	.word	0x20000e92

0800c88c <_ZN9interface11GuiObserverD1Ev>:
namespace interface {

class GuiObserver
{
public:
    virtual ~GuiObserver() {}
 800c88c:	b480      	push	{r7}
 800c88e:	b083      	sub	sp, #12
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
 800c894:	4a04      	ldr	r2, [pc, #16]	; (800c8a8 <_ZN9interface11GuiObserverD1Ev+0x1c>)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	601a      	str	r2, [r3, #0]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	4618      	mov	r0, r3
 800c89e:	370c      	adds	r7, #12
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a6:	4770      	bx	lr
 800c8a8:	08018abc 	.word	0x08018abc

0800c8ac <_ZN9interface11GuiObserverD0Ev>:
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f7ff ffe9 	bl	800c88c <_ZN9interface11GuiObserverD1Ev>
 800c8ba:	2104      	movs	r1, #4
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f009 fba3 	bl	8016008 <_ZdlPvj>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3708      	adds	r7, #8
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <_ZN12oscilloscope10ControllerD1Ev>:
class Controller : public XFBehavior,
                   public interface::GuiObserver
{
public:
	Controller();
	virtual ~Controller() {}
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	4a09      	ldr	r2, [pc, #36]	; (800c8fc <_ZN12oscilloscope10ControllerD1Ev+0x30>)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	601a      	str	r2, [r3, #0]
 800c8da:	4a09      	ldr	r2, [pc, #36]	; (800c900 <_ZN12oscilloscope10ControllerD1Ev+0x34>)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	611a      	str	r2, [r3, #16]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	3310      	adds	r3, #16
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7ff ffd1 	bl	800c88c <_ZN9interface11GuiObserverD1Ev>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f001 ffbd 	bl	800e86c <_ZN10XFBehaviorD1Ev>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3708      	adds	r7, #8
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}
 800c8fc:	08018b3c 	.word	0x08018b3c
 800c900:	08018b70 	.word	0x08018b70

0800c904 <_ZThn16_N12oscilloscope10ControllerD1Ev>:
 800c904:	f1a0 0010 	sub.w	r0, r0, #16
 800c908:	e7e0      	b.n	800c8cc <_ZN12oscilloscope10ControllerD1Ev>
 800c90a:	bf00      	nop

0800c90c <_ZN12oscilloscope10ControllerD0Ev>:
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f7ff ffd9 	bl	800c8cc <_ZN12oscilloscope10ControllerD1Ev>
 800c91a:	2134      	movs	r1, #52	; 0x34
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f009 fb73 	bl	8016008 <_ZdlPvj>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	4618      	mov	r0, r3
 800c926:	3708      	adds	r7, #8
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <_ZThn16_N12oscilloscope10ControllerD0Ev>:
 800c92c:	f1a0 0010 	sub.w	r0, r0, #16
 800c930:	e7ec      	b.n	800c90c <_ZN12oscilloscope10ControllerD0Ev>
	...

0800c934 <_ZN9interface33ButtonsControllerCallbackProviderD1Ev>:
 *
 */
class ButtonsControllerCallbackProvider
{
public:
    virtual ~ButtonsControllerCallbackProvider() {}
 800c934:	b480      	push	{r7}
 800c936:	b083      	sub	sp, #12
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	4a04      	ldr	r2, [pc, #16]	; (800c950 <_ZN9interface33ButtonsControllerCallbackProviderD1Ev+0x1c>)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	601a      	str	r2, [r3, #0]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	4618      	mov	r0, r3
 800c946:	370c      	adds	r7, #12
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr
 800c950:	08018aac 	.word	0x08018aac

0800c954 <_ZN9interface33ButtonsControllerCallbackProviderD0Ev>:
 800c954:	b580      	push	{r7, lr}
 800c956:	b082      	sub	sp, #8
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f7ff ffe9 	bl	800c934 <_ZN9interface33ButtonsControllerCallbackProviderD1Ev>
 800c962:	2104      	movs	r1, #4
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f009 fb4f 	bl	8016008 <_ZdlPvj>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	4618      	mov	r0, r3
 800c96e:	3708      	adds	r7, #8
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <_ZN7Factory21getFrequencyGeneratorEv>:
    static TouchGfxTask touchGfxTask;
    return touchGfxTask;
}
#endif  // TOUCHGFX_BAREMETAL

FrequencyGenerator& Factory::getFrequencyGenerator() {
 800c974:	b480      	push	{r7}
 800c976:	af00      	add	r7, sp, #0
	return _fgen;
 800c978:	4b02      	ldr	r3, [pc, #8]	; (800c984 <_ZN7Factory21getFrequencyGeneratorEv+0x10>)
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr
 800c984:	20000ee0 	.word	0x20000ee0

0800c988 <_ZN12oscilloscope17FreqGenControllerD1Ev>:
} Frequency;

/**
 * @brief Frequency generator controller to drive external MinGen module with buttons.
 */
class FreqGenController : public interface::ButtonsControllerCallbackProvider,
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	4a09      	ldr	r2, [pc, #36]	; (800c9b8 <_ZN12oscilloscope17FreqGenControllerD1Ev+0x30>)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	601a      	str	r2, [r3, #0]
 800c996:	4a09      	ldr	r2, [pc, #36]	; (800c9bc <_ZN12oscilloscope17FreqGenControllerD1Ev+0x34>)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	605a      	str	r2, [r3, #4]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	3304      	adds	r3, #4
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f001 ff63 	bl	800e86c <_ZN10XFBehaviorD1Ev>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f7ff ffc3 	bl	800c934 <_ZN9interface33ButtonsControllerCallbackProviderD1Ev>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3708      	adds	r7, #8
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}
 800c9b8:	08018ad8 	.word	0x08018ad8
 800c9bc:	08018aec 	.word	0x08018aec

0800c9c0 <_ZThn4_N12oscilloscope17FreqGenControllerD1Ev>:
 800c9c0:	f1a0 0004 	sub.w	r0, r0, #4
 800c9c4:	e7e0      	b.n	800c988 <_ZN12oscilloscope17FreqGenControllerD1Ev>
 800c9c6:	bf00      	nop

0800c9c8 <_ZN12oscilloscope17FreqGenControllerD0Ev>:
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b082      	sub	sp, #8
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f7ff ffd9 	bl	800c988 <_ZN12oscilloscope17FreqGenControllerD1Ev>
 800c9d6:	211c      	movs	r1, #28
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f009 fb15 	bl	8016008 <_ZdlPvj>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3708      	adds	r7, #8
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <_ZThn4_N12oscilloscope17FreqGenControllerD0Ev>:
 800c9e8:	f1a0 0004 	sub.w	r0, r0, #4
 800c9ec:	e7ec      	b.n	800c9c8 <_ZN12oscilloscope17FreqGenControllerD0Ev>
	...

0800c9f0 <_ZN12oscilloscope3GuiD1Ev>:
 *
 * The GUI class uses a graphical library to show the oscilloscope view.
 *
 * Internally, the Gui class uses a thread handling the touch events from the LCD.
 */
class Gui : XFBehavior
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	4a05      	ldr	r2, [pc, #20]	; (800ca10 <_ZN12oscilloscope3GuiD1Ev+0x20>)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	601a      	str	r2, [r3, #0]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	4618      	mov	r0, r3
 800ca02:	f001 ff33 	bl	800e86c <_ZN10XFBehaviorD1Ev>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3708      	adds	r7, #8
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	08018b14 	.word	0x08018b14

0800ca14 <_ZN12oscilloscope3GuiD0Ev>:
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b082      	sub	sp, #8
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f7ff ffe7 	bl	800c9f0 <_ZN12oscilloscope3GuiD1Ev>
 800ca22:	2118      	movs	r1, #24
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f009 faef 	bl	8016008 <_ZdlPvj>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3708      	adds	r7, #8
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <_Z41__static_initialization_and_destruction_0ii>:
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d113      	bne.n	800ca6c <_Z41__static_initialization_and_destruction_0ii+0x38>
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d10e      	bne.n	800ca6c <_Z41__static_initialization_and_destruction_0ii+0x38>
oscilloscope::Controller Factory::_oscilloscopeController;
 800ca4e:	4813      	ldr	r0, [pc, #76]	; (800ca9c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800ca50:	f000 fd36 	bl	800d4c0 <_ZN12oscilloscope10ControllerC1Ev>
oscilloscope::Gui Factory::_gui;
 800ca54:	4812      	ldr	r0, [pc, #72]	; (800caa0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800ca56:	f000 fbf5 	bl	800d244 <_ZN12oscilloscope3GuiC1Ev>
external::FrequencyGenerator Factory::_fgen;
 800ca5a:	4812      	ldr	r0, [pc, #72]	; (800caa4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800ca5c:	f001 f852 	bl	800db04 <_ZN8external18FrequencyGeneratorC1Ev>
oscilloscope::FreqGenController Factory::_fgenctrl;
 800ca60:	4811      	ldr	r0, [pc, #68]	; (800caa8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800ca62:	f000 f889 	bl	800cb78 <_ZN12oscilloscope17FreqGenControllerC1Ev>
ButtonsController Factory::_bc;
 800ca66:	4811      	ldr	r0, [pc, #68]	; (800caac <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800ca68:	f001 f90e 	bl	800dc88 <_ZN17ButtonsControllerC1Ev>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d110      	bne.n	800ca94 <_Z41__static_initialization_and_destruction_0ii+0x60>
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d10b      	bne.n	800ca94 <_Z41__static_initialization_and_destruction_0ii+0x60>
 800ca7c:	480b      	ldr	r0, [pc, #44]	; (800caac <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800ca7e:	f001 f953 	bl	800dd28 <_ZN17ButtonsControllerD1Ev>
oscilloscope::FreqGenController Factory::_fgenctrl;
 800ca82:	4809      	ldr	r0, [pc, #36]	; (800caa8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800ca84:	f7ff ff80 	bl	800c988 <_ZN12oscilloscope17FreqGenControllerD1Ev>
oscilloscope::Gui Factory::_gui;
 800ca88:	4805      	ldr	r0, [pc, #20]	; (800caa0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800ca8a:	f7ff ffb1 	bl	800c9f0 <_ZN12oscilloscope3GuiD1Ev>
oscilloscope::Controller Factory::_oscilloscopeController;
 800ca8e:	4803      	ldr	r0, [pc, #12]	; (800ca9c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800ca90:	f7ff ff1c 	bl	800c8cc <_ZN12oscilloscope10ControllerD1Ev>
}
 800ca94:	bf00      	nop
 800ca96:	3708      	adds	r7, #8
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}
 800ca9c:	20000e94 	.word	0x20000e94
 800caa0:	20000ec8 	.word	0x20000ec8
 800caa4:	20000ee0 	.word	0x20000ee0
 800caa8:	20000ee8 	.word	0x20000ee8
 800caac:	20000f04 	.word	0x20000f04

0800cab0 <_GLOBAL__sub_I__ZN7Factory23_oscilloscopeControllerE>:
 800cab0:	b580      	push	{r7, lr}
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cab8:	2001      	movs	r0, #1
 800caba:	f7ff ffbb 	bl	800ca34 <_Z41__static_initialization_and_destruction_0ii>
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <_GLOBAL__sub_D__ZN7Factory23_oscilloscopeControllerE>:
 800cac0:	b580      	push	{r7, lr}
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cac8:	2000      	movs	r0, #0
 800caca:	f7ff ffb3 	bl	800ca34 <_Z41__static_initialization_and_destruction_0ii>
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <_ZNK7XFEvent12getEventTypeEv>:

    /** \brief Returns the type of the event.
     *
     * Can be used to distinguish between an event or a timeout.
     */
    inline XFEventType getEventType() const { return eventType_; }
 800cad0:	b480      	push	{r7}
 800cad2:	b083      	sub	sp, #12
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cade:	4618      	mov	r0, r3
 800cae0:	370c      	adds	r7, #12
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr

0800caea <_ZNK7XFEvent5getIdEv>:
    /** \brief Sets pointer to behavioral class (see #_pBehavior).
     * Sets the behavior in which the event should be executed.
     */
    inline void setBehavior(interface::XFReactive * pBehavior) { pBehavior_ = pBehavior; }

    inline int getId() const { return id_; }		///< Returns #_id identifying the event in the behaviors context.
 800caea:	b480      	push	{r7}
 800caec:	b083      	sub	sp, #12
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	689b      	ldr	r3, [r3, #8]
 800caf6:	4618      	mov	r0, r3
 800caf8:	370c      	adds	r7, #12
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr

0800cb02 <_ZN13XFEventStatusC1ENS_12eEventStatusE>:
	/**
	 * Constructor
	 *
	 * \param eventStatus Initial value of the event status.
	 */
    XFEventStatus(eEventStatus eventStatus = Unknown) : status_(eventStatus) {}
 800cb02:	b480      	push	{r7}
 800cb04:	b083      	sub	sp, #12
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	70fb      	strb	r3, [r7, #3]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	78fa      	ldrb	r2, [r7, #3]
 800cb12:	701a      	strb	r2, [r3, #0]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	4618      	mov	r0, r3
 800cb18:	370c      	adds	r7, #12
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb20:	4770      	bx	lr
	...

0800cb24 <_ZN9interface33ButtonsControllerCallbackProviderC1Ev>:
     *
     */
    typedef void (ButtonsControllerCallbackProvider::*CallbackMethod)(uint16_t buttonIndex, bool pressed);

protected:
    ButtonsControllerCallbackProvider() {}                                  ///< Not allowing to instantiate object of interface.
 800cb24:	b480      	push	{r7}
 800cb26:	b083      	sub	sp, #12
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	4a04      	ldr	r2, [pc, #16]	; (800cb40 <_ZN9interface33ButtonsControllerCallbackProviderC1Ev+0x1c>)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	601a      	str	r2, [r3, #0]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	4618      	mov	r0, r3
 800cb36:	370c      	adds	r7, #12
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr
 800cb40:	08018aac 	.word	0x08018aac

0800cb44 <_ZNK12oscilloscope17FreqGenController3guiEv>:
    XFEventStatus processEvent();
    void start();
    void initialize(oscilloscope::Gui & gui);

protected:
    inline oscilloscope::Gui & gui() const { assert(_pGui); return *_pGui; }
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	695b      	ldr	r3, [r3, #20]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d105      	bne.n	800cb60 <_ZNK12oscilloscope17FreqGenController3guiEv+0x1c>
 800cb54:	4b05      	ldr	r3, [pc, #20]	; (800cb6c <_ZNK12oscilloscope17FreqGenController3guiEv+0x28>)
 800cb56:	4a06      	ldr	r2, [pc, #24]	; (800cb70 <_ZNK12oscilloscope17FreqGenController3guiEv+0x2c>)
 800cb58:	213d      	movs	r1, #61	; 0x3d
 800cb5a:	4806      	ldr	r0, [pc, #24]	; (800cb74 <_ZNK12oscilloscope17FreqGenController3guiEv+0x30>)
 800cb5c:	f009 fc86 	bl	801646c <__assert_func>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	695b      	ldr	r3, [r3, #20]
 800cb64:	4618      	mov	r0, r3
 800cb66:	3708      	adds	r7, #8
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	08017ed4 	.word	0x08017ed4
 800cb70:	08017edc 	.word	0x08017edc
 800cb74:	08017f1c 	.word	0x08017f1c

0800cb78 <_ZN12oscilloscope17FreqGenControllerC1Ev>:
namespace oscilloscope
{

FreqGenController* FreqGenController::_instance = nullptr;

FreqGenController::FreqGenController():
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
    _pGui(nullptr)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7ff ffce 	bl	800cb24 <_ZN9interface33ButtonsControllerCallbackProviderC1Ev>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	3304      	adds	r3, #4
 800cb8c:	2100      	movs	r1, #0
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f001 fe1e 	bl	800e7d0 <_ZN10XFBehaviorC1Eb>
 800cb94:	4a13      	ldr	r2, [pc, #76]	; (800cbe4 <_ZN12oscilloscope17FreqGenControllerC1Ev+0x6c>)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	601a      	str	r2, [r3, #0]
 800cb9a:	4a13      	ldr	r2, [pc, #76]	; (800cbe8 <_ZN12oscilloscope17FreqGenControllerC1Ev+0x70>)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	605a      	str	r2, [r3, #4]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2200      	movs	r2, #0
 800cba4:	615a      	str	r2, [r3, #20]
{
    assert (_instance==nullptr);
 800cba6:	4b11      	ldr	r3, [pc, #68]	; (800cbec <_ZN12oscilloscope17FreqGenControllerC1Ev+0x74>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d005      	beq.n	800cbba <_ZN12oscilloscope17FreqGenControllerC1Ev+0x42>
 800cbae:	4b10      	ldr	r3, [pc, #64]	; (800cbf0 <_ZN12oscilloscope17FreqGenControllerC1Ev+0x78>)
 800cbb0:	4a10      	ldr	r2, [pc, #64]	; (800cbf4 <_ZN12oscilloscope17FreqGenControllerC1Ev+0x7c>)
 800cbb2:	2110      	movs	r1, #16
 800cbb4:	4810      	ldr	r0, [pc, #64]	; (800cbf8 <_ZN12oscilloscope17FreqGenControllerC1Ev+0x80>)
 800cbb6:	f009 fc59 	bl	801646c <__assert_func>
    _instance = this;
 800cbba:	4a0c      	ldr	r2, [pc, #48]	; (800cbec <_ZN12oscilloscope17FreqGenControllerC1Ev+0x74>)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6013      	str	r3, [r2, #0]
		EXTFREQGEN_START_FREQUENCY == HZ_700  ||
		EXTFREQGEN_START_FREQUENCY == HZ_1000 ||
		EXTFREQGEN_START_FREQUENCY == HZ_5000 ||
		EXTFREQGEN_START_FREQUENCY == HZ_10000)
    {
    	_frequency = EXTFREQGEN_START_FREQUENCY;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cbc6:	831a      	strh	r2, [r3, #24]
    }
    if (EXTFREQGEN_START_WAVEFORM == SINUS   ||
    	EXTFREQGEN_START_WAVEFORM == TRIANGLE   ||
		EXTFREQGEN_START_WAVEFORM == SQUARE)
    {
    	_mode = EXTFREQGEN_START_WAVEFORM;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2201      	movs	r2, #1
 800cbcc:	769a      	strb	r2, [r3, #26]
    }
    else
    {
    	_mode = SINUS;
    }
    change();
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 fa8e 	bl	800d0f0 <_ZN12oscilloscope17FreqGenController6changeEv>

    state = ST_INIT;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	76da      	strb	r2, [r3, #27]
}
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3708      	adds	r7, #8
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	08018ad8 	.word	0x08018ad8
 800cbe8:	08018aec 	.word	0x08018aec
 800cbec:	20000f80 	.word	0x20000f80
 800cbf0:	08017f60 	.word	0x08017f60
 800cbf4:	08017f74 	.word	0x08017f74
 800cbf8:	08017fac 	.word	0x08017fac

0800cbfc <_ZN12oscilloscope17FreqGenController12processEventEv>:
FreqGenController* FreqGenController::getInstance() {
	return _instance;
}


 XFEventStatus FreqGenController::processEvent() {
 800cbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbfe:	b087      	sub	sp, #28
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
	XFEventStatus retVal = XFEventStatus::NotConsumed;
 800cc04:	f107 0308 	add.w	r3, r7, #8
 800cc08:	2102      	movs	r1, #2
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7ff ff79 	bl	800cb02 <_ZN13XFEventStatusC1ENS_12eEventStatusE>
	FCG_STATES oldState = state;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	7edb      	ldrb	r3, [r3, #27]
 800cc14:	75fb      	strb	r3, [r7, #23]
	const XFEvent* ev = getCurrentEvent();
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	3304      	adds	r3, #4
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f001 fed9 	bl	800e9d2 <_ZNK10XFBehavior15getCurrentEventEv>
 800cc20:	6138      	str	r0, [r7, #16]
	switch (state)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	7edb      	ldrb	r3, [r3, #27]
 800cc26:	2b04      	cmp	r3, #4
 800cc28:	dc50      	bgt.n	800cccc <_ZN12oscilloscope17FreqGenController12processEventEv+0xd0>
 800cc2a:	2b02      	cmp	r3, #2
 800cc2c:	da3f      	bge.n	800ccae <_ZN12oscilloscope17FreqGenController12processEventEv+0xb2>
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d002      	beq.n	800cc38 <_ZN12oscilloscope17FreqGenController12processEventEv+0x3c>
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d00f      	beq.n	800cc56 <_ZN12oscilloscope17FreqGenController12processEventEv+0x5a>
		{
			state = ST_WAITBUTTON;
		}
		break;
	default:
		break;
 800cc36:	e049      	b.n	800cccc <_ZN12oscilloscope17FreqGenController12processEventEv+0xd0>
		if (ev->getEventType()==XFEvent::Initial)
 800cc38:	6938      	ldr	r0, [r7, #16]
 800cc3a:	f7ff ff49 	bl	800cad0 <_ZNK7XFEvent12getEventTypeEv>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	bf0c      	ite	eq
 800cc44:	2301      	moveq	r3, #1
 800cc46:	2300      	movne	r3, #0
 800cc48:	b2db      	uxtb	r3, r3
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d040      	beq.n	800ccd0 <_ZN12oscilloscope17FreqGenController12processEventEv+0xd4>
			state = ST_WAITBUTTON;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2201      	movs	r2, #1
 800cc52:	76da      	strb	r2, [r3, #27]
		break;
 800cc54:	e03c      	b.n	800ccd0 <_ZN12oscilloscope17FreqGenController12processEventEv+0xd4>
		if (ev->getEventType()==XFEvent::Event && ev->getId() == evButtonPressedId)
 800cc56:	6938      	ldr	r0, [r7, #16]
 800cc58:	f7ff ff3a 	bl	800cad0 <_ZNK7XFEvent12getEventTypeEv>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b03      	cmp	r3, #3
 800cc60:	d107      	bne.n	800cc72 <_ZN12oscilloscope17FreqGenController12processEventEv+0x76>
 800cc62:	6938      	ldr	r0, [r7, #16]
 800cc64:	f7ff ff41 	bl	800caea <_ZNK7XFEvent5getIdEv>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	2b02      	cmp	r3, #2
 800cc6c:	d101      	bne.n	800cc72 <_ZN12oscilloscope17FreqGenController12processEventEv+0x76>
 800cc6e:	2301      	movs	r3, #1
 800cc70:	e000      	b.n	800cc74 <_ZN12oscilloscope17FreqGenController12processEventEv+0x78>
 800cc72:	2300      	movs	r3, #0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d02d      	beq.n	800ccd4 <_ZN12oscilloscope17FreqGenController12processEventEv+0xd8>
			switch (((evButtonPressed*) ev)->buttonIndex())
 800cc78:	6938      	ldr	r0, [r7, #16]
 800cc7a:	f000 ff37 	bl	800daec <_ZN15evButtonPressed11buttonIndexEv>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	2b03      	cmp	r3, #3
 800cc82:	d00e      	beq.n	800cca2 <_ZN12oscilloscope17FreqGenController12processEventEv+0xa6>
 800cc84:	2b03      	cmp	r3, #3
 800cc86:	dc10      	bgt.n	800ccaa <_ZN12oscilloscope17FreqGenController12processEventEv+0xae>
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d002      	beq.n	800cc92 <_ZN12oscilloscope17FreqGenController12processEventEv+0x96>
 800cc8c:	2b02      	cmp	r3, #2
 800cc8e:	d004      	beq.n	800cc9a <_ZN12oscilloscope17FreqGenController12processEventEv+0x9e>
					break;
 800cc90:	e00b      	b.n	800ccaa <_ZN12oscilloscope17FreqGenController12processEventEv+0xae>
					state = ST_CHANGEFREQDOWN;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2203      	movs	r2, #3
 800cc96:	76da      	strb	r2, [r3, #27]
					break;
 800cc98:	e008      	b.n	800ccac <_ZN12oscilloscope17FreqGenController12processEventEv+0xb0>
					state = ST_CHANGEFREQUP;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2202      	movs	r2, #2
 800cc9e:	76da      	strb	r2, [r3, #27]
					break;
 800cca0:	e004      	b.n	800ccac <_ZN12oscilloscope17FreqGenController12processEventEv+0xb0>
					state = ST_CHANGEMODE;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2204      	movs	r2, #4
 800cca6:	76da      	strb	r2, [r3, #27]
						break;
 800cca8:	e000      	b.n	800ccac <_ZN12oscilloscope17FreqGenController12processEventEv+0xb0>
					break;
 800ccaa:	bf00      	nop
		break;
 800ccac:	e012      	b.n	800ccd4 <_ZN12oscilloscope17FreqGenController12processEventEv+0xd8>
		if (ev->getEventType()==XFEvent::NullTransition )
 800ccae:	6938      	ldr	r0, [r7, #16]
 800ccb0:	f7ff ff0e 	bl	800cad0 <_ZNK7XFEvent12getEventTypeEv>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	2b02      	cmp	r3, #2
 800ccb8:	bf0c      	ite	eq
 800ccba:	2301      	moveq	r3, #1
 800ccbc:	2300      	movne	r3, #0
 800ccbe:	b2db      	uxtb	r3, r3
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d009      	beq.n	800ccd8 <_ZN12oscilloscope17FreqGenController12processEventEv+0xdc>
			state = ST_WAITBUTTON;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	76da      	strb	r2, [r3, #27]
		break;
 800ccca:	e005      	b.n	800ccd8 <_ZN12oscilloscope17FreqGenController12processEventEv+0xdc>
		break;
 800cccc:	bf00      	nop
 800ccce:	e004      	b.n	800ccda <_ZN12oscilloscope17FreqGenController12processEventEv+0xde>
		break;
 800ccd0:	bf00      	nop
 800ccd2:	e002      	b.n	800ccda <_ZN12oscilloscope17FreqGenController12processEventEv+0xde>
		break;
 800ccd4:	bf00      	nop
 800ccd6:	e000      	b.n	800ccda <_ZN12oscilloscope17FreqGenController12processEventEv+0xde>
		break;
 800ccd8:	bf00      	nop
	}
	if (oldState != state)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	7edb      	ldrb	r3, [r3, #27]
 800ccde:	7dfa      	ldrb	r2, [r7, #23]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d068      	beq.n	800cdb6 <_ZN12oscilloscope17FreqGenController12processEventEv+0x1ba>
	{
		retVal = XFEventStatus::Consumed;
 800cce4:	f107 030c 	add.w	r3, r7, #12
 800cce8:	2101      	movs	r1, #1
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7ff ff09 	bl	800cb02 <_ZN13XFEventStatusC1ENS_12eEventStatusE>
 800ccf0:	7b3b      	ldrb	r3, [r7, #12]
 800ccf2:	723b      	strb	r3, [r7, #8]
		switch (state)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	7edb      	ldrb	r3, [r3, #27]
 800ccf8:	2b04      	cmp	r3, #4
 800ccfa:	d85b      	bhi.n	800cdb4 <_ZN12oscilloscope17FreqGenController12processEventEv+0x1b8>
 800ccfc:	a201      	add	r2, pc, #4	; (adr r2, 800cd04 <_ZN12oscilloscope17FreqGenController12processEventEv+0x108>)
 800ccfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd02:	bf00      	nop
 800cd04:	0800cdb5 	.word	0x0800cdb5
 800cd08:	0800cdb5 	.word	0x0800cdb5
 800cd0c:	0800cd19 	.word	0x0800cd19
 800cd10:	0800cd4d 	.word	0x0800cd4d
 800cd14:	0800cd81 	.word	0x0800cd81
		case ST_INIT:
			break;
		case ST_WAITBUTTON:
			break;
		case ST_CHANGEFREQUP:
			frequencyUp();
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 f855 	bl	800cdc8 <_ZN12oscilloscope17FreqGenController11frequencyUpEv>
			change();
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 f9e6 	bl	800d0f0 <_ZN12oscilloscope17FreqGenController6changeEv>
			GEN(XFNullTransition());
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	1d1d      	adds	r5, r3, #4
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	685b      	ldr	r3, [r3, #4]
 800cd2c:	330c      	adds	r3, #12
 800cd2e:	681c      	ldr	r4, [r3, #0]
 800cd30:	2010      	movs	r0, #16
 800cd32:	f009 f97a 	bl	801602a <_Znwj>
 800cd36:	4603      	mov	r3, r0
 800cd38:	461e      	mov	r6, r3
 800cd3a:	2100      	movs	r1, #0
 800cd3c:	4630      	mov	r0, r6
 800cd3e:	f001 fed3 	bl	800eae8 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 800cd42:	2200      	movs	r2, #0
 800cd44:	4631      	mov	r1, r6
 800cd46:	4628      	mov	r0, r5
 800cd48:	47a0      	blx	r4
			break;
 800cd4a:	e034      	b.n	800cdb6 <_ZN12oscilloscope17FreqGenController12processEventEv+0x1ba>
		case ST_CHANGEFREQDOWN:
			frequencyDown();
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f000 f8b9 	bl	800cec4 <_ZN12oscilloscope17FreqGenController13frequencyDownEv>
			change();
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f000 f9cc 	bl	800d0f0 <_ZN12oscilloscope17FreqGenController6changeEv>
			GEN(XFNullTransition());
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	1d1d      	adds	r5, r3, #4
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	685b      	ldr	r3, [r3, #4]
 800cd60:	330c      	adds	r3, #12
 800cd62:	681c      	ldr	r4, [r3, #0]
 800cd64:	2010      	movs	r0, #16
 800cd66:	f009 f960 	bl	801602a <_Znwj>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	461e      	mov	r6, r3
 800cd6e:	2100      	movs	r1, #0
 800cd70:	4630      	mov	r0, r6
 800cd72:	f001 feb9 	bl	800eae8 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 800cd76:	2200      	movs	r2, #0
 800cd78:	4631      	mov	r1, r6
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	47a0      	blx	r4
			break;
 800cd7e:	e01a      	b.n	800cdb6 <_ZN12oscilloscope17FreqGenController12processEventEv+0x1ba>
		case ST_CHANGEMODE:
			shiftMode();
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f000 f91d 	bl	800cfc0 <_ZN12oscilloscope17FreqGenController9shiftModeEv>
			change();
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f000 f9b2 	bl	800d0f0 <_ZN12oscilloscope17FreqGenController6changeEv>
			GEN(XFNullTransition());
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	1d1d      	adds	r5, r3, #4
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	330c      	adds	r3, #12
 800cd96:	681c      	ldr	r4, [r3, #0]
 800cd98:	2010      	movs	r0, #16
 800cd9a:	f009 f946 	bl	801602a <_Znwj>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	461e      	mov	r6, r3
 800cda2:	2100      	movs	r1, #0
 800cda4:	4630      	mov	r0, r6
 800cda6:	f001 fe9f 	bl	800eae8 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 800cdaa:	2200      	movs	r2, #0
 800cdac:	4631      	mov	r1, r6
 800cdae:	4628      	mov	r0, r5
 800cdb0:	47a0      	blx	r4
			break;
 800cdb2:	e000      	b.n	800cdb6 <_ZN12oscilloscope17FreqGenController12processEventEv+0x1ba>
		default:
			break;
 800cdb4:	bf00      	nop
		}
	}
	return retVal;
 800cdb6:	7a3b      	ldrb	r3, [r7, #8]
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	371c      	adds	r7, #28
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cdc0 <_ZThn4_N12oscilloscope17FreqGenController12processEventEv>:
    XFEventStatus processEvent();
 800cdc0:	f1a0 0004 	sub.w	r0, r0, #4
 800cdc4:	f7ff bf1a 	b.w	800cbfc <_ZN12oscilloscope17FreqGenController12processEventEv>

0800cdc8 <_ZN12oscilloscope17FreqGenController11frequencyUpEv>:

void FreqGenController::start() {
	startBehavior();
}

void FreqGenController::frequencyUp() {
 800cdc8:	b590      	push	{r4, r7, lr}
 800cdca:	b089      	sub	sp, #36	; 0x24
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
	//change the frequency up
	switch (_frequency)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	8b1b      	ldrh	r3, [r3, #24]
 800cdd4:	f242 7210 	movw	r2, #10000	; 0x2710
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	d052      	beq.n	800ce82 <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xba>
 800cddc:	f242 7210 	movw	r2, #10000	; 0x2710
 800cde0:	4293      	cmp	r3, r2
 800cde2:	dc52      	bgt.n	800ce8a <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc2>
 800cde4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d045      	beq.n	800ce78 <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xb0>
 800cdec:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	dc4a      	bgt.n	800ce8a <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc2>
 800cdf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cdf8:	d039      	beq.n	800ce6e <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xa6>
 800cdfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cdfe:	dc44      	bgt.n	800ce8a <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc2>
 800ce00:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800ce04:	d02e      	beq.n	800ce64 <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0x9c>
 800ce06:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800ce0a:	dc3e      	bgt.n	800ce8a <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc2>
 800ce0c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800ce10:	d023      	beq.n	800ce5a <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0x92>
 800ce12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800ce16:	dc38      	bgt.n	800ce8a <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc2>
 800ce18:	f5b3 7fb9 	cmp.w	r3, #370	; 0x172
 800ce1c:	d018      	beq.n	800ce50 <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0x88>
 800ce1e:	f5b3 7fb9 	cmp.w	r3, #370	; 0x172
 800ce22:	dc32      	bgt.n	800ce8a <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc2>
 800ce24:	2bf0      	cmp	r3, #240	; 0xf0
 800ce26:	d00e      	beq.n	800ce46 <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0x7e>
 800ce28:	2bf0      	cmp	r3, #240	; 0xf0
 800ce2a:	dc2e      	bgt.n	800ce8a <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc2>
 800ce2c:	2b32      	cmp	r3, #50	; 0x32
 800ce2e:	d002      	beq.n	800ce36 <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0x6e>
 800ce30:	2b6e      	cmp	r3, #110	; 0x6e
 800ce32:	d004      	beq.n	800ce3e <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0x76>
		break;
	case HZ_10000:
		_frequency = HZ_50;
		break;
	default:
		break;
 800ce34:	e029      	b.n	800ce8a <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc2>
		_frequency = HZ_110;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	226e      	movs	r2, #110	; 0x6e
 800ce3a:	831a      	strh	r2, [r3, #24]
		break;
 800ce3c:	e026      	b.n	800ce8c <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc4>
		_frequency = HZ_240;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	22f0      	movs	r2, #240	; 0xf0
 800ce42:	831a      	strh	r2, [r3, #24]
		break;
 800ce44:	e022      	b.n	800ce8c <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc4>
		_frequency = HZ_370;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f44f 72b9 	mov.w	r2, #370	; 0x172
 800ce4c:	831a      	strh	r2, [r3, #24]
		break;
 800ce4e:	e01d      	b.n	800ce8c <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc4>
		_frequency = HZ_500;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ce56:	831a      	strh	r2, [r3, #24]
		break;
 800ce58:	e018      	b.n	800ce8c <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc4>
		_frequency = HZ_700;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800ce60:	831a      	strh	r2, [r3, #24]
		break;
 800ce62:	e013      	b.n	800ce8c <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc4>
		_frequency = HZ_1000;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ce6a:	831a      	strh	r2, [r3, #24]
		break;
 800ce6c:	e00e      	b.n	800ce8c <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc4>
		_frequency = HZ_5000;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce74:	831a      	strh	r2, [r3, #24]
		break;
 800ce76:	e009      	b.n	800ce8c <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc4>
		_frequency = HZ_10000;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f242 7210 	movw	r2, #10000	; 0x2710
 800ce7e:	831a      	strh	r2, [r3, #24]
		break;
 800ce80:	e004      	b.n	800ce8c <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc4>
		_frequency = HZ_50;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2232      	movs	r2, #50	; 0x32
 800ce86:	831a      	strh	r2, [r3, #24]
		break;
 800ce88:	e000      	b.n	800ce8c <_ZN12oscilloscope17FreqGenController11frequencyUpEv+0xc4>
		break;
 800ce8a:	bf00      	nop
	}

	// Update LCD display
	gui().setFreqGenFrequencyText(toString(_frequency));
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f7ff fe59 	bl	800cb44 <_ZNK12oscilloscope17FreqGenController3guiEv>
 800ce92:	4604      	mov	r4, r0
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f103 0218 	add.w	r2, r3, #24
 800ce9a:	f107 0308 	add.w	r3, r7, #8
 800ce9e:	4611      	mov	r1, r2
 800cea0:	4618      	mov	r0, r3
 800cea2:	f000 f93f 	bl	800d124 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE>
 800cea6:	f107 0308 	add.w	r3, r7, #8
 800ceaa:	4619      	mov	r1, r3
 800ceac:	4620      	mov	r0, r4
 800ceae:	f000 fa2f 	bl	800d310 <_ZN12oscilloscope3Gui23setFreqGenFrequencyTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800ceb2:	f107 0308 	add.w	r3, r7, #8
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f009 f9a9 	bl	801620e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800cebc:	bf00      	nop
 800cebe:	3724      	adds	r7, #36	; 0x24
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd90      	pop	{r4, r7, pc}

0800cec4 <_ZN12oscilloscope17FreqGenController13frequencyDownEv>:

void FreqGenController::frequencyDown() {
 800cec4:	b590      	push	{r4, r7, lr}
 800cec6:	b089      	sub	sp, #36	; 0x24
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
	//change the frequency down
	switch (_frequency)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	8b1b      	ldrh	r3, [r3, #24]
 800ced0:	f242 7210 	movw	r2, #10000	; 0x2710
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d051      	beq.n	800cf7c <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xb8>
 800ced8:	f242 7210 	movw	r2, #10000	; 0x2710
 800cedc:	4293      	cmp	r3, r2
 800cede:	dc52      	bgt.n	800cf86 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc2>
 800cee0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d044      	beq.n	800cf72 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xae>
 800cee8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ceec:	4293      	cmp	r3, r2
 800ceee:	dc4a      	bgt.n	800cf86 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc2>
 800cef0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cef4:	d038      	beq.n	800cf68 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xa4>
 800cef6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cefa:	dc44      	bgt.n	800cf86 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc2>
 800cefc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800cf00:	d02d      	beq.n	800cf5e <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0x9a>
 800cf02:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800cf06:	dc3e      	bgt.n	800cf86 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc2>
 800cf08:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800cf0c:	d022      	beq.n	800cf54 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0x90>
 800cf0e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800cf12:	dc38      	bgt.n	800cf86 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc2>
 800cf14:	f5b3 7fb9 	cmp.w	r3, #370	; 0x172
 800cf18:	d018      	beq.n	800cf4c <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0x88>
 800cf1a:	f5b3 7fb9 	cmp.w	r3, #370	; 0x172
 800cf1e:	dc32      	bgt.n	800cf86 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc2>
 800cf20:	2bf0      	cmp	r3, #240	; 0xf0
 800cf22:	d00f      	beq.n	800cf44 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0x80>
 800cf24:	2bf0      	cmp	r3, #240	; 0xf0
 800cf26:	dc2e      	bgt.n	800cf86 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc2>
 800cf28:	2b32      	cmp	r3, #50	; 0x32
 800cf2a:	d002      	beq.n	800cf32 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0x6e>
 800cf2c:	2b6e      	cmp	r3, #110	; 0x6e
 800cf2e:	d005      	beq.n	800cf3c <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0x78>
		break;
	case HZ_10000:
		_frequency = HZ_5000;
		break;
	default:
		break;
 800cf30:	e029      	b.n	800cf86 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc2>
		_frequency = HZ_10000;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f242 7210 	movw	r2, #10000	; 0x2710
 800cf38:	831a      	strh	r2, [r3, #24]
		break;
 800cf3a:	e025      	b.n	800cf88 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc4>
		_frequency = HZ_50;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2232      	movs	r2, #50	; 0x32
 800cf40:	831a      	strh	r2, [r3, #24]
		break;
 800cf42:	e021      	b.n	800cf88 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc4>
		_frequency = HZ_110;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	226e      	movs	r2, #110	; 0x6e
 800cf48:	831a      	strh	r2, [r3, #24]
		break;
 800cf4a:	e01d      	b.n	800cf88 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc4>
		_frequency = HZ_240;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	22f0      	movs	r2, #240	; 0xf0
 800cf50:	831a      	strh	r2, [r3, #24]
		break;
 800cf52:	e019      	b.n	800cf88 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc4>
		_frequency = HZ_370;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f44f 72b9 	mov.w	r2, #370	; 0x172
 800cf5a:	831a      	strh	r2, [r3, #24]
		break;
 800cf5c:	e014      	b.n	800cf88 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc4>
		_frequency = HZ_500;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800cf64:	831a      	strh	r2, [r3, #24]
		break;
 800cf66:	e00f      	b.n	800cf88 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc4>
		_frequency = HZ_700;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800cf6e:	831a      	strh	r2, [r3, #24]
		break;
 800cf70:	e00a      	b.n	800cf88 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc4>
		_frequency = HZ_1000;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cf78:	831a      	strh	r2, [r3, #24]
		break;
 800cf7a:	e005      	b.n	800cf88 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc4>
		_frequency = HZ_5000;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf82:	831a      	strh	r2, [r3, #24]
		break;
 800cf84:	e000      	b.n	800cf88 <_ZN12oscilloscope17FreqGenController13frequencyDownEv+0xc4>
		break;
 800cf86:	bf00      	nop
	}

	// Update LCD display
	gui().setFreqGenFrequencyText(toString(_frequency));
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f7ff fddb 	bl	800cb44 <_ZNK12oscilloscope17FreqGenController3guiEv>
 800cf8e:	4604      	mov	r4, r0
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f103 0218 	add.w	r2, r3, #24
 800cf96:	f107 0308 	add.w	r3, r7, #8
 800cf9a:	4611      	mov	r1, r2
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f000 f8c1 	bl	800d124 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE>
 800cfa2:	f107 0308 	add.w	r3, r7, #8
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	4620      	mov	r0, r4
 800cfaa:	f000 f9b1 	bl	800d310 <_ZN12oscilloscope3Gui23setFreqGenFrequencyTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800cfae:	f107 0308 	add.w	r3, r7, #8
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f009 f92b 	bl	801620e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800cfb8:	bf00      	nop
 800cfba:	3724      	adds	r7, #36	; 0x24
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd90      	pop	{r4, r7, pc}

0800cfc0 <_ZN12oscilloscope17FreqGenController9shiftModeEv>:

void FreqGenController::shiftMode() {
 800cfc0:	b590      	push	{r4, r7, lr}
 800cfc2:	b099      	sub	sp, #100	; 0x64
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
	//change the waveform
	switch (_mode)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	7e9b      	ldrb	r3, [r3, #26]
 800cfcc:	2b02      	cmp	r3, #2
 800cfce:	d056      	beq.n	800d07e <_ZN12oscilloscope17FreqGenController9shiftModeEv+0xbe>
 800cfd0:	2b02      	cmp	r3, #2
 800cfd2:	dc7c      	bgt.n	800d0ce <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x10e>
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d002      	beq.n	800cfde <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x1e>
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d028      	beq.n	800d02e <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x6e>
			trace_out("Sine\n");
            gui().setFreqGenWaveformText("Sine -");
		}
		break;
	default:
		break;
 800cfdc:	e077      	b.n	800d0ce <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x10e>
		_mode = TRIANGLE;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	769a      	strb	r2, [r3, #26]
			trace_out("Triangle\n");
 800cfe4:	483c      	ldr	r0, [pc, #240]	; (800d0d8 <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x118>)
 800cfe6:	f001 f935 	bl	800e254 <trace_out>
			gui().setFreqGenWaveformText("Tria -");
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f7ff fdaa 	bl	800cb44 <_ZNK12oscilloscope17FreqGenController3guiEv>
 800cff0:	4604      	mov	r4, r0
 800cff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cff6:	4618      	mov	r0, r3
 800cff8:	f009 f82b 	bl	8016052 <_ZNSaIcEC1Ev>
 800cffc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d000:	f107 030c 	add.w	r3, r7, #12
 800d004:	4935      	ldr	r1, [pc, #212]	; (800d0dc <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x11c>)
 800d006:	4618      	mov	r0, r3
 800d008:	f009 f9f8 	bl	80163fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800d00c:	f107 030c 	add.w	r3, r7, #12
 800d010:	4619      	mov	r1, r3
 800d012:	4620      	mov	r0, r4
 800d014:	f000 f95c 	bl	800d2d0 <_ZN12oscilloscope3Gui22setFreqGenWaveformTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800d018:	f107 030c 	add.w	r3, r7, #12
 800d01c:	4618      	mov	r0, r3
 800d01e:	f009 f8f6 	bl	801620e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d026:	4618      	mov	r0, r3
 800d028:	f009 f814 	bl	8016054 <_ZNSaIcED1Ev>
		break;
 800d02c:	e050      	b.n	800d0d0 <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x110>
		_mode = SQUARE;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2202      	movs	r2, #2
 800d032:	769a      	strb	r2, [r3, #26]
			trace_out("Square\n");
 800d034:	482a      	ldr	r0, [pc, #168]	; (800d0e0 <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x120>)
 800d036:	f001 f90d 	bl	800e254 <trace_out>
            gui().setFreqGenWaveformText("Rect -");
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f7ff fd82 	bl	800cb44 <_ZNK12oscilloscope17FreqGenController3guiEv>
 800d040:	4604      	mov	r4, r0
 800d042:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d046:	4618      	mov	r0, r3
 800d048:	f009 f803 	bl	8016052 <_ZNSaIcEC1Ev>
 800d04c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d050:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d054:	4923      	ldr	r1, [pc, #140]	; (800d0e4 <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x124>)
 800d056:	4618      	mov	r0, r3
 800d058:	f009 f9d0 	bl	80163fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800d05c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d060:	4619      	mov	r1, r3
 800d062:	4620      	mov	r0, r4
 800d064:	f000 f934 	bl	800d2d0 <_ZN12oscilloscope3Gui22setFreqGenWaveformTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800d068:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d06c:	4618      	mov	r0, r3
 800d06e:	f009 f8ce 	bl	801620e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d072:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d076:	4618      	mov	r0, r3
 800d078:	f008 ffec 	bl	8016054 <_ZNSaIcED1Ev>
		break;
 800d07c:	e028      	b.n	800d0d0 <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x110>
		_mode = SINUS;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2200      	movs	r2, #0
 800d082:	769a      	strb	r2, [r3, #26]
			trace_out("Sine\n");
 800d084:	4818      	ldr	r0, [pc, #96]	; (800d0e8 <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x128>)
 800d086:	f001 f8e5 	bl	800e254 <trace_out>
            gui().setFreqGenWaveformText("Sine -");
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f7ff fd5a 	bl	800cb44 <_ZNK12oscilloscope17FreqGenController3guiEv>
 800d090:	4604      	mov	r4, r0
 800d092:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d096:	4618      	mov	r0, r3
 800d098:	f008 ffdb 	bl	8016052 <_ZNSaIcEC1Ev>
 800d09c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800d0a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d0a4:	4911      	ldr	r1, [pc, #68]	; (800d0ec <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x12c>)
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f009 f9a8 	bl	80163fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800d0ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	f000 f90c 	bl	800d2d0 <_ZN12oscilloscope3Gui22setFreqGenWaveformTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800d0b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f009 f8a6 	bl	801620e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d0c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f008 ffc4 	bl	8016054 <_ZNSaIcED1Ev>
		break;
 800d0cc:	e000      	b.n	800d0d0 <_ZN12oscilloscope17FreqGenController9shiftModeEv+0x110>
		break;
 800d0ce:	bf00      	nop
	}
}
 800d0d0:	bf00      	nop
 800d0d2:	3764      	adds	r7, #100	; 0x64
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd90      	pop	{r4, r7, pc}
 800d0d8:	08017ff4 	.word	0x08017ff4
 800d0dc:	08018000 	.word	0x08018000
 800d0e0:	08018008 	.word	0x08018008
 800d0e4:	08018010 	.word	0x08018010
 800d0e8:	08018018 	.word	0x08018018
 800d0ec:	08018020 	.word	0x08018020

0800d0f0 <_ZN12oscilloscope17FreqGenController6changeEv>:
    _pGui = &gui;
    Factory::getFrequencyGenerator().setFrequency(_frequency);
    Factory::getFrequencyGenerator().setWaveForm(_mode);
}

void FreqGenController::change() {
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b082      	sub	sp, #8
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
	Factory::getFrequencyGenerator().setWaveForm(_mode);
 800d0f8:	f7ff fc3c 	bl	800c974 <_ZN7Factory21getFrequencyGeneratorEv>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	7e9b      	ldrb	r3, [r3, #26]
 800d102:	4619      	mov	r1, r3
 800d104:	4610      	mov	r0, r2
 800d106:	f000 fd25 	bl	800db54 <_ZN8external18FrequencyGenerator11setWaveFormE6f_mode>
	Factory::getFrequencyGenerator().setFrequency(_frequency);
 800d10a:	f7ff fc33 	bl	800c974 <_ZN7Factory21getFrequencyGeneratorEv>
 800d10e:	4602      	mov	r2, r0
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	8b1b      	ldrh	r3, [r3, #24]
 800d114:	4619      	mov	r1, r3
 800d116:	4610      	mov	r0, r2
 800d118:	f000 fd2c 	bl	800db74 <_ZN8external18FrequencyGenerator12setFrequencyEm>
}
 800d11c:	bf00      	nop
 800d11e:	3708      	adds	r7, #8
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}

0800d124 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE>:

//static
std::string FreqGenController::toString(const Frequency & frequency)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b084      	sub	sp, #16
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	6039      	str	r1, [r7, #0]
    std::string freqString("n/a");
 800d12e:	f107 030c 	add.w	r3, r7, #12
 800d132:	4618      	mov	r0, r3
 800d134:	f008 ff8d 	bl	8016052 <_ZNSaIcEC1Ev>
 800d138:	f107 030c 	add.w	r3, r7, #12
 800d13c:	461a      	mov	r2, r3
 800d13e:	4937      	ldr	r1, [pc, #220]	; (800d21c <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xf8>)
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f009 f95b 	bl	80163fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800d146:	f107 030c 	add.w	r3, r7, #12
 800d14a:	4618      	mov	r0, r3
 800d14c:	f008 ff82 	bl	8016054 <_ZNSaIcED1Ev>

    switch (frequency)
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	881b      	ldrh	r3, [r3, #0]
 800d154:	f242 7210 	movw	r2, #10000	; 0x2710
 800d158:	4293      	cmp	r3, r2
 800d15a:	d054      	beq.n	800d206 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xe2>
 800d15c:	f242 7210 	movw	r2, #10000	; 0x2710
 800d160:	4293      	cmp	r3, r2
 800d162:	dc55      	bgt.n	800d210 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
 800d164:	f241 3288 	movw	r2, #5000	; 0x1388
 800d168:	4293      	cmp	r3, r2
 800d16a:	d047      	beq.n	800d1fc <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xd8>
 800d16c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d170:	4293      	cmp	r3, r2
 800d172:	dc4d      	bgt.n	800d210 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
 800d174:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d178:	d03b      	beq.n	800d1f2 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xce>
 800d17a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d17e:	dc47      	bgt.n	800d210 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
 800d180:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800d184:	d030      	beq.n	800d1e8 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xc4>
 800d186:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800d18a:	dc41      	bgt.n	800d210 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
 800d18c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800d190:	d025      	beq.n	800d1de <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xba>
 800d192:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800d196:	dc3b      	bgt.n	800d210 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
 800d198:	f5b3 7fb9 	cmp.w	r3, #370	; 0x172
 800d19c:	d01a      	beq.n	800d1d4 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xb0>
 800d19e:	f5b3 7fb9 	cmp.w	r3, #370	; 0x172
 800d1a2:	dc35      	bgt.n	800d210 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
 800d1a4:	2bf0      	cmp	r3, #240	; 0xf0
 800d1a6:	d010      	beq.n	800d1ca <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xa6>
 800d1a8:	2bf0      	cmp	r3, #240	; 0xf0
 800d1aa:	dc31      	bgt.n	800d210 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
 800d1ac:	2b32      	cmp	r3, #50	; 0x32
 800d1ae:	d002      	beq.n	800d1b6 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0x92>
 800d1b0:	2b6e      	cmp	r3, #110	; 0x6e
 800d1b2:	d005      	beq.n	800d1c0 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0x9c>
    case HZ_10000:
        freqString = "10 kHz";
        break;
    }

    return freqString;
 800d1b4:	e02c      	b.n	800d210 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
        freqString = "50 Hz";
 800d1b6:	491a      	ldr	r1, [pc, #104]	; (800d220 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xfc>)
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f009 f8c2 	bl	8016342 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
        break;
 800d1be:	e027      	b.n	800d210 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
        freqString = "110 Hz";
 800d1c0:	4918      	ldr	r1, [pc, #96]	; (800d224 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0x100>)
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f009 f8bd 	bl	8016342 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
        break;
 800d1c8:	e022      	b.n	800d210 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
        freqString = "240 Hz";
 800d1ca:	4917      	ldr	r1, [pc, #92]	; (800d228 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0x104>)
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f009 f8b8 	bl	8016342 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
        break;
 800d1d2:	e01d      	b.n	800d210 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
        freqString = "370 Hz";
 800d1d4:	4915      	ldr	r1, [pc, #84]	; (800d22c <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0x108>)
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f009 f8b3 	bl	8016342 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
        break;
 800d1dc:	e018      	b.n	800d210 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
        freqString = "500 Hz";
 800d1de:	4914      	ldr	r1, [pc, #80]	; (800d230 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0x10c>)
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f009 f8ae 	bl	8016342 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
        break;
 800d1e6:	e013      	b.n	800d210 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
        freqString = "700 Hz";
 800d1e8:	4912      	ldr	r1, [pc, #72]	; (800d234 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0x110>)
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f009 f8a9 	bl	8016342 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
        break;
 800d1f0:	e00e      	b.n	800d210 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
        freqString = "1 kHz";
 800d1f2:	4911      	ldr	r1, [pc, #68]	; (800d238 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0x114>)
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f009 f8a4 	bl	8016342 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
        break;
 800d1fa:	e009      	b.n	800d210 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
        freqString = "5 kHz";
 800d1fc:	490f      	ldr	r1, [pc, #60]	; (800d23c <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0x118>)
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f009 f89f 	bl	8016342 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
        break;
 800d204:	e004      	b.n	800d210 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0xec>
        freqString = "10 kHz";
 800d206:	490e      	ldr	r1, [pc, #56]	; (800d240 <_ZN12oscilloscope17FreqGenController8toStringB5cxx11ERKNS_10_FrequencyE+0x11c>)
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f009 f89a 	bl	8016342 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
        break;
 800d20e:	bf00      	nop
    return freqString;
 800d210:	bf00      	nop
}
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	3710      	adds	r7, #16
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	08018028 	.word	0x08018028
 800d220:	0801802c 	.word	0x0801802c
 800d224:	08018034 	.word	0x08018034
 800d228:	0801803c 	.word	0x0801803c
 800d22c:	08018044 	.word	0x08018044
 800d230:	0801804c 	.word	0x0801804c
 800d234:	08018054 	.word	0x08018054
 800d238:	0801805c 	.word	0x0801805c
 800d23c:	08018064 	.word	0x08018064
 800d240:	0801806c 	.word	0x0801806c

0800d244 <_ZN12oscilloscope3GuiC1Ev>:

namespace oscilloscope {

Gui* Gui::_instance = nullptr;

Gui::Gui() :
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
    _pGuiObserver(nullptr),
    _redLedOn(false),
    _xAxisPixelsPerField(0)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2100      	movs	r1, #0
 800d250:	4618      	mov	r0, r3
 800d252:	f001 fabd 	bl	800e7d0 <_ZN10XFBehaviorC1Eb>
 800d256:	4a0c      	ldr	r2, [pc, #48]	; (800d288 <_ZN12oscilloscope3GuiC1Ev+0x44>)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	601a      	str	r2, [r3, #0]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2200      	movs	r2, #0
 800d260:	611a      	str	r2, [r3, #16]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2200      	movs	r2, #0
 800d266:	751a      	strb	r2, [r3, #20]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2200      	movs	r2, #0
 800d26c:	82da      	strh	r2, [r3, #22]
{
	if(_instance==nullptr){
 800d26e:	4b07      	ldr	r3, [pc, #28]	; (800d28c <_ZN12oscilloscope3GuiC1Ev+0x48>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d102      	bne.n	800d27c <_ZN12oscilloscope3GuiC1Ev+0x38>
		    _instance = this;
 800d276:	4a05      	ldr	r2, [pc, #20]	; (800d28c <_ZN12oscilloscope3GuiC1Ev+0x48>)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6013      	str	r3, [r2, #0]
		}
}
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	4618      	mov	r0, r3
 800d280:	3708      	adds	r7, #8
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop
 800d288:	08018b14 	.word	0x08018b14
 800d28c:	20000f84 	.word	0x20000f84

0800d290 <_ZN12oscilloscope3Gui19setTimeDivisionTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
	return true;
}

void Gui::setTimeDivisionText(std::string text)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b08a      	sub	sp, #40	; 0x28
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
	Model* model = Model::getInstance();
 800d29a:	f7fd fd11 	bl	800acc0 <_ZN5Model11getInstanceEv>
 800d29e:	6278      	str	r0, [r7, #36]	; 0x24
	if(model!=nullptr){
 800d2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d010      	beq.n	800d2c8 <_ZN12oscilloscope3Gui19setTimeDivisionTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>
		model->setDivTimLabel(text);
 800d2a6:	f107 030c 	add.w	r3, r7, #12
 800d2aa:	6839      	ldr	r1, [r7, #0]
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f009 f871 	bl	8016394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800d2b2:	f107 030c 	add.w	r3, r7, #12
 800d2b6:	4619      	mov	r1, r3
 800d2b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2ba:	f7fd fd0d 	bl	800acd8 <_ZN5Model14setDivTimLabelENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800d2be:	f107 030c 	add.w	r3, r7, #12
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f008 ffa3 	bl	801620e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 800d2c8:	bf00      	nop
 800d2ca:	3728      	adds	r7, #40	; 0x28
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <_ZN12oscilloscope3Gui22setFreqGenWaveformTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Gui::setFreqGenWaveformText(std::string text)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b08a      	sub	sp, #40	; 0x28
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	6039      	str	r1, [r7, #0]
	Model* model = Model::getInstance();
 800d2da:	f7fd fcf1 	bl	800acc0 <_ZN5Model11getInstanceEv>
 800d2de:	6278      	str	r0, [r7, #36]	; 0x24
	if(model!=nullptr){
 800d2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d010      	beq.n	800d308 <_ZN12oscilloscope3Gui22setFreqGenWaveformTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>
		model->setModeSignal(text);
 800d2e6:	f107 030c 	add.w	r3, r7, #12
 800d2ea:	6839      	ldr	r1, [r7, #0]
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f009 f851 	bl	8016394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800d2f2:	f107 030c 	add.w	r3, r7, #12
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2fa:	f7fd fd00 	bl	800acfe <_ZN5Model13setModeSignalENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800d2fe:	f107 030c 	add.w	r3, r7, #12
 800d302:	4618      	mov	r0, r3
 800d304:	f008 ff83 	bl	801620e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 800d308:	bf00      	nop
 800d30a:	3728      	adds	r7, #40	; 0x28
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}

0800d310 <_ZN12oscilloscope3Gui23setFreqGenFrequencyTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Gui::setFreqGenFrequencyText(std::string text)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b08a      	sub	sp, #40	; 0x28
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
 800d318:	6039      	str	r1, [r7, #0]
	Model* model = Model::getInstance();
 800d31a:	f7fd fcd1 	bl	800acc0 <_ZN5Model11getInstanceEv>
 800d31e:	6278      	str	r0, [r7, #36]	; 0x24
	if(model!=nullptr){
 800d320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d322:	2b00      	cmp	r3, #0
 800d324:	d010      	beq.n	800d348 <_ZN12oscilloscope3Gui23setFreqGenFrequencyTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>
		model->setFreqSignal(text);
 800d326:	f107 030c 	add.w	r3, r7, #12
 800d32a:	6839      	ldr	r1, [r7, #0]
 800d32c:	4618      	mov	r0, r3
 800d32e:	f009 f831 	bl	8016394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800d332:	f107 030c 	add.w	r3, r7, #12
 800d336:	4619      	mov	r1, r3
 800d338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d33a:	f7fd fcf3 	bl	800ad24 <_ZN5Model13setFreqSignalENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800d33e:	f107 030c 	add.w	r3, r7, #12
 800d342:	4618      	mov	r0, r3
 800d344:	f008 ff63 	bl	801620e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 800d348:	bf00      	nop
 800d34a:	3728      	adds	r7, #40	; 0x28
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <_ZN12oscilloscope3Gui12processEventEv>:

XFEventStatus Gui::processEvent()
{
 800d350:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d352:	b085      	sub	sp, #20
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
#if (PORT_IDF_STM32CUBE != 0)
    GEN(XFNullTransition);
 800d358:	687d      	ldr	r5, [r7, #4]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	330c      	adds	r3, #12
 800d360:	681c      	ldr	r4, [r3, #0]
 800d362:	2010      	movs	r0, #16
 800d364:	f008 fe61 	bl	801602a <_Znwj>
 800d368:	4603      	mov	r3, r0
 800d36a:	461e      	mov	r6, r3
 800d36c:	2100      	movs	r1, #0
 800d36e:	4630      	mov	r0, r6
 800d370:	f001 fbba 	bl	800eae8 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 800d374:	2200      	movs	r2, #0
 800d376:	4631      	mov	r1, r6
 800d378:	4628      	mov	r0, r5
 800d37a:	47a0      	blx	r4
#endif
    return XFEventStatus::Consumed;
 800d37c:	f107 030c 	add.w	r3, r7, #12
 800d380:	2101      	movs	r1, #1
 800d382:	4618      	mov	r0, r3
 800d384:	f7ff fbbd 	bl	800cb02 <_ZN13XFEventStatusC1ENS_12eEventStatusE>
 800d388:	7b3b      	ldrb	r3, [r7, #12]
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	3714      	adds	r7, #20
 800d38e:	46bd      	mov	sp, r7
 800d390:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800d394 <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>:
    XFEvent(XFEventType eventType, int id, interface::XFReactive * pBehavior) : eventType_(eventType), id_(id), pBehavior_(pBehavior) {}
 800d394:	b480      	push	{r7}
 800d396:	b085      	sub	sp, #20
 800d398:	af00      	add	r7, sp, #0
 800d39a:	60f8      	str	r0, [r7, #12]
 800d39c:	607a      	str	r2, [r7, #4]
 800d39e:	603b      	str	r3, [r7, #0]
 800d3a0:	460b      	mov	r3, r1
 800d3a2:	72fb      	strb	r3, [r7, #11]
 800d3a4:	4a09      	ldr	r2, [pc, #36]	; (800d3cc <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE+0x38>)
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	601a      	str	r2, [r3, #0]
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	7afa      	ldrb	r2, [r7, #11]
 800d3ae:	711a      	strb	r2, [r3, #4]
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	687a      	ldr	r2, [r7, #4]
 800d3b4:	609a      	str	r2, [r3, #8]
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	683a      	ldr	r2, [r7, #0]
 800d3ba:	60da      	str	r2, [r3, #12]
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3714      	adds	r7, #20
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c8:	4770      	bx	lr
 800d3ca:	bf00      	nop
 800d3cc:	08018b8c 	.word	0x08018b8c

0800d3d0 <_ZN7XFEventD1Ev>:
    virtual ~XFEvent() {}		///< Class destructor
 800d3d0:	b480      	push	{r7}
 800d3d2:	b083      	sub	sp, #12
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	4a04      	ldr	r2, [pc, #16]	; (800d3ec <_ZN7XFEventD1Ev+0x1c>)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	601a      	str	r2, [r3, #0]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	370c      	adds	r7, #12
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr
 800d3ec:	08018b8c 	.word	0x08018b8c

0800d3f0 <_ZN7XFEventD0Ev>:
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f7ff ffe9 	bl	800d3d0 <_ZN7XFEventD1Ev>
 800d3fe:	2110      	movs	r1, #16
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f008 fe01 	bl	8016008 <_ZdlPvj>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	4618      	mov	r0, r3
 800d40a:	3708      	adds	r7, #8
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <_ZNK7XFEvent18deleteAfterConsumeEv>:

    virtual bool deleteAfterConsume() const { return false; }	///< Tells the dispatcher if the event must be deleted or not.
 800d410:	b480      	push	{r7}
 800d412:	b083      	sub	sp, #12
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	2300      	movs	r3, #0
 800d41a:	4618      	mov	r0, r3
 800d41c:	370c      	adds	r7, #12
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr

0800d426 <_ZN10XFBehavior15scheduleTimeoutEii>:
     *
     * Will work only if the current event is of type IXFEvent::Timeout.
     */
    const XFTimeout * getCurrentTimeout();

    inline void scheduleTimeout(int timeoutId, int interval) { getDispatcher()->scheduleTimeout(timeoutId, interval, this); }	///< @brief Schedules a timeout for this state machine.
 800d426:	b590      	push	{r4, r7, lr}
 800d428:	b085      	sub	sp, #20
 800d42a:	af00      	add	r7, sp, #0
 800d42c:	60f8      	str	r0, [r7, #12]
 800d42e:	60b9      	str	r1, [r7, #8]
 800d430:	607a      	str	r2, [r7, #4]
 800d432:	68f8      	ldr	r0, [r7, #12]
 800d434:	f001 fab3 	bl	800e99e <_ZN10XFBehavior13getDispatcherEv>
 800d438:	6803      	ldr	r3, [r0, #0]
 800d43a:	3318      	adds	r3, #24
 800d43c:	681c      	ldr	r4, [r3, #0]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	68b9      	ldr	r1, [r7, #8]
 800d444:	47a0      	blx	r4
 800d446:	bf00      	nop
 800d448:	3714      	adds	r7, #20
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd90      	pop	{r4, r7, pc}
	...

0800d450 <_ZN9interface11GuiObserverC1Ev>:
    virtual void onButtonTimeMinusPressed() = 0;

    virtual uint32_t getTDivCount() const = 0;      // Returns the of x-axis grid count

protected:
    GuiObserver() {}
 800d450:	b480      	push	{r7}
 800d452:	b083      	sub	sp, #12
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	4a04      	ldr	r2, [pc, #16]	; (800d46c <_ZN9interface11GuiObserverC1Ev+0x1c>)
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	601a      	str	r2, [r3, #0]
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	4618      	mov	r0, r3
 800d462:	370c      	adds	r7, #12
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr
 800d46c:	08018abc 	.word	0x08018abc

0800d470 <_ZNK12oscilloscope10Controller12getTDivCountEv>:

	// GuiObserver interface implementation
protected:
    void onButtonTimePlusPressed() override;
    void onButtonTimeMinusPressed() override;
    uint32_t getTDivCount() const override { return 8; };
 800d470:	b480      	push	{r7}
 800d472:	b083      	sub	sp, #12
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	2308      	movs	r3, #8
 800d47a:	4618      	mov	r0, r3
 800d47c:	370c      	adds	r7, #12
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr

0800d486 <_ZThn16_NK12oscilloscope10Controller12getTDivCountEv>:
 800d486:	f1a0 0010 	sub.w	r0, r0, #16
 800d48a:	e7f1      	b.n	800d470 <_ZNK12oscilloscope10Controller12getTDivCountEv>

0800d48c <_ZNK12oscilloscope10Controller3guiEv>:

protected:
	void doShowAnalogSignal();
	void doButtonTimePlusPressed();
	void doButtonTimeMinusPressed();
	inline Gui & gui() const { assert(_pGui); return *_pGui; }
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	695b      	ldr	r3, [r3, #20]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d105      	bne.n	800d4a8 <_ZNK12oscilloscope10Controller3guiEv+0x1c>
 800d49c:	4b05      	ldr	r3, [pc, #20]	; (800d4b4 <_ZNK12oscilloscope10Controller3guiEv+0x28>)
 800d49e:	4a06      	ldr	r2, [pc, #24]	; (800d4b8 <_ZNK12oscilloscope10Controller3guiEv+0x2c>)
 800d4a0:	2141      	movs	r1, #65	; 0x41
 800d4a2:	4806      	ldr	r0, [pc, #24]	; (800d4bc <_ZNK12oscilloscope10Controller3guiEv+0x30>)
 800d4a4:	f008 ffe2 	bl	801646c <__assert_func>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	695b      	ldr	r3, [r3, #20]
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3708      	adds	r7, #8
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}
 800d4b4:	08018074 	.word	0x08018074
 800d4b8:	0801807c 	.word	0x0801807c
 800d4bc:	080180b8 	.word	0x080180b8

0800d4c0 <_ZN12oscilloscope10ControllerC1Ev>:
                                               {TDIV_1ms,     "1 ms / div"},
                                               {TDIV_2ms,     "2 ms / div"},
                                               {TDIV_5ms,     "5 ms / div"},
                                               {TDIV_10ms,   "10 ms / div"}};

Controller::Controller() :
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
    _pGui(nullptr),
    _adcValuesBuffer(nullptr),
	_adcValuesBufferSize(0),
	_tdivValue(TDIV_1ms)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2100      	movs	r1, #0
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f001 f97f 	bl	800e7d0 <_ZN10XFBehaviorC1Eb>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	3310      	adds	r3, #16
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7ff ffba 	bl	800d450 <_ZN9interface11GuiObserverC1Ev>
 800d4dc:	4a18      	ldr	r2, [pc, #96]	; (800d540 <_ZN12oscilloscope10ControllerC1Ev+0x80>)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	601a      	str	r2, [r3, #0]
 800d4e2:	4a18      	ldr	r2, [pc, #96]	; (800d544 <_ZN12oscilloscope10ControllerC1Ev+0x84>)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	611a      	str	r2, [r3, #16]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	615a      	str	r2, [r3, #20]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	619a      	str	r2, [r3, #24]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	61da      	str	r2, [r3, #28]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	621a      	str	r2, [r3, #32]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2214      	movs	r2, #20
 800d504:	625a      	str	r2, [r3, #36]	; 0x24
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2200      	movs	r2, #0
 800d50a:	629a      	str	r2, [r3, #40]	; 0x28
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2201      	movs	r2, #1
 800d510:	62da      	str	r2, [r3, #44]	; 0x2c
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2202      	movs	r2, #2
 800d516:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
{
    assert(!_pInstance);    // Only one instance of this class allowed!
 800d51a:	4b0b      	ldr	r3, [pc, #44]	; (800d548 <_ZN12oscilloscope10ControllerC1Ev+0x88>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d005      	beq.n	800d52e <_ZN12oscilloscope10ControllerC1Ev+0x6e>
 800d522:	4b0a      	ldr	r3, [pc, #40]	; (800d54c <_ZN12oscilloscope10ControllerC1Ev+0x8c>)
 800d524:	4a0a      	ldr	r2, [pc, #40]	; (800d550 <_ZN12oscilloscope10ControllerC1Ev+0x90>)
 800d526:	2118      	movs	r1, #24
 800d528:	480a      	ldr	r0, [pc, #40]	; (800d554 <_ZN12oscilloscope10ControllerC1Ev+0x94>)
 800d52a:	f008 ff9f 	bl	801646c <__assert_func>
    _pInstance = this;
 800d52e:	4a06      	ldr	r2, [pc, #24]	; (800d548 <_ZN12oscilloscope10ControllerC1Ev+0x88>)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6013      	str	r3, [r2, #0]
}
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	4618      	mov	r0, r3
 800d538:	3708      	adds	r7, #8
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}
 800d53e:	bf00      	nop
 800d540:	08018b3c 	.word	0x08018b3c
 800d544:	08018b70 	.word	0x08018b70
 800d548:	20000f88 	.word	0x20000f88
 800d54c:	08018100 	.word	0x08018100
 800d550:	0801810c 	.word	0x0801810c
 800d554:	08018134 	.word	0x08018134

0800d558 <_ZN12oscilloscope10Controller12processEventEv>:
{
    startBehavior();
}

XFEventStatus Controller::processEvent()
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
    assert(_adcValuesBuffer);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	699b      	ldr	r3, [r3, #24]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d105      	bne.n	800d574 <_ZN12oscilloscope10Controller12processEventEv+0x1c>
 800d568:	4b4e      	ldr	r3, [pc, #312]	; (800d6a4 <_ZN12oscilloscope10Controller12processEventEv+0x14c>)
 800d56a:	4a4f      	ldr	r2, [pc, #316]	; (800d6a8 <_ZN12oscilloscope10Controller12processEventEv+0x150>)
 800d56c:	2133      	movs	r1, #51	; 0x33
 800d56e:	484f      	ldr	r0, [pc, #316]	; (800d6ac <_ZN12oscilloscope10Controller12processEventEv+0x154>)
 800d570:	f008 ff7c 	bl	801646c <__assert_func>
    assert(_adcValuesBufferSize > 0);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	69db      	ldr	r3, [r3, #28]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d105      	bne.n	800d588 <_ZN12oscilloscope10Controller12processEventEv+0x30>
 800d57c:	4b4c      	ldr	r3, [pc, #304]	; (800d6b0 <_ZN12oscilloscope10Controller12processEventEv+0x158>)
 800d57e:	4a4a      	ldr	r2, [pc, #296]	; (800d6a8 <_ZN12oscilloscope10Controller12processEventEv+0x150>)
 800d580:	2134      	movs	r1, #52	; 0x34
 800d582:	484a      	ldr	r0, [pc, #296]	; (800d6ac <_ZN12oscilloscope10Controller12processEventEv+0x154>)
 800d584:	f008 ff72 	bl	801646c <__assert_func>

	if (getCurrentEvent()->getEventType() == XFEvent::Initial)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	4618      	mov	r0, r3
 800d58c:	f001 fa21 	bl	800e9d2 <_ZNK10XFBehavior15getCurrentEventEv>
 800d590:	4603      	mov	r3, r0
 800d592:	4618      	mov	r0, r3
 800d594:	f7ff fa9c 	bl	800cad0 <_ZNK7XFEvent12getEventTypeEv>
 800d598:	4603      	mov	r3, r0
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	bf0c      	ite	eq
 800d59e:	2301      	moveq	r3, #1
 800d5a0:	2300      	movne	r3, #0
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d00a      	beq.n	800d5be <_ZN12oscilloscope10Controller12processEventEv+0x66>
	{
		scheduleTimeout(TIMEOUT_ID, TIMEOUT_INTERVAL);
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6a19      	ldr	r1, [r3, #32]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	f7ff ff37 	bl	800d426 <_ZN10XFBehavior15scheduleTimeoutEii>

		doShowAnalogSignal();
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f000 f8bd 	bl	800d738 <_ZN12oscilloscope10Controller18doShowAnalogSignalEv>
	}

	if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f001 fa06 	bl	800e9d2 <_ZNK10XFBehavior15getCurrentEventEv>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f7ff fa81 	bl	800cad0 <_ZNK7XFEvent12getEventTypeEv>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b04      	cmp	r3, #4
 800d5d2:	d10e      	bne.n	800d5f2 <_ZN12oscilloscope10Controller12processEventEv+0x9a>
		getCurrentTimeout()->getId() == TIMEOUT_ID)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f001 fa08 	bl	800e9ec <_ZN10XFBehavior17getCurrentTimeoutEv>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f7ff fa83 	bl	800caea <_ZNK7XFEvent5getIdEv>
 800d5e4:	4602      	mov	r2, r0
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6a1b      	ldr	r3, [r3, #32]
	if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d101      	bne.n	800d5f2 <_ZN12oscilloscope10Controller12processEventEv+0x9a>
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	e000      	b.n	800d5f4 <_ZN12oscilloscope10Controller12processEventEv+0x9c>
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d00a      	beq.n	800d60e <_ZN12oscilloscope10Controller12processEventEv+0xb6>
	{
		scheduleTimeout(TIMEOUT_ID, TIMEOUT_INTERVAL);
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6a19      	ldr	r1, [r3, #32]
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d602:	461a      	mov	r2, r3
 800d604:	f7ff ff0f 	bl	800d426 <_ZN10XFBehavior15scheduleTimeoutEii>

		doShowAnalogSignal();
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 f895 	bl	800d738 <_ZN12oscilloscope10Controller18doShowAnalogSignalEv>
	}

	if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	4618      	mov	r0, r3
 800d612:	f001 f9de 	bl	800e9d2 <_ZNK10XFBehavior15getCurrentEventEv>
 800d616:	4603      	mov	r3, r0
 800d618:	4618      	mov	r0, r3
 800d61a:	f7ff fa59 	bl	800cad0 <_ZNK7XFEvent12getEventTypeEv>
 800d61e:	4603      	mov	r3, r0
 800d620:	2b03      	cmp	r3, #3
 800d622:	d10e      	bne.n	800d642 <_ZN12oscilloscope10Controller12processEventEv+0xea>
		getCurrentEvent()->getId() == BTN_PLUS_ID)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	4618      	mov	r0, r3
 800d628:	f001 f9d3 	bl	800e9d2 <_ZNK10XFBehavior15getCurrentEventEv>
 800d62c:	4603      	mov	r3, r0
 800d62e:	4618      	mov	r0, r3
 800d630:	f7ff fa5b 	bl	800caea <_ZNK7XFEvent5getIdEv>
 800d634:	4602      	mov	r2, r0
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d101      	bne.n	800d642 <_ZN12oscilloscope10Controller12processEventEv+0xea>
 800d63e:	2301      	movs	r3, #1
 800d640:	e000      	b.n	800d644 <_ZN12oscilloscope10Controller12processEventEv+0xec>
 800d642:	2300      	movs	r3, #0
 800d644:	2b00      	cmp	r3, #0
 800d646:	d002      	beq.n	800d64e <_ZN12oscilloscope10Controller12processEventEv+0xf6>
	{
		doButtonTimePlusPressed();
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f000 f87f 	bl	800d74c <_ZN12oscilloscope10Controller23doButtonTimePlusPressedEv>
	}

	if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	4618      	mov	r0, r3
 800d652:	f001 f9be 	bl	800e9d2 <_ZNK10XFBehavior15getCurrentEventEv>
 800d656:	4603      	mov	r3, r0
 800d658:	4618      	mov	r0, r3
 800d65a:	f7ff fa39 	bl	800cad0 <_ZNK7XFEvent12getEventTypeEv>
 800d65e:	4603      	mov	r3, r0
 800d660:	2b03      	cmp	r3, #3
 800d662:	d10e      	bne.n	800d682 <_ZN12oscilloscope10Controller12processEventEv+0x12a>
		getCurrentEvent()->getId() == BTN_MINUS_ID)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	4618      	mov	r0, r3
 800d668:	f001 f9b3 	bl	800e9d2 <_ZNK10XFBehavior15getCurrentEventEv>
 800d66c:	4603      	mov	r3, r0
 800d66e:	4618      	mov	r0, r3
 800d670:	f7ff fa3b 	bl	800caea <_ZNK7XFEvent5getIdEv>
 800d674:	4602      	mov	r2, r0
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d101      	bne.n	800d682 <_ZN12oscilloscope10Controller12processEventEv+0x12a>
 800d67e:	2301      	movs	r3, #1
 800d680:	e000      	b.n	800d684 <_ZN12oscilloscope10Controller12processEventEv+0x12c>
 800d682:	2300      	movs	r3, #0
 800d684:	2b00      	cmp	r3, #0
 800d686:	d002      	beq.n	800d68e <_ZN12oscilloscope10Controller12processEventEv+0x136>
	{
		doButtonTimeMinusPressed();
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f000 f88c 	bl	800d7a6 <_ZN12oscilloscope10Controller24doButtonTimeMinusPressedEv>
	}

	return XFEventStatus::Consumed;
 800d68e:	f107 030c 	add.w	r3, r7, #12
 800d692:	2101      	movs	r1, #1
 800d694:	4618      	mov	r0, r3
 800d696:	f7ff fa34 	bl	800cb02 <_ZN13XFEventStatusC1ENS_12eEventStatusE>
 800d69a:	7b3b      	ldrb	r3, [r7, #12]
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3710      	adds	r7, #16
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}
 800d6a4:	080181d8 	.word	0x080181d8
 800d6a8:	080181ec 	.word	0x080181ec
 800d6ac:	08018134 	.word	0x08018134
 800d6b0:	0801822c 	.word	0x0801822c

0800d6b4 <_ZN12oscilloscope10Controller23onButtonTimePlusPressedEv>:

void Controller::onButtonTimePlusPressed()
{
 800d6b4:	b590      	push	{r4, r7, lr}
 800d6b6:	b085      	sub	sp, #20
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
	XFEvent* evButtonPlus =new XFEvent(XFEvent::Event, BTN_PLUS_ID, this);
 800d6bc:	2010      	movs	r0, #16
 800d6be:	f008 fcb4 	bl	801602a <_Znwj>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	461c      	mov	r4, r3
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2103      	movs	r1, #3
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	f7ff fe60 	bl	800d394 <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>
 800d6d4:	60fc      	str	r4, [r7, #12]

	pushEvent(evButtonPlus);
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	330c      	adds	r3, #12
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	68f9      	ldr	r1, [r7, #12]
 800d6e4:	4798      	blx	r3
}
 800d6e6:	bf00      	nop
 800d6e8:	3714      	adds	r7, #20
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd90      	pop	{r4, r7, pc}

0800d6ee <_ZThn16_N12oscilloscope10Controller23onButtonTimePlusPressedEv>:
    void onButtonTimePlusPressed() override;
 800d6ee:	f1a0 0010 	sub.w	r0, r0, #16
 800d6f2:	f7ff bfdf 	b.w	800d6b4 <_ZN12oscilloscope10Controller23onButtonTimePlusPressedEv>

0800d6f6 <_ZN12oscilloscope10Controller24onButtonTimeMinusPressedEv>:

void Controller::onButtonTimeMinusPressed()
{
 800d6f6:	b590      	push	{r4, r7, lr}
 800d6f8:	b085      	sub	sp, #20
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	6078      	str	r0, [r7, #4]
	XFEvent* evButtonMinus =new XFEvent(XFEvent::Event, BTN_MINUS_ID, this);
 800d6fe:	2010      	movs	r0, #16
 800d700:	f008 fc93 	bl	801602a <_Znwj>
 800d704:	4603      	mov	r3, r0
 800d706:	461c      	mov	r4, r3
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2103      	movs	r1, #3
 800d710:	4620      	mov	r0, r4
 800d712:	f7ff fe3f 	bl	800d394 <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>
 800d716:	60fc      	str	r4, [r7, #12]

	pushEvent(evButtonMinus);
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	330c      	adds	r3, #12
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	2200      	movs	r2, #0
 800d724:	68f9      	ldr	r1, [r7, #12]
 800d726:	4798      	blx	r3
}
 800d728:	bf00      	nop
 800d72a:	3714      	adds	r7, #20
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd90      	pop	{r4, r7, pc}

0800d730 <_ZThn16_N12oscilloscope10Controller24onButtonTimeMinusPressedEv>:
    void onButtonTimeMinusPressed() override;
 800d730:	f1a0 0010 	sub.w	r0, r0, #16
 800d734:	f7ff bfdf 	b.w	800d6f6 <_ZN12oscilloscope10Controller24onButtonTimeMinusPressedEv>

0800d738 <_ZN12oscilloscope10Controller18doShowAnalogSignalEv>:

void Controller::doShowAnalogSignal()
{
 800d738:	b480      	push	{r7}
 800d73a:	b083      	sub	sp, #12
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
    // TODO: Call gui().drawGraphPoints() with the appropriate data.
}
 800d740:	bf00      	nop
 800d742:	370c      	adds	r7, #12
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr

0800d74c <_ZN12oscilloscope10Controller23doButtonTimePlusPressedEv>:

void Controller::doButtonTimePlusPressed()
{
 800d74c:	b590      	push	{r4, r7, lr}
 800d74e:	b089      	sub	sp, #36	; 0x24
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
    if (_tdivValue < (TDIV_MAX - 1))
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d75a:	2b04      	cmp	r3, #4
 800d75c:	d81f      	bhi.n	800d79e <_ZN12oscilloscope10Controller23doButtonTimePlusPressedEv+0x52>
    {
        _tdivValue = (TDivValue)(_tdivValue + 1);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d764:	3301      	adds	r3, #1
 800d766:	b2da      	uxtb	r2, r3
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

        gui().setTimeDivisionText(getText(_tdivValue));
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f7ff fe8c 	bl	800d48c <_ZNK12oscilloscope10Controller3guiEv>
 800d774:	4604      	mov	r4, r0
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d77c:	f107 0308 	add.w	r3, r7, #8
 800d780:	6879      	ldr	r1, [r7, #4]
 800d782:	4618      	mov	r0, r3
 800d784:	f000 f83c 	bl	800d800 <_ZN12oscilloscope10Controller7getTextB5cxx11ENS_9TDivValueE>
 800d788:	f107 0308 	add.w	r3, r7, #8
 800d78c:	4619      	mov	r1, r3
 800d78e:	4620      	mov	r0, r4
 800d790:	f7ff fd7e 	bl	800d290 <_ZN12oscilloscope3Gui19setTimeDivisionTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800d794:	f107 0308 	add.w	r3, r7, #8
 800d798:	4618      	mov	r0, r3
 800d79a:	f008 fd38 	bl	801620e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
}
 800d79e:	bf00      	nop
 800d7a0:	3724      	adds	r7, #36	; 0x24
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd90      	pop	{r4, r7, pc}

0800d7a6 <_ZN12oscilloscope10Controller24doButtonTimeMinusPressedEv>:

void Controller::doButtonTimeMinusPressed()
{
 800d7a6:	b590      	push	{r4, r7, lr}
 800d7a8:	b089      	sub	sp, #36	; 0x24
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	6078      	str	r0, [r7, #4]
    if (_tdivValue > (TDIV_MIN + 1))
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d7b4:	2b01      	cmp	r3, #1
 800d7b6:	d91f      	bls.n	800d7f8 <_ZN12oscilloscope10Controller24doButtonTimeMinusPressedEv+0x52>
    {
        _tdivValue = (TDivValue)(_tdivValue - 1);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d7be:	3b01      	subs	r3, #1
 800d7c0:	b2da      	uxtb	r2, r3
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

        gui().setTimeDivisionText(getText(_tdivValue));
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f7ff fe5f 	bl	800d48c <_ZNK12oscilloscope10Controller3guiEv>
 800d7ce:	4604      	mov	r4, r0
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d7d6:	f107 0308 	add.w	r3, r7, #8
 800d7da:	6879      	ldr	r1, [r7, #4]
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f000 f80f 	bl	800d800 <_ZN12oscilloscope10Controller7getTextB5cxx11ENS_9TDivValueE>
 800d7e2:	f107 0308 	add.w	r3, r7, #8
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	f7ff fd51 	bl	800d290 <_ZN12oscilloscope3Gui19setTimeDivisionTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800d7ee:	f107 0308 	add.w	r3, r7, #8
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f008 fd0b 	bl	801620e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
}
 800d7f8:	bf00      	nop
 800d7fa:	3724      	adds	r7, #36	; 0x24
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd90      	pop	{r4, r7, pc}

0800d800 <_ZN12oscilloscope10Controller7getTextB5cxx11ENS_9TDivValueE>:

std::string Controller::getText(TDivValue tdivValue)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b088      	sub	sp, #32
 800d804:	af00      	add	r7, sp, #0
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	4613      	mov	r3, r2
 800d80c:	71fb      	strb	r3, [r7, #7]
    const uint32_t count = sizeof(_tdivOptions)/sizeof(_tdivOptions[0]);
 800d80e:	2305      	movs	r3, #5
 800d810:	61bb      	str	r3, [r7, #24]

    for (uint32_t i = 0; i < count; i++)
 800d812:	2300      	movs	r3, #0
 800d814:	61fb      	str	r3, [r7, #28]
 800d816:	69fb      	ldr	r3, [r7, #28]
 800d818:	2b04      	cmp	r3, #4
 800d81a:	d81b      	bhi.n	800d854 <_ZN12oscilloscope10Controller7getTextB5cxx11ENS_9TDivValueE+0x54>
    {
        if (_tdivOptions[i].tdivValue == tdivValue)
 800d81c:	4918      	ldr	r1, [pc, #96]	; (800d880 <_ZN12oscilloscope10Controller7getTextB5cxx11ENS_9TDivValueE+0x80>)
 800d81e:	69fa      	ldr	r2, [r7, #28]
 800d820:	4613      	mov	r3, r2
 800d822:	00db      	lsls	r3, r3, #3
 800d824:	1a9b      	subs	r3, r3, r2
 800d826:	009b      	lsls	r3, r3, #2
 800d828:	440b      	add	r3, r1
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	79fa      	ldrb	r2, [r7, #7]
 800d82e:	429a      	cmp	r2, r3
 800d830:	d10c      	bne.n	800d84c <_ZN12oscilloscope10Controller7getTextB5cxx11ENS_9TDivValueE+0x4c>
        {
            return _tdivOptions[i].text;
 800d832:	69fa      	ldr	r2, [r7, #28]
 800d834:	4613      	mov	r3, r2
 800d836:	00db      	lsls	r3, r3, #3
 800d838:	1a9b      	subs	r3, r3, r2
 800d83a:	009b      	lsls	r3, r3, #2
 800d83c:	4a10      	ldr	r2, [pc, #64]	; (800d880 <_ZN12oscilloscope10Controller7getTextB5cxx11ENS_9TDivValueE+0x80>)
 800d83e:	4413      	add	r3, r2
 800d840:	3304      	adds	r3, #4
 800d842:	4619      	mov	r1, r3
 800d844:	68f8      	ldr	r0, [r7, #12]
 800d846:	f008 fda5 	bl	8016394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800d84a:	e014      	b.n	800d876 <_ZN12oscilloscope10Controller7getTextB5cxx11ENS_9TDivValueE+0x76>
    for (uint32_t i = 0; i < count; i++)
 800d84c:	69fb      	ldr	r3, [r7, #28]
 800d84e:	3301      	adds	r3, #1
 800d850:	61fb      	str	r3, [r7, #28]
 800d852:	e7e0      	b.n	800d816 <_ZN12oscilloscope10Controller7getTextB5cxx11ENS_9TDivValueE+0x16>
        }
    }
    return "n/a";
 800d854:	f107 0314 	add.w	r3, r7, #20
 800d858:	4618      	mov	r0, r3
 800d85a:	f008 fbfa 	bl	8016052 <_ZNSaIcEC1Ev>
 800d85e:	f107 0314 	add.w	r3, r7, #20
 800d862:	461a      	mov	r2, r3
 800d864:	4907      	ldr	r1, [pc, #28]	; (800d884 <_ZN12oscilloscope10Controller7getTextB5cxx11ENS_9TDivValueE+0x84>)
 800d866:	68f8      	ldr	r0, [r7, #12]
 800d868:	f008 fdc8 	bl	80163fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800d86c:	f107 0314 	add.w	r3, r7, #20
 800d870:	4618      	mov	r0, r3
 800d872:	f008 fbef 	bl	8016054 <_ZNSaIcED1Ev>
}
 800d876:	68f8      	ldr	r0, [r7, #12]
 800d878:	3720      	adds	r7, #32
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	20000f8c 	.word	0x20000f8c
 800d884:	08018248 	.word	0x08018248

0800d888 <_ZN12oscilloscope10TDivOptionD1Ev>:
} TDivOption;
 800d888:	b580      	push	{r7, lr}
 800d88a:	b082      	sub	sp, #8
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	3304      	adds	r3, #4
 800d894:	4618      	mov	r0, r3
 800d896:	f008 fcba 	bl	801620e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	4618      	mov	r0, r3
 800d89e:	3708      	adds	r7, #8
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <_Z41__static_initialization_and_destruction_0ii>:

}   // namespace oscilloscope
 800d8a4:	b5b0      	push	{r4, r5, r7, lr}
 800d8a6:	b088      	sub	sp, #32
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	6039      	str	r1, [r7, #0]
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2b01      	cmp	r3, #1
 800d8b2:	d16e      	bne.n	800d992 <_Z41__static_initialization_and_destruction_0ii+0xee>
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d169      	bne.n	800d992 <_Z41__static_initialization_and_destruction_0ii+0xee>
                                               {TDIV_10ms,   "10 ms / div"}};
 800d8be:	4c3f      	ldr	r4, [pc, #252]	; (800d9bc <_Z41__static_initialization_and_destruction_0ii+0x118>)
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	7023      	strb	r3, [r4, #0]
 800d8c4:	1d25      	adds	r5, r4, #4
 800d8c6:	f107 030c 	add.w	r3, r7, #12
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f008 fbc1 	bl	8016052 <_ZNSaIcEC1Ev>
 800d8d0:	f107 030c 	add.w	r3, r7, #12
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	493a      	ldr	r1, [pc, #232]	; (800d9c0 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 800d8d8:	4628      	mov	r0, r5
 800d8da:	f008 fd8f 	bl	80163fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800d8de:	f107 030c 	add.w	r3, r7, #12
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f008 fbb6 	bl	8016054 <_ZNSaIcED1Ev>
 800d8e8:	341c      	adds	r4, #28
 800d8ea:	2302      	movs	r3, #2
 800d8ec:	7023      	strb	r3, [r4, #0]
 800d8ee:	1d25      	adds	r5, r4, #4
 800d8f0:	f107 0310 	add.w	r3, r7, #16
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f008 fbac 	bl	8016052 <_ZNSaIcEC1Ev>
 800d8fa:	f107 0310 	add.w	r3, r7, #16
 800d8fe:	461a      	mov	r2, r3
 800d900:	4930      	ldr	r1, [pc, #192]	; (800d9c4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 800d902:	4628      	mov	r0, r5
 800d904:	f008 fd7a 	bl	80163fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800d908:	f107 0310 	add.w	r3, r7, #16
 800d90c:	4618      	mov	r0, r3
 800d90e:	f008 fba1 	bl	8016054 <_ZNSaIcED1Ev>
 800d912:	341c      	adds	r4, #28
 800d914:	2303      	movs	r3, #3
 800d916:	7023      	strb	r3, [r4, #0]
 800d918:	1d25      	adds	r5, r4, #4
 800d91a:	f107 0314 	add.w	r3, r7, #20
 800d91e:	4618      	mov	r0, r3
 800d920:	f008 fb97 	bl	8016052 <_ZNSaIcEC1Ev>
 800d924:	f107 0314 	add.w	r3, r7, #20
 800d928:	461a      	mov	r2, r3
 800d92a:	4927      	ldr	r1, [pc, #156]	; (800d9c8 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 800d92c:	4628      	mov	r0, r5
 800d92e:	f008 fd65 	bl	80163fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800d932:	f107 0314 	add.w	r3, r7, #20
 800d936:	4618      	mov	r0, r3
 800d938:	f008 fb8c 	bl	8016054 <_ZNSaIcED1Ev>
 800d93c:	341c      	adds	r4, #28
 800d93e:	2304      	movs	r3, #4
 800d940:	7023      	strb	r3, [r4, #0]
 800d942:	1d25      	adds	r5, r4, #4
 800d944:	f107 0318 	add.w	r3, r7, #24
 800d948:	4618      	mov	r0, r3
 800d94a:	f008 fb82 	bl	8016052 <_ZNSaIcEC1Ev>
 800d94e:	f107 0318 	add.w	r3, r7, #24
 800d952:	461a      	mov	r2, r3
 800d954:	491d      	ldr	r1, [pc, #116]	; (800d9cc <_Z41__static_initialization_and_destruction_0ii+0x128>)
 800d956:	4628      	mov	r0, r5
 800d958:	f008 fd50 	bl	80163fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800d95c:	f107 0318 	add.w	r3, r7, #24
 800d960:	4618      	mov	r0, r3
 800d962:	f008 fb77 	bl	8016054 <_ZNSaIcED1Ev>
 800d966:	f104 031c 	add.w	r3, r4, #28
 800d96a:	2205      	movs	r2, #5
 800d96c:	701a      	strb	r2, [r3, #0]
 800d96e:	1d1c      	adds	r4, r3, #4
 800d970:	f107 031c 	add.w	r3, r7, #28
 800d974:	4618      	mov	r0, r3
 800d976:	f008 fb6c 	bl	8016052 <_ZNSaIcEC1Ev>
 800d97a:	f107 031c 	add.w	r3, r7, #28
 800d97e:	461a      	mov	r2, r3
 800d980:	4913      	ldr	r1, [pc, #76]	; (800d9d0 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 800d982:	4620      	mov	r0, r4
 800d984:	f008 fd3a 	bl	80163fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800d988:	f107 031c 	add.w	r3, r7, #28
 800d98c:	4618      	mov	r0, r3
 800d98e:	f008 fb61 	bl	8016054 <_ZNSaIcED1Ev>
const TDivOption Controller::_tdivOptions[] = {{TDIV_500us, "500 us / div"},
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d10d      	bne.n	800d9b4 <_Z41__static_initialization_and_destruction_0ii+0x110>
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	d108      	bne.n	800d9b4 <_Z41__static_initialization_and_destruction_0ii+0x110>
 800d9a2:	4c0c      	ldr	r4, [pc, #48]	; (800d9d4 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 800d9a4:	4b05      	ldr	r3, [pc, #20]	; (800d9bc <_Z41__static_initialization_and_destruction_0ii+0x118>)
 800d9a6:	429c      	cmp	r4, r3
 800d9a8:	d004      	beq.n	800d9b4 <_Z41__static_initialization_and_destruction_0ii+0x110>
 800d9aa:	3c1c      	subs	r4, #28
 800d9ac:	4620      	mov	r0, r4
 800d9ae:	f7ff ff6b 	bl	800d888 <_ZN12oscilloscope10TDivOptionD1Ev>
 800d9b2:	e7f7      	b.n	800d9a4 <_Z41__static_initialization_and_destruction_0ii+0x100>
}   // namespace oscilloscope
 800d9b4:	bf00      	nop
 800d9b6:	3720      	adds	r7, #32
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bdb0      	pop	{r4, r5, r7, pc}
 800d9bc:	20000f8c 	.word	0x20000f8c
 800d9c0:	0801824c 	.word	0x0801824c
 800d9c4:	0801825c 	.word	0x0801825c
 800d9c8:	08018268 	.word	0x08018268
 800d9cc:	08018274 	.word	0x08018274
 800d9d0:	08018280 	.word	0x08018280
 800d9d4:	20001018 	.word	0x20001018

0800d9d8 <_GLOBAL__sub_I__ZN12oscilloscope10Controller10_pInstanceE>:
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d9e0:	2001      	movs	r0, #1
 800d9e2:	f7ff ff5f 	bl	800d8a4 <_Z41__static_initialization_and_destruction_0ii>
 800d9e6:	bd80      	pop	{r7, pc}

0800d9e8 <_GLOBAL__sub_D__ZN12oscilloscope10Controller10_pInstanceE>:
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d9f0:	2000      	movs	r0, #0
 800d9f2:	f7ff ff57 	bl	800d8a4 <_Z41__static_initialization_and_destruction_0ii>
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <_ZNK13XFCustomEvent18deleteAfterConsumeEv>:

    /**
     * @brief Tells the XF if the event should be deleted after processing.
     * @return True if the event should be deleted.
     */
    bool deleteAfterConsume() const override { return bDeleteAfterConsume_; }
 800d9f8:	b480      	push	{r7}
 800d9fa:	b083      	sub	sp, #12
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	7c1b      	ldrb	r3, [r3, #16]
 800da04:	4618      	mov	r0, r3
 800da06:	370c      	adds	r7, #12
 800da08:	46bd      	mov	sp, r7
 800da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0e:	4770      	bx	lr

0800da10 <_ZN13XFCustomEvent21setDeleteAfterConsumeEb>:
protected:
    /**
     * @brief Setter for #_bDeleteAfterConsume attribute.
     * @param bDeleteAfterConsume Parameter to be assigned. Default: true.
     */
    void setDeleteAfterConsume(bool bDeleteAfterConsume = true) { bDeleteAfterConsume_ = bDeleteAfterConsume; }
 800da10:	b480      	push	{r7}
 800da12:	b083      	sub	sp, #12
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	460b      	mov	r3, r1
 800da1a:	70fb      	strb	r3, [r7, #3]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	78fa      	ldrb	r2, [r7, #3]
 800da20:	741a      	strb	r2, [r3, #16]
 800da22:	bf00      	nop
 800da24:	370c      	adds	r7, #12
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr
	...

0800da30 <_ZN13XFCustomEventD1Ev>:
class XFCustomEvent : public XFEvent
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	4a05      	ldr	r2, [pc, #20]	; (800da50 <_ZN13XFCustomEventD1Ev+0x20>)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	601a      	str	r2, [r3, #0]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	4618      	mov	r0, r3
 800da42:	f7ff fcc5 	bl	800d3d0 <_ZN7XFEventD1Ev>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	4618      	mov	r0, r3
 800da4a:	3708      	adds	r7, #8
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}
 800da50:	08018bb4 	.word	0x08018bb4

0800da54 <_ZN13XFCustomEventD0Ev>:
 800da54:	b580      	push	{r7, lr}
 800da56:	b082      	sub	sp, #8
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f7ff ffe7 	bl	800da30 <_ZN13XFCustomEventD1Ev>
 800da62:	2114      	movs	r1, #20
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f008 facf 	bl	8016008 <_ZdlPvj>
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	4618      	mov	r0, r3
 800da6e:	3708      	adds	r7, #8
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <_ZN11evButtonIrqC1Ev>:
#include "events.h"
#include "evbuttonirq.h"

evButtonIrq::evButtonIrq() :
 800da74:	b580      	push	{r7, lr}
 800da76:	b082      	sub	sp, #8
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
    XFCustomEvent(evButtonIrqId)
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2200      	movs	r2, #0
 800da80:	2101      	movs	r1, #1
 800da82:	4618      	mov	r0, r3
 800da84:	f000 ffd4 	bl	800ea30 <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>
 800da88:	4a06      	ldr	r2, [pc, #24]	; (800daa4 <_ZN11evButtonIrqC1Ev+0x30>)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	601a      	str	r2, [r3, #0]
{
	setDeleteAfterConsume(false);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2100      	movs	r1, #0
 800da92:	4618      	mov	r0, r3
 800da94:	f7ff ffbc 	bl	800da10 <_ZN13XFCustomEvent21setDeleteAfterConsumeEb>
}
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	4618      	mov	r0, r3
 800da9c:	3708      	adds	r7, #8
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
 800daa2:	bf00      	nop
 800daa4:	08018ba0 	.word	0x08018ba0

0800daa8 <_ZN11evButtonIrqD1Ev>:
#define EVBUTTONIRQ_H

#include "xf/customevent.h"
#include "events.h"

class evButtonIrq : public XFCustomEvent
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	4a05      	ldr	r2, [pc, #20]	; (800dac8 <_ZN11evButtonIrqD1Ev+0x20>)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	601a      	str	r2, [r3, #0]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	4618      	mov	r0, r3
 800daba:	f7ff ffb9 	bl	800da30 <_ZN13XFCustomEventD1Ev>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	4618      	mov	r0, r3
 800dac2:	3708      	adds	r7, #8
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}
 800dac8:	08018ba0 	.word	0x08018ba0

0800dacc <_ZN11evButtonIrqD0Ev>:
 800dacc:	b580      	push	{r7, lr}
 800dace:	b082      	sub	sp, #8
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f7ff ffe7 	bl	800daa8 <_ZN11evButtonIrqD1Ev>
 800dada:	2114      	movs	r1, #20
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f008 fa93 	bl	8016008 <_ZdlPvj>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	4618      	mov	r0, r3
 800dae6:	3708      	adds	r7, #8
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <_ZN15evButtonPressed11buttonIndexEv>:
    XFCustomEvent(evButtonPressedId)
{
	_buttonIndex = buttonIndex;
}

uint16_t evButtonPressed::buttonIndex() {
 800daec:	b480      	push	{r7}
 800daee:	b083      	sub	sp, #12
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
	return _buttonIndex;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	8a5b      	ldrh	r3, [r3, #18]
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	370c      	adds	r7, #12
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr

0800db04 <_ZN8external18FrequencyGeneratorC1Ev>:

namespace external
{

FrequencyGenerator* FrequencyGenerator::_instance = nullptr;
FrequencyGenerator::FrequencyGenerator()
 800db04:	b580      	push	{r7, lr}
 800db06:	b082      	sub	sp, #8
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
{
	assert (_instance==nullptr);
 800db0c:	4b0d      	ldr	r3, [pc, #52]	; (800db44 <_ZN8external18FrequencyGeneratorC1Ev+0x40>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d005      	beq.n	800db20 <_ZN8external18FrequencyGeneratorC1Ev+0x1c>
 800db14:	4b0c      	ldr	r3, [pc, #48]	; (800db48 <_ZN8external18FrequencyGeneratorC1Ev+0x44>)
 800db16:	4a0d      	ldr	r2, [pc, #52]	; (800db4c <_ZN8external18FrequencyGeneratorC1Ev+0x48>)
 800db18:	210b      	movs	r1, #11
 800db1a:	480d      	ldr	r0, [pc, #52]	; (800db50 <_ZN8external18FrequencyGeneratorC1Ev+0x4c>)
 800db1c:	f008 fca6 	bl	801646c <__assert_func>
	_instance = this;
 800db20:	4a08      	ldr	r2, [pc, #32]	; (800db44 <_ZN8external18FrequencyGeneratorC1Ev+0x40>)
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6013      	str	r3, [r2, #0]
	_mode = SINUS;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2200      	movs	r2, #0
 800db2a:	711a      	strb	r2, [r3, #4]
	_frequency = 500;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800db32:	601a      	str	r2, [r3, #0]
	_initialized = false;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2200      	movs	r2, #0
 800db38:	715a      	strb	r2, [r3, #5]

}
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	4618      	mov	r0, r3
 800db3e:	3708      	adds	r7, #8
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	20001018 	.word	0x20001018
 800db48:	0801828c 	.word	0x0801828c
 800db4c:	080182a0 	.word	0x080182a0
 800db50:	080182d4 	.word	0x080182d4

0800db54 <_ZN8external18FrequencyGenerator11setWaveFormE6f_mode>:
	{
		_initialized = true;
	}
}

void FrequencyGenerator::setWaveForm(f_mode mode) {
 800db54:	b580      	push	{r7, lr}
 800db56:	b082      	sub	sp, #8
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	460b      	mov	r3, r1
 800db5e:	70fb      	strb	r3, [r7, #3]
	_mode = mode;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	78fa      	ldrb	r2, [r7, #3]
 800db64:	711a      	strb	r2, [r3, #4]
	setGen();
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 f814 	bl	800db94 <_ZN8external18FrequencyGenerator6setGenEv>
}
 800db6c:	bf00      	nop
 800db6e:	3708      	adds	r7, #8
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <_ZN8external18FrequencyGenerator12setFrequencyEm>:

void FrequencyGenerator::setFrequency(uint32_t frequency) {
 800db74:	b580      	push	{r7, lr}
 800db76:	b082      	sub	sp, #8
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	6039      	str	r1, [r7, #0]
	_frequency = frequency;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	683a      	ldr	r2, [r7, #0]
 800db82:	601a      	str	r2, [r3, #0]
	setGen();
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 f805 	bl	800db94 <_ZN8external18FrequencyGenerator6setGenEv>
}
 800db8a:	bf00      	nop
 800db8c:	3708      	adds	r7, #8
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
	...

0800db94 <_ZN8external18FrequencyGenerator6setGenEv>:

FrequencyGenerator* FrequencyGenerator::getInstance() {
	return _instance;
}

void FrequencyGenerator::setGen() {
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
	if (_initialized )
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	795b      	ldrb	r3, [r3, #5]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d008      	beq.n	800dbb6 <_ZN8external18FrequencyGenerator6setGenEv+0x22>
	{
		Ext_FreqGen_Set(_frequency, _mode);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681a      	ldr	r2, [r3, #0]
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	791b      	ldrb	r3, [r3, #4]
 800dbac:	4619      	mov	r1, r3
 800dbae:	4610      	mov	r0, r2
 800dbb0:	f000 fbfa 	bl	800e3a8 <Ext_FreqGen_Set>
	}
	else
	{
		trace_out("Frequency Generator not initialized\n");
	}
}
 800dbb4:	e002      	b.n	800dbbc <_ZN8external18FrequencyGenerator6setGenEv+0x28>
		trace_out("Frequency Generator not initialized\n");
 800dbb6:	4803      	ldr	r0, [pc, #12]	; (800dbc4 <_ZN8external18FrequencyGenerator6setGenEv+0x30>)
 800dbb8:	f000 fb4c 	bl	800e254 <trace_out>
}
 800dbbc:	bf00      	nop
 800dbbe:	3708      	adds	r7, #8
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}
 800dbc4:	08018328 	.word	0x08018328

0800dbc8 <_ZN9interface9ButtonIrqD1Ev>:
 * the ISR calls this method.
 */
class ButtonIrq
{
protected:
    virtual ~ButtonIrq() {}
 800dbc8:	b480      	push	{r7}
 800dbca:	b083      	sub	sp, #12
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	4a04      	ldr	r2, [pc, #16]	; (800dbe4 <_ZN9interface9ButtonIrqD1Ev+0x1c>)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	601a      	str	r2, [r3, #0]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	4618      	mov	r0, r3
 800dbda:	370c      	adds	r7, #12
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr
 800dbe4:	08018c34 	.word	0x08018c34

0800dbe8 <_ZN9interface9ButtonIrqD0Ev>:
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f7ff ffe9 	bl	800dbc8 <_ZN9interface9ButtonIrqD1Ev>
 800dbf6:	2104      	movs	r1, #4
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f008 fa05 	bl	8016008 <_ZdlPvj>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	4618      	mov	r0, r3
 800dc02:	3708      	adds	r7, #8
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <_ZN9interface9ButtonIrqC1Ev>:

	virtual void onIrq() = 0;	///< @brief Called by the ISR.

protected:
	ButtonIrq() {}              ///< Not allowing to instantiate object of interface.
 800dc08:	b480      	push	{r7}
 800dc0a:	b083      	sub	sp, #12
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	4a04      	ldr	r2, [pc, #16]	; (800dc24 <_ZN9interface9ButtonIrqC1Ev+0x1c>)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	601a      	str	r2, [r3, #0]
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	4618      	mov	r0, r3
 800dc1a:	370c      	adds	r7, #12
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr
 800dc24:	08018c34 	.word	0x08018c34

0800dc28 <_ZN9interface31ButtonsControllerCallbackCallerD1Ev>:
 *
 */
class ButtonsControllerCallbackCaller
{
protected:
    virtual ~ButtonsControllerCallbackCaller() {}
 800dc28:	b480      	push	{r7}
 800dc2a:	b083      	sub	sp, #12
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	4a04      	ldr	r2, [pc, #16]	; (800dc44 <_ZN9interface31ButtonsControllerCallbackCallerD1Ev+0x1c>)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	601a      	str	r2, [r3, #0]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	4618      	mov	r0, r3
 800dc3a:	370c      	adds	r7, #12
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc42:	4770      	bx	lr
 800dc44:	08018c20 	.word	0x08018c20

0800dc48 <_ZN9interface31ButtonsControllerCallbackCallerD0Ev>:
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f7ff ffe9 	bl	800dc28 <_ZN9interface31ButtonsControllerCallbackCallerD1Ev>
 800dc56:	2104      	movs	r1, #4
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f008 f9d5 	bl	8016008 <_ZdlPvj>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	4618      	mov	r0, r3
 800dc62:	3708      	adds	r7, #8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <_ZN9interface31ButtonsControllerCallbackCallerC1Ev>:
     */
    virtual bool registerCallback(ButtonsControllerCallbackProvider * callbackProvider,
                                  ButtonsControllerCallbackProvider::CallbackMethod callbackMethod) = 0;

protected:
    ButtonsControllerCallbackCaller() {}                        ///< Not allowing to instantiate object of interface.
 800dc68:	b480      	push	{r7}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	4a04      	ldr	r2, [pc, #16]	; (800dc84 <_ZN9interface31ButtonsControllerCallbackCallerC1Ev+0x1c>)
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	601a      	str	r2, [r3, #0]
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	4618      	mov	r0, r3
 800dc7a:	370c      	adds	r7, #12
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr
 800dc84:	08018c20 	.word	0x08018c20

0800dc88 <_ZN17ButtonsControllerC1Ev>:

#include "event/evbuttonirq.h"

ButtonsController * ButtonsController::_pInstance(nullptr);

ButtonsController::ButtonsController()
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7ff ffb8 	bl	800dc08 <_ZN9interface9ButtonIrqC1Ev>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	3304      	adds	r3, #4
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f7ff ffe3 	bl	800dc68 <_ZN9interface31ButtonsControllerCallbackCallerC1Ev>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	3308      	adds	r3, #8
 800dca6:	2100      	movs	r1, #0
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f000 fd91 	bl	800e7d0 <_ZN10XFBehaviorC1Eb>
 800dcae:	4a17      	ldr	r2, [pc, #92]	; (800dd0c <_ZN17ButtonsControllerC1Ev+0x84>)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	601a      	str	r2, [r3, #0]
 800dcb4:	4a16      	ldr	r2, [pc, #88]	; (800dd10 <_ZN17ButtonsControllerC1Ev+0x88>)
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	605a      	str	r2, [r3, #4]
 800dcba:	4a16      	ldr	r2, [pc, #88]	; (800dd14 <_ZN17ButtonsControllerC1Ev+0x8c>)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	609a      	str	r2, [r3, #8]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	331c      	adds	r3, #28
 800dcc4:	2260      	movs	r2, #96	; 0x60
 800dcc6:	2100      	movs	r1, #0
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f008 fc67 	bl	801659c <memset>
{
    assert(!_pInstance);        // Singleton pattern. Only one instance allowed.
 800dcce:	4b12      	ldr	r3, [pc, #72]	; (800dd18 <_ZN17ButtonsControllerC1Ev+0x90>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d005      	beq.n	800dce2 <_ZN17ButtonsControllerC1Ev+0x5a>
 800dcd6:	4b11      	ldr	r3, [pc, #68]	; (800dd1c <_ZN17ButtonsControllerC1Ev+0x94>)
 800dcd8:	4a11      	ldr	r2, [pc, #68]	; (800dd20 <_ZN17ButtonsControllerC1Ev+0x98>)
 800dcda:	210f      	movs	r1, #15
 800dcdc:	4811      	ldr	r0, [pc, #68]	; (800dd24 <_ZN17ButtonsControllerC1Ev+0x9c>)
 800dcde:	f008 fbc5 	bl	801646c <__assert_func>
    _pInstance = this;          // Store 'this' to static pointer
 800dce2:	4a0d      	ldr	r2, [pc, #52]	; (800dd18 <_ZN17ButtonsControllerC1Ev+0x90>)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6013      	str	r3, [r2, #0]

    _currentState = STATE_UNKOWN;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2200      	movs	r2, #0
 800dcec:	761a      	strb	r2, [r3, #24]

    // Now the actual state of the buttons can be read
    _currentButtonsValue = readButtonsValue();
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f000 f8ee 	bl	800ded0 <_ZN17ButtonsController16readButtonsValueEv>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	765a      	strb	r2, [r3, #25]

    _callbacksCount = 0;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	769a      	strb	r2, [r3, #26]
}
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	4618      	mov	r0, r3
 800dd06:	3708      	adds	r7, #8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}
 800dd0c:	08018bc8 	.word	0x08018bc8
 800dd10:	08018be4 	.word	0x08018be4
 800dd14:	08018bf8 	.word	0x08018bf8
 800dd18:	2000101c 	.word	0x2000101c
 800dd1c:	08018350 	.word	0x08018350
 800dd20:	0801835c 	.word	0x0801835c
 800dd24:	08018384 	.word	0x08018384

0800dd28 <_ZN17ButtonsControllerD1Ev>:

ButtonsController::~ButtonsController()
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b082      	sub	sp, #8
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	4a0d      	ldr	r2, [pc, #52]	; (800dd68 <_ZN17ButtonsControllerD1Ev+0x40>)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	601a      	str	r2, [r3, #0]
 800dd36:	4a0d      	ldr	r2, [pc, #52]	; (800dd6c <_ZN17ButtonsControllerD1Ev+0x44>)
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	605a      	str	r2, [r3, #4]
 800dd3c:	4a0c      	ldr	r2, [pc, #48]	; (800dd70 <_ZN17ButtonsControllerD1Ev+0x48>)
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	609a      	str	r2, [r3, #8]
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	3308      	adds	r3, #8
 800dd46:	4618      	mov	r0, r3
 800dd48:	f000 fd90 	bl	800e86c <_ZN10XFBehaviorD1Ev>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	3304      	adds	r3, #4
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7ff ff69 	bl	800dc28 <_ZN9interface31ButtonsControllerCallbackCallerD1Ev>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f7ff ff35 	bl	800dbc8 <_ZN9interface9ButtonIrqD1Ev>
{

}
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	4618      	mov	r0, r3
 800dd62:	3708      	adds	r7, #8
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}
 800dd68:	08018bc8 	.word	0x08018bc8
 800dd6c:	08018be4 	.word	0x08018be4
 800dd70:	08018bf8 	.word	0x08018bf8

0800dd74 <_ZThn4_N17ButtonsControllerD1Ev>:
    virtual ~ButtonsController();
 800dd74:	f1a0 0004 	sub.w	r0, r0, #4
 800dd78:	f7ff bfd6 	b.w	800dd28 <_ZN17ButtonsControllerD1Ev>

0800dd7c <_ZThn8_N17ButtonsControllerD1Ev>:
 800dd7c:	f1a0 0008 	sub.w	r0, r0, #8
 800dd80:	f7ff bfd2 	b.w	800dd28 <_ZN17ButtonsControllerD1Ev>

0800dd84 <_ZN17ButtonsControllerD0Ev>:
ButtonsController::~ButtonsController()
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
}
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f7ff ffcb 	bl	800dd28 <_ZN17ButtonsControllerD1Ev>
 800dd92:	217c      	movs	r1, #124	; 0x7c
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f008 f937 	bl	8016008 <_ZdlPvj>
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3708      	adds	r7, #8
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <_ZThn8_N17ButtonsControllerD0Ev>:
 800dda4:	f1a0 0008 	sub.w	r0, r0, #8
 800dda8:	f7ff bfec 	b.w	800dd84 <_ZN17ButtonsControllerD0Ev>

0800ddac <_ZThn4_N17ButtonsControllerD0Ev>:
 800ddac:	f1a0 0004 	sub.w	r0, r0, #4
 800ddb0:	f7ff bfe8 	b.w	800dd84 <_ZN17ButtonsControllerD0Ev>

0800ddb4 <__tcf_0>:

void ButtonsController::onIrq()
{
    static evButtonIrq evButtonIrq;
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	4801      	ldr	r0, [pc, #4]	; (800ddc0 <__tcf_0+0xc>)
 800ddba:	f7ff fe75 	bl	800daa8 <_ZN11evButtonIrqD1Ev>
 800ddbe:	bd80      	pop	{r7, pc}
 800ddc0:	20001020 	.word	0x20001020

0800ddc4 <_ZN17ButtonsController5onIrqEv>:
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
    static evButtonIrq evButtonIrq;
 800ddcc:	4b17      	ldr	r3, [pc, #92]	; (800de2c <_ZN17ButtonsController5onIrqEv+0x68>)
 800ddce:	781b      	ldrb	r3, [r3, #0]
 800ddd0:	f3bf 8f5b 	dmb	ish
 800ddd4:	b2db      	uxtb	r3, r3
 800ddd6:	f003 0301 	and.w	r3, r3, #1
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	bf0c      	ite	eq
 800ddde:	2301      	moveq	r3, #1
 800dde0:	2300      	movne	r3, #0
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d013      	beq.n	800de10 <_ZN17ButtonsController5onIrqEv+0x4c>
 800dde8:	4810      	ldr	r0, [pc, #64]	; (800de2c <_ZN17ButtonsController5onIrqEv+0x68>)
 800ddea:	f008 f90f 	bl	801600c <__cxa_guard_acquire>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	bf14      	ite	ne
 800ddf4:	2301      	movne	r3, #1
 800ddf6:	2300      	moveq	r3, #0
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d008      	beq.n	800de10 <_ZN17ButtonsController5onIrqEv+0x4c>
 800ddfe:	480c      	ldr	r0, [pc, #48]	; (800de30 <_ZN17ButtonsController5onIrqEv+0x6c>)
 800de00:	f7ff fe38 	bl	800da74 <_ZN11evButtonIrqC1Ev>
 800de04:	4809      	ldr	r0, [pc, #36]	; (800de2c <_ZN17ButtonsController5onIrqEv+0x68>)
 800de06:	f008 f90d 	bl	8016024 <__cxa_guard_release>
 800de0a:	480a      	ldr	r0, [pc, #40]	; (800de34 <_ZN17ButtonsController5onIrqEv+0x70>)
 800de0c:	f008 fb4c 	bl	80164a8 <atexit>

    pushEvent(&evButtonIrq, true);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f103 0008 	add.w	r0, r3, #8
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	689b      	ldr	r3, [r3, #8]
 800de1a:	330c      	adds	r3, #12
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	2201      	movs	r2, #1
 800de20:	4903      	ldr	r1, [pc, #12]	; (800de30 <_ZN17ButtonsController5onIrqEv+0x6c>)
 800de22:	4798      	blx	r3
}
 800de24:	bf00      	nop
 800de26:	3708      	adds	r7, #8
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	20001034 	.word	0x20001034
 800de30:	20001020 	.word	0x20001020
 800de34:	0800ddb5 	.word	0x0800ddb5

0800de38 <_ZN17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE>:

bool ButtonsController::registerCallback(interface::ButtonsControllerCallbackProvider * callbackProvider,
                                         interface::ButtonsControllerCallbackProvider::CallbackMethod callbackMethod)
{
 800de38:	b480      	push	{r7}
 800de3a:	b087      	sub	sp, #28
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	4639      	mov	r1, r7
 800de44:	e881 000c 	stmia.w	r1, {r2, r3}
    if (_callbacksCount < MAX_CALLBACKS)
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	7e9b      	ldrb	r3, [r3, #26]
 800de4c:	2b07      	cmp	r3, #7
 800de4e:	d834      	bhi.n	800deba <_ZN17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE+0x82>
    {
        for (uint8_t i = 0; i < MAX_CALLBACKS; i++)
 800de50:	2300      	movs	r3, #0
 800de52:	75fb      	strb	r3, [r7, #23]
 800de54:	7dfb      	ldrb	r3, [r7, #23]
 800de56:	2b07      	cmp	r3, #7
 800de58:	d82d      	bhi.n	800deb6 <_ZN17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE+0x7e>
        {
            if (_callbackProvider[i].first == nullptr)
 800de5a:	7dfa      	ldrb	r2, [r7, #23]
 800de5c:	68f9      	ldr	r1, [r7, #12]
 800de5e:	4613      	mov	r3, r2
 800de60:	005b      	lsls	r3, r3, #1
 800de62:	4413      	add	r3, r2
 800de64:	009b      	lsls	r3, r3, #2
 800de66:	440b      	add	r3, r1
 800de68:	331c      	adds	r3, #28
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d11e      	bne.n	800deae <_ZN17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE+0x76>
            {
                _callbackProvider[i].first = callbackProvider;
 800de70:	7dfa      	ldrb	r2, [r7, #23]
 800de72:	68f9      	ldr	r1, [r7, #12]
 800de74:	4613      	mov	r3, r2
 800de76:	005b      	lsls	r3, r3, #1
 800de78:	4413      	add	r3, r2
 800de7a:	009b      	lsls	r3, r3, #2
 800de7c:	440b      	add	r3, r1
 800de7e:	331c      	adds	r3, #28
 800de80:	68ba      	ldr	r2, [r7, #8]
 800de82:	601a      	str	r2, [r3, #0]
                _callbackProvider[i].second = callbackMethod;
 800de84:	7dfa      	ldrb	r2, [r7, #23]
 800de86:	68f9      	ldr	r1, [r7, #12]
 800de88:	4613      	mov	r3, r2
 800de8a:	005b      	lsls	r3, r3, #1
 800de8c:	4413      	add	r3, r2
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	440b      	add	r3, r1
 800de92:	3320      	adds	r3, #32
 800de94:	461a      	mov	r2, r3
 800de96:	463b      	mov	r3, r7
 800de98:	e893 0003 	ldmia.w	r3, {r0, r1}
 800de9c:	e882 0003 	stmia.w	r2, {r0, r1}
                _callbacksCount++;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	7e9b      	ldrb	r3, [r3, #26]
 800dea4:	3301      	adds	r3, #1
 800dea6:	b2da      	uxtb	r2, r3
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	769a      	strb	r2, [r3, #26]
                break;
 800deac:	e003      	b.n	800deb6 <_ZN17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE+0x7e>
        for (uint8_t i = 0; i < MAX_CALLBACKS; i++)
 800deae:	7dfb      	ldrb	r3, [r7, #23]
 800deb0:	3301      	adds	r3, #1
 800deb2:	75fb      	strb	r3, [r7, #23]
 800deb4:	e7ce      	b.n	800de54 <_ZN17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE+0x1c>
            }
        }
        return true;
 800deb6:	2301      	movs	r3, #1
 800deb8:	e000      	b.n	800debc <_ZN17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE+0x84>
    }
    return false;
 800deba:	2300      	movs	r3, #0
}
 800debc:	4618      	mov	r0, r3
 800debe:	371c      	adds	r7, #28
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr

0800dec8 <_ZThn4_N17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE>:

protected:
    void onIrq() override;

public:
    bool registerCallback(interface::ButtonsControllerCallbackProvider * callbackProvider,
 800dec8:	f1a0 0004 	sub.w	r0, r0, #4
 800decc:	f7ff bfb4 	b.w	800de38 <_ZN17ButtonsController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE>

0800ded0 <_ZN17ButtonsController16readButtonsValueEv>:

ButtonsController::tButtonsValue ButtonsController::readButtonsValue()
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b084      	sub	sp, #16
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
    tButtonsValue value = 0;
 800ded8:	2300      	movs	r3, #0
 800deda:	73fb      	strb	r3, [r7, #15]

    // Button BTN0
    value |= (HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin) == GPIO_PIN_SET) ? 0x01 : 0x00;
 800dedc:	2104      	movs	r1, #4
 800dede:	4822      	ldr	r0, [pc, #136]	; (800df68 <_ZN17ButtonsController16readButtonsValueEv+0x98>)
 800dee0:	f7f6 fa4a 	bl	8004378 <HAL_GPIO_ReadPin>
 800dee4:	4603      	mov	r3, r0
 800dee6:	2b01      	cmp	r3, #1
 800dee8:	d101      	bne.n	800deee <_ZN17ButtonsController16readButtonsValueEv+0x1e>
 800deea:	2301      	movs	r3, #1
 800deec:	e000      	b.n	800def0 <_ZN17ButtonsController16readButtonsValueEv+0x20>
 800deee:	2300      	movs	r3, #0
 800def0:	b25a      	sxtb	r2, r3
 800def2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800def6:	4313      	orrs	r3, r2
 800def8:	b25b      	sxtb	r3, r3
 800defa:	73fb      	strb	r3, [r7, #15]

    // Button BTN1
    value |= (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == GPIO_PIN_SET) ? 0x02 : 0x00;
 800defc:	2108      	movs	r1, #8
 800defe:	481a      	ldr	r0, [pc, #104]	; (800df68 <_ZN17ButtonsController16readButtonsValueEv+0x98>)
 800df00:	f7f6 fa3a 	bl	8004378 <HAL_GPIO_ReadPin>
 800df04:	4603      	mov	r3, r0
 800df06:	2b01      	cmp	r3, #1
 800df08:	d101      	bne.n	800df0e <_ZN17ButtonsController16readButtonsValueEv+0x3e>
 800df0a:	2302      	movs	r3, #2
 800df0c:	e000      	b.n	800df10 <_ZN17ButtonsController16readButtonsValueEv+0x40>
 800df0e:	2300      	movs	r3, #0
 800df10:	b25a      	sxtb	r2, r3
 800df12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df16:	4313      	orrs	r3, r2
 800df18:	b25b      	sxtb	r3, r3
 800df1a:	73fb      	strb	r3, [r7, #15]

    // Button BTN2
    value |= (HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == GPIO_PIN_SET) ? 0x04 : 0x00;
 800df1c:	2180      	movs	r1, #128	; 0x80
 800df1e:	4813      	ldr	r0, [pc, #76]	; (800df6c <_ZN17ButtonsController16readButtonsValueEv+0x9c>)
 800df20:	f7f6 fa2a 	bl	8004378 <HAL_GPIO_ReadPin>
 800df24:	4603      	mov	r3, r0
 800df26:	2b01      	cmp	r3, #1
 800df28:	d101      	bne.n	800df2e <_ZN17ButtonsController16readButtonsValueEv+0x5e>
 800df2a:	2304      	movs	r3, #4
 800df2c:	e000      	b.n	800df30 <_ZN17ButtonsController16readButtonsValueEv+0x60>
 800df2e:	2300      	movs	r3, #0
 800df30:	b25a      	sxtb	r2, r3
 800df32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df36:	4313      	orrs	r3, r2
 800df38:	b25b      	sxtb	r3, r3
 800df3a:	73fb      	strb	r3, [r7, #15]

    // Button BTN3
    value |= (HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin) == GPIO_PIN_SET) ? 0x08 : 0x00;
 800df3c:	2140      	movs	r1, #64	; 0x40
 800df3e:	480b      	ldr	r0, [pc, #44]	; (800df6c <_ZN17ButtonsController16readButtonsValueEv+0x9c>)
 800df40:	f7f6 fa1a 	bl	8004378 <HAL_GPIO_ReadPin>
 800df44:	4603      	mov	r3, r0
 800df46:	2b01      	cmp	r3, #1
 800df48:	d101      	bne.n	800df4e <_ZN17ButtonsController16readButtonsValueEv+0x7e>
 800df4a:	2308      	movs	r3, #8
 800df4c:	e000      	b.n	800df50 <_ZN17ButtonsController16readButtonsValueEv+0x80>
 800df4e:	2300      	movs	r3, #0
 800df50:	b25a      	sxtb	r2, r3
 800df52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df56:	4313      	orrs	r3, r2
 800df58:	b25b      	sxtb	r3, r3
 800df5a:	73fb      	strb	r3, [r7, #15]

    return value;
 800df5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3710      	adds	r7, #16
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	40022000 	.word	0x40022000
 800df6c:	40021800 	.word	0x40021800

0800df70 <_ZN17ButtonsController12processEventEv>:

XFEventStatus ButtonsController::processEvent()
{
 800df70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df72:	b085      	sub	sp, #20
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
    eMainState newState = _currentState;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	7e1b      	ldrb	r3, [r3, #24]
 800df7c:	73fb      	strb	r3, [r7, #15]

    // Handle transition changes
    switch (_currentState)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	7e1b      	ldrb	r3, [r3, #24]
 800df82:	2b03      	cmp	r3, #3
 800df84:	d879      	bhi.n	800e07a <_ZN17ButtonsController12processEventEv+0x10a>
 800df86:	a201      	add	r2, pc, #4	; (adr r2, 800df8c <_ZN17ButtonsController12processEventEv+0x1c>)
 800df88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df8c:	0800df9d 	.word	0x0800df9d
 800df90:	0800dfc5 	.word	0x0800dfc5
 800df94:	0800dfed 	.word	0x0800dfed
 800df98:	0800e02d 	.word	0x0800e02d
    {
    case STATE_UNKOWN:
        // Decouple caller of startBehavior() with
        // the transition from UNKNOWN to INITIAL.
        if (getCurrentEvent()->getEventType() == XFEvent::Initial)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	3308      	adds	r3, #8
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f000 fd16 	bl	800e9d2 <_ZNK10XFBehavior15getCurrentEventEv>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7fe fd91 	bl	800cad0 <_ZNK7XFEvent12getEventTypeEv>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	2b01      	cmp	r3, #1
 800dfb2:	bf0c      	ite	eq
 800dfb4:	2301      	moveq	r3, #1
 800dfb6:	2300      	movne	r3, #0
 800dfb8:	b2db      	uxtb	r3, r3
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d056      	beq.n	800e06c <_ZN17ButtonsController12processEventEv+0xfc>
        {
            newState = STATE_INITIAL;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800dfc2:	e053      	b.n	800e06c <_ZN17ButtonsController12processEventEv+0xfc>
    case STATE_INITIAL:
        if (getCurrentEvent()->getEventType() == XFEvent::NullTransition)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	3308      	adds	r3, #8
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f000 fd02 	bl	800e9d2 <_ZNK10XFBehavior15getCurrentEventEv>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7fe fd7d 	bl	800cad0 <_ZNK7XFEvent12getEventTypeEv>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	2b02      	cmp	r3, #2
 800dfda:	bf0c      	ite	eq
 800dfdc:	2301      	moveq	r3, #1
 800dfde:	2300      	movne	r3, #0
 800dfe0:	b2db      	uxtb	r3, r3
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d044      	beq.n	800e070 <_ZN17ButtonsController12processEventEv+0x100>
        {
            newState = STATE_CHECK_BUTTONS;
 800dfe6:	2302      	movs	r3, #2
 800dfe8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800dfea:	e041      	b.n	800e070 <_ZN17ButtonsController12processEventEv+0x100>
    case STATE_CHECK_BUTTONS:
        if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	3308      	adds	r3, #8
 800dff0:	4618      	mov	r0, r3
 800dff2:	f000 fcee 	bl	800e9d2 <_ZNK10XFBehavior15getCurrentEventEv>
 800dff6:	4603      	mov	r3, r0
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7fe fd69 	bl	800cad0 <_ZNK7XFEvent12getEventTypeEv>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b03      	cmp	r3, #3
 800e002:	d10d      	bne.n	800e020 <_ZN17ButtonsController12processEventEv+0xb0>
            getCurrentEvent()->getId() == evButtonIrqId)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	3308      	adds	r3, #8
 800e008:	4618      	mov	r0, r3
 800e00a:	f000 fce2 	bl	800e9d2 <_ZNK10XFBehavior15getCurrentEventEv>
 800e00e:	4603      	mov	r3, r0
 800e010:	4618      	mov	r0, r3
 800e012:	f7fe fd6a 	bl	800caea <_ZNK7XFEvent5getIdEv>
 800e016:	4603      	mov	r3, r0
        if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d101      	bne.n	800e020 <_ZN17ButtonsController12processEventEv+0xb0>
 800e01c:	2301      	movs	r3, #1
 800e01e:	e000      	b.n	800e022 <_ZN17ButtonsController12processEventEv+0xb2>
 800e020:	2300      	movs	r3, #0
 800e022:	2b00      	cmp	r3, #0
 800e024:	d026      	beq.n	800e074 <_ZN17ButtonsController12processEventEv+0x104>
        {
            newState = STATE_DEBOUNCE;
 800e026:	2303      	movs	r3, #3
 800e028:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e02a:	e023      	b.n	800e074 <_ZN17ButtonsController12processEventEv+0x104>
    case STATE_DEBOUNCE:
        if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	3308      	adds	r3, #8
 800e030:	4618      	mov	r0, r3
 800e032:	f000 fcce 	bl	800e9d2 <_ZNK10XFBehavior15getCurrentEventEv>
 800e036:	4603      	mov	r3, r0
 800e038:	4618      	mov	r0, r3
 800e03a:	f7fe fd49 	bl	800cad0 <_ZNK7XFEvent12getEventTypeEv>
 800e03e:	4603      	mov	r3, r0
 800e040:	2b04      	cmp	r3, #4
 800e042:	d10d      	bne.n	800e060 <_ZN17ButtonsController12processEventEv+0xf0>
            getCurrentTimeout()->getId() == Timeout_DEBOUNCE_id)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	3308      	adds	r3, #8
 800e048:	4618      	mov	r0, r3
 800e04a:	f000 fccf 	bl	800e9ec <_ZN10XFBehavior17getCurrentTimeoutEv>
 800e04e:	4603      	mov	r3, r0
 800e050:	4618      	mov	r0, r3
 800e052:	f7fe fd4a 	bl	800caea <_ZNK7XFEvent5getIdEv>
 800e056:	4603      	mov	r3, r0
        if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 800e058:	2b01      	cmp	r3, #1
 800e05a:	d101      	bne.n	800e060 <_ZN17ButtonsController12processEventEv+0xf0>
 800e05c:	2301      	movs	r3, #1
 800e05e:	e000      	b.n	800e062 <_ZN17ButtonsController12processEventEv+0xf2>
 800e060:	2300      	movs	r3, #0
 800e062:	2b00      	cmp	r3, #0
 800e064:	d008      	beq.n	800e078 <_ZN17ButtonsController12processEventEv+0x108>
        {
            newState = STATE_CHECK_BUTTONS;
 800e066:	2302      	movs	r3, #2
 800e068:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e06a:	e005      	b.n	800e078 <_ZN17ButtonsController12processEventEv+0x108>
        break;
 800e06c:	bf00      	nop
 800e06e:	e004      	b.n	800e07a <_ZN17ButtonsController12processEventEv+0x10a>
        break;
 800e070:	bf00      	nop
 800e072:	e002      	b.n	800e07a <_ZN17ButtonsController12processEventEv+0x10a>
        break;
 800e074:	bf00      	nop
 800e076:	e000      	b.n	800e07a <_ZN17ButtonsController12processEventEv+0x10a>
        break;
 800e078:	bf00      	nop
    }

    // Handle transitions
    if (_currentState != newState)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	7e1b      	ldrb	r3, [r3, #24]
 800e07e:	7bfa      	ldrb	r2, [r7, #15]
 800e080:	429a      	cmp	r2, r3
 800e082:	d02e      	beq.n	800e0e2 <_ZN17ButtonsController12processEventEv+0x172>
    {
        switch (newState)
 800e084:	7bfb      	ldrb	r3, [r7, #15]
 800e086:	2b03      	cmp	r3, #3
 800e088:	d01f      	beq.n	800e0ca <_ZN17ButtonsController12processEventEv+0x15a>
 800e08a:	2b03      	cmp	r3, #3
 800e08c:	dc25      	bgt.n	800e0da <_ZN17ButtonsController12processEventEv+0x16a>
 800e08e:	2b01      	cmp	r3, #1
 800e090:	d002      	beq.n	800e098 <_ZN17ButtonsController12processEventEv+0x128>
 800e092:	2b02      	cmp	r3, #2
 800e094:	d015      	beq.n	800e0c2 <_ZN17ButtonsController12processEventEv+0x152>
            break;
        case STATE_DEBOUNCE:
            scheduleTimeout(Timeout_DEBOUNCE_id, 100);
            break;
        default:
            break;
 800e096:	e020      	b.n	800e0da <_ZN17ButtonsController12processEventEv+0x16a>
            GEN(XFNullTransition());
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f103 0508 	add.w	r5, r3, #8
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	689b      	ldr	r3, [r3, #8]
 800e0a2:	330c      	adds	r3, #12
 800e0a4:	681c      	ldr	r4, [r3, #0]
 800e0a6:	2010      	movs	r0, #16
 800e0a8:	f007 ffbf 	bl	801602a <_Znwj>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	461e      	mov	r6, r3
 800e0b0:	2100      	movs	r1, #0
 800e0b2:	4630      	mov	r0, r6
 800e0b4:	f000 fd18 	bl	800eae8 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	4631      	mov	r1, r6
 800e0bc:	4628      	mov	r0, r5
 800e0be:	47a0      	blx	r4
            break;
 800e0c0:	e00c      	b.n	800e0dc <_ZN17ButtonsController12processEventEv+0x16c>
            doCheckButtons();
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f000 f81c 	bl	800e100 <_ZN17ButtonsController14doCheckButtonsEv>
            break;
 800e0c8:	e008      	b.n	800e0dc <_ZN17ButtonsController12processEventEv+0x16c>
            scheduleTimeout(Timeout_DEBOUNCE_id, 100);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	3308      	adds	r3, #8
 800e0ce:	2264      	movs	r2, #100	; 0x64
 800e0d0:	2101      	movs	r1, #1
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7ff f9a7 	bl	800d426 <_ZN10XFBehavior15scheduleTimeoutEii>
            break;
 800e0d8:	e000      	b.n	800e0dc <_ZN17ButtonsController12processEventEv+0x16c>
            break;
 800e0da:	bf00      	nop
        }

        _currentState = newState;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	7bfa      	ldrb	r2, [r7, #15]
 800e0e0:	761a      	strb	r2, [r3, #24]
    }
    return XFEventStatus::Consumed;
 800e0e2:	f107 030c 	add.w	r3, r7, #12
 800e0e6:	2101      	movs	r1, #1
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7fe fd0a 	bl	800cb02 <_ZN13XFEventStatusC1ENS_12eEventStatusE>
 800e0ee:	7b3b      	ldrb	r3, [r7, #12]
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3714      	adds	r7, #20
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e0f8 <_ZThn8_N17ButtonsController12processEventEv>:
                          interface::ButtonsControllerCallbackProvider::CallbackMethod callbackMethod) override;

public:
    XFEventStatus processEvent() override;
 800e0f8:	f1a0 0008 	sub.w	r0, r0, #8
 800e0fc:	f7ff bf38 	b.w	800df70 <_ZN17ButtonsController12processEventEv>

0800e100 <_ZN17ButtonsController14doCheckButtonsEv>:


void ButtonsController::doCheckButtons()
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b086      	sub	sp, #24
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
    tButtonsValue newButtonsValue = readButtonsValue();
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f7ff fee1 	bl	800ded0 <_ZN17ButtonsController16readButtonsValueEv>
 800e10e:	4603      	mov	r3, r0
 800e110:	73fb      	strb	r3, [r7, #15]
    uint8_t mask = 0x01;
 800e112:	2301      	movs	r3, #1
 800e114:	75fb      	strb	r3, [r7, #23]

    if (_currentButtonsValue != newButtonsValue)
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	7e5b      	ldrb	r3, [r3, #25]
 800e11a:	7bfa      	ldrb	r2, [r7, #15]
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d027      	beq.n	800e170 <_ZN17ButtonsController14doCheckButtonsEv+0x70>
    {
        for (uint32_t i = 0; i < BUTTONS_COUNT; i++)
 800e120:	2300      	movs	r3, #0
 800e122:	613b      	str	r3, [r7, #16]
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	2b03      	cmp	r3, #3
 800e128:	d81f      	bhi.n	800e16a <_ZN17ButtonsController14doCheckButtonsEv+0x6a>
        {
            if ((_currentButtonsValue & mask) != (newButtonsValue & mask))
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	7e5a      	ldrb	r2, [r3, #25]
 800e12e:	7bfb      	ldrb	r3, [r7, #15]
 800e130:	4053      	eors	r3, r2
 800e132:	b2da      	uxtb	r2, r3
 800e134:	7dfb      	ldrb	r3, [r7, #23]
 800e136:	4013      	ands	r3, r2
 800e138:	b2db      	uxtb	r3, r3
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d00e      	beq.n	800e15c <_ZN17ButtonsController14doCheckButtonsEv+0x5c>
            {
                notifyButtonChange(i, !(newButtonsValue & mask));
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	b299      	uxth	r1, r3
 800e142:	7bfa      	ldrb	r2, [r7, #15]
 800e144:	7dfb      	ldrb	r3, [r7, #23]
 800e146:	4013      	ands	r3, r2
 800e148:	b2db      	uxtb	r3, r3
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	bf0c      	ite	eq
 800e14e:	2301      	moveq	r3, #1
 800e150:	2300      	movne	r3, #0
 800e152:	b2db      	uxtb	r3, r3
 800e154:	461a      	mov	r2, r3
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f000 f80e 	bl	800e178 <_ZN17ButtonsController18notifyButtonChangeEtb>
            }

            mask <<= 0x01;
 800e15c:	7dfb      	ldrb	r3, [r7, #23]
 800e15e:	005b      	lsls	r3, r3, #1
 800e160:	75fb      	strb	r3, [r7, #23]
        for (uint32_t i = 0; i < BUTTONS_COUNT; i++)
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	3301      	adds	r3, #1
 800e166:	613b      	str	r3, [r7, #16]
 800e168:	e7dc      	b.n	800e124 <_ZN17ButtonsController14doCheckButtonsEv+0x24>
        }

        _currentButtonsValue = newButtonsValue;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	7bfa      	ldrb	r2, [r7, #15]
 800e16e:	765a      	strb	r2, [r3, #25]
    }
}
 800e170:	bf00      	nop
 800e172:	3718      	adds	r7, #24
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}

0800e178 <_ZN17ButtonsController18notifyButtonChangeEtb>:

void ButtonsController::notifyButtonChange(uint16_t buttonIndex, bool pressed)
{
 800e178:	b590      	push	{r4, r7, lr}
 800e17a:	b085      	sub	sp, #20
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	460b      	mov	r3, r1
 800e182:	807b      	strh	r3, [r7, #2]
 800e184:	4613      	mov	r3, r2
 800e186:	707b      	strb	r3, [r7, #1]
#if (TRACE_BUTTONSCONTROLLER_NOTIFICATIONS != 0)
    Trace::out("Button %d %s", buttonIndex, (pressed) ? "pressed" : "released");
#endif

    for (uint8_t i = 0; i < MAX_CALLBACKS; i++)
 800e188:	2300      	movs	r3, #0
 800e18a:	73fb      	strb	r3, [r7, #15]
 800e18c:	7bfb      	ldrb	r3, [r7, #15]
 800e18e:	2b07      	cmp	r3, #7
 800e190:	d85b      	bhi.n	800e24a <_ZN17ButtonsController18notifyButtonChangeEtb+0xd2>
    {
        if (_callbackProvider[i].first != nullptr)
 800e192:	7bfa      	ldrb	r2, [r7, #15]
 800e194:	6879      	ldr	r1, [r7, #4]
 800e196:	4613      	mov	r3, r2
 800e198:	005b      	lsls	r3, r3, #1
 800e19a:	4413      	add	r3, r2
 800e19c:	009b      	lsls	r3, r3, #2
 800e19e:	440b      	add	r3, r1
 800e1a0:	331c      	adds	r3, #28
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d04f      	beq.n	800e248 <_ZN17ButtonsController18notifyButtonChangeEtb+0xd0>
        {
            (_callbackProvider[i].first->*_callbackProvider[i].second)(buttonIndex, pressed);
 800e1a8:	7bfa      	ldrb	r2, [r7, #15]
 800e1aa:	6879      	ldr	r1, [r7, #4]
 800e1ac:	4613      	mov	r3, r2
 800e1ae:	005b      	lsls	r3, r3, #1
 800e1b0:	4413      	add	r3, r2
 800e1b2:	009b      	lsls	r3, r3, #2
 800e1b4:	440b      	add	r3, r1
 800e1b6:	331c      	adds	r3, #28
 800e1b8:	6819      	ldr	r1, [r3, #0]
 800e1ba:	7bfa      	ldrb	r2, [r7, #15]
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	4613      	mov	r3, r2
 800e1c0:	005b      	lsls	r3, r3, #1
 800e1c2:	4413      	add	r3, r2
 800e1c4:	009b      	lsls	r3, r3, #2
 800e1c6:	4403      	add	r3, r0
 800e1c8:	3324      	adds	r3, #36	; 0x24
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	105b      	asrs	r3, r3, #1
 800e1ce:	18cc      	adds	r4, r1, r3
 800e1d0:	7bfa      	ldrb	r2, [r7, #15]
 800e1d2:	6879      	ldr	r1, [r7, #4]
 800e1d4:	4613      	mov	r3, r2
 800e1d6:	005b      	lsls	r3, r3, #1
 800e1d8:	4413      	add	r3, r2
 800e1da:	009b      	lsls	r3, r3, #2
 800e1dc:	440b      	add	r3, r1
 800e1de:	3324      	adds	r3, #36	; 0x24
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	f003 0301 	and.w	r3, r3, #1
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d109      	bne.n	800e1fe <_ZN17ButtonsController18notifyButtonChangeEtb+0x86>
 800e1ea:	7bfa      	ldrb	r2, [r7, #15]
 800e1ec:	6879      	ldr	r1, [r7, #4]
 800e1ee:	4613      	mov	r3, r2
 800e1f0:	005b      	lsls	r3, r3, #1
 800e1f2:	4413      	add	r3, r2
 800e1f4:	009b      	lsls	r3, r3, #2
 800e1f6:	440b      	add	r3, r1
 800e1f8:	3320      	adds	r3, #32
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	e01f      	b.n	800e23e <_ZN17ButtonsController18notifyButtonChangeEtb+0xc6>
 800e1fe:	7bfa      	ldrb	r2, [r7, #15]
 800e200:	6879      	ldr	r1, [r7, #4]
 800e202:	4613      	mov	r3, r2
 800e204:	005b      	lsls	r3, r3, #1
 800e206:	4413      	add	r3, r2
 800e208:	009b      	lsls	r3, r3, #2
 800e20a:	440b      	add	r3, r1
 800e20c:	331c      	adds	r3, #28
 800e20e:	6819      	ldr	r1, [r3, #0]
 800e210:	7bfa      	ldrb	r2, [r7, #15]
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	4613      	mov	r3, r2
 800e216:	005b      	lsls	r3, r3, #1
 800e218:	4413      	add	r3, r2
 800e21a:	009b      	lsls	r3, r3, #2
 800e21c:	4403      	add	r3, r0
 800e21e:	3324      	adds	r3, #36	; 0x24
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	105b      	asrs	r3, r3, #1
 800e224:	440b      	add	r3, r1
 800e226:	6819      	ldr	r1, [r3, #0]
 800e228:	7bfa      	ldrb	r2, [r7, #15]
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	4613      	mov	r3, r2
 800e22e:	005b      	lsls	r3, r3, #1
 800e230:	4413      	add	r3, r2
 800e232:	009b      	lsls	r3, r3, #2
 800e234:	4403      	add	r3, r0
 800e236:	3320      	adds	r3, #32
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	440b      	add	r3, r1
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	787a      	ldrb	r2, [r7, #1]
 800e240:	8879      	ldrh	r1, [r7, #2]
 800e242:	4620      	mov	r0, r4
 800e244:	4798      	blx	r3
            break;
 800e246:	e000      	b.n	800e24a <_ZN17ButtonsController18notifyButtonChangeEtb+0xd2>
        }
        else
        {
            break;
 800e248:	bf00      	nop
        }
    }
}
 800e24a:	bf00      	nop
 800e24c:	3714      	adds	r7, #20
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd90      	pop	{r4, r7, pc}
	...

0800e254 <trace_out>:
{
    Trace::initialize();
}

void trace_out(const char * const format , ...)
{
 800e254:	b40f      	push	{r0, r1, r2, r3}
 800e256:	b580      	push	{r7, lr}
 800e258:	b082      	sub	sp, #8
 800e25a:	af00      	add	r7, sp, #0
    va_list args;

    // Format string
    va_start(args, format);
 800e25c:	f107 0314 	add.w	r3, r7, #20
 800e260:	607b      	str	r3, [r7, #4]
    vsprintf(strTrace, format, args);
 800e262:	687a      	ldr	r2, [r7, #4]
 800e264:	6939      	ldr	r1, [r7, #16]
 800e266:	480b      	ldr	r0, [pc, #44]	; (800e294 <trace_out+0x40>)
 800e268:	f008 fda2 	bl	8016db0 <vsiprintf>
    va_end(args);

    checkStringEnding(strTrace, strlen(strTrace));
 800e26c:	4809      	ldr	r0, [pc, #36]	; (800e294 <trace_out+0x40>)
 800e26e:	f7f2 f81f 	bl	80002b0 <strlen>
 800e272:	4603      	mov	r3, r0
 800e274:	4619      	mov	r1, r3
 800e276:	4807      	ldr	r0, [pc, #28]	; (800e294 <trace_out+0x40>)
 800e278:	f000 f810 	bl	800e29c <_ZL17checkStringEndingPcm>

    traceUart.write(strTrace);
 800e27c:	2200      	movs	r2, #0
 800e27e:	4905      	ldr	r1, [pc, #20]	; (800e294 <trace_out+0x40>)
 800e280:	4805      	ldr	r0, [pc, #20]	; (800e298 <trace_out+0x44>)
 800e282:	f000 f9eb 	bl	800e65c <_ZN4Uart5writeEPKcj>
}
 800e286:	bf00      	nop
 800e288:	3708      	adds	r7, #8
 800e28a:	46bd      	mov	sp, r7
 800e28c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e290:	b004      	add	sp, #16
 800e292:	4770      	bx	lr
 800e294:	200010c8 	.word	0x200010c8
 800e298:	20001038 	.word	0x20001038

0800e29c <_ZL17checkStringEndingPcm>:
{
	traceUart.initialize(TRACE_UART_BAUD_RATE);
}

static int32_t checkStringEnding(char * str, uint32_t len)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b082      	sub	sp, #8
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	6039      	str	r1, [r7, #0]
	if (!len)
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d101      	bne.n	800e2b0 <_ZL17checkStringEndingPcm+0x14>
	{
		return 0;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	e040      	b.n	800e332 <_ZL17checkStringEndingPcm+0x96>
	}

	if (str[len-1] != '\n')
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	3b01      	subs	r3, #1
 800e2b4:	687a      	ldr	r2, [r7, #4]
 800e2b6:	4413      	add	r3, r2
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	2b0a      	cmp	r3, #10
 800e2bc:	d011      	beq.n	800e2e2 <_ZL17checkStringEndingPcm+0x46>
	{
#if (TRACE_ADD_CRLF_SEQU != 0)
		// Add "\r\n" at the end of the string
		str[len] = '\r';
 800e2be:	687a      	ldr	r2, [r7, #4]
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	4413      	add	r3, r2
 800e2c4:	220d      	movs	r2, #13
 800e2c6:	701a      	strb	r2, [r3, #0]
		str[len+1] = '\n';
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	3301      	adds	r3, #1
 800e2cc:	687a      	ldr	r2, [r7, #4]
 800e2ce:	4413      	add	r3, r2
 800e2d0:	220a      	movs	r2, #10
 800e2d2:	701a      	strb	r2, [r3, #0]
		str[len+2] = '\0';
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	3302      	adds	r3, #2
 800e2d8:	687a      	ldr	r2, [r7, #4]
 800e2da:	4413      	add	r3, r2
 800e2dc:	2200      	movs	r2, #0
 800e2de:	701a      	strb	r2, [r3, #0]
 800e2e0:	e023      	b.n	800e32a <_ZL17checkStringEndingPcm+0x8e>
		str[len+1] = '\0';
#endif // TRACE_ADD_CRLF_SEQU
		}
#if (TRACE_ADD_CRLF_SEQU != 0)
	// Check string finishing with "\r\n"
	else if (str[len-1] == '\n')
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	3b01      	subs	r3, #1
 800e2e6:	687a      	ldr	r2, [r7, #4]
 800e2e8:	4413      	add	r3, r2
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	2b0a      	cmp	r3, #10
 800e2ee:	d11c      	bne.n	800e32a <_ZL17checkStringEndingPcm+0x8e>
	{
		// Check if second last char is an '\r'
		if (len == 1 ||
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d009      	beq.n	800e30a <_ZL17checkStringEndingPcm+0x6e>
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	2b01      	cmp	r3, #1
 800e2fa:	d916      	bls.n	800e32a <_ZL17checkStringEndingPcm+0x8e>
			(len >= 2 && str[len-2] != '\r'))
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	3b02      	subs	r3, #2
 800e300:	687a      	ldr	r2, [r7, #4]
 800e302:	4413      	add	r3, r2
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	2b0d      	cmp	r3, #13
 800e308:	d00f      	beq.n	800e32a <_ZL17checkStringEndingPcm+0x8e>
		{
			// Squeeze a '\r'
			memmove(&str[len], &str[len-1], 2);
 800e30a:	687a      	ldr	r2, [r7, #4]
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	4413      	add	r3, r2
 800e310:	683a      	ldr	r2, [r7, #0]
 800e312:	3a01      	subs	r2, #1
 800e314:	6879      	ldr	r1, [r7, #4]
 800e316:	440a      	add	r2, r1
 800e318:	8812      	ldrh	r2, [r2, #0]
 800e31a:	b292      	uxth	r2, r2
 800e31c:	801a      	strh	r2, [r3, #0]
			str[len-1] = '\r';
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	3b01      	subs	r3, #1
 800e322:	687a      	ldr	r2, [r7, #4]
 800e324:	4413      	add	r3, r2
 800e326:	220d      	movs	r2, #13
 800e328:	701a      	strb	r2, [r3, #0]
		}
	}
#endif // TRACE_ADD_CRLF_SEQU
	return strlen(str);
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f7f1 ffc0 	bl	80002b0 <strlen>
 800e330:	4603      	mov	r3, r0
}
 800e332:	4618      	mov	r0, r3
 800e334:	3708      	adds	r7, #8
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
	...

0800e33c <_Z41__static_initialization_and_destruction_0ii>:

//static
void Trace::unlock()
{
    traceMutexUnlock();
}
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b082      	sub	sp, #8
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	6039      	str	r1, [r7, #0]
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2b01      	cmp	r3, #1
 800e34a:	d10a      	bne.n	800e362 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e352:	4293      	cmp	r3, r2
 800e354:	d105      	bne.n	800e362 <_Z41__static_initialization_and_destruction_0ii+0x26>
static Uart traceUart(TRACE_UART_CONSTRUCTOR_PARAMETERS);
 800e356:	2300      	movs	r3, #0
 800e358:	4a09      	ldr	r2, [pc, #36]	; (800e380 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800e35a:	2100      	movs	r1, #0
 800e35c:	4809      	ldr	r0, [pc, #36]	; (800e384 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800e35e:	f000 f911 	bl	800e584 <_ZN4UartC1EhP20__UART_HandleTypeDefb>
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d107      	bne.n	800e378 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e36e:	4293      	cmp	r3, r2
 800e370:	d102      	bne.n	800e378 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800e372:	4804      	ldr	r0, [pc, #16]	; (800e384 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800e374:	f000 f952 	bl	800e61c <_ZN4UartD1Ev>
}
 800e378:	bf00      	nop
 800e37a:	3708      	adds	r7, #8
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}
 800e380:	20001708 	.word	0x20001708
 800e384:	20001038 	.word	0x20001038

0800e388 <_GLOBAL__sub_I_trace_initialize>:
 800e388:	b580      	push	{r7, lr}
 800e38a:	af00      	add	r7, sp, #0
 800e38c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e390:	2001      	movs	r0, #1
 800e392:	f7ff ffd3 	bl	800e33c <_Z41__static_initialization_and_destruction_0ii>
 800e396:	bd80      	pop	{r7, pc}

0800e398 <_GLOBAL__sub_D_trace_initialize>:
 800e398:	b580      	push	{r7, lr}
 800e39a:	af00      	add	r7, sp, #0
 800e39c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e3a0:	2000      	movs	r0, #0
 800e3a2:	f7ff ffcb 	bl	800e33c <_Z41__static_initialization_and_destruction_0ii>
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <Ext_FreqGen_Set>:
	return 0;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
void Ext_FreqGen_Set(uint32_t frequency,f_mode mode)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b086      	sub	sp, #24
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	460b      	mov	r3, r1
 800e3b2:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2];
	float calcDivisor;
	uint32_t divisorInt;
	calcDivisor = ((float)frequency * 268435456L) / 16000000L;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	ee07 3a90 	vmov	s15, r3
 800e3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3be:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800e4dc <Ext_FreqGen_Set+0x134>
 800e3c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e3c6:	eddf 6a46 	vldr	s13, [pc, #280]	; 800e4e0 <Ext_FreqGen_Set+0x138>
 800e3ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e3ce:	edc7 7a05 	vstr	s15, [r7, #20]
	divisorInt = (uint32_t)calcDivisor - 1;
 800e3d2:	edd7 7a05 	vldr	s15, [r7, #20]
 800e3d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e3da:	ee17 3a90 	vmov	r3, s15
 800e3de:	3b01      	subs	r3, #1
 800e3e0:	613b      	str	r3, [r7, #16]
	//----------------------------------------------------------------------------
	// reset generator
	data[0] = 0x21;
 800e3e2:	2321      	movs	r3, #33	; 0x21
 800e3e4:	733b      	strb	r3, [r7, #12]
	data[1] = 0x00;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(nCS_FREQ_GEN_GPIO_Port, nCS_FREQ_GEN_Pin, GPIO_PIN_RESET);
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	2140      	movs	r1, #64	; 0x40
 800e3ee:	483d      	ldr	r0, [pc, #244]	; (800e4e4 <Ext_FreqGen_Set+0x13c>)
 800e3f0:	f7f5 ffda 	bl	80043a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,data,2,10);
 800e3f4:	f107 010c 	add.w	r1, r7, #12
 800e3f8:	230a      	movs	r3, #10
 800e3fa:	2202      	movs	r2, #2
 800e3fc:	483a      	ldr	r0, [pc, #232]	; (800e4e8 <Ext_FreqGen_Set+0x140>)
 800e3fe:	f7f9 fa14 	bl	800782a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(nCS_FREQ_GEN_GPIO_Port, nCS_FREQ_GEN_Pin, GPIO_PIN_SET);
 800e402:	2201      	movs	r2, #1
 800e404:	2140      	movs	r1, #64	; 0x40
 800e406:	4837      	ldr	r0, [pc, #220]	; (800e4e4 <Ext_FreqGen_Set+0x13c>)
 800e408:	f7f5 ffce 	bl	80043a8 <HAL_GPIO_WritePin>
	//----------------------------------------------------------------------------
	// set frequency LSB (14 bits)
	data[0] = ((divisorInt & 0x3FFF) | 0x4000) >> 8;
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	0a1b      	lsrs	r3, r3, #8
 800e410:	b2db      	uxtb	r3, r3
 800e412:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e416:	b2db      	uxtb	r3, r3
 800e418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e41c:	b2db      	uxtb	r3, r3
 800e41e:	733b      	strb	r3, [r7, #12]
	data[1] = ((divisorInt & 0x3FFF) | 0x4000) >> 0;
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	b2db      	uxtb	r3, r3
 800e424:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(nCS_FREQ_GEN_GPIO_Port, nCS_FREQ_GEN_Pin, GPIO_PIN_RESET);
 800e426:	2200      	movs	r2, #0
 800e428:	2140      	movs	r1, #64	; 0x40
 800e42a:	482e      	ldr	r0, [pc, #184]	; (800e4e4 <Ext_FreqGen_Set+0x13c>)
 800e42c:	f7f5 ffbc 	bl	80043a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,data,2,10);
 800e430:	f107 010c 	add.w	r1, r7, #12
 800e434:	230a      	movs	r3, #10
 800e436:	2202      	movs	r2, #2
 800e438:	482b      	ldr	r0, [pc, #172]	; (800e4e8 <Ext_FreqGen_Set+0x140>)
 800e43a:	f7f9 f9f6 	bl	800782a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(nCS_FREQ_GEN_GPIO_Port, nCS_FREQ_GEN_Pin, GPIO_PIN_SET);
 800e43e:	2201      	movs	r2, #1
 800e440:	2140      	movs	r1, #64	; 0x40
 800e442:	4828      	ldr	r0, [pc, #160]	; (800e4e4 <Ext_FreqGen_Set+0x13c>)
 800e444:	f7f5 ffb0 	bl	80043a8 <HAL_GPIO_WritePin>
	//----------------------------------------------------------------------------
	// set frequency MSB (14 bits)
	data[0] = (((divisorInt>>14) & 0x3FFF) | 0x4000) >> 8;
 800e448:	693b      	ldr	r3, [r7, #16]
 800e44a:	0b9b      	lsrs	r3, r3, #14
 800e44c:	0a1b      	lsrs	r3, r3, #8
 800e44e:	b2db      	uxtb	r3, r3
 800e450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e454:	b2db      	uxtb	r3, r3
 800e456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e45a:	b2db      	uxtb	r3, r3
 800e45c:	733b      	strb	r3, [r7, #12]
	data[1] = (((divisorInt>>14) & 0x3FFF) | 0x4000) >> 0;
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	0b9b      	lsrs	r3, r3, #14
 800e462:	b2db      	uxtb	r3, r3
 800e464:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(nCS_FREQ_GEN_GPIO_Port, nCS_FREQ_GEN_Pin, GPIO_PIN_RESET);
 800e466:	2200      	movs	r2, #0
 800e468:	2140      	movs	r1, #64	; 0x40
 800e46a:	481e      	ldr	r0, [pc, #120]	; (800e4e4 <Ext_FreqGen_Set+0x13c>)
 800e46c:	f7f5 ff9c 	bl	80043a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,data,2,10);
 800e470:	f107 010c 	add.w	r1, r7, #12
 800e474:	230a      	movs	r3, #10
 800e476:	2202      	movs	r2, #2
 800e478:	481b      	ldr	r0, [pc, #108]	; (800e4e8 <Ext_FreqGen_Set+0x140>)
 800e47a:	f7f9 f9d6 	bl	800782a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(nCS_FREQ_GEN_GPIO_Port, nCS_FREQ_GEN_Pin, GPIO_PIN_SET);
 800e47e:	2201      	movs	r2, #1
 800e480:	2140      	movs	r1, #64	; 0x40
 800e482:	4818      	ldr	r0, [pc, #96]	; (800e4e4 <Ext_FreqGen_Set+0x13c>)
 800e484:	f7f5 ff90 	bl	80043a8 <HAL_GPIO_WritePin>
	//----------------------------------------------------------------------------
	// set output signal
	data[0] = 0x20;		// unreset
 800e488:	2320      	movs	r3, #32
 800e48a:	733b      	strb	r3, [r7, #12]
	switch(mode)
 800e48c:	78fb      	ldrb	r3, [r7, #3]
 800e48e:	2b02      	cmp	r3, #2
 800e490:	d00c      	beq.n	800e4ac <Ext_FreqGen_Set+0x104>
 800e492:	2b02      	cmp	r3, #2
 800e494:	dc0d      	bgt.n	800e4b2 <Ext_FreqGen_Set+0x10a>
 800e496:	2b00      	cmp	r3, #0
 800e498:	d002      	beq.n	800e4a0 <Ext_FreqGen_Set+0xf8>
 800e49a:	2b01      	cmp	r3, #1
 800e49c:	d003      	beq.n	800e4a6 <Ext_FreqGen_Set+0xfe>
 800e49e:	e008      	b.n	800e4b2 <Ext_FreqGen_Set+0x10a>
	{
		case SINUS:
			data[1] = 0x00;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	737b      	strb	r3, [r7, #13]
			break;		
 800e4a4:	e005      	b.n	800e4b2 <Ext_FreqGen_Set+0x10a>
		case TRIANGLE:
			data[1] = 0x02;
 800e4a6:	2302      	movs	r3, #2
 800e4a8:	737b      	strb	r3, [r7, #13]
			break;		
 800e4aa:	e002      	b.n	800e4b2 <Ext_FreqGen_Set+0x10a>
		case SQUARE:
			data[1] = 0x28;
 800e4ac:	2328      	movs	r3, #40	; 0x28
 800e4ae:	737b      	strb	r3, [r7, #13]
			break;
 800e4b0:	bf00      	nop
	}
	HAL_GPIO_WritePin(nCS_FREQ_GEN_GPIO_Port, nCS_FREQ_GEN_Pin, GPIO_PIN_RESET);
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	2140      	movs	r1, #64	; 0x40
 800e4b6:	480b      	ldr	r0, [pc, #44]	; (800e4e4 <Ext_FreqGen_Set+0x13c>)
 800e4b8:	f7f5 ff76 	bl	80043a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,data,2,10);
 800e4bc:	f107 010c 	add.w	r1, r7, #12
 800e4c0:	230a      	movs	r3, #10
 800e4c2:	2202      	movs	r2, #2
 800e4c4:	4808      	ldr	r0, [pc, #32]	; (800e4e8 <Ext_FreqGen_Set+0x140>)
 800e4c6:	f7f9 f9b0 	bl	800782a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(nCS_FREQ_GEN_GPIO_Port, nCS_FREQ_GEN_Pin, GPIO_PIN_SET);
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	2140      	movs	r1, #64	; 0x40
 800e4ce:	4805      	ldr	r0, [pc, #20]	; (800e4e4 <Ext_FreqGen_Set+0x13c>)
 800e4d0:	f7f5 ff6a 	bl	80043a8 <HAL_GPIO_WritePin>
}
 800e4d4:	bf00      	nop
 800e4d6:	3718      	adds	r7, #24
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}
 800e4dc:	4d800000 	.word	0x4d800000
 800e4e0:	4b742400 	.word	0x4b742400
 800e4e4:	40021400 	.word	0x40021400
 800e4e8:	20001510 	.word	0x20001510

0800e4ec <_Z5inISRv>:

volatile int bInISR = 0;
volatile int bOMEnterCriticalRegionNested = 0;

int inISR()
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	af00      	add	r7, sp, #0
	// Variable must be put to TRUE in every ISR to indicate execution
	// of an ISR and need to put back to FALSE before leaving ISR.
	return bInISR;
 800e4f0:	4b03      	ldr	r3, [pc, #12]	; (800e500 <_Z5inISRv+0x14>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fc:	4770      	bx	lr
 800e4fe:	bf00      	nop
 800e500:	200011c8 	.word	0x200011c8

0800e504 <_Z13enterCriticalv>:

void enterCritical()
{
 800e504:	b580      	push	{r7, lr}
 800e506:	af00      	add	r7, sp, #0
	// Only disable interrupts when not calling from an ISR
	if (!inISR())
 800e508:	f7ff fff0 	bl	800e4ec <_Z5inISRv>
 800e50c:	4603      	mov	r3, r0
 800e50e:	2b00      	cmp	r3, #0
 800e510:	bf0c      	ite	eq
 800e512:	2301      	moveq	r3, #1
 800e514:	2300      	movne	r3, #0
 800e516:	b2db      	uxtb	r3, r3
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d00f      	beq.n	800e53c <_Z13enterCriticalv+0x38>
	{
		if (!bOMEnterCriticalRegionNested)
 800e51c:	4b08      	ldr	r3, [pc, #32]	; (800e540 <_Z13enterCriticalv+0x3c>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	2b00      	cmp	r3, #0
 800e522:	bf0c      	ite	eq
 800e524:	2301      	moveq	r3, #1
 800e526:	2300      	movne	r3, #0
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d001      	beq.n	800e532 <_Z13enterCriticalv+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 800e52e:	b672      	cpsid	i
}
 800e530:	bf00      	nop
		{
			// Turn off the priority configurable interrupts
		    __disable_irq();
		}
		bOMEnterCriticalRegionNested++;
 800e532:	4b03      	ldr	r3, [pc, #12]	; (800e540 <_Z13enterCriticalv+0x3c>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	3301      	adds	r3, #1
 800e538:	4a01      	ldr	r2, [pc, #4]	; (800e540 <_Z13enterCriticalv+0x3c>)
 800e53a:	6013      	str	r3, [r2, #0]
	}
}
 800e53c:	bf00      	nop
 800e53e:	bd80      	pop	{r7, pc}
 800e540:	200011cc 	.word	0x200011cc

0800e544 <_Z12exitCriticalv>:

void exitCritical()
{
 800e544:	b580      	push	{r7, lr}
 800e546:	af00      	add	r7, sp, #0
	// Only enable interrupts when not calling from an ISR
	if (!inISR())
 800e548:	f7ff ffd0 	bl	800e4ec <_Z5inISRv>
 800e54c:	4603      	mov	r3, r0
 800e54e:	2b00      	cmp	r3, #0
 800e550:	bf0c      	ite	eq
 800e552:	2301      	moveq	r3, #1
 800e554:	2300      	movne	r3, #0
 800e556:	b2db      	uxtb	r3, r3
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d00f      	beq.n	800e57c <_Z12exitCriticalv+0x38>
	{
		bOMEnterCriticalRegionNested--;
 800e55c:	4b08      	ldr	r3, [pc, #32]	; (800e580 <_Z12exitCriticalv+0x3c>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	3b01      	subs	r3, #1
 800e562:	4a07      	ldr	r2, [pc, #28]	; (800e580 <_Z12exitCriticalv+0x3c>)
 800e564:	6013      	str	r3, [r2, #0]

		if (!bOMEnterCriticalRegionNested)
 800e566:	4b06      	ldr	r3, [pc, #24]	; (800e580 <_Z12exitCriticalv+0x3c>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	bf0c      	ite	eq
 800e56e:	2301      	moveq	r3, #1
 800e570:	2300      	movne	r3, #0
 800e572:	b2db      	uxtb	r3, r3
 800e574:	2b00      	cmp	r3, #0
 800e576:	d001      	beq.n	800e57c <_Z12exitCriticalv+0x38>
  __ASM volatile ("cpsie i" : : : "memory");
 800e578:	b662      	cpsie	i
}
 800e57a:	bf00      	nop
		{
			// Turn on the interrupts with configurable priority
		    __enable_irq();
		}
	}
}
 800e57c:	bf00      	nop
 800e57e:	bd80      	pop	{r7, pc}
 800e580:	200011cc 	.word	0x200011cc

0800e584 <_ZN4UartC1EhP20__UART_HandleTypeDefb>:
#endif

Uart * Uart::_sUart[Uart::UART_COUNT];				// Comment: Startup script should initialize pointers to zero (.bss section)
bool Uart::_sInitialized[Uart::UART_COUNT];			// Same for other arrays

Uart::Uart(const unsigned char uartNbr, UART_HandleTypeDef * uartHandle, bool bTxDMA /* = false */)
 800e584:	b580      	push	{r7, lr}
 800e586:	b084      	sub	sp, #16
 800e588:	af00      	add	r7, sp, #0
 800e58a:	60f8      	str	r0, [r7, #12]
 800e58c:	607a      	str	r2, [r7, #4]
 800e58e:	461a      	mov	r2, r3
 800e590:	460b      	mov	r3, r1
 800e592:	72fb      	strb	r3, [r7, #11]
 800e594:	4613      	mov	r3, r2
 800e596:	72bb      	strb	r3, [r7, #10]
 : _uartNbr(-1),
   _pUartHandle(NULL),
   _bTxDMA(bTxDMA)
 800e598:	4a1a      	ldr	r2, [pc, #104]	; (800e604 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x80>)
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	601a      	str	r2, [r3, #0]
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	22ff      	movs	r2, #255	; 0xff
 800e5a2:	711a      	strb	r2, [r3, #4]
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	609a      	str	r2, [r3, #8]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	7aba      	ldrb	r2, [r7, #10]
 800e5ae:	731a      	strb	r2, [r3, #12]
{
	assert(uartNbr < UART_COUNT);
 800e5b0:	7afb      	ldrb	r3, [r7, #11]
 800e5b2:	2b02      	cmp	r3, #2
 800e5b4:	d905      	bls.n	800e5c2 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x3e>
 800e5b6:	4b14      	ldr	r3, [pc, #80]	; (800e608 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x84>)
 800e5b8:	4a14      	ldr	r2, [pc, #80]	; (800e60c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x88>)
 800e5ba:	2111      	movs	r1, #17
 800e5bc:	4814      	ldr	r0, [pc, #80]	; (800e610 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x8c>)
 800e5be:	f007 ff55 	bl	801646c <__assert_func>

	if (uartNbr < UART_COUNT)
 800e5c2:	7afb      	ldrb	r3, [r7, #11]
 800e5c4:	2b02      	cmp	r3, #2
 800e5c6:	d817      	bhi.n	800e5f8 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x74>
    {
        if (!_sUart[uartNbr])
 800e5c8:	7afb      	ldrb	r3, [r7, #11]
 800e5ca:	4a12      	ldr	r2, [pc, #72]	; (800e614 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x90>)
 800e5cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d10b      	bne.n	800e5ec <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x68>
        {
            // Register instance
            _sUart[uartNbr] = this;
 800e5d4:	7afb      	ldrb	r3, [r7, #11]
 800e5d6:	490f      	ldr	r1, [pc, #60]	; (800e614 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x90>)
 800e5d8:	68fa      	ldr	r2, [r7, #12]
 800e5da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            _uartNbr = uartNbr;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	7afa      	ldrb	r2, [r7, #11]
 800e5e2:	711a      	strb	r2, [r3, #4]

            _pUartHandle = uartHandle;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	609a      	str	r2, [r3, #8]
 800e5ea:	e005      	b.n	800e5f8 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x74>
        }
        else
        {
            assert(false);  // Error: Instance for specified UART already exists.
 800e5ec:	4b0a      	ldr	r3, [pc, #40]	; (800e618 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x94>)
 800e5ee:	4a07      	ldr	r2, [pc, #28]	; (800e60c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x88>)
 800e5f0:	211f      	movs	r1, #31
 800e5f2:	4807      	ldr	r0, [pc, #28]	; (800e610 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x8c>)
 800e5f4:	f007 ff3a 	bl	801646c <__assert_func>
        }
    }
}
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3710      	adds	r7, #16
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
 800e602:	bf00      	nop
 800e604:	08018c48 	.word	0x08018c48
 800e608:	080183e4 	.word	0x080183e4
 800e60c:	080183fc 	.word	0x080183fc
 800e610:	08018434 	.word	0x08018434
 800e614:	200011d0 	.word	0x200011d0
 800e618:	08018488 	.word	0x08018488

0800e61c <_ZN4UartD1Ev>:

Uart::~Uart()
 800e61c:	b480      	push	{r7}
 800e61e:	b083      	sub	sp, #12
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	4a04      	ldr	r2, [pc, #16]	; (800e638 <_ZN4UartD1Ev+0x1c>)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	601a      	str	r2, [r3, #0]
{

}
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	4618      	mov	r0, r3
 800e62e:	370c      	adds	r7, #12
 800e630:	46bd      	mov	sp, r7
 800e632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e636:	4770      	bx	lr
 800e638:	08018c48 	.word	0x08018c48

0800e63c <_ZN4UartD0Ev>:
Uart::~Uart()
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
}
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f7ff ffe9 	bl	800e61c <_ZN4UartD1Ev>
 800e64a:	2190      	movs	r1, #144	; 0x90
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f007 fcdb 	bl	8016008 <_ZdlPvj>
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	4618      	mov	r0, r3
 800e656:	3708      	adds	r7, #8
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}

0800e65c <_ZN4Uart5writeEPKcj>:
    __HAL_UART_DISABLE(_pUartHandle);
    return true;
}

void Uart::write(const char * str, unsigned int length /* = 0 */)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b084      	sub	sp, #16
 800e660:	af00      	add	r7, sp, #0
 800e662:	60f8      	str	r0, [r7, #12]
 800e664:	60b9      	str	r1, [r7, #8]
 800e666:	607a      	str	r2, [r7, #4]
	if (!length)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d103      	bne.n	800e676 <_ZN4Uart5writeEPKcj+0x1a>
	{
		length = strlen(str);
 800e66e:	68b8      	ldr	r0, [r7, #8]
 800e670:	f7f1 fe1e 	bl	80002b0 <strlen>
 800e674:	6078      	str	r0, [r7, #4]
	}

    if (!_bTxDMA)
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	7b1b      	ldrb	r3, [r3, #12]
 800e67a:	f083 0301 	eor.w	r3, r3, #1
 800e67e:	b2db      	uxtb	r3, r3
 800e680:	2b00      	cmp	r3, #0
 800e682:	d008      	beq.n	800e696 <_ZN4Uart5writeEPKcj+0x3a>
    {   // Transmit without DMA
        // Send next character
        HAL_UART_Transmit(_pUartHandle, (uint8_t *)str, length, 50);
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	6898      	ldr	r0, [r3, #8]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	b29a      	uxth	r2, r3
 800e68c:	2332      	movs	r3, #50	; 0x32
 800e68e:	68b9      	ldr	r1, [r7, #8]
 800e690:	f7fa ff22 	bl	80094d8 <HAL_UART_Transmit>
    }
    else
    {   // TX DMA enabled
        writeUsingDMA((const uint8_t *)str, length);
    }
}
 800e694:	e004      	b.n	800e6a0 <_ZN4Uart5writeEPKcj+0x44>
        writeUsingDMA((const uint8_t *)str, length);
 800e696:	687a      	ldr	r2, [r7, #4]
 800e698:	68b9      	ldr	r1, [r7, #8]
 800e69a:	68f8      	ldr	r0, [r7, #12]
 800e69c:	f000 f804 	bl	800e6a8 <_ZN4Uart13writeUsingDMAEPKhm>
}
 800e6a0:	bf00      	nop
 800e6a2:	3710      	adds	r7, #16
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}

0800e6a8 <_ZN4Uart13writeUsingDMAEPKhm>:

void Uart::writeUsingDMA(const uint8_t * str, uint32_t length)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b084      	sub	sp, #16
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	60f8      	str	r0, [r7, #12]
 800e6b0:	60b9      	str	r1, [r7, #8]
 800e6b2:	607a      	str	r2, [r7, #4]
    assert(length <= sizeof(_pTxDmaBuffer));
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2b80      	cmp	r3, #128	; 0x80
 800e6b8:	d905      	bls.n	800e6c6 <_ZN4Uart13writeUsingDMAEPKhm+0x1e>
 800e6ba:	4b13      	ldr	r3, [pc, #76]	; (800e708 <_ZN4Uart13writeUsingDMAEPKhm+0x60>)
 800e6bc:	4a13      	ldr	r2, [pc, #76]	; (800e70c <_ZN4Uart13writeUsingDMAEPKhm+0x64>)
 800e6be:	2150      	movs	r1, #80	; 0x50
 800e6c0:	4813      	ldr	r0, [pc, #76]	; (800e710 <_ZN4Uart13writeUsingDMAEPKhm+0x68>)
 800e6c2:	f007 fed3 	bl	801646c <__assert_func>

    // Copy data to TX DMA buffer
    ::memcpy(_pTxDmaBuffer, str, length);
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	330d      	adds	r3, #13
 800e6ca:	687a      	ldr	r2, [r7, #4]
 800e6cc:	68b9      	ldr	r1, [r7, #8]
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f007 ff3c 	bl	801654c <memcpy>

    // Check that a Tx process is not already ongoing
    // (should never happen, but who knows!)
    while (_pUartHandle->gState != HAL_UART_STATE_READY)
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	689b      	ldr	r3, [r3, #8]
 800e6d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e6da:	2b20      	cmp	r3, #32
 800e6dc:	bf14      	ite	ne
 800e6de:	2301      	movne	r3, #1
 800e6e0:	2300      	moveq	r3, #0
 800e6e2:	b2db      	uxtb	r3, r3
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d001      	beq.n	800e6ec <_ZN4Uart13writeUsingDMAEPKhm+0x44>
    { continue; }
 800e6e8:	bf00      	nop
    while (_pUartHandle->gState != HAL_UART_STATE_READY)
 800e6ea:	e7f3      	b.n	800e6d4 <_ZN4Uart13writeUsingDMAEPKhm+0x2c>

    // Give data to TX DMA
    HAL_UART_Transmit_DMA(_pUartHandle, _pTxDmaBuffer, length);
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	6898      	ldr	r0, [r3, #8]
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	330d      	adds	r3, #13
 800e6f4:	687a      	ldr	r2, [r7, #4]
 800e6f6:	b292      	uxth	r2, r2
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	f7fa ff81 	bl	8009600 <HAL_UART_Transmit_DMA>
}
 800e6fe:	bf00      	nop
 800e700:	3710      	adds	r7, #16
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	08018490 	.word	0x08018490
 800e70c:	080184b0 	.word	0x080184b0
 800e710:	08018434 	.word	0x08018434

0800e714 <_ZN7XFEvent11setBehaviorEPN9interface10XFReactiveE>:
    inline void setBehavior(interface::XFReactive * pBehavior) { pBehavior_ = pBehavior; }
 800e714:	b480      	push	{r7}
 800e716:	b083      	sub	sp, #12
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	6039      	str	r1, [r7, #0]
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	683a      	ldr	r2, [r7, #0]
 800e722:	60da      	str	r2, [r3, #12]
 800e724:	bf00      	nop
 800e726:	370c      	adds	r7, #12
 800e728:	46bd      	mov	sp, r7
 800e72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72e:	4770      	bx	lr

0800e730 <_ZNK13XFEventStatuseqERKNS_12eEventStatusE>:

	/**
	 * Checks if both variables contain the same event status.
	 */
    bool operator == (const XFEventStatus::eEventStatus & eventStatus) const
 800e730:	b480      	push	{r7}
 800e732:	b083      	sub	sp, #12
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	6039      	str	r1, [r7, #0]
	{
        return (this->status_ == eventStatus);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	781a      	ldrb	r2, [r3, #0]
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	429a      	cmp	r2, r3
 800e744:	bf0c      	ite	eq
 800e746:	2301      	moveq	r3, #1
 800e748:	2300      	movne	r3, #0
 800e74a:	b2db      	uxtb	r3, r3
	}
 800e74c:	4618      	mov	r0, r3
 800e74e:	370c      	adds	r7, #12
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	4770      	bx	lr

0800e758 <_ZNK10XFBehavior16hasOwnDispatcherEv>:
    inline bool hasOwnDispatcher() const { return hasOwnDispatcher_; }	///< True if behavior has its own dispatcher.
 800e758:	b480      	push	{r7}
 800e75a:	b083      	sub	sp, #12
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	7a1b      	ldrb	r3, [r3, #8]
 800e764:	4618      	mov	r0, r3
 800e766:	370c      	adds	r7, #12
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr

0800e770 <_ZN9interface10XFReactiveC1Ev>:

protected:
    virtual TerminateBehavior process(const XFEvent * pEvent) = 0;  ///< Called by the dispatcher to process an event.

protected:
    XFReactive() = default;
 800e770:	b480      	push	{r7}
 800e772:	b083      	sub	sp, #12
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
 800e778:	4a04      	ldr	r2, [pc, #16]	; (800e78c <_ZN9interface10XFReactiveC1Ev+0x1c>)
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	601a      	str	r2, [r3, #0]
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	4618      	mov	r0, r3
 800e782:	370c      	adds	r7, #12
 800e784:	46bd      	mov	sp, r7
 800e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78a:	4770      	bx	lr
 800e78c:	08018c80 	.word	0x08018c80

0800e790 <_ZN9interface10XFReactiveD1Ev>:
    virtual ~XFReactive() = default;
 800e790:	b480      	push	{r7}
 800e792:	b083      	sub	sp, #12
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	4a04      	ldr	r2, [pc, #16]	; (800e7ac <_ZN9interface10XFReactiveD1Ev+0x1c>)
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	601a      	str	r2, [r3, #0]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	370c      	adds	r7, #12
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7aa:	4770      	bx	lr
 800e7ac:	08018c80 	.word	0x08018c80

0800e7b0 <_ZN9interface10XFReactiveD0Ev>:
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b082      	sub	sp, #8
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f7ff ffe9 	bl	800e790 <_ZN9interface10XFReactiveD1Ev>
 800e7be:	2104      	movs	r1, #4
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f007 fc21 	bl	8016008 <_ZdlPvj>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	3708      	adds	r7, #8
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}

0800e7d0 <_ZN10XFBehaviorC1Eb>:
#include "xf/initialevent.h"
#include "xf/behavior.h"

using interface::XFResourceFactory;

XFBehavior::XFBehavior(bool ownDispatcher /* = false */) :
 800e7d0:	b590      	push	{r4, r7, lr}
 800e7d2:	b083      	sub	sp, #12
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	460b      	mov	r3, r1
 800e7da:	70fb      	strb	r3, [r7, #3]
    pDispatcher_(nullptr),
    hasOwnDispatcher_(ownDispatcher),
    deleteOnTerminate_(false),
    pCurrentEvent_(nullptr)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f7ff ffc6 	bl	800e770 <_ZN9interface10XFReactiveC1Ev>
 800e7e4:	4a20      	ldr	r2, [pc, #128]	; (800e868 <_ZN10XFBehaviorC1Eb+0x98>)
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	601a      	str	r2, [r3, #0]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	605a      	str	r2, [r3, #4]
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	78fa      	ldrb	r2, [r7, #3]
 800e7f4:	721a      	strb	r2, [r3, #8]
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	725a      	strb	r2, [r3, #9]
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2200      	movs	r2, #0
 800e800:	60da      	str	r2, [r3, #12]
{
    if (ownDispatcher)
 800e802:	78fb      	ldrb	r3, [r7, #3]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d00b      	beq.n	800e820 <_ZN10XFBehaviorC1Eb+0x50>
    {
        pDispatcher_ = XFResourceFactory::getInstance()->createDispatcher();
 800e808:	f000 fbfe 	bl	800f008 <_ZN9interface17XFResourceFactory11getInstanceEv>
 800e80c:	4603      	mov	r3, r0
 800e80e:	681a      	ldr	r2, [r3, #0]
 800e810:	3204      	adds	r2, #4
 800e812:	6812      	ldr	r2, [r2, #0]
 800e814:	4618      	mov	r0, r3
 800e816:	4790      	blx	r2
 800e818:	4602      	mov	r2, r0
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	605a      	str	r2, [r3, #4]
 800e81e:	e009      	b.n	800e834 <_ZN10XFBehaviorC1Eb+0x64>
    }
    else
    {
        pDispatcher_ = XFResourceFactory::getInstance()->getDefaultDispatcher();
 800e820:	f000 fbf2 	bl	800f008 <_ZN9interface17XFResourceFactory11getInstanceEv>
 800e824:	4603      	mov	r3, r0
 800e826:	681a      	ldr	r2, [r3, #0]
 800e828:	6812      	ldr	r2, [r2, #0]
 800e82a:	4618      	mov	r0, r3
 800e82c:	4790      	blx	r2
 800e82e:	4602      	mov	r2, r0
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	605a      	str	r2, [r3, #4]

    // Force hasOwnDispatcher attribute to false in case actual
    // dispatcher is the default dispatcher. This may happen
    // if in an IDF an other dispatcher is requested, but
    // only the default dispatcher is present.
    if (pDispatcher_ == XFResourceFactory::getInstance()->getDefaultDispatcher())
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	685c      	ldr	r4, [r3, #4]
 800e838:	f000 fbe6 	bl	800f008 <_ZN9interface17XFResourceFactory11getInstanceEv>
 800e83c:	4603      	mov	r3, r0
 800e83e:	681a      	ldr	r2, [r3, #0]
 800e840:	6812      	ldr	r2, [r2, #0]
 800e842:	4618      	mov	r0, r3
 800e844:	4790      	blx	r2
 800e846:	4603      	mov	r3, r0
 800e848:	429c      	cmp	r4, r3
 800e84a:	bf0c      	ite	eq
 800e84c:	2301      	moveq	r3, #1
 800e84e:	2300      	movne	r3, #0
 800e850:	b2db      	uxtb	r3, r3
 800e852:	2b00      	cmp	r3, #0
 800e854:	d002      	beq.n	800e85c <_ZN10XFBehaviorC1Eb+0x8c>
    {
        hasOwnDispatcher_ = false;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2200      	movs	r2, #0
 800e85a:	721a      	strb	r2, [r3, #8]
    }
}
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	4618      	mov	r0, r3
 800e860:	370c      	adds	r7, #12
 800e862:	46bd      	mov	sp, r7
 800e864:	bd90      	pop	{r4, r7, pc}
 800e866:	bf00      	nop
 800e868:	08018c58 	.word	0x08018c58

0800e86c <_ZN10XFBehaviorD1Ev>:

XFBehavior::~XFBehavior()
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b082      	sub	sp, #8
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	4a05      	ldr	r2, [pc, #20]	; (800e88c <_ZN10XFBehaviorD1Ev+0x20>)
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	601a      	str	r2, [r3, #0]
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7ff ff87 	bl	800e790 <_ZN9interface10XFReactiveD1Ev>
{

}
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	4618      	mov	r0, r3
 800e886:	3708      	adds	r7, #8
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}
 800e88c:	08018c58 	.word	0x08018c58

0800e890 <_ZN10XFBehavior13startBehaviorEv>:

void XFBehavior::startBehavior()
{
 800e890:	b5b0      	push	{r4, r5, r7, lr}
 800e892:	b082      	sub	sp, #8
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
    // Send initial event to state machine
    GEN(XFInitialEvent());
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	330c      	adds	r3, #12
 800e89e:	681c      	ldr	r4, [r3, #0]
 800e8a0:	2010      	movs	r0, #16
 800e8a2:	f007 fbc2 	bl	801602a <_Znwj>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	461d      	mov	r5, r3
 800e8aa:	4628      	mov	r0, r5
 800e8ac:	f000 f8da 	bl	800ea64 <_ZN14XFInitialEventC1Ev>
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	4629      	mov	r1, r5
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	47a0      	blx	r4

    // Start dispatcher if behavior has its own dispatcher
    if (hasOwnDispatcher())
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f7ff ff4d 	bl	800e758 <_ZNK10XFBehavior16hasOwnDispatcherEv>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d008      	beq.n	800e8d6 <_ZN10XFBehavior13startBehaviorEv+0x46>
    {
        getDispatcher()->start();
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	f000 f86a 	bl	800e99e <_ZN10XFBehavior13getDispatcherEv>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	681a      	ldr	r2, [r3, #0]
 800e8ce:	320c      	adds	r2, #12
 800e8d0:	6812      	ldr	r2, [r2, #0]
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	4790      	blx	r2
    }
}
 800e8d6:	bf00      	nop
 800e8d8:	3708      	adds	r7, #8
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bdb0      	pop	{r4, r5, r7, pc}

0800e8de <_ZN10XFBehavior9pushEventEP7XFEventb>:

void XFBehavior::pushEvent(XFEvent * pEvent, bool fromISR)
{
 800e8de:	b590      	push	{r4, r7, lr}
 800e8e0:	b085      	sub	sp, #20
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	60f8      	str	r0, [r7, #12]
 800e8e6:	60b9      	str	r1, [r7, #8]
 800e8e8:	4613      	mov	r3, r2
 800e8ea:	71fb      	strb	r3, [r7, #7]
    // Set owner
    pEvent->setBehavior(this);
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	68b8      	ldr	r0, [r7, #8]
 800e8f2:	f7ff ff0f 	bl	800e714 <_ZN7XFEvent11setBehaviorEPN9interface10XFReactiveE>
    // Push to dispatchers event queue
    getDispatcher()->pushEvent(pEvent, fromISR);
 800e8f6:	68f8      	ldr	r0, [r7, #12]
 800e8f8:	f000 f851 	bl	800e99e <_ZN10XFBehavior13getDispatcherEv>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	681a      	ldr	r2, [r3, #0]
 800e900:	3214      	adds	r2, #20
 800e902:	6814      	ldr	r4, [r2, #0]
 800e904:	79fa      	ldrb	r2, [r7, #7]
 800e906:	68b9      	ldr	r1, [r7, #8]
 800e908:	4618      	mov	r0, r3
 800e90a:	47a0      	blx	r4
}
 800e90c:	bf00      	nop
 800e90e:	3714      	adds	r7, #20
 800e910:	46bd      	mov	sp, r7
 800e912:	bd90      	pop	{r4, r7, pc}

0800e914 <_ZNK10XFBehavior17deleteOnTerminateEv>:

bool XFBehavior::deleteOnTerminate() const
{
 800e914:	b480      	push	{r7}
 800e916:	b083      	sub	sp, #12
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
    return deleteOnTerminate_;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	7a5b      	ldrb	r3, [r3, #9]
}
 800e920:	4618      	mov	r0, r3
 800e922:	370c      	adds	r7, #12
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr

0800e92c <_ZN10XFBehavior20setDeleteOnTerminateEb>:

void XFBehavior::setDeleteOnTerminate(bool deleteBehaviour)
{
 800e92c:	b480      	push	{r7}
 800e92e:	b083      	sub	sp, #12
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
 800e934:	460b      	mov	r3, r1
 800e936:	70fb      	strb	r3, [r7, #3]
    deleteOnTerminate_ = deleteBehaviour;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	78fa      	ldrb	r2, [r7, #3]
 800e93c:	725a      	strb	r2, [r3, #9]
}
 800e93e:	bf00      	nop
 800e940:	370c      	adds	r7, #12
 800e942:	46bd      	mov	sp, r7
 800e944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e948:	4770      	bx	lr

0800e94a <_ZN10XFBehavior7processEPK7XFEvent>:

XFBehavior::TerminateBehavior XFBehavior::process(const XFEvent * pEvent)
{
 800e94a:	b580      	push	{r7, lr}
 800e94c:	b084      	sub	sp, #16
 800e94e:	af00      	add	r7, sp, #0
 800e950:	6078      	str	r0, [r7, #4]
 800e952:	6039      	str	r1, [r7, #0]
    XFEventStatus eventStatus;
 800e954:	f107 030c 	add.w	r3, r7, #12
 800e958:	2100      	movs	r1, #0
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7fe f8d1 	bl	800cb02 <_ZN13XFEventStatusC1ENS_12eEventStatusE>

    setCurrentEvent(pEvent);
 800e960:	6839      	ldr	r1, [r7, #0]
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f000 f827 	bl	800e9b6 <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>

    eventStatus = processEvent();
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	331c      	adds	r3, #28
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	4798      	blx	r3
 800e974:	4603      	mov	r3, r0
 800e976:	733b      	strb	r3, [r7, #12]

    setCurrentEvent(nullptr);
 800e978:	2100      	movs	r1, #0
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f000 f81b 	bl	800e9b6 <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>

    return (eventStatus == XFEventStatus::Terminate);
 800e980:	2308      	movs	r3, #8
 800e982:	73fb      	strb	r3, [r7, #15]
 800e984:	f107 020f 	add.w	r2, r7, #15
 800e988:	f107 030c 	add.w	r3, r7, #12
 800e98c:	4611      	mov	r1, r2
 800e98e:	4618      	mov	r0, r3
 800e990:	f7ff fece 	bl	800e730 <_ZNK13XFEventStatuseqERKNS_12eEventStatusE>
 800e994:	4603      	mov	r3, r0
}
 800e996:	4618      	mov	r0, r3
 800e998:	3710      	adds	r7, #16
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}

0800e99e <_ZN10XFBehavior13getDispatcherEv>:

interface::XFDispatcher * XFBehavior::getDispatcher()
{
 800e99e:	b480      	push	{r7}
 800e9a0:	b083      	sub	sp, #12
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	6078      	str	r0, [r7, #4]
    return pDispatcher_;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	685b      	ldr	r3, [r3, #4]
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	370c      	adds	r7, #12
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b4:	4770      	bx	lr

0800e9b6 <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>:

void XFBehavior::setCurrentEvent(const XFEvent * pEvent)
{
 800e9b6:	b480      	push	{r7}
 800e9b8:	b083      	sub	sp, #12
 800e9ba:	af00      	add	r7, sp, #0
 800e9bc:	6078      	str	r0, [r7, #4]
 800e9be:	6039      	str	r1, [r7, #0]
    pCurrentEvent_ = pEvent;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	683a      	ldr	r2, [r7, #0]
 800e9c4:	60da      	str	r2, [r3, #12]
}
 800e9c6:	bf00      	nop
 800e9c8:	370c      	adds	r7, #12
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr

0800e9d2 <_ZNK10XFBehavior15getCurrentEventEv>:

const XFEvent * XFBehavior::getCurrentEvent() const
{
 800e9d2:	b480      	push	{r7}
 800e9d4:	b083      	sub	sp, #12
 800e9d6:	af00      	add	r7, sp, #0
 800e9d8:	6078      	str	r0, [r7, #4]
    return pCurrentEvent_;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	68db      	ldr	r3, [r3, #12]
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	370c      	adds	r7, #12
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e8:	4770      	bx	lr
	...

0800e9ec <_ZN10XFBehavior17getCurrentTimeoutEv>:

const XFTimeout * XFBehavior::getCurrentTimeout()
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b082      	sub	sp, #8
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
    assert(getCurrentEvent()->getEventType() == XFEvent::Timeout);
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f7ff ffec 	bl	800e9d2 <_ZNK10XFBehavior15getCurrentEventEv>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f7fe f867 	bl	800cad0 <_ZNK7XFEvent12getEventTypeEv>
 800ea02:	4603      	mov	r3, r0
 800ea04:	2b04      	cmp	r3, #4
 800ea06:	d005      	beq.n	800ea14 <_ZN10XFBehavior17getCurrentTimeoutEv+0x28>
 800ea08:	4b06      	ldr	r3, [pc, #24]	; (800ea24 <_ZN10XFBehavior17getCurrentTimeoutEv+0x38>)
 800ea0a:	4a07      	ldr	r2, [pc, #28]	; (800ea28 <_ZN10XFBehavior17getCurrentTimeoutEv+0x3c>)
 800ea0c:	2165      	movs	r1, #101	; 0x65
 800ea0e:	4807      	ldr	r0, [pc, #28]	; (800ea2c <_ZN10XFBehavior17getCurrentTimeoutEv+0x40>)
 800ea10:	f007 fd2c 	bl	801646c <__assert_func>

    return static_cast<const XFTimeout *>(getCurrentEvent());
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f7ff ffdc 	bl	800e9d2 <_ZNK10XFBehavior15getCurrentEventEv>
 800ea1a:	4603      	mov	r3, r0
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3708      	adds	r7, #8
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}
 800ea24:	080184e4 	.word	0x080184e4
 800ea28:	0801851c 	.word	0x0801851c
 800ea2c:	08018550 	.word	0x08018550

0800ea30 <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>:
#include "xf/customevent.h"

XFCustomEvent::XFCustomEvent(int id, interface::XFReactive * pBehavior)
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b084      	sub	sp, #16
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	60f8      	str	r0, [r7, #12]
 800ea38:	60b9      	str	r1, [r7, #8]
 800ea3a:	607a      	str	r2, [r7, #4]
    : XFEvent(XFEvent::Event, id, pBehavior),
      bDeleteAfterConsume_(true)
 800ea3c:	68f8      	ldr	r0, [r7, #12]
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	68ba      	ldr	r2, [r7, #8]
 800ea42:	2103      	movs	r1, #3
 800ea44:	f7fe fca6 	bl	800d394 <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>
 800ea48:	4a05      	ldr	r2, [pc, #20]	; (800ea60 <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE+0x30>)
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	601a      	str	r2, [r3, #0]
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2201      	movs	r2, #1
 800ea52:	741a      	strb	r2, [r3, #16]
{

}
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	4618      	mov	r0, r3
 800ea58:	3710      	adds	r7, #16
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	bf00      	nop
 800ea60:	08018bb4 	.word	0x08018bb4

0800ea64 <_ZN14XFInitialEventC1Ev>:
#include "xf/initialevent.h"

XFInitialEvent::XFInitialEvent()
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
    : XFEvent(XFEvent::Initial, 0, nullptr)
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	2300      	movs	r3, #0
 800ea70:	2200      	movs	r2, #0
 800ea72:	2101      	movs	r1, #1
 800ea74:	f7fe fc8e 	bl	800d394 <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>
 800ea78:	4a03      	ldr	r2, [pc, #12]	; (800ea88 <_ZN14XFInitialEventC1Ev+0x24>)
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	601a      	str	r2, [r3, #0]
{
}
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	4618      	mov	r0, r3
 800ea82:	3708      	adds	r7, #8
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}
 800ea88:	08018ca4 	.word	0x08018ca4

0800ea8c <_ZNK14XFInitialEvent18deleteAfterConsumeEv>:

bool XFInitialEvent::deleteAfterConsume() const
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	b083      	sub	sp, #12
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
    return true;
 800ea94:	2301      	movs	r3, #1
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	370c      	adds	r7, #12
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr
	...

0800eaa4 <_ZN14XFInitialEventD1Ev>:
 * @brief Initial event to start a behavior.
 *
 * Represents for example the first transition executed
 * in a state machine.
 */
class XFInitialEvent : public XFEvent
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b082      	sub	sp, #8
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	4a05      	ldr	r2, [pc, #20]	; (800eac4 <_ZN14XFInitialEventD1Ev+0x20>)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	601a      	str	r2, [r3, #0]
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	4618      	mov	r0, r3
 800eab6:	f7fe fc8b 	bl	800d3d0 <_ZN7XFEventD1Ev>
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	4618      	mov	r0, r3
 800eabe:	3708      	adds	r7, #8
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}
 800eac4:	08018ca4 	.word	0x08018ca4

0800eac8 <_ZN14XFInitialEventD0Ev>:
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	f7ff ffe7 	bl	800eaa4 <_ZN14XFInitialEventD1Ev>
 800ead6:	2110      	movs	r1, #16
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f007 fa95 	bl	8016008 <_ZdlPvj>
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	4618      	mov	r0, r3
 800eae2:	3708      	adds	r7, #8
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}

0800eae8 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>:
#include "xf/nulltransition.h"

XFNullTransition::XFNullTransition(interface::XFReactive * pBehavior)
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b082      	sub	sp, #8
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
 800eaf0:	6039      	str	r1, [r7, #0]
 : XFEvent(XFEvent::NullTransition, 0, pBehavior)
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	2102      	movs	r1, #2
 800eafa:	f7fe fc4b 	bl	800d394 <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>
 800eafe:	4a04      	ldr	r2, [pc, #16]	; (800eb10 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE+0x28>)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	601a      	str	r2, [r3, #0]
{
}
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	4618      	mov	r0, r3
 800eb08:	3708      	adds	r7, #8
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	08018cb8 	.word	0x08018cb8

0800eb14 <_ZNK16XFNullTransition18deleteAfterConsumeEv>:

bool XFNullTransition::deleteAfterConsume() const
{
 800eb14:	b480      	push	{r7}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
    return true;
 800eb1c:	2301      	movs	r3, #1
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	370c      	adds	r7, #12
 800eb22:	46bd      	mov	sp, r7
 800eb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb28:	4770      	bx	lr
	...

0800eb2c <_ZN16XFNullTransitionD1Ev>:
 * Represents a transition in a state machine having no trigger.
 *
 * In case one wants to directly transition from one state to
 * an other (without a trigger) a null transition must be pushed.
 */
class XFNullTransition : public XFEvent
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b082      	sub	sp, #8
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	4a05      	ldr	r2, [pc, #20]	; (800eb4c <_ZN16XFNullTransitionD1Ev+0x20>)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	601a      	str	r2, [r3, #0]
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f7fe fc47 	bl	800d3d0 <_ZN7XFEventD1Ev>
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	4618      	mov	r0, r3
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	08018cb8 	.word	0x08018cb8

0800eb50 <_ZN16XFNullTransitionD0Ev>:
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b082      	sub	sp, #8
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f7ff ffe7 	bl	800eb2c <_ZN16XFNullTransitionD1Ev>
 800eb5e:	2110      	movs	r1, #16
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f007 fa51 	bl	8016008 <_ZdlPvj>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3708      	adds	r7, #8
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}

0800eb70 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>:
#include "xf/timeout.h"

XFTimeout::XFTimeout(int id, int interval, interface::XFReactive * pBehavior)
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b084      	sub	sp, #16
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	60f8      	str	r0, [r7, #12]
 800eb78:	60b9      	str	r1, [r7, #8]
 800eb7a:	607a      	str	r2, [r7, #4]
 800eb7c:	603b      	str	r3, [r7, #0]
 : XFEvent(XFEvent::Timeout, id, pBehavior),
   interval_(interval),
   relTicks_(interval)
 800eb7e:	68f8      	ldr	r0, [r7, #12]
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	68ba      	ldr	r2, [r7, #8]
 800eb84:	2104      	movs	r1, #4
 800eb86:	f7fe fc05 	bl	800d394 <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>
 800eb8a:	4a07      	ldr	r2, [pc, #28]	; (800eba8 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE+0x38>)
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	601a      	str	r2, [r3, #0]
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	687a      	ldr	r2, [r7, #4]
 800eb94:	611a      	str	r2, [r3, #16]
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	687a      	ldr	r2, [r7, #4]
 800eb9a:	615a      	str	r2, [r3, #20]
{
}
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3710      	adds	r7, #16
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop
 800eba8:	08018ccc 	.word	0x08018ccc

0800ebac <_ZNK9XFTimeouteqERKS_>:

bool XFTimeout::operator ==(const XFTimeout & timeout) const
{
 800ebac:	b590      	push	{r4, r7, lr}
 800ebae:	b083      	sub	sp, #12
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	6039      	str	r1, [r7, #0]
    // Check behavior and timeout id attributes, if there are equal
    return (pBehavior_ == timeout.pBehavior_ && getId() == timeout.getId()) ? true : false;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	68da      	ldr	r2, [r3, #12]
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	68db      	ldr	r3, [r3, #12]
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d10d      	bne.n	800ebde <_ZNK9XFTimeouteqERKS_+0x32>
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f7fd ff90 	bl	800caea <_ZNK7XFEvent5getIdEv>
 800ebca:	4604      	mov	r4, r0
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f7fd ff8b 	bl	800caea <_ZNK7XFEvent5getIdEv>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	429c      	cmp	r4, r3
 800ebd8:	d101      	bne.n	800ebde <_ZNK9XFTimeouteqERKS_+0x32>
 800ebda:	2301      	movs	r3, #1
 800ebdc:	e000      	b.n	800ebe0 <_ZNK9XFTimeouteqERKS_+0x34>
 800ebde:	2300      	movs	r3, #0
}
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	370c      	adds	r7, #12
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd90      	pop	{r4, r7, pc}

0800ebe8 <_ZNK9XFTimeout18deleteAfterConsumeEv>:

bool XFTimeout::deleteAfterConsume() const
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b083      	sub	sp, #12
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
    return true;
 800ebf0:	2301      	movs	r3, #1
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	370c      	adds	r7, #12
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfc:	4770      	bx	lr
	...

0800ec00 <_ZN9XFTimeoutD1Ev>:
 * the `getEventType()` method.
 *
 * XFTimeout is inheriting from XFEvent, so every timeout is
 * also an event.
 */
class XFTimeout : public XFEvent
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
 800ec08:	4a05      	ldr	r2, [pc, #20]	; (800ec20 <_ZN9XFTimeoutD1Ev+0x20>)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	601a      	str	r2, [r3, #0]
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	4618      	mov	r0, r3
 800ec12:	f7fe fbdd 	bl	800d3d0 <_ZN7XFEventD1Ev>
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	4618      	mov	r0, r3
 800ec1a:	3708      	adds	r7, #8
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}
 800ec20:	08018ccc 	.word	0x08018ccc

0800ec24 <_ZN9XFTimeoutD0Ev>:
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f7ff ffe7 	bl	800ec00 <_ZN9XFTimeoutD1Ev>
 800ec32:	2118      	movs	r1, #24
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f007 f9e7 	bl	8016008 <_ZdlPvj>
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	3708      	adds	r7, #8
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}

0800ec44 <_ZNK7XFEvent11getBehaviorEv>:
    inline interface::XFReactive * getBehavior() const { return pBehavior_; }
 800ec44:	b480      	push	{r7}
 800ec46:	b083      	sub	sp, #12
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	68db      	ldr	r3, [r3, #12]
 800ec50:	4618      	mov	r0, r3
 800ec52:	370c      	adds	r7, #12
 800ec54:	46bd      	mov	sp, r7
 800ec56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5a:	4770      	bx	lr

0800ec5c <_ZNK9interface12XFDispatcher9getThreadEv>:
     * @brief Returns pointer to thread executing the behavior.
     *
     * Within an IDF no threads are present and this method returns
     * always null.
     */
    virtual interface::XFThread * getThread() const { return nullptr; }
 800ec5c:	b480      	push	{r7}
 800ec5e:	b083      	sub	sp, #12
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
 800ec64:	2300      	movs	r3, #0
 800ec66:	4618      	mov	r0, r3
 800ec68:	370c      	adds	r7, #12
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec70:	4770      	bx	lr

0800ec72 <_ZNK19XFDispatcherDefault8isActiveEv>:
{
public:
	XFDispatcherDefault();
	virtual  ~XFDispatcherDefault();

	virtual bool isActive() const { return false; }		///< Default dispatcher does not have a composite thread.
 800ec72:	b480      	push	{r7}
 800ec74:	b083      	sub	sp, #12
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	6078      	str	r0, [r7, #4]
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	370c      	adds	r7, #12
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr

0800ec88 <_ZN9interface12XFDispatcherC1Ev>:
    XFDispatcher() = default;
 800ec88:	b480      	push	{r7}
 800ec8a:	b083      	sub	sp, #12
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	4a04      	ldr	r2, [pc, #16]	; (800eca4 <_ZN9interface12XFDispatcherC1Ev+0x1c>)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	601a      	str	r2, [r3, #0]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	4618      	mov	r0, r3
 800ec9a:	370c      	adds	r7, #12
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca2:	4770      	bx	lr
 800eca4:	08018d18 	.word	0x08018d18

0800eca8 <_ZN9interface12XFDispatcherD1Ev>:
    virtual ~XFDispatcher() = default;
 800eca8:	b480      	push	{r7}
 800ecaa:	b083      	sub	sp, #12
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
 800ecb0:	4a04      	ldr	r2, [pc, #16]	; (800ecc4 <_ZN9interface12XFDispatcherD1Ev+0x1c>)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	601a      	str	r2, [r3, #0]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	4618      	mov	r0, r3
 800ecba:	370c      	adds	r7, #12
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr
 800ecc4:	08018d18 	.word	0x08018d18

0800ecc8 <_ZN9interface12XFDispatcherD0Ev>:
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f7ff ffe9 	bl	800eca8 <_ZN9interface12XFDispatcherD1Ev>
 800ecd6:	2104      	movs	r1, #4
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	f007 f995 	bl	8016008 <_ZdlPvj>
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	4618      	mov	r0, r3
 800ece2:	3708      	adds	r7, #8
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}

0800ece8 <_ZN19XFDispatcherDefaultC1Ev>:
using interface::XFTimeoutManager;
using interface::XFResourceFactory;
using interface::XFReactive;
using interface::XFMutex;

XFDispatcherDefault::XFDispatcherDefault() :
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b082      	sub	sp, #8
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
	_bExecuting(false),
	_pMutex(nullptr)
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f7ff ffc8 	bl	800ec88 <_ZN9interface12XFDispatcherC1Ev>
 800ecf8:	4a10      	ldr	r2, [pc, #64]	; (800ed3c <_ZN19XFDispatcherDefaultC1Ev+0x54>)
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	601a      	str	r2, [r3, #0]
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2200      	movs	r2, #0
 800ed02:	711a      	strb	r2, [r3, #4]
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	3308      	adds	r3, #8
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f001 fabd 	bl	8010288 <_ZN19XFEventQueueDefaultC1Ev>
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2200      	movs	r2, #0
 800ed12:	639a      	str	r2, [r3, #56]	; 0x38
{
	_pMutex = XFMutex::create();
 800ed14:	f002 fa5c 	bl	80111d0 <_ZN9interface7XFMutex6createEv>
 800ed18:	4602      	mov	r2, r0
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	639a      	str	r2, [r3, #56]	; 0x38
	assert(_pMutex);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d105      	bne.n	800ed32 <_ZN19XFDispatcherDefaultC1Ev+0x4a>
 800ed26:	4b06      	ldr	r3, [pc, #24]	; (800ed40 <_ZN19XFDispatcherDefaultC1Ev+0x58>)
 800ed28:	4a06      	ldr	r2, [pc, #24]	; (800ed44 <_ZN19XFDispatcherDefaultC1Ev+0x5c>)
 800ed2a:	2118      	movs	r1, #24
 800ed2c:	4806      	ldr	r0, [pc, #24]	; (800ed48 <_ZN19XFDispatcherDefaultC1Ev+0x60>)
 800ed2e:	f007 fb9d 	bl	801646c <__assert_func>
}
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	4618      	mov	r0, r3
 800ed36:	3708      	adds	r7, #8
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	08018ce0 	.word	0x08018ce0
 800ed40:	08018590 	.word	0x08018590
 800ed44:	08018598 	.word	0x08018598
 800ed48:	080185c4 	.word	0x080185c4

0800ed4c <_ZN19XFDispatcherDefaultD1Ev>:

XFDispatcherDefault::~XFDispatcherDefault()
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b082      	sub	sp, #8
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	4a08      	ldr	r2, [pc, #32]	; (800ed78 <_ZN19XFDispatcherDefaultD1Ev+0x2c>)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	601a      	str	r2, [r3, #0]
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	3308      	adds	r3, #8
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f001 faae 	bl	80102c0 <_ZN19XFEventQueueDefaultD1Ev>
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	4618      	mov	r0, r3
 800ed68:	f7ff ff9e 	bl	800eca8 <_ZN9interface12XFDispatcherD1Ev>
{

}
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3708      	adds	r7, #8
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	08018ce0 	.word	0x08018ce0

0800ed7c <_ZN19XFDispatcherDefaultD0Ev>:
XFDispatcherDefault::~XFDispatcherDefault()
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
}
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f7ff ffe1 	bl	800ed4c <_ZN19XFDispatcherDefaultD1Ev>
 800ed8a:	213c      	movs	r1, #60	; 0x3c
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f007 f93b 	bl	8016008 <_ZdlPvj>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	4618      	mov	r0, r3
 800ed96:	3708      	adds	r7, #8
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <_ZN19XFDispatcherDefault5startEv>:

void XFDispatcherDefault::start()
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b082      	sub	sp, #8
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
        assert(_pMutex);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d105      	bne.n	800edb8 <_ZN19XFDispatcherDefault5startEv+0x1c>
 800edac:	4b06      	ldr	r3, [pc, #24]	; (800edc8 <_ZN19XFDispatcherDefault5startEv+0x2c>)
 800edae:	4a07      	ldr	r2, [pc, #28]	; (800edcc <_ZN19XFDispatcherDefault5startEv+0x30>)
 800edb0:	2122      	movs	r1, #34	; 0x22
 800edb2:	4807      	ldr	r0, [pc, #28]	; (800edd0 <_ZN19XFDispatcherDefault5startEv+0x34>)
 800edb4:	f007 fb5a 	bl	801646c <__assert_func>
	_bExecuting = true;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2201      	movs	r2, #1
 800edbc:	711a      	strb	r2, [r3, #4]
}
 800edbe:	bf00      	nop
 800edc0:	3708      	adds	r7, #8
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}
 800edc6:	bf00      	nop
 800edc8:	08018590 	.word	0x08018590
 800edcc:	08018618 	.word	0x08018618
 800edd0:	080185c4 	.word	0x080185c4

0800edd4 <_ZN19XFDispatcherDefault4stopEv>:

void XFDispatcherDefault::stop()
{
 800edd4:	b480      	push	{r7}
 800edd6:	b083      	sub	sp, #12
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
	_bExecuting = false;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2200      	movs	r2, #0
 800ede0:	711a      	strb	r2, [r3, #4]
}
 800ede2:	bf00      	nop
 800ede4:	370c      	adds	r7, #12
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr

0800edee <_ZN19XFDispatcherDefault9pushEventEP7XFEventb>:

void XFDispatcherDefault::pushEvent(XFEvent * pEvent, bool fromISR)
{
 800edee:	b580      	push	{r7, lr}
 800edf0:	b084      	sub	sp, #16
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	60f8      	str	r0, [r7, #12]
 800edf6:	60b9      	str	r1, [r7, #8]
 800edf8:	4613      	mov	r3, r2
 800edfa:	71fb      	strb	r3, [r7, #7]
	(void)fromISR;
	_pMutex->lock();
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	3308      	adds	r3, #8
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	4610      	mov	r0, r2
 800ee0c:	4798      	blx	r3
	{
#ifdef XF_TRACE_EVENT_PUSH_POP
	    Trace::out("Push event: 0x%x", pEvent);
#endif // XF_TRACE_EVENT_PUSH_POP
		_events.push(pEvent);
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	3308      	adds	r3, #8
 800ee12:	2200      	movs	r2, #0
 800ee14:	68b9      	ldr	r1, [r7, #8]
 800ee16:	4618      	mov	r0, r3
 800ee18:	f001 fa8c 	bl	8010334 <_ZN19XFEventQueueDefault4pushEPK7XFEventb>
	}
	_pMutex->unlock();
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	330c      	adds	r3, #12
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	4610      	mov	r0, r2
 800ee2c:	4798      	blx	r3
}
 800ee2e:	bf00      	nop
 800ee30:	3710      	adds	r7, #16
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}

0800ee36 <_ZN19XFDispatcherDefault15scheduleTimeoutEiiPN9interface10XFReactiveE>:

void XFDispatcherDefault::scheduleTimeout(int timeoutId, int interval, interface::XFReactive * pReactive)
{
 800ee36:	b590      	push	{r4, r7, lr}
 800ee38:	b085      	sub	sp, #20
 800ee3a:	af00      	add	r7, sp, #0
 800ee3c:	60f8      	str	r0, [r7, #12]
 800ee3e:	60b9      	str	r1, [r7, #8]
 800ee40:	607a      	str	r2, [r7, #4]
 800ee42:	603b      	str	r3, [r7, #0]
	// Forward timeout to the timeout manager
	XFTimeoutManager::getInstance()->scheduleTimeout(timeoutId, interval, pReactive);
 800ee44:	f000 fa6a 	bl	800f31c <_ZN9interface16XFTimeoutManager11getInstanceEv>
 800ee48:	6803      	ldr	r3, [r0, #0]
 800ee4a:	3314      	adds	r3, #20
 800ee4c:	681c      	ldr	r4, [r3, #0]
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	687a      	ldr	r2, [r7, #4]
 800ee52:	68b9      	ldr	r1, [r7, #8]
 800ee54:	47a0      	blx	r4
}
 800ee56:	bf00      	nop
 800ee58:	3714      	adds	r7, #20
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd90      	pop	{r4, r7, pc}

0800ee5e <_ZN19XFDispatcherDefault17unscheduleTimeoutEiPN9interface10XFReactiveE>:

void XFDispatcherDefault::unscheduleTimeout(int timeoutId, interface::XFReactive * pReactive)
{
 800ee5e:	b590      	push	{r4, r7, lr}
 800ee60:	b085      	sub	sp, #20
 800ee62:	af00      	add	r7, sp, #0
 800ee64:	60f8      	str	r0, [r7, #12]
 800ee66:	60b9      	str	r1, [r7, #8]
 800ee68:	607a      	str	r2, [r7, #4]
	// Forward timeout to the timeout manager
	XFTimeoutManager::getInstance()->unscheduleTimeout(timeoutId, pReactive);
 800ee6a:	f000 fa57 	bl	800f31c <_ZN9interface16XFTimeoutManager11getInstanceEv>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	681a      	ldr	r2, [r3, #0]
 800ee72:	3218      	adds	r2, #24
 800ee74:	6814      	ldr	r4, [r2, #0]
 800ee76:	687a      	ldr	r2, [r7, #4]
 800ee78:	68b9      	ldr	r1, [r7, #8]
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	47a0      	blx	r4
}
 800ee7e:	bf00      	nop
 800ee80:	3714      	adds	r7, #20
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd90      	pop	{r4, r7, pc}

0800ee86 <_ZN19XFDispatcherDefault7executeEPKv>:

int XFDispatcherDefault::execute(const void * param /* = nullptr */)
{
 800ee86:	b580      	push	{r7, lr}
 800ee88:	b082      	sub	sp, #8
 800ee8a:	af00      	add	r7, sp, #0
 800ee8c:	6078      	str	r0, [r7, #4]
 800ee8e:	6039      	str	r1, [r7, #0]
	(void)param;	// Parameter not used at the method

	while(_bExecuting)
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	791b      	ldrb	r3, [r3, #4]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d019      	beq.n	800eecc <_ZN19XFDispatcherDefault7executeEPKv+0x46>
	{
		while (_events.empty() && _bExecuting)
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	3308      	adds	r3, #8
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f001 fa3b 	bl	8010318 <_ZNK19XFEventQueueDefault5emptyEv>
 800eea2:	4603      	mov	r3, r0
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d005      	beq.n	800eeb4 <_ZN19XFDispatcherDefault7executeEPKv+0x2e>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	791b      	ldrb	r3, [r3, #4]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d001      	beq.n	800eeb4 <_ZN19XFDispatcherDefault7executeEPKv+0x2e>
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	e000      	b.n	800eeb6 <_ZN19XFDispatcherDefault7executeEPKv+0x30>
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d001      	beq.n	800eebe <_ZN19XFDispatcherDefault7executeEPKv+0x38>
		{
			continue;	// Wait until something to do
 800eeba:	bf00      	nop
		while (_events.empty() && _bExecuting)
 800eebc:	e7ec      	b.n	800ee98 <_ZN19XFDispatcherDefault7executeEPKv+0x12>
		}

		executeOnce();  // Dispatch next event
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	3328      	adds	r3, #40	; 0x28
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	4798      	blx	r3
	while(_bExecuting)
 800eeca:	e7e1      	b.n	800ee90 <_ZN19XFDispatcherDefault7executeEPKv+0xa>
	}

	return 0;
 800eecc:	2300      	movs	r3, #0
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3708      	adds	r7, #8
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}

0800eed6 <_ZN19XFDispatcherDefault11executeOnceEv>:

int XFDispatcherDefault::executeOnce()
{
 800eed6:	b580      	push	{r7, lr}
 800eed8:	b084      	sub	sp, #16
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	6078      	str	r0, [r7, #4]
    if (!_events.empty() and _bExecuting)
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	3308      	adds	r3, #8
 800eee2:	4618      	mov	r0, r3
 800eee4:	f001 fa18 	bl	8010318 <_ZNK19XFEventQueueDefault5emptyEv>
 800eee8:	4603      	mov	r3, r0
 800eeea:	f083 0301 	eor.w	r3, r3, #1
 800eeee:	b2db      	uxtb	r3, r3
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d005      	beq.n	800ef00 <_ZN19XFDispatcherDefault11executeOnceEv+0x2a>
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	791b      	ldrb	r3, [r3, #4]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d001      	beq.n	800ef00 <_ZN19XFDispatcherDefault11executeOnceEv+0x2a>
 800eefc:	2301      	movs	r3, #1
 800eefe:	e000      	b.n	800ef02 <_ZN19XFDispatcherDefault11executeOnceEv+0x2c>
 800ef00:	2300      	movs	r3, #0
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d046      	beq.n	800ef94 <_ZN19XFDispatcherDefault11executeOnceEv+0xbe>
    {
        const XFEvent * pEvent;

        _pMutex->lock();
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	3308      	adds	r3, #8
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	4610      	mov	r0, r2
 800ef16:	4798      	blx	r3
        {
        	// Deque next event from queue
        	pEvent = _events.front(); _events.pop();
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	3308      	adds	r3, #8
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f001 fa27 	bl	8010370 <_ZN19XFEventQueueDefault5frontEv>
 800ef22:	60f8      	str	r0, [r7, #12]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	3308      	adds	r3, #8
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f001 fa3c 	bl	80103a6 <_ZN19XFEventQueueDefault3popEv>
#ifdef XF_TRACE_EVENT_PUSH_POP
        	Trace::out("Pop event:  0x%x", pEvent);
#endif // XF_TRACE_EVENT_PUSH_POP
    	}
    	_pMutex->unlock();
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	330c      	adds	r3, #12
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	4610      	mov	r0, r2
 800ef3e:	4798      	blx	r3

        if (pEvent)
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d026      	beq.n	800ef94 <_ZN19XFDispatcherDefault11executeOnceEv+0xbe>
        {
            // Forward the event to the behavioral class
            dispatchEvent(pEvent);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	332c      	adds	r3, #44	; 0x2c
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	68f9      	ldr	r1, [r7, #12]
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	4798      	blx	r3

            if (pEvent->getEventType() == XFEvent::Terminate)
 800ef54:	68f8      	ldr	r0, [r7, #12]
 800ef56:	f7fd fdbb 	bl	800cad0 <_ZNK7XFEvent12getEventTypeEv>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef60:	bf0c      	ite	eq
 800ef62:	2301      	moveq	r3, #1
 800ef64:	2300      	movne	r3, #0
 800ef66:	b2db      	uxtb	r3, r3
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d002      	beq.n	800ef72 <_ZN19XFDispatcherDefault11executeOnceEv+0x9c>
            {
                // Exit the event loop
                _bExecuting = false;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	711a      	strb	r2, [r3, #4]
            }

            if (pEvent->deleteAfterConsume())
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	3308      	adds	r3, #8
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	68f8      	ldr	r0, [r7, #12]
 800ef7c:	4798      	blx	r3
 800ef7e:	4603      	mov	r3, r0
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d007      	beq.n	800ef94 <_ZN19XFDispatcherDefault11executeOnceEv+0xbe>
            {
                // Remove the consumed event
                delete pEvent;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d004      	beq.n	800ef94 <_ZN19XFDispatcherDefault11executeOnceEv+0xbe>
 800ef8a:	681a      	ldr	r2, [r3, #0]
 800ef8c:	3204      	adds	r2, #4
 800ef8e:	6812      	ldr	r2, [r2, #0]
 800ef90:	4618      	mov	r0, r3
 800ef92:	4790      	blx	r2
            }
        }
    }

    return _bExecuting;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	791b      	ldrb	r3, [r3, #4]
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3710      	adds	r7, #16
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}

0800efa0 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent>:

void XFDispatcherDefault::dispatchEvent(const XFEvent * pEvent) const
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b084      	sub	sp, #16
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
    XFReactive::TerminateBehavior terminateBehavior;

	terminateBehavior = pEvent->getBehavior()->process(pEvent);
 800efaa:	6838      	ldr	r0, [r7, #0]
 800efac:	f7ff fe4a 	bl	800ec44 <_ZNK7XFEvent11getBehaviorEv>
 800efb0:	4603      	mov	r3, r0
 800efb2:	681a      	ldr	r2, [r3, #0]
 800efb4:	3218      	adds	r2, #24
 800efb6:	6812      	ldr	r2, [r2, #0]
 800efb8:	6839      	ldr	r1, [r7, #0]
 800efba:	4618      	mov	r0, r3
 800efbc:	4790      	blx	r2
 800efbe:	4603      	mov	r3, r0
 800efc0:	73fb      	strb	r3, [r7, #15]

	// Check if behavior should be deleted
	if (terminateBehavior and pEvent->getBehavior()->deleteOnTerminate())
 800efc2:	7bfb      	ldrb	r3, [r7, #15]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d00d      	beq.n	800efe4 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x44>
 800efc8:	6838      	ldr	r0, [r7, #0]
 800efca:	f7ff fe3b 	bl	800ec44 <_ZNK7XFEvent11getBehaviorEv>
 800efce:	4603      	mov	r3, r0
 800efd0:	681a      	ldr	r2, [r3, #0]
 800efd2:	3210      	adds	r2, #16
 800efd4:	6812      	ldr	r2, [r2, #0]
 800efd6:	4618      	mov	r0, r3
 800efd8:	4790      	blx	r2
 800efda:	4603      	mov	r3, r0
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d001      	beq.n	800efe4 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x44>
 800efe0:	2301      	movs	r3, #1
 800efe2:	e000      	b.n	800efe6 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x46>
 800efe4:	2300      	movs	r3, #0
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d00a      	beq.n	800f000 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x60>
	{
		delete pEvent->getBehavior();
 800efea:	6838      	ldr	r0, [r7, #0]
 800efec:	f7ff fe2a 	bl	800ec44 <_ZNK7XFEvent11getBehaviorEv>
 800eff0:	4603      	mov	r3, r0
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d004      	beq.n	800f000 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x60>
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	3204      	adds	r2, #4
 800effa:	6812      	ldr	r2, [r2, #0]
 800effc:	4618      	mov	r0, r3
 800effe:	4790      	blx	r2
	}
}
 800f000:	bf00      	nop
 800f002:	3710      	adds	r7, #16
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <_ZN9interface17XFResourceFactory11getInstanceEv>:
#include "resourcefactory-default.h"
#include "mutex-default.h"

//static
interface::XFResourceFactory * interface::XFResourceFactory::getInstance()
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	af00      	add	r7, sp, #0
	return XFResourceFactoryDefault::getInstance();
 800f00c:	f000 f82c 	bl	800f068 <_ZN24XFResourceFactoryDefault11getInstanceEv>
 800f010:	4603      	mov	r3, r0
}
 800f012:	4618      	mov	r0, r3
 800f014:	bd80      	pop	{r7, pc}
	...

0800f018 <_ZN9interface17XFResourceFactoryD1Ev>:
     * @brief Returns a new mutex.
     * @return Pointer to new mutex.
     */
    virtual interface::XFMutex * createMutex() = 0;

    virtual ~XFResourceFactory() = default;
 800f018:	b480      	push	{r7}
 800f01a:	b083      	sub	sp, #12
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	4a04      	ldr	r2, [pc, #16]	; (800f034 <_ZN9interface17XFResourceFactoryD1Ev+0x1c>)
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	601a      	str	r2, [r3, #0]
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	4618      	mov	r0, r3
 800f02a:	370c      	adds	r7, #12
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr
 800f034:	08018d70 	.word	0x08018d70

0800f038 <_ZN9interface17XFResourceFactoryD0Ev>:
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f7ff ffe9 	bl	800f018 <_ZN9interface17XFResourceFactoryD1Ev>
 800f046:	2104      	movs	r1, #4
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f006 ffdd 	bl	8016008 <_ZdlPvj>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	4618      	mov	r0, r3
 800f052:	3708      	adds	r7, #8
 800f054:	46bd      	mov	sp, r7
 800f056:	bd80      	pop	{r7, pc}

0800f058 <__tcf_0>:

//static
interface::XFResourceFactory * XFResourceFactoryDefault::getInstance()
{
    static XFResourceFactoryDefault theResourceFactory;
 800f058:	b580      	push	{r7, lr}
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	4801      	ldr	r0, [pc, #4]	; (800f064 <__tcf_0+0xc>)
 800f05e:	f000 f8bf 	bl	800f1e0 <_ZN24XFResourceFactoryDefaultD1Ev>
 800f062:	bd80      	pop	{r7, pc}
 800f064:	2000003c 	.word	0x2000003c

0800f068 <_ZN24XFResourceFactoryDefault11getInstanceEv>:
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	af00      	add	r7, sp, #0
    static XFResourceFactoryDefault theResourceFactory;
 800f06c:	4b10      	ldr	r3, [pc, #64]	; (800f0b0 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x48>)
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	f3bf 8f5b 	dmb	ish
 800f074:	b2db      	uxtb	r3, r3
 800f076:	f003 0301 	and.w	r3, r3, #1
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	bf0c      	ite	eq
 800f07e:	2301      	moveq	r3, #1
 800f080:	2300      	movne	r3, #0
 800f082:	b2db      	uxtb	r3, r3
 800f084:	2b00      	cmp	r3, #0
 800f086:	d010      	beq.n	800f0aa <_ZN24XFResourceFactoryDefault11getInstanceEv+0x42>
 800f088:	4809      	ldr	r0, [pc, #36]	; (800f0b0 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x48>)
 800f08a:	f006 ffbf 	bl	801600c <__cxa_guard_acquire>
 800f08e:	4603      	mov	r3, r0
 800f090:	2b00      	cmp	r3, #0
 800f092:	bf14      	ite	ne
 800f094:	2301      	movne	r3, #1
 800f096:	2300      	moveq	r3, #0
 800f098:	b2db      	uxtb	r3, r3
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d005      	beq.n	800f0aa <_ZN24XFResourceFactoryDefault11getInstanceEv+0x42>
 800f09e:	4804      	ldr	r0, [pc, #16]	; (800f0b0 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x48>)
 800f0a0:	f006 ffc0 	bl	8016024 <__cxa_guard_release>
 800f0a4:	4803      	ldr	r0, [pc, #12]	; (800f0b4 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x4c>)
 800f0a6:	f007 f9ff 	bl	80164a8 <atexit>

	return &theResourceFactory;
 800f0aa:	4b03      	ldr	r3, [pc, #12]	; (800f0b8 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x50>)
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	bd80      	pop	{r7, pc}
 800f0b0:	200011dc 	.word	0x200011dc
 800f0b4:	0800f059 	.word	0x0800f059
 800f0b8:	2000003c 	.word	0x2000003c

0800f0bc <__tcf_1>:

interface::XFDispatcher * XFResourceFactoryDefault::getDefaultDispatcher()
{
	static XFDispatcherDefault mainDispatcher;
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	af00      	add	r7, sp, #0
 800f0c0:	4801      	ldr	r0, [pc, #4]	; (800f0c8 <__tcf_1+0xc>)
 800f0c2:	f7ff fe43 	bl	800ed4c <_ZN19XFDispatcherDefaultD1Ev>
 800f0c6:	bd80      	pop	{r7, pc}
 800f0c8:	200011e0 	.word	0x200011e0

0800f0cc <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv>:
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b082      	sub	sp, #8
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
	static XFDispatcherDefault mainDispatcher;
 800f0d4:	4b13      	ldr	r3, [pc, #76]	; (800f124 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x58>)
 800f0d6:	781b      	ldrb	r3, [r3, #0]
 800f0d8:	f3bf 8f5b 	dmb	ish
 800f0dc:	b2db      	uxtb	r3, r3
 800f0de:	f003 0301 	and.w	r3, r3, #1
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	bf0c      	ite	eq
 800f0e6:	2301      	moveq	r3, #1
 800f0e8:	2300      	movne	r3, #0
 800f0ea:	b2db      	uxtb	r3, r3
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d013      	beq.n	800f118 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x4c>
 800f0f0:	480c      	ldr	r0, [pc, #48]	; (800f124 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x58>)
 800f0f2:	f006 ff8b 	bl	801600c <__cxa_guard_acquire>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	bf14      	ite	ne
 800f0fc:	2301      	movne	r3, #1
 800f0fe:	2300      	moveq	r3, #0
 800f100:	b2db      	uxtb	r3, r3
 800f102:	2b00      	cmp	r3, #0
 800f104:	d008      	beq.n	800f118 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x4c>
 800f106:	4808      	ldr	r0, [pc, #32]	; (800f128 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x5c>)
 800f108:	f7ff fdee 	bl	800ece8 <_ZN19XFDispatcherDefaultC1Ev>
 800f10c:	4805      	ldr	r0, [pc, #20]	; (800f124 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x58>)
 800f10e:	f006 ff89 	bl	8016024 <__cxa_guard_release>
 800f112:	4806      	ldr	r0, [pc, #24]	; (800f12c <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x60>)
 800f114:	f007 f9c8 	bl	80164a8 <atexit>

	return &mainDispatcher;
 800f118:	4b03      	ldr	r3, [pc, #12]	; (800f128 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x5c>)
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	3708      	adds	r7, #8
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}
 800f122:	bf00      	nop
 800f124:	2000121c 	.word	0x2000121c
 800f128:	200011e0 	.word	0x200011e0
 800f12c:	0800f0bd 	.word	0x0800f0bd

0800f130 <_ZN24XFResourceFactoryDefault16createDispatcherEv>:

interface::XFDispatcher * XFResourceFactoryDefault::createDispatcher()
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b082      	sub	sp, #8
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
	// Default implementation cannot create new dispatcher. Return the default dispatcher
	return getDefaultDispatcher();
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	4798      	blx	r3
 800f142:	4603      	mov	r3, r0
}
 800f144:	4618      	mov	r0, r3
 800f146:	3708      	adds	r7, #8
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}

0800f14c <_ZN24XFResourceFactoryDefault12createThreadEPN9interface26XFThreadEntryPointProviderEMS1_FvPKvEPKcm>:

interface::XFThread * XFResourceFactoryDefault::createThread(interface::XFThreadEntryPointProvider * pProvider,
												  	  	     interface::XFThread::EntryMethodBody entryMethod,
														     const char * threadName,
														     const uint32_t stackSize /* = 0 */)
{
 800f14c:	b480      	push	{r7}
 800f14e:	b085      	sub	sp, #20
 800f150:	af00      	add	r7, sp, #0
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	60b9      	str	r1, [r7, #8]
 800f156:	4639      	mov	r1, r7
 800f158:	e881 000c 	stmia.w	r1, {r2, r3}
	// Default implementation cannot create threads (no underlying OS present)
	return nullptr;
 800f15c:	2300      	movs	r3, #0
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3714      	adds	r7, #20
 800f162:	46bd      	mov	sp, r7
 800f164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f168:	4770      	bx	lr
	...

0800f16c <__tcf_2>:

interface::XFMutex * XFResourceFactoryDefault::createMutex()
{
	static XFMutexDefault mutex;
 800f16c:	b580      	push	{r7, lr}
 800f16e:	af00      	add	r7, sp, #0
 800f170:	4801      	ldr	r0, [pc, #4]	; (800f178 <__tcf_2+0xc>)
 800f172:	f002 f87d 	bl	8011270 <_ZN14XFMutexDefaultD1Ev>
 800f176:	bd80      	pop	{r7, pc}
 800f178:	20001220 	.word	0x20001220

0800f17c <_ZN24XFResourceFactoryDefault11createMutexEv>:
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b082      	sub	sp, #8
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
	static XFMutexDefault mutex;
 800f184:	4b13      	ldr	r3, [pc, #76]	; (800f1d4 <_ZN24XFResourceFactoryDefault11createMutexEv+0x58>)
 800f186:	781b      	ldrb	r3, [r3, #0]
 800f188:	f3bf 8f5b 	dmb	ish
 800f18c:	b2db      	uxtb	r3, r3
 800f18e:	f003 0301 	and.w	r3, r3, #1
 800f192:	2b00      	cmp	r3, #0
 800f194:	bf0c      	ite	eq
 800f196:	2301      	moveq	r3, #1
 800f198:	2300      	movne	r3, #0
 800f19a:	b2db      	uxtb	r3, r3
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d013      	beq.n	800f1c8 <_ZN24XFResourceFactoryDefault11createMutexEv+0x4c>
 800f1a0:	480c      	ldr	r0, [pc, #48]	; (800f1d4 <_ZN24XFResourceFactoryDefault11createMutexEv+0x58>)
 800f1a2:	f006 ff33 	bl	801600c <__cxa_guard_acquire>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	bf14      	ite	ne
 800f1ac:	2301      	movne	r3, #1
 800f1ae:	2300      	moveq	r3, #0
 800f1b0:	b2db      	uxtb	r3, r3
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d008      	beq.n	800f1c8 <_ZN24XFResourceFactoryDefault11createMutexEv+0x4c>
 800f1b6:	4808      	ldr	r0, [pc, #32]	; (800f1d8 <_ZN24XFResourceFactoryDefault11createMutexEv+0x5c>)
 800f1b8:	f002 f848 	bl	801124c <_ZN14XFMutexDefaultC1Ev>
 800f1bc:	4805      	ldr	r0, [pc, #20]	; (800f1d4 <_ZN24XFResourceFactoryDefault11createMutexEv+0x58>)
 800f1be:	f006 ff31 	bl	8016024 <__cxa_guard_release>
 800f1c2:	4806      	ldr	r0, [pc, #24]	; (800f1dc <_ZN24XFResourceFactoryDefault11createMutexEv+0x60>)
 800f1c4:	f007 f970 	bl	80164a8 <atexit>

	return &mutex;
 800f1c8:	4b03      	ldr	r3, [pc, #12]	; (800f1d8 <_ZN24XFResourceFactoryDefault11createMutexEv+0x5c>)
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	3708      	adds	r7, #8
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}
 800f1d2:	bf00      	nop
 800f1d4:	20001224 	.word	0x20001224
 800f1d8:	20001220 	.word	0x20001220
 800f1dc:	0800f16d 	.word	0x0800f16d

0800f1e0 <_ZN24XFResourceFactoryDefaultD1Ev>:
 * @brief Default implementation of the XF resource factory.
 */
class XFResourceFactoryDefault : public interface::XFResourceFactory
{
public:
	virtual ~XFResourceFactoryDefault() = default;
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b082      	sub	sp, #8
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	4a05      	ldr	r2, [pc, #20]	; (800f200 <_ZN24XFResourceFactoryDefaultD1Ev+0x20>)
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	601a      	str	r2, [r3, #0]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f7ff ff11 	bl	800f018 <_ZN9interface17XFResourceFactoryD1Ev>
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3708      	adds	r7, #8
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}
 800f200:	08018d50 	.word	0x08018d50

0800f204 <_ZN24XFResourceFactoryDefaultD0Ev>:
 800f204:	b580      	push	{r7, lr}
 800f206:	b082      	sub	sp, #8
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f7ff ffe7 	bl	800f1e0 <_ZN24XFResourceFactoryDefaultD1Ev>
 800f212:	2104      	movs	r1, #4
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f006 fef7 	bl	8016008 <_ZdlPvj>
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	4618      	mov	r0, r3
 800f21e:	3708      	adds	r7, #8
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}

0800f224 <_ZNSt8__detail17_List_node_headerC1Ev>:
    {
#if _GLIBCXX_USE_CXX11_ABI
      std::size_t _M_size;
#endif

      _List_node_header() _GLIBCXX_NOEXCEPT
 800f224:	b580      	push	{r7, lr}
 800f226:	b082      	sub	sp, #8
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f000 f805 	bl	800f23c <_ZNSt8__detail17_List_node_header7_M_initEv>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	4618      	mov	r0, r3
 800f236:	3708      	adds	r7, #8
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd80      	pop	{r7, pc}

0800f23c <_ZNSt8__detail17_List_node_header7_M_initEv>:
	  }
      }
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
 800f23c:	b480      	push	{r7}
 800f23e:	b083      	sub	sp, #12
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
      {
	this->_M_next = this->_M_prev = this;
 800f244:	687a      	ldr	r2, [r7, #4]
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	605a      	str	r2, [r3, #4]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	685a      	ldr	r2, [r3, #4]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	601a      	str	r2, [r3, #0]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2200      	movs	r2, #0
 800f256:	609a      	str	r2, [r3, #8]
#endif
      }
 800f258:	bf00      	nop
 800f25a:	370c      	adds	r7, #12
 800f25c:	46bd      	mov	sp, r7
 800f25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f262:	4770      	bx	lr

0800f264 <_ZN9interface16XFTimeoutManager10initializeEl>:

    /**
     * Sets the time interval in milliseconds in which the timeout manager
     * should handle the timeouts.
     */
    virtual void initialize(int32_t tickInterval)
 800f264:	b480      	push	{r7}
 800f266:	b083      	sub	sp, #12
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	6039      	str	r1, [r7, #0]
    {
        tickInterval_ = tickInterval;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	683a      	ldr	r2, [r7, #0]
 800f272:	605a      	str	r2, [r3, #4]
    }
 800f274:	bf00      	nop
 800f276:	370c      	adds	r7, #12
 800f278:	46bd      	mov	sp, r7
 800f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27e:	4770      	bx	lr

0800f280 <_ZNK9interface16XFTimeoutManager15getTickIntervalEv>:

    /**
     * @brief Returns tick interval in milliseconds.
     */
    virtual int32_t getTickInterval() const
 800f280:	b480      	push	{r7}
 800f282:	b083      	sub	sp, #12
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
    {
        return tickInterval_;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	685b      	ldr	r3, [r3, #4]
    }
 800f28c:	4618      	mov	r0, r3
 800f28e:	370c      	adds	r7, #12
 800f290:	46bd      	mov	sp, r7
 800f292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f296:	4770      	bx	lr

0800f298 <_ZN9interface16XFTimeoutManagerC1Ev>:
     * belongs.
     */
    virtual void tick() = 0;

protected:
    XFTimeoutManager() :
 800f298:	b480      	push	{r7}
 800f29a:	b083      	sub	sp, #12
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
        tickInterval_(0)
 800f2a0:	4a06      	ldr	r2, [pc, #24]	; (800f2bc <_ZN9interface16XFTimeoutManagerC1Ev+0x24>)
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	601a      	str	r2, [r3, #0]
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	605a      	str	r2, [r3, #4]
    {}
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	370c      	adds	r7, #12
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b8:	4770      	bx	lr
 800f2ba:	bf00      	nop
 800f2bc:	08018dbc 	.word	0x08018dbc

0800f2c0 <_ZNK9XFTimeout11getRelTicksEv>:
    bool operator ==(const XFTimeout & timeout) const;

    bool deleteAfterConsume() const override;                                                       ///< Tells the dispatcher if the event must be deleted or not.

    inline void setRelTicks(int relTicks) { relTicks_ = relTicks; }                                 ///< Sets remaining ticks.
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
 800f2c0:	b480      	push	{r7}
 800f2c2:	b083      	sub	sp, #12
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	695b      	ldr	r3, [r3, #20]
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	370c      	adds	r7, #12
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr

0800f2d8 <_ZN9XFTimeout21substractFromRelTicksEi>:
    inline void substractFromRelTicks(int ticksToSubstract) { relTicks_ -= ticksToSubstract; }      ///< Substracts `ticksToSubstract` from remaining ticks.
 800f2d8:	b480      	push	{r7}
 800f2da:	b083      	sub	sp, #12
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	6039      	str	r1, [r7, #0]
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	695a      	ldr	r2, [r3, #20]
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	1ad2      	subs	r2, r2, r3
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	615a      	str	r2, [r3, #20]
 800f2ee:	bf00      	nop
 800f2f0:	370c      	adds	r7, #12
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f8:	4770      	bx	lr

0800f2fa <_ZN9XFTimeout13addToRelTicksEi>:
    inline void addToRelTicks(int ticksToAdd) { relTicks_ += ticksToAdd; }                          ///< Adds `ticksToAdd` to remaining ticks.
 800f2fa:	b480      	push	{r7}
 800f2fc:	b083      	sub	sp, #12
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	6078      	str	r0, [r7, #4]
 800f302:	6039      	str	r1, [r7, #0]
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	695a      	ldr	r2, [r3, #20]
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	441a      	add	r2, r3
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	615a      	str	r2, [r3, #20]
 800f310:	bf00      	nop
 800f312:	370c      	adds	r7, #12
 800f314:	46bd      	mov	sp, r7
 800f316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31a:	4770      	bx	lr

0800f31c <_ZN9interface16XFTimeoutManager11getInstanceEv>:
#include "timeoutmanager-default.h"

using interface::XFMutex;

interface::XFTimeoutManager * interface::XFTimeoutManager::getInstance()
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	af00      	add	r7, sp, #0
    return XFTimeoutManagerDefault::getInstance();
 800f320:	f000 f80c 	bl	800f33c <_ZN23XFTimeoutManagerDefault11getInstanceEv>
 800f324:	4603      	mov	r3, r0
}
 800f326:	4618      	mov	r0, r3
 800f328:	bd80      	pop	{r7, pc}
	...

0800f32c <__tcf_0>:

interface::XFTimeoutManager * XFTimeoutManagerDefault::getInstance()
{
    static XFTimeoutManagerDefault timeoutManager;
 800f32c:	b580      	push	{r7, lr}
 800f32e:	af00      	add	r7, sp, #0
 800f330:	4801      	ldr	r0, [pc, #4]	; (800f338 <__tcf_0+0xc>)
 800f332:	f000 f8b5 	bl	800f4a0 <_ZN23XFTimeoutManagerDefaultD1Ev>
 800f336:	bd80      	pop	{r7, pc}
 800f338:	20001228 	.word	0x20001228

0800f33c <_ZN23XFTimeoutManagerDefault11getInstanceEv>:
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	af00      	add	r7, sp, #0
    static XFTimeoutManagerDefault timeoutManager;
 800f340:	4b12      	ldr	r3, [pc, #72]	; (800f38c <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x50>)
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	f3bf 8f5b 	dmb	ish
 800f348:	b2db      	uxtb	r3, r3
 800f34a:	f003 0301 	and.w	r3, r3, #1
 800f34e:	2b00      	cmp	r3, #0
 800f350:	bf0c      	ite	eq
 800f352:	2301      	moveq	r3, #1
 800f354:	2300      	movne	r3, #0
 800f356:	b2db      	uxtb	r3, r3
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d013      	beq.n	800f384 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x48>
 800f35c:	480b      	ldr	r0, [pc, #44]	; (800f38c <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x50>)
 800f35e:	f006 fe55 	bl	801600c <__cxa_guard_acquire>
 800f362:	4603      	mov	r3, r0
 800f364:	2b00      	cmp	r3, #0
 800f366:	bf14      	ite	ne
 800f368:	2301      	movne	r3, #1
 800f36a:	2300      	moveq	r3, #0
 800f36c:	b2db      	uxtb	r3, r3
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d008      	beq.n	800f384 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x48>
 800f372:	4807      	ldr	r0, [pc, #28]	; (800f390 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x54>)
 800f374:	f000 f864 	bl	800f440 <_ZN23XFTimeoutManagerDefaultC1Ev>
 800f378:	4804      	ldr	r0, [pc, #16]	; (800f38c <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x50>)
 800f37a:	f006 fe53 	bl	8016024 <__cxa_guard_release>
 800f37e:	4805      	ldr	r0, [pc, #20]	; (800f394 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x58>)
 800f380:	f007 f892 	bl	80164a8 <atexit>
    return &timeoutManager;
 800f384:	4b02      	ldr	r3, [pc, #8]	; (800f390 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x54>)
}
 800f386:	4618      	mov	r0, r3
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	bf00      	nop
 800f38c:	20001240 	.word	0x20001240
 800f390:	20001228 	.word	0x20001228
 800f394:	0800f32d 	.word	0x0800f32d

0800f398 <_ZN9interface16XFTimeoutManagerD1Ev>:
    virtual ~XFTimeoutManager() = default;
 800f398:	b480      	push	{r7}
 800f39a:	b083      	sub	sp, #12
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
 800f3a0:	4a04      	ldr	r2, [pc, #16]	; (800f3b4 <_ZN9interface16XFTimeoutManagerD1Ev+0x1c>)
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	601a      	str	r2, [r3, #0]
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	370c      	adds	r7, #12
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b2:	4770      	bx	lr
 800f3b4:	08018dbc 	.word	0x08018dbc

0800f3b8 <_ZN9interface16XFTimeoutManagerD0Ev>:
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b082      	sub	sp, #8
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f7ff ffe9 	bl	800f398 <_ZN9interface16XFTimeoutManagerD1Ev>
 800f3c6:	2108      	movs	r1, #8
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f006 fe1d 	bl	8016008 <_ZdlPvj>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	3708      	adds	r7, #8
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	bd80      	pop	{r7, pc}

0800f3d8 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implD1Ev>:
	  }
	return __n;
      }
#endif

      struct _List_impl
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b082      	sub	sp, #8
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f000 fb86 	bl	800faf2 <_ZNSaISt10_List_nodeIP9XFTimeoutEED1Ev>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3708      	adds	r7, #8
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}

0800f3f0 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EEC1Ev>:
      const _Node_alloc_type&
      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
      { return _M_impl; }

#if __cplusplus >= 201103L
      _List_base() = default;
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f000 fb69 	bl	800fad2 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implC1Ev>
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	4618      	mov	r0, r3
 800f404:	3708      	adds	r7, #8
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}

0800f40a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EEC1Ev>:

      /**
       *  @brief  Creates a %list with no elements.
       */
#if __cplusplus >= 201103L
      list() = default;
 800f40a:	b580      	push	{r7, lr}
 800f40c:	b082      	sub	sp, #8
 800f40e:	af00      	add	r7, sp, #0
 800f410:	6078      	str	r0, [r7, #4]
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	4618      	mov	r0, r3
 800f416:	f7ff ffeb 	bl	800f3f0 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EEC1Ev>
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	4618      	mov	r0, r3
 800f41e:	3708      	adds	r7, #8
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}

0800f424 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 800f424:	b580      	push	{r7, lr}
 800f426:	b082      	sub	sp, #8
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	4618      	mov	r0, r3
 800f430:	f000 fb6b 	bl	800fb0a <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EED1Ev>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	4618      	mov	r0, r3
 800f438:	3708      	adds	r7, #8
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}
	...

0800f440 <_ZN23XFTimeoutManagerDefaultC1Ev>:

XFTimeoutManagerDefault::XFTimeoutManagerDefault() :
 800f440:	b580      	push	{r7, lr}
 800f442:	b082      	sub	sp, #8
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
    pMutex_(nullptr)
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	4618      	mov	r0, r3
 800f44c:	f7ff ff24 	bl	800f298 <_ZN9interface16XFTimeoutManagerC1Ev>
 800f450:	4a0f      	ldr	r2, [pc, #60]	; (800f490 <_ZN23XFTimeoutManagerDefaultC1Ev+0x50>)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	601a      	str	r2, [r3, #0]
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	3308      	adds	r3, #8
 800f45a:	4618      	mov	r0, r3
 800f45c:	f7ff ffd5 	bl	800f40a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EEC1Ev>
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2200      	movs	r2, #0
 800f464:	615a      	str	r2, [r3, #20]
{
    pMutex_ = XFMutex::create();
 800f466:	f001 feb3 	bl	80111d0 <_ZN9interface7XFMutex6createEv>
 800f46a:	4602      	mov	r2, r0
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	615a      	str	r2, [r3, #20]
    assert(pMutex_);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	695b      	ldr	r3, [r3, #20]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d105      	bne.n	800f484 <_ZN23XFTimeoutManagerDefaultC1Ev+0x44>
 800f478:	4b06      	ldr	r3, [pc, #24]	; (800f494 <_ZN23XFTimeoutManagerDefaultC1Ev+0x54>)
 800f47a:	4a07      	ldr	r2, [pc, #28]	; (800f498 <_ZN23XFTimeoutManagerDefaultC1Ev+0x58>)
 800f47c:	211d      	movs	r1, #29
 800f47e:	4807      	ldr	r0, [pc, #28]	; (800f49c <_ZN23XFTimeoutManagerDefaultC1Ev+0x5c>)
 800f480:	f006 fff4 	bl	801646c <__assert_func>
}
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	4618      	mov	r0, r3
 800f488:	3708      	adds	r7, #8
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
 800f48e:	bf00      	nop
 800f490:	08018d90 	.word	0x08018d90
 800f494:	08018644 	.word	0x08018644
 800f498:	0801864c 	.word	0x0801864c
 800f49c:	08018680 	.word	0x08018680

0800f4a0 <_ZN23XFTimeoutManagerDefaultD1Ev>:

XFTimeoutManagerDefault::~XFTimeoutManagerDefault()
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b082      	sub	sp, #8
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
 800f4a8:	4a08      	ldr	r2, [pc, #32]	; (800f4cc <_ZN23XFTimeoutManagerDefaultD1Ev+0x2c>)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	601a      	str	r2, [r3, #0]
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	3308      	adds	r3, #8
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7ff ffb6 	bl	800f424 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EED1Ev>
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7ff ff6c 	bl	800f398 <_ZN9interface16XFTimeoutManagerD1Ev>
{
}
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	3708      	adds	r7, #8
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd80      	pop	{r7, pc}
 800f4ca:	bf00      	nop
 800f4cc:	08018d90 	.word	0x08018d90

0800f4d0 <_ZN23XFTimeoutManagerDefaultD0Ev>:
XFTimeoutManagerDefault::~XFTimeoutManagerDefault()
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b082      	sub	sp, #8
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
}
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f7ff ffe1 	bl	800f4a0 <_ZN23XFTimeoutManagerDefaultD1Ev>
 800f4de:	2118      	movs	r1, #24
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f006 fd91 	bl	8016008 <_ZdlPvj>
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	3708      	adds	r7, #8
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}

0800f4f0 <_ZN23XFTimeoutManagerDefault5startEv>:

void XFTimeoutManagerDefault::start()
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b082      	sub	sp, #8
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
    // Check tickInterval. Set default value if not set
    if (tickInterval_ == 0)
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	685b      	ldr	r3, [r3, #4]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d102      	bne.n	800f506 <_ZN23XFTimeoutManagerDefault5startEv+0x16>
    {
        tickInterval_ = 10;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	220a      	movs	r2, #10
 800f504:	605a      	str	r2, [r3, #4]
    }

    XF_startTimeoutManagerTimer(uint32_t(tickInterval_));
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	685b      	ldr	r3, [r3, #4]
 800f50a:	4618      	mov	r0, r3
 800f50c:	f001 fef2 	bl	80112f4 <XF_startTimeoutManagerTimer>
}
 800f510:	bf00      	nop
 800f512:	3708      	adds	r7, #8
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}

0800f518 <_ZN23XFTimeoutManagerDefault15scheduleTimeoutEllPN9interface10XFReactiveE>:

void XFTimeoutManagerDefault::scheduleTimeout(int32_t timeoutId, int32_t interval, interface::XFReactive * pReactive)
{
 800f518:	b590      	push	{r4, r7, lr}
 800f51a:	b087      	sub	sp, #28
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	60f8      	str	r0, [r7, #12]
 800f520:	60b9      	str	r1, [r7, #8]
 800f522:	607a      	str	r2, [r7, #4]
 800f524:	603b      	str	r3, [r7, #0]
    XFTimeout * pTimeout = new XFTimeout(timeoutId, interval, pReactive);
 800f526:	2018      	movs	r0, #24
 800f528:	f006 fd7f 	bl	801602a <_Znwj>
 800f52c:	4603      	mov	r3, r0
 800f52e:	461c      	mov	r4, r3
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	687a      	ldr	r2, [r7, #4]
 800f534:	68b9      	ldr	r1, [r7, #8]
 800f536:	4620      	mov	r0, r4
 800f538:	f7ff fb1a 	bl	800eb70 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>
 800f53c:	617c      	str	r4, [r7, #20]

    if (pTimeout)
 800f53e:	697b      	ldr	r3, [r7, #20]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d006      	beq.n	800f552 <_ZN23XFTimeoutManagerDefault15scheduleTimeoutEllPN9interface10XFReactiveE+0x3a>
    {
        addTimeout(pTimeout);
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	3320      	adds	r3, #32
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	6979      	ldr	r1, [r7, #20]
 800f54e:	68f8      	ldr	r0, [r7, #12]
 800f550:	4798      	blx	r3
    }
}
 800f552:	bf00      	nop
 800f554:	371c      	adds	r7, #28
 800f556:	46bd      	mov	sp, r7
 800f558:	bd90      	pop	{r4, r7, pc}

0800f55a <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE>:

void XFTimeoutManagerDefault::unscheduleTimeout(int32_t timeoutId, interface::XFReactive * pReactive)
{
 800f55a:	b590      	push	{r4, r7, lr}
 800f55c:	b091      	sub	sp, #68	; 0x44
 800f55e:	af00      	add	r7, sp, #0
 800f560:	60f8      	str	r0, [r7, #12]
 800f562:	60b9      	str	r1, [r7, #8]
 800f564:	607a      	str	r2, [r7, #4]
    const XFTimeout timeout(timeoutId, 0, pReactive);
 800f566:	f107 0018 	add.w	r0, r7, #24
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	2200      	movs	r2, #0
 800f56e:	68b9      	ldr	r1, [r7, #8]
 800f570:	f7ff fafe 	bl	800eb70 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>
    XFTimeout * pTimeout;

    pMutex_->lock();
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	695a      	ldr	r2, [r3, #20]
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	695b      	ldr	r3, [r3, #20]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	3308      	adds	r3, #8
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	4610      	mov	r0, r2
 800f584:	4798      	blx	r3
    {
        for (TimeoutList::iterator i = timeouts_.begin();
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	3308      	adds	r3, #8
 800f58a:	4618      	mov	r0, r3
 800f58c:	f000 facd 	bl	800fb2a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 800f590:	4603      	mov	r3, r0
 800f592:	617b      	str	r3, [r7, #20]
             i != timeouts_.end(); /*Do not increment here!*/)
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	3308      	adds	r3, #8
 800f598:	4618      	mov	r0, r3
 800f59a:	f000 fad7 	bl	800fb4c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	633b      	str	r3, [r7, #48]	; 0x30
 800f5a2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f5a6:	f107 0314 	add.w	r3, r7, #20
 800f5aa:	4611      	mov	r1, r2
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f000 fadd 	bl	800fb6c <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d058      	beq.n	800f66a <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x110>
        {
            pTimeout = *i;
 800f5b8:	f107 0314 	add.w	r3, r7, #20
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f000 fae9 	bl	800fb94 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	63fb      	str	r3, [r7, #60]	; 0x3c

            // Check if behavior and timeout id are equal
            if (*pTimeout == timeout)
 800f5c8:	f107 0318 	add.w	r3, r7, #24
 800f5cc:	4619      	mov	r1, r3
 800f5ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f5d0:	f7ff faec 	bl	800ebac <_ZNK9XFTimeouteqERKS_>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d040      	beq.n	800f65c <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x102>
            {
                TimeoutList::iterator next = i;
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	613b      	str	r3, [r7, #16]

                // Check if remaining ticks can be given further
                if (++next != timeouts_.end())
 800f5de:	f107 0310 	add.w	r3, r7, #16
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f000 fae4 	bl	800fbb0 <_ZNSt14_List_iteratorIP9XFTimeoutEppEv>
 800f5e8:	4604      	mov	r4, r0
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	3308      	adds	r3, #8
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f000 faac 	bl	800fb4c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	637b      	str	r3, [r7, #52]	; 0x34
 800f5f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f5fc:	4619      	mov	r1, r3
 800f5fe:	4620      	mov	r0, r4
 800f600:	f000 fab4 	bl	800fb6c <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 800f604:	4603      	mov	r3, r0
 800f606:	2b00      	cmp	r3, #0
 800f608:	d00e      	beq.n	800f628 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0xce>
                {
                    // Add (remaining) ticks to next timeout in list
                    (*next)->addToRelTicks(pTimeout->getRelTicks());
 800f60a:	f107 0310 	add.w	r3, r7, #16
 800f60e:	4618      	mov	r0, r3
 800f610:	f000 fac0 	bl	800fb94 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 800f614:	4603      	mov	r3, r0
 800f616:	681c      	ldr	r4, [r3, #0]
 800f618:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f61a:	f7ff fe51 	bl	800f2c0 <_ZNK9XFTimeout11getRelTicksEv>
 800f61e:	4603      	mov	r3, r0
 800f620:	4619      	mov	r1, r3
 800f622:	4620      	mov	r0, r4
 800f624:	f7ff fe69 	bl	800f2fa <_ZN9XFTimeout13addToRelTicksEi>
                }

                i = timeouts_.erase(i);
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	f103 0408 	add.w	r4, r3, #8
 800f62e:	f107 0214 	add.w	r2, r7, #20
 800f632:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f636:	4611      	mov	r1, r2
 800f638:	4618      	mov	r0, r3
 800f63a:	f000 fac9 	bl	800fbd0 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 800f63e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f640:	4620      	mov	r0, r4
 800f642:	f000 fad5 	bl	800fbf0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
 800f646:	4603      	mov	r3, r0
 800f648:	617b      	str	r3, [r7, #20]
                // Iterator now points to the next element

                delete pTimeout;
 800f64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d0a1      	beq.n	800f594 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x3a>
 800f650:	681a      	ldr	r2, [r3, #0]
 800f652:	3204      	adds	r2, #4
 800f654:	6812      	ldr	r2, [r2, #0]
 800f656:	4618      	mov	r0, r3
 800f658:	4790      	blx	r2
 800f65a:	e79b      	b.n	800f594 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x3a>
            }
            else
            {
                i++;
 800f65c:	f107 0314 	add.w	r3, r7, #20
 800f660:	2100      	movs	r1, #0
 800f662:	4618      	mov	r0, r3
 800f664:	f000 fadf 	bl	800fc26 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
        for (TimeoutList::iterator i = timeouts_.begin();
 800f668:	e794      	b.n	800f594 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x3a>
            }
        }
    }
    pMutex_->unlock();
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	695a      	ldr	r2, [r3, #20]
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	695b      	ldr	r3, [r3, #20]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	330c      	adds	r3, #12
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	4610      	mov	r0, r2
 800f67a:	4798      	blx	r3
    const XFTimeout timeout(timeoutId, 0, pReactive);
 800f67c:	f107 0318 	add.w	r3, r7, #24
 800f680:	4618      	mov	r0, r3
 800f682:	f7ff fabd 	bl	800ec00 <_ZN9XFTimeoutD1Ev>
}
 800f686:	bf00      	nop
 800f688:	3744      	adds	r7, #68	; 0x44
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd90      	pop	{r4, r7, pc}
	...

0800f690 <_ZN23XFTimeoutManagerDefault4tickEv>:

void XFTimeoutManagerDefault::tick()
{
 800f690:	b590      	push	{r4, r7, lr}
 800f692:	b089      	sub	sp, #36	; 0x24
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
    assert(tickInterval_);      // Did you call start()?!
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	685b      	ldr	r3, [r3, #4]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d105      	bne.n	800f6ac <_ZN23XFTimeoutManagerDefault4tickEv+0x1c>
 800f6a0:	4b65      	ldr	r3, [pc, #404]	; (800f838 <_ZN23XFTimeoutManagerDefault4tickEv+0x1a8>)
 800f6a2:	4a66      	ldr	r2, [pc, #408]	; (800f83c <_ZN23XFTimeoutManagerDefault4tickEv+0x1ac>)
 800f6a4:	2161      	movs	r1, #97	; 0x61
 800f6a6:	4866      	ldr	r0, [pc, #408]	; (800f840 <_ZN23XFTimeoutManagerDefault4tickEv+0x1b0>)
 800f6a8:	f006 fee0 	bl	801646c <__assert_func>
    int32_t intervalToSubtract = tickInterval_;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	685b      	ldr	r3, [r3, #4]
 800f6b0:	61fb      	str	r3, [r7, #28]

    while (!timeouts_.empty())
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	3308      	adds	r3, #8
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f000 fac9 	bl	800fc4e <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	f083 0301 	eor.w	r3, r3, #1
 800f6c2:	b2db      	uxtb	r3, r3
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	f000 80b2 	beq.w	800f82e <_ZN23XFTimeoutManagerDefault4tickEv+0x19e>
    {
        pMutex_->lock();
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	695a      	ldr	r2, [r3, #20]
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	695b      	ldr	r3, [r3, #20]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	3308      	adds	r3, #8
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	4610      	mov	r0, r2
 800f6da:	4798      	blx	r3
        {
            XFTimeout * pFirstTimeout = timeouts_.front();
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	3308      	adds	r3, #8
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f000 fac6 	bl	800fc72 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5frontEv>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	61bb      	str	r3, [r7, #24]

            // Subtract time elapsed
            pFirstTimeout->substractFromRelTicks(intervalToSubtract);
 800f6ec:	69f9      	ldr	r1, [r7, #28]
 800f6ee:	69b8      	ldr	r0, [r7, #24]
 800f6f0:	f7ff fdf2 	bl	800f2d8 <_ZN9XFTimeout21substractFromRelTicksEi>

            // From now on set it to zero.
            intervalToSubtract = 0;
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	61fb      	str	r3, [r7, #28]

            // Check timeout timed out
            if (pFirstTimeout->getRelTicks() <= 0)
 800f6f8:	69b8      	ldr	r0, [r7, #24]
 800f6fa:	f7ff fde1 	bl	800f2c0 <_ZNK9XFTimeout11getRelTicksEv>
 800f6fe:	4603      	mov	r3, r0
 800f700:	2b00      	cmp	r3, #0
 800f702:	bfd4      	ite	le
 800f704:	2301      	movle	r3, #1
 800f706:	2300      	movgt	r3, #0
 800f708:	b2db      	uxtb	r3, r3
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d079      	beq.n	800f802 <_ZN23XFTimeoutManagerDefault4tickEv+0x172>
            {
                // Check remaining ticks can be given further
                if (timeouts_.size() > 1)
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	3308      	adds	r3, #8
 800f712:	4618      	mov	r0, r3
 800f714:	f000 fac0 	bl	800fc98 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE4sizeEv>
 800f718:	4603      	mov	r3, r0
 800f71a:	2b01      	cmp	r3, #1
 800f71c:	bf8c      	ite	hi
 800f71e:	2301      	movhi	r3, #1
 800f720:	2300      	movls	r3, #0
 800f722:	b2db      	uxtb	r3, r3
 800f724:	2b00      	cmp	r3, #0
 800f726:	d01b      	beq.n	800f760 <_ZN23XFTimeoutManagerDefault4tickEv+0xd0>
                {
                    TimeoutList::iterator i = timeouts_.begin();
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	3308      	adds	r3, #8
 800f72c:	4618      	mov	r0, r3
 800f72e:	f000 f9fc 	bl	800fb2a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 800f732:	4603      	mov	r3, r0
 800f734:	60fb      	str	r3, [r7, #12]

                    // Add ticks overrun to next timeout
                    i++;
 800f736:	f107 030c 	add.w	r3, r7, #12
 800f73a:	2100      	movs	r1, #0
 800f73c:	4618      	mov	r0, r3
 800f73e:	f000 fa72 	bl	800fc26 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
                    (*i)->substractFromRelTicks(pFirstTimeout->getRelTicks());
 800f742:	f107 030c 	add.w	r3, r7, #12
 800f746:	4618      	mov	r0, r3
 800f748:	f000 fa24 	bl	800fb94 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 800f74c:	4603      	mov	r3, r0
 800f74e:	681c      	ldr	r4, [r3, #0]
 800f750:	69b8      	ldr	r0, [r7, #24]
 800f752:	f7ff fdb5 	bl	800f2c0 <_ZNK9XFTimeout11getRelTicksEv>
 800f756:	4603      	mov	r3, r0
 800f758:	4619      	mov	r1, r3
 800f75a:	4620      	mov	r0, r4
 800f75c:	f7ff fdbc 	bl	800f2d8 <_ZN9XFTimeout21substractFromRelTicksEi>
                }

                // Inject the timeout back to the behavioral class
                returnTimeout(pFirstTimeout);
 800f760:	69b9      	ldr	r1, [r7, #24]
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f000 f9a0 	bl	800faa8 <_ZN23XFTimeoutManagerDefault13returnTimeoutEP9XFTimeout>

                // Remove timeout
                timeouts_.pop_front();
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	3308      	adds	r3, #8
 800f76c:	4618      	mov	r0, r3
 800f76e:	f000 fa9f 	bl	800fcb0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9pop_frontEv>

                // Check if timeouts with same timeout value are present
                for (TimeoutList::iterator it = timeouts_.begin(); it != timeouts_.end(); /*Do not increment here!*/)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	3308      	adds	r3, #8
 800f776:	4618      	mov	r0, r3
 800f778:	f000 f9d7 	bl	800fb2a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 800f77c:	4603      	mov	r3, r0
 800f77e:	60bb      	str	r3, [r7, #8]
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	3308      	adds	r3, #8
 800f784:	4618      	mov	r0, r3
 800f786:	f000 f9e1 	bl	800fb4c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 800f78a:	4603      	mov	r3, r0
 800f78c:	613b      	str	r3, [r7, #16]
 800f78e:	f107 0210 	add.w	r2, r7, #16
 800f792:	f107 0308 	add.w	r3, r7, #8
 800f796:	4611      	mov	r1, r2
 800f798:	4618      	mov	r0, r3
 800f79a:	f000 f9e7 	bl	800fb6c <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d03a      	beq.n	800f81a <_ZN23XFTimeoutManagerDefault4tickEv+0x18a>
                {
                    if ((*it)->getRelTicks() == 0)
 800f7a4:	f107 0308 	add.w	r3, r7, #8
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f000 f9f3 	bl	800fb94 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f7ff fd84 	bl	800f2c0 <_ZNK9XFTimeout11getRelTicksEv>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	bf0c      	ite	eq
 800f7be:	2301      	moveq	r3, #1
 800f7c0:	2300      	movne	r3, #0
 800f7c2:	b2db      	uxtb	r3, r3
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d027      	beq.n	800f818 <_ZN23XFTimeoutManagerDefault4tickEv+0x188>
                    {
                        returnTimeout(*it);			// Return them true
 800f7c8:	f107 0308 	add.w	r3, r7, #8
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f000 f9e1 	bl	800fb94 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f000 f965 	bl	800faa8 <_ZN23XFTimeoutManagerDefault13returnTimeoutEP9XFTimeout>
                        it = timeouts_.erase(it);	// Remove timeout and adjust iterator to next element
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f103 0408 	add.w	r4, r3, #8
 800f7e4:	f107 0208 	add.w	r2, r7, #8
 800f7e8:	f107 0314 	add.w	r3, r7, #20
 800f7ec:	4611      	mov	r1, r2
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f000 f9ee 	bl	800fbd0 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 800f7f4:	6979      	ldr	r1, [r7, #20]
 800f7f6:	4620      	mov	r0, r4
 800f7f8:	f000 f9fa 	bl	800fbf0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	60bb      	str	r3, [r7, #8]
                for (TimeoutList::iterator it = timeouts_.begin(); it != timeouts_.end(); /*Do not increment here!*/)
 800f800:	e7be      	b.n	800f780 <_ZN23XFTimeoutManagerDefault4tickEv+0xf0>
                    }
                }
            }
            else
            {
                pMutex_->unlock();
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	695a      	ldr	r2, [r3, #20]
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	695b      	ldr	r3, [r3, #20]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	330c      	adds	r3, #12
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	4610      	mov	r0, r2
 800f812:	4798      	blx	r3
                // Done. Exit while loop
                break;
 800f814:	bf00      	nop
            }
        }
        pMutex_->unlock();
    }
}
 800f816:	e00a      	b.n	800f82e <_ZN23XFTimeoutManagerDefault4tickEv+0x19e>
                        break;
 800f818:	bf00      	nop
        pMutex_->unlock();
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	695a      	ldr	r2, [r3, #20]
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	695b      	ldr	r3, [r3, #20]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	330c      	adds	r3, #12
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	4610      	mov	r0, r2
 800f82a:	4798      	blx	r3
    while (!timeouts_.empty())
 800f82c:	e741      	b.n	800f6b2 <_ZN23XFTimeoutManagerDefault4tickEv+0x22>
}
 800f82e:	bf00      	nop
 800f830:	3724      	adds	r7, #36	; 0x24
 800f832:	46bd      	mov	sp, r7
 800f834:	bd90      	pop	{r4, r7, pc}
 800f836:	bf00      	nop
 800f838:	080186d8 	.word	0x080186d8
 800f83c:	080186e8 	.word	0x080186e8
 800f840:	08018680 	.word	0x08018680

0800f844 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout>:

void XFTimeoutManagerDefault::addTimeout(XFTimeout * pNewTimeout)
{
 800f844:	b590      	push	{r4, r7, lr}
 800f846:	b08d      	sub	sp, #52	; 0x34
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	6039      	str	r1, [r7, #0]
    if (!timeouts_.empty())
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	3308      	adds	r3, #8
 800f852:	4618      	mov	r0, r3
 800f854:	f000 f9fb 	bl	800fc4e <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>
 800f858:	4603      	mov	r3, r0
 800f85a:	f083 0301 	eor.w	r3, r3, #1
 800f85e:	b2db      	uxtb	r3, r3
 800f860:	2b00      	cmp	r3, #0
 800f862:	f000 8116 	beq.w	800fa92 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x24e>
    {
        pMutex_->lock();
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	695a      	ldr	r2, [r3, #20]
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	695b      	ldr	r3, [r3, #20]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	3308      	adds	r3, #8
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	4610      	mov	r0, r2
 800f876:	4798      	blx	r3
        {
            // Insert timeout before timeout(s) triggering later
            TimeoutList::iterator i = timeouts_.begin();
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	3308      	adds	r3, #8
 800f87c:	4618      	mov	r0, r3
 800f87e:	f000 f954 	bl	800fb2a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 800f882:	4603      	mov	r3, r0
 800f884:	60bb      	str	r3, [r7, #8]

            unsigned int index = 0;
 800f886:	2300      	movs	r3, #0
 800f888:	62fb      	str	r3, [r7, #44]	; 0x2c

            // Find the right place to insert new timeout
            while (i != timeouts_.end() &&
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	3308      	adds	r3, #8
 800f88e:	4618      	mov	r0, r3
 800f890:	f000 f95c 	bl	800fb4c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 800f894:	4603      	mov	r3, r0
 800f896:	60fb      	str	r3, [r7, #12]
 800f898:	f107 020c 	add.w	r2, r7, #12
 800f89c:	f107 0308 	add.w	r3, r7, #8
 800f8a0:	4611      	mov	r1, r2
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f000 f962 	bl	800fb6c <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d013      	beq.n	800f8d6 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x92>
                   (*i)->getRelTicks() < pNewTimeout->getRelTicks())
 800f8ae:	f107 0308 	add.w	r3, r7, #8
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f000 f96e 	bl	800fb94 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f7ff fcff 	bl	800f2c0 <_ZNK9XFTimeout11getRelTicksEv>
 800f8c2:	4604      	mov	r4, r0
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f7ff fcfa 	bl	800f2c0 <_ZNK9XFTimeout11getRelTicksEv>
 800f8cc:	4603      	mov	r3, r0
            while (i != timeouts_.end() &&
 800f8ce:	429c      	cmp	r4, r3
 800f8d0:	da01      	bge.n	800f8d6 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x92>
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	e000      	b.n	800f8d8 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x94>
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d019      	beq.n	800f910 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0xcc>
            {	// -> by: test4, test5
                pNewTimeout->substractFromRelTicks((*i)->getRelTicks());
 800f8dc:	683c      	ldr	r4, [r7, #0]
 800f8de:	f107 0308 	add.w	r3, r7, #8
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f000 f956 	bl	800fb94 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f7ff fce7 	bl	800f2c0 <_ZNK9XFTimeout11getRelTicksEv>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	4620      	mov	r0, r4
 800f8f8:	f7ff fcee 	bl	800f2d8 <_ZN9XFTimeout21substractFromRelTicksEi>
                i++; index++;
 800f8fc:	f107 0308 	add.w	r3, r7, #8
 800f900:	2100      	movs	r1, #0
 800f902:	4618      	mov	r0, r3
 800f904:	f000 f98f 	bl	800fc26 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
 800f908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f90a:	3301      	adds	r3, #1
 800f90c:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (i != timeouts_.end() &&
 800f90e:	e7bc      	b.n	800f88a <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x46>
            }

            if (i != timeouts_.end())
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	3308      	adds	r3, #8
 800f914:	4618      	mov	r0, r3
 800f916:	f000 f919 	bl	800fb4c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 800f91a:	4603      	mov	r3, r0
 800f91c:	613b      	str	r3, [r7, #16]
 800f91e:	f107 0210 	add.w	r2, r7, #16
 800f922:	f107 0308 	add.w	r3, r7, #8
 800f926:	4611      	mov	r1, r2
 800f928:	4618      	mov	r0, r3
 800f92a:	f000 f91f 	bl	800fb6c <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 800f92e:	4603      	mov	r3, r0
 800f930:	2b00      	cmp	r3, #0
 800f932:	f000 808c 	beq.w	800fa4e <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x20a>
            {
                if ((*i)->getRelTicks() != pNewTimeout->getRelTicks())
 800f936:	f107 0308 	add.w	r3, r7, #8
 800f93a:	4618      	mov	r0, r3
 800f93c:	f000 f92a 	bl	800fb94 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 800f940:	4603      	mov	r3, r0
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	4618      	mov	r0, r3
 800f946:	f7ff fcbb 	bl	800f2c0 <_ZNK9XFTimeout11getRelTicksEv>
 800f94a:	4604      	mov	r4, r0
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	4618      	mov	r0, r3
 800f950:	f7ff fcb6 	bl	800f2c0 <_ZNK9XFTimeout11getRelTicksEv>
 800f954:	4603      	mov	r3, r0
 800f956:	429c      	cmp	r4, r3
 800f958:	bf14      	ite	ne
 800f95a:	2301      	movne	r3, #1
 800f95c:	2300      	moveq	r3, #0
 800f95e:	b2db      	uxtb	r3, r3
 800f960:	2b00      	cmp	r3, #0
 800f962:	d021      	beq.n	800f9a8 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x164>
                {	// -> by: test1, test4, test5
                    // Timeout are going to timeout at different times

                    // Insert new timeout before
                    timeouts_.insert(i, pNewTimeout);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f103 0408 	add.w	r4, r3, #8
 800f96a:	f107 0208 	add.w	r2, r7, #8
 800f96e:	f107 0314 	add.w	r3, r7, #20
 800f972:	4611      	mov	r1, r2
 800f974:	4618      	mov	r0, r3
 800f976:	f000 f92b 	bl	800fbd0 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 800f97a:	463b      	mov	r3, r7
 800f97c:	461a      	mov	r2, r3
 800f97e:	6979      	ldr	r1, [r7, #20]
 800f980:	4620      	mov	r0, r4
 800f982:	f000 f9a5 	bl	800fcd0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>

                    // Remove time from following timeout
                    (*i)->substractFromRelTicks(pNewTimeout->getRelTicks());
 800f986:	f107 0308 	add.w	r3, r7, #8
 800f98a:	4618      	mov	r0, r3
 800f98c:	f000 f902 	bl	800fb94 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 800f990:	4603      	mov	r3, r0
 800f992:	681c      	ldr	r4, [r3, #0]
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	4618      	mov	r0, r3
 800f998:	f7ff fc92 	bl	800f2c0 <_ZNK9XFTimeout11getRelTicksEv>
 800f99c:	4603      	mov	r3, r0
 800f99e:	4619      	mov	r1, r3
 800f9a0:	4620      	mov	r0, r4
 800f9a2:	f7ff fc99 	bl	800f2d8 <_ZN9XFTimeout21substractFromRelTicksEi>
 800f9a6:	e06a      	b.n	800fa7e <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x23a>

                }
                else
                {	// -> by: test1, test5
                    const int32_t relTicks = (*i)->getRelTicks();
 800f9a8:	f107 0308 	add.w	r3, r7, #8
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f000 f8f1 	bl	800fb94 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f7ff fc82 	bl	800f2c0 <_ZNK9XFTimeout11getRelTicksEv>
 800f9bc:	62b8      	str	r0, [r7, #40]	; 0x28
                    // Timeouts timeout at the same time. Put
                    // the new one behind the actual.
                    i++;
 800f9be:	f107 0308 	add.w	r3, r7, #8
 800f9c2:	2100      	movs	r1, #0
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f000 f92e 	bl	800fc26 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>

                    // Check if even more timeouts with the same timeout
                    while(i != timeouts_.end() && (*i)->getRelTicks() == 0)
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	3308      	adds	r3, #8
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f000 f8bc 	bl	800fb4c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	61bb      	str	r3, [r7, #24]
 800f9d8:	f107 0218 	add.w	r2, r7, #24
 800f9dc:	f107 0308 	add.w	r3, r7, #8
 800f9e0:	4611      	mov	r1, r2
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f000 f8c2 	bl	800fb6c <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d00e      	beq.n	800fa0c <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x1c8>
 800f9ee:	f107 0308 	add.w	r3, r7, #8
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f000 f8ce 	bl	800fb94 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f7ff fc5f 	bl	800f2c0 <_ZNK9XFTimeout11getRelTicksEv>
 800fa02:	4603      	mov	r3, r0
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d101      	bne.n	800fa0c <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x1c8>
 800fa08:	2301      	movs	r3, #1
 800fa0a:	e000      	b.n	800fa0e <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x1ca>
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d006      	beq.n	800fa20 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x1dc>
                    {	// -> by: test5
                        i++;
 800fa12:	f107 0308 	add.w	r3, r7, #8
 800fa16:	2100      	movs	r1, #0
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f000 f904 	bl	800fc26 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
                    while(i != timeouts_.end() && (*i)->getRelTicks() == 0)
 800fa1e:	e7d4      	b.n	800f9ca <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x186>
                    }

                    // Insert new timeout behind actual
                    timeouts_.insert(i, pNewTimeout);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f103 0408 	add.w	r4, r3, #8
 800fa26:	f107 0208 	add.w	r2, r7, #8
 800fa2a:	f107 031c 	add.w	r3, r7, #28
 800fa2e:	4611      	mov	r1, r2
 800fa30:	4618      	mov	r0, r3
 800fa32:	f000 f8cd 	bl	800fbd0 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 800fa36:	463b      	mov	r3, r7
 800fa38:	461a      	mov	r2, r3
 800fa3a:	69f9      	ldr	r1, [r7, #28]
 800fa3c:	4620      	mov	r0, r4
 800fa3e:	f000 f947 	bl	800fcd0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
                    // Remove time from actual timeout
                    pNewTimeout->substractFromRelTicks(relTicks);
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7ff fc46 	bl	800f2d8 <_ZN9XFTimeout21substractFromRelTicksEi>
 800fa4c:	e017      	b.n	800fa7e <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x23a>
                }
            }
            else
            {	// -> by: test4, test5
                // Add timeout at the end of the list
                timeouts_.insert(timeouts_.end(), pNewTimeout);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	f103 0408 	add.w	r4, r3, #8
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	3308      	adds	r3, #8
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f000 f877 	bl	800fb4c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	627b      	str	r3, [r7, #36]	; 0x24
 800fa62:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fa66:	f107 0320 	add.w	r3, r7, #32
 800fa6a:	4611      	mov	r1, r2
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f000 f8af 	bl	800fbd0 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 800fa72:	463b      	mov	r3, r7
 800fa74:	461a      	mov	r2, r3
 800fa76:	6a39      	ldr	r1, [r7, #32]
 800fa78:	4620      	mov	r0, r4
 800fa7a:	f000 f929 	bl	800fcd0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
            }
        }
        pMutex_->unlock();
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	695a      	ldr	r2, [r3, #20]
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	695b      	ldr	r3, [r3, #20]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	330c      	adds	r3, #12
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	4610      	mov	r0, r2
 800fa8e:	4798      	blx	r3
    }
    else
    {	// -> by: test1, test2, test3, test4, test5
        timeouts_.push_front(pNewTimeout);
    }
}
 800fa90:	e006      	b.n	800faa0 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x25c>
        timeouts_.push_front(pNewTimeout);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	3308      	adds	r3, #8
 800fa96:	463a      	mov	r2, r7
 800fa98:	4611      	mov	r1, r2
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f000 f93e 	bl	800fd1c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE10push_frontERKS2_>
}
 800faa0:	bf00      	nop
 800faa2:	3734      	adds	r7, #52	; 0x34
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd90      	pop	{r4, r7, pc}

0800faa8 <_ZN23XFTimeoutManagerDefault13returnTimeoutEP9XFTimeout>:

void XFTimeoutManagerDefault::returnTimeout(XFTimeout * pTimeout)
{
 800faa8:	b590      	push	{r4, r7, lr}
 800faaa:	b083      	sub	sp, #12
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	6039      	str	r1, [r7, #0]
    pTimeout->getBehavior()->pushEvent(pTimeout);
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7ff f8c5 	bl	800ec44 <_ZNK7XFEvent11getBehaviorEv>
 800faba:	4603      	mov	r3, r0
 800fabc:	681a      	ldr	r2, [r3, #0]
 800fabe:	320c      	adds	r2, #12
 800fac0:	6814      	ldr	r4, [r2, #0]
 800fac2:	2200      	movs	r2, #0
 800fac4:	6839      	ldr	r1, [r7, #0]
 800fac6:	4618      	mov	r0, r3
 800fac8:	47a0      	blx	r4
}
 800faca:	bf00      	nop
 800facc:	370c      	adds	r7, #12
 800face:	46bd      	mov	sp, r7
 800fad0:	bd90      	pop	{r4, r7, pc}

0800fad2 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 800fad2:	b580      	push	{r7, lr}
 800fad4:	b082      	sub	sp, #8
 800fad6:	af00      	add	r7, sp, #0
 800fad8:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 800fada:	6878      	ldr	r0, [r7, #4]
 800fadc:	f000 f930 	bl	800fd40 <_ZNSaISt10_List_nodeIP9XFTimeoutEEC1Ev>
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7ff fb9e 	bl	800f224 <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	4618      	mov	r0, r3
 800faec:	3708      	adds	r7, #8
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}

0800faf2 <_ZNSaISt10_List_nodeIP9XFTimeoutEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 800faf2:	b580      	push	{r7, lr}
 800faf4:	b082      	sub	sp, #8
 800faf6:	af00      	add	r7, sp, #0
 800faf8:	6078      	str	r0, [r7, #4]
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f000 f92c 	bl	800fd58 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED1Ev>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	4618      	mov	r0, r3
 800fb04:	3708      	adds	r7, #8
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}

0800fb0a <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 800fb0a:	b580      	push	{r7, lr}
 800fb0c:	b082      	sub	sp, #8
 800fb0e:	af00      	add	r7, sp, #0
 800fb10:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f000 f92b 	bl	800fd6e <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7ff fc5c 	bl	800f3d8 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implD1Ev>
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	4618      	mov	r0, r3
 800fb24:	3708      	adds	r7, #8
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}

0800fb2a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %list.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 800fb2a:	b580      	push	{r7, lr}
 800fb2c:	b084      	sub	sp, #16
 800fb2e:	af00      	add	r7, sp, #0
 800fb30:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681a      	ldr	r2, [r3, #0]
 800fb36:	f107 030c 	add.w	r3, r7, #12
 800fb3a:	4611      	mov	r1, r2
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f000 f93b 	bl	800fdb8 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	4618      	mov	r0, r3
 800fb46:	3710      	adds	r7, #16
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}

0800fb4c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %list.  Iteration is done in ordinary element
       *  order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b084      	sub	sp, #16
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 800fb54:	687a      	ldr	r2, [r7, #4]
 800fb56:	f107 030c 	add.w	r3, r7, #12
 800fb5a:	4611      	mov	r1, r2
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f000 f92b 	bl	800fdb8 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	4618      	mov	r0, r3
 800fb66:	3710      	adds	r7, #16
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}

0800fb6c <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800fb6c:	b480      	push	{r7}
 800fb6e:	b083      	sub	sp, #12
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
 800fb74:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681a      	ldr	r2, [r3, #0]
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	429a      	cmp	r2, r3
 800fb80:	bf14      	ite	ne
 800fb82:	2301      	movne	r3, #1
 800fb84:	2300      	moveq	r3, #0
 800fb86:	b2db      	uxtb	r3, r3
 800fb88:	4618      	mov	r0, r3
 800fb8a:	370c      	adds	r7, #12
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb92:	4770      	bx	lr

0800fb94 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b082      	sub	sp, #8
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	4618      	mov	r0, r3
 800fba2:	f000 f918 	bl	800fdd6 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 800fba6:	4603      	mov	r3, r0
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3708      	adds	r7, #8
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}

0800fbb0 <_ZNSt14_List_iteratorIP9XFTimeoutEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800fbb0:	b480      	push	{r7}
 800fbb2:	b083      	sub	sp, #12
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_next;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	681a      	ldr	r2, [r3, #0]
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	601a      	str	r2, [r3, #0]
	return *this;
 800fbc2:	687b      	ldr	r3, [r7, #4]
      }
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	370c      	adds	r7, #12
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbce:	4770      	bx	lr

0800fbd0 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>:
      _List_const_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 800fbd0:	b480      	push	{r7}
 800fbd2:	b083      	sub	sp, #12
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
 800fbd8:	6039      	str	r1, [r7, #0]
      : _M_node(__x._M_node) { }
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	681a      	ldr	r2, [r3, #0]
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	601a      	str	r2, [r3, #0]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	370c      	adds	r7, #12
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbee:	4770      	bx	lr

0800fbf0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>:
      }
#endif

  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b084      	sub	sp, #16
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
 800fbf8:	6039      	str	r1, [r7, #0]
    erase(const_iterator __position) noexcept
#else
    erase(iterator __position)
#endif
    {
      iterator __ret = iterator(__position._M_node->_M_next);
 800fbfa:	683b      	ldr	r3, [r7, #0]
 800fbfc:	681a      	ldr	r2, [r3, #0]
 800fbfe:	f107 030c 	add.w	r3, r7, #12
 800fc02:	4611      	mov	r1, r2
 800fc04:	4618      	mov	r0, r3
 800fc06:	f000 f8d7 	bl	800fdb8 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
      _M_erase(__position._M_const_cast());
 800fc0a:	463b      	mov	r3, r7
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f000 f916 	bl	800fe3e <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>
 800fc12:	4603      	mov	r3, r0
 800fc14:	4619      	mov	r1, r3
 800fc16:	6878      	ldr	r0, [r7, #4]
 800fc18:	f000 f8eb 	bl	800fdf2 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>
      return __ret;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
    }
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3710      	adds	r7, #16
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}

0800fc26 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 800fc26:	b480      	push	{r7}
 800fc28:	b085      	sub	sp, #20
 800fc2a:	af00      	add	r7, sp, #0
 800fc2c:	6078      	str	r0, [r7, #4]
 800fc2e:	6039      	str	r1, [r7, #0]
	_Self __tmp = *this;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	60fb      	str	r3, [r7, #12]
	_M_node = _M_node->_M_next;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	681a      	ldr	r2, [r3, #0]
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	601a      	str	r2, [r3, #0]
	return __tmp;
 800fc40:	68fb      	ldr	r3, [r7, #12]
      }
 800fc42:	4618      	mov	r0, r3
 800fc44:	3714      	adds	r7, #20
 800fc46:	46bd      	mov	sp, r7
 800fc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4c:	4770      	bx	lr

0800fc4e <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>:
      /**
       *  Returns true if the %list is empty.  (Thus begin() would equal
       *  end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 800fc4e:	b480      	push	{r7}
 800fc50:	b083      	sub	sp, #12
 800fc52:	af00      	add	r7, sp, #0
 800fc54:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681a      	ldr	r2, [r3, #0]
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	bf0c      	ite	eq
 800fc60:	2301      	moveq	r3, #1
 800fc62:	2300      	movne	r3, #0
 800fc64:	b2db      	uxtb	r3, r3
 800fc66:	4618      	mov	r0, r3
 800fc68:	370c      	adds	r7, #12
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc70:	4770      	bx	lr

0800fc72 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %list.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 800fc72:	b580      	push	{r7, lr}
 800fc74:	b084      	sub	sp, #16
 800fc76:	af00      	add	r7, sp, #0
 800fc78:	6078      	str	r0, [r7, #4]
      { return *begin(); }
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f7ff ff55 	bl	800fb2a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 800fc80:	4603      	mov	r3, r0
 800fc82:	60fb      	str	r3, [r7, #12]
 800fc84:	f107 030c 	add.w	r3, r7, #12
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7ff ff83 	bl	800fb94 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	4618      	mov	r0, r3
 800fc92:	3710      	adds	r7, #16
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}

0800fc98 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b082      	sub	sp, #8
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
      { return _M_node_count(); }
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f000 f8dd 	bl	800fe60 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE13_M_node_countEv>
 800fca6:	4603      	mov	r3, r0
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3708      	adds	r7, #8
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}

0800fcb0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9pop_frontEv>:
       *  Note that no data is returned, and if the first element's data
       *  is needed, it should be retrieved before pop_front() is
       *  called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b082      	sub	sp, #8
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
      { this->_M_erase(begin()); }
 800fcb8:	6878      	ldr	r0, [r7, #4]
 800fcba:	f7ff ff36 	bl	800fb2a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	4619      	mov	r1, r3
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f000 f895 	bl	800fdf2 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>
 800fcc8:	bf00      	nop
 800fcca:	3708      	adds	r7, #8
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}

0800fcd0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>:
    list<_Tp, _Alloc>::
 800fcd0:	b590      	push	{r4, r7, lr}
 800fcd2:	b087      	sub	sp, #28
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	60f8      	str	r0, [r7, #12]
 800fcd8:	60b9      	str	r1, [r7, #8]
 800fcda:	607a      	str	r2, [r7, #4]
      _Node* __tmp = _M_create_node(__x);
 800fcdc:	6879      	ldr	r1, [r7, #4]
 800fcde:	68f8      	ldr	r0, [r7, #12]
 800fce0:	f000 f8cb 	bl	800fe7a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>
 800fce4:	6178      	str	r0, [r7, #20]
      __tmp->_M_hook(__position._M_const_cast()._M_node);
 800fce6:	697c      	ldr	r4, [r7, #20]
 800fce8:	f107 0308 	add.w	r3, r7, #8
 800fcec:	4618      	mov	r0, r3
 800fcee:	f000 f8a6 	bl	800fe3e <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	4619      	mov	r1, r3
 800fcf6:	4620      	mov	r0, r4
 800fcf8:	f006 f9ad 	bl	8016056 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      this->_M_inc_size(1);
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	2101      	movs	r1, #1
 800fd00:	4618      	mov	r0, r3
 800fd02:	f000 f8ee 	bl	800fee2 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>
      return iterator(__tmp);
 800fd06:	f107 0310 	add.w	r3, r7, #16
 800fd0a:	6979      	ldr	r1, [r7, #20]
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	f000 f853 	bl	800fdb8 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 800fd12:	693b      	ldr	r3, [r7, #16]
    }
 800fd14:	4618      	mov	r0, r3
 800fd16:	371c      	adds	r7, #28
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd90      	pop	{r4, r7, pc}

0800fd1c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE10push_frontERKS2_>:
      push_front(const value_type& __x)
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b082      	sub	sp, #8
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
 800fd24:	6039      	str	r1, [r7, #0]
      { this->_M_insert(begin(), __x); }
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f7ff feff 	bl	800fb2a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	683a      	ldr	r2, [r7, #0]
 800fd30:	4619      	mov	r1, r3
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	f000 f8e6 	bl	800ff04 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>
 800fd38:	bf00      	nop
 800fd3a:	3708      	adds	r7, #8
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bd80      	pop	{r7, pc}

0800fd40 <_ZNSaISt10_List_nodeIP9XFTimeoutEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b082      	sub	sp, #8
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f000 f8f9 	bl	800ff40 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC1Ev>
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	4618      	mov	r0, r3
 800fd52:	3708      	adds	r7, #8
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}

0800fd58 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800fd58:	b480      	push	{r7}
 800fd5a:	b083      	sub	sp, #12
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	4618      	mov	r0, r3
 800fd64:	370c      	adds	r7, #12
 800fd66:	46bd      	mov	sp, r7
 800fd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6c:	4770      	bx	lr

0800fd6e <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 800fd6e:	b580      	push	{r7, lr}
 800fd70:	b086      	sub	sp, #24
 800fd72:	af00      	add	r7, sp, #0
 800fd74:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	697a      	ldr	r2, [r7, #20]
 800fd80:	429a      	cmp	r2, r3
 800fd82:	d015      	beq.n	800fdb0 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0x42>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 800fd88:	693b      	ldr	r3, [r7, #16]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 800fd8e:	6938      	ldr	r0, [r7, #16]
 800fd90:	f000 f821 	bl	800fdd6 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 800fd94:	60f8      	str	r0, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f000 f8dd 	bl	800ff56 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	68f9      	ldr	r1, [r7, #12]
 800fda0:	4618      	mov	r0, r3
 800fda2:	f000 f8e3 	bl	800ff6c <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>
	  _M_put_node(__tmp);
 800fda6:	6939      	ldr	r1, [r7, #16]
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f000 f8ec 	bl	800ff86 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      while (__cur != &_M_impl._M_node)
 800fdae:	e7e5      	b.n	800fd7c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0xe>
    }
 800fdb0:	bf00      	nop
 800fdb2:	3718      	adds	r7, #24
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}

0800fdb8 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 800fdb8:	b480      	push	{r7}
 800fdba:	b083      	sub	sp, #12
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
 800fdc0:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	683a      	ldr	r2, [r7, #0]
 800fdc6:	601a      	str	r2, [r3, #0]
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	4618      	mov	r0, r3
 800fdcc:	370c      	adds	r7, #12
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd4:	4770      	bx	lr

0800fdd6 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 800fdd6:	b580      	push	{r7, lr}
 800fdd8:	b082      	sub	sp, #8
 800fdda:	af00      	add	r7, sp, #0
 800fddc:	6078      	str	r0, [r7, #4]
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	3308      	adds	r3, #8
 800fde2:	4618      	mov	r0, r3
 800fde4:	f000 f8de 	bl	800ffa4 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE6_M_ptrEv>
 800fde8:	4603      	mov	r3, r0
 800fdea:	4618      	mov	r0, r3
 800fdec:	3708      	adds	r7, #8
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}

0800fdf2 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>:
       }
#endif

      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
 800fdf2:	b590      	push	{r4, r7, lr}
 800fdf4:	b085      	sub	sp, #20
 800fdf6:	af00      	add	r7, sp, #0
 800fdf8:	6078      	str	r0, [r7, #4]
 800fdfa:	6039      	str	r1, [r7, #0]
      {
	this->_M_dec_size(1);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2101      	movs	r1, #1
 800fe00:	4618      	mov	r0, r3
 800fe02:	f000 f8db 	bl	800ffbc <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_dec_sizeEj>
	__position._M_node->_M_unhook();
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f006 f92b 	bl	8016064 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	_Node* __n = static_cast<_Node*>(__position._M_node);
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	60fb      	str	r3, [r7, #12]
#if __cplusplus >= 201103L
	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	4618      	mov	r0, r3
 800fe16:	f000 f89e 	bl	800ff56 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 800fe1a:	4604      	mov	r4, r0
 800fe1c:	68f8      	ldr	r0, [r7, #12]
 800fe1e:	f7ff ffda 	bl	800fdd6 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 800fe22:	4603      	mov	r3, r0
 800fe24:	4619      	mov	r1, r3
 800fe26:	4620      	mov	r0, r4
 800fe28:	f000 f8a0 	bl	800ff6c <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>
#else
	_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());
#endif

	_M_put_node(__n);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	68f9      	ldr	r1, [r7, #12]
 800fe30:	4618      	mov	r0, r3
 800fe32:	f000 f8a8 	bl	800ff86 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      }
 800fe36:	bf00      	nop
 800fe38:	3714      	adds	r7, #20
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd90      	pop	{r4, r7, pc}

0800fe3e <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800fe3e:	b580      	push	{r7, lr}
 800fe40:	b084      	sub	sp, #16
 800fe42:	af00      	add	r7, sp, #0
 800fe44:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681a      	ldr	r2, [r3, #0]
 800fe4a:	f107 030c 	add.w	r3, r7, #12
 800fe4e:	4611      	mov	r1, r2
 800fe50:	4618      	mov	r0, r3
 800fe52:	f7ff ffb1 	bl	800fdb8 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3710      	adds	r7, #16
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}

0800fe60 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE13_M_node_countEv>:
      _M_node_count() const
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b082      	sub	sp, #8
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
      { return this->_M_get_size(); }
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f000 f8b7 	bl	800ffde <_ZNKSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_sizeEv>
 800fe70:	4603      	mov	r3, r0
 800fe72:	4618      	mov	r0, r3
 800fe74:	3708      	adds	r7, #8
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}

0800fe7a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800fe7a:	b590      	push	{r4, r7, lr}
 800fe7c:	b087      	sub	sp, #28
 800fe7e:	af00      	add	r7, sp, #0
 800fe80:	6078      	str	r0, [r7, #4]
 800fe82:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	4618      	mov	r0, r3
 800fe88:	f000 f8b5 	bl	800fff6 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_nodeEv>
 800fe8c:	6178      	str	r0, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	4618      	mov	r0, r3
 800fe92:	f000 f860 	bl	800ff56 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 800fe96:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 800fe98:	f107 0308 	add.w	r3, r7, #8
 800fe9c:	697a      	ldr	r2, [r7, #20]
 800fe9e:	6939      	ldr	r1, [r7, #16]
 800fea0:	4618      	mov	r0, r3
 800fea2:	f000 f8b6 	bl	8010012 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEC1ERS4_PS3_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 800fea6:	6978      	ldr	r0, [r7, #20]
 800fea8:	f7ff ff95 	bl	800fdd6 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 800feac:	4604      	mov	r4, r0
 800feae:	6838      	ldr	r0, [r7, #0]
 800feb0:	f000 f8d8 	bl	8010064 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 800feb4:	4603      	mov	r3, r0
 800feb6:	461a      	mov	r2, r3
 800feb8:	4621      	mov	r1, r4
 800feba:	6938      	ldr	r0, [r7, #16]
 800febc:	f000 f8dd 	bl	801007a <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>
	  __guard = nullptr;
 800fec0:	f107 0308 	add.w	r3, r7, #8
 800fec4:	2100      	movs	r1, #0
 800fec6:	4618      	mov	r0, r3
 800fec8:	f000 f8ea 	bl	80100a0 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEaSEDn>
	  return __p;
 800fecc:	697c      	ldr	r4, [r7, #20]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 800fece:	f107 0308 	add.w	r3, r7, #8
 800fed2:	4618      	mov	r0, r3
 800fed4:	f000 f8b1 	bl	801003a <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev>
	  return __p;
 800fed8:	4623      	mov	r3, r4
	}
 800feda:	4618      	mov	r0, r3
 800fedc:	371c      	adds	r7, #28
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd90      	pop	{r4, r7, pc}

0800fee2 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 800fee2:	b480      	push	{r7}
 800fee4:	b083      	sub	sp, #12
 800fee6:	af00      	add	r7, sp, #0
 800fee8:	6078      	str	r0, [r7, #4]
 800feea:	6039      	str	r1, [r7, #0]
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	689a      	ldr	r2, [r3, #8]
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	441a      	add	r2, r3
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	609a      	str	r2, [r3, #8]
 800fef8:	bf00      	nop
 800fefa:	370c      	adds	r7, #12
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr

0800ff04 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>:
       _M_insert(iterator __position, _Args&&... __args)
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b086      	sub	sp, #24
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	60f8      	str	r0, [r7, #12]
 800ff0c:	60b9      	str	r1, [r7, #8]
 800ff0e:	607a      	str	r2, [r7, #4]
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f000 f8a7 	bl	8010064 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 800ff16:	4603      	mov	r3, r0
 800ff18:	4619      	mov	r1, r3
 800ff1a:	68f8      	ldr	r0, [r7, #12]
 800ff1c:	f7ff ffad 	bl	800fe7a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>
 800ff20:	6178      	str	r0, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 800ff22:	697b      	ldr	r3, [r7, #20]
 800ff24:	68ba      	ldr	r2, [r7, #8]
 800ff26:	4611      	mov	r1, r2
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f006 f894 	bl	8016056 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	2101      	movs	r1, #1
 800ff32:	4618      	mov	r0, r3
 800ff34:	f7ff ffd5 	bl	800fee2 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>
       }
 800ff38:	bf00      	nop
 800ff3a:	3718      	adds	r7, #24
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}

0800ff40 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ff40:	b480      	push	{r7}
 800ff42:	b083      	sub	sp, #12
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	370c      	adds	r7, #12
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff54:	4770      	bx	lr

0800ff56 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800ff56:	b480      	push	{r7}
 800ff58:	b083      	sub	sp, #12
 800ff5a:	af00      	add	r7, sp, #0
 800ff5c:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	4618      	mov	r0, r3
 800ff62:	370c      	adds	r7, #12
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	4770      	bx	lr

0800ff6c <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b082      	sub	sp, #8
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
 800ff74:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 800ff76:	6839      	ldr	r1, [r7, #0]
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f000 f8a0 	bl	80100be <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE7destroyIS3_EEvPT_>
 800ff7e:	bf00      	nop
 800ff80:	3708      	adds	r7, #8
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}

0800ff86 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 800ff86:	b580      	push	{r7, lr}
 800ff88:	b082      	sub	sp, #8
 800ff8a:	af00      	add	r7, sp, #0
 800ff8c:	6078      	str	r0, [r7, #4]
 800ff8e:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2201      	movs	r2, #1
 800ff94:	6839      	ldr	r1, [r7, #0]
 800ff96:	4618      	mov	r0, r3
 800ff98:	f000 f89c 	bl	80100d4 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>
 800ff9c:	bf00      	nop
 800ff9e:	3708      	adds	r7, #8
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}

0800ffa4 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b082      	sub	sp, #8
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800ffac:	6878      	ldr	r0, [r7, #4]
 800ffae:	f000 f8a0 	bl	80100f2 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE7_M_addrEv>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3708      	adds	r7, #8
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}

0800ffbc <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_dec_sizeEj>:
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 800ffbc:	b480      	push	{r7}
 800ffbe:	b083      	sub	sp, #12
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
 800ffc4:	6039      	str	r1, [r7, #0]
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	689a      	ldr	r2, [r3, #8]
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	1ad2      	subs	r2, r2, r3
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	609a      	str	r2, [r3, #8]
 800ffd2:	bf00      	nop
 800ffd4:	370c      	adds	r7, #12
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffdc:	4770      	bx	lr

0800ffde <_ZNKSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_sizeEv>:
      size_t _M_get_size() const { return _M_impl._M_node._M_size; }
 800ffde:	b480      	push	{r7}
 800ffe0:	b083      	sub	sp, #12
 800ffe2:	af00      	add	r7, sp, #0
 800ffe4:	6078      	str	r0, [r7, #4]
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	689b      	ldr	r3, [r3, #8]
 800ffea:	4618      	mov	r0, r3
 800ffec:	370c      	adds	r7, #12
 800ffee:	46bd      	mov	sp, r7
 800fff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff4:	4770      	bx	lr

0800fff6 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_nodeEv>:
      _M_get_node()
 800fff6:	b580      	push	{r7, lr}
 800fff8:	b082      	sub	sp, #8
 800fffa:	af00      	add	r7, sp, #0
 800fffc:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	2101      	movs	r1, #1
 8010002:	4618      	mov	r0, r3
 8010004:	f000 f880 	bl	8010108 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE8allocateERS4_j>
 8010008:	4603      	mov	r3, r0
 801000a:	4618      	mov	r0, r3
 801000c:	3708      	adds	r7, #8
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}

08010012 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEC1ERS4_PS3_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8010012:	b580      	push	{r7, lr}
 8010014:	b084      	sub	sp, #16
 8010016:	af00      	add	r7, sp, #0
 8010018:	60f8      	str	r0, [r7, #12]
 801001a:	60b9      	str	r1, [r7, #8]
 801001c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 801001e:	68b8      	ldr	r0, [r7, #8]
 8010020:	f000 f881 	bl	8010126 <_ZSt11__addressofISaISt10_List_nodeIP9XFTimeoutEEEPT_RS5_>
 8010024:	4602      	mov	r2, r0
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	601a      	str	r2, [r3, #0]
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	687a      	ldr	r2, [r7, #4]
 801002e:	605a      	str	r2, [r3, #4]
      { }
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	4618      	mov	r0, r3
 8010034:	3710      	adds	r7, #16
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}

0801003a <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 801003a:	b580      	push	{r7, lr}
 801003c:	b082      	sub	sp, #8
 801003e:	af00      	add	r7, sp, #0
 8010040:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	685b      	ldr	r3, [r3, #4]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d007      	beq.n	801005a <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6818      	ldr	r0, [r3, #0]
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	2201      	movs	r2, #1
 8010054:	4619      	mov	r1, r3
 8010056:	f000 f83d 	bl	80100d4 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>
      }
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	4618      	mov	r0, r3
 801005e:	3708      	adds	r7, #8
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}

08010064 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010064:	b480      	push	{r7}
 8010066:	b083      	sub	sp, #12
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	4618      	mov	r0, r3
 8010070:	370c      	adds	r7, #12
 8010072:	46bd      	mov	sp, r7
 8010074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010078:	4770      	bx	lr

0801007a <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 801007a:	b580      	push	{r7, lr}
 801007c:	b084      	sub	sp, #16
 801007e:	af00      	add	r7, sp, #0
 8010080:	60f8      	str	r0, [r7, #12]
 8010082:	60b9      	str	r1, [r7, #8]
 8010084:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8010086:	6878      	ldr	r0, [r7, #4]
 8010088:	f7ff ffec 	bl	8010064 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 801008c:	4603      	mov	r3, r0
 801008e:	461a      	mov	r2, r3
 8010090:	68b9      	ldr	r1, [r7, #8]
 8010092:	68f8      	ldr	r0, [r7, #12]
 8010094:	f000 f852 	bl	801013c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE9constructIS3_JRKS3_EEEvPT_DpOT0_>
 8010098:	bf00      	nop
 801009a:	3710      	adds	r7, #16
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}

080100a0 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 80100a0:	b480      	push	{r7}
 80100a2:	b083      	sub	sp, #12
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2200      	movs	r2, #0
 80100ae:	605a      	str	r2, [r3, #4]
	return *this;
 80100b0:	687b      	ldr	r3, [r7, #4]
      }
 80100b2:	4618      	mov	r0, r3
 80100b4:	370c      	adds	r7, #12
 80100b6:	46bd      	mov	sp, r7
 80100b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100bc:	4770      	bx	lr

080100be <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE7destroyIS3_EEvPT_>:
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 80100be:	b480      	push	{r7}
 80100c0:	b083      	sub	sp, #12
 80100c2:	af00      	add	r7, sp, #0
 80100c4:	6078      	str	r0, [r7, #4]
 80100c6:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 80100c8:	bf00      	nop
 80100ca:	370c      	adds	r7, #12
 80100cc:	46bd      	mov	sp, r7
 80100ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d2:	4770      	bx	lr

080100d4 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b084      	sub	sp, #16
 80100d8:	af00      	add	r7, sp, #0
 80100da:	60f8      	str	r0, [r7, #12]
 80100dc:	60b9      	str	r1, [r7, #8]
 80100de:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80100e0:	687a      	ldr	r2, [r7, #4]
 80100e2:	68b9      	ldr	r1, [r7, #8]
 80100e4:	68f8      	ldr	r0, [r7, #12]
 80100e6:	f000 f83f 	bl	8010168 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j>
 80100ea:	bf00      	nop
 80100ec:	3710      	adds	r7, #16
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}

080100f2 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE7_M_addrEv>:
      _M_addr() noexcept
 80100f2:	b480      	push	{r7}
 80100f4:	b083      	sub	sp, #12
 80100f6:	af00      	add	r7, sp, #0
 80100f8:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	4618      	mov	r0, r3
 80100fe:	370c      	adds	r7, #12
 8010100:	46bd      	mov	sp, r7
 8010102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010106:	4770      	bx	lr

08010108 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8010108:	b580      	push	{r7, lr}
 801010a:	b082      	sub	sp, #8
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
 8010110:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8010112:	2200      	movs	r2, #0
 8010114:	6839      	ldr	r1, [r7, #0]
 8010116:	6878      	ldr	r0, [r7, #4]
 8010118:	f000 f833 	bl	8010182 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv>
 801011c:	4603      	mov	r3, r0
 801011e:	4618      	mov	r0, r3
 8010120:	3708      	adds	r7, #8
 8010122:	46bd      	mov	sp, r7
 8010124:	bd80      	pop	{r7, pc}

08010126 <_ZSt11__addressofISaISt10_List_nodeIP9XFTimeoutEEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8010126:	b480      	push	{r7}
 8010128:	b083      	sub	sp, #12
 801012a:	af00      	add	r7, sp, #0
 801012c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	4618      	mov	r0, r3
 8010132:	370c      	adds	r7, #12
 8010134:	46bd      	mov	sp, r7
 8010136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013a:	4770      	bx	lr

0801013c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801013c:	b590      	push	{r4, r7, lr}
 801013e:	b085      	sub	sp, #20
 8010140:	af00      	add	r7, sp, #0
 8010142:	60f8      	str	r0, [r7, #12]
 8010144:	60b9      	str	r1, [r7, #8]
 8010146:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f7ff ff8b 	bl	8010064 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 801014e:	4603      	mov	r3, r0
 8010150:	681c      	ldr	r4, [r3, #0]
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	4619      	mov	r1, r3
 8010156:	2004      	movs	r0, #4
 8010158:	f7fa fc0c 	bl	800a974 <_ZnwjPv>
 801015c:	4603      	mov	r3, r0
 801015e:	601c      	str	r4, [r3, #0]
 8010160:	bf00      	nop
 8010162:	3714      	adds	r7, #20
 8010164:	46bd      	mov	sp, r7
 8010166:	bd90      	pop	{r4, r7, pc}

08010168 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 8010168:	b580      	push	{r7, lr}
 801016a:	b084      	sub	sp, #16
 801016c:	af00      	add	r7, sp, #0
 801016e:	60f8      	str	r0, [r7, #12]
 8010170:	60b9      	str	r1, [r7, #8]
 8010172:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8010174:	68b8      	ldr	r0, [r7, #8]
 8010176:	f005 ff45 	bl	8016004 <_ZdlPv>
      }
 801017a:	bf00      	nop
 801017c:	3710      	adds	r7, #16
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}

08010182 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8010182:	b580      	push	{r7, lr}
 8010184:	b084      	sub	sp, #16
 8010186:	af00      	add	r7, sp, #0
 8010188:	60f8      	str	r0, [r7, #12]
 801018a:	60b9      	str	r1, [r7, #8]
 801018c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 801018e:	68f8      	ldr	r0, [r7, #12]
 8010190:	f000 f818 	bl	80101c4 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8max_sizeEv>
 8010194:	4602      	mov	r2, r0
 8010196:	68bb      	ldr	r3, [r7, #8]
 8010198:	4293      	cmp	r3, r2
 801019a:	bf8c      	ite	hi
 801019c:	2301      	movhi	r3, #1
 801019e:	2300      	movls	r3, #0
 80101a0:	b2db      	uxtb	r3, r3
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d001      	beq.n	80101aa <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80101a6:	f005 ff62 	bl	801606e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80101aa:	68ba      	ldr	r2, [r7, #8]
 80101ac:	4613      	mov	r3, r2
 80101ae:	005b      	lsls	r3, r3, #1
 80101b0:	4413      	add	r3, r2
 80101b2:	009b      	lsls	r3, r3, #2
 80101b4:	4618      	mov	r0, r3
 80101b6:	f005 ff38 	bl	801602a <_Znwj>
 80101ba:	4603      	mov	r3, r0
      }
 80101bc:	4618      	mov	r0, r3
 80101be:	3710      	adds	r7, #16
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}

080101c4 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80101c4:	b480      	push	{r7}
 80101c6:	b083      	sub	sp, #12
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80101cc:	4b03      	ldr	r3, [pc, #12]	; (80101dc <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8max_sizeEv+0x18>)
      }
 80101ce:	4618      	mov	r0, r3
 80101d0:	370c      	adds	r7, #12
 80101d2:	46bd      	mov	sp, r7
 80101d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d8:	4770      	bx	lr
 80101da:	bf00      	nop
 80101dc:	0aaaaaaa 	.word	0x0aaaaaaa

080101e0 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 80101e0:	b480      	push	{r7}
 80101e2:	b083      	sub	sp, #12
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80101ee:	d205      	bcs.n	80101fc <_ZSt16__deque_buf_sizej+0x1c>
 80101f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80101fa:	e000      	b.n	80101fe <_ZSt16__deque_buf_sizej+0x1e>
 80101fc:	2301      	movs	r3, #1
 80101fe:	4618      	mov	r0, r3
 8010200:	370c      	adds	r7, #12
 8010202:	46bd      	mov	sp, r7
 8010204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010208:	4770      	bx	lr
	...

0801020c <_ZN9interface12XFEventQueueC1Ev>:
    virtual const XFEvent * front() = 0;			///< Returns pointer to next event to pop.
    virtual void pop() = 0;							///< Pops the next event from the queue.
    virtual bool pend() = 0;						///< Wait for the next event to arrive. Returns true if an event is in the queue.

public:
    XFEventQueue() = default;
 801020c:	b480      	push	{r7}
 801020e:	b083      	sub	sp, #12
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
 8010214:	4a04      	ldr	r2, [pc, #16]	; (8010228 <_ZN9interface12XFEventQueueC1Ev+0x1c>)
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	601a      	str	r2, [r3, #0]
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	4618      	mov	r0, r3
 801021e:	370c      	adds	r7, #12
 8010220:	46bd      	mov	sp, r7
 8010222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010226:	4770      	bx	lr
 8010228:	08018e0c 	.word	0x08018e0c

0801022c <_ZN9interface12XFEventQueueD1Ev>:
    virtual ~XFEventQueue() = default;
 801022c:	b480      	push	{r7}
 801022e:	b083      	sub	sp, #12
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
 8010234:	4a04      	ldr	r2, [pc, #16]	; (8010248 <_ZN9interface12XFEventQueueD1Ev+0x1c>)
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	601a      	str	r2, [r3, #0]
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	4618      	mov	r0, r3
 801023e:	370c      	adds	r7, #12
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr
 8010248:	08018e0c 	.word	0x08018e0c

0801024c <_ZN9interface12XFEventQueueD0Ev>:
 801024c:	b580      	push	{r7, lr}
 801024e:	b082      	sub	sp, #8
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f7ff ffe9 	bl	801022c <_ZN9interface12XFEventQueueD1Ev>
 801025a:	2104      	movs	r1, #4
 801025c:	6878      	ldr	r0, [r7, #4]
 801025e:	f005 fed3 	bl	8016008 <_ZdlPvj>
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	4618      	mov	r0, r3
 8010266:	3708      	adds	r7, #8
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}

0801026c <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 801026c:	b580      	push	{r7, lr}
 801026e:	b082      	sub	sp, #8
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	4618      	mov	r0, r3
 8010278:	f000 f8c4 	bl	8010404 <_ZNSt5dequeIPK7XFEventSaIS2_EED1Ev>
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	4618      	mov	r0, r3
 8010280:	3708      	adds	r7, #8
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}
	...

08010288 <_ZN19XFEventQueueDefaultC1Ev>:
#if (USE_XF_EVENT_QUEUE_DEFAULT_IDF_IMPLEMENTATION != 0)

#include <cassert>
#include "eventqueue-default.h"

XFEventQueueDefault::XFEventQueueDefault()
 8010288:	b580      	push	{r7, lr}
 801028a:	b082      	sub	sp, #8
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	4618      	mov	r0, r3
 8010294:	f7ff ffba 	bl	801020c <_ZN9interface12XFEventQueueC1Ev>
 8010298:	4a08      	ldr	r2, [pc, #32]	; (80102bc <_ZN19XFEventQueueDefaultC1Ev+0x34>)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	601a      	str	r2, [r3, #0]
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	3304      	adds	r3, #4
 80102a2:	4618      	mov	r0, r3
 80102a4:	f000 ffd2 	bl	801124c <_ZN14XFMutexDefaultC1Ev>
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	3308      	adds	r3, #8
 80102ac:	4618      	mov	r0, r3
 80102ae:	f000 f89c 	bl	80103ea <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEEC1IS5_vEEv>
{

}
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	4618      	mov	r0, r3
 80102b6:	3708      	adds	r7, #8
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}
 80102bc:	08018de8 	.word	0x08018de8

080102c0 <_ZN19XFEventQueueDefaultD1Ev>:

XFEventQueueDefault::~XFEventQueueDefault()
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b082      	sub	sp, #8
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
 80102c8:	4a0a      	ldr	r2, [pc, #40]	; (80102f4 <_ZN19XFEventQueueDefaultD1Ev+0x34>)
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	601a      	str	r2, [r3, #0]
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	3308      	adds	r3, #8
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7ff ffca 	bl	801026c <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEED1Ev>
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	3304      	adds	r3, #4
 80102dc:	4618      	mov	r0, r3
 80102de:	f000 ffc7 	bl	8011270 <_ZN14XFMutexDefaultD1Ev>
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	4618      	mov	r0, r3
 80102e6:	f7ff ffa1 	bl	801022c <_ZN9interface12XFEventQueueD1Ev>
{

}
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	4618      	mov	r0, r3
 80102ee:	3708      	adds	r7, #8
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}
 80102f4:	08018de8 	.word	0x08018de8

080102f8 <_ZN19XFEventQueueDefaultD0Ev>:
XFEventQueueDefault::~XFEventQueueDefault()
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b082      	sub	sp, #8
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
}
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	f7ff ffdd 	bl	80102c0 <_ZN19XFEventQueueDefaultD1Ev>
 8010306:	2130      	movs	r1, #48	; 0x30
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f005 fe7d 	bl	8016008 <_ZdlPvj>
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	4618      	mov	r0, r3
 8010312:	3708      	adds	r7, #8
 8010314:	46bd      	mov	sp, r7
 8010316:	bd80      	pop	{r7, pc}

08010318 <_ZNK19XFEventQueueDefault5emptyEv>:

bool XFEventQueueDefault::empty() const
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b082      	sub	sp, #8
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
    return _queue.empty();
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	3308      	adds	r3, #8
 8010324:	4618      	mov	r0, r3
 8010326:	f000 f892 	bl	801044e <_ZNKSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE5emptyEv>
 801032a:	4603      	mov	r3, r0
}
 801032c:	4618      	mov	r0, r3
 801032e:	3708      	adds	r7, #8
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}

08010334 <_ZN19XFEventQueueDefault4pushEPK7XFEventb>:

bool XFEventQueueDefault::push(const XFEvent * pEvent, bool fromISR)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b084      	sub	sp, #16
 8010338:	af00      	add	r7, sp, #0
 801033a:	60f8      	str	r0, [r7, #12]
 801033c:	60b9      	str	r1, [r7, #8]
 801033e:	4613      	mov	r3, r2
 8010340:	71fb      	strb	r3, [r7, #7]
    _mutex.lock();
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	3304      	adds	r3, #4
 8010346:	4618      	mov	r0, r3
 8010348:	f000 ffb4 	bl	80112b4 <_ZN14XFMutexDefault4lockEv>
    {
        _queue.push(pEvent);
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	3308      	adds	r3, #8
 8010350:	f107 0208 	add.w	r2, r7, #8
 8010354:	4611      	mov	r1, r2
 8010356:	4618      	mov	r0, r3
 8010358:	f000 f886 	bl	8010468 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE4pushERKS2_>
    }
    _mutex.unlock();
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	3304      	adds	r3, #4
 8010360:	4618      	mov	r0, r3
 8010362:	f000 ffb1 	bl	80112c8 <_ZN14XFMutexDefault6unlockEv>

    return true;
 8010366:	2301      	movs	r3, #1
}
 8010368:	4618      	mov	r0, r3
 801036a:	3710      	adds	r7, #16
 801036c:	46bd      	mov	sp, r7
 801036e:	bd80      	pop	{r7, pc}

08010370 <_ZN19XFEventQueueDefault5frontEv>:

const XFEvent * XFEventQueueDefault::front()
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b084      	sub	sp, #16
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
    const XFEvent * event;
    _mutex.lock();
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	3304      	adds	r3, #4
 801037c:	4618      	mov	r0, r3
 801037e:	f000 ff99 	bl	80112b4 <_ZN14XFMutexDefault4lockEv>
    {
        event =  _queue.front();
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	3308      	adds	r3, #8
 8010386:	4618      	mov	r0, r3
 8010388:	f000 f87c 	bl	8010484 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE5frontEv>
 801038c:	4603      	mov	r3, r0
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	60fb      	str	r3, [r7, #12]
    }
    _mutex.unlock();
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	3304      	adds	r3, #4
 8010396:	4618      	mov	r0, r3
 8010398:	f000 ff96 	bl	80112c8 <_ZN14XFMutexDefault6unlockEv>
    return event;
 801039c:	68fb      	ldr	r3, [r7, #12]
}
 801039e:	4618      	mov	r0, r3
 80103a0:	3710      	adds	r7, #16
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}

080103a6 <_ZN19XFEventQueueDefault3popEv>:

void XFEventQueueDefault::pop()
{
 80103a6:	b580      	push	{r7, lr}
 80103a8:	b082      	sub	sp, #8
 80103aa:	af00      	add	r7, sp, #0
 80103ac:	6078      	str	r0, [r7, #4]
    _mutex.lock();
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	3304      	adds	r3, #4
 80103b2:	4618      	mov	r0, r3
 80103b4:	f000 ff7e 	bl	80112b4 <_ZN14XFMutexDefault4lockEv>
    {
        _queue.pop();
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	3308      	adds	r3, #8
 80103bc:	4618      	mov	r0, r3
 80103be:	f000 f86e 	bl	801049e <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE3popEv>
    }
    _mutex.unlock();
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	3304      	adds	r3, #4
 80103c6:	4618      	mov	r0, r3
 80103c8:	f000 ff7e 	bl	80112c8 <_ZN14XFMutexDefault6unlockEv>
}
 80103cc:	bf00      	nop
 80103ce:	3708      	adds	r7, #8
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}

080103d4 <_ZN19XFEventQueueDefault4pendEv>:

bool XFEventQueueDefault::pend()
{
 80103d4:	b480      	push	{r7}
 80103d6:	b083      	sub	sp, #12
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
    // Method cannot be used in an IDF! Waiting within
    // this method would block the whole XF
    return false;
 80103dc:	2300      	movs	r3, #0
}
 80103de:	4618      	mov	r0, r3
 80103e0:	370c      	adds	r7, #12
 80103e2:	46bd      	mov	sp, r7
 80103e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e8:	4770      	bx	lr

080103ea <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEEC1IS5_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 80103ea:	b580      	push	{r7, lr}
 80103ec:	b082      	sub	sp, #8
 80103ee:	af00      	add	r7, sp, #0
 80103f0:	6078      	str	r0, [r7, #4]
	: c() { }
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	4618      	mov	r0, r3
 80103f6:	f000 f85e 	bl	80104b6 <_ZNSt5dequeIPK7XFEventSaIS2_EEC1Ev>
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	4618      	mov	r0, r3
 80103fe:	3708      	adds	r7, #8
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}

08010404 <_ZNSt5dequeIPK7XFEventSaIS2_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8010404:	b580      	push	{r7, lr}
 8010406:	b08a      	sub	sp, #40	; 0x28
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 801040c:	f107 0308 	add.w	r3, r7, #8
 8010410:	6879      	ldr	r1, [r7, #4]
 8010412:	4618      	mov	r0, r3
 8010414:	f000 f88a 	bl	801052c <_ZNSt5dequeIPK7XFEventSaIS2_EE5beginEv>
 8010418:	f107 0318 	add.w	r3, r7, #24
 801041c:	6879      	ldr	r1, [r7, #4]
 801041e:	4618      	mov	r0, r3
 8010420:	f000 f893 	bl	801054a <_ZNSt5dequeIPK7XFEventSaIS2_EE3endEv>
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	4618      	mov	r0, r3
 8010428:	f000 f89e 	bl	8010568 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 801042c:	4603      	mov	r3, r0
 801042e:	f107 0218 	add.w	r2, r7, #24
 8010432:	f107 0108 	add.w	r1, r7, #8
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f000 f8bd 	bl	80105b6 <_ZNSt5dequeIPK7XFEventSaIS2_EE15_M_destroy_dataESt15_Deque_iteratorIS2_RS2_PS2_ES8_RKS3_>
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	4618      	mov	r0, r3
 8010440:	f000 f852 	bl	80104e8 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	4618      	mov	r0, r3
 8010448:	3728      	adds	r7, #40	; 0x28
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}

0801044e <_ZNKSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE5emptyEv>:

      /**
       *  Returns true if the %queue is empty.
       */
      _GLIBCXX_NODISCARD bool
      empty() const
 801044e:	b580      	push	{r7, lr}
 8010450:	b082      	sub	sp, #8
 8010452:	af00      	add	r7, sp, #0
 8010454:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	4618      	mov	r0, r3
 801045a:	f000 f8b9 	bl	80105d0 <_ZNKSt5dequeIPK7XFEventSaIS2_EE5emptyEv>
 801045e:	4603      	mov	r3, r0
 8010460:	4618      	mov	r0, r3
 8010462:	3708      	adds	r7, #8
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}

08010468 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE4pushERKS2_>:
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 8010468:	b580      	push	{r7, lr}
 801046a:	b082      	sub	sp, #8
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
 8010470:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6839      	ldr	r1, [r7, #0]
 8010476:	4618      	mov	r0, r3
 8010478:	f000 f8bc 	bl	80105f4 <_ZNSt5dequeIPK7XFEventSaIS2_EE9push_backERKS2_>
 801047c:	bf00      	nop
 801047e:	3708      	adds	r7, #8
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}

08010484 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE5frontEv>:
      front()
 8010484:	b580      	push	{r7, lr}
 8010486:	b082      	sub	sp, #8
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
	return c.front();
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	4618      	mov	r0, r3
 8010490:	f000 f8d1 	bl	8010636 <_ZNSt5dequeIPK7XFEventSaIS2_EE5frontEv>
 8010494:	4603      	mov	r3, r0
      }
 8010496:	4618      	mov	r0, r3
 8010498:	3708      	adds	r7, #8
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}

0801049e <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 801049e:	b580      	push	{r7, lr}
 80104a0:	b082      	sub	sp, #8
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	4618      	mov	r0, r3
 80104aa:	f000 f8d8 	bl	801065e <_ZNSt5dequeIPK7XFEventSaIS2_EE9pop_frontEv>
      }
 80104ae:	bf00      	nop
 80104b0:	3708      	adds	r7, #8
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}

080104b6 <_ZNSt5dequeIPK7XFEventSaIS2_EEC1Ev>:
      deque() : _Base() { }
 80104b6:	b580      	push	{r7, lr}
 80104b8:	b082      	sub	sp, #8
 80104ba:	af00      	add	r7, sp, #0
 80104bc:	6078      	str	r0, [r7, #4]
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	4618      	mov	r0, r3
 80104c2:	f000 f8eb 	bl	801069c <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EEC1Ev>
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	4618      	mov	r0, r3
 80104ca:	3708      	adds	r7, #8
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}

080104d0 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b082      	sub	sp, #8
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f000 f8f0 	bl	80106be <_ZNSaIPK7XFEventED1Ev>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	4618      	mov	r0, r3
 80104e2:	3708      	adds	r7, #8
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}

080104e8 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b082      	sub	sp, #8
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d010      	beq.n	801051a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8010500:	3304      	adds	r3, #4
 8010502:	461a      	mov	r2, r3
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f000 f8e6 	bl	80106d6 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6819      	ldr	r1, [r3, #0]
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	685b      	ldr	r3, [r3, #4]
 8010512:	461a      	mov	r2, r3
 8010514:	6878      	ldr	r0, [r7, #4]
 8010516:	f000 f8f8 	bl	801070a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_deallocate_mapEPPS2_j>
    }
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	4618      	mov	r0, r3
 801051e:	f7ff ffd7 	bl	80104d0 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE11_Deque_implD1Ev>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	4618      	mov	r0, r3
 8010526:	3708      	adds	r7, #8
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}

0801052c <_ZNSt5dequeIPK7XFEventSaIS2_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 801052c:	b580      	push	{r7, lr}
 801052e:	b082      	sub	sp, #8
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
 8010534:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	3308      	adds	r3, #8
 801053a:	4619      	mov	r1, r3
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f000 f81e 	bl	801057e <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1ERKS5_>
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	3708      	adds	r7, #8
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}

0801054a <_ZNSt5dequeIPK7XFEventSaIS2_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 801054a:	b580      	push	{r7, lr}
 801054c:	b082      	sub	sp, #8
 801054e:	af00      	add	r7, sp, #0
 8010550:	6078      	str	r0, [r7, #4]
 8010552:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	3318      	adds	r3, #24
 8010558:	4619      	mov	r1, r3
 801055a:	6878      	ldr	r0, [r7, #4]
 801055c:	f000 f80f 	bl	801057e <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1ERKS5_>
 8010560:	6878      	ldr	r0, [r7, #4]
 8010562:	3708      	adds	r7, #8
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}

08010568 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8010568:	b480      	push	{r7}
 801056a:	b083      	sub	sp, #12
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	4618      	mov	r0, r3
 8010574:	370c      	adds	r7, #12
 8010576:	46bd      	mov	sp, r7
 8010578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057c:	4770      	bx	lr

0801057e <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1ERKS5_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 801057e:	b480      	push	{r7}
 8010580:	b083      	sub	sp, #12
 8010582:	af00      	add	r7, sp, #0
 8010584:	6078      	str	r0, [r7, #4]
 8010586:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	605a      	str	r2, [r3, #4]
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	689a      	ldr	r2, [r3, #8]
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	609a      	str	r2, [r3, #8]
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	68da      	ldr	r2, [r3, #12]
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	60da      	str	r2, [r3, #12]
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	4618      	mov	r0, r3
 80105ac:	370c      	adds	r7, #12
 80105ae:	46bd      	mov	sp, r7
 80105b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b4:	4770      	bx	lr

080105b6 <_ZNSt5dequeIPK7XFEventSaIS2_EE15_M_destroy_dataESt15_Deque_iteratorIS2_RS2_PS2_ES8_RKS3_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 80105b6:	b480      	push	{r7}
 80105b8:	b08d      	sub	sp, #52	; 0x34
 80105ba:	af00      	add	r7, sp, #0
 80105bc:	60f8      	str	r0, [r7, #12]
 80105be:	60b9      	str	r1, [r7, #8]
 80105c0:	607a      	str	r2, [r7, #4]
 80105c2:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 80105c4:	bf00      	nop
 80105c6:	3734      	adds	r7, #52	; 0x34
 80105c8:	46bd      	mov	sp, r7
 80105ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ce:	4770      	bx	lr

080105d0 <_ZNKSt5dequeIPK7XFEventSaIS2_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b082      	sub	sp, #8
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f103 0218 	add.w	r2, r3, #24
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	3308      	adds	r3, #8
 80105e2:	4619      	mov	r1, r3
 80105e4:	4610      	mov	r0, r2
 80105e6:	f000 f8ac 	bl	8010742 <_ZSteqIPK7XFEventRS2_PS2_EbRKSt15_Deque_iteratorIT_T0_T1_ESB_>
 80105ea:	4603      	mov	r3, r0
 80105ec:	4618      	mov	r0, r3
 80105ee:	3708      	adds	r7, #8
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}

080105f4 <_ZNSt5dequeIPK7XFEventSaIS2_EE9push_backERKS2_>:
      push_back(const value_type& __x)
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b082      	sub	sp, #8
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
 80105fc:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6a1b      	ldr	r3, [r3, #32]
 8010606:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 8010608:	429a      	cmp	r2, r3
 801060a:	d00c      	beq.n	8010626 <_ZNSt5dequeIPK7XFEventSaIS2_EE9push_backERKS2_+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	699b      	ldr	r3, [r3, #24]
 8010612:	683a      	ldr	r2, [r7, #0]
 8010614:	4619      	mov	r1, r3
 8010616:	f000 f8a8 	bl	801076a <_ZNSt16allocator_traitsISaIPK7XFEventEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	699b      	ldr	r3, [r3, #24]
 801061e:	1d1a      	adds	r2, r3, #4
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	619a      	str	r2, [r3, #24]
      }
 8010624:	e003      	b.n	801062e <_ZNSt5dequeIPK7XFEventSaIS2_EE9push_backERKS2_+0x3a>
	  _M_push_back_aux(__x);
 8010626:	6839      	ldr	r1, [r7, #0]
 8010628:	6878      	ldr	r0, [r7, #4]
 801062a:	f000 f8b1 	bl	8010790 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>
      }
 801062e:	bf00      	nop
 8010630:	3708      	adds	r7, #8
 8010632:	46bd      	mov	sp, r7
 8010634:	bd80      	pop	{r7, pc}

08010636 <_ZNSt5dequeIPK7XFEventSaIS2_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8010636:	b580      	push	{r7, lr}
 8010638:	b086      	sub	sp, #24
 801063a:	af00      	add	r7, sp, #0
 801063c:	6078      	str	r0, [r7, #4]
	return *begin();
 801063e:	f107 0308 	add.w	r3, r7, #8
 8010642:	6879      	ldr	r1, [r7, #4]
 8010644:	4618      	mov	r0, r3
 8010646:	f7ff ff71 	bl	801052c <_ZNSt5dequeIPK7XFEventSaIS2_EE5beginEv>
 801064a:	f107 0308 	add.w	r3, r7, #8
 801064e:	4618      	mov	r0, r3
 8010650:	f000 f8e2 	bl	8010818 <_ZNKSt15_Deque_iteratorIPK7XFEventRS2_PS2_EdeEv>
 8010654:	4603      	mov	r3, r0
      }
 8010656:	4618      	mov	r0, r3
 8010658:	3718      	adds	r7, #24
 801065a:	46bd      	mov	sp, r7
 801065c:	bd80      	pop	{r7, pc}

0801065e <_ZNSt5dequeIPK7XFEventSaIS2_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 801065e:	b580      	push	{r7, lr}
 8010660:	b082      	sub	sp, #8
 8010662:	af00      	add	r7, sp, #0
 8010664:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	691b      	ldr	r3, [r3, #16]
 801066e:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 8010670:	429a      	cmp	r2, r3
 8010672:	d00c      	beq.n	801068e <_ZNSt5dequeIPK7XFEventSaIS2_EE9pop_frontEv+0x30>
	    _Alloc_traits::destroy(this->_M_impl,
 8010674:	687a      	ldr	r2, [r7, #4]
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	689b      	ldr	r3, [r3, #8]
 801067a:	4619      	mov	r1, r3
 801067c:	4610      	mov	r0, r2
 801067e:	f000 f8d7 	bl	8010830 <_ZNSt16allocator_traitsISaIPK7XFEventEE7destroyIS2_EEvRS3_PT_>
	    ++this->_M_impl._M_start._M_cur;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	689b      	ldr	r3, [r3, #8]
 8010686:	1d1a      	adds	r2, r3, #4
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	609a      	str	r2, [r3, #8]
      }
 801068c:	e002      	b.n	8010694 <_ZNSt5dequeIPK7XFEventSaIS2_EE9pop_frontEv+0x36>
	  _M_pop_front_aux();
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f000 f8db 	bl	801084a <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_pop_front_auxEv>
      }
 8010694:	bf00      	nop
 8010696:	3708      	adds	r7, #8
 8010698:	46bd      	mov	sp, r7
 801069a:	bd80      	pop	{r7, pc}

0801069c <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EEC1Ev>:
      _Deque_base()
 801069c:	b580      	push	{r7, lr}
 801069e:	b082      	sub	sp, #8
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
      : _M_impl()
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	4618      	mov	r0, r3
 80106a8:	f000 f8f7 	bl	801089a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 80106ac:	2100      	movs	r1, #0
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	f000 f90f 	bl	80108d2 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj>
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	4618      	mov	r0, r3
 80106b8:	3708      	adds	r7, #8
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd80      	pop	{r7, pc}

080106be <_ZNSaIPK7XFEventED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80106be:	b580      	push	{r7, lr}
 80106c0:	b082      	sub	sp, #8
 80106c2:	af00      	add	r7, sp, #0
 80106c4:	6078      	str	r0, [r7, #4]
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	f000 f966 	bl	8010998 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventED1Ev>
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	4618      	mov	r0, r3
 80106d0:	3708      	adds	r7, #8
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}

080106d6 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_>:
    _Deque_base<_Tp, _Alloc>::
 80106d6:	b580      	push	{r7, lr}
 80106d8:	b086      	sub	sp, #24
 80106da:	af00      	add	r7, sp, #0
 80106dc:	60f8      	str	r0, [r7, #12]
 80106de:	60b9      	str	r1, [r7, #8]
 80106e0:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	617b      	str	r3, [r7, #20]
 80106e6:	697a      	ldr	r2, [r7, #20]
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	429a      	cmp	r2, r3
 80106ec:	d209      	bcs.n	8010702 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x2c>
	_M_deallocate_node(*__n);
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	4619      	mov	r1, r3
 80106f4:	68f8      	ldr	r0, [r7, #12]
 80106f6:	f000 f95a 	bl	80109ae <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE18_M_deallocate_nodeEPS2_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80106fa:	697b      	ldr	r3, [r7, #20]
 80106fc:	3304      	adds	r3, #4
 80106fe:	617b      	str	r3, [r7, #20]
 8010700:	e7f1      	b.n	80106e6 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x10>
    }
 8010702:	bf00      	nop
 8010704:	3718      	adds	r7, #24
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}

0801070a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_deallocate_mapEPPS2_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 801070a:	b580      	push	{r7, lr}
 801070c:	b086      	sub	sp, #24
 801070e:	af00      	add	r7, sp, #0
 8010710:	60f8      	str	r0, [r7, #12]
 8010712:	60b9      	str	r1, [r7, #8]
 8010714:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8010716:	f107 0314 	add.w	r3, r7, #20
 801071a:	68f9      	ldr	r1, [r7, #12]
 801071c:	4618      	mov	r0, r3
 801071e:	f000 f959 	bl	80109d4 <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8010722:	f107 0314 	add.w	r3, r7, #20
 8010726:	687a      	ldr	r2, [r7, #4]
 8010728:	68b9      	ldr	r1, [r7, #8]
 801072a:	4618      	mov	r0, r3
 801072c:	f000 f96f 	bl	8010a0e <_ZNSt16allocator_traitsISaIPPK7XFEventEE10deallocateERS4_PS3_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8010730:	f107 0314 	add.w	r3, r7, #20
 8010734:	4618      	mov	r0, r3
 8010736:	f000 f95e 	bl	80109f6 <_ZNSaIPPK7XFEventED1Ev>
      }
 801073a:	bf00      	nop
 801073c:	3718      	adds	r7, #24
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}

08010742 <_ZSteqIPK7XFEventRS2_PS2_EbRKSt15_Deque_iteratorIT_T0_T1_ESB_>:
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 8010742:	b480      	push	{r7}
 8010744:	b083      	sub	sp, #12
 8010746:	af00      	add	r7, sp, #0
 8010748:	6078      	str	r0, [r7, #4]
 801074a:	6039      	str	r1, [r7, #0]
    { return __x._M_cur == __y._M_cur; }
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681a      	ldr	r2, [r3, #0]
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	429a      	cmp	r2, r3
 8010756:	bf0c      	ite	eq
 8010758:	2301      	moveq	r3, #1
 801075a:	2300      	movne	r3, #0
 801075c:	b2db      	uxtb	r3, r3
 801075e:	4618      	mov	r0, r3
 8010760:	370c      	adds	r7, #12
 8010762:	46bd      	mov	sp, r7
 8010764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010768:	4770      	bx	lr

0801076a <_ZNSt16allocator_traitsISaIPK7XFEventEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 801076a:	b580      	push	{r7, lr}
 801076c:	b084      	sub	sp, #16
 801076e:	af00      	add	r7, sp, #0
 8010770:	60f8      	str	r0, [r7, #12]
 8010772:	60b9      	str	r1, [r7, #8]
 8010774:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8010776:	6878      	ldr	r0, [r7, #4]
 8010778:	f000 f958 	bl	8010a2c <_ZSt7forwardIRKPK7XFEventEOT_RNSt16remove_referenceIS5_E4typeE>
 801077c:	4603      	mov	r3, r0
 801077e:	461a      	mov	r2, r3
 8010780:	68b9      	ldr	r1, [r7, #8]
 8010782:	68f8      	ldr	r0, [r7, #12]
 8010784:	f000 f95d 	bl	8010a42 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE9constructIS3_JRKS3_EEEvPT_DpOT0_>
 8010788:	bf00      	nop
 801078a:	3710      	adds	r7, #16
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}

08010790 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8010790:	b5b0      	push	{r4, r5, r7, lr}
 8010792:	b082      	sub	sp, #8
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f000 f967 	bl	8010a6e <_ZNKSt5dequeIPK7XFEventSaIS2_EE4sizeEv>
 80107a0:	4604      	mov	r4, r0
 80107a2:	6878      	ldr	r0, [r7, #4]
 80107a4:	f000 f975 	bl	8010a92 <_ZNKSt5dequeIPK7XFEventSaIS2_EE8max_sizeEv>
 80107a8:	4603      	mov	r3, r0
 80107aa:	429c      	cmp	r4, r3
 80107ac:	bf0c      	ite	eq
 80107ae:	2301      	moveq	r3, #1
 80107b0:	2300      	movne	r3, #0
 80107b2:	b2db      	uxtb	r3, r3
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d002      	beq.n	80107be <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x2e>
	  __throw_length_error(
 80107b8:	4816      	ldr	r0, [pc, #88]	; (8010814 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x84>)
 80107ba:	f005 fc5e 	bl	801607a <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 80107be:	2101      	movs	r1, #1
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f000 f977 	bl	8010ab4 <_ZNSt5dequeIPK7XFEventSaIS2_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80107c6:	687a      	ldr	r2, [r7, #4]
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107cc:	1d1c      	adds	r4, r3, #4
 80107ce:	4610      	mov	r0, r2
 80107d0:	f000 f98b 	bl	8010aea <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_allocate_nodeEv>
 80107d4:	4603      	mov	r3, r0
 80107d6:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 80107d8:	687c      	ldr	r4, [r7, #4]
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	699d      	ldr	r5, [r3, #24]
 80107de:	6838      	ldr	r0, [r7, #0]
 80107e0:	f000 f924 	bl	8010a2c <_ZSt7forwardIRKPK7XFEventEOT_RNSt16remove_referenceIS5_E4typeE>
 80107e4:	4603      	mov	r3, r0
 80107e6:	461a      	mov	r2, r3
 80107e8:	4629      	mov	r1, r5
 80107ea:	4620      	mov	r0, r4
 80107ec:	f7ff ffbd 	bl	801076a <_ZNSt16allocator_traitsISaIPK7XFEventEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
	                             this->_M_impl._M_finish._M_cur,
			             std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f103 0218 	add.w	r2, r3, #24
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107fa:	3304      	adds	r3, #4
 80107fc:	4619      	mov	r1, r3
 80107fe:	4610      	mov	r0, r2
 8010800:	f000 f985 	bl	8010b0e <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	69da      	ldr	r2, [r3, #28]
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 801080c:	bf00      	nop
 801080e:	3708      	adds	r7, #8
 8010810:	46bd      	mov	sp, r7
 8010812:	bdb0      	pop	{r4, r5, r7, pc}
 8010814:	08018718 	.word	0x08018718

08010818 <_ZNKSt15_Deque_iteratorIPK7XFEventRS2_PS2_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8010818:	b480      	push	{r7}
 801081a:	b083      	sub	sp, #12
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	4618      	mov	r0, r3
 8010826:	370c      	adds	r7, #12
 8010828:	46bd      	mov	sp, r7
 801082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082e:	4770      	bx	lr

08010830 <_ZNSt16allocator_traitsISaIPK7XFEventEE7destroyIS2_EEvRS3_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8010830:	b580      	push	{r7, lr}
 8010832:	b082      	sub	sp, #8
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
 8010838:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 801083a:	6839      	ldr	r1, [r7, #0]
 801083c:	6878      	ldr	r0, [r7, #4]
 801083e:	f000 f97f 	bl	8010b40 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE7destroyIS3_EEvPT_>
 8010842:	bf00      	nop
 8010844:	3708      	adds	r7, #8
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}

0801084a <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 801084a:	b580      	push	{r7, lr}
 801084c:	b082      	sub	sp, #8
 801084e:	af00      	add	r7, sp, #0
 8010850:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	4618      	mov	r0, r3
 8010856:	f7ff fe87 	bl	8010568 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 801085a:	4602      	mov	r2, r0
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	689b      	ldr	r3, [r3, #8]
 8010860:	4619      	mov	r1, r3
 8010862:	4610      	mov	r0, r2
 8010864:	f7ff ffe4 	bl	8010830 <_ZNSt16allocator_traitsISaIPK7XFEventEE7destroyIS2_EEvRS3_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8010868:	687a      	ldr	r2, [r7, #4]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	68db      	ldr	r3, [r3, #12]
 801086e:	4619      	mov	r1, r3
 8010870:	4610      	mov	r0, r2
 8010872:	f000 f89c 	bl	80109ae <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE18_M_deallocate_nodeEPS2_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	f103 0208 	add.w	r2, r3, #8
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	695b      	ldr	r3, [r3, #20]
 8010880:	3304      	adds	r3, #4
 8010882:	4619      	mov	r1, r3
 8010884:	4610      	mov	r0, r2
 8010886:	f000 f942 	bl	8010b0e <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	68da      	ldr	r2, [r3, #12]
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	609a      	str	r2, [r3, #8]
    }
 8010892:	bf00      	nop
 8010894:	3708      	adds	r7, #8
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}

0801089a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE11_Deque_implC1Ev>:
	_Deque_impl()
 801089a:	b580      	push	{r7, lr}
 801089c:	b082      	sub	sp, #8
 801089e:	af00      	add	r7, sp, #0
 80108a0:	6078      	str	r0, [r7, #4]
	  _M_start(), _M_finish()
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f000 f957 	bl	8010b56 <_ZNSaIPK7XFEventEC1Ev>
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2200      	movs	r2, #0
 80108ac:	601a      	str	r2, [r3, #0]
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	2200      	movs	r2, #0
 80108b2:	605a      	str	r2, [r3, #4]
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	3308      	adds	r3, #8
 80108b8:	4618      	mov	r0, r3
 80108ba:	f000 f958 	bl	8010b6e <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1Ev>
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	3318      	adds	r3, #24
 80108c2:	4618      	mov	r0, r3
 80108c4:	f000 f953 	bl	8010b6e <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1Ev>
	{ }
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	4618      	mov	r0, r3
 80108cc:	3708      	adds	r7, #8
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}

080108d2 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80108d2:	b590      	push	{r4, r7, lr}
 80108d4:	b089      	sub	sp, #36	; 0x24
 80108d6:	af00      	add	r7, sp, #0
 80108d8:	6078      	str	r0, [r7, #4]
 80108da:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 80108dc:	2004      	movs	r0, #4
 80108de:	f7ff fc7f 	bl	80101e0 <_ZSt16__deque_buf_sizej>
 80108e2:	4602      	mov	r2, r0
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80108ea:	3301      	adds	r3, #1
 80108ec:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80108ee:	2308      	movs	r3, #8
 80108f0:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 80108f2:	69fb      	ldr	r3, [r7, #28]
 80108f4:	3302      	adds	r3, #2
 80108f6:	613b      	str	r3, [r7, #16]
 80108f8:	f107 0210 	add.w	r2, r7, #16
 80108fc:	f107 030c 	add.w	r3, r7, #12
 8010900:	4611      	mov	r1, r2
 8010902:	4618      	mov	r0, r3
 8010904:	f000 f94a 	bl	8010b9c <_ZSt3maxIjERKT_S2_S2_>
 8010908:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 801090a:	681a      	ldr	r2, [r3, #0]
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	685b      	ldr	r3, [r3, #4]
 8010914:	4619      	mov	r1, r3
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f000 f954 	bl	8010bc4 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_allocate_mapEj>
 801091c:	4602      	mov	r2, r0
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	6859      	ldr	r1, [r3, #4]
 801092a:	69fb      	ldr	r3, [r7, #28]
 801092c:	1acb      	subs	r3, r1, r3
 801092e:	085b      	lsrs	r3, r3, #1
 8010930:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8010932:	4413      	add	r3, r2
 8010934:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8010936:	69fb      	ldr	r3, [r7, #28]
 8010938:	009b      	lsls	r3, r3, #2
 801093a:	69ba      	ldr	r2, [r7, #24]
 801093c:	4413      	add	r3, r2
 801093e:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8010940:	697a      	ldr	r2, [r7, #20]
 8010942:	69b9      	ldr	r1, [r7, #24]
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	f000 f95a 	bl	8010bfe <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_>
      this->_M_impl._M_start._M_set_node(__nstart);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	3308      	adds	r3, #8
 801094e:	69b9      	ldr	r1, [r7, #24]
 8010950:	4618      	mov	r0, r3
 8010952:	f000 f8dc 	bl	8010b0e <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f103 0218 	add.w	r2, r3, #24
 801095c:	697b      	ldr	r3, [r7, #20]
 801095e:	3b04      	subs	r3, #4
 8010960:	4619      	mov	r1, r3
 8010962:	4610      	mov	r0, r2
 8010964:	f000 f8d3 	bl	8010b0e <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	68da      	ldr	r2, [r3, #12]
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8010974:	2004      	movs	r0, #4
 8010976:	f7ff fc33 	bl	80101e0 <_ZSt16__deque_buf_sizej>
 801097a:	4602      	mov	r2, r0
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010982:	fb02 f201 	mul.w	r2, r2, r1
 8010986:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8010988:	009b      	lsls	r3, r3, #2
 801098a:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	619a      	str	r2, [r3, #24]
    }
 8010990:	bf00      	nop
 8010992:	3724      	adds	r7, #36	; 0x24
 8010994:	46bd      	mov	sp, r7
 8010996:	bd90      	pop	{r4, r7, pc}

08010998 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8010998:	b480      	push	{r7}
 801099a:	b083      	sub	sp, #12
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	4618      	mov	r0, r3
 80109a4:	370c      	adds	r7, #12
 80109a6:	46bd      	mov	sp, r7
 80109a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ac:	4770      	bx	lr

080109ae <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE18_M_deallocate_nodeEPS2_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80109ae:	b590      	push	{r4, r7, lr}
 80109b0:	b083      	sub	sp, #12
 80109b2:	af00      	add	r7, sp, #0
 80109b4:	6078      	str	r0, [r7, #4]
 80109b6:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80109b8:	687c      	ldr	r4, [r7, #4]
 80109ba:	2004      	movs	r0, #4
 80109bc:	f7ff fc10 	bl	80101e0 <_ZSt16__deque_buf_sizej>
 80109c0:	4603      	mov	r3, r0
 80109c2:	461a      	mov	r2, r3
 80109c4:	6839      	ldr	r1, [r7, #0]
 80109c6:	4620      	mov	r0, r4
 80109c8:	f000 f933 	bl	8010c32 <_ZNSt16allocator_traitsISaIPK7XFEventEE10deallocateERS3_PS2_j>
      }
 80109cc:	bf00      	nop
 80109ce:	370c      	adds	r7, #12
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd90      	pop	{r4, r7, pc}

080109d4 <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b082      	sub	sp, #8
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
 80109dc:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80109de:	6838      	ldr	r0, [r7, #0]
 80109e0:	f000 f936 	bl	8010c50 <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 80109e4:	4603      	mov	r3, r0
 80109e6:	4619      	mov	r1, r3
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	f000 f93c 	bl	8010c66 <_ZNSaIPPK7XFEventEC1IS1_EERKSaIT_E>
 80109ee:	6878      	ldr	r0, [r7, #4]
 80109f0:	3708      	adds	r7, #8
 80109f2:	46bd      	mov	sp, r7
 80109f4:	bd80      	pop	{r7, pc}

080109f6 <_ZNSaIPPK7XFEventED1Ev>:
 80109f6:	b580      	push	{r7, lr}
 80109f8:	b082      	sub	sp, #8
 80109fa:	af00      	add	r7, sp, #0
 80109fc:	6078      	str	r0, [r7, #4]
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	f000 f93e 	bl	8010c80 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventED1Ev>
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	4618      	mov	r0, r3
 8010a08:	3708      	adds	r7, #8
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}

08010a0e <_ZNSt16allocator_traitsISaIPPK7XFEventEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8010a0e:	b580      	push	{r7, lr}
 8010a10:	b084      	sub	sp, #16
 8010a12:	af00      	add	r7, sp, #0
 8010a14:	60f8      	str	r0, [r7, #12]
 8010a16:	60b9      	str	r1, [r7, #8]
 8010a18:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8010a1a:	687a      	ldr	r2, [r7, #4]
 8010a1c:	68b9      	ldr	r1, [r7, #8]
 8010a1e:	68f8      	ldr	r0, [r7, #12]
 8010a20:	f000 f939 	bl	8010c96 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE10deallocateEPS4_j>
 8010a24:	bf00      	nop
 8010a26:	3710      	adds	r7, #16
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}

08010a2c <_ZSt7forwardIRKPK7XFEventEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010a2c:	b480      	push	{r7}
 8010a2e:	b083      	sub	sp, #12
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	4618      	mov	r0, r3
 8010a38:	370c      	adds	r7, #12
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a40:	4770      	bx	lr

08010a42 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8010a42:	b590      	push	{r4, r7, lr}
 8010a44:	b085      	sub	sp, #20
 8010a46:	af00      	add	r7, sp, #0
 8010a48:	60f8      	str	r0, [r7, #12]
 8010a4a:	60b9      	str	r1, [r7, #8]
 8010a4c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8010a4e:	6878      	ldr	r0, [r7, #4]
 8010a50:	f7ff ffec 	bl	8010a2c <_ZSt7forwardIRKPK7XFEventEOT_RNSt16remove_referenceIS5_E4typeE>
 8010a54:	4603      	mov	r3, r0
 8010a56:	681c      	ldr	r4, [r3, #0]
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	4619      	mov	r1, r3
 8010a5c:	2004      	movs	r0, #4
 8010a5e:	f7f9 ff89 	bl	800a974 <_ZnwjPv>
 8010a62:	4603      	mov	r3, r0
 8010a64:	601c      	str	r4, [r3, #0]
 8010a66:	bf00      	nop
 8010a68:	3714      	adds	r7, #20
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd90      	pop	{r4, r7, pc}

08010a6e <_ZNKSt5dequeIPK7XFEventSaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8010a6e:	b580      	push	{r7, lr}
 8010a70:	b082      	sub	sp, #8
 8010a72:	af00      	add	r7, sp, #0
 8010a74:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f103 0218 	add.w	r2, r3, #24
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	3308      	adds	r3, #8
 8010a80:	4619      	mov	r1, r3
 8010a82:	4610      	mov	r0, r2
 8010a84:	f000 f914 	bl	8010cb0 <_ZStmiIPK7XFEventRS2_PS2_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS9_SC_>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3708      	adds	r7, #8
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}

08010a92 <_ZNKSt5dequeIPK7XFEventSaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8010a92:	b580      	push	{r7, lr}
 8010a94:	b082      	sub	sp, #8
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f000 f8d7 	bl	8010c50 <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	f000 f927 	bl	8010cf8 <_ZNSt5dequeIPK7XFEventSaIS2_EE11_S_max_sizeERKS3_>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	4618      	mov	r0, r3
 8010aae:	3708      	adds	r7, #8
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}

08010ab4 <_ZNSt5dequeIPK7XFEventSaIS2_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b082      	sub	sp, #8
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
 8010abc:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8010abe:	683b      	ldr	r3, [r7, #0]
 8010ac0:	1c5a      	adds	r2, r3, #1
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8010ac6:	6879      	ldr	r1, [r7, #4]
 8010ac8:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8010aca:	6879      	ldr	r1, [r7, #4]
 8010acc:	6809      	ldr	r1, [r1, #0]
 8010ace:	1a41      	subs	r1, r0, r1
 8010ad0:	1089      	asrs	r1, r1, #2
 8010ad2:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	d904      	bls.n	8010ae2 <_ZNSt5dequeIPK7XFEventSaIS2_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8010ad8:	2200      	movs	r2, #0
 8010ada:	6839      	ldr	r1, [r7, #0]
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	f000 f925 	bl	8010d2c <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb>
      }
 8010ae2:	bf00      	nop
 8010ae4:	3708      	adds	r7, #8
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}

08010aea <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8010aea:	b590      	push	{r4, r7, lr}
 8010aec:	b083      	sub	sp, #12
 8010aee:	af00      	add	r7, sp, #0
 8010af0:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8010af2:	687c      	ldr	r4, [r7, #4]
 8010af4:	2004      	movs	r0, #4
 8010af6:	f7ff fb73 	bl	80101e0 <_ZSt16__deque_buf_sizej>
 8010afa:	4603      	mov	r3, r0
 8010afc:	4619      	mov	r1, r3
 8010afe:	4620      	mov	r0, r4
 8010b00:	f000 f9ae 	bl	8010e60 <_ZNSt16allocator_traitsISaIPK7XFEventEE8allocateERS3_j>
 8010b04:	4603      	mov	r3, r0
      }
 8010b06:	4618      	mov	r0, r3
 8010b08:	370c      	adds	r7, #12
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd90      	pop	{r4, r7, pc}

08010b0e <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8010b0e:	b590      	push	{r4, r7, lr}
 8010b10:	b083      	sub	sp, #12
 8010b12:	af00      	add	r7, sp, #0
 8010b14:	6078      	str	r0, [r7, #4]
 8010b16:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	683a      	ldr	r2, [r7, #0]
 8010b1c:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	681a      	ldr	r2, [r3, #0]
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	685c      	ldr	r4, [r3, #4]
 8010b2a:	f000 f9a8 	bl	8010e7e <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E14_S_buffer_sizeEv>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	009b      	lsls	r3, r3, #2
 8010b32:	18e2      	adds	r2, r4, r3
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	609a      	str	r2, [r3, #8]
      }
 8010b38:	bf00      	nop
 8010b3a:	370c      	adds	r7, #12
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd90      	pop	{r4, r7, pc}

08010b40 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE7destroyIS3_EEvPT_>:
	destroy(_Up* __p)
 8010b40:	b480      	push	{r7}
 8010b42:	b083      	sub	sp, #12
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
 8010b48:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8010b4a:	bf00      	nop
 8010b4c:	370c      	adds	r7, #12
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b54:	4770      	bx	lr

08010b56 <_ZNSaIPK7XFEventEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8010b56:	b580      	push	{r7, lr}
 8010b58:	b082      	sub	sp, #8
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	6078      	str	r0, [r7, #4]
 8010b5e:	6878      	ldr	r0, [r7, #4]
 8010b60:	f000 f995 	bl	8010e8e <_ZN9__gnu_cxx13new_allocatorIPK7XFEventEC1Ev>
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	4618      	mov	r0, r3
 8010b68:	3708      	adds	r7, #8
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}

08010b6e <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8010b6e:	b480      	push	{r7}
 8010b70:	b083      	sub	sp, #12
 8010b72:	af00      	add	r7, sp, #0
 8010b74:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2200      	movs	r2, #0
 8010b7a:	601a      	str	r2, [r3, #0]
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	2200      	movs	r2, #0
 8010b80:	605a      	str	r2, [r3, #4]
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2200      	movs	r2, #0
 8010b86:	609a      	str	r2, [r3, #8]
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	60da      	str	r2, [r3, #12]
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	4618      	mov	r0, r3
 8010b92:	370c      	adds	r7, #12
 8010b94:	46bd      	mov	sp, r7
 8010b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9a:	4770      	bx	lr

08010b9c <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8010b9c:	b480      	push	{r7}
 8010b9e:	b083      	sub	sp, #12
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	429a      	cmp	r2, r3
 8010bb0:	d201      	bcs.n	8010bb6 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8010bb2:	683b      	ldr	r3, [r7, #0]
 8010bb4:	e000      	b.n	8010bb8 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8010bb6:	687b      	ldr	r3, [r7, #4]
    }
 8010bb8:	4618      	mov	r0, r3
 8010bba:	370c      	adds	r7, #12
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc2:	4770      	bx	lr

08010bc4 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8010bc4:	b590      	push	{r4, r7, lr}
 8010bc6:	b085      	sub	sp, #20
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
 8010bcc:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8010bce:	f107 030c 	add.w	r3, r7, #12
 8010bd2:	6879      	ldr	r1, [r7, #4]
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f7ff fefd 	bl	80109d4 <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8010bda:	f107 030c 	add.w	r3, r7, #12
 8010bde:	6839      	ldr	r1, [r7, #0]
 8010be0:	4618      	mov	r0, r3
 8010be2:	f000 f95f 	bl	8010ea4 <_ZNSt16allocator_traitsISaIPPK7XFEventEE8allocateERS4_j>
 8010be6:	4604      	mov	r4, r0
 8010be8:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8010bea:	f107 030c 	add.w	r3, r7, #12
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f7ff ff01 	bl	80109f6 <_ZNSaIPPK7XFEventED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8010bf4:	4623      	mov	r3, r4
      }
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	3714      	adds	r7, #20
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd90      	pop	{r4, r7, pc}

08010bfe <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_>:
    _Deque_base<_Tp, _Alloc>::
 8010bfe:	b580      	push	{r7, lr}
 8010c00:	b086      	sub	sp, #24
 8010c02:	af00      	add	r7, sp, #0
 8010c04:	60f8      	str	r0, [r7, #12]
 8010c06:	60b9      	str	r1, [r7, #8]
 8010c08:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8010c0a:	68bb      	ldr	r3, [r7, #8]
 8010c0c:	617b      	str	r3, [r7, #20]
 8010c0e:	697a      	ldr	r2, [r7, #20]
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	429a      	cmp	r2, r3
 8010c14:	d209      	bcs.n	8010c2a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_+0x2c>
	    *__cur = this->_M_allocate_node();
 8010c16:	68f8      	ldr	r0, [r7, #12]
 8010c18:	f7ff ff67 	bl	8010aea <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_allocate_nodeEv>
 8010c1c:	4602      	mov	r2, r0
 8010c1e:	697b      	ldr	r3, [r7, #20]
 8010c20:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	3304      	adds	r3, #4
 8010c26:	617b      	str	r3, [r7, #20]
 8010c28:	e7f1      	b.n	8010c0e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_+0x10>
    }
 8010c2a:	bf00      	nop
 8010c2c:	3718      	adds	r7, #24
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}

08010c32 <_ZNSt16allocator_traitsISaIPK7XFEventEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8010c32:	b580      	push	{r7, lr}
 8010c34:	b084      	sub	sp, #16
 8010c36:	af00      	add	r7, sp, #0
 8010c38:	60f8      	str	r0, [r7, #12]
 8010c3a:	60b9      	str	r1, [r7, #8]
 8010c3c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8010c3e:	687a      	ldr	r2, [r7, #4]
 8010c40:	68b9      	ldr	r1, [r7, #8]
 8010c42:	68f8      	ldr	r0, [r7, #12]
 8010c44:	f000 f93d 	bl	8010ec2 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE10deallocateEPS3_j>
 8010c48:	bf00      	nop
 8010c4a:	3710      	adds	r7, #16
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}

08010c50 <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8010c50:	b480      	push	{r7}
 8010c52:	b083      	sub	sp, #12
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	370c      	adds	r7, #12
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c64:	4770      	bx	lr

08010c66 <_ZNSaIPPK7XFEventEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8010c66:	b580      	push	{r7, lr}
 8010c68:	b082      	sub	sp, #8
 8010c6a:	af00      	add	r7, sp, #0
 8010c6c:	6078      	str	r0, [r7, #4]
 8010c6e:	6039      	str	r1, [r7, #0]
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f000 f933 	bl	8010edc <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventEC1Ev>
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	4618      	mov	r0, r3
 8010c7a:	3708      	adds	r7, #8
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}

08010c80 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8010c80:	b480      	push	{r7}
 8010c82:	b083      	sub	sp, #12
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	370c      	adds	r7, #12
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c94:	4770      	bx	lr

08010c96 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 8010c96:	b580      	push	{r7, lr}
 8010c98:	b084      	sub	sp, #16
 8010c9a:	af00      	add	r7, sp, #0
 8010c9c:	60f8      	str	r0, [r7, #12]
 8010c9e:	60b9      	str	r1, [r7, #8]
 8010ca0:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8010ca2:	68b8      	ldr	r0, [r7, #8]
 8010ca4:	f005 f9ae 	bl	8016004 <_ZdlPv>
      }
 8010ca8:	bf00      	nop
 8010caa:	3710      	adds	r7, #16
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd80      	pop	{r7, pc}

08010cb0 <_ZStmiIPK7XFEventRS2_PS2_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS9_SC_>:
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b082      	sub	sp, #8
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
 8010cb8:	6039      	str	r1, [r7, #0]
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
 8010cba:	f000 f8e0 	bl	8010e7e <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E14_S_buffer_sizeEv>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	4619      	mov	r1, r3
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	68da      	ldr	r2, [r3, #12]
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	68db      	ldr	r3, [r3, #12]
 8010cca:	1ad3      	subs	r3, r2, r3
 8010ccc:	109b      	asrs	r3, r3, #2
 8010cce:	3b01      	subs	r3, #1
 8010cd0:	fb03 f301 	mul.w	r3, r3, r1
 8010cd4:	687a      	ldr	r2, [r7, #4]
 8010cd6:	6811      	ldr	r1, [r2, #0]
 8010cd8:	687a      	ldr	r2, [r7, #4]
 8010cda:	6852      	ldr	r2, [r2, #4]
 8010cdc:	1a8a      	subs	r2, r1, r2
 8010cde:	1092      	asrs	r2, r2, #2
 8010ce0:	4413      	add	r3, r2
	+ (__y._M_last - __y._M_cur);
 8010ce2:	683a      	ldr	r2, [r7, #0]
 8010ce4:	6891      	ldr	r1, [r2, #8]
 8010ce6:	683a      	ldr	r2, [r7, #0]
 8010ce8:	6812      	ldr	r2, [r2, #0]
 8010cea:	1a8a      	subs	r2, r1, r2
 8010cec:	1092      	asrs	r2, r2, #2
 8010cee:	4413      	add	r3, r2
    }
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	3708      	adds	r7, #8
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bd80      	pop	{r7, pc}

08010cf8 <_ZNSt5dequeIPK7XFEventSaIS2_EE11_S_max_sizeERKS3_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b084      	sub	sp, #16
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8010d00:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010d04:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8010d06:	6878      	ldr	r0, [r7, #4]
 8010d08:	f000 f8f3 	bl	8010ef2 <_ZNSt16allocator_traitsISaIPK7XFEventEE8max_sizeERKS3_>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8010d10:	f107 0208 	add.w	r2, r7, #8
 8010d14:	f107 030c 	add.w	r3, r7, #12
 8010d18:	4611      	mov	r1, r2
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f000 f8f5 	bl	8010f0a <_ZSt3minIjERKT_S2_S2_>
 8010d20:	4603      	mov	r3, r0
 8010d22:	681b      	ldr	r3, [r3, #0]
      }
 8010d24:	4618      	mov	r0, r3
 8010d26:	3710      	adds	r7, #16
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}

08010d2c <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8010d2c:	b590      	push	{r4, r7, lr}
 8010d2e:	b08b      	sub	sp, #44	; 0x2c
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	60f8      	str	r0, [r7, #12]
 8010d34:	60b9      	str	r1, [r7, #8]
 8010d36:	4613      	mov	r3, r2
 8010d38:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	695b      	ldr	r3, [r3, #20]
 8010d42:	1ad3      	subs	r3, r2, r3
 8010d44:	109b      	asrs	r3, r3, #2
 8010d46:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8010d48:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	6a3a      	ldr	r2, [r7, #32]
 8010d4e:	4413      	add	r3, r2
 8010d50:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	685a      	ldr	r2, [r3, #4]
 8010d56:	69fb      	ldr	r3, [r7, #28]
 8010d58:	005b      	lsls	r3, r3, #1
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d92d      	bls.n	8010dba <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	681a      	ldr	r2, [r3, #0]
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8010d66:	69fb      	ldr	r3, [r7, #28]
 8010d68:	1acb      	subs	r3, r1, r3
 8010d6a:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8010d6c:	0099      	lsls	r1, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8010d6e:	79fb      	ldrb	r3, [r7, #7]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d002      	beq.n	8010d7a <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x4e>
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	009b      	lsls	r3, r3, #2
 8010d78:	e000      	b.n	8010d7c <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x50>
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8010d7e:	4413      	add	r3, r2
 8010d80:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	695b      	ldr	r3, [r3, #20]
 8010d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d88:	429a      	cmp	r2, r3
 8010d8a:	d209      	bcs.n	8010da0 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8010d94:	3304      	adds	r3, #4
 8010d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d98:	4619      	mov	r1, r3
 8010d9a:	f000 f8ca 	bl	8010f32 <_ZSt4copyIPPPK7XFEventS4_ET0_T_S6_S5_>
 8010d9e:	e048      	b.n	8010e32 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8010da8:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8010daa:	6a3b      	ldr	r3, [r7, #32]
 8010dac:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8010dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010db0:	4413      	add	r3, r2
 8010db2:	461a      	mov	r2, r3
 8010db4:	f000 f8d5 	bl	8010f62 <_ZSt13copy_backwardIPPPK7XFEventS4_ET0_T_S6_S5_>
 8010db8:	e03b      	b.n	8010e32 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	685c      	ldr	r4, [r3, #4]
	                             + std::max(this->_M_impl._M_map_size,
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	3304      	adds	r3, #4
 8010dc2:	f107 0208 	add.w	r2, r7, #8
 8010dc6:	4611      	mov	r1, r2
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f7ff fee7 	bl	8010b9c <_ZSt3maxIjERKT_S2_S2_>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8010dd4:	3302      	adds	r3, #2
 8010dd6:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	69b9      	ldr	r1, [r7, #24]
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f7ff fef1 	bl	8010bc4 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_allocate_mapEj>
 8010de2:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8010de4:	69ba      	ldr	r2, [r7, #24]
 8010de6:	69fb      	ldr	r3, [r7, #28]
 8010de8:	1ad3      	subs	r3, r2, r3
 8010dea:	085b      	lsrs	r3, r3, #1
 8010dec:	009a      	lsls	r2, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8010dee:	79fb      	ldrb	r3, [r7, #7]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d002      	beq.n	8010dfa <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xce>
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	009b      	lsls	r3, r3, #2
 8010df8:	e000      	b.n	8010dfc <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xd0>
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8010dfe:	697a      	ldr	r2, [r7, #20]
 8010e00:	4413      	add	r3, r2
 8010e02:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8010e0c:	3304      	adds	r3, #4
 8010e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e10:	4619      	mov	r1, r3
 8010e12:	f000 f88e 	bl	8010f32 <_ZSt4copyIPPPK7XFEventS4_ET0_T_S6_S5_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8010e16:	68f8      	ldr	r0, [r7, #12]
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	6819      	ldr	r1, [r3, #0]
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	685b      	ldr	r3, [r3, #4]
 8010e20:	461a      	mov	r2, r3
 8010e22:	f7ff fc72 	bl	801070a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_deallocate_mapEPPS2_j>

	  this->_M_impl._M_map = __new_map;
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	697a      	ldr	r2, [r7, #20]
 8010e2a:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	69ba      	ldr	r2, [r7, #24]
 8010e30:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	3308      	adds	r3, #8
 8010e36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f7ff fe68 	bl	8010b0e <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	f103 0018 	add.w	r0, r3, #24
 8010e44:	6a3a      	ldr	r2, [r7, #32]
 8010e46:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010e4a:	4413      	add	r3, r2
 8010e4c:	009b      	lsls	r3, r3, #2
 8010e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e50:	4413      	add	r3, r2
 8010e52:	4619      	mov	r1, r3
 8010e54:	f7ff fe5b 	bl	8010b0e <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
    }
 8010e58:	bf00      	nop
 8010e5a:	372c      	adds	r7, #44	; 0x2c
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd90      	pop	{r4, r7, pc}

08010e60 <_ZNSt16allocator_traitsISaIPK7XFEventEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b082      	sub	sp, #8
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
 8010e68:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	6839      	ldr	r1, [r7, #0]
 8010e6e:	6878      	ldr	r0, [r7, #4]
 8010e70:	f000 f88f 	bl	8010f92 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE8allocateEjPKv>
 8010e74:	4603      	mov	r3, r0
 8010e76:	4618      	mov	r0, r3
 8010e78:	3708      	adds	r7, #8
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bd80      	pop	{r7, pc}

08010e7e <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8010e7e:	b580      	push	{r7, lr}
 8010e80:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8010e82:	2004      	movs	r0, #4
 8010e84:	f7ff f9ac 	bl	80101e0 <_ZSt16__deque_buf_sizej>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	bd80      	pop	{r7, pc}

08010e8e <_ZN9__gnu_cxx13new_allocatorIPK7XFEventEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8010e8e:	b480      	push	{r7}
 8010e90:	b083      	sub	sp, #12
 8010e92:	af00      	add	r7, sp, #0
 8010e94:	6078      	str	r0, [r7, #4]
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	4618      	mov	r0, r3
 8010e9a:	370c      	adds	r7, #12
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea2:	4770      	bx	lr

08010ea4 <_ZNSt16allocator_traitsISaIPPK7XFEventEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b082      	sub	sp, #8
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
 8010eac:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8010eae:	2200      	movs	r2, #0
 8010eb0:	6839      	ldr	r1, [r7, #0]
 8010eb2:	6878      	ldr	r0, [r7, #4]
 8010eb4:	f000 f88b 	bl	8010fce <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE8allocateEjPKv>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	4618      	mov	r0, r3
 8010ebc:	3708      	adds	r7, #8
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}

08010ec2 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE10deallocateEPS3_j>:
      deallocate(pointer __p, size_type)
 8010ec2:	b580      	push	{r7, lr}
 8010ec4:	b084      	sub	sp, #16
 8010ec6:	af00      	add	r7, sp, #0
 8010ec8:	60f8      	str	r0, [r7, #12]
 8010eca:	60b9      	str	r1, [r7, #8]
 8010ecc:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8010ece:	68b8      	ldr	r0, [r7, #8]
 8010ed0:	f005 f898 	bl	8016004 <_ZdlPv>
      }
 8010ed4:	bf00      	nop
 8010ed6:	3710      	adds	r7, #16
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}

08010edc <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8010edc:	b480      	push	{r7}
 8010ede:	b083      	sub	sp, #12
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	370c      	adds	r7, #12
 8010eea:	46bd      	mov	sp, r7
 8010eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef0:	4770      	bx	lr

08010ef2 <_ZNSt16allocator_traitsISaIPK7XFEventEE8max_sizeERKS3_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8010ef2:	b580      	push	{r7, lr}
 8010ef4:	b082      	sub	sp, #8
 8010ef6:	af00      	add	r7, sp, #0
 8010ef8:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f000 f885 	bl	801100a <_ZNK9__gnu_cxx13new_allocatorIPK7XFEventE8max_sizeEv>
 8010f00:	4603      	mov	r3, r0
 8010f02:	4618      	mov	r0, r3
 8010f04:	3708      	adds	r7, #8
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}

08010f0a <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8010f0a:	b480      	push	{r7}
 8010f0c:	b083      	sub	sp, #12
 8010f0e:	af00      	add	r7, sp, #0
 8010f10:	6078      	str	r0, [r7, #4]
 8010f12:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8010f14:	683b      	ldr	r3, [r7, #0]
 8010f16:	681a      	ldr	r2, [r3, #0]
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d201      	bcs.n	8010f24 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	e000      	b.n	8010f26 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8010f24:	687b      	ldr	r3, [r7, #4]
    }
 8010f26:	4618      	mov	r0, r3
 8010f28:	370c      	adds	r7, #12
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f30:	4770      	bx	lr

08010f32 <_ZSt4copyIPPPK7XFEventS4_ET0_T_S6_S5_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8010f32:	b590      	push	{r4, r7, lr}
 8010f34:	b085      	sub	sp, #20
 8010f36:	af00      	add	r7, sp, #0
 8010f38:	60f8      	str	r0, [r7, #12]
 8010f3a:	60b9      	str	r1, [r7, #8]
 8010f3c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8010f3e:	68f8      	ldr	r0, [r7, #12]
 8010f40:	f000 f86f 	bl	8011022 <_ZSt12__miter_baseIPPPK7XFEventET_S5_>
 8010f44:	4604      	mov	r4, r0
 8010f46:	68b8      	ldr	r0, [r7, #8]
 8010f48:	f000 f86b 	bl	8011022 <_ZSt12__miter_baseIPPPK7XFEventET_S5_>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	687a      	ldr	r2, [r7, #4]
 8010f50:	4619      	mov	r1, r3
 8010f52:	4620      	mov	r0, r4
 8010f54:	f000 f870 	bl	8011038 <_ZSt14__copy_move_a2ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 8010f58:	4603      	mov	r3, r0
    }
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	3714      	adds	r7, #20
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd90      	pop	{r4, r7, pc}

08010f62 <_ZSt13copy_backwardIPPPK7XFEventS4_ET0_T_S6_S5_>:
   *  Result may not be in the range (first,last].  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8010f62:	b590      	push	{r4, r7, lr}
 8010f64:	b085      	sub	sp, #20
 8010f66:	af00      	add	r7, sp, #0
 8010f68:	60f8      	str	r0, [r7, #12]
 8010f6a:	60b9      	str	r1, [r7, #8]
 8010f6c:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8010f6e:	68f8      	ldr	r0, [r7, #12]
 8010f70:	f000 f857 	bl	8011022 <_ZSt12__miter_baseIPPPK7XFEventET_S5_>
 8010f74:	4604      	mov	r4, r0
 8010f76:	68b8      	ldr	r0, [r7, #8]
 8010f78:	f000 f853 	bl	8011022 <_ZSt12__miter_baseIPPPK7XFEventET_S5_>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	687a      	ldr	r2, [r7, #4]
 8010f80:	4619      	mov	r1, r3
 8010f82:	4620      	mov	r0, r4
 8010f84:	f000 f87b 	bl	801107e <_ZSt23__copy_move_backward_a2ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 8010f88:	4603      	mov	r3, r0
    }
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3714      	adds	r7, #20
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd90      	pop	{r4, r7, pc}

08010f92 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8010f92:	b580      	push	{r7, lr}
 8010f94:	b084      	sub	sp, #16
 8010f96:	af00      	add	r7, sp, #0
 8010f98:	60f8      	str	r0, [r7, #12]
 8010f9a:	60b9      	str	r1, [r7, #8]
 8010f9c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8010f9e:	68f8      	ldr	r0, [r7, #12]
 8010fa0:	f000 f833 	bl	801100a <_ZNK9__gnu_cxx13new_allocatorIPK7XFEventE8max_sizeEv>
 8010fa4:	4602      	mov	r2, r0
 8010fa6:	68bb      	ldr	r3, [r7, #8]
 8010fa8:	4293      	cmp	r3, r2
 8010faa:	bf8c      	ite	hi
 8010fac:	2301      	movhi	r3, #1
 8010fae:	2300      	movls	r3, #0
 8010fb0:	b2db      	uxtb	r3, r3
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d001      	beq.n	8010fba <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8010fb6:	f005 f85a 	bl	801606e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	009b      	lsls	r3, r3, #2
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f005 f833 	bl	801602a <_Znwj>
 8010fc4:	4603      	mov	r3, r0
      }
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	3710      	adds	r7, #16
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd80      	pop	{r7, pc}

08010fce <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8010fce:	b580      	push	{r7, lr}
 8010fd0:	b084      	sub	sp, #16
 8010fd2:	af00      	add	r7, sp, #0
 8010fd4:	60f8      	str	r0, [r7, #12]
 8010fd6:	60b9      	str	r1, [r7, #8]
 8010fd8:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8010fda:	68f8      	ldr	r0, [r7, #12]
 8010fdc:	f000 f872 	bl	80110c4 <_ZNK9__gnu_cxx13new_allocatorIPPK7XFEventE8max_sizeEv>
 8010fe0:	4602      	mov	r2, r0
 8010fe2:	68bb      	ldr	r3, [r7, #8]
 8010fe4:	4293      	cmp	r3, r2
 8010fe6:	bf8c      	ite	hi
 8010fe8:	2301      	movhi	r3, #1
 8010fea:	2300      	movls	r3, #0
 8010fec:	b2db      	uxtb	r3, r3
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d001      	beq.n	8010ff6 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8010ff2:	f005 f83c 	bl	801606e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8010ff6:	68bb      	ldr	r3, [r7, #8]
 8010ff8:	009b      	lsls	r3, r3, #2
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	f005 f815 	bl	801602a <_Znwj>
 8011000:	4603      	mov	r3, r0
      }
 8011002:	4618      	mov	r0, r3
 8011004:	3710      	adds	r7, #16
 8011006:	46bd      	mov	sp, r7
 8011008:	bd80      	pop	{r7, pc}

0801100a <_ZNK9__gnu_cxx13new_allocatorIPK7XFEventE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 801100a:	b480      	push	{r7}
 801100c:	b083      	sub	sp, #12
 801100e:	af00      	add	r7, sp, #0
 8011010:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8011012:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8011016:	4618      	mov	r0, r3
 8011018:	370c      	adds	r7, #12
 801101a:	46bd      	mov	sp, r7
 801101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011020:	4770      	bx	lr

08011022 <_ZSt12__miter_baseIPPPK7XFEventET_S5_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8011022:	b480      	push	{r7}
 8011024:	b083      	sub	sp, #12
 8011026:	af00      	add	r7, sp, #0
 8011028:	6078      	str	r0, [r7, #4]
    { return __it; }
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	4618      	mov	r0, r3
 801102e:	370c      	adds	r7, #12
 8011030:	46bd      	mov	sp, r7
 8011032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011036:	4770      	bx	lr

08011038 <_ZSt14__copy_move_a2ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8011038:	b5b0      	push	{r4, r5, r7, lr}
 801103a:	b084      	sub	sp, #16
 801103c:	af00      	add	r7, sp, #0
 801103e:	60f8      	str	r0, [r7, #12]
 8011040:	60b9      	str	r1, [r7, #8]
 8011042:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8011044:	68f8      	ldr	r0, [r7, #12]
 8011046:	f000 f849 	bl	80110dc <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 801104a:	4604      	mov	r4, r0
 801104c:	68b8      	ldr	r0, [r7, #8]
 801104e:	f000 f845 	bl	80110dc <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 8011052:	4605      	mov	r5, r0
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	4618      	mov	r0, r3
 8011058:	f000 f840 	bl	80110dc <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 801105c:	4603      	mov	r3, r0
 801105e:	461a      	mov	r2, r3
 8011060:	4629      	mov	r1, r5
 8011062:	4620      	mov	r0, r4
 8011064:	f000 f845 	bl	80110f2 <_ZSt13__copy_move_aILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 8011068:	4602      	mov	r2, r0
 801106a:	1d3b      	adds	r3, r7, #4
 801106c:	4611      	mov	r1, r2
 801106e:	4618      	mov	r0, r3
 8011070:	f000 f851 	bl	8011116 <_ZSt12__niter_wrapIPPPK7XFEventET_RKS5_S5_>
 8011074:	4603      	mov	r3, r0
    }
 8011076:	4618      	mov	r0, r3
 8011078:	3710      	adds	r7, #16
 801107a:	46bd      	mov	sp, r7
 801107c:	bdb0      	pop	{r4, r5, r7, pc}

0801107e <_ZSt23__copy_move_backward_a2ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 801107e:	b5b0      	push	{r4, r5, r7, lr}
 8011080:	b084      	sub	sp, #16
 8011082:	af00      	add	r7, sp, #0
 8011084:	60f8      	str	r0, [r7, #12]
 8011086:	60b9      	str	r1, [r7, #8]
 8011088:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801108a:	68f8      	ldr	r0, [r7, #12]
 801108c:	f000 f826 	bl	80110dc <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 8011090:	4604      	mov	r4, r0
 8011092:	68b8      	ldr	r0, [r7, #8]
 8011094:	f000 f822 	bl	80110dc <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 8011098:	4605      	mov	r5, r0
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	4618      	mov	r0, r3
 801109e:	f000 f81d 	bl	80110dc <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 80110a2:	4603      	mov	r3, r0
 80110a4:	461a      	mov	r2, r3
 80110a6:	4629      	mov	r1, r5
 80110a8:	4620      	mov	r0, r4
 80110aa:	f000 f840 	bl	801112e <_ZSt22__copy_move_backward_aILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 80110ae:	4602      	mov	r2, r0
 80110b0:	1d3b      	adds	r3, r7, #4
 80110b2:	4611      	mov	r1, r2
 80110b4:	4618      	mov	r0, r3
 80110b6:	f000 f82e 	bl	8011116 <_ZSt12__niter_wrapIPPPK7XFEventET_RKS5_S5_>
 80110ba:	4603      	mov	r3, r0
    }
 80110bc:	4618      	mov	r0, r3
 80110be:	3710      	adds	r7, #16
 80110c0:	46bd      	mov	sp, r7
 80110c2:	bdb0      	pop	{r4, r5, r7, pc}

080110c4 <_ZNK9__gnu_cxx13new_allocatorIPPK7XFEventE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80110c4:	b480      	push	{r7}
 80110c6:	b083      	sub	sp, #12
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80110cc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80110d0:	4618      	mov	r0, r3
 80110d2:	370c      	adds	r7, #12
 80110d4:	46bd      	mov	sp, r7
 80110d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110da:	4770      	bx	lr

080110dc <_ZSt12__niter_baseIPPPK7XFEventET_S5_>:
    __niter_base(_Iterator __it)
 80110dc:	b480      	push	{r7}
 80110de:	b083      	sub	sp, #12
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	4618      	mov	r0, r3
 80110e8:	370c      	adds	r7, #12
 80110ea:	46bd      	mov	sp, r7
 80110ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f0:	4770      	bx	lr

080110f2 <_ZSt13__copy_move_aILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80110f2:	b580      	push	{r7, lr}
 80110f4:	b086      	sub	sp, #24
 80110f6:	af00      	add	r7, sp, #0
 80110f8:	60f8      	str	r0, [r7, #12]
 80110fa:	60b9      	str	r1, [r7, #8]
 80110fc:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 80110fe:	2301      	movs	r3, #1
 8011100:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8011102:	687a      	ldr	r2, [r7, #4]
 8011104:	68b9      	ldr	r1, [r7, #8]
 8011106:	68f8      	ldr	r0, [r7, #12]
 8011108:	f000 f823 	bl	8011152 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPK7XFEventEEPT_PKS7_SA_S8_>
 801110c:	4603      	mov	r3, r0
    }
 801110e:	4618      	mov	r0, r3
 8011110:	3718      	adds	r7, #24
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}

08011116 <_ZSt12__niter_wrapIPPPK7XFEventET_RKS5_S5_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8011116:	b480      	push	{r7}
 8011118:	b083      	sub	sp, #12
 801111a:	af00      	add	r7, sp, #0
 801111c:	6078      	str	r0, [r7, #4]
 801111e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8011120:	683b      	ldr	r3, [r7, #0]
 8011122:	4618      	mov	r0, r3
 8011124:	370c      	adds	r7, #12
 8011126:	46bd      	mov	sp, r7
 8011128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112c:	4770      	bx	lr

0801112e <_ZSt22__copy_move_backward_aILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 801112e:	b580      	push	{r7, lr}
 8011130:	b086      	sub	sp, #24
 8011132:	af00      	add	r7, sp, #0
 8011134:	60f8      	str	r0, [r7, #12]
 8011136:	60b9      	str	r1, [r7, #8]
 8011138:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueType1)
 801113a:	2301      	movs	r3, #1
 801113c:	75fb      	strb	r3, [r7, #23]
				       _Category>::__copy_move_b(__first,
 801113e:	687a      	ldr	r2, [r7, #4]
 8011140:	68b9      	ldr	r1, [r7, #8]
 8011142:	68f8      	ldr	r0, [r7, #12]
 8011144:	f000 f822 	bl	801118c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPK7XFEventEEPT_PKS7_SA_S8_>
 8011148:	4603      	mov	r3, r0
    }
 801114a:	4618      	mov	r0, r3
 801114c:	3718      	adds	r7, #24
 801114e:	46bd      	mov	sp, r7
 8011150:	bd80      	pop	{r7, pc}

08011152 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPK7XFEventEEPT_PKS7_SA_S8_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8011152:	b580      	push	{r7, lr}
 8011154:	b086      	sub	sp, #24
 8011156:	af00      	add	r7, sp, #0
 8011158:	60f8      	str	r0, [r7, #12]
 801115a:	60b9      	str	r1, [r7, #8]
 801115c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 801115e:	68ba      	ldr	r2, [r7, #8]
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	1ad3      	subs	r3, r2, r3
 8011164:	109b      	asrs	r3, r3, #2
 8011166:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d006      	beq.n	801117c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPK7XFEventEEPT_PKS7_SA_S8_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	009b      	lsls	r3, r3, #2
 8011172:	461a      	mov	r2, r3
 8011174:	68f9      	ldr	r1, [r7, #12]
 8011176:	6878      	ldr	r0, [r7, #4]
 8011178:	f005 f9f6 	bl	8016568 <memmove>
	  return __result + _Num;
 801117c:	697b      	ldr	r3, [r7, #20]
 801117e:	009b      	lsls	r3, r3, #2
 8011180:	687a      	ldr	r2, [r7, #4]
 8011182:	4413      	add	r3, r2
	}
 8011184:	4618      	mov	r0, r3
 8011186:	3718      	adds	r7, #24
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}

0801118c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPK7XFEventEEPT_PKS7_SA_S8_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 801118c:	b580      	push	{r7, lr}
 801118e:	b086      	sub	sp, #24
 8011190:	af00      	add	r7, sp, #0
 8011192:	60f8      	str	r0, [r7, #12]
 8011194:	60b9      	str	r1, [r7, #8]
 8011196:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8011198:	68ba      	ldr	r2, [r7, #8]
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	1ad3      	subs	r3, r2, r3
 801119e:	109b      	asrs	r3, r3, #2
 80111a0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80111a2:	697b      	ldr	r3, [r7, #20]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d00a      	beq.n	80111be <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPK7XFEventEEPT_PKS7_SA_S8_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80111a8:	697b      	ldr	r3, [r7, #20]
 80111aa:	009b      	lsls	r3, r3, #2
 80111ac:	425b      	negs	r3, r3
 80111ae:	687a      	ldr	r2, [r7, #4]
 80111b0:	18d0      	adds	r0, r2, r3
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	009b      	lsls	r3, r3, #2
 80111b6:	461a      	mov	r2, r3
 80111b8:	68f9      	ldr	r1, [r7, #12]
 80111ba:	f005 f9d5 	bl	8016568 <memmove>
	  return __result - _Num;
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	009b      	lsls	r3, r3, #2
 80111c2:	425b      	negs	r3, r3
 80111c4:	687a      	ldr	r2, [r7, #4]
 80111c6:	4413      	add	r3, r2
	}
 80111c8:	4618      	mov	r0, r3
 80111ca:	3718      	adds	r7, #24
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd80      	pop	{r7, pc}

080111d0 <_ZN9interface7XFMutex6createEv>:

/**
 * @brief Implementation of interface::XFMutex::create method.
 */
interface::XFMutex * interface::XFMutex::create()
{
 80111d0:	b598      	push	{r3, r4, r7, lr}
 80111d2:	af00      	add	r7, sp, #0
    return new XFMutexDefault;
 80111d4:	2004      	movs	r0, #4
 80111d6:	f004 ff28 	bl	801602a <_Znwj>
 80111da:	4603      	mov	r3, r0
 80111dc:	461c      	mov	r4, r3
 80111de:	4620      	mov	r0, r4
 80111e0:	f000 f834 	bl	801124c <_ZN14XFMutexDefaultC1Ev>
 80111e4:	4623      	mov	r3, r4
}
 80111e6:	4618      	mov	r0, r3
 80111e8:	bd98      	pop	{r3, r4, r7, pc}
	...

080111ec <_ZN9interface7XFMutexC1Ev>:
     *   You cannot instanciate an object of an abstract class!
     */
    static XFMutex * create();

protected:
    XFMutex() = default;
 80111ec:	b480      	push	{r7}
 80111ee:	b083      	sub	sp, #12
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
 80111f4:	4a04      	ldr	r2, [pc, #16]	; (8011208 <_ZN9interface7XFMutexC1Ev+0x1c>)
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	601a      	str	r2, [r3, #0]
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	4618      	mov	r0, r3
 80111fe:	370c      	adds	r7, #12
 8011200:	46bd      	mov	sp, r7
 8011202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011206:	4770      	bx	lr
 8011208:	08018e4c 	.word	0x08018e4c

0801120c <_ZN9interface7XFMutexD1Ev>:
    virtual ~XFMutex() = default;
 801120c:	b480      	push	{r7}
 801120e:	b083      	sub	sp, #12
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
 8011214:	4a04      	ldr	r2, [pc, #16]	; (8011228 <_ZN9interface7XFMutexD1Ev+0x1c>)
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	601a      	str	r2, [r3, #0]
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	4618      	mov	r0, r3
 801121e:	370c      	adds	r7, #12
 8011220:	46bd      	mov	sp, r7
 8011222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011226:	4770      	bx	lr
 8011228:	08018e4c 	.word	0x08018e4c

0801122c <_ZN9interface7XFMutexD0Ev>:
 801122c:	b580      	push	{r7, lr}
 801122e:	b082      	sub	sp, #8
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
 8011234:	6878      	ldr	r0, [r7, #4]
 8011236:	f7ff ffe9 	bl	801120c <_ZN9interface7XFMutexD1Ev>
 801123a:	2104      	movs	r1, #4
 801123c:	6878      	ldr	r0, [r7, #4]
 801123e:	f004 fee3 	bl	8016008 <_ZdlPvj>
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	4618      	mov	r0, r3
 8011246:	3708      	adds	r7, #8
 8011248:	46bd      	mov	sp, r7
 801124a:	bd80      	pop	{r7, pc}

0801124c <_ZN14XFMutexDefaultC1Ev>:

XFMutexDefault::XFMutexDefault()
 801124c:	b580      	push	{r7, lr}
 801124e:	b082      	sub	sp, #8
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	4618      	mov	r0, r3
 8011258:	f7ff ffc8 	bl	80111ec <_ZN9interface7XFMutexC1Ev>
 801125c:	4a03      	ldr	r2, [pc, #12]	; (801126c <_ZN14XFMutexDefaultC1Ev+0x20>)
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	601a      	str	r2, [r3, #0]
{
}
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	4618      	mov	r0, r3
 8011266:	3708      	adds	r7, #8
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}
 801126c:	08018e30 	.word	0x08018e30

08011270 <_ZN14XFMutexDefaultD1Ev>:

XFMutexDefault::~XFMutexDefault()
 8011270:	b580      	push	{r7, lr}
 8011272:	b082      	sub	sp, #8
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
 8011278:	4a05      	ldr	r2, [pc, #20]	; (8011290 <_ZN14XFMutexDefaultD1Ev+0x20>)
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	601a      	str	r2, [r3, #0]
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	4618      	mov	r0, r3
 8011282:	f7ff ffc3 	bl	801120c <_ZN9interface7XFMutexD1Ev>
{
}
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	4618      	mov	r0, r3
 801128a:	3708      	adds	r7, #8
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}
 8011290:	08018e30 	.word	0x08018e30

08011294 <_ZN14XFMutexDefaultD0Ev>:
XFMutexDefault::~XFMutexDefault()
 8011294:	b580      	push	{r7, lr}
 8011296:	b082      	sub	sp, #8
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
}
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f7ff ffe7 	bl	8011270 <_ZN14XFMutexDefaultD1Ev>
 80112a2:	2104      	movs	r1, #4
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f004 feaf 	bl	8016008 <_ZdlPvj>
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	4618      	mov	r0, r3
 80112ae:	3708      	adds	r7, #8
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd80      	pop	{r7, pc}

080112b4 <_ZN14XFMutexDefault4lockEv>:

void XFMutexDefault::lock()
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b082      	sub	sp, #8
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
	enterCritical();
 80112bc:	f7fd f922 	bl	800e504 <_Z13enterCriticalv>
}
 80112c0:	bf00      	nop
 80112c2:	3708      	adds	r7, #8
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}

080112c8 <_ZN14XFMutexDefault6unlockEv>:


void XFMutexDefault::unlock()
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b082      	sub	sp, #8
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
	exitCritical();
 80112d0:	f7fd f938 	bl	800e544 <_Z12exitCriticalv>
}
 80112d4:	bf00      	nop
 80112d6:	3708      	adds	r7, #8
 80112d8:	46bd      	mov	sp, r7
 80112da:	bd80      	pop	{r7, pc}

080112dc <_ZN14XFMutexDefault7tryLockEl>:

bool XFMutexDefault::tryLock(int32_t timeout /* = 0 */)
{
 80112dc:	b480      	push	{r7}
 80112de:	b083      	sub	sp, #12
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
 80112e4:	6039      	str	r1, [r7, #0]
	return true;	// Always allow
 80112e6:	2301      	movs	r3, #1
}
 80112e8:	4618      	mov	r0, r3
 80112ea:	370c      	adds	r7, #12
 80112ec:	46bd      	mov	sp, r7
 80112ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f2:	4770      	bx	lr

080112f4 <XF_startTimeoutManagerTimer>:
 * This means that changes in 'tickInterval' needs to be handled elsewhere
 * using the XF_tickIntervalInMilliseconds() function.
 */

void XF_startTimeoutManagerTimer(uint32_t tickInterval)
{
 80112f4:	b480      	push	{r7}
 80112f6:	b083      	sub	sp, #12
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
    (void)tickInterval;

    // SysTick gets already started by the STM32CubeMX HAL.
    // So nothing to do here.
}
 80112fc:	bf00      	nop
 80112fe:	370c      	adds	r7, #12
 8011300:	46bd      	mov	sp, r7
 8011302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011306:	4770      	bx	lr

08011308 <_ZN8touchgfx4RectaNERKS0_>:
 8011308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801130c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8011310:	888c      	ldrh	r4, [r1, #4]
 8011312:	f9b0 9000 	ldrsh.w	r9, [r0]
 8011316:	443c      	add	r4, r7
 8011318:	b2a4      	uxth	r4, r4
 801131a:	fa0f f884 	sxth.w	r8, r4
 801131e:	45c1      	cmp	r9, r8
 8011320:	da2f      	bge.n	8011382 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011322:	8882      	ldrh	r2, [r0, #4]
 8011324:	444a      	add	r2, r9
 8011326:	b292      	uxth	r2, r2
 8011328:	fa0f fe82 	sxth.w	lr, r2
 801132c:	4577      	cmp	r7, lr
 801132e:	da28      	bge.n	8011382 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011330:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8011334:	88cb      	ldrh	r3, [r1, #6]
 8011336:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801133a:	442b      	add	r3, r5
 801133c:	b21b      	sxth	r3, r3
 801133e:	429e      	cmp	r6, r3
 8011340:	da1f      	bge.n	8011382 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011342:	88c3      	ldrh	r3, [r0, #6]
 8011344:	4433      	add	r3, r6
 8011346:	b29b      	uxth	r3, r3
 8011348:	fa0f fc83 	sxth.w	ip, r3
 801134c:	4565      	cmp	r5, ip
 801134e:	da18      	bge.n	8011382 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011350:	454f      	cmp	r7, r9
 8011352:	bfb8      	it	lt
 8011354:	464f      	movlt	r7, r9
 8011356:	42b5      	cmp	r5, r6
 8011358:	bfb8      	it	lt
 801135a:	4635      	movlt	r5, r6
 801135c:	45f0      	cmp	r8, lr
 801135e:	bfd8      	it	le
 8011360:	4622      	movle	r2, r4
 8011362:	1bd2      	subs	r2, r2, r7
 8011364:	8082      	strh	r2, [r0, #4]
 8011366:	884a      	ldrh	r2, [r1, #2]
 8011368:	88c9      	ldrh	r1, [r1, #6]
 801136a:	8007      	strh	r7, [r0, #0]
 801136c:	440a      	add	r2, r1
 801136e:	8045      	strh	r5, [r0, #2]
 8011370:	b292      	uxth	r2, r2
 8011372:	b211      	sxth	r1, r2
 8011374:	458c      	cmp	ip, r1
 8011376:	bfa8      	it	ge
 8011378:	4613      	movge	r3, r2
 801137a:	1b5b      	subs	r3, r3, r5
 801137c:	80c3      	strh	r3, [r0, #6]
 801137e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011382:	2300      	movs	r3, #0
 8011384:	8003      	strh	r3, [r0, #0]
 8011386:	8043      	strh	r3, [r0, #2]
 8011388:	8083      	strh	r3, [r0, #4]
 801138a:	80c3      	strh	r3, [r0, #6]
 801138c:	e7f7      	b.n	801137e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801138e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801138e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011392:	2b00      	cmp	r3, #0
 8011394:	dd06      	ble.n	80113a4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8011396:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801139a:	2800      	cmp	r0, #0
 801139c:	bfcc      	ite	gt
 801139e:	2000      	movgt	r0, #0
 80113a0:	2001      	movle	r0, #1
 80113a2:	4770      	bx	lr
 80113a4:	2001      	movs	r0, #1
 80113a6:	4770      	bx	lr

080113a8 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80113a8:	4770      	bx	lr

080113aa <_ZN8touchgfx3HAL10FlushCacheEv>:
 80113aa:	4770      	bx	lr

080113ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80113ac:	6803      	ldr	r3, [r0, #0]
 80113ae:	b513      	push	{r0, r1, r4, lr}
 80113b0:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 80113b4:	2300      	movs	r3, #0
 80113b6:	e9cd 3300 	strd	r3, r3, [sp]
 80113ba:	466b      	mov	r3, sp
 80113bc:	47a0      	blx	r4
 80113be:	b002      	add	sp, #8
 80113c0:	bd10      	pop	{r4, pc}

080113c2 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80113c2:	2301      	movs	r3, #1
 80113c4:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80113c8:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80113cc:	4770      	bx	lr

080113ce <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80113ce:	2301      	movs	r3, #1
 80113d0:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80113d4:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80113d8:	4770      	bx	lr

080113da <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80113da:	6843      	ldr	r3, [r0, #4]
 80113dc:	2201      	movs	r2, #1
 80113de:	725a      	strb	r2, [r3, #9]
 80113e0:	6840      	ldr	r0, [r0, #4]
 80113e2:	6803      	ldr	r3, [r0, #0]
 80113e4:	691b      	ldr	r3, [r3, #16]
 80113e6:	4718      	bx	r3

080113e8 <_ZN8touchgfx3HAL8flushDMAEv>:
 80113e8:	6840      	ldr	r0, [r0, #4]
 80113ea:	6803      	ldr	r3, [r0, #0]
 80113ec:	689b      	ldr	r3, [r3, #8]
 80113ee:	4718      	bx	r3

080113f0 <_ZN8touchgfx3HAL10beginFrameEv>:
 80113f0:	4b04      	ldr	r3, [pc, #16]	; (8011404 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80113f2:	781b      	ldrb	r3, [r3, #0]
 80113f4:	b123      	cbz	r3, 8011400 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80113f6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80113fa:	f080 0001 	eor.w	r0, r0, #1
 80113fe:	4770      	bx	lr
 8011400:	2001      	movs	r0, #1
 8011402:	4770      	bx	lr
 8011404:	2000124e 	.word	0x2000124e

08011408 <_ZN8touchgfx3HAL8endFrameEv>:
 8011408:	b510      	push	{r4, lr}
 801140a:	4604      	mov	r4, r0
 801140c:	6840      	ldr	r0, [r0, #4]
 801140e:	6803      	ldr	r3, [r0, #0]
 8011410:	689b      	ldr	r3, [r3, #8]
 8011412:	4798      	blx	r3
 8011414:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8011418:	b113      	cbz	r3, 8011420 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801141a:	2301      	movs	r3, #1
 801141c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8011420:	bd10      	pop	{r4, pc}

08011422 <_ZN8touchgfx3HAL9taskEntryEv>:
 8011422:	b508      	push	{r3, lr}
 8011424:	6803      	ldr	r3, [r0, #0]
 8011426:	4604      	mov	r4, r0
 8011428:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801142a:	4798      	blx	r3
 801142c:	6823      	ldr	r3, [r4, #0]
 801142e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011430:	4620      	mov	r0, r4
 8011432:	4798      	blx	r3
 8011434:	f7fa f9c8 	bl	800b7c8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8011438:	6823      	ldr	r3, [r4, #0]
 801143a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801143c:	e7f8      	b.n	8011430 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08011440 <_ZN8touchgfx3HAL4tickEv>:
 8011440:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011442:	6803      	ldr	r3, [r0, #0]
 8011444:	4604      	mov	r4, r0
 8011446:	4d5c      	ldr	r5, [pc, #368]	; (80115b8 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8011448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801144c:	4798      	blx	r3
 801144e:	2800      	cmp	r0, #0
 8011450:	f000 8097 	beq.w	8011582 <_ZN8touchgfx3HAL4tickEv+0x142>
 8011454:	2001      	movs	r0, #1
 8011456:	2600      	movs	r6, #0
 8011458:	f7f9 fe8a 	bl	800b170 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801145c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8011460:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8011464:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8011468:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801146c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8011470:	b133      	cbz	r3, 8011480 <_ZN8touchgfx3HAL4tickEv+0x40>
 8011472:	6823      	ldr	r3, [r4, #0]
 8011474:	4620      	mov	r0, r4
 8011476:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801147a:	4798      	blx	r3
 801147c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8011480:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8011484:	2601      	movs	r6, #1
 8011486:	6862      	ldr	r2, [r4, #4]
 8011488:	f083 0301 	eor.w	r3, r3, #1
 801148c:	702e      	strb	r6, [r5, #0]
 801148e:	7253      	strb	r3, [r2, #9]
 8011490:	f001 fd1a 	bl	8012ec8 <_ZN8touchgfx11Application11getInstanceEv>
 8011494:	6803      	ldr	r3, [r0, #0]
 8011496:	4631      	mov	r1, r6
 8011498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801149a:	4798      	blx	r3
 801149c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80114a0:	b90b      	cbnz	r3, 80114a6 <_ZN8touchgfx3HAL4tickEv+0x66>
 80114a2:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80114a6:	f001 fd0f 	bl	8012ec8 <_ZN8touchgfx11Application11getInstanceEv>
 80114aa:	6803      	ldr	r3, [r0, #0]
 80114ac:	695b      	ldr	r3, [r3, #20]
 80114ae:	4798      	blx	r3
 80114b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80114b2:	6803      	ldr	r3, [r0, #0]
 80114b4:	691b      	ldr	r3, [r3, #16]
 80114b6:	4798      	blx	r3
 80114b8:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80114bc:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80114c0:	3b01      	subs	r3, #1
 80114c2:	b2db      	uxtb	r3, r3
 80114c4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80114c8:	b10a      	cbz	r2, 80114ce <_ZN8touchgfx3HAL4tickEv+0x8e>
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d1eb      	bne.n	80114a6 <_ZN8touchgfx3HAL4tickEv+0x66>
 80114ce:	4a3b      	ldr	r2, [pc, #236]	; (80115bc <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80114d0:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80114d4:	7813      	ldrb	r3, [r2, #0]
 80114d6:	3301      	adds	r3, #1
 80114d8:	b25b      	sxtb	r3, r3
 80114da:	4299      	cmp	r1, r3
 80114dc:	7013      	strb	r3, [r2, #0]
 80114de:	dc10      	bgt.n	8011502 <_ZN8touchgfx3HAL4tickEv+0xc2>
 80114e0:	2300      	movs	r3, #0
 80114e2:	68e0      	ldr	r0, [r4, #12]
 80114e4:	a902      	add	r1, sp, #8
 80114e6:	7013      	strb	r3, [r2, #0]
 80114e8:	aa03      	add	r2, sp, #12
 80114ea:	6803      	ldr	r3, [r0, #0]
 80114ec:	68db      	ldr	r3, [r3, #12]
 80114ee:	4798      	blx	r3
 80114f0:	6823      	ldr	r3, [r4, #0]
 80114f2:	2800      	cmp	r0, #0
 80114f4:	d051      	beq.n	801159a <_ZN8touchgfx3HAL4tickEv+0x15a>
 80114f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80114fa:	4620      	mov	r0, r4
 80114fc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8011500:	4798      	blx	r3
 8011502:	2300      	movs	r3, #0
 8011504:	6960      	ldr	r0, [r4, #20]
 8011506:	f88d 3007 	strb.w	r3, [sp, #7]
 801150a:	b158      	cbz	r0, 8011524 <_ZN8touchgfx3HAL4tickEv+0xe4>
 801150c:	6803      	ldr	r3, [r0, #0]
 801150e:	f10d 0107 	add.w	r1, sp, #7
 8011512:	68db      	ldr	r3, [r3, #12]
 8011514:	4798      	blx	r3
 8011516:	b128      	cbz	r0, 8011524 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8011518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801151a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801151e:	6803      	ldr	r3, [r0, #0]
 8011520:	68db      	ldr	r3, [r3, #12]
 8011522:	4798      	blx	r3
 8011524:	f104 001c 	add.w	r0, r4, #28
 8011528:	f004 fcb8 	bl	8015e9c <_ZN8touchgfx8Gestures4tickEv>
 801152c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8011530:	b30b      	cbz	r3, 8011576 <_ZN8touchgfx3HAL4tickEv+0x136>
 8011532:	6920      	ldr	r0, [r4, #16]
 8011534:	6803      	ldr	r3, [r0, #0]
 8011536:	691b      	ldr	r3, [r3, #16]
 8011538:	4798      	blx	r3
 801153a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801153c:	4606      	mov	r6, r0
 801153e:	b903      	cbnz	r3, 8011542 <_ZN8touchgfx3HAL4tickEv+0x102>
 8011540:	6720      	str	r0, [r4, #112]	; 0x70
 8011542:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011544:	4a1e      	ldr	r2, [pc, #120]	; (80115c0 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8011546:	1af3      	subs	r3, r6, r3
 8011548:	4293      	cmp	r3, r2
 801154a:	d914      	bls.n	8011576 <_ZN8touchgfx3HAL4tickEv+0x136>
 801154c:	6920      	ldr	r0, [r4, #16]
 801154e:	6803      	ldr	r3, [r0, #0]
 8011550:	699b      	ldr	r3, [r3, #24]
 8011552:	4798      	blx	r3
 8011554:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011556:	2264      	movs	r2, #100	; 0x64
 8011558:	1af3      	subs	r3, r6, r3
 801155a:	fbb3 f3f2 	udiv	r3, r3, r2
 801155e:	fbb0 f0f3 	udiv	r0, r0, r3
 8011562:	2800      	cmp	r0, #0
 8011564:	dc1e      	bgt.n	80115a4 <_ZN8touchgfx3HAL4tickEv+0x164>
 8011566:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801156a:	6920      	ldr	r0, [r4, #16]
 801156c:	2100      	movs	r1, #0
 801156e:	6803      	ldr	r3, [r0, #0]
 8011570:	69db      	ldr	r3, [r3, #28]
 8011572:	4798      	blx	r3
 8011574:	6726      	str	r6, [r4, #112]	; 0x70
 8011576:	f001 fca7 	bl	8012ec8 <_ZN8touchgfx11Application11getInstanceEv>
 801157a:	6803      	ldr	r3, [r0, #0]
 801157c:	2100      	movs	r1, #0
 801157e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011580:	4798      	blx	r3
 8011582:	6823      	ldr	r3, [r4, #0]
 8011584:	4620      	mov	r0, r4
 8011586:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801158a:	4798      	blx	r3
 801158c:	2001      	movs	r0, #1
 801158e:	f7f9 fdfa 	bl	800b186 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8011592:	2300      	movs	r3, #0
 8011594:	702b      	strb	r3, [r5, #0]
 8011596:	b004      	add	sp, #16
 8011598:	bd70      	pop	{r4, r5, r6, pc}
 801159a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801159e:	4620      	mov	r0, r4
 80115a0:	4798      	blx	r3
 80115a2:	e7ae      	b.n	8011502 <_ZN8touchgfx3HAL4tickEv+0xc2>
 80115a4:	2863      	cmp	r0, #99	; 0x63
 80115a6:	bfcb      	itete	gt
 80115a8:	2300      	movgt	r3, #0
 80115aa:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80115ae:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80115b2:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80115b6:	e7d8      	b.n	801156a <_ZN8touchgfx3HAL4tickEv+0x12a>
 80115b8:	20001254 	.word	0x20001254
 80115bc:	20001255 	.word	0x20001255
 80115c0:	05f5e100 	.word	0x05f5e100

080115c4 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80115c4:	f7fa b8d0 	b.w	800b768 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080115c8 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80115c8:	6581      	str	r1, [r0, #88]	; 0x58
 80115ca:	301c      	adds	r0, #28
 80115cc:	f004 bc64 	b.w	8015e98 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080115d0 <_ZN8touchgfx3HAL5touchEll>:
 80115d0:	b530      	push	{r4, r5, lr}
 80115d2:	b087      	sub	sp, #28
 80115d4:	4604      	mov	r4, r0
 80115d6:	a804      	add	r0, sp, #16
 80115d8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80115dc:	f001 fbca 	bl	8012d74 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80115e0:	9b04      	ldr	r3, [sp, #16]
 80115e2:	a906      	add	r1, sp, #24
 80115e4:	a803      	add	r0, sp, #12
 80115e6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80115ea:	9b05      	ldr	r3, [sp, #20]
 80115ec:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80115f0:	f001 fbfe 	bl	8012df0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80115f4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80115f8:	f104 001c 	add.w	r0, r4, #28
 80115fc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8011600:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8011604:	b189      	cbz	r1, 801162a <_ZN8touchgfx3HAL5touchEll+0x5a>
 8011606:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801160a:	9300      	str	r3, [sp, #0]
 801160c:	4613      	mov	r3, r2
 801160e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8011612:	462a      	mov	r2, r5
 8011614:	f004 fc50 	bl	8015eb8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8011618:	b128      	cbz	r0, 8011626 <_ZN8touchgfx3HAL5touchEll+0x56>
 801161a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801161e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8011620:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8011624:	6623      	str	r3, [r4, #96]	; 0x60
 8011626:	b007      	add	sp, #28
 8011628:	bd30      	pop	{r4, r5, pc}
 801162a:	f004 fc89 	bl	8015f40 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801162e:	2301      	movs	r3, #1
 8011630:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8011634:	e7f1      	b.n	801161a <_ZN8touchgfx3HAL5touchEll+0x4a>

08011636 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8011636:	b570      	push	{r4, r5, r6, lr}
 8011638:	2b00      	cmp	r3, #0
 801163a:	d050      	beq.n	80116de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801163c:	ea81 0002 	eor.w	r0, r1, r2
 8011640:	07c6      	lsls	r6, r0, #31
 8011642:	d508      	bpl.n	8011656 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8011644:	3a01      	subs	r2, #1
 8011646:	18cc      	adds	r4, r1, r3
 8011648:	42a1      	cmp	r1, r4
 801164a:	d048      	beq.n	80116de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801164c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8011650:	f801 0b01 	strb.w	r0, [r1], #1
 8011654:	e7f8      	b.n	8011648 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8011656:	07d5      	lsls	r5, r2, #31
 8011658:	bf42      	ittt	mi
 801165a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801165e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8011662:	f801 0b01 	strbmi.w	r0, [r1], #1
 8011666:	2b01      	cmp	r3, #1
 8011668:	d915      	bls.n	8011696 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801166a:	ea82 0001 	eor.w	r0, r2, r1
 801166e:	0784      	lsls	r4, r0, #30
 8011670:	d02d      	beq.n	80116ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8011672:	1e94      	subs	r4, r2, #2
 8011674:	4608      	mov	r0, r1
 8011676:	18ce      	adds	r6, r1, r3
 8011678:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 801167c:	f820 5b02 	strh.w	r5, [r0], #2
 8011680:	1a35      	subs	r5, r6, r0
 8011682:	2d01      	cmp	r5, #1
 8011684:	d8f8      	bhi.n	8011678 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8011686:	1e98      	subs	r0, r3, #2
 8011688:	f003 0301 	and.w	r3, r3, #1
 801168c:	f020 0001 	bic.w	r0, r0, #1
 8011690:	3002      	adds	r0, #2
 8011692:	4401      	add	r1, r0
 8011694:	4402      	add	r2, r0
 8011696:	1f14      	subs	r4, r2, #4
 8011698:	4608      	mov	r0, r1
 801169a:	18ce      	adds	r6, r1, r3
 801169c:	1a35      	subs	r5, r6, r0
 801169e:	2d03      	cmp	r5, #3
 80116a0:	d810      	bhi.n	80116c4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 80116a2:	089c      	lsrs	r4, r3, #2
 80116a4:	00a0      	lsls	r0, r4, #2
 80116a6:	4401      	add	r1, r0
 80116a8:	3801      	subs	r0, #1
 80116aa:	4402      	add	r2, r0
 80116ac:	f06f 0003 	mvn.w	r0, #3
 80116b0:	fb00 3404 	mla	r4, r0, r4, r3
 80116b4:	440c      	add	r4, r1
 80116b6:	42a1      	cmp	r1, r4
 80116b8:	d011      	beq.n	80116de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80116ba:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80116be:	f801 3b01 	strb.w	r3, [r1], #1
 80116c2:	e7f8      	b.n	80116b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 80116c4:	f854 5f04 	ldr.w	r5, [r4, #4]!
 80116c8:	f840 5b04 	str.w	r5, [r0], #4
 80116cc:	e7e6      	b.n	801169c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 80116ce:	0790      	lsls	r0, r2, #30
 80116d0:	d0e1      	beq.n	8011696 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80116d2:	f832 0b02 	ldrh.w	r0, [r2], #2
 80116d6:	3b02      	subs	r3, #2
 80116d8:	f821 0b02 	strh.w	r0, [r1], #2
 80116dc:	e7db      	b.n	8011696 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80116de:	2001      	movs	r0, #1
 80116e0:	bd70      	pop	{r4, r5, r6, pc}

080116e2 <_ZN8touchgfx3HAL7noTouchEv>:
 80116e2:	b510      	push	{r4, lr}
 80116e4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80116e8:	4604      	mov	r4, r0
 80116ea:	b153      	cbz	r3, 8011702 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80116ec:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80116f0:	2101      	movs	r1, #1
 80116f2:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80116f6:	301c      	adds	r0, #28
 80116f8:	f004 fc22 	bl	8015f40 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80116fc:	2300      	movs	r3, #0
 80116fe:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8011702:	bd10      	pop	{r4, pc}

08011704 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8011704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011708:	4604      	mov	r4, r0
 801170a:	6980      	ldr	r0, [r0, #24]
 801170c:	b085      	sub	sp, #20
 801170e:	460f      	mov	r7, r1
 8011710:	4690      	mov	r8, r2
 8011712:	4699      	mov	r9, r3
 8011714:	b930      	cbnz	r0, 8011724 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8011716:	4b1c      	ldr	r3, [pc, #112]	; (8011788 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8011718:	f44f 71a1 	mov.w	r1, #322	; 0x142
 801171c:	4a1b      	ldr	r2, [pc, #108]	; (801178c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 801171e:	481c      	ldr	r0, [pc, #112]	; (8011790 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8011720:	f004 fea4 	bl	801646c <__assert_func>
 8011724:	ad04      	add	r5, sp, #16
 8011726:	2600      	movs	r6, #0
 8011728:	f845 6d04 	str.w	r6, [r5, #-4]!
 801172c:	6806      	ldr	r6, [r0, #0]
 801172e:	9501      	str	r5, [sp, #4]
 8011730:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8011734:	9500      	str	r5, [sp, #0]
 8011736:	6835      	ldr	r5, [r6, #0]
 8011738:	47a8      	blx	r5
 801173a:	4d16      	ldr	r5, [pc, #88]	; (8011794 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 801173c:	4606      	mov	r6, r0
 801173e:	f8a5 9000 	strh.w	r9, [r5]
 8011742:	f7f9 f92f 	bl	800a9a4 <_ZN8touchgfx3HAL3lcdEv>
 8011746:	6803      	ldr	r3, [r0, #0]
 8011748:	6a1b      	ldr	r3, [r3, #32]
 801174a:	4798      	blx	r3
 801174c:	2801      	cmp	r0, #1
 801174e:	d012      	beq.n	8011776 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8011750:	d306      	bcc.n	8011760 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8011752:	280d      	cmp	r0, #13
 8011754:	d80b      	bhi.n	801176e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8011756:	4b10      	ldr	r3, [pc, #64]	; (8011798 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8011758:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801175c:	4a0b      	ldr	r2, [pc, #44]	; (801178c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 801175e:	e7de      	b.n	801171e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8011760:	882b      	ldrh	r3, [r5, #0]
 8011762:	fb08 7203 	mla	r2, r8, r3, r7
 8011766:	9b03      	ldr	r3, [sp, #12]
 8011768:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801176c:	63e3      	str	r3, [r4, #60]	; 0x3c
 801176e:	4630      	mov	r0, r6
 8011770:	b005      	add	sp, #20
 8011772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011776:	882a      	ldrh	r2, [r5, #0]
 8011778:	9b03      	ldr	r3, [sp, #12]
 801177a:	fb08 7202 	mla	r2, r8, r2, r7
 801177e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011782:	1a9a      	subs	r2, r3, r2
 8011784:	63e2      	str	r2, [r4, #60]	; 0x3c
 8011786:	e7f2      	b.n	801176e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8011788:	08018ece 	.word	0x08018ece
 801178c:	080191e6 	.word	0x080191e6
 8011790:	08018f13 	.word	0x08018f13
 8011794:	2000124a 	.word	0x2000124a
 8011798:	08018f39 	.word	0x08018f39

0801179c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801179c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80117a0:	4698      	mov	r8, r3
 80117a2:	6803      	ldr	r3, [r0, #0]
 80117a4:	b087      	sub	sp, #28
 80117a6:	460e      	mov	r6, r1
 80117a8:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 80117aa:	4617      	mov	r7, r2
 80117ac:	4b0d      	ldr	r3, [pc, #52]	; (80117e4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 80117ae:	4604      	mov	r4, r0
 80117b0:	f8b3 9000 	ldrh.w	r9, [r3]
 80117b4:	f7f9 f8f6 	bl	800a9a4 <_ZN8touchgfx3HAL3lcdEv>
 80117b8:	6803      	ldr	r3, [r0, #0]
 80117ba:	6a1b      	ldr	r3, [r3, #32]
 80117bc:	4798      	blx	r3
 80117be:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80117c2:	463a      	mov	r2, r7
 80117c4:	4631      	mov	r1, r6
 80117c6:	9302      	str	r3, [sp, #8]
 80117c8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80117cc:	9301      	str	r3, [sp, #4]
 80117ce:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80117d2:	e9cd 9003 	strd	r9, r0, [sp, #12]
 80117d6:	9300      	str	r3, [sp, #0]
 80117d8:	4620      	mov	r0, r4
 80117da:	4643      	mov	r3, r8
 80117dc:	47a8      	blx	r5
 80117de:	b007      	add	sp, #28
 80117e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117e4:	2000124a 	.word	0x2000124a

080117e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80117e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117ec:	4604      	mov	r4, r0
 80117ee:	b08b      	sub	sp, #44	; 0x2c
 80117f0:	4610      	mov	r0, r2
 80117f2:	460d      	mov	r5, r1
 80117f4:	4691      	mov	r9, r2
 80117f6:	461e      	mov	r6, r3
 80117f8:	f002 fc7c 	bl	80140f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80117fc:	2800      	cmp	r0, #0
 80117fe:	f000 80a0 	beq.w	8011942 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8011802:	6823      	ldr	r3, [r4, #0]
 8011804:	4620      	mov	r0, r4
 8011806:	f8df b170 	ldr.w	fp, [pc, #368]	; 8011978 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>
 801180a:	af0a      	add	r7, sp, #40	; 0x28
 801180c:	6a1b      	ldr	r3, [r3, #32]
 801180e:	4798      	blx	r3
 8011810:	6823      	ldr	r3, [r4, #0]
 8011812:	4620      	mov	r0, r4
 8011814:	f8df a164 	ldr.w	sl, [pc, #356]	; 801197c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>
 8011818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801181a:	4798      	blx	r3
 801181c:	f8bb 3000 	ldrh.w	r3, [fp]
 8011820:	f827 9d0c 	strh.w	r9, [r7, #-12]!
 8011824:	4638      	mov	r0, r7
 8011826:	9301      	str	r3, [sp, #4]
 8011828:	f8ba 3000 	ldrh.w	r3, [sl]
 801182c:	9302      	str	r3, [sp, #8]
 801182e:	4b4f      	ldr	r3, [pc, #316]	; (801196c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 8011830:	881a      	ldrh	r2, [r3, #0]
 8011832:	4698      	mov	r8, r3
 8011834:	9203      	str	r2, [sp, #12]
 8011836:	4a4e      	ldr	r2, [pc, #312]	; (8011970 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8011838:	8812      	ldrh	r2, [r2, #0]
 801183a:	9204      	str	r2, [sp, #16]
 801183c:	4a4d      	ldr	r2, [pc, #308]	; (8011974 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x18c>)
 801183e:	7812      	ldrb	r2, [r2, #0]
 8011840:	2a00      	cmp	r2, #0
 8011842:	f040 8081 	bne.w	8011948 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x160>
 8011846:	f002 fc61 	bl	801410c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801184a:	f8ab 0000 	strh.w	r0, [fp]
 801184e:	4638      	mov	r0, r7
 8011850:	f002 fc96 	bl	8014180 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011854:	f8aa 0000 	strh.w	r0, [sl]
 8011858:	4638      	mov	r0, r7
 801185a:	f002 fc57 	bl	801410c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801185e:	f8a8 0000 	strh.w	r0, [r8]
 8011862:	4638      	mov	r0, r7
 8011864:	f002 fc8c 	bl	8014180 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011868:	4b41      	ldr	r3, [pc, #260]	; (8011970 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 801186a:	8018      	strh	r0, [r3, #0]
 801186c:	4648      	mov	r0, r9
 801186e:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8011872:	f002 fc3f 	bl	80140f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8011876:	2200      	movs	r2, #0
 8011878:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801187c:	4611      	mov	r1, r2
 801187e:	4628      	mov	r0, r5
 8011880:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8011884:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8011888:	f7f9 f8cb 	bl	800aa22 <_ZN8touchgfx8Drawable5setXYEss>
 801188c:	2301      	movs	r3, #1
 801188e:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8011892:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8011896:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801189a:	2b00      	cmp	r3, #0
 801189c:	dd5c      	ble.n	8011958 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 801189e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	dd58      	ble.n	8011958 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 80118a6:	462a      	mov	r2, r5
 80118a8:	ab08      	add	r3, sp, #32
 80118aa:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80118ae:	6851      	ldr	r1, [r2, #4]
 80118b0:	c303      	stmia	r3!, {r0, r1}
 80118b2:	4631      	mov	r1, r6
 80118b4:	a808      	add	r0, sp, #32
 80118b6:	f7ff fd27 	bl	8011308 <_ZN8touchgfx4RectaNERKS0_>
 80118ba:	a807      	add	r0, sp, #28
 80118bc:	f002 fdb8 	bl	8014430 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80118c0:	4606      	mov	r6, r0
 80118c2:	f7f9 f86f 	bl	800a9a4 <_ZN8touchgfx3HAL3lcdEv>
 80118c6:	6803      	ldr	r3, [r0, #0]
 80118c8:	6a1b      	ldr	r3, [r3, #32]
 80118ca:	4798      	blx	r3
 80118cc:	4286      	cmp	r6, r0
 80118ce:	d04a      	beq.n	8011966 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x17e>
 80118d0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80118d2:	b150      	cbz	r0, 80118ea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 80118d4:	a807      	add	r0, sp, #28
 80118d6:	f002 fdab 	bl	8014430 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80118da:	4606      	mov	r6, r0
 80118dc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80118de:	6803      	ldr	r3, [r0, #0]
 80118e0:	6a1b      	ldr	r3, [r3, #32]
 80118e2:	4798      	blx	r3
 80118e4:	1a33      	subs	r3, r6, r0
 80118e6:	4258      	negs	r0, r3
 80118e8:	4158      	adcs	r0, r3
 80118ea:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 80118ee:	2600      	movs	r6, #0
 80118f0:	696b      	ldr	r3, [r5, #20]
 80118f2:	a908      	add	r1, sp, #32
 80118f4:	682a      	ldr	r2, [r5, #0]
 80118f6:	4628      	mov	r0, r5
 80118f8:	9305      	str	r3, [sp, #20]
 80118fa:	616e      	str	r6, [r5, #20]
 80118fc:	6892      	ldr	r2, [r2, #8]
 80118fe:	4790      	blx	r2
 8011900:	9b05      	ldr	r3, [sp, #20]
 8011902:	4652      	mov	r2, sl
 8011904:	4649      	mov	r1, r9
 8011906:	616b      	str	r3, [r5, #20]
 8011908:	4628      	mov	r0, r5
 801190a:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 801190e:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8011912:	f7f9 f886 	bl	800aa22 <_ZN8touchgfx8Drawable5setXYEss>
 8011916:	9a01      	ldr	r2, [sp, #4]
 8011918:	4b17      	ldr	r3, [pc, #92]	; (8011978 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>)
 801191a:	4620      	mov	r0, r4
 801191c:	801a      	strh	r2, [r3, #0]
 801191e:	9a02      	ldr	r2, [sp, #8]
 8011920:	4b16      	ldr	r3, [pc, #88]	; (801197c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>)
 8011922:	801a      	strh	r2, [r3, #0]
 8011924:	9a03      	ldr	r2, [sp, #12]
 8011926:	4b11      	ldr	r3, [pc, #68]	; (801196c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 8011928:	801a      	strh	r2, [r3, #0]
 801192a:	4b11      	ldr	r3, [pc, #68]	; (8011970 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 801192c:	9a04      	ldr	r2, [sp, #16]
 801192e:	801a      	strh	r2, [r3, #0]
 8011930:	6823      	ldr	r3, [r4, #0]
 8011932:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8011936:	6a1b      	ldr	r3, [r3, #32]
 8011938:	4798      	blx	r3
 801193a:	6823      	ldr	r3, [r4, #0]
 801193c:	4620      	mov	r0, r4
 801193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011940:	4798      	blx	r3
 8011942:	b00b      	add	sp, #44	; 0x2c
 8011944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011948:	f002 fc1a 	bl	8014180 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801194c:	f8ab 0000 	strh.w	r0, [fp]
 8011950:	4638      	mov	r0, r7
 8011952:	f002 fbdb 	bl	801410c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011956:	e77d      	b.n	8011854 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x6c>
 8011958:	462a      	mov	r2, r5
 801195a:	ab08      	add	r3, sp, #32
 801195c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8011960:	6851      	ldr	r1, [r2, #4]
 8011962:	c303      	stmia	r3!, {r0, r1}
 8011964:	e7a9      	b.n	80118ba <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xd2>
 8011966:	2000      	movs	r0, #0
 8011968:	e7bf      	b.n	80118ea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 801196a:	bf00      	nop
 801196c:	20001244 	.word	0x20001244
 8011970:	20001246 	.word	0x20001246
 8011974:	20001248 	.word	0x20001248
 8011978:	2000124a 	.word	0x2000124a
 801197c:	2000124c 	.word	0x2000124c

08011980 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8011980:	4b07      	ldr	r3, [pc, #28]	; (80119a0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8011982:	b510      	push	{r4, lr}
 8011984:	781b      	ldrb	r3, [r3, #0]
 8011986:	4604      	mov	r4, r0
 8011988:	b13b      	cbz	r3, 801199a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801198a:	6803      	ldr	r3, [r0, #0]
 801198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801198e:	4798      	blx	r3
 8011990:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011992:	4283      	cmp	r3, r0
 8011994:	d101      	bne.n	801199a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8011996:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8011998:	bd10      	pop	{r4, pc}
 801199a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801199c:	e7fc      	b.n	8011998 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801199e:	bf00      	nop
 80119a0:	2000124e 	.word	0x2000124e

080119a4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 80119a4:	b508      	push	{r3, lr}
 80119a6:	290d      	cmp	r1, #13
 80119a8:	d817      	bhi.n	80119da <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 80119aa:	e8df f001 	tbb	[pc, r1]
 80119ae:	090b      	.short	0x090b
 80119b0:	0d0d0d07 	.word	0x0d0d0d07
 80119b4:	1414140d 	.word	0x1414140d
 80119b8:	0d0d1414 	.word	0x0d0d1414
 80119bc:	2020      	movs	r0, #32
 80119be:	bd08      	pop	{r3, pc}
 80119c0:	2018      	movs	r0, #24
 80119c2:	e7fc      	b.n	80119be <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80119c4:	2010      	movs	r0, #16
 80119c6:	e7fa      	b.n	80119be <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80119c8:	4b05      	ldr	r3, [pc, #20]	; (80119e0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 80119ca:	f44f 7111 	mov.w	r1, #580	; 0x244
 80119ce:	4a05      	ldr	r2, [pc, #20]	; (80119e4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 80119d0:	4805      	ldr	r0, [pc, #20]	; (80119e8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 80119d2:	f004 fd4b 	bl	801646c <__assert_func>
 80119d6:	2008      	movs	r0, #8
 80119d8:	e7f1      	b.n	80119be <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80119da:	2000      	movs	r0, #0
 80119dc:	e7ef      	b.n	80119be <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80119de:	bf00      	nop
 80119e0:	0801900c 	.word	0x0801900c
 80119e4:	080193a8 	.word	0x080193a8
 80119e8:	08018f13 	.word	0x08018f13

080119ec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80119ec:	b570      	push	{r4, r5, r6, lr}
 80119ee:	460d      	mov	r5, r1
 80119f0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80119f4:	4616      	mov	r6, r2
 80119f6:	461c      	mov	r4, r3
 80119f8:	f7ff ffd4 	bl	80119a4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80119fc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8011a00:	10c0      	asrs	r0, r0, #3
 8011a02:	fb06 5101 	mla	r1, r6, r1, r5
 8011a06:	fb00 4001 	mla	r0, r0, r1, r4
 8011a0a:	bd70      	pop	{r4, r5, r6, pc}

08011a0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8011a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a10:	b08a      	sub	sp, #40	; 0x28
 8011a12:	f04f 0c00 	mov.w	ip, #0
 8011a16:	4604      	mov	r4, r0
 8011a18:	469a      	mov	sl, r3
 8011a1a:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8011a1e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8011a22:	f1b8 0f02 	cmp.w	r8, #2
 8011a26:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8011a2a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8011a2e:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8011a32:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8011a36:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8011a3a:	f8cd c020 	str.w	ip, [sp, #32]
 8011a3e:	d030      	beq.n	8011aa2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8011a40:	2bff      	cmp	r3, #255	; 0xff
 8011a42:	d12c      	bne.n	8011a9e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8011a44:	4560      	cmp	r0, ip
 8011a46:	bf14      	ite	ne
 8011a48:	2004      	movne	r0, #4
 8011a4a:	2001      	moveq	r0, #1
 8011a4c:	9204      	str	r2, [sp, #16]
 8011a4e:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8011a52:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8011a56:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011a5a:	f8ad 6018 	strh.w	r6, [sp, #24]
 8011a5e:	f8ad 501a 	strh.w	r5, [sp, #26]
 8011a62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a66:	4620      	mov	r0, r4
 8011a68:	f7ff ff8a 	bl	8011980 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011a6c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8011a70:	4603      	mov	r3, r0
 8011a72:	4651      	mov	r1, sl
 8011a74:	4620      	mov	r0, r4
 8011a76:	e9cd 9700 	strd	r9, r7, [sp]
 8011a7a:	f7ff ffb7 	bl	80119ec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8011a7e:	f8ad 901e 	strh.w	r9, [sp, #30]
 8011a82:	9005      	str	r0, [sp, #20]
 8011a84:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8011a88:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8011a8c:	b106      	cbz	r6, 8011a90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8011a8e:	b98d      	cbnz	r5, 8011ab4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8011a90:	4b12      	ldr	r3, [pc, #72]	; (8011adc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8011a92:	f240 11c3 	movw	r1, #451	; 0x1c3
 8011a96:	4a12      	ldr	r2, [pc, #72]	; (8011ae0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8011a98:	4812      	ldr	r0, [pc, #72]	; (8011ae4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8011a9a:	f004 fce7 	bl	801646c <__assert_func>
 8011a9e:	2004      	movs	r0, #4
 8011aa0:	e7d4      	b.n	8011a4c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8011aa2:	2bff      	cmp	r3, #255	; 0xff
 8011aa4:	d104      	bne.n	8011ab0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8011aa6:	2800      	cmp	r0, #0
 8011aa8:	bf14      	ite	ne
 8011aaa:	2040      	movne	r0, #64	; 0x40
 8011aac:	2020      	moveq	r0, #32
 8011aae:	e7cd      	b.n	8011a4c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8011ab0:	2040      	movs	r0, #64	; 0x40
 8011ab2:	e7cb      	b.n	8011a4c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8011ab4:	6823      	ldr	r3, [r4, #0]
 8011ab6:	4620      	mov	r0, r4
 8011ab8:	9d02      	ldr	r5, [sp, #8]
 8011aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011abc:	4798      	blx	r3
 8011abe:	4228      	tst	r0, r5
 8011ac0:	d104      	bne.n	8011acc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8011ac2:	4b09      	ldr	r3, [pc, #36]	; (8011ae8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8011ac4:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8011ac8:	4a05      	ldr	r2, [pc, #20]	; (8011ae0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8011aca:	e7e5      	b.n	8011a98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8011acc:	6860      	ldr	r0, [r4, #4]
 8011ace:	a902      	add	r1, sp, #8
 8011ad0:	6803      	ldr	r3, [r0, #0]
 8011ad2:	685b      	ldr	r3, [r3, #4]
 8011ad4:	4798      	blx	r3
 8011ad6:	b00a      	add	sp, #40	; 0x28
 8011ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011adc:	08018f8f 	.word	0x08018f8f
 8011ae0:	0801924a 	.word	0x0801924a
 8011ae4:	08018f13 	.word	0x08018f13
 8011ae8:	08018fc7 	.word	0x08018fc7

08011aec <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8011aec:	b510      	push	{r4, lr}
 8011aee:	b08a      	sub	sp, #40	; 0x28
 8011af0:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8011af4:	9408      	str	r4, [sp, #32]
 8011af6:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8011afa:	9407      	str	r4, [sp, #28]
 8011afc:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8011b00:	9406      	str	r4, [sp, #24]
 8011b02:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8011b06:	9405      	str	r4, [sp, #20]
 8011b08:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8011b0c:	9404      	str	r4, [sp, #16]
 8011b0e:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8011b12:	9403      	str	r4, [sp, #12]
 8011b14:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8011b18:	9402      	str	r4, [sp, #8]
 8011b1a:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8011b1e:	e9cd 3400 	strd	r3, r4, [sp]
 8011b22:	4613      	mov	r3, r2
 8011b24:	2200      	movs	r2, #0
 8011b26:	f7ff ff71 	bl	8011a0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8011b2a:	b00a      	add	sp, #40	; 0x28
 8011b2c:	bd10      	pop	{r4, pc}
	...

08011b30 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8011b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b32:	b08b      	sub	sp, #44	; 0x2c
 8011b34:	4616      	mov	r6, r2
 8011b36:	460d      	mov	r5, r1
 8011b38:	461f      	mov	r7, r3
 8011b3a:	4604      	mov	r4, r0
 8011b3c:	f7f8 ff32 	bl	800a9a4 <_ZN8touchgfx3HAL3lcdEv>
 8011b40:	6803      	ldr	r3, [r0, #0]
 8011b42:	6a1b      	ldr	r3, [r3, #32]
 8011b44:	4798      	blx	r3
 8011b46:	4b0e      	ldr	r3, [pc, #56]	; (8011b80 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8011b48:	2200      	movs	r2, #0
 8011b4a:	4629      	mov	r1, r5
 8011b4c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8011b50:	881b      	ldrh	r3, [r3, #0]
 8011b52:	4620      	mov	r0, r4
 8011b54:	9306      	str	r3, [sp, #24]
 8011b56:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8011b5a:	9305      	str	r3, [sp, #20]
 8011b5c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8011b60:	9304      	str	r3, [sp, #16]
 8011b62:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011b66:	9303      	str	r3, [sp, #12]
 8011b68:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011b6c:	9302      	str	r3, [sp, #8]
 8011b6e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8011b72:	e9cd 7300 	strd	r7, r3, [sp]
 8011b76:	4633      	mov	r3, r6
 8011b78:	f7ff ff48 	bl	8011a0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8011b7c:	b00b      	add	sp, #44	; 0x2c
 8011b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b80:	2000124a 	.word	0x2000124a

08011b84 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8011b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b88:	461f      	mov	r7, r3
 8011b8a:	4b14      	ldr	r3, [pc, #80]	; (8011bdc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8011b8c:	b08a      	sub	sp, #40	; 0x28
 8011b8e:	4616      	mov	r6, r2
 8011b90:	f8b3 8000 	ldrh.w	r8, [r3]
 8011b94:	460d      	mov	r5, r1
 8011b96:	4604      	mov	r4, r0
 8011b98:	f7f8 ff04 	bl	800a9a4 <_ZN8touchgfx3HAL3lcdEv>
 8011b9c:	6803      	ldr	r3, [r0, #0]
 8011b9e:	6a1b      	ldr	r3, [r3, #32]
 8011ba0:	4798      	blx	r3
 8011ba2:	2302      	movs	r3, #2
 8011ba4:	9008      	str	r0, [sp, #32]
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	4629      	mov	r1, r5
 8011baa:	4620      	mov	r0, r4
 8011bac:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8011bb0:	2301      	movs	r3, #1
 8011bb2:	9305      	str	r3, [sp, #20]
 8011bb4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8011bb8:	9304      	str	r3, [sp, #16]
 8011bba:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011bbe:	9303      	str	r3, [sp, #12]
 8011bc0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011bc4:	9302      	str	r3, [sp, #8]
 8011bc6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8011bca:	e9cd 7300 	strd	r7, r3, [sp]
 8011bce:	4633      	mov	r3, r6
 8011bd0:	f7ff ff1c 	bl	8011a0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8011bd4:	b00a      	add	sp, #40	; 0x28
 8011bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bda:	bf00      	nop
 8011bdc:	2000124a 	.word	0x2000124a

08011be0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8011be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011be4:	b08b      	sub	sp, #44	; 0x2c
 8011be6:	469b      	mov	fp, r3
 8011be8:	4604      	mov	r4, r0
 8011bea:	4692      	mov	sl, r2
 8011bec:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8011bf0:	2600      	movs	r6, #0
 8011bf2:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8011bf6:	4689      	mov	r9, r1
 8011bf8:	2fff      	cmp	r7, #255	; 0xff
 8011bfa:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8011bfe:	9608      	str	r6, [sp, #32]
 8011c00:	bf14      	ite	ne
 8011c02:	2308      	movne	r3, #8
 8011c04:	2302      	moveq	r3, #2
 8011c06:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8011c0a:	f7ff feb9 	bl	8011980 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011c0e:	465a      	mov	r2, fp
 8011c10:	4603      	mov	r3, r0
 8011c12:	4651      	mov	r1, sl
 8011c14:	4620      	mov	r0, r4
 8011c16:	e9cd 8500 	strd	r8, r5, [sp]
 8011c1a:	f7ff fee7 	bl	80119ec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8011c1e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8011c22:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8011c26:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011c2a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8011c2e:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8011c32:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011c36:	6823      	ldr	r3, [r4, #0]
 8011c38:	9d02      	ldr	r5, [sp, #8]
 8011c3a:	9005      	str	r0, [sp, #20]
 8011c3c:	4620      	mov	r0, r4
 8011c3e:	f8ad 601c 	strh.w	r6, [sp, #28]
 8011c42:	f8ad 801e 	strh.w	r8, [sp, #30]
 8011c46:	f8cd 9020 	str.w	r9, [sp, #32]
 8011c4a:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8011c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c50:	4798      	blx	r3
 8011c52:	4228      	tst	r0, r5
 8011c54:	d106      	bne.n	8011c64 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8011c56:	4b07      	ldr	r3, [pc, #28]	; (8011c74 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8011c58:	f240 11fb 	movw	r1, #507	; 0x1fb
 8011c5c:	4a06      	ldr	r2, [pc, #24]	; (8011c78 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8011c5e:	4807      	ldr	r0, [pc, #28]	; (8011c7c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8011c60:	f004 fc04 	bl	801646c <__assert_func>
 8011c64:	6860      	ldr	r0, [r4, #4]
 8011c66:	a902      	add	r1, sp, #8
 8011c68:	6803      	ldr	r3, [r0, #0]
 8011c6a:	685b      	ldr	r3, [r3, #4]
 8011c6c:	4798      	blx	r3
 8011c6e:	b00b      	add	sp, #44	; 0x2c
 8011c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c74:	08018fc7 	.word	0x08018fc7
 8011c78:	08019313 	.word	0x08019313
 8011c7c:	08018f13 	.word	0x08018f13

08011c80 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8011c80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011c84:	461f      	mov	r7, r3
 8011c86:	4b0b      	ldr	r3, [pc, #44]	; (8011cb4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8011c88:	460d      	mov	r5, r1
 8011c8a:	4616      	mov	r6, r2
 8011c8c:	f8b3 8000 	ldrh.w	r8, [r3]
 8011c90:	4604      	mov	r4, r0
 8011c92:	f7f8 fe87 	bl	800a9a4 <_ZN8touchgfx3HAL3lcdEv>
 8011c96:	6803      	ldr	r3, [r0, #0]
 8011c98:	6a1b      	ldr	r3, [r3, #32]
 8011c9a:	4798      	blx	r3
 8011c9c:	463b      	mov	r3, r7
 8011c9e:	4632      	mov	r2, r6
 8011ca0:	4629      	mov	r1, r5
 8011ca2:	e9cd 8000 	strd	r8, r0, [sp]
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	f7ff fea0 	bl	80119ec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8011cac:	b002      	add	sp, #8
 8011cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cb2:	bf00      	nop
 8011cb4:	2000124a 	.word	0x2000124a

08011cb8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8011cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cbc:	4698      	mov	r8, r3
 8011cbe:	b088      	sub	sp, #32
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	4617      	mov	r7, r2
 8011cc4:	4604      	mov	r4, r0
 8011cc6:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8011cca:	9306      	str	r3, [sp, #24]
 8011ccc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8011cd0:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8011cd4:	f8ad 6010 	strh.w	r6, [sp, #16]
 8011cd8:	f8ad 5012 	strh.w	r5, [sp, #18]
 8011cdc:	e9cd 3100 	strd	r3, r1, [sp]
 8011ce0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8011ce4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011ce8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8011cec:	f88d 301c 	strb.w	r3, [sp, #28]
 8011cf0:	f7ff fe46 	bl	8011980 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011cf4:	4642      	mov	r2, r8
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	4639      	mov	r1, r7
 8011cfa:	4620      	mov	r0, r4
 8011cfc:	f7ff ffc0 	bl	8011c80 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011d00:	4b16      	ldr	r3, [pc, #88]	; (8011d5c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8011d02:	9003      	str	r0, [sp, #12]
 8011d04:	881b      	ldrh	r3, [r3, #0]
 8011d06:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011d0a:	f7f8 fe4b 	bl	800a9a4 <_ZN8touchgfx3HAL3lcdEv>
 8011d0e:	6803      	ldr	r3, [r0, #0]
 8011d10:	6a1b      	ldr	r3, [r3, #32]
 8011d12:	4798      	blx	r3
 8011d14:	f88d 001e 	strb.w	r0, [sp, #30]
 8011d18:	f88d 001d 	strb.w	r0, [sp, #29]
 8011d1c:	b106      	cbz	r6, 8011d20 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8011d1e:	b935      	cbnz	r5, 8011d2e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8011d20:	4b0f      	ldr	r3, [pc, #60]	; (8011d60 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8011d22:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8011d26:	4a0f      	ldr	r2, [pc, #60]	; (8011d64 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8011d28:	480f      	ldr	r0, [pc, #60]	; (8011d68 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8011d2a:	f004 fb9f 	bl	801646c <__assert_func>
 8011d2e:	6823      	ldr	r3, [r4, #0]
 8011d30:	4620      	mov	r0, r4
 8011d32:	9d00      	ldr	r5, [sp, #0]
 8011d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d36:	4798      	blx	r3
 8011d38:	4228      	tst	r0, r5
 8011d3a:	d104      	bne.n	8011d46 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8011d3c:	4b0b      	ldr	r3, [pc, #44]	; (8011d6c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8011d3e:	f240 11e1 	movw	r1, #481	; 0x1e1
 8011d42:	4a08      	ldr	r2, [pc, #32]	; (8011d64 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8011d44:	e7f0      	b.n	8011d28 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8011d46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011d48:	4669      	mov	r1, sp
 8011d4a:	6860      	ldr	r0, [r4, #4]
 8011d4c:	9306      	str	r3, [sp, #24]
 8011d4e:	6803      	ldr	r3, [r0, #0]
 8011d50:	685b      	ldr	r3, [r3, #4]
 8011d52:	4798      	blx	r3
 8011d54:	b008      	add	sp, #32
 8011d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d5a:	bf00      	nop
 8011d5c:	2000124a 	.word	0x2000124a
 8011d60:	08018f8f 	.word	0x08018f8f
 8011d64:	080190fc 	.word	0x080190fc
 8011d68:	08018f13 	.word	0x08018f13
 8011d6c:	08018fc7 	.word	0x08018fc7

08011d70 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8011d70:	b570      	push	{r4, r5, r6, lr}
 8011d72:	b08a      	sub	sp, #40	; 0x28
 8011d74:	4604      	mov	r4, r0
 8011d76:	466b      	mov	r3, sp
 8011d78:	e883 0006 	stmia.w	r3, {r1, r2}
 8011d7c:	4b1f      	ldr	r3, [pc, #124]	; (8011dfc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8011d7e:	781b      	ldrb	r3, [r3, #0]
 8011d80:	b933      	cbnz	r3, 8011d90 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8011d82:	4b1f      	ldr	r3, [pc, #124]	; (8011e00 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8011d84:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8011d88:	4a1e      	ldr	r2, [pc, #120]	; (8011e04 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8011d8a:	481f      	ldr	r0, [pc, #124]	; (8011e08 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8011d8c:	f004 fb6e 	bl	801646c <__assert_func>
 8011d90:	2300      	movs	r3, #0
 8011d92:	f8bd 5000 	ldrh.w	r5, [sp]
 8011d96:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8011d9a:	9308      	str	r3, [sp, #32]
 8011d9c:	2301      	movs	r3, #1
 8011d9e:	9302      	str	r3, [sp, #8]
 8011da0:	6803      	ldr	r3, [r0, #0]
 8011da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011da4:	4798      	blx	r3
 8011da6:	4632      	mov	r2, r6
 8011da8:	4629      	mov	r1, r5
 8011daa:	4603      	mov	r3, r0
 8011dac:	4620      	mov	r0, r4
 8011dae:	f7ff ff67 	bl	8011c80 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011db2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011db4:	9003      	str	r0, [sp, #12]
 8011db6:	9305      	str	r3, [sp, #20]
 8011db8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011dbc:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011dc0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011dc4:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011dc8:	4b10      	ldr	r3, [pc, #64]	; (8011e0c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8011dca:	881b      	ldrh	r3, [r3, #0]
 8011dcc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011dd0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011dd4:	f7f8 fde6 	bl	800a9a4 <_ZN8touchgfx3HAL3lcdEv>
 8011dd8:	6803      	ldr	r3, [r0, #0]
 8011dda:	6a1b      	ldr	r3, [r3, #32]
 8011ddc:	4798      	blx	r3
 8011dde:	23ff      	movs	r3, #255	; 0xff
 8011de0:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8011de4:	a902      	add	r1, sp, #8
 8011de6:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8011dea:	6860      	ldr	r0, [r4, #4]
 8011dec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8011df0:	6803      	ldr	r3, [r0, #0]
 8011df2:	685b      	ldr	r3, [r3, #4]
 8011df4:	4798      	blx	r3
 8011df6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8011df8:	b00a      	add	sp, #40	; 0x28
 8011dfa:	bd70      	pop	{r4, r5, r6, pc}
 8011dfc:	2000124f 	.word	0x2000124f
 8011e00:	08018e60 	.word	0x08018e60
 8011e04:	080191a0 	.word	0x080191a0
 8011e08:	08018f13 	.word	0x08018f13
 8011e0c:	2000124a 	.word	0x2000124a

08011e10 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8011e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e12:	b08b      	sub	sp, #44	; 0x2c
 8011e14:	4604      	mov	r4, r0
 8011e16:	466d      	mov	r5, sp
 8011e18:	e885 0006 	stmia.w	r5, {r1, r2}
 8011e1c:	461d      	mov	r5, r3
 8011e1e:	2300      	movs	r3, #0
 8011e20:	f8bd 6000 	ldrh.w	r6, [sp]
 8011e24:	9308      	str	r3, [sp, #32]
 8011e26:	2301      	movs	r3, #1
 8011e28:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8011e2c:	9302      	str	r3, [sp, #8]
 8011e2e:	6803      	ldr	r3, [r0, #0]
 8011e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e32:	4798      	blx	r3
 8011e34:	463a      	mov	r2, r7
 8011e36:	4631      	mov	r1, r6
 8011e38:	4603      	mov	r3, r0
 8011e3a:	4620      	mov	r0, r4
 8011e3c:	f7ff ff20 	bl	8011c80 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011e40:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011e44:	9003      	str	r0, [sp, #12]
 8011e46:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011e4a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011e4e:	9505      	str	r5, [sp, #20]
 8011e50:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011e54:	4b0d      	ldr	r3, [pc, #52]	; (8011e8c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8011e56:	881b      	ldrh	r3, [r3, #0]
 8011e58:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011e5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011e5e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011e62:	f7f8 fd9f 	bl	800a9a4 <_ZN8touchgfx3HAL3lcdEv>
 8011e66:	6803      	ldr	r3, [r0, #0]
 8011e68:	6a1b      	ldr	r3, [r3, #32]
 8011e6a:	4798      	blx	r3
 8011e6c:	23ff      	movs	r3, #255	; 0xff
 8011e6e:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8011e72:	a902      	add	r1, sp, #8
 8011e74:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8011e78:	6860      	ldr	r0, [r4, #4]
 8011e7a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8011e7e:	6803      	ldr	r3, [r0, #0]
 8011e80:	685b      	ldr	r3, [r3, #4]
 8011e82:	4798      	blx	r3
 8011e84:	4628      	mov	r0, r5
 8011e86:	b00b      	add	sp, #44	; 0x2c
 8011e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e8a:	bf00      	nop
 8011e8c:	2000124a 	.word	0x2000124a

08011e90 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8011e90:	b570      	push	{r4, r5, r6, lr}
 8011e92:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8011e96:	4604      	mov	r4, r0
 8011e98:	b19b      	cbz	r3, 8011ec2 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8011e9a:	2002      	movs	r0, #2
 8011e9c:	f7f9 f97e 	bl	800b19c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	4620      	mov	r0, r4
 8011ea4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8011ea8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8011eac:	6823      	ldr	r3, [r4, #0]
 8011eae:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8011eb2:	f7ff fd65 	bl	8011980 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011eb6:	4601      	mov	r1, r0
 8011eb8:	4620      	mov	r0, r4
 8011eba:	462b      	mov	r3, r5
 8011ebc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ec0:	4718      	bx	r3
 8011ec2:	bd70      	pop	{r4, r5, r6, pc}

08011ec4 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>:
 8011ec4:	b538      	push	{r3, r4, r5, lr}
 8011ec6:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 8011eca:	4604      	mov	r4, r0
 8011ecc:	460d      	mov	r5, r1
 8011ece:	428a      	cmp	r2, r1
 8011ed0:	d008      	beq.n	8011ee4 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x20>
 8011ed2:	2a01      	cmp	r2, #1
 8011ed4:	6803      	ldr	r3, [r0, #0]
 8011ed6:	d106      	bne.n	8011ee6 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 8011ed8:	b929      	cbnz	r1, 8011ee6 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 8011eda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011ede:	4798      	blx	r3
 8011ee0:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8011ee4:	bd38      	pop	{r3, r4, r5, pc}
 8011ee6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011eea:	4620      	mov	r0, r4
 8011eec:	e7f7      	b.n	8011ede <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x1a>
	...

08011ef0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8011ef0:	4b0d      	ldr	r3, [pc, #52]	; (8011f28 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8011ef2:	b510      	push	{r4, lr}
 8011ef4:	781b      	ldrb	r3, [r3, #0]
 8011ef6:	4604      	mov	r4, r0
 8011ef8:	b95b      	cbnz	r3, 8011f12 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8011efa:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8011efe:	2b02      	cmp	r3, #2
 8011f00:	d007      	beq.n	8011f12 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8011f02:	6840      	ldr	r0, [r0, #4]
 8011f04:	f000 f930 	bl	8012168 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8011f08:	b118      	cbz	r0, 8011f12 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8011f0a:	6862      	ldr	r2, [r4, #4]
 8011f0c:	7a53      	ldrb	r3, [r2, #9]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d0fc      	beq.n	8011f0c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8011f12:	f7f9 fc13 	bl	800b73c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8011f16:	4620      	mov	r0, r4
 8011f18:	2100      	movs	r1, #0
 8011f1a:	f7ff ffd3 	bl	8011ec4 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 8011f1e:	4620      	mov	r0, r4
 8011f20:	f7ff fd2e 	bl	8011980 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011f24:	bd10      	pop	{r4, pc}
 8011f26:	bf00      	nop
 8011f28:	2000124e 	.word	0x2000124e

08011f2c <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8011f2c:	4770      	bx	lr

08011f2e <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8011f2e:	2000      	movs	r0, #0
 8011f30:	4770      	bx	lr

08011f32 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8011f32:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8011f36:	1a13      	subs	r3, r2, r0
 8011f38:	4258      	negs	r0, r3
 8011f3a:	4158      	adcs	r0, r3
 8011f3c:	4770      	bx	lr

08011f3e <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8011f3e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8011f42:	1a9b      	subs	r3, r3, r2
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	bfdc      	itt	le
 8011f48:	6882      	ldrle	r2, [r0, #8]
 8011f4a:	189b      	addle	r3, r3, r2
 8011f4c:	2b01      	cmp	r3, #1
 8011f4e:	bfcc      	ite	gt
 8011f50:	2000      	movgt	r0, #0
 8011f52:	2001      	movle	r0, #1
 8011f54:	4770      	bx	lr

08011f56 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8011f56:	6902      	ldr	r2, [r0, #16]
 8011f58:	6840      	ldr	r0, [r0, #4]
 8011f5a:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8011f5e:	4770      	bx	lr

08011f60 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8011f60:	6803      	ldr	r3, [r0, #0]
 8011f62:	691b      	ldr	r3, [r3, #16]
 8011f64:	4718      	bx	r3

08011f66 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8011f66:	4770      	bx	lr

08011f68 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8011f68:	4770      	bx	lr
	...

08011f6c <_ZN8touchgfx13DMA_Interface7executeEv>:
 8011f6c:	2301      	movs	r3, #1
 8011f6e:	b570      	push	{r4, r5, r6, lr}
 8011f70:	7203      	strb	r3, [r0, #8]
 8011f72:	4604      	mov	r4, r0
 8011f74:	6840      	ldr	r0, [r0, #4]
 8011f76:	6803      	ldr	r3, [r0, #0]
 8011f78:	699b      	ldr	r3, [r3, #24]
 8011f7a:	4798      	blx	r3
 8011f7c:	6803      	ldr	r3, [r0, #0]
 8011f7e:	4605      	mov	r5, r0
 8011f80:	2b08      	cmp	r3, #8
 8011f82:	d01e      	beq.n	8011fc2 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8011f84:	d80b      	bhi.n	8011f9e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011f86:	2b02      	cmp	r3, #2
 8011f88:	d027      	beq.n	8011fda <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8011f8a:	2b04      	cmp	r3, #4
 8011f8c:	d011      	beq.n	8011fb2 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8011f8e:	2b01      	cmp	r3, #1
 8011f90:	d028      	beq.n	8011fe4 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8011f92:	4b17      	ldr	r3, [pc, #92]	; (8011ff0 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8011f94:	218c      	movs	r1, #140	; 0x8c
 8011f96:	4a17      	ldr	r2, [pc, #92]	; (8011ff4 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8011f98:	4817      	ldr	r0, [pc, #92]	; (8011ff8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8011f9a:	f004 fa67 	bl	801646c <__assert_func>
 8011f9e:	2b40      	cmp	r3, #64	; 0x40
 8011fa0:	d020      	beq.n	8011fe4 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8011fa2:	d801      	bhi.n	8011fa8 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8011fa4:	2b20      	cmp	r3, #32
 8011fa6:	e7f3      	b.n	8011f90 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8011fa8:	2b80      	cmp	r3, #128	; 0x80
 8011faa:	d01b      	beq.n	8011fe4 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8011fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011fb0:	e7ee      	b.n	8011f90 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8011fb2:	6823      	ldr	r3, [r4, #0]
 8011fb4:	7f01      	ldrb	r1, [r0, #28]
 8011fb6:	4620      	mov	r0, r4
 8011fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fba:	4798      	blx	r3
 8011fbc:	6823      	ldr	r3, [r4, #0]
 8011fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fc0:	e006      	b.n	8011fd0 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8011fc2:	6823      	ldr	r3, [r4, #0]
 8011fc4:	7f01      	ldrb	r1, [r0, #28]
 8011fc6:	4620      	mov	r0, r4
 8011fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fca:	4798      	blx	r3
 8011fcc:	6823      	ldr	r3, [r4, #0]
 8011fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fd0:	4629      	mov	r1, r5
 8011fd2:	4620      	mov	r0, r4
 8011fd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011fd8:	4718      	bx	r3
 8011fda:	6823      	ldr	r3, [r4, #0]
 8011fdc:	4620      	mov	r0, r4
 8011fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fe0:	4798      	blx	r3
 8011fe2:	e7f3      	b.n	8011fcc <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8011fe4:	6823      	ldr	r3, [r4, #0]
 8011fe6:	4620      	mov	r0, r4
 8011fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fea:	4798      	blx	r3
 8011fec:	e7e6      	b.n	8011fbc <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8011fee:	bf00      	nop
 8011ff0:	080193f1 	.word	0x080193f1
 8011ff4:	08019500 	.word	0x08019500
 8011ff8:	08019416 	.word	0x08019416

08011ffc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8011ffc:	b570      	push	{r4, r5, r6, lr}
 8011ffe:	4604      	mov	r4, r0
 8012000:	460e      	mov	r6, r1
 8012002:	6860      	ldr	r0, [r4, #4]
 8012004:	6803      	ldr	r3, [r0, #0]
 8012006:	685b      	ldr	r3, [r3, #4]
 8012008:	4798      	blx	r3
 801200a:	2800      	cmp	r0, #0
 801200c:	d1f9      	bne.n	8012002 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801200e:	4d0d      	ldr	r5, [pc, #52]	; (8012044 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8012010:	6828      	ldr	r0, [r5, #0]
 8012012:	6803      	ldr	r3, [r0, #0]
 8012014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012016:	4798      	blx	r3
 8012018:	f7f9 fbb2 	bl	800b780 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801201c:	6828      	ldr	r0, [r5, #0]
 801201e:	2101      	movs	r1, #1
 8012020:	f7ff ff50 	bl	8011ec4 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 8012024:	6860      	ldr	r0, [r4, #4]
 8012026:	4631      	mov	r1, r6
 8012028:	6803      	ldr	r3, [r0, #0]
 801202a:	689b      	ldr	r3, [r3, #8]
 801202c:	4798      	blx	r3
 801202e:	6823      	ldr	r3, [r4, #0]
 8012030:	4620      	mov	r0, r4
 8012032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012034:	4798      	blx	r3
 8012036:	6828      	ldr	r0, [r5, #0]
 8012038:	6803      	ldr	r3, [r0, #0]
 801203a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801203e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012040:	4718      	bx	r3
 8012042:	bf00      	nop
 8012044:	20001250 	.word	0x20001250

08012048 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8012048:	b508      	push	{r3, lr}
 801204a:	f7f9 fb77 	bl	800b73c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801204e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012052:	f7f9 bb89 	b.w	800b768 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08012056 <_ZN8touchgfx13DMA_Interface5startEv>:
 8012056:	b510      	push	{r4, lr}
 8012058:	4604      	mov	r4, r0
 801205a:	6840      	ldr	r0, [r0, #4]
 801205c:	6803      	ldr	r3, [r0, #0]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	4798      	blx	r3
 8012062:	b948      	cbnz	r0, 8012078 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012064:	7a63      	ldrb	r3, [r4, #9]
 8012066:	b13b      	cbz	r3, 8012078 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012068:	7a23      	ldrb	r3, [r4, #8]
 801206a:	b92b      	cbnz	r3, 8012078 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801206c:	6823      	ldr	r3, [r4, #0]
 801206e:	4620      	mov	r0, r4
 8012070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012076:	4718      	bx	r3
 8012078:	bd10      	pop	{r4, pc}
	...

0801207c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801207c:	b510      	push	{r4, lr}
 801207e:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8012082:	1b12      	subs	r2, r2, r4
 8012084:	2a00      	cmp	r2, #0
 8012086:	bfdc      	itt	le
 8012088:	6883      	ldrle	r3, [r0, #8]
 801208a:	18d2      	addle	r2, r2, r3
 801208c:	2a01      	cmp	r2, #1
 801208e:	dd18      	ble.n	80120c2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8012090:	6843      	ldr	r3, [r0, #4]
 8012092:	f101 021c 	add.w	r2, r1, #28
 8012096:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 801209a:	f851 4b04 	ldr.w	r4, [r1], #4
 801209e:	4291      	cmp	r1, r2
 80120a0:	f843 4b04 	str.w	r4, [r3], #4
 80120a4:	d1f9      	bne.n	801209a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 80120a6:	880a      	ldrh	r2, [r1, #0]
 80120a8:	801a      	strh	r2, [r3, #0]
 80120aa:	788a      	ldrb	r2, [r1, #2]
 80120ac:	709a      	strb	r2, [r3, #2]
 80120ae:	68c3      	ldr	r3, [r0, #12]
 80120b0:	6882      	ldr	r2, [r0, #8]
 80120b2:	f3bf 8f5b 	dmb	ish
 80120b6:	3301      	adds	r3, #1
 80120b8:	429a      	cmp	r2, r3
 80120ba:	bfd8      	it	le
 80120bc:	1a9b      	suble	r3, r3, r2
 80120be:	60c3      	str	r3, [r0, #12]
 80120c0:	bd10      	pop	{r4, pc}
 80120c2:	4b03      	ldr	r3, [pc, #12]	; (80120d0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80120c4:	2139      	movs	r1, #57	; 0x39
 80120c6:	4a03      	ldr	r2, [pc, #12]	; (80120d4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 80120c8:	4803      	ldr	r0, [pc, #12]	; (80120d8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 80120ca:	f004 f9cf 	bl	801646c <__assert_func>
 80120ce:	bf00      	nop
 80120d0:	0801943c 	.word	0x0801943c
 80120d4:	08019530 	.word	0x08019530
 80120d8:	08019416 	.word	0x08019416

080120dc <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80120dc:	b510      	push	{r4, lr}
 80120de:	6803      	ldr	r3, [r0, #0]
 80120e0:	4604      	mov	r4, r0
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	4798      	blx	r3
 80120e6:	b128      	cbz	r0, 80120f4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80120e8:	4b07      	ldr	r3, [pc, #28]	; (8012108 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80120ea:	213f      	movs	r1, #63	; 0x3f
 80120ec:	4a07      	ldr	r2, [pc, #28]	; (801210c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80120ee:	4808      	ldr	r0, [pc, #32]	; (8012110 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80120f0:	f004 f9bc 	bl	801646c <__assert_func>
 80120f4:	6923      	ldr	r3, [r4, #16]
 80120f6:	68a2      	ldr	r2, [r4, #8]
 80120f8:	f3bf 8f5b 	dmb	ish
 80120fc:	3301      	adds	r3, #1
 80120fe:	429a      	cmp	r2, r3
 8012100:	bfd8      	it	le
 8012102:	1a9b      	suble	r3, r3, r2
 8012104:	6123      	str	r3, [r4, #16]
 8012106:	bd10      	pop	{r4, pc}
 8012108:	0801945f 	.word	0x0801945f
 801210c:	0801957e 	.word	0x0801957e
 8012110:	08019416 	.word	0x08019416

08012114 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8012114:	b570      	push	{r4, r5, r6, lr}
 8012116:	4604      	mov	r4, r0
 8012118:	6840      	ldr	r0, [r0, #4]
 801211a:	6803      	ldr	r3, [r0, #0]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	4798      	blx	r3
 8012120:	4605      	mov	r5, r0
 8012122:	b930      	cbnz	r0, 8012132 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8012124:	7a23      	ldrb	r3, [r4, #8]
 8012126:	b123      	cbz	r3, 8012132 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8012128:	6860      	ldr	r0, [r4, #4]
 801212a:	6803      	ldr	r3, [r0, #0]
 801212c:	695b      	ldr	r3, [r3, #20]
 801212e:	4798      	blx	r3
 8012130:	7225      	strb	r5, [r4, #8]
 8012132:	6860      	ldr	r0, [r4, #4]
 8012134:	6803      	ldr	r3, [r0, #0]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	4798      	blx	r3
 801213a:	b928      	cbnz	r0, 8012148 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801213c:	6823      	ldr	r3, [r4, #0]
 801213e:	4620      	mov	r0, r4
 8012140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012146:	4718      	bx	r3
 8012148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801214c:	f7f9 bb24 	b.w	800b798 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08012150 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8012150:	b510      	push	{r4, lr}
 8012152:	6082      	str	r2, [r0, #8]
 8012154:	2200      	movs	r2, #0
 8012156:	4c03      	ldr	r4, [pc, #12]	; (8012164 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8012158:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801215c:	e9c0 4100 	strd	r4, r1, [r0]
 8012160:	bd10      	pop	{r4, pc}
 8012162:	bf00      	nop
 8012164:	080194e4 	.word	0x080194e4

08012168 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8012168:	6840      	ldr	r0, [r0, #4]
 801216a:	6803      	ldr	r3, [r0, #0]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	4718      	bx	r3

08012170 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8012170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012174:	4696      	mov	lr, r2
 8012176:	b097      	sub	sp, #92	; 0x5c
 8012178:	4605      	mov	r5, r0
 801217a:	4614      	mov	r4, r2
 801217c:	460e      	mov	r6, r1
 801217e:	461f      	mov	r7, r3
 8012180:	f10d 0c1c 	add.w	ip, sp, #28
 8012184:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8012188:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801218c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8012190:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012194:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012198:	f8de 3000 	ldr.w	r3, [lr]
 801219c:	f104 0e14 	add.w	lr, r4, #20
 80121a0:	f8cc 3000 	str.w	r3, [ip]
 80121a4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80121a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80121ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80121b0:	f8de 3000 	ldr.w	r3, [lr]
 80121b4:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80121b8:	f8cc 3000 	str.w	r3, [ip]
 80121bc:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80121c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80121c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80121c8:	f8de 3000 	ldr.w	r3, [lr]
 80121cc:	4631      	mov	r1, r6
 80121ce:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80121d0:	4628      	mov	r0, r5
 80121d2:	f8cc 3000 	str.w	r3, [ip]
 80121d6:	682b      	ldr	r3, [r5, #0]
 80121d8:	9201      	str	r2, [sp, #4]
 80121da:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80121dc:	f8cd 8008 	str.w	r8, [sp, #8]
 80121e0:	9200      	str	r2, [sp, #0]
 80121e2:	aa07      	add	r2, sp, #28
 80121e4:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80121e8:	f8d3 b038 	ldr.w	fp, [r3, #56]	; 0x38
 80121ec:	463b      	mov	r3, r7
 80121ee:	47d8      	blx	fp
 80121f0:	46a6      	mov	lr, r4
 80121f2:	f10d 0c1c 	add.w	ip, sp, #28
 80121f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80121fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80121fe:	f8de 3000 	ldr.w	r3, [lr]
 8012202:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8012206:	343c      	adds	r4, #60	; 0x3c
 8012208:	f8cc 3000 	str.w	r3, [ip]
 801220c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8012210:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012214:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012218:	f8de 3000 	ldr.w	r3, [lr]
 801221c:	f8cc 3000 	str.w	r3, [ip]
 8012220:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8012224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012226:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801222a:	6823      	ldr	r3, [r4, #0]
 801222c:	4631      	mov	r1, r6
 801222e:	4628      	mov	r0, r5
 8012230:	f8cc 3000 	str.w	r3, [ip]
 8012234:	682b      	ldr	r3, [r5, #0]
 8012236:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801223a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801223c:	f8cd 8008 	str.w	r8, [sp, #8]
 8012240:	9201      	str	r2, [sp, #4]
 8012242:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012244:	9200      	str	r2, [sp, #0]
 8012246:	aa07      	add	r2, sp, #28
 8012248:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 801224a:	463b      	mov	r3, r7
 801224c:	47a0      	blx	r4
 801224e:	b017      	add	sp, #92	; 0x5c
 8012250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012254 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8012254:	2000      	movs	r0, #0
 8012256:	4770      	bx	lr

08012258 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8012258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801225c:	b08d      	sub	sp, #52	; 0x34
 801225e:	4688      	mov	r8, r1
 8012260:	f8d3 c000 	ldr.w	ip, [r3]
 8012264:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012266:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801226a:	680f      	ldr	r7, [r1, #0]
 801226c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8012270:	eba7 070c 	sub.w	r7, r7, ip
 8012274:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8012278:	edd3 6a07 	vldr	s13, [r3, #28]
 801227c:	42bc      	cmp	r4, r7
 801227e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012280:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8012284:	bfa8      	it	ge
 8012286:	463c      	movge	r4, r7
 8012288:	f9b1 9000 	ldrsh.w	r9, [r1]
 801228c:	f9ba 1000 	ldrsh.w	r1, [sl]
 8012290:	ee07 4a90 	vmov	s15, r4
 8012294:	eb09 0e0c 	add.w	lr, r9, ip
 8012298:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801229c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80122a0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80122a4:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 80122a8:	4571      	cmp	r1, lr
 80122aa:	ee25 4a04 	vmul.f32	s8, s10, s8
 80122ae:	ee65 4a24 	vmul.f32	s9, s10, s9
 80122b2:	ee25 5a27 	vmul.f32	s10, s10, s15
 80122b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80122ba:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80122be:	ee32 1a05 	vadd.f32	s2, s4, s10
 80122c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80122c6:	ee36 0a84 	vadd.f32	s0, s13, s8
 80122ca:	ee61 1a87 	vmul.f32	s3, s3, s14
 80122ce:	ee22 2a07 	vmul.f32	s4, s4, s14
 80122d2:	f340 808c 	ble.w	80123ee <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80122d6:	eba1 060e 	sub.w	r6, r1, lr
 80122da:	fb96 f5f4 	sdiv	r5, r6, r4
 80122de:	ee07 5a10 	vmov	s14, r5
 80122e2:	2d00      	cmp	r5, #0
 80122e4:	fb04 6615 	mls	r6, r4, r5, r6
 80122e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80122ec:	eea7 0a04 	vfma.f32	s0, s14, s8
 80122f0:	eee7 0a24 	vfma.f32	s1, s14, s9
 80122f4:	eea7 1a05 	vfma.f32	s2, s14, s10
 80122f8:	dd12      	ble.n	8012320 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80122fa:	ee70 6a44 	vsub.f32	s13, s0, s8
 80122fe:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8012302:	ee31 2a45 	vsub.f32	s4, s2, s10
 8012306:	eef5 6a40 	vcmp.f32	s13, #0.0
 801230a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801230e:	bf14      	ite	ne
 8012310:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8012314:	eeb0 7a67 	vmoveq.f32	s14, s15
 8012318:	ee61 1a87 	vmul.f32	s3, s3, s14
 801231c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8012320:	fb05 f204 	mul.w	r2, r5, r4
 8012324:	1abf      	subs	r7, r7, r2
 8012326:	4494      	add	ip, r2
 8012328:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801232c:	4411      	add	r1, r2
 801232e:	eb09 020c 	add.w	r2, r9, ip
 8012332:	b209      	sxth	r1, r1
 8012334:	443a      	add	r2, r7
 8012336:	428a      	cmp	r2, r1
 8012338:	bfc4      	itt	gt
 801233a:	eba1 0209 	subgt.w	r2, r1, r9
 801233e:	eba2 070c 	subgt.w	r7, r2, ip
 8012342:	2f00      	cmp	r7, #0
 8012344:	dd50      	ble.n	80123e8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8012346:	fb97 f1f4 	sdiv	r1, r7, r4
 801234a:	fb04 7211 	mls	r2, r4, r1, r7
 801234e:	b90a      	cbnz	r2, 8012354 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8012350:	3901      	subs	r1, #1
 8012352:	4622      	mov	r2, r4
 8012354:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8012358:	6840      	ldr	r0, [r0, #4]
 801235a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801235e:	44b6      	add	lr, r6
 8012360:	f8d0 a000 	ldr.w	sl, [r0]
 8012364:	2900      	cmp	r1, #0
 8012366:	bfcc      	ite	gt
 8012368:	46a1      	movgt	r9, r4
 801236a:	4691      	movle	r9, r2
 801236c:	900b      	str	r0, [sp, #44]	; 0x2c
 801236e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8012370:	fb04 e505 	mla	r5, r4, r5, lr
 8012374:	eef0 6a42 	vmov.f32	s13, s4
 8012378:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801237c:	9008      	str	r0, [sp, #32]
 801237e:	eeb0 7a61 	vmov.f32	s14, s3
 8012382:	9818      	ldr	r0, [sp, #96]	; 0x60
 8012384:	695b      	ldr	r3, [r3, #20]
 8012386:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801238a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801238e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8012392:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012394:	445b      	add	r3, fp
 8012396:	9307      	str	r3, [sp, #28]
 8012398:	ee16 3a90 	vmov	r3, s13
 801239c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80123a0:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80123a4:	ee21 3a23 	vmul.f32	s6, s2, s7
 80123a8:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80123ac:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80123b0:	ee17 7a90 	vmov	r7, s15
 80123b4:	ee73 7a42 	vsub.f32	s15, s6, s4
 80123b8:	fb97 f7f4 	sdiv	r7, r7, r4
 80123bc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80123c0:	ee17 ca90 	vmov	ip, s15
 80123c4:	fb9c fcf4 	sdiv	ip, ip, r4
 80123c8:	fb0c 3306 	mla	r3, ip, r6, r3
 80123cc:	9302      	str	r3, [sp, #8]
 80123ce:	ee17 3a10 	vmov	r3, s14
 80123d2:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80123d6:	fb07 3706 	mla	r7, r7, r6, r3
 80123da:	eba9 0306 	sub.w	r3, r9, r6
 80123de:	e9cd 4700 	strd	r4, r7, [sp]
 80123e2:	f8da 4008 	ldr.w	r4, [sl, #8]
 80123e6:	47a0      	blx	r4
 80123e8:	b00d      	add	sp, #52	; 0x34
 80123ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123ee:	2500      	movs	r5, #0
 80123f0:	462e      	mov	r6, r5
 80123f2:	e799      	b.n	8012328 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080123f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80123f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123f8:	b0db      	sub	sp, #364	; 0x16c
 80123fa:	461d      	mov	r5, r3
 80123fc:	4614      	mov	r4, r2
 80123fe:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8012402:	910f      	str	r1, [sp, #60]	; 0x3c
 8012404:	4629      	mov	r1, r5
 8012406:	930a      	str	r3, [sp, #40]	; 0x28
 8012408:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801240c:	9009      	str	r0, [sp, #36]	; 0x24
 801240e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012410:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8012414:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8012418:	9310      	str	r3, [sp, #64]	; 0x40
 801241a:	6803      	ldr	r3, [r0, #0]
 801241c:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 801241e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012422:	47b8      	blx	r7
 8012424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012426:	6058      	str	r0, [r3, #4]
 8012428:	2800      	cmp	r0, #0
 801242a:	f000 83a1 	beq.w	8012b70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801242e:	682b      	ldr	r3, [r5, #0]
 8012430:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8012434:	ed94 7a02 	vldr	s14, [r4, #8]
 8012438:	9314      	str	r3, [sp, #80]	; 0x50
 801243a:	686b      	ldr	r3, [r5, #4]
 801243c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012440:	9315      	str	r3, [sp, #84]	; 0x54
 8012442:	4bc1      	ldr	r3, [pc, #772]	; (8012748 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8012444:	7819      	ldrb	r1, [r3, #0]
 8012446:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801244a:	2900      	cmp	r1, #0
 801244c:	bf16      	itet	ne
 801244e:	4619      	movne	r1, r3
 8012450:	4611      	moveq	r1, r2
 8012452:	4613      	movne	r3, r2
 8012454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012458:	9116      	str	r1, [sp, #88]	; 0x58
 801245a:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801245e:	f240 8387 	bls.w	8012b70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012462:	ed94 7a07 	vldr	s14, [r4, #28]
 8012466:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801246a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801246e:	f240 837f 	bls.w	8012b70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012472:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8012476:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801247a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801247e:	f240 8377 	bls.w	8012b70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012482:	6822      	ldr	r2, [r4, #0]
 8012484:	4bb1      	ldr	r3, [pc, #708]	; (801274c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8012486:	429a      	cmp	r2, r3
 8012488:	f2c0 8372 	blt.w	8012b70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801248c:	49b0      	ldr	r1, [pc, #704]	; (8012750 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801248e:	6963      	ldr	r3, [r4, #20]
 8012490:	428a      	cmp	r2, r1
 8012492:	f300 836d 	bgt.w	8012b70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012496:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801249a:	48ae      	ldr	r0, [pc, #696]	; (8012754 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801249c:	33ff      	adds	r3, #255	; 0xff
 801249e:	4283      	cmp	r3, r0
 80124a0:	f200 8366 	bhi.w	8012b70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80124a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80124a6:	4dac      	ldr	r5, [pc, #688]	; (8012758 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80124a8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80124ac:	33ff      	adds	r3, #255	; 0xff
 80124ae:	42ab      	cmp	r3, r5
 80124b0:	f200 835e 	bhi.w	8012b70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80124b4:	6862      	ldr	r2, [r4, #4]
 80124b6:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 80124ba:	33ff      	adds	r3, #255	; 0xff
 80124bc:	4283      	cmp	r3, r0
 80124be:	f200 8357 	bhi.w	8012b70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80124c2:	69a1      	ldr	r1, [r4, #24]
 80124c4:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 80124c8:	33ff      	adds	r3, #255	; 0xff
 80124ca:	4283      	cmp	r3, r0
 80124cc:	f200 8350 	bhi.w	8012b70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80124d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80124d2:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 80124d6:	30ff      	adds	r0, #255	; 0xff
 80124d8:	42a8      	cmp	r0, r5
 80124da:	f200 8349 	bhi.w	8012b70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80124de:	428a      	cmp	r2, r1
 80124e0:	f280 8110 	bge.w	8012704 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80124e4:	429a      	cmp	r2, r3
 80124e6:	f300 8119 	bgt.w	801271c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80124ea:	4299      	cmp	r1, r3
 80124ec:	f280 811d 	bge.w	801272a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80124f0:	2502      	movs	r5, #2
 80124f2:	2701      	movs	r7, #1
 80124f4:	46a9      	mov	r9, r5
 80124f6:	46b8      	mov	r8, r7
 80124f8:	f04f 0a00 	mov.w	sl, #0
 80124fc:	4621      	mov	r1, r4
 80124fe:	a849      	add	r0, sp, #292	; 0x124
 8012500:	f001 fc06 	bl	8013d10 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8012504:	4622      	mov	r2, r4
 8012506:	4653      	mov	r3, sl
 8012508:	a949      	add	r1, sp, #292	; 0x124
 801250a:	f8cd 9000 	str.w	r9, [sp]
 801250e:	a819      	add	r0, sp, #100	; 0x64
 8012510:	f001 fd2e 	bl	8013f70 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8012514:	4622      	mov	r2, r4
 8012516:	4653      	mov	r3, sl
 8012518:	a949      	add	r1, sp, #292	; 0x124
 801251a:	f8cd 8000 	str.w	r8, [sp]
 801251e:	a829      	add	r0, sp, #164	; 0xa4
 8012520:	f001 fd26 	bl	8013f70 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8012524:	4643      	mov	r3, r8
 8012526:	4622      	mov	r2, r4
 8012528:	a949      	add	r1, sp, #292	; 0x124
 801252a:	f8cd 9000 	str.w	r9, [sp]
 801252e:	a839      	add	r0, sp, #228	; 0xe4
 8012530:	f001 fd1e 	bl	8013f70 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8012534:	42af      	cmp	r7, r5
 8012536:	af12      	add	r7, sp, #72	; 0x48
 8012538:	bfb7      	itett	lt
 801253a:	2300      	movlt	r3, #0
 801253c:	2301      	movge	r3, #1
 801253e:	ad29      	addlt	r5, sp, #164	; 0xa4
 8012540:	ac19      	addlt	r4, sp, #100	; 0x64
 8012542:	bfb1      	iteee	lt
 8012544:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012546:	ad19      	addge	r5, sp, #100	; 0x64
 8012548:	930e      	strge	r3, [sp, #56]	; 0x38
 801254a:	ac29      	addge	r4, sp, #164	; 0xa4
 801254c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801254e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012552:	e887 0003 	stmia.w	r7, {r0, r1}
 8012556:	b928      	cbnz	r0, 8012564 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8012558:	4b80      	ldr	r3, [pc, #512]	; (801275c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801255a:	6818      	ldr	r0, [r3, #0]
 801255c:	6803      	ldr	r3, [r0, #0]
 801255e:	6a1b      	ldr	r3, [r3, #32]
 8012560:	4798      	blx	r3
 8012562:	6038      	str	r0, [r7, #0]
 8012564:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012566:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801256a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801256e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8012570:	930c      	str	r3, [sp, #48]	; 0x30
 8012572:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012574:	6963      	ldr	r3, [r4, #20]
 8012576:	440b      	add	r3, r1
 8012578:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801257c:	4408      	add	r0, r1
 801257e:	b200      	sxth	r0, r0
 8012580:	4283      	cmp	r3, r0
 8012582:	900d      	str	r0, [sp, #52]	; 0x34
 8012584:	f280 80dd 	bge.w	8012742 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8012588:	428b      	cmp	r3, r1
 801258a:	da08      	bge.n	801259e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801258c:	2a00      	cmp	r2, #0
 801258e:	dd06      	ble.n	801259e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012590:	1acb      	subs	r3, r1, r3
 8012592:	429a      	cmp	r2, r3
 8012594:	f2c0 80e4 	blt.w	8012760 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8012598:	2b00      	cmp	r3, #0
 801259a:	f300 80e2 	bgt.w	8012762 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801259e:	6967      	ldr	r7, [r4, #20]
 80125a0:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80125a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125a6:	443b      	add	r3, r7
 80125a8:	461f      	mov	r7, r3
 80125aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80125ac:	1bdf      	subs	r7, r3, r7
 80125ae:	4297      	cmp	r7, r2
 80125b0:	bfa8      	it	ge
 80125b2:	4617      	movge	r7, r2
 80125b4:	2f00      	cmp	r7, #0
 80125b6:	f340 8166 	ble.w	8012886 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80125ba:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80125bc:	6829      	ldr	r1, [r5, #0]
 80125be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80125c2:	f9bb 3000 	ldrsh.w	r3, [fp]
 80125c6:	4411      	add	r1, r2
 80125c8:	6820      	ldr	r0, [r4, #0]
 80125ca:	4299      	cmp	r1, r3
 80125cc:	dd1a      	ble.n	8012604 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80125ce:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80125d2:	4402      	add	r2, r0
 80125d4:	440b      	add	r3, r1
 80125d6:	b21b      	sxth	r3, r3
 80125d8:	429a      	cmp	r2, r3
 80125da:	dc13      	bgt.n	8012604 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80125dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80125de:	a912      	add	r1, sp, #72	; 0x48
 80125e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	9206      	str	r2, [sp, #24]
 80125e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80125ea:	9500      	str	r5, [sp, #0]
 80125ec:	9205      	str	r2, [sp, #20]
 80125ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80125f0:	e9cd b203 	strd	fp, r2, [sp, #12]
 80125f4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80125f6:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80125fa:	aa49      	add	r2, sp, #292	; 0x124
 80125fc:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 8012600:	4623      	mov	r3, r4
 8012602:	47c8      	blx	r9
 8012604:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8012608:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801260c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8012610:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012614:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8012618:	68a1      	ldr	r1, [r4, #8]
 801261a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801261e:	ed94 6a08 	vldr	s12, [r4, #32]
 8012622:	edd4 6a07 	vldr	s13, [r4, #28]
 8012626:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801262a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801262e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8012632:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012636:	edc4 6a07 	vstr	s13, [r4, #28]
 801263a:	441a      	add	r2, r3
 801263c:	6963      	ldr	r3, [r4, #20]
 801263e:	3301      	adds	r3, #1
 8012640:	6022      	str	r2, [r4, #0]
 8012642:	6163      	str	r3, [r4, #20]
 8012644:	69a3      	ldr	r3, [r4, #24]
 8012646:	3b01      	subs	r3, #1
 8012648:	61a3      	str	r3, [r4, #24]
 801264a:	6923      	ldr	r3, [r4, #16]
 801264c:	440b      	add	r3, r1
 801264e:	68e1      	ldr	r1, [r4, #12]
 8012650:	428b      	cmp	r3, r1
 8012652:	6123      	str	r3, [r4, #16]
 8012654:	db15      	blt.n	8012682 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8012656:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801265a:	3201      	adds	r2, #1
 801265c:	1a5b      	subs	r3, r3, r1
 801265e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012662:	6022      	str	r2, [r4, #0]
 8012664:	6123      	str	r3, [r4, #16]
 8012666:	edc4 6a07 	vstr	s13, [r4, #28]
 801266a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801266e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012672:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8012676:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801267a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801267e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8012682:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8012686:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801268a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801268e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012692:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8012696:	68a9      	ldr	r1, [r5, #8]
 8012698:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801269c:	ed95 6a08 	vldr	s12, [r5, #32]
 80126a0:	edd5 6a07 	vldr	s13, [r5, #28]
 80126a4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80126a8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80126ac:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80126b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80126b4:	edc5 6a07 	vstr	s13, [r5, #28]
 80126b8:	441a      	add	r2, r3
 80126ba:	696b      	ldr	r3, [r5, #20]
 80126bc:	3301      	adds	r3, #1
 80126be:	602a      	str	r2, [r5, #0]
 80126c0:	616b      	str	r3, [r5, #20]
 80126c2:	69ab      	ldr	r3, [r5, #24]
 80126c4:	3b01      	subs	r3, #1
 80126c6:	61ab      	str	r3, [r5, #24]
 80126c8:	692b      	ldr	r3, [r5, #16]
 80126ca:	440b      	add	r3, r1
 80126cc:	68e9      	ldr	r1, [r5, #12]
 80126ce:	428b      	cmp	r3, r1
 80126d0:	612b      	str	r3, [r5, #16]
 80126d2:	db15      	blt.n	8012700 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80126d4:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80126d8:	3201      	adds	r2, #1
 80126da:	1a5b      	subs	r3, r3, r1
 80126dc:	ee76 6a26 	vadd.f32	s13, s12, s13
 80126e0:	602a      	str	r2, [r5, #0]
 80126e2:	612b      	str	r3, [r5, #16]
 80126e4:	edc5 6a07 	vstr	s13, [r5, #28]
 80126e8:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80126ec:	ee36 7a87 	vadd.f32	s14, s13, s14
 80126f0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80126f4:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80126f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80126fc:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8012700:	3f01      	subs	r7, #1
 8012702:	e757      	b.n	80125b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8012704:	4299      	cmp	r1, r3
 8012706:	dc13      	bgt.n	8012730 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8012708:	429a      	cmp	r2, r3
 801270a:	da14      	bge.n	8012736 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801270c:	2502      	movs	r5, #2
 801270e:	2703      	movs	r7, #3
 8012710:	f04f 0800 	mov.w	r8, #0
 8012714:	46a9      	mov	r9, r5
 8012716:	f04f 0a01 	mov.w	sl, #1
 801271a:	e6ef      	b.n	80124fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801271c:	2501      	movs	r5, #1
 801271e:	2700      	movs	r7, #0
 8012720:	46a9      	mov	r9, r5
 8012722:	46b8      	mov	r8, r7
 8012724:	f04f 0a02 	mov.w	sl, #2
 8012728:	e6e8      	b.n	80124fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801272a:	2501      	movs	r5, #1
 801272c:	2702      	movs	r7, #2
 801272e:	e6e1      	b.n	80124f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8012730:	2500      	movs	r5, #0
 8012732:	2701      	movs	r7, #1
 8012734:	e7f4      	b.n	8012720 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8012736:	2702      	movs	r7, #2
 8012738:	2503      	movs	r5, #3
 801273a:	f04f 0900 	mov.w	r9, #0
 801273e:	46b8      	mov	r8, r7
 8012740:	e7e9      	b.n	8012716 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8012742:	4613      	mov	r3, r2
 8012744:	e728      	b.n	8012598 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8012746:	bf00      	nop
 8012748:	20001248 	.word	0x20001248
 801274c:	fffd8f01 	.word	0xfffd8f01
 8012750:	00027100 	.word	0x00027100
 8012754:	0004e1ff 	.word	0x0004e1ff
 8012758:	0004e1fe 	.word	0x0004e1fe
 801275c:	20001250 	.word	0x20001250
 8012760:	4613      	mov	r3, r2
 8012762:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012764:	469e      	mov	lr, r3
 8012766:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8012768:	469c      	mov	ip, r3
 801276a:	9111      	str	r1, [sp, #68]	; 0x44
 801276c:	f04f 0900 	mov.w	r9, #0
 8012770:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8012774:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8012778:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801277c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8012780:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8012784:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8012788:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801278c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8012790:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8012794:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8012798:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801279c:	f1bc 0f00 	cmp.w	ip, #0
 80127a0:	d147      	bne.n	8012832 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80127a2:	eb03 0c07 	add.w	ip, r3, r7
 80127a6:	1ad7      	subs	r7, r2, r3
 80127a8:	f1b9 0f00 	cmp.w	r9, #0
 80127ac:	d009      	beq.n	80127c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80127ae:	9029      	str	r0, [sp, #164]	; 0xa4
 80127b0:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 80127b4:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 80127b8:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 80127bc:	912d      	str	r1, [sp, #180]	; 0xb4
 80127be:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 80127c2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80127c4:	f04f 0800 	mov.w	r8, #0
 80127c8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80127cc:	9111      	str	r1, [sp, #68]	; 0x44
 80127ce:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80127d2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80127d6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80127da:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80127de:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80127e2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80127e6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80127ea:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80127ee:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80127f2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80127f6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80127fa:	f1be 0f00 	cmp.w	lr, #0
 80127fe:	d031      	beq.n	8012864 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8012800:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8012802:	4450      	add	r0, sl
 8012804:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8012808:	4431      	add	r1, r6
 801280a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801280e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8012812:	4549      	cmp	r1, r9
 8012814:	db08      	blt.n	8012828 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8012816:	ee77 7a85 	vadd.f32	s15, s15, s10
 801281a:	3001      	adds	r0, #1
 801281c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012820:	eba1 0109 	sub.w	r1, r1, r9
 8012824:	ee37 7a06 	vadd.f32	s14, s14, s12
 8012828:	f10e 3eff 	add.w	lr, lr, #4294967295
 801282c:	f04f 0801 	mov.w	r8, #1
 8012830:	e7e3      	b.n	80127fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8012832:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8012834:	4450      	add	r0, sl
 8012836:	ee37 7a24 	vadd.f32	s14, s14, s9
 801283a:	4431      	add	r1, r6
 801283c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012840:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8012844:	4541      	cmp	r1, r8
 8012846:	db08      	blt.n	801285a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8012848:	ee76 6a85 	vadd.f32	s13, s13, s10
 801284c:	3001      	adds	r0, #1
 801284e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8012852:	eba1 0108 	sub.w	r1, r1, r8
 8012856:	ee77 7a86 	vadd.f32	s15, s15, s12
 801285a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801285e:	f04f 0901 	mov.w	r9, #1
 8012862:	e79b      	b.n	801279c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8012864:	449c      	add	ip, r3
 8012866:	1aff      	subs	r7, r7, r3
 8012868:	f1b8 0f00 	cmp.w	r8, #0
 801286c:	d009      	beq.n	8012882 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801286e:	9019      	str	r0, [sp, #100]	; 0x64
 8012870:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8012874:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8012878:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801287c:	911d      	str	r1, [sp, #116]	; 0x74
 801287e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8012882:	1ad2      	subs	r2, r2, r3
 8012884:	e68b      	b.n	801259e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012888:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801288a:	2b00      	cmp	r3, #0
 801288c:	f000 80d1 	beq.w	8012a32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8012890:	ad19      	add	r5, sp, #100	; 0x64
 8012892:	ac39      	add	r4, sp, #228	; 0xe4
 8012894:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012896:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801289a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801289e:	930c      	str	r3, [sp, #48]	; 0x30
 80128a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80128a2:	6963      	ldr	r3, [r4, #20]
 80128a4:	440b      	add	r3, r1
 80128a6:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80128aa:	4408      	add	r0, r1
 80128ac:	b200      	sxth	r0, r0
 80128ae:	4283      	cmp	r3, r0
 80128b0:	900d      	str	r0, [sp, #52]	; 0x34
 80128b2:	f280 80c1 	bge.w	8012a38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80128b6:	428b      	cmp	r3, r1
 80128b8:	da08      	bge.n	80128cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80128ba:	2a00      	cmp	r2, #0
 80128bc:	dd06      	ble.n	80128cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80128be:	1acb      	subs	r3, r1, r3
 80128c0:	429a      	cmp	r2, r3
 80128c2:	f2c0 80bb 	blt.w	8012a3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	f300 80b9 	bgt.w	8012a3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80128cc:	6967      	ldr	r7, [r4, #20]
 80128ce:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80128d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80128d4:	443b      	add	r3, r7
 80128d6:	461f      	mov	r7, r3
 80128d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128da:	1bdf      	subs	r7, r3, r7
 80128dc:	4297      	cmp	r7, r2
 80128de:	bfa8      	it	ge
 80128e0:	4617      	movge	r7, r2
 80128e2:	2f00      	cmp	r7, #0
 80128e4:	f340 813c 	ble.w	8012b60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80128e8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80128ea:	6829      	ldr	r1, [r5, #0]
 80128ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80128f0:	f9bb 3000 	ldrsh.w	r3, [fp]
 80128f4:	4411      	add	r1, r2
 80128f6:	6820      	ldr	r0, [r4, #0]
 80128f8:	4299      	cmp	r1, r3
 80128fa:	dd1a      	ble.n	8012932 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80128fc:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8012900:	4402      	add	r2, r0
 8012902:	440b      	add	r3, r1
 8012904:	b21b      	sxth	r3, r3
 8012906:	429a      	cmp	r2, r3
 8012908:	dc13      	bgt.n	8012932 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801290a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801290c:	a912      	add	r1, sp, #72	; 0x48
 801290e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012910:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	9206      	str	r2, [sp, #24]
 8012916:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012918:	9500      	str	r5, [sp, #0]
 801291a:	9205      	str	r2, [sp, #20]
 801291c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801291e:	e9cd b203 	strd	fp, r2, [sp, #12]
 8012922:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8012924:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8012928:	aa49      	add	r2, sp, #292	; 0x124
 801292a:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 801292e:	4623      	mov	r3, r4
 8012930:	47c8      	blx	r9
 8012932:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8012936:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801293a:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801293e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012942:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8012946:	68a1      	ldr	r1, [r4, #8]
 8012948:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801294c:	ed94 6a08 	vldr	s12, [r4, #32]
 8012950:	edd4 6a07 	vldr	s13, [r4, #28]
 8012954:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8012958:	ee76 6a86 	vadd.f32	s13, s13, s12
 801295c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8012960:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012964:	edc4 6a07 	vstr	s13, [r4, #28]
 8012968:	441a      	add	r2, r3
 801296a:	6963      	ldr	r3, [r4, #20]
 801296c:	3301      	adds	r3, #1
 801296e:	6022      	str	r2, [r4, #0]
 8012970:	6163      	str	r3, [r4, #20]
 8012972:	69a3      	ldr	r3, [r4, #24]
 8012974:	3b01      	subs	r3, #1
 8012976:	61a3      	str	r3, [r4, #24]
 8012978:	6923      	ldr	r3, [r4, #16]
 801297a:	440b      	add	r3, r1
 801297c:	68e1      	ldr	r1, [r4, #12]
 801297e:	428b      	cmp	r3, r1
 8012980:	6123      	str	r3, [r4, #16]
 8012982:	db15      	blt.n	80129b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8012984:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8012988:	3201      	adds	r2, #1
 801298a:	1a5b      	subs	r3, r3, r1
 801298c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012990:	6022      	str	r2, [r4, #0]
 8012992:	6123      	str	r3, [r4, #16]
 8012994:	edc4 6a07 	vstr	s13, [r4, #28]
 8012998:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801299c:	ee36 7a87 	vadd.f32	s14, s13, s14
 80129a0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80129a4:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80129a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80129ac:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80129b0:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80129b4:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80129b8:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80129bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80129c0:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80129c4:	68a9      	ldr	r1, [r5, #8]
 80129c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80129ca:	ed95 6a08 	vldr	s12, [r5, #32]
 80129ce:	edd5 6a07 	vldr	s13, [r5, #28]
 80129d2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80129d6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80129da:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80129de:	e9d5 2300 	ldrd	r2, r3, [r5]
 80129e2:	edc5 6a07 	vstr	s13, [r5, #28]
 80129e6:	441a      	add	r2, r3
 80129e8:	696b      	ldr	r3, [r5, #20]
 80129ea:	3301      	adds	r3, #1
 80129ec:	602a      	str	r2, [r5, #0]
 80129ee:	616b      	str	r3, [r5, #20]
 80129f0:	69ab      	ldr	r3, [r5, #24]
 80129f2:	3b01      	subs	r3, #1
 80129f4:	61ab      	str	r3, [r5, #24]
 80129f6:	692b      	ldr	r3, [r5, #16]
 80129f8:	440b      	add	r3, r1
 80129fa:	68e9      	ldr	r1, [r5, #12]
 80129fc:	428b      	cmp	r3, r1
 80129fe:	612b      	str	r3, [r5, #16]
 8012a00:	db15      	blt.n	8012a2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8012a02:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8012a06:	3201      	adds	r2, #1
 8012a08:	1a5b      	subs	r3, r3, r1
 8012a0a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012a0e:	602a      	str	r2, [r5, #0]
 8012a10:	612b      	str	r3, [r5, #16]
 8012a12:	edc5 6a07 	vstr	s13, [r5, #28]
 8012a16:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8012a1a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012a1e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8012a22:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8012a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012a2a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8012a2e:	3f01      	subs	r7, #1
 8012a30:	e757      	b.n	80128e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8012a32:	ad39      	add	r5, sp, #228	; 0xe4
 8012a34:	ac19      	add	r4, sp, #100	; 0x64
 8012a36:	e72d      	b.n	8012894 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8012a38:	4613      	mov	r3, r2
 8012a3a:	e744      	b.n	80128c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8012a3c:	4613      	mov	r3, r2
 8012a3e:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8012a40:	469e      	mov	lr, r3
 8012a42:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8012a46:	461f      	mov	r7, r3
 8012a48:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8012a4c:	f04f 0900 	mov.w	r9, #0
 8012a50:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8012a54:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8012a58:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8012a5c:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8012a60:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8012a64:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8012a66:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8012a6a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8012a6e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8012a72:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8012a76:	960e      	str	r6, [sp, #56]	; 0x38
 8012a78:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8012a7c:	2f00      	cmp	r7, #0
 8012a7e:	d146      	bne.n	8012b0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8012a80:	449c      	add	ip, r3
 8012a82:	1ad7      	subs	r7, r2, r3
 8012a84:	f1b9 0f00 	cmp.w	r9, #0
 8012a88:	d009      	beq.n	8012a9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8012a8a:	9039      	str	r0, [sp, #228]	; 0xe4
 8012a8c:	913d      	str	r1, [sp, #244]	; 0xf4
 8012a8e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8012a92:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8012a96:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8012a9a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8012a9e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8012aa0:	f04f 0800 	mov.w	r8, #0
 8012aa4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8012aa8:	910e      	str	r1, [sp, #56]	; 0x38
 8012aaa:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8012aae:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8012ab2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8012ab6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8012aba:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8012abe:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8012ac2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8012ac6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8012aca:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8012ace:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8012ad2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8012ad6:	f1be 0f00 	cmp.w	lr, #0
 8012ada:	d030      	beq.n	8012b3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8012adc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012ade:	4450      	add	r0, sl
 8012ae0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8012ae4:	4431      	add	r1, r6
 8012ae6:	ee37 7a04 	vadd.f32	s14, s14, s8
 8012aea:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8012aee:	4549      	cmp	r1, r9
 8012af0:	db08      	blt.n	8012b04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8012af2:	ee77 7a85 	vadd.f32	s15, s15, s10
 8012af6:	3001      	adds	r0, #1
 8012af8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012afc:	eba1 0109 	sub.w	r1, r1, r9
 8012b00:	ee37 7a06 	vadd.f32	s14, s14, s12
 8012b04:	f10e 3eff 	add.w	lr, lr, #4294967295
 8012b08:	f04f 0801 	mov.w	r8, #1
 8012b0c:	e7e3      	b.n	8012ad6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8012b0e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012b10:	4450      	add	r0, sl
 8012b12:	ee37 7a24 	vadd.f32	s14, s14, s9
 8012b16:	4431      	add	r1, r6
 8012b18:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012b1c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8012b20:	4541      	cmp	r1, r8
 8012b22:	db08      	blt.n	8012b36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8012b24:	ee76 6a85 	vadd.f32	s13, s13, s10
 8012b28:	3001      	adds	r0, #1
 8012b2a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8012b2e:	eba1 0108 	sub.w	r1, r1, r8
 8012b32:	ee77 7a86 	vadd.f32	s15, s15, s12
 8012b36:	3f01      	subs	r7, #1
 8012b38:	f04f 0901 	mov.w	r9, #1
 8012b3c:	e79e      	b.n	8012a7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8012b3e:	449c      	add	ip, r3
 8012b40:	1aff      	subs	r7, r7, r3
 8012b42:	f1b8 0f00 	cmp.w	r8, #0
 8012b46:	d009      	beq.n	8012b5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8012b48:	9019      	str	r0, [sp, #100]	; 0x64
 8012b4a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8012b4e:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8012b52:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8012b56:	911d      	str	r1, [sp, #116]	; 0x74
 8012b58:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8012b5c:	1ad2      	subs	r2, r2, r3
 8012b5e:	e6b5      	b.n	80128cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012b60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	b923      	cbnz	r3, 8012b70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012b66:	4b04      	ldr	r3, [pc, #16]	; (8012b78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8012b68:	6818      	ldr	r0, [r3, #0]
 8012b6a:	6803      	ldr	r3, [r0, #0]
 8012b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b6e:	4798      	blx	r3
 8012b70:	b05b      	add	sp, #364	; 0x16c
 8012b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b76:	bf00      	nop
 8012b78:	20001250 	.word	0x20001250

08012b7c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8012b7c:	2b02      	cmp	r3, #2
 8012b7e:	b510      	push	{r4, lr}
 8012b80:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012b84:	d00b      	beq.n	8012b9e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8012b86:	2b03      	cmp	r3, #3
 8012b88:	d00e      	beq.n	8012ba8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8012b8a:	2b01      	cmp	r3, #1
 8012b8c:	d001      	beq.n	8012b92 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8012b8e:	1860      	adds	r0, r4, r1
 8012b90:	bd10      	pop	{r4, pc}
 8012b92:	8880      	ldrh	r0, [r0, #4]
 8012b94:	4420      	add	r0, r4
 8012b96:	b200      	sxth	r0, r0
 8012b98:	1a80      	subs	r0, r0, r2
 8012b9a:	3801      	subs	r0, #1
 8012b9c:	e7f8      	b.n	8012b90 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8012b9e:	8880      	ldrh	r0, [r0, #4]
 8012ba0:	4420      	add	r0, r4
 8012ba2:	b200      	sxth	r0, r0
 8012ba4:	1a40      	subs	r0, r0, r1
 8012ba6:	e7f8      	b.n	8012b9a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8012ba8:	18a0      	adds	r0, r4, r2
 8012baa:	e7f1      	b.n	8012b90 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08012bac <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8012bac:	2b02      	cmp	r3, #2
 8012bae:	b510      	push	{r4, lr}
 8012bb0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8012bb4:	d006      	beq.n	8012bc4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8012bb6:	2b03      	cmp	r3, #3
 8012bb8:	d00a      	beq.n	8012bd0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8012bba:	2b01      	cmp	r3, #1
 8012bbc:	bf14      	ite	ne
 8012bbe:	18a0      	addne	r0, r4, r2
 8012bc0:	1860      	addeq	r0, r4, r1
 8012bc2:	bd10      	pop	{r4, pc}
 8012bc4:	88c0      	ldrh	r0, [r0, #6]
 8012bc6:	4420      	add	r0, r4
 8012bc8:	b200      	sxth	r0, r0
 8012bca:	1a80      	subs	r0, r0, r2
 8012bcc:	3801      	subs	r0, #1
 8012bce:	e7f8      	b.n	8012bc2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8012bd0:	88c0      	ldrh	r0, [r0, #6]
 8012bd2:	4420      	add	r0, r4
 8012bd4:	b200      	sxth	r0, r0
 8012bd6:	1a40      	subs	r0, r0, r1
 8012bd8:	e7f8      	b.n	8012bcc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08012bdc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8012bdc:	4b01      	ldr	r3, [pc, #4]	; (8012be4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8012bde:	2200      	movs	r2, #0
 8012be0:	601a      	str	r2, [r3, #0]
 8012be2:	4770      	bx	lr
 8012be4:	20001258 	.word	0x20001258

08012be8 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8012be8:	4603      	mov	r3, r0
 8012bea:	b1c8      	cbz	r0, 8012c20 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8012bec:	0c02      	lsrs	r2, r0, #16
 8012bee:	0412      	lsls	r2, r2, #16
 8012bf0:	b9a2      	cbnz	r2, 8012c1c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8012bf2:	0403      	lsls	r3, r0, #16
 8012bf4:	2010      	movs	r0, #16
 8012bf6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012bfa:	bf04      	itt	eq
 8012bfc:	021b      	lsleq	r3, r3, #8
 8012bfe:	3008      	addeq	r0, #8
 8012c00:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8012c04:	bf04      	itt	eq
 8012c06:	011b      	lsleq	r3, r3, #4
 8012c08:	3004      	addeq	r0, #4
 8012c0a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012c0e:	bf04      	itt	eq
 8012c10:	009b      	lsleq	r3, r3, #2
 8012c12:	3002      	addeq	r0, #2
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	db04      	blt.n	8012c22 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8012c18:	3001      	adds	r0, #1
 8012c1a:	4770      	bx	lr
 8012c1c:	2000      	movs	r0, #0
 8012c1e:	e7ea      	b.n	8012bf6 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8012c20:	2020      	movs	r0, #32
 8012c22:	4770      	bx	lr

08012c24 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8012c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c28:	b087      	sub	sp, #28
 8012c2a:	4681      	mov	r9, r0
 8012c2c:	4698      	mov	r8, r3
 8012c2e:	4610      	mov	r0, r2
 8012c30:	460d      	mov	r5, r1
 8012c32:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8012c36:	b981      	cbnz	r1, 8012c5a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8012c38:	b14b      	cbz	r3, 8012c4e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8012c3a:	460b      	mov	r3, r1
 8012c3c:	464a      	mov	r2, r9
 8012c3e:	4641      	mov	r1, r8
 8012c40:	e9cd 4700 	strd	r4, r7, [sp]
 8012c44:	f7ff ffee 	bl	8012c24 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012c48:	b007      	add	sp, #28
 8012c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8012c52:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8012c56:	603b      	str	r3, [r7, #0]
 8012c58:	e7f6      	b.n	8012c48 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8012c5a:	fa32 fa01 	lsrs.w	sl, r2, r1
 8012c5e:	d107      	bne.n	8012c70 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8012c60:	fb09 f602 	mul.w	r6, r9, r2
 8012c64:	fbb6 f0f4 	udiv	r0, r6, r4
 8012c68:	fb04 6610 	mls	r6, r4, r0, r6
 8012c6c:	603e      	str	r6, [r7, #0]
 8012c6e:	e7eb      	b.n	8012c48 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8012c70:	2601      	movs	r6, #1
 8012c72:	fa09 fb01 	lsl.w	fp, r9, r1
 8012c76:	408e      	lsls	r6, r1
 8012c78:	fbbb f3f4 	udiv	r3, fp, r4
 8012c7c:	3e01      	subs	r6, #1
 8012c7e:	9302      	str	r3, [sp, #8]
 8012c80:	fb0a f303 	mul.w	r3, sl, r3
 8012c84:	4016      	ands	r6, r2
 8012c86:	9303      	str	r3, [sp, #12]
 8012c88:	4630      	mov	r0, r6
 8012c8a:	f7ff ffad 	bl	8012be8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8012c8e:	464a      	mov	r2, r9
 8012c90:	460b      	mov	r3, r1
 8012c92:	4601      	mov	r1, r0
 8012c94:	4630      	mov	r0, r6
 8012c96:	e9cd 4700 	strd	r4, r7, [sp]
 8012c9a:	f7ff ffc3 	bl	8012c24 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012c9e:	9b02      	ldr	r3, [sp, #8]
 8012ca0:	4606      	mov	r6, r0
 8012ca2:	eb05 0108 	add.w	r1, r5, r8
 8012ca6:	fb04 bb13 	mls	fp, r4, r3, fp
 8012caa:	4658      	mov	r0, fp
 8012cac:	f7ff ff9c 	bl	8012be8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8012cb0:	ab05      	add	r3, sp, #20
 8012cb2:	465a      	mov	r2, fp
 8012cb4:	e9cd 4300 	strd	r4, r3, [sp]
 8012cb8:	4603      	mov	r3, r0
 8012cba:	4650      	mov	r0, sl
 8012cbc:	f7ff ffb2 	bl	8012c24 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012cc0:	6839      	ldr	r1, [r7, #0]
 8012cc2:	9a05      	ldr	r2, [sp, #20]
 8012cc4:	9b03      	ldr	r3, [sp, #12]
 8012cc6:	4411      	add	r1, r2
 8012cc8:	fbb1 f2f4 	udiv	r2, r1, r4
 8012ccc:	18d3      	adds	r3, r2, r3
 8012cce:	fb04 1412 	mls	r4, r4, r2, r1
 8012cd2:	441e      	add	r6, r3
 8012cd4:	603c      	str	r4, [r7, #0]
 8012cd6:	4430      	add	r0, r6
 8012cd8:	e7b6      	b.n	8012c48 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08012cda <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8012cda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012cde:	b085      	sub	sp, #20
 8012ce0:	f1b0 0900 	subs.w	r9, r0, #0
 8012ce4:	461d      	mov	r5, r3
 8012ce6:	4617      	mov	r7, r2
 8012ce8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8012cea:	bfbb      	ittet	lt
 8012cec:	f1c9 0900 	rsblt	r9, r9, #0
 8012cf0:	f04f 36ff 	movlt.w	r6, #4294967295
 8012cf4:	2601      	movge	r6, #1
 8012cf6:	6823      	ldrlt	r3, [r4, #0]
 8012cf8:	bfbc      	itt	lt
 8012cfa:	425b      	neglt	r3, r3
 8012cfc:	6023      	strlt	r3, [r4, #0]
 8012cfe:	2a00      	cmp	r2, #0
 8012d00:	da04      	bge.n	8012d0c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8012d02:	6823      	ldr	r3, [r4, #0]
 8012d04:	4257      	negs	r7, r2
 8012d06:	4276      	negs	r6, r6
 8012d08:	425b      	negs	r3, r3
 8012d0a:	6023      	str	r3, [r4, #0]
 8012d0c:	2d00      	cmp	r5, #0
 8012d0e:	4638      	mov	r0, r7
 8012d10:	bfba      	itte	lt
 8012d12:	426d      	neglt	r5, r5
 8012d14:	f04f 38ff 	movlt.w	r8, #4294967295
 8012d18:	f04f 0801 	movge.w	r8, #1
 8012d1c:	f7ff ff64 	bl	8012be8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8012d20:	ab03      	add	r3, sp, #12
 8012d22:	463a      	mov	r2, r7
 8012d24:	e9cd 5300 	strd	r5, r3, [sp]
 8012d28:	4603      	mov	r3, r0
 8012d2a:	4648      	mov	r0, r9
 8012d2c:	f7ff ff7a 	bl	8012c24 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012d30:	6823      	ldr	r3, [r4, #0]
 8012d32:	9a03      	ldr	r2, [sp, #12]
 8012d34:	4546      	cmp	r6, r8
 8012d36:	441a      	add	r2, r3
 8012d38:	fb92 f3f5 	sdiv	r3, r2, r5
 8012d3c:	4418      	add	r0, r3
 8012d3e:	fb05 2313 	mls	r3, r5, r3, r2
 8012d42:	bf18      	it	ne
 8012d44:	4240      	negne	r0, r0
 8012d46:	1c72      	adds	r2, r6, #1
 8012d48:	6023      	str	r3, [r4, #0]
 8012d4a:	d105      	bne.n	8012d58 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	f1c3 0200 	rsb	r2, r3, #0
 8012d52:	db0b      	blt.n	8012d6c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8012d54:	6022      	str	r2, [r4, #0]
 8012d56:	e006      	b.n	8012d66 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012d58:	2e01      	cmp	r6, #1
 8012d5a:	d104      	bne.n	8012d66 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	da02      	bge.n	8012d66 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012d60:	442b      	add	r3, r5
 8012d62:	3801      	subs	r0, #1
 8012d64:	6023      	str	r3, [r4, #0]
 8012d66:	b005      	add	sp, #20
 8012d68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d6c:	3801      	subs	r0, #1
 8012d6e:	1b52      	subs	r2, r2, r5
 8012d70:	e7f0      	b.n	8012d54 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08012d74 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8012d74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8012d78:	4c1c      	ldr	r4, [pc, #112]	; (8012dec <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8012d7a:	4605      	mov	r5, r0
 8012d7c:	6807      	ldr	r7, [r0, #0]
 8012d7e:	69a3      	ldr	r3, [r4, #24]
 8012d80:	b92b      	cbnz	r3, 8012d8e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8012d82:	6840      	ldr	r0, [r0, #4]
 8012d84:	e9c5 7000 	strd	r7, r0, [r5]
 8012d88:	b004      	add	sp, #16
 8012d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d8e:	f04f 0802 	mov.w	r8, #2
 8012d92:	68a2      	ldr	r2, [r4, #8]
 8012d94:	ae04      	add	r6, sp, #16
 8012d96:	6820      	ldr	r0, [r4, #0]
 8012d98:	fb93 f1f8 	sdiv	r1, r3, r8
 8012d9c:	440a      	add	r2, r1
 8012d9e:	69e1      	ldr	r1, [r4, #28]
 8012da0:	f846 2d04 	str.w	r2, [r6, #-4]!
 8012da4:	463a      	mov	r2, r7
 8012da6:	9600      	str	r6, [sp, #0]
 8012da8:	f7ff ff97 	bl	8012cda <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012dac:	69a3      	ldr	r3, [r4, #24]
 8012dae:	4607      	mov	r7, r0
 8012db0:	686a      	ldr	r2, [r5, #4]
 8012db2:	6a21      	ldr	r1, [r4, #32]
 8012db4:	9600      	str	r6, [sp, #0]
 8012db6:	6860      	ldr	r0, [r4, #4]
 8012db8:	f7ff ff8f 	bl	8012cda <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012dbc:	69a3      	ldr	r3, [r4, #24]
 8012dbe:	6962      	ldr	r2, [r4, #20]
 8012dc0:	4407      	add	r7, r0
 8012dc2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012dc4:	9600      	str	r6, [sp, #0]
 8012dc6:	68e0      	ldr	r0, [r4, #12]
 8012dc8:	fb93 f8f8 	sdiv	r8, r3, r8
 8012dcc:	4442      	add	r2, r8
 8012dce:	9203      	str	r2, [sp, #12]
 8012dd0:	682a      	ldr	r2, [r5, #0]
 8012dd2:	f7ff ff82 	bl	8012cda <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012dd6:	4680      	mov	r8, r0
 8012dd8:	9600      	str	r6, [sp, #0]
 8012dda:	69a3      	ldr	r3, [r4, #24]
 8012ddc:	686a      	ldr	r2, [r5, #4]
 8012dde:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012de0:	6920      	ldr	r0, [r4, #16]
 8012de2:	f7ff ff7a 	bl	8012cda <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012de6:	4440      	add	r0, r8
 8012de8:	e7cc      	b.n	8012d84 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8012dea:	bf00      	nop
 8012dec:	2000125c 	.word	0x2000125c

08012df0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8012df0:	4b07      	ldr	r3, [pc, #28]	; (8012e10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8012df2:	b510      	push	{r4, lr}
 8012df4:	781b      	ldrb	r3, [r3, #0]
 8012df6:	2b01      	cmp	r3, #1
 8012df8:	d108      	bne.n	8012e0c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8012dfa:	4b06      	ldr	r3, [pc, #24]	; (8012e14 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8012dfc:	880c      	ldrh	r4, [r1, #0]
 8012dfe:	881b      	ldrh	r3, [r3, #0]
 8012e00:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012e04:	3b01      	subs	r3, #1
 8012e06:	1b1b      	subs	r3, r3, r4
 8012e08:	8003      	strh	r3, [r0, #0]
 8012e0a:	800a      	strh	r2, [r1, #0]
 8012e0c:	bd10      	pop	{r4, pc}
 8012e0e:	bf00      	nop
 8012e10:	20001248 	.word	0x20001248
 8012e14:	2000124c 	.word	0x2000124c

08012e18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8012e18:	4b07      	ldr	r3, [pc, #28]	; (8012e38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8012e1a:	b510      	push	{r4, lr}
 8012e1c:	781b      	ldrb	r3, [r3, #0]
 8012e1e:	2b01      	cmp	r3, #1
 8012e20:	d108      	bne.n	8012e34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8012e22:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012e26:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012e2a:	8003      	strh	r3, [r0, #0]
 8012e2c:	8893      	ldrh	r3, [r2, #4]
 8012e2e:	3b01      	subs	r3, #1
 8012e30:	1b1b      	subs	r3, r3, r4
 8012e32:	800b      	strh	r3, [r1, #0]
 8012e34:	bd10      	pop	{r4, pc}
 8012e36:	bf00      	nop
 8012e38:	20001248 	.word	0x20001248

08012e3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8012e3c:	4b08      	ldr	r3, [pc, #32]	; (8012e60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8012e3e:	b513      	push	{r0, r1, r4, lr}
 8012e40:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012e44:	2400      	movs	r4, #0
 8012e46:	4b07      	ldr	r3, [pc, #28]	; (8012e64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8012e48:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012e4c:	466a      	mov	r2, sp
 8012e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e52:	9400      	str	r4, [sp, #0]
 8012e54:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012e58:	f7ff ffde 	bl	8012e18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8012e5c:	b002      	add	sp, #8
 8012e5e:	bd10      	pop	{r4, pc}
 8012e60:	20001244 	.word	0x20001244
 8012e64:	20001246 	.word	0x20001246

08012e68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8012e68:	4b0a      	ldr	r3, [pc, #40]	; (8012e94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8012e6a:	460a      	mov	r2, r1
 8012e6c:	b510      	push	{r4, lr}
 8012e6e:	781b      	ldrb	r3, [r3, #0]
 8012e70:	2b01      	cmp	r3, #1
 8012e72:	d10d      	bne.n	8012e90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8012e74:	8881      	ldrh	r1, [r0, #4]
 8012e76:	8803      	ldrh	r3, [r0, #0]
 8012e78:	440b      	add	r3, r1
 8012e7a:	4601      	mov	r1, r0
 8012e7c:	3b01      	subs	r3, #1
 8012e7e:	f821 3b02 	strh.w	r3, [r1], #2
 8012e82:	f7ff ffc9 	bl	8012e18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8012e86:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012e8a:	88c2      	ldrh	r2, [r0, #6]
 8012e8c:	80c3      	strh	r3, [r0, #6]
 8012e8e:	8082      	strh	r2, [r0, #4]
 8012e90:	bd10      	pop	{r4, pc}
 8012e92:	bf00      	nop
 8012e94:	20001248 	.word	0x20001248

08012e98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8012e98:	4b09      	ldr	r3, [pc, #36]	; (8012ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8012e9a:	b507      	push	{r0, r1, r2, lr}
 8012e9c:	2100      	movs	r1, #0
 8012e9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012ea2:	4b08      	ldr	r3, [pc, #32]	; (8012ec4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8012ea4:	9100      	str	r1, [sp, #0]
 8012ea6:	4669      	mov	r1, sp
 8012ea8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012eac:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012eb0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012eb4:	f7ff ffd8 	bl	8012e68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012eb8:	b003      	add	sp, #12
 8012eba:	f85d fb04 	ldr.w	pc, [sp], #4
 8012ebe:	bf00      	nop
 8012ec0:	20001244 	.word	0x20001244
 8012ec4:	20001246 	.word	0x20001246

08012ec8 <_ZN8touchgfx11Application11getInstanceEv>:
 8012ec8:	4b01      	ldr	r3, [pc, #4]	; (8012ed0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8012eca:	6818      	ldr	r0, [r3, #0]
 8012ecc:	4770      	bx	lr
 8012ece:	bf00      	nop
 8012ed0:	20001290 	.word	0x20001290

08012ed4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8012ed4:	4b03      	ldr	r3, [pc, #12]	; (8012ee4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	801a      	strh	r2, [r3, #0]
 8012eda:	805a      	strh	r2, [r3, #2]
 8012edc:	809a      	strh	r2, [r3, #4]
 8012ede:	80da      	strh	r2, [r3, #6]
 8012ee0:	4770      	bx	lr
 8012ee2:	bf00      	nop
 8012ee4:	20001288 	.word	0x20001288

08012ee8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8012ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eec:	b099      	sub	sp, #100	; 0x64
 8012eee:	4607      	mov	r7, r0
 8012ef0:	4614      	mov	r4, r2
 8012ef2:	461d      	mov	r5, r3
 8012ef4:	a802      	add	r0, sp, #8
 8012ef6:	468a      	mov	sl, r1
 8012ef8:	f000 f9aa 	bl	8013250 <_ZN8touchgfx12TextProviderC1Ev>
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	4638      	mov	r0, r7
 8012f00:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8012f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f06:	4798      	blx	r3
 8012f08:	462a      	mov	r2, r5
 8012f0a:	2500      	movs	r5, #0
 8012f0c:	4621      	mov	r1, r4
 8012f0e:	4603      	mov	r3, r0
 8012f10:	a802      	add	r0, sp, #8
 8012f12:	462c      	mov	r4, r5
 8012f14:	46a9      	mov	r9, r5
 8012f16:	46a8      	mov	r8, r5
 8012f18:	f000 f9df 	bl	80132da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	9301      	str	r3, [sp, #4]
 8012f20:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8012f24:	429c      	cmp	r4, r3
 8012f26:	d002      	beq.n	8012f2e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 8012f28:	455c      	cmp	r4, fp
 8012f2a:	bf18      	it	ne
 8012f2c:	4625      	movne	r5, r4
 8012f2e:	ab01      	add	r3, sp, #4
 8012f30:	463a      	mov	r2, r7
 8012f32:	4651      	mov	r1, sl
 8012f34:	a802      	add	r0, sp, #8
 8012f36:	f000 fccb 	bl	80138d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012f3a:	4604      	mov	r4, r0
 8012f3c:	b108      	cbz	r0, 8012f42 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 8012f3e:	280a      	cmp	r0, #10
 8012f40:	d10a      	bne.n	8012f58 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 8012f42:	45c1      	cmp	r9, r8
 8012f44:	bf38      	it	cc
 8012f46:	46c1      	movcc	r9, r8
 8012f48:	f04f 0800 	mov.w	r8, #0
 8012f4c:	2c00      	cmp	r4, #0
 8012f4e:	d1e5      	bne.n	8012f1c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8012f50:	4648      	mov	r0, r9
 8012f52:	b019      	add	sp, #100	; 0x64
 8012f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f58:	9a01      	ldr	r2, [sp, #4]
 8012f5a:	2a00      	cmp	r2, #0
 8012f5c:	d0de      	beq.n	8012f1c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8012f5e:	7b56      	ldrb	r6, [r2, #13]
 8012f60:	4629      	mov	r1, r5
 8012f62:	683b      	ldr	r3, [r7, #0]
 8012f64:	0076      	lsls	r6, r6, #1
 8012f66:	8894      	ldrh	r4, [r2, #4]
 8012f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f6a:	f406 7080 	and.w	r0, r6, #256	; 0x100
 8012f6e:	7a96      	ldrb	r6, [r2, #10]
 8012f70:	4306      	orrs	r6, r0
 8012f72:	4638      	mov	r0, r7
 8012f74:	4798      	blx	r3
 8012f76:	4430      	add	r0, r6
 8012f78:	4480      	add	r8, r0
 8012f7a:	fa1f f888 	uxth.w	r8, r8
 8012f7e:	e7e5      	b.n	8012f4c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

08012f80 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8012f80:	b508      	push	{r3, lr}
 8012f82:	6803      	ldr	r3, [r0, #0]
 8012f84:	68db      	ldr	r3, [r3, #12]
 8012f86:	4798      	blx	r3
 8012f88:	b128      	cbz	r0, 8012f96 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8012f8a:	7b43      	ldrb	r3, [r0, #13]
 8012f8c:	7a80      	ldrb	r0, [r0, #10]
 8012f8e:	005b      	lsls	r3, r3, #1
 8012f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f94:	4318      	orrs	r0, r3
 8012f96:	bd08      	pop	{r3, pc}

08012f98 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8012f98:	b40e      	push	{r1, r2, r3}
 8012f9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f9c:	b098      	sub	sp, #96	; 0x60
 8012f9e:	4605      	mov	r5, r0
 8012fa0:	ab1d      	add	r3, sp, #116	; 0x74
 8012fa2:	a802      	add	r0, sp, #8
 8012fa4:	ae18      	add	r6, sp, #96	; 0x60
 8012fa6:	f853 4b04 	ldr.w	r4, [r3], #4
 8012faa:	9300      	str	r3, [sp, #0]
 8012fac:	f000 f950 	bl	8013250 <_ZN8touchgfx12TextProviderC1Ev>
 8012fb0:	682b      	ldr	r3, [r5, #0]
 8012fb2:	4628      	mov	r0, r5
 8012fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012fb6:	4798      	blx	r3
 8012fb8:	4621      	mov	r1, r4
 8012fba:	2400      	movs	r4, #0
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	9a00      	ldr	r2, [sp, #0]
 8012fc0:	a802      	add	r0, sp, #8
 8012fc2:	f000 f98a 	bl	80132da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8012fc6:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8012fca:	462a      	mov	r2, r5
 8012fcc:	4633      	mov	r3, r6
 8012fce:	4621      	mov	r1, r4
 8012fd0:	a802      	add	r0, sp, #8
 8012fd2:	f000 fc7d 	bl	80138d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012fd6:	b300      	cbz	r0, 801301a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8012fd8:	280a      	cmp	r0, #10
 8012fda:	d01a      	beq.n	8013012 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 8012fdc:	9f01      	ldr	r7, [sp, #4]
 8012fde:	b1c7      	cbz	r7, 8013012 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 8012fe0:	7b78      	ldrb	r0, [r7, #13]
 8012fe2:	7a3b      	ldrb	r3, [r7, #8]
 8012fe4:	00c1      	lsls	r1, r0, #3
 8012fe6:	88aa      	ldrh	r2, [r5, #4]
 8012fe8:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8012fec:	4319      	orrs	r1, r3
 8012fee:	0643      	lsls	r3, r0, #25
 8012ff0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8012ff4:	bf48      	it	mi
 8012ff6:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8012ffa:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8012ffe:	bf48      	it	mi
 8013000:	b219      	sxthmi	r1, r3
 8013002:	79fb      	ldrb	r3, [r7, #7]
 8013004:	4303      	orrs	r3, r0
 8013006:	4413      	add	r3, r2
 8013008:	1a5b      	subs	r3, r3, r1
 801300a:	b29b      	uxth	r3, r3
 801300c:	42a3      	cmp	r3, r4
 801300e:	bfc8      	it	gt
 8013010:	b21c      	sxthgt	r4, r3
 8013012:	4633      	mov	r3, r6
 8013014:	462a      	mov	r2, r5
 8013016:	2100      	movs	r1, #0
 8013018:	e7da      	b.n	8012fd0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 801301a:	b2a0      	uxth	r0, r4
 801301c:	b018      	add	sp, #96	; 0x60
 801301e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013022:	b003      	add	sp, #12
 8013024:	4770      	bx	lr

08013026 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8013026:	b40e      	push	{r1, r2, r3}
 8013028:	b530      	push	{r4, r5, lr}
 801302a:	b098      	sub	sp, #96	; 0x60
 801302c:	4604      	mov	r4, r0
 801302e:	ab1b      	add	r3, sp, #108	; 0x6c
 8013030:	a802      	add	r0, sp, #8
 8013032:	f853 5b04 	ldr.w	r5, [r3], #4
 8013036:	9301      	str	r3, [sp, #4]
 8013038:	f000 f90a 	bl	8013250 <_ZN8touchgfx12TextProviderC1Ev>
 801303c:	6823      	ldr	r3, [r4, #0]
 801303e:	4620      	mov	r0, r4
 8013040:	2401      	movs	r4, #1
 8013042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013044:	4798      	blx	r3
 8013046:	9a01      	ldr	r2, [sp, #4]
 8013048:	4603      	mov	r3, r0
 801304a:	4629      	mov	r1, r5
 801304c:	a802      	add	r0, sp, #8
 801304e:	f000 f944 	bl	80132da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8013052:	a802      	add	r0, sp, #8
 8013054:	f000 fcda 	bl	8013a0c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013058:	b2a3      	uxth	r3, r4
 801305a:	b138      	cbz	r0, 801306c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801305c:	280a      	cmp	r0, #10
 801305e:	a802      	add	r0, sp, #8
 8013060:	bf04      	itt	eq
 8013062:	3301      	addeq	r3, #1
 8013064:	b21c      	sxtheq	r4, r3
 8013066:	f000 fcd1 	bl	8013a0c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801306a:	e7f5      	b.n	8013058 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801306c:	4618      	mov	r0, r3
 801306e:	b018      	add	sp, #96	; 0x60
 8013070:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013074:	b003      	add	sp, #12
 8013076:	4770      	bx	lr

08013078 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8013078:	b40e      	push	{r1, r2, r3}
 801307a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801307c:	b098      	sub	sp, #96	; 0x60
 801307e:	4604      	mov	r4, r0
 8013080:	26ff      	movs	r6, #255	; 0xff
 8013082:	ab1d      	add	r3, sp, #116	; 0x74
 8013084:	a802      	add	r0, sp, #8
 8013086:	f853 5b04 	ldr.w	r5, [r3], #4
 801308a:	9300      	str	r3, [sp, #0]
 801308c:	f000 f8e0 	bl	8013250 <_ZN8touchgfx12TextProviderC1Ev>
 8013090:	6823      	ldr	r3, [r4, #0]
 8013092:	4620      	mov	r0, r4
 8013094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013096:	4798      	blx	r3
 8013098:	4629      	mov	r1, r5
 801309a:	4603      	mov	r3, r0
 801309c:	9a00      	ldr	r2, [sp, #0]
 801309e:	a802      	add	r0, sp, #8
 80130a0:	ad18      	add	r5, sp, #96	; 0x60
 80130a2:	f000 f91a 	bl	80132da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80130a6:	2100      	movs	r1, #0
 80130a8:	4622      	mov	r2, r4
 80130aa:	a802      	add	r0, sp, #8
 80130ac:	f845 1d5c 	str.w	r1, [r5, #-92]!
 80130b0:	462b      	mov	r3, r5
 80130b2:	f000 fc0d 	bl	80138d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80130b6:	b1d8      	cbz	r0, 80130f0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80130b8:	280a      	cmp	r0, #10
 80130ba:	d012      	beq.n	80130e2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 80130bc:	9801      	ldr	r0, [sp, #4]
 80130be:	b180      	cbz	r0, 80130e2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 80130c0:	7b47      	ldrb	r7, [r0, #13]
 80130c2:	7922      	ldrb	r2, [r4, #4]
 80130c4:	00fb      	lsls	r3, r7, #3
 80130c6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80130ca:	7a03      	ldrb	r3, [r0, #8]
 80130cc:	430b      	orrs	r3, r1
 80130ce:	0679      	lsls	r1, r7, #25
 80130d0:	bf44      	itt	mi
 80130d2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80130d6:	b21b      	sxthmi	r3, r3
 80130d8:	1ad3      	subs	r3, r2, r3
 80130da:	b2db      	uxtb	r3, r3
 80130dc:	429e      	cmp	r6, r3
 80130de:	bf28      	it	cs
 80130e0:	461e      	movcs	r6, r3
 80130e2:	462b      	mov	r3, r5
 80130e4:	4622      	mov	r2, r4
 80130e6:	2100      	movs	r1, #0
 80130e8:	a802      	add	r0, sp, #8
 80130ea:	f000 fbf1 	bl	80138d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80130ee:	e7e2      	b.n	80130b6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 80130f0:	4630      	mov	r0, r6
 80130f2:	b018      	add	sp, #96	; 0x60
 80130f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80130f8:	b003      	add	sp, #12
 80130fa:	4770      	bx	lr

080130fc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 80130fc:	b530      	push	{r4, r5, lr}
 80130fe:	8083      	strh	r3, [r0, #4]
 8013100:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8013104:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8013108:	7183      	strb	r3, [r0, #6]
 801310a:	79c3      	ldrb	r3, [r0, #7]
 801310c:	6101      	str	r1, [r0, #16]
 801310e:	f365 0306 	bfi	r3, r5, #0, #7
 8013112:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8013116:	8282      	strh	r2, [r0, #20]
 8013118:	f365 13c7 	bfi	r3, r5, #7, #1
 801311c:	71c3      	strb	r3, [r0, #7]
 801311e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8013122:	7203      	strb	r3, [r0, #8]
 8013124:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8013128:	7243      	strb	r3, [r0, #9]
 801312a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801312e:	8143      	strh	r3, [r0, #10]
 8013130:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8013134:	8183      	strh	r3, [r0, #12]
 8013136:	4b01      	ldr	r3, [pc, #4]	; (801313c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8013138:	6003      	str	r3, [r0, #0]
 801313a:	bd30      	pop	{r4, r5, pc}
 801313c:	0801960c 	.word	0x0801960c

08013140 <_ZNK8touchgfx9ConstFont4findEt>:
 8013140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013142:	6904      	ldr	r4, [r0, #16]
 8013144:	b3bc      	cbz	r4, 80131b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013146:	88a3      	ldrh	r3, [r4, #4]
 8013148:	8a82      	ldrh	r2, [r0, #20]
 801314a:	1acb      	subs	r3, r1, r3
 801314c:	f102 32ff 	add.w	r2, r2, #4294967295
 8013150:	d431      	bmi.n	80131b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013152:	4293      	cmp	r3, r2
 8013154:	dd0c      	ble.n	8013170 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8013156:	230e      	movs	r3, #14
 8013158:	fb03 4302 	mla	r3, r3, r2, r4
 801315c:	889b      	ldrh	r3, [r3, #4]
 801315e:	1a5b      	subs	r3, r3, r1
 8013160:	1ad3      	subs	r3, r2, r3
 8013162:	429a      	cmp	r2, r3
 8013164:	db27      	blt.n	80131b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013166:	2b00      	cmp	r3, #0
 8013168:	bfbc      	itt	lt
 801316a:	2302      	movlt	r3, #2
 801316c:	fb92 f3f3 	sdivlt	r3, r2, r3
 8013170:	2500      	movs	r5, #0
 8013172:	260e      	movs	r6, #14
 8013174:	4295      	cmp	r5, r2
 8013176:	dc1e      	bgt.n	80131b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013178:	fb06 4003 	mla	r0, r6, r3, r4
 801317c:	8887      	ldrh	r7, [r0, #4]
 801317e:	42b9      	cmp	r1, r7
 8013180:	d01a      	beq.n	80131b8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8013182:	d20d      	bcs.n	80131a0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8013184:	1e5a      	subs	r2, r3, #1
 8013186:	4295      	cmp	r5, r2
 8013188:	dc15      	bgt.n	80131b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801318a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801318e:	1a5b      	subs	r3, r3, r1
 8013190:	1ad3      	subs	r3, r2, r3
 8013192:	429a      	cmp	r2, r3
 8013194:	db0f      	blt.n	80131b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013196:	429d      	cmp	r5, r3
 8013198:	ddec      	ble.n	8013174 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801319a:	1953      	adds	r3, r2, r5
 801319c:	105b      	asrs	r3, r3, #1
 801319e:	e7e9      	b.n	8013174 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80131a0:	1c5d      	adds	r5, r3, #1
 80131a2:	42aa      	cmp	r2, r5
 80131a4:	db07      	blt.n	80131b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80131a6:	8a43      	ldrh	r3, [r0, #18]
 80131a8:	1acb      	subs	r3, r1, r3
 80131aa:	442b      	add	r3, r5
 80131ac:	429d      	cmp	r5, r3
 80131ae:	dc02      	bgt.n	80131b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80131b0:	429a      	cmp	r2, r3
 80131b2:	dadf      	bge.n	8013174 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80131b4:	e7f1      	b.n	801319a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80131b6:	2000      	movs	r0, #0
 80131b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080131ba <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80131ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131bc:	4604      	mov	r4, r0
 80131be:	4617      	mov	r7, r2
 80131c0:	461e      	mov	r6, r3
 80131c2:	b911      	cbnz	r1, 80131ca <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80131c4:	2500      	movs	r5, #0
 80131c6:	4628      	mov	r0, r5
 80131c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131ca:	290a      	cmp	r1, #10
 80131cc:	d0fa      	beq.n	80131c4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80131ce:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80131d2:	4291      	cmp	r1, r2
 80131d4:	d0f6      	beq.n	80131c4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80131d6:	f242 020b 	movw	r2, #8203	; 0x200b
 80131da:	4291      	cmp	r1, r2
 80131dc:	d0f2      	beq.n	80131c4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80131de:	f7ff ffaf 	bl	8013140 <_ZNK8touchgfx9ConstFont4findEt>
 80131e2:	4605      	mov	r5, r0
 80131e4:	b950      	cbnz	r0, 80131fc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80131e6:	6823      	ldr	r3, [r4, #0]
 80131e8:	4620      	mov	r0, r4
 80131ea:	691b      	ldr	r3, [r3, #16]
 80131ec:	4798      	blx	r3
 80131ee:	4601      	mov	r1, r0
 80131f0:	4620      	mov	r0, r4
 80131f2:	f7ff ffa5 	bl	8013140 <_ZNK8touchgfx9ConstFont4findEt>
 80131f6:	4605      	mov	r5, r0
 80131f8:	2800      	cmp	r0, #0
 80131fa:	d0e3      	beq.n	80131c4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80131fc:	6823      	ldr	r3, [r4, #0]
 80131fe:	4629      	mov	r1, r5
 8013200:	4620      	mov	r0, r4
 8013202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013204:	4798      	blx	r3
 8013206:	6038      	str	r0, [r7, #0]
 8013208:	6823      	ldr	r3, [r4, #0]
 801320a:	4620      	mov	r0, r4
 801320c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801320e:	4798      	blx	r3
 8013210:	7030      	strb	r0, [r6, #0]
 8013212:	e7d8      	b.n	80131c6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08013214 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8013214:	2000      	movs	r0, #0
 8013216:	4770      	bx	lr

08013218 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8013218:	2001      	movs	r0, #1
 801321a:	4770      	bx	lr

0801321c <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801321c:	2002      	movs	r0, #2
 801321e:	4770      	bx	lr

08013220 <_ZN8touchgfx12GestureEventD1Ev>:
 8013220:	4770      	bx	lr

08013222 <_ZN8touchgfx9DragEventD1Ev>:
 8013222:	4770      	bx	lr

08013224 <_ZN8touchgfx10ClickEventD1Ev>:
 8013224:	4770      	bx	lr

08013226 <_ZN8touchgfx10ClickEventD0Ev>:
 8013226:	b510      	push	{r4, lr}
 8013228:	4604      	mov	r4, r0
 801322a:	210c      	movs	r1, #12
 801322c:	f002 feec 	bl	8016008 <_ZdlPvj>
 8013230:	4620      	mov	r0, r4
 8013232:	bd10      	pop	{r4, pc}

08013234 <_ZN8touchgfx9DragEventD0Ev>:
 8013234:	b510      	push	{r4, lr}
 8013236:	4604      	mov	r4, r0
 8013238:	2110      	movs	r1, #16
 801323a:	f002 fee5 	bl	8016008 <_ZdlPvj>
 801323e:	4620      	mov	r0, r4
 8013240:	bd10      	pop	{r4, pc}

08013242 <_ZN8touchgfx12GestureEventD0Ev>:
 8013242:	b510      	push	{r4, lr}
 8013244:	4604      	mov	r4, r0
 8013246:	210c      	movs	r1, #12
 8013248:	f002 fede 	bl	8016008 <_ZdlPvj>
 801324c:	4620      	mov	r0, r4
 801324e:	bd10      	pop	{r4, pc}

08013250 <_ZN8touchgfx12TextProviderC1Ev>:
 8013250:	2300      	movs	r3, #0
 8013252:	2201      	movs	r2, #1
 8013254:	b510      	push	{r4, lr}
 8013256:	4604      	mov	r4, r0
 8013258:	60c3      	str	r3, [r0, #12]
 801325a:	7403      	strb	r3, [r0, #16]
 801325c:	82c3      	strh	r3, [r0, #22]
 801325e:	8303      	strh	r3, [r0, #24]
 8013260:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8013262:	8603      	strh	r3, [r0, #48]	; 0x30
 8013264:	86c3      	strh	r3, [r0, #54]	; 0x36
 8013266:	8703      	strh	r3, [r0, #56]	; 0x38
 8013268:	63c3      	str	r3, [r0, #60]	; 0x3c
 801326a:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801326e:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8013272:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8013276:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801327a:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801327e:	e9c0 3300 	strd	r3, r3, [r0]
 8013282:	f7f7 fcdd 	bl	800ac40 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8013286:	4620      	mov	r0, r4
 8013288:	bd10      	pop	{r4, pc}

0801328a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801328a:	b530      	push	{r4, r5, lr}
 801328c:	2500      	movs	r5, #0
 801328e:	2401      	movs	r4, #1
 8013290:	6843      	ldr	r3, [r0, #4]
 8013292:	b913      	cbnz	r3, 801329a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8013294:	6803      	ldr	r3, [r0, #0]
 8013296:	b1f3      	cbz	r3, 80132d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8013298:	6043      	str	r3, [r0, #4]
 801329a:	7c03      	ldrb	r3, [r0, #16]
 801329c:	b143      	cbz	r3, 80132b0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801329e:	68c3      	ldr	r3, [r0, #12]
 80132a0:	b12b      	cbz	r3, 80132ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80132a2:	881a      	ldrh	r2, [r3, #0]
 80132a4:	b11a      	cbz	r2, 80132ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80132a6:	1c9a      	adds	r2, r3, #2
 80132a8:	60c2      	str	r2, [r0, #12]
 80132aa:	8818      	ldrh	r0, [r3, #0]
 80132ac:	bd30      	pop	{r4, r5, pc}
 80132ae:	7405      	strb	r5, [r0, #16]
 80132b0:	6843      	ldr	r3, [r0, #4]
 80132b2:	8819      	ldrh	r1, [r3, #0]
 80132b4:	b179      	cbz	r1, 80132d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 80132b6:	1c9a      	adds	r2, r3, #2
 80132b8:	2902      	cmp	r1, #2
 80132ba:	6042      	str	r2, [r0, #4]
 80132bc:	d1f5      	bne.n	80132aa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80132be:	6883      	ldr	r3, [r0, #8]
 80132c0:	1d1a      	adds	r2, r3, #4
 80132c2:	6082      	str	r2, [r0, #8]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	60c3      	str	r3, [r0, #12]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d0e1      	beq.n	8013290 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80132cc:	881b      	ldrh	r3, [r3, #0]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d0de      	beq.n	8013290 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80132d2:	7404      	strb	r4, [r0, #16]
 80132d4:	e7dc      	b.n	8013290 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80132d6:	2000      	movs	r0, #0
 80132d8:	e7e8      	b.n	80132ac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080132da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 80132da:	63c3      	str	r3, [r0, #60]	; 0x3c
 80132dc:	2300      	movs	r3, #0
 80132de:	6082      	str	r2, [r0, #8]
 80132e0:	6001      	str	r1, [r0, #0]
 80132e2:	6043      	str	r3, [r0, #4]
 80132e4:	60c3      	str	r3, [r0, #12]
 80132e6:	7403      	strb	r3, [r0, #16]
 80132e8:	8603      	strh	r3, [r0, #48]	; 0x30
 80132ea:	8303      	strh	r3, [r0, #24]
 80132ec:	8703      	strh	r3, [r0, #56]	; 0x38
 80132ee:	b410      	push	{r4}
 80132f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132f4:	f7f7 bca4 	b.w	800ac40 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080132f8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80132f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132fa:	4605      	mov	r5, r0
 80132fc:	4608      	mov	r0, r1
 80132fe:	b1f1      	cbz	r1, 801333e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8013300:	f105 0440 	add.w	r4, r5, #64	; 0x40
 8013304:	460b      	mov	r3, r1
 8013306:	f101 0708 	add.w	r7, r1, #8
 801330a:	4622      	mov	r2, r4
 801330c:	6818      	ldr	r0, [r3, #0]
 801330e:	3308      	adds	r3, #8
 8013310:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8013314:	4626      	mov	r6, r4
 8013316:	42bb      	cmp	r3, r7
 8013318:	c603      	stmia	r6!, {r0, r1}
 801331a:	4634      	mov	r4, r6
 801331c:	d1f6      	bne.n	801330c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801331e:	6818      	ldr	r0, [r3, #0]
 8013320:	6030      	str	r0, [r6, #0]
 8013322:	4610      	mov	r0, r2
 8013324:	889b      	ldrh	r3, [r3, #4]
 8013326:	80b3      	strh	r3, [r6, #4]
 8013328:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801332c:	015b      	lsls	r3, r3, #5
 801332e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8013332:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8013336:	430b      	orrs	r3, r1
 8013338:	425b      	negs	r3, r3
 801333a:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801333e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013340 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8013340:	b538      	push	{r3, r4, r5, lr}
 8013342:	460c      	mov	r4, r1
 8013344:	6811      	ldr	r1, [r2, #0]
 8013346:	4610      	mov	r0, r2
 8013348:	68cd      	ldr	r5, [r1, #12]
 801334a:	4619      	mov	r1, r3
 801334c:	47a8      	blx	r5
 801334e:	2800      	cmp	r0, #0
 8013350:	bf08      	it	eq
 8013352:	4620      	moveq	r0, r4
 8013354:	bd38      	pop	{r3, r4, r5, pc}
	...

08013358 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8013358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801335a:	4604      	mov	r4, r0
 801335c:	4615      	mov	r5, r2
 801335e:	4608      	mov	r0, r1
 8013360:	b93a      	cbnz	r2, 8013372 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8013362:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8013366:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801336a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801336e:	4628      	mov	r0, r5
 8013370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013372:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8013376:	8893      	ldrh	r3, [r2, #4]
 8013378:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801337c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8013380:	79ee      	ldrb	r6, [r5, #7]
 8013382:	4316      	orrs	r6, r2
 8013384:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8013388:	189a      	adds	r2, r3, r2
 801338a:	b2b7      	uxth	r7, r6
 801338c:	b291      	uxth	r1, r2
 801338e:	291d      	cmp	r1, #29
 8013390:	f200 8084 	bhi.w	801349c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8013394:	2201      	movs	r2, #1
 8013396:	10f6      	asrs	r6, r6, #3
 8013398:	408a      	lsls	r2, r1
 801339a:	4978      	ldr	r1, [pc, #480]	; (801357c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801339c:	420a      	tst	r2, r1
 801339e:	d12e      	bne.n	80133fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 80133a0:	f412 7f60 	tst.w	r2, #896	; 0x380
 80133a4:	d07a      	beq.n	801349c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 80133a6:	f104 0240 	add.w	r2, r4, #64	; 0x40
 80133aa:	462b      	mov	r3, r5
 80133ac:	f105 0e08 	add.w	lr, r5, #8
 80133b0:	4615      	mov	r5, r2
 80133b2:	6818      	ldr	r0, [r3, #0]
 80133b4:	3308      	adds	r3, #8
 80133b6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80133ba:	4694      	mov	ip, r2
 80133bc:	4573      	cmp	r3, lr
 80133be:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80133c2:	4662      	mov	r2, ip
 80133c4:	d1f5      	bne.n	80133b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 80133c6:	6818      	ldr	r0, [r3, #0]
 80133c8:	f8cc 0000 	str.w	r0, [ip]
 80133cc:	889b      	ldrh	r3, [r3, #4]
 80133ce:	f8ac 3004 	strh.w	r3, [ip, #4]
 80133d2:	b2b3      	uxth	r3, r6
 80133d4:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 80133d8:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 80133dc:	1aca      	subs	r2, r1, r3
 80133de:	1bcf      	subs	r7, r1, r7
 80133e0:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80133e4:	b292      	uxth	r2, r2
 80133e6:	1afb      	subs	r3, r7, r3
 80133e8:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 80133ec:	10d2      	asrs	r2, r2, #3
 80133ee:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80133f2:	4302      	orrs	r2, r0
 80133f4:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 80133f8:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 80133fc:	e7b7      	b.n	801336e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80133fe:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8013400:	b92b      	cbnz	r3, 801340e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 8013402:	4b5f      	ldr	r3, [pc, #380]	; (8013580 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 8013404:	21c0      	movs	r1, #192	; 0xc0
 8013406:	4a5f      	ldr	r2, [pc, #380]	; (8013584 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8013408:	485f      	ldr	r0, [pc, #380]	; (8013588 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801340a:	f003 f82f 	bl	801646c <__assert_func>
 801340e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8013410:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8013414:	8b59      	ldrh	r1, [r3, #26]
 8013416:	f640 6333 	movw	r3, #3635	; 0xe33
 801341a:	4299      	cmp	r1, r3
 801341c:	d110      	bne.n	8013440 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801341e:	6803      	ldr	r3, [r0, #0]
 8013420:	68db      	ldr	r3, [r3, #12]
 8013422:	4798      	blx	r3
 8013424:	7b41      	ldrb	r1, [r0, #13]
 8013426:	00cb      	lsls	r3, r1, #3
 8013428:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801342c:	7a03      	ldrb	r3, [r0, #8]
 801342e:	0648      	lsls	r0, r1, #25
 8013430:	ea43 0302 	orr.w	r3, r3, r2
 8013434:	bf44      	itt	mi
 8013436:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801343a:	b21b      	sxthmi	r3, r3
 801343c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8013440:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 8013444:	462a      	mov	r2, r5
 8013446:	f105 0c08 	add.w	ip, r5, #8
 801344a:	443b      	add	r3, r7
 801344c:	4433      	add	r3, r6
 801344e:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8013452:	b29b      	uxth	r3, r3
 8013454:	4635      	mov	r5, r6
 8013456:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801345a:	6810      	ldr	r0, [r2, #0]
 801345c:	3208      	adds	r2, #8
 801345e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8013462:	4637      	mov	r7, r6
 8013464:	4562      	cmp	r2, ip
 8013466:	c703      	stmia	r7!, {r0, r1}
 8013468:	463e      	mov	r6, r7
 801346a:	d1f6      	bne.n	801345a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801346c:	6810      	ldr	r0, [r2, #0]
 801346e:	6038      	str	r0, [r7, #0]
 8013470:	8892      	ldrh	r2, [r2, #4]
 8013472:	80ba      	strh	r2, [r7, #4]
 8013474:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8013478:	10db      	asrs	r3, r3, #3
 801347a:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801347e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013482:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8013486:	4313      	orrs	r3, r2
 8013488:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801348c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8013490:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8013494:	1a9b      	subs	r3, r3, r2
 8013496:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801349a:	e768      	b.n	801336e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801349c:	f023 0204 	bic.w	r2, r3, #4
 80134a0:	f640 611b 	movw	r1, #3611	; 0xe1b
 80134a4:	428a      	cmp	r2, r1
 80134a6:	d003      	beq.n	80134b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 80134a8:	f640 621d 	movw	r2, #3613	; 0xe1d
 80134ac:	4293      	cmp	r3, r2
 80134ae:	d120      	bne.n	80134f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 80134b0:	3b01      	subs	r3, #1
 80134b2:	4602      	mov	r2, r0
 80134b4:	4629      	mov	r1, r5
 80134b6:	4620      	mov	r0, r4
 80134b8:	b29b      	uxth	r3, r3
 80134ba:	f7ff ff41 	bl	8013340 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80134be:	7b41      	ldrb	r1, [r0, #13]
 80134c0:	00cb      	lsls	r3, r1, #3
 80134c2:	0649      	lsls	r1, r1, #25
 80134c4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80134c8:	7a03      	ldrb	r3, [r0, #8]
 80134ca:	ea43 0302 	orr.w	r3, r3, r2
 80134ce:	bf44      	itt	mi
 80134d0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80134d4:	b21b      	sxthmi	r3, r3
 80134d6:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 80134da:	7b6b      	ldrb	r3, [r5, #13]
 80134dc:	7aaa      	ldrb	r2, [r5, #10]
 80134de:	005b      	lsls	r3, r3, #1
 80134e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80134e4:	4313      	orrs	r3, r2
 80134e6:	115a      	asrs	r2, r3, #5
 80134e8:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80134ec:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80134f0:	e035      	b.n	801355e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 80134f2:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80134f6:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80134fa:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80134fe:	7a2a      	ldrb	r2, [r5, #8]
 8013500:	ea42 0201 	orr.w	r2, r2, r1
 8013504:	f640 6109 	movw	r1, #3593	; 0xe09
 8013508:	bf1c      	itt	ne
 801350a:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801350e:	b212      	sxthne	r2, r2
 8013510:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8013514:	f023 0210 	bic.w	r2, r3, #16
 8013518:	428a      	cmp	r2, r1
 801351a:	d003      	beq.n	8013524 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801351c:	f640 6213 	movw	r2, #3603	; 0xe13
 8013520:	4293      	cmp	r3, r2
 8013522:	d129      	bne.n	8013578 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 8013524:	7b6e      	ldrb	r6, [r5, #13]
 8013526:	4629      	mov	r1, r5
 8013528:	0076      	lsls	r6, r6, #1
 801352a:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801352e:	7aae      	ldrb	r6, [r5, #10]
 8013530:	4316      	orrs	r6, r2
 8013532:	f640 6213 	movw	r2, #3603	; 0xe13
 8013536:	4293      	cmp	r3, r2
 8013538:	4602      	mov	r2, r0
 801353a:	4620      	mov	r0, r4
 801353c:	bf16      	itet	ne
 801353e:	f103 33ff 	addne.w	r3, r3, #4294967295
 8013542:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8013546:	b29b      	uxthne	r3, r3
 8013548:	f7ff fefa 	bl	8013340 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801354c:	7b43      	ldrb	r3, [r0, #13]
 801354e:	7a82      	ldrb	r2, [r0, #10]
 8013550:	005b      	lsls	r3, r3, #1
 8013552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013556:	4313      	orrs	r3, r2
 8013558:	1af6      	subs	r6, r6, r3
 801355a:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 801355e:	7b69      	ldrb	r1, [r5, #13]
 8013560:	00cb      	lsls	r3, r1, #3
 8013562:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013566:	7a2b      	ldrb	r3, [r5, #8]
 8013568:	4313      	orrs	r3, r2
 801356a:	064a      	lsls	r2, r1, #25
 801356c:	bf44      	itt	mi
 801356e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013572:	b21b      	sxthmi	r3, r3
 8013574:	1bdb      	subs	r3, r3, r7
 8013576:	e73f      	b.n	80133f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8013578:	2300      	movs	r3, #0
 801357a:	e7b7      	b.n	80134ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801357c:	3fc00079 	.word	0x3fc00079
 8013580:	08019694 	.word	0x08019694
 8013584:	08019906 	.word	0x08019906
 8013588:	0801969d 	.word	0x0801969d

0801358c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801358c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013590:	4604      	mov	r4, r0
 8013592:	b942      	cbnz	r2, 80135a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8013594:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013598:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801359c:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 80135a0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80135a4:	e046      	b.n	8013634 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 80135a6:	7b51      	ldrb	r1, [r2, #13]
 80135a8:	8893      	ldrh	r3, [r2, #4]
 80135aa:	010f      	lsls	r7, r1, #4
 80135ac:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80135b0:	79d7      	ldrb	r7, [r2, #7]
 80135b2:	4307      	orrs	r7, r0
 80135b4:	2f04      	cmp	r7, #4
 80135b6:	b2bd      	uxth	r5, r7
 80135b8:	bfcc      	ite	gt
 80135ba:	08bf      	lsrgt	r7, r7, #2
 80135bc:	2701      	movle	r7, #1
 80135be:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80135c2:	f200 80ab 	bhi.w	801371c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 80135c6:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80135ca:	4283      	cmp	r3, r0
 80135cc:	d216      	bcs.n	80135fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80135ce:	f240 605b 	movw	r0, #1627	; 0x65b
 80135d2:	4283      	cmp	r3, r0
 80135d4:	d859      	bhi.n	801368a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 80135d6:	f240 6057 	movw	r0, #1623	; 0x657
 80135da:	4283      	cmp	r3, r0
 80135dc:	d20e      	bcs.n	80135fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80135de:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80135e2:	d24a      	bcs.n	801367a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 80135e4:	f240 604e 	movw	r0, #1614	; 0x64e
 80135e8:	4283      	cmp	r3, r0
 80135ea:	d207      	bcs.n	80135fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80135ec:	f240 601a 	movw	r0, #1562	; 0x61a
 80135f0:	4283      	cmp	r3, r0
 80135f2:	d02a      	beq.n	801364a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80135f4:	d821      	bhi.n	801363a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 80135f6:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80135fa:	d35b      	bcc.n	80136b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80135fc:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 8013600:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8013604:	f040 80d0 	bne.w	80137a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8013608:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 801360c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8013610:	f040 80ca 	bne.w	80137a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8013614:	00cb      	lsls	r3, r1, #3
 8013616:	0649      	lsls	r1, r1, #25
 8013618:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801361c:	7a13      	ldrb	r3, [r2, #8]
 801361e:	ea43 0300 	orr.w	r3, r3, r0
 8013622:	bf44      	itt	mi
 8013624:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013628:	b21b      	sxthmi	r3, r3
 801362a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801362e:	1b5d      	subs	r5, r3, r5
 8013630:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8013634:	4610      	mov	r0, r2
 8013636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801363a:	f240 604b 	movw	r0, #1611	; 0x64b
 801363e:	4283      	cmp	r3, r0
 8013640:	d338      	bcc.n	80136b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8013642:	f240 604c 	movw	r0, #1612	; 0x64c
 8013646:	4283      	cmp	r3, r0
 8013648:	d9d8      	bls.n	80135fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801364a:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 801364e:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 8013652:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8013656:	f040 80f2 	bne.w	801383e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801365a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801365e:	f040 80ee 	bne.w	801383e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8013662:	00cb      	lsls	r3, r1, #3
 8013664:	064e      	lsls	r6, r1, #25
 8013666:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801366a:	7a13      	ldrb	r3, [r2, #8]
 801366c:	ea43 0300 	orr.w	r3, r3, r0
 8013670:	bf44      	itt	mi
 8013672:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013676:	b21b      	sxthmi	r3, r3
 8013678:	e7d9      	b.n	801362e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801367a:	f240 6054 	movw	r0, #1620	; 0x654
 801367e:	4283      	cmp	r3, r0
 8013680:	d8e3      	bhi.n	801364a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8013682:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8013686:	d9e0      	bls.n	801364a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8013688:	e7b8      	b.n	80135fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801368a:	f240 6074 	movw	r0, #1652	; 0x674
 801368e:	4283      	cmp	r3, r0
 8013690:	d0b4      	beq.n	80135fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8013692:	d82d      	bhi.n	80136f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 8013694:	f240 605e 	movw	r0, #1630	; 0x65e
 8013698:	4283      	cmp	r3, r0
 801369a:	d804      	bhi.n	80136a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801369c:	f240 605d 	movw	r0, #1629	; 0x65d
 80136a0:	4283      	cmp	r3, r0
 80136a2:	d3d2      	bcc.n	801364a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80136a4:	e7aa      	b.n	80135fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80136a6:	f240 605f 	movw	r0, #1631	; 0x65f
 80136aa:	4283      	cmp	r3, r0
 80136ac:	d0cd      	beq.n	801364a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80136ae:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80136b2:	d0a3      	beq.n	80135fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80136b4:	00cb      	lsls	r3, r1, #3
 80136b6:	0649      	lsls	r1, r1, #25
 80136b8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80136bc:	7a13      	ldrb	r3, [r2, #8]
 80136be:	ea43 0300 	orr.w	r3, r3, r0
 80136c2:	bf44      	itt	mi
 80136c4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80136c8:	b21b      	sxthmi	r3, r3
 80136ca:	1b5d      	subs	r5, r3, r5
 80136cc:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 80136d0:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 80136d4:	7b53      	ldrb	r3, [r2, #13]
 80136d6:	015b      	lsls	r3, r3, #5
 80136d8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80136dc:	7993      	ldrb	r3, [r2, #6]
 80136de:	430b      	orrs	r3, r1
 80136e0:	2105      	movs	r1, #5
 80136e2:	005b      	lsls	r3, r3, #1
 80136e4:	fb93 f3f1 	sdiv	r3, r3, r1
 80136e8:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80136ec:	440b      	add	r3, r1
 80136ee:	e757      	b.n	80135a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80136f0:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80136f4:	4283      	cmp	r3, r0
 80136f6:	d809      	bhi.n	801370c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 80136f8:	f240 60df 	movw	r0, #1759	; 0x6df
 80136fc:	4283      	cmp	r3, r0
 80136fe:	f4bf af7d 	bcs.w	80135fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8013702:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8013706:	2b05      	cmp	r3, #5
 8013708:	d8d4      	bhi.n	80136b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801370a:	e777      	b.n	80135fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801370c:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8013710:	4283      	cmp	r3, r0
 8013712:	d09a      	beq.n	801364a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8013714:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8013718:	4283      	cmp	r3, r0
 801371a:	e7ca      	b.n	80136b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801371c:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8013720:	d22b      	bcs.n	801377a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 8013722:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8013726:	4283      	cmp	r3, r0
 8013728:	d28f      	bcs.n	801364a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801372a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801372e:	4283      	cmp	r3, r0
 8013730:	d816      	bhi.n	8013760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 8013732:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8013736:	4283      	cmp	r3, r0
 8013738:	f4bf af60 	bcs.w	80135fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801373c:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8013740:	4283      	cmp	r3, r0
 8013742:	d80a      	bhi.n	801375a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8013744:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8013748:	4283      	cmp	r3, r0
 801374a:	f4bf af57 	bcs.w	80135fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801374e:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8013752:	4283      	cmp	r3, r0
 8013754:	f43f af79 	beq.w	801364a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8013758:	e7ac      	b.n	80136b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801375a:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801375e:	e7f8      	b.n	8013752 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8013760:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8013764:	4283      	cmp	r3, r0
 8013766:	d802      	bhi.n	801376e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8013768:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801376c:	e798      	b.n	80136a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801376e:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8013772:	4283      	cmp	r3, r0
 8013774:	f47f af42 	bne.w	80135fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8013778:	e767      	b.n	801364a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801377a:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801377e:	4283      	cmp	r3, r0
 8013780:	f43f af63 	beq.w	801364a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8013784:	d802      	bhi.n	801378c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8013786:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801378a:	e7f2      	b.n	8013772 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801378c:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8013790:	4283      	cmp	r3, r0
 8013792:	d805      	bhi.n	80137a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 8013794:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8013798:	4283      	cmp	r3, r0
 801379a:	f4ff af2f 	bcc.w	80135fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801379e:	e754      	b.n	801364a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80137a0:	f640 00fe 	movw	r0, #2302	; 0x8fe
 80137a4:	4283      	cmp	r3, r0
 80137a6:	e7af      	b.n	8013708 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 80137a8:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 80137ac:	4617      	mov	r7, r2
 80137ae:	f102 0808 	add.w	r8, r2, #8
 80137b2:	4666      	mov	r6, ip
 80137b4:	6838      	ldr	r0, [r7, #0]
 80137b6:	3708      	adds	r7, #8
 80137b8:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80137bc:	46e6      	mov	lr, ip
 80137be:	4547      	cmp	r7, r8
 80137c0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80137c4:	46f4      	mov	ip, lr
 80137c6:	d1f5      	bne.n	80137b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 80137c8:	6838      	ldr	r0, [r7, #0]
 80137ca:	f8ce 0000 	str.w	r0, [lr]
 80137ce:	88b9      	ldrh	r1, [r7, #4]
 80137d0:	f8ae 1004 	strh.w	r1, [lr, #4]
 80137d4:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 80137d8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80137dc:	d009      	beq.n	80137f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 80137de:	7b51      	ldrb	r1, [r2, #13]
 80137e0:	7992      	ldrb	r2, [r2, #6]
 80137e2:	0149      	lsls	r1, r1, #5
 80137e4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80137e8:	4311      	orrs	r1, r2
 80137ea:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80137ee:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 80137f2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80137f6:	d00d      	beq.n	8013814 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 80137f8:	442b      	add	r3, r5
 80137fa:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 80137fe:	b29b      	uxth	r3, r3
 8013800:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8013804:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8013808:	10db      	asrs	r3, r3, #3
 801380a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801380e:	4313      	orrs	r3, r2
 8013810:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8013814:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8013818:	00cb      	lsls	r3, r1, #3
 801381a:	064f      	lsls	r7, r1, #25
 801381c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013820:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8013824:	ea43 0302 	orr.w	r3, r3, r2
 8013828:	bf44      	itt	mi
 801382a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801382e:	b21b      	sxthmi	r3, r3
 8013830:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8013834:	1b5d      	subs	r5, r3, r5
 8013836:	4632      	mov	r2, r6
 8013838:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801383c:	e6fa      	b.n	8013634 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801383e:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8013842:	4694      	mov	ip, r2
 8013844:	f102 0908 	add.w	r9, r2, #8
 8013848:	4676      	mov	r6, lr
 801384a:	f8dc 0000 	ldr.w	r0, [ip]
 801384e:	f10c 0c08 	add.w	ip, ip, #8
 8013852:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 8013856:	46f0      	mov	r8, lr
 8013858:	45cc      	cmp	ip, r9
 801385a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801385e:	46c6      	mov	lr, r8
 8013860:	d1f3      	bne.n	801384a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 8013862:	f8dc 0000 	ldr.w	r0, [ip]
 8013866:	f8c8 0000 	str.w	r0, [r8]
 801386a:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801386e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8013872:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8013876:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801387a:	d009      	beq.n	8013890 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801387c:	7b51      	ldrb	r1, [r2, #13]
 801387e:	7992      	ldrb	r2, [r2, #6]
 8013880:	0149      	lsls	r1, r1, #5
 8013882:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8013886:	4311      	orrs	r1, r2
 8013888:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801388c:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 8013890:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8013894:	d00d      	beq.n	80138b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 8013896:	1bdb      	subs	r3, r3, r7
 8013898:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801389c:	b29b      	uxth	r3, r3
 801389e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80138a2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 80138a6:	10db      	asrs	r3, r3, #3
 80138a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80138ac:	4313      	orrs	r3, r2
 80138ae:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 80138b2:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 80138b6:	00cb      	lsls	r3, r1, #3
 80138b8:	0648      	lsls	r0, r1, #25
 80138ba:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80138be:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80138c2:	ea43 0302 	orr.w	r3, r3, r2
 80138c6:	bf44      	itt	mi
 80138c8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80138cc:	b21b      	sxthmi	r3, r3
 80138ce:	e7b1      	b.n	8013834 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

080138d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80138d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138d4:	461e      	mov	r6, r3
 80138d6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80138d8:	4604      	mov	r4, r0
 80138da:	4617      	mov	r7, r2
 80138dc:	b92b      	cbnz	r3, 80138ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 80138de:	4b25      	ldr	r3, [pc, #148]	; (8013974 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 80138e0:	21c0      	movs	r1, #192	; 0xc0
 80138e2:	4a25      	ldr	r2, [pc, #148]	; (8013978 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 80138e4:	4825      	ldr	r0, [pc, #148]	; (801397c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 80138e6:	f002 fdc1 	bl	801646c <__assert_func>
 80138ea:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80138ec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80138f0:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 80138f4:	f7f7 f8fe 	bl	800aaf4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80138f8:	4605      	mov	r5, r0
 80138fa:	b918      	cbnz	r0, 8013904 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 80138fc:	6030      	str	r0, [r6, #0]
 80138fe:	4628      	mov	r0, r5
 8013900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013904:	683b      	ldr	r3, [r7, #0]
 8013906:	4601      	mov	r1, r0
 8013908:	4638      	mov	r0, r7
 801390a:	68db      	ldr	r3, [r3, #12]
 801390c:	4798      	blx	r3
 801390e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8013912:	4602      	mov	r2, r0
 8013914:	6030      	str	r0, [r6, #0]
 8013916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801391a:	d213      	bcs.n	8013944 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801391c:	4643      	mov	r3, r8
 801391e:	4639      	mov	r1, r7
 8013920:	4620      	mov	r0, r4
 8013922:	f7ff fe33 	bl	801358c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8013926:	6030      	str	r0, [r6, #0]
 8013928:	6833      	ldr	r3, [r6, #0]
 801392a:	b143      	cbz	r3, 801393e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801392c:	7b5a      	ldrb	r2, [r3, #13]
 801392e:	7a9b      	ldrb	r3, [r3, #10]
 8013930:	0052      	lsls	r2, r2, #1
 8013932:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8013936:	4313      	orrs	r3, r2
 8013938:	bf0c      	ite	eq
 801393a:	2301      	moveq	r3, #1
 801393c:	2300      	movne	r3, #0
 801393e:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8013942:	e7dc      	b.n	80138fe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 8013944:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8013948:	b29b      	uxth	r3, r3
 801394a:	2b7f      	cmp	r3, #127	; 0x7f
 801394c:	d804      	bhi.n	8013958 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801394e:	4639      	mov	r1, r7
 8013950:	4620      	mov	r0, r4
 8013952:	f7ff fd01 	bl	8013358 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8013956:	e7e6      	b.n	8013926 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8013958:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801395c:	2b00      	cmp	r3, #0
 801395e:	d0e3      	beq.n	8013928 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8013960:	f640 1302 	movw	r3, #2306	; 0x902
 8013964:	429d      	cmp	r5, r3
 8013966:	d1df      	bne.n	8013928 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8013968:	4601      	mov	r1, r0
 801396a:	4620      	mov	r0, r4
 801396c:	f7ff fcc4 	bl	80132f8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8013970:	e7d9      	b.n	8013926 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8013972:	bf00      	nop
 8013974:	08019694 	.word	0x08019694
 8013978:	08019906 	.word	0x08019906
 801397c:	0801969d 	.word	0x0801969d

08013980 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8013980:	b510      	push	{r4, lr}
 8013982:	4604      	mov	r4, r0
 8013984:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8013986:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8013988:	b9d9      	cbnz	r1, 80139c2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801398a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801398c:	2b0a      	cmp	r3, #10
 801398e:	d036      	beq.n	80139fe <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8013990:	4620      	mov	r0, r4
 8013992:	f7ff fc7a 	bl	801328a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8013996:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8013998:	2b09      	cmp	r3, #9
 801399a:	d906      	bls.n	80139aa <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801399c:	4b18      	ldr	r3, [pc, #96]	; (8013a00 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801399e:	f44f 7182 	mov.w	r1, #260	; 0x104
 80139a2:	4a18      	ldr	r2, [pc, #96]	; (8013a04 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 80139a4:	4818      	ldr	r0, [pc, #96]	; (8013a08 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 80139a6:	f002 fd61 	bl	801646c <__assert_func>
 80139aa:	1c5a      	adds	r2, r3, #1
 80139ac:	8622      	strh	r2, [r4, #48]	; 0x30
 80139ae:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80139b0:	4413      	add	r3, r2
 80139b2:	b29b      	uxth	r3, r3
 80139b4:	2b09      	cmp	r3, #9
 80139b6:	bf88      	it	hi
 80139b8:	3b0a      	subhi	r3, #10
 80139ba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80139be:	8358      	strh	r0, [r3, #26]
 80139c0:	e7e3      	b.n	801398a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 80139c2:	2b0a      	cmp	r3, #10
 80139c4:	d01b      	beq.n	80139fe <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 80139c6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80139c8:	3901      	subs	r1, #1
 80139ca:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80139ce:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 80139d0:	8721      	strh	r1, [r4, #56]	; 0x38
 80139d2:	1c51      	adds	r1, r2, #1
 80139d4:	b289      	uxth	r1, r1
 80139d6:	2901      	cmp	r1, #1
 80139d8:	bf8a      	itet	hi
 80139da:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80139de:	86e1      	strhls	r1, [r4, #54]	; 0x36
 80139e0:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 80139e2:	2b09      	cmp	r3, #9
 80139e4:	d8da      	bhi.n	801399c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 80139e6:	1c5a      	adds	r2, r3, #1
 80139e8:	8622      	strh	r2, [r4, #48]	; 0x30
 80139ea:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80139ec:	4413      	add	r3, r2
 80139ee:	b29b      	uxth	r3, r3
 80139f0:	2b09      	cmp	r3, #9
 80139f2:	bf88      	it	hi
 80139f4:	3b0a      	subhi	r3, #10
 80139f6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80139fa:	8358      	strh	r0, [r3, #26]
 80139fc:	e7c2      	b.n	8013984 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80139fe:	bd10      	pop	{r4, pc}
 8013a00:	080196c9 	.word	0x080196c9
 8013a04:	08019a5c 	.word	0x08019a5c
 8013a08:	0801969d 	.word	0x0801969d

08013a0c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8013a0c:	b538      	push	{r3, r4, r5, lr}
 8013a0e:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8013a10:	4604      	mov	r4, r0
 8013a12:	b92a      	cbnz	r2, 8013a20 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8013a14:	4b13      	ldr	r3, [pc, #76]	; (8013a64 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8013a16:	21d5      	movs	r1, #213	; 0xd5
 8013a18:	4a13      	ldr	r2, [pc, #76]	; (8013a68 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8013a1a:	4814      	ldr	r0, [pc, #80]	; (8013a6c <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 8013a1c:	f002 fd26 	bl	801646c <__assert_func>
 8013a20:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8013a22:	3a01      	subs	r2, #1
 8013a24:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8013a28:	8b4d      	ldrh	r5, [r1, #26]
 8013a2a:	8602      	strh	r2, [r0, #48]	; 0x30
 8013a2c:	1c5a      	adds	r2, r3, #1
 8013a2e:	b292      	uxth	r2, r2
 8013a30:	2a09      	cmp	r2, #9
 8013a32:	bf8a      	itet	hi
 8013a34:	3b09      	subhi	r3, #9
 8013a36:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 8013a38:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 8013a3a:	f7ff ffa1 	bl	8013980 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8013a3e:	8b23      	ldrh	r3, [r4, #24]
 8013a40:	2b01      	cmp	r3, #1
 8013a42:	bf9c      	itt	ls
 8013a44:	3301      	addls	r3, #1
 8013a46:	8323      	strhls	r3, [r4, #24]
 8013a48:	8ae3      	ldrh	r3, [r4, #22]
 8013a4a:	b90b      	cbnz	r3, 8013a50 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 8013a4c:	2302      	movs	r3, #2
 8013a4e:	82e3      	strh	r3, [r4, #22]
 8013a50:	8ae3      	ldrh	r3, [r4, #22]
 8013a52:	4628      	mov	r0, r5
 8013a54:	3b01      	subs	r3, #1
 8013a56:	b29b      	uxth	r3, r3
 8013a58:	82e3      	strh	r3, [r4, #22]
 8013a5a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013a5e:	8265      	strh	r5, [r4, #18]
 8013a60:	bd38      	pop	{r3, r4, r5, pc}
 8013a62:	bf00      	nop
 8013a64:	08019694 	.word	0x08019694
 8013a68:	080199b1 	.word	0x080199b1
 8013a6c:	0801969d 	.word	0x0801969d

08013a70 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8013a70:	428a      	cmp	r2, r1
 8013a72:	b538      	push	{r3, r4, r5, lr}
 8013a74:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 8013a76:	d90c      	bls.n	8013a92 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8013a78:	b92c      	cbnz	r4, 8013a86 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 8013a7a:	4b1c      	ldr	r3, [pc, #112]	; (8013aec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8013a7c:	21e1      	movs	r1, #225	; 0xe1
 8013a7e:	4a1c      	ldr	r2, [pc, #112]	; (8013af0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8013a80:	481c      	ldr	r0, [pc, #112]	; (8013af4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8013a82:	f002 fcf3 	bl	801646c <__assert_func>
 8013a86:	3c01      	subs	r4, #1
 8013a88:	4b1b      	ldr	r3, [pc, #108]	; (8013af8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 8013a8a:	4a1c      	ldr	r2, [pc, #112]	; (8013afc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 8013a8c:	21c5      	movs	r1, #197	; 0xc5
 8013a8e:	8604      	strh	r4, [r0, #48]	; 0x30
 8013a90:	e7f6      	b.n	8013a80 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8013a92:	428c      	cmp	r4, r1
 8013a94:	d203      	bcs.n	8013a9e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 8013a96:	4b1a      	ldr	r3, [pc, #104]	; (8013b00 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 8013a98:	21cb      	movs	r1, #203	; 0xcb
 8013a9a:	4a1a      	ldr	r2, [pc, #104]	; (8013b04 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 8013a9c:	e7f0      	b.n	8013a80 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8013a9e:	1a64      	subs	r4, r4, r1
 8013aa0:	250a      	movs	r5, #10
 8013aa2:	8604      	strh	r4, [r0, #48]	; 0x30
 8013aa4:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8013aa6:	4421      	add	r1, r4
 8013aa8:	b289      	uxth	r1, r1
 8013aaa:	2909      	cmp	r1, #9
 8013aac:	bf88      	it	hi
 8013aae:	390a      	subhi	r1, #10
 8013ab0:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8013ab2:	b1ba      	cbz	r2, 8013ae4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8013ab4:	3a01      	subs	r2, #1
 8013ab6:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 8013ab8:	b292      	uxth	r2, r2
 8013aba:	2909      	cmp	r1, #9
 8013abc:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8013ac0:	d903      	bls.n	8013aca <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8013ac2:	4b11      	ldr	r3, [pc, #68]	; (8013b08 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8013ac4:	21e6      	movs	r1, #230	; 0xe6
 8013ac6:	4a11      	ldr	r2, [pc, #68]	; (8013b0c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8013ac8:	e7da      	b.n	8013a80 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8013aca:	3101      	adds	r1, #1
 8013acc:	8601      	strh	r1, [r0, #48]	; 0x30
 8013ace:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8013ad0:	b901      	cbnz	r1, 8013ad4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8013ad2:	85c5      	strh	r5, [r0, #46]	; 0x2e
 8013ad4:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8013ad6:	3901      	subs	r1, #1
 8013ad8:	b289      	uxth	r1, r1
 8013ada:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8013adc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8013ae0:	834c      	strh	r4, [r1, #26]
 8013ae2:	e7e6      	b.n	8013ab2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8013ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013ae8:	f7ff bf4a 	b.w	8013980 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8013aec:	08019694 	.word	0x08019694
 8013af0:	0801978a 	.word	0x0801978a
 8013af4:	0801969d 	.word	0x0801969d
 8013af8:	080196d5 	.word	0x080196d5
 8013afc:	08019834 	.word	0x08019834
 8013b00:	080196e3 	.word	0x080196e3
 8013b04:	08019b0b 	.word	0x08019b0b
 8013b08:	080196ef 	.word	0x080196ef
 8013b0c:	08019702 	.word	0x08019702

08013b10 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8013b10:	3a01      	subs	r2, #1
 8013b12:	b570      	push	{r4, r5, r6, lr}
 8013b14:	b292      	uxth	r2, r2
 8013b16:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8013b1a:	42b2      	cmp	r2, r6
 8013b1c:	d019      	beq.n	8013b52 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 8013b1e:	8b04      	ldrh	r4, [r0, #24]
 8013b20:	f831 5b02 	ldrh.w	r5, [r1], #2
 8013b24:	4294      	cmp	r4, r2
 8013b26:	d805      	bhi.n	8013b34 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8013b28:	4b19      	ldr	r3, [pc, #100]	; (8013b90 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8013b2a:	4a1a      	ldr	r2, [pc, #104]	; (8013b94 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 8013b2c:	21c5      	movs	r1, #197	; 0xc5
 8013b2e:	481a      	ldr	r0, [pc, #104]	; (8013b98 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8013b30:	f002 fc9c 	bl	801646c <__assert_func>
 8013b34:	8ac4      	ldrh	r4, [r0, #22]
 8013b36:	4414      	add	r4, r2
 8013b38:	3a01      	subs	r2, #1
 8013b3a:	b2a4      	uxth	r4, r4
 8013b3c:	b292      	uxth	r2, r2
 8013b3e:	2c01      	cmp	r4, #1
 8013b40:	bf88      	it	hi
 8013b42:	3c02      	subhi	r4, #2
 8013b44:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8013b48:	8a64      	ldrh	r4, [r4, #18]
 8013b4a:	42ac      	cmp	r4, r5
 8013b4c:	d0e5      	beq.n	8013b1a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 8013b4e:	2000      	movs	r0, #0
 8013b50:	bd70      	pop	{r4, r5, r6, pc}
 8013b52:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8013b56:	2400      	movs	r4, #0
 8013b58:	4413      	add	r3, r2
 8013b5a:	b2a2      	uxth	r2, r4
 8013b5c:	429a      	cmp	r2, r3
 8013b5e:	da14      	bge.n	8013b8a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8013b60:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 8013b62:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8013b66:	4296      	cmp	r6, r2
 8013b68:	d802      	bhi.n	8013b70 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 8013b6a:	4b09      	ldr	r3, [pc, #36]	; (8013b90 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8013b6c:	4a0b      	ldr	r2, [pc, #44]	; (8013b9c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 8013b6e:	e7dd      	b.n	8013b2c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8013b70:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 8013b72:	3401      	adds	r4, #1
 8013b74:	4432      	add	r2, r6
 8013b76:	b292      	uxth	r2, r2
 8013b78:	2a09      	cmp	r2, #9
 8013b7a:	bf88      	it	hi
 8013b7c:	3a0a      	subhi	r2, #10
 8013b7e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8013b82:	8b52      	ldrh	r2, [r2, #26]
 8013b84:	42aa      	cmp	r2, r5
 8013b86:	d0e8      	beq.n	8013b5a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 8013b88:	e7e1      	b.n	8013b4e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8013b8a:	2001      	movs	r0, #1
 8013b8c:	e7e0      	b.n	8013b50 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8013b8e:	bf00      	nop
 8013b90:	080196d5 	.word	0x080196d5
 8013b94:	08019b8f 	.word	0x08019b8f
 8013b98:	0801969d 	.word	0x0801969d
 8013b9c:	08019834 	.word	0x08019834

08013ba0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8013ba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ba4:	4605      	mov	r5, r0
 8013ba6:	4616      	mov	r6, r2
 8013ba8:	1c8c      	adds	r4, r1, #2
 8013baa:	8809      	ldrh	r1, [r1, #0]
 8013bac:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8013bb0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8013bb4:	42b3      	cmp	r3, r6
 8013bb6:	d124      	bne.n	8013c02 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8013bb8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8013bbc:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8013bc0:	f001 070f 	and.w	r7, r1, #15
 8013bc4:	4652      	mov	r2, sl
 8013bc6:	f8cd 8000 	str.w	r8, [sp]
 8013bca:	464b      	mov	r3, r9
 8013bcc:	4621      	mov	r1, r4
 8013bce:	4628      	mov	r0, r5
 8013bd0:	f7ff ff9e 	bl	8013b10 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8013bd4:	4683      	mov	fp, r0
 8013bd6:	b168      	cbz	r0, 8013bf4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8013bd8:	eb0a 0109 	add.w	r1, sl, r9
 8013bdc:	463a      	mov	r2, r7
 8013bde:	4628      	mov	r0, r5
 8013be0:	4441      	add	r1, r8
 8013be2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8013be6:	4649      	mov	r1, r9
 8013be8:	f7ff ff42 	bl	8013a70 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8013bec:	4658      	mov	r0, fp
 8013bee:	b003      	add	sp, #12
 8013bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bf4:	eb07 010a 	add.w	r1, r7, sl
 8013bf8:	4449      	add	r1, r9
 8013bfa:	4441      	add	r1, r8
 8013bfc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8013c00:	e7d2      	b.n	8013ba8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8013c02:	f04f 0b00 	mov.w	fp, #0
 8013c06:	e7f1      	b.n	8013bec <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08013c08 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8013c08:	b570      	push	{r4, r5, r6, lr}
 8013c0a:	8810      	ldrh	r0, [r2, #0]
 8013c0c:	4298      	cmp	r0, r3
 8013c0e:	d817      	bhi.n	8013c40 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8013c10:	1e48      	subs	r0, r1, #1
 8013c12:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8013c16:	4298      	cmp	r0, r3
 8013c18:	d312      	bcc.n	8013c40 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8013c1a:	2400      	movs	r4, #0
 8013c1c:	428c      	cmp	r4, r1
 8013c1e:	d20f      	bcs.n	8013c40 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8013c20:	1860      	adds	r0, r4, r1
 8013c22:	1040      	asrs	r0, r0, #1
 8013c24:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8013c28:	0085      	lsls	r5, r0, #2
 8013c2a:	42b3      	cmp	r3, r6
 8013c2c:	d902      	bls.n	8013c34 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8013c2e:	3001      	adds	r0, #1
 8013c30:	b284      	uxth	r4, r0
 8013c32:	e7f3      	b.n	8013c1c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8013c34:	d201      	bcs.n	8013c3a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8013c36:	b281      	uxth	r1, r0
 8013c38:	e7f0      	b.n	8013c1c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8013c3a:	442a      	add	r2, r5
 8013c3c:	8850      	ldrh	r0, [r2, #2]
 8013c3e:	bd70      	pop	{r4, r5, r6, pc}
 8013c40:	2000      	movs	r0, #0
 8013c42:	e7fc      	b.n	8013c3e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08013c44 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8013c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c48:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8013c4a:	4604      	mov	r4, r0
 8013c4c:	260b      	movs	r6, #11
 8013c4e:	886f      	ldrh	r7, [r5, #2]
 8013c50:	087f      	lsrs	r7, r7, #1
 8013c52:	3e01      	subs	r6, #1
 8013c54:	d01b      	beq.n	8013c8e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8013c56:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8013c58:	b92b      	cbnz	r3, 8013c66 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 8013c5a:	4b0e      	ldr	r3, [pc, #56]	; (8013c94 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 8013c5c:	21c0      	movs	r1, #192	; 0xc0
 8013c5e:	4a0e      	ldr	r2, [pc, #56]	; (8013c98 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8013c60:	480e      	ldr	r0, [pc, #56]	; (8013c9c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 8013c62:	f002 fc03 	bl	801646c <__assert_func>
 8013c66:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8013c68:	462a      	mov	r2, r5
 8013c6a:	4639      	mov	r1, r7
 8013c6c:	4620      	mov	r0, r4
 8013c6e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8013c72:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8013c76:	4643      	mov	r3, r8
 8013c78:	f7ff ffc6 	bl	8013c08 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8013c7c:	b138      	cbz	r0, 8013c8e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8013c7e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8013c82:	4642      	mov	r2, r8
 8013c84:	4620      	mov	r0, r4
 8013c86:	f7ff ff8b 	bl	8013ba0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8013c8a:	2800      	cmp	r0, #0
 8013c8c:	d1e1      	bne.n	8013c52 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8013c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c92:	bf00      	nop
 8013c94:	08019694 	.word	0x08019694
 8013c98:	08019906 	.word	0x08019906
 8013c9c:	0801969d 	.word	0x0801969d

08013ca0 <_ZN8touchgfx8ceil28_4El>:
 8013ca0:	f110 030f 	adds.w	r3, r0, #15
 8013ca4:	d401      	bmi.n	8013caa <_ZN8touchgfx8ceil28_4El+0xa>
 8013ca6:	1118      	asrs	r0, r3, #4
 8013ca8:	4770      	bx	lr
 8013caa:	2210      	movs	r2, #16
 8013cac:	f1c0 0001 	rsb	r0, r0, #1
 8013cb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8013cb4:	f010 000f 	ands.w	r0, r0, #15
 8013cb8:	bf18      	it	ne
 8013cba:	2001      	movne	r0, #1
 8013cbc:	1a18      	subs	r0, r3, r0
 8013cbe:	4770      	bx	lr

08013cc0 <_ZN8touchgfx11floorDivModEllRlS0_>:
 8013cc0:	2900      	cmp	r1, #0
 8013cc2:	b538      	push	{r3, r4, r5, lr}
 8013cc4:	dc05      	bgt.n	8013cd2 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 8013cc6:	4b0f      	ldr	r3, [pc, #60]	; (8013d04 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 8013cc8:	21fa      	movs	r1, #250	; 0xfa
 8013cca:	4a0f      	ldr	r2, [pc, #60]	; (8013d08 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 8013ccc:	480f      	ldr	r0, [pc, #60]	; (8013d0c <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 8013cce:	f002 fbcd 	bl	801646c <__assert_func>
 8013cd2:	2800      	cmp	r0, #0
 8013cd4:	db06      	blt.n	8013ce4 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 8013cd6:	fb90 f4f1 	sdiv	r4, r0, r1
 8013cda:	fb01 0114 	mls	r1, r1, r4, r0
 8013cde:	6014      	str	r4, [r2, #0]
 8013ce0:	6019      	str	r1, [r3, #0]
 8013ce2:	bd38      	pop	{r3, r4, r5, pc}
 8013ce4:	4240      	negs	r0, r0
 8013ce6:	fb90 f4f1 	sdiv	r4, r0, r1
 8013cea:	4265      	negs	r5, r4
 8013cec:	fb01 0014 	mls	r0, r1, r4, r0
 8013cf0:	6015      	str	r5, [r2, #0]
 8013cf2:	6018      	str	r0, [r3, #0]
 8013cf4:	2800      	cmp	r0, #0
 8013cf6:	d0f4      	beq.n	8013ce2 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 8013cf8:	6810      	ldr	r0, [r2, #0]
 8013cfa:	3801      	subs	r0, #1
 8013cfc:	6010      	str	r0, [r2, #0]
 8013cfe:	6818      	ldr	r0, [r3, #0]
 8013d00:	1a09      	subs	r1, r1, r0
 8013d02:	e7ed      	b.n	8013ce0 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 8013d04:	08019c60 	.word	0x08019c60
 8013d08:	08019c9f 	.word	0x08019c9f
 8013d0c:	08019c70 	.word	0x08019c70

08013d10 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8013d10:	b570      	push	{r4, r5, r6, lr}
 8013d12:	694a      	ldr	r2, [r1, #20]
 8013d14:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8013d16:	684b      	ldr	r3, [r1, #4]
 8013d18:	1b54      	subs	r4, r2, r5
 8013d1a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8013d1c:	f000 8106 	beq.w	8013f2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8013d20:	1b9b      	subs	r3, r3, r6
 8013d22:	d003      	beq.n	8013d2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8013d24:	4363      	muls	r3, r4
 8013d26:	2210      	movs	r2, #16
 8013d28:	fb93 f3f2 	sdiv	r3, r3, r2
 8013d2c:	680c      	ldr	r4, [r1, #0]
 8013d2e:	698a      	ldr	r2, [r1, #24]
 8013d30:	1b65      	subs	r5, r4, r5
 8013d32:	f000 80fd 	beq.w	8013f30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8013d36:	1b92      	subs	r2, r2, r6
 8013d38:	d003      	beq.n	8013d42 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8013d3a:	436a      	muls	r2, r5
 8013d3c:	2410      	movs	r4, #16
 8013d3e:	fb92 f2f4 	sdiv	r2, r2, r4
 8013d42:	1a9b      	subs	r3, r3, r2
 8013d44:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8013f6c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8013d48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013d4c:	460a      	mov	r2, r1
 8013d4e:	ee07 3a90 	vmov	s15, r3
 8013d52:	f100 040c 	add.w	r4, r0, #12
 8013d56:	4603      	mov	r3, r0
 8013d58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d5c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013d60:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8013d64:	eeb1 6a43 	vneg.f32	s12, s6
 8013d68:	edd2 7a02 	vldr	s15, [r2, #8]
 8013d6c:	3214      	adds	r2, #20
 8013d6e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8013d72:	ece3 6a01 	vstmia	r3!, {s13}
 8013d76:	429c      	cmp	r4, r3
 8013d78:	ed52 7a02 	vldr	s15, [r2, #-8]
 8013d7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013d80:	edc3 7a02 	vstr	s15, [r3, #8]
 8013d84:	ed52 7a01 	vldr	s15, [r2, #-4]
 8013d88:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013d8c:	edc3 7a05 	vstr	s15, [r3, #20]
 8013d90:	d1ea      	bne.n	8013d68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8013d92:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8013d94:	698b      	ldr	r3, [r1, #24]
 8013d96:	edd0 4a02 	vldr	s9, [r0, #8]
 8013d9a:	1a9b      	subs	r3, r3, r2
 8013d9c:	edd0 3a00 	vldr	s7, [r0]
 8013da0:	edd0 6a01 	vldr	s13, [r0, #4]
 8013da4:	ee07 3a90 	vmov	s15, r3
 8013da8:	684b      	ldr	r3, [r1, #4]
 8013daa:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8013dae:	ed90 5a05 	vldr	s10, [r0, #20]
 8013db2:	1a9b      	subs	r3, r3, r2
 8013db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013db8:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8013dbc:	ed90 2a03 	vldr	s4, [r0, #12]
 8013dc0:	ee07 3a10 	vmov	s14, r3
 8013dc4:	edd0 5a04 	vldr	s11, [r0, #16]
 8013dc8:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013dcc:	ed90 1a07 	vldr	s2, [r0, #28]
 8013dd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013dd4:	edd0 2a06 	vldr	s5, [r0, #24]
 8013dd8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8013ddc:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8013de0:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013de4:	ee32 5a45 	vsub.f32	s10, s4, s10
 8013de8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013dec:	ee67 7a83 	vmul.f32	s15, s15, s6
 8013df0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8013df4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8013df6:	694a      	ldr	r2, [r1, #20]
 8013df8:	1b13      	subs	r3, r2, r4
 8013dfa:	ee07 3a10 	vmov	s14, r3
 8013dfe:	680b      	ldr	r3, [r1, #0]
 8013e00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013e04:	1b1b      	subs	r3, r3, r4
 8013e06:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013e0a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8013e0e:	ee07 3a10 	vmov	s14, r3
 8013e12:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013e16:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013e1a:	eee6 4a87 	vfma.f32	s9, s13, s14
 8013e1e:	ee64 4a86 	vmul.f32	s9, s9, s12
 8013e22:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8013e26:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8013e28:	698b      	ldr	r3, [r1, #24]
 8013e2a:	1a9b      	subs	r3, r3, r2
 8013e2c:	ee06 3a90 	vmov	s13, r3
 8013e30:	684b      	ldr	r3, [r1, #4]
 8013e32:	1a9b      	subs	r3, r3, r2
 8013e34:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013e38:	ee07 3a10 	vmov	s14, r3
 8013e3c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8013e40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013e44:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8013e48:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013e4c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8013e50:	ee66 6a83 	vmul.f32	s13, s13, s6
 8013e54:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8013e58:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8013e5a:	694a      	ldr	r2, [r1, #20]
 8013e5c:	1b13      	subs	r3, r2, r4
 8013e5e:	ee07 3a10 	vmov	s14, r3
 8013e62:	680b      	ldr	r3, [r1, #0]
 8013e64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013e68:	1b1b      	subs	r3, r3, r4
 8013e6a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013e6e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8013e72:	ee07 3a10 	vmov	s14, r3
 8013e76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013e7a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013e7e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8013e82:	edd0 5a08 	vldr	s11, [r0, #32]
 8013e86:	ee31 1a65 	vsub.f32	s2, s2, s11
 8013e8a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8013e8e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8013e92:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8013e96:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8013e98:	698b      	ldr	r3, [r1, #24]
 8013e9a:	1a9b      	subs	r3, r3, r2
 8013e9c:	ee07 3a10 	vmov	s14, r3
 8013ea0:	684b      	ldr	r3, [r1, #4]
 8013ea2:	1a9b      	subs	r3, r3, r2
 8013ea4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013ea8:	ee01 3a90 	vmov	s3, r3
 8013eac:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013eb0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8013eb4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8013eb8:	ee61 1a84 	vmul.f32	s3, s3, s8
 8013ebc:	eea1 7a21 	vfma.f32	s14, s2, s3
 8013ec0:	ee27 7a03 	vmul.f32	s14, s14, s6
 8013ec4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8013ec8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8013eca:	694a      	ldr	r2, [r1, #20]
 8013ecc:	1b13      	subs	r3, r2, r4
 8013ece:	ee03 3a10 	vmov	s6, r3
 8013ed2:	680b      	ldr	r3, [r1, #0]
 8013ed4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8013ed8:	1b1b      	subs	r3, r3, r4
 8013eda:	ee23 3a04 	vmul.f32	s6, s6, s8
 8013ede:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8013ee2:	ee03 3a10 	vmov	s6, r3
 8013ee6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8013eea:	ee23 4a04 	vmul.f32	s8, s6, s8
 8013eee:	eee1 5a04 	vfma.f32	s11, s2, s8
 8013ef2:	ee25 6a86 	vmul.f32	s12, s11, s12
 8013ef6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8013efa:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8013efe:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8013f02:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8013f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f0a:	dd13      	ble.n	8013f34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8013f0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013f10:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8013f14:	63c3      	str	r3, [r0, #60]	; 0x3c
 8013f16:	eee3 7a87 	vfma.f32	s15, s7, s14
 8013f1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f22:	dd15      	ble.n	8013f50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8013f24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013f28:	6403      	str	r3, [r0, #64]	; 0x40
 8013f2a:	bd70      	pop	{r4, r5, r6, pc}
 8013f2c:	4623      	mov	r3, r4
 8013f2e:	e6fd      	b.n	8013d2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8013f30:	462a      	mov	r2, r5
 8013f32:	e706      	b.n	8013d42 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8013f34:	d502      	bpl.n	8013f3c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8013f36:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8013f3a:	e7e9      	b.n	8013f10 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8013f3c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8013f40:	eea3 2a85 	vfma.f32	s4, s7, s10
 8013f44:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8013f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f4c:	dade      	bge.n	8013f0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8013f4e:	e7f2      	b.n	8013f36 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8013f50:	d502      	bpl.n	8013f58 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8013f52:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8013f56:	e7e7      	b.n	8013f28 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8013f58:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8013f5c:	eee3 4a86 	vfma.f32	s9, s7, s12
 8013f60:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8013f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f68:	dadc      	bge.n	8013f24 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8013f6a:	e7f2      	b.n	8013f52 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8013f6c:	3d800000 	.word	0x3d800000

08013f70 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8013f70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f74:	f04f 0814 	mov.w	r8, #20
 8013f78:	4604      	mov	r4, r0
 8013f7a:	4617      	mov	r7, r2
 8013f7c:	460d      	mov	r5, r1
 8013f7e:	fb08 f903 	mul.w	r9, r8, r3
 8013f82:	461e      	mov	r6, r3
 8013f84:	eb02 0a09 	add.w	sl, r2, r9
 8013f88:	f8da 0004 	ldr.w	r0, [sl, #4]
 8013f8c:	f7ff fe88 	bl	8013ca0 <_ZN8touchgfx8ceil28_4El>
 8013f90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f92:	6160      	str	r0, [r4, #20]
 8013f94:	fb08 f803 	mul.w	r8, r8, r3
 8013f98:	9001      	str	r0, [sp, #4]
 8013f9a:	eb07 0b08 	add.w	fp, r7, r8
 8013f9e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8013fa2:	f7ff fe7d 	bl	8013ca0 <_ZN8touchgfx8ceil28_4El>
 8013fa6:	9a01      	ldr	r2, [sp, #4]
 8013fa8:	1a80      	subs	r0, r0, r2
 8013faa:	61a0      	str	r0, [r4, #24]
 8013fac:	2800      	cmp	r0, #0
 8013fae:	f000 8088 	beq.w	80140c2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 8013fb2:	f857 3009 	ldr.w	r3, [r7, r9]
 8013fb6:	f857 c008 	ldr.w	ip, [r7, r8]
 8013fba:	f8db 0004 	ldr.w	r0, [fp, #4]
 8013fbe:	ebac 0c03 	sub.w	ip, ip, r3
 8013fc2:	f8da 1004 	ldr.w	r1, [sl, #4]
 8013fc6:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 8013fca:	1a40      	subs	r0, r0, r1
 8013fcc:	fb0b f202 	mul.w	r2, fp, r2
 8013fd0:	ea4f 1800 	mov.w	r8, r0, lsl #4
 8013fd4:	fb0c 2211 	mls	r2, ip, r1, r2
 8013fd8:	4641      	mov	r1, r8
 8013fda:	fb00 2003 	mla	r0, r0, r3, r2
 8013fde:	f104 0310 	add.w	r3, r4, #16
 8013fe2:	4622      	mov	r2, r4
 8013fe4:	3801      	subs	r0, #1
 8013fe6:	4440      	add	r0, r8
 8013fe8:	f7ff fe6a 	bl	8013cc0 <_ZN8touchgfx11floorDivModEllRlS0_>
 8013fec:	f104 0308 	add.w	r3, r4, #8
 8013ff0:	1d22      	adds	r2, r4, #4
 8013ff2:	4641      	mov	r1, r8
 8013ff4:	4658      	mov	r0, fp
 8013ff6:	f7ff fe63 	bl	8013cc0 <_ZN8touchgfx11floorDivModEllRlS0_>
 8013ffa:	f8c4 800c 	str.w	r8, [r4, #12]
 8013ffe:	6962      	ldr	r2, [r4, #20]
 8014000:	f8da 3004 	ldr.w	r3, [sl, #4]
 8014004:	eddf 6a31 	vldr	s13, [pc, #196]	; 80140cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8014008:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801400c:	6822      	ldr	r2, [r4, #0]
 801400e:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8014012:	ee07 3a10 	vmov	s14, r3
 8014016:	f857 3009 	ldr.w	r3, [r7, r9]
 801401a:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801401e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014022:	ee07 3a90 	vmov	s15, r3
 8014026:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801402a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801402e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014032:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014036:	edd3 6a00 	vldr	s13, [r3]
 801403a:	eee6 6a07 	vfma.f32	s13, s12, s14
 801403e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8014042:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014046:	edc4 6a07 	vstr	s13, [r4, #28]
 801404a:	edd4 6a01 	vldr	s13, [r4, #4]
 801404e:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 8014052:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014056:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801405a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801405e:	ed84 6a08 	vstr	s12, [r4, #32]
 8014062:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8014064:	6262      	str	r2, [r4, #36]	; 0x24
 8014066:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801406a:	ed93 6a03 	vldr	s12, [r3, #12]
 801406e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014072:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8014076:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801407a:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801407e:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8014082:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 8014086:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801408a:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801408e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8014090:	6322      	str	r2, [r4, #48]	; 0x30
 8014092:	ed93 6a06 	vldr	s12, [r3, #24]
 8014096:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801409a:	eea5 6a87 	vfma.f32	s12, s11, s14
 801409e:	eeb0 7a46 	vmov.f32	s14, s12
 80140a2:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 80140a6:	eea6 7a27 	vfma.f32	s14, s12, s15
 80140aa:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 80140ae:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 80140b2:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 80140b6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80140ba:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 80140be:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80140c0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80140c2:	4620      	mov	r0, r4
 80140c4:	b003      	add	sp, #12
 80140c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140ca:	bf00      	nop
 80140cc:	3d800000 	.word	0x3d800000

080140d0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80140d0:	4b06      	ldr	r3, [pc, #24]	; (80140ec <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80140d2:	881a      	ldrh	r2, [r3, #0]
 80140d4:	4282      	cmp	r2, r0
 80140d6:	d807      	bhi.n	80140e8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80140d8:	4b05      	ldr	r3, [pc, #20]	; (80140f0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80140da:	881b      	ldrh	r3, [r3, #0]
 80140dc:	4413      	add	r3, r2
 80140de:	4298      	cmp	r0, r3
 80140e0:	bfac      	ite	ge
 80140e2:	2000      	movge	r0, #0
 80140e4:	2001      	movlt	r0, #1
 80140e6:	4770      	bx	lr
 80140e8:	2000      	movs	r0, #0
 80140ea:	4770      	bx	lr
 80140ec:	2000129c 	.word	0x2000129c
 80140f0:	2000129e 	.word	0x2000129e

080140f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80140f4:	b508      	push	{r3, lr}
 80140f6:	4601      	mov	r1, r0
 80140f8:	f7ff ffea 	bl	80140d0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80140fc:	b118      	cbz	r0, 8014106 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80140fe:	4b02      	ldr	r3, [pc, #8]	; (8014108 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8014106:	bd08      	pop	{r3, pc}
 8014108:	20001294 	.word	0x20001294

0801410c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801410c:	b508      	push	{r3, lr}
 801410e:	4b14      	ldr	r3, [pc, #80]	; (8014160 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8014110:	6819      	ldr	r1, [r3, #0]
 8014112:	b931      	cbnz	r1, 8014122 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8014114:	4b13      	ldr	r3, [pc, #76]	; (8014164 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8014116:	f240 3187 	movw	r1, #903	; 0x387
 801411a:	4a13      	ldr	r2, [pc, #76]	; (8014168 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801411c:	4813      	ldr	r0, [pc, #76]	; (801416c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801411e:	f002 f9a5 	bl	801646c <__assert_func>
 8014122:	4a13      	ldr	r2, [pc, #76]	; (8014170 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8014124:	8803      	ldrh	r3, [r0, #0]
 8014126:	8812      	ldrh	r2, [r2, #0]
 8014128:	4293      	cmp	r3, r2
 801412a:	d204      	bcs.n	8014136 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801412c:	2214      	movs	r2, #20
 801412e:	fb02 1303 	mla	r3, r2, r3, r1
 8014132:	8918      	ldrh	r0, [r3, #8]
 8014134:	bd08      	pop	{r3, pc}
 8014136:	490f      	ldr	r1, [pc, #60]	; (8014174 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8014138:	8809      	ldrh	r1, [r1, #0]
 801413a:	4411      	add	r1, r2
 801413c:	428b      	cmp	r3, r1
 801413e:	da06      	bge.n	801414e <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8014140:	1a9b      	subs	r3, r3, r2
 8014142:	4a0d      	ldr	r2, [pc, #52]	; (8014178 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8014144:	210e      	movs	r1, #14
 8014146:	6812      	ldr	r2, [r2, #0]
 8014148:	fb01 2303 	mla	r3, r1, r3, r2
 801414c:	e7f1      	b.n	8014132 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801414e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014152:	4293      	cmp	r3, r2
 8014154:	bf0a      	itet	eq
 8014156:	4b09      	ldreq	r3, [pc, #36]	; (801417c <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8014158:	2000      	movne	r0, #0
 801415a:	8818      	ldrheq	r0, [r3, #0]
 801415c:	e7ea      	b.n	8014134 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801415e:	bf00      	nop
 8014160:	200012a0 	.word	0x200012a0
 8014164:	08019d3d 	.word	0x08019d3d
 8014168:	08019de0 	.word	0x08019de0
 801416c:	08019d18 	.word	0x08019d18
 8014170:	2000129c 	.word	0x2000129c
 8014174:	2000129e 	.word	0x2000129e
 8014178:	20001298 	.word	0x20001298
 801417c:	20001244 	.word	0x20001244

08014180 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8014180:	b508      	push	{r3, lr}
 8014182:	4b14      	ldr	r3, [pc, #80]	; (80141d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8014184:	6819      	ldr	r1, [r3, #0]
 8014186:	b931      	cbnz	r1, 8014196 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8014188:	4b13      	ldr	r3, [pc, #76]	; (80141d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801418a:	f240 319b 	movw	r1, #923	; 0x39b
 801418e:	4a13      	ldr	r2, [pc, #76]	; (80141dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8014190:	4813      	ldr	r0, [pc, #76]	; (80141e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8014192:	f002 f96b 	bl	801646c <__assert_func>
 8014196:	4a13      	ldr	r2, [pc, #76]	; (80141e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8014198:	8803      	ldrh	r3, [r0, #0]
 801419a:	8812      	ldrh	r2, [r2, #0]
 801419c:	4293      	cmp	r3, r2
 801419e:	d204      	bcs.n	80141aa <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 80141a0:	2214      	movs	r2, #20
 80141a2:	fb02 1303 	mla	r3, r2, r3, r1
 80141a6:	8958      	ldrh	r0, [r3, #10]
 80141a8:	bd08      	pop	{r3, pc}
 80141aa:	490f      	ldr	r1, [pc, #60]	; (80141e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 80141ac:	8809      	ldrh	r1, [r1, #0]
 80141ae:	4411      	add	r1, r2
 80141b0:	428b      	cmp	r3, r1
 80141b2:	da06      	bge.n	80141c2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 80141b4:	1a9b      	subs	r3, r3, r2
 80141b6:	4a0d      	ldr	r2, [pc, #52]	; (80141ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 80141b8:	210e      	movs	r1, #14
 80141ba:	6812      	ldr	r2, [r2, #0]
 80141bc:	fb01 2303 	mla	r3, r1, r3, r2
 80141c0:	e7f1      	b.n	80141a6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 80141c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80141c6:	4293      	cmp	r3, r2
 80141c8:	bf0a      	itet	eq
 80141ca:	4b09      	ldreq	r3, [pc, #36]	; (80141f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 80141cc:	2000      	movne	r0, #0
 80141ce:	8818      	ldrheq	r0, [r3, #0]
 80141d0:	e7ea      	b.n	80141a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 80141d2:	bf00      	nop
 80141d4:	200012a0 	.word	0x200012a0
 80141d8:	08019d3d 	.word	0x08019d3d
 80141dc:	08019e0c 	.word	0x08019e0c
 80141e0:	08019d18 	.word	0x08019d18
 80141e4:	2000129c 	.word	0x2000129c
 80141e8:	2000129e 	.word	0x2000129e
 80141ec:	20001298 	.word	0x20001298
 80141f0:	20001246 	.word	0x20001246

080141f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80141f4:	4b23      	ldr	r3, [pc, #140]	; (8014284 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80141f6:	b510      	push	{r4, lr}
 80141f8:	681c      	ldr	r4, [r3, #0]
 80141fa:	b934      	cbnz	r4, 801420a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 80141fc:	4b22      	ldr	r3, [pc, #136]	; (8014288 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80141fe:	f240 31af 	movw	r1, #943	; 0x3af
 8014202:	4a22      	ldr	r2, [pc, #136]	; (801428c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8014204:	4822      	ldr	r0, [pc, #136]	; (8014290 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8014206:	f002 f931 	bl	801646c <__assert_func>
 801420a:	4a22      	ldr	r2, [pc, #136]	; (8014294 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801420c:	880b      	ldrh	r3, [r1, #0]
 801420e:	8812      	ldrh	r2, [r2, #0]
 8014210:	4293      	cmp	r3, r2
 8014212:	d211      	bcs.n	8014238 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8014214:	2214      	movs	r2, #20
 8014216:	fb02 4303 	mla	r3, r2, r3, r4
 801421a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801421e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8014222:	8a1a      	ldrh	r2, [r3, #16]
 8014224:	8a5b      	ldrh	r3, [r3, #18]
 8014226:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801422a:	8004      	strh	r4, [r0, #0]
 801422c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014230:	8041      	strh	r1, [r0, #2]
 8014232:	8082      	strh	r2, [r0, #4]
 8014234:	80c3      	strh	r3, [r0, #6]
 8014236:	e00e      	b.n	8014256 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8014238:	4917      	ldr	r1, [pc, #92]	; (8014298 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801423a:	8809      	ldrh	r1, [r1, #0]
 801423c:	4411      	add	r1, r2
 801423e:	428b      	cmp	r3, r1
 8014240:	da0a      	bge.n	8014258 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8014242:	1a9b      	subs	r3, r3, r2
 8014244:	4a15      	ldr	r2, [pc, #84]	; (801429c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8014246:	210e      	movs	r1, #14
 8014248:	6812      	ldr	r2, [r2, #0]
 801424a:	fb01 2303 	mla	r3, r1, r3, r2
 801424e:	681a      	ldr	r2, [r3, #0]
 8014250:	6002      	str	r2, [r0, #0]
 8014252:	685a      	ldr	r2, [r3, #4]
 8014254:	6042      	str	r2, [r0, #4]
 8014256:	bd10      	pop	{r4, pc}
 8014258:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801425c:	4293      	cmp	r3, r2
 801425e:	d10b      	bne.n	8014278 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8014260:	4b0f      	ldr	r3, [pc, #60]	; (80142a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8014262:	f9b3 1000 	ldrsh.w	r1, [r3]
 8014266:	4b0f      	ldr	r3, [pc, #60]	; (80142a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8014268:	8081      	strh	r1, [r0, #4]
 801426a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801426e:	2300      	movs	r3, #0
 8014270:	80c2      	strh	r2, [r0, #6]
 8014272:	8003      	strh	r3, [r0, #0]
 8014274:	8043      	strh	r3, [r0, #2]
 8014276:	e7ee      	b.n	8014256 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8014278:	2300      	movs	r3, #0
 801427a:	8003      	strh	r3, [r0, #0]
 801427c:	8043      	strh	r3, [r0, #2]
 801427e:	8083      	strh	r3, [r0, #4]
 8014280:	e7d8      	b.n	8014234 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8014282:	bf00      	nop
 8014284:	200012a0 	.word	0x200012a0
 8014288:	08019d3d 	.word	0x08019d3d
 801428c:	08019d79 	.word	0x08019d79
 8014290:	08019d18 	.word	0x08019d18
 8014294:	2000129c 	.word	0x2000129c
 8014298:	2000129e 	.word	0x2000129e
 801429c:	20001298 	.word	0x20001298
 80142a0:	20001244 	.word	0x20001244
 80142a4:	20001246 	.word	0x20001246

080142a8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 80142a8:	4b18      	ldr	r3, [pc, #96]	; (801430c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	b34b      	cbz	r3, 8014302 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80142ae:	4a18      	ldr	r2, [pc, #96]	; (8014310 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80142b0:	8800      	ldrh	r0, [r0, #0]
 80142b2:	8812      	ldrh	r2, [r2, #0]
 80142b4:	4290      	cmp	r0, r2
 80142b6:	d211      	bcs.n	80142dc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 80142b8:	2214      	movs	r2, #20
 80142ba:	fb02 3300 	mla	r3, r2, r0, r3
 80142be:	8a1a      	ldrh	r2, [r3, #16]
 80142c0:	8919      	ldrh	r1, [r3, #8]
 80142c2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80142c6:	428a      	cmp	r2, r1
 80142c8:	db1d      	blt.n	8014306 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 80142ca:	8a58      	ldrh	r0, [r3, #18]
 80142cc:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80142d0:	895b      	ldrh	r3, [r3, #10]
 80142d2:	4298      	cmp	r0, r3
 80142d4:	bfac      	ite	ge
 80142d6:	2000      	movge	r0, #0
 80142d8:	2001      	movlt	r0, #1
 80142da:	4770      	bx	lr
 80142dc:	4b0d      	ldr	r3, [pc, #52]	; (8014314 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80142de:	881b      	ldrh	r3, [r3, #0]
 80142e0:	4413      	add	r3, r2
 80142e2:	4298      	cmp	r0, r3
 80142e4:	da0d      	bge.n	8014302 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80142e6:	4b0c      	ldr	r3, [pc, #48]	; (8014318 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 80142e8:	1a80      	subs	r0, r0, r2
 80142ea:	220e      	movs	r2, #14
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	fb02 3300 	mla	r3, r2, r0, r3
 80142f2:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80142f6:	891a      	ldrh	r2, [r3, #8]
 80142f8:	4291      	cmp	r1, r2
 80142fa:	db04      	blt.n	8014306 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 80142fc:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8014300:	e7e6      	b.n	80142d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8014302:	2000      	movs	r0, #0
 8014304:	4770      	bx	lr
 8014306:	2001      	movs	r0, #1
 8014308:	4770      	bx	lr
 801430a:	bf00      	nop
 801430c:	200012a0 	.word	0x200012a0
 8014310:	2000129c 	.word	0x2000129c
 8014314:	2000129e 	.word	0x2000129e
 8014318:	20001298 	.word	0x20001298

0801431c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801431c:	b508      	push	{r3, lr}
 801431e:	4b12      	ldr	r3, [pc, #72]	; (8014368 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8014320:	6819      	ldr	r1, [r3, #0]
 8014322:	b931      	cbnz	r1, 8014332 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8014324:	4b11      	ldr	r3, [pc, #68]	; (801436c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8014326:	f240 31d3 	movw	r1, #979	; 0x3d3
 801432a:	4a11      	ldr	r2, [pc, #68]	; (8014370 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801432c:	4811      	ldr	r0, [pc, #68]	; (8014374 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801432e:	f002 f89d 	bl	801646c <__assert_func>
 8014332:	8803      	ldrh	r3, [r0, #0]
 8014334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014338:	4293      	cmp	r3, r2
 801433a:	d012      	beq.n	8014362 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801433c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014340:	4293      	cmp	r3, r2
 8014342:	d103      	bne.n	801434c <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8014344:	4b0c      	ldr	r3, [pc, #48]	; (8014378 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801434a:	bd08      	pop	{r3, pc}
 801434c:	4a0b      	ldr	r2, [pc, #44]	; (801437c <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801434e:	6812      	ldr	r2, [r2, #0]
 8014350:	b11a      	cbz	r2, 801435a <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8014352:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014356:	2800      	cmp	r0, #0
 8014358:	d1f7      	bne.n	801434a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801435a:	2214      	movs	r2, #20
 801435c:	4353      	muls	r3, r2
 801435e:	58c8      	ldr	r0, [r1, r3]
 8014360:	e7f3      	b.n	801434a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8014362:	2000      	movs	r0, #0
 8014364:	e7f1      	b.n	801434a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8014366:	bf00      	nop
 8014368:	200012a0 	.word	0x200012a0
 801436c:	08019d3d 	.word	0x08019d3d
 8014370:	08019daf 	.word	0x08019daf
 8014374:	08019d18 	.word	0x08019d18
 8014378:	20001250 	.word	0x20001250
 801437c:	20001294 	.word	0x20001294

08014380 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8014380:	8802      	ldrh	r2, [r0, #0]
 8014382:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8014386:	429a      	cmp	r2, r3
 8014388:	d845      	bhi.n	8014416 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801438a:	4b24      	ldr	r3, [pc, #144]	; (801441c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801438c:	8818      	ldrh	r0, [r3, #0]
 801438e:	4282      	cmp	r2, r0
 8014390:	d221      	bcs.n	80143d6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 8014392:	4b23      	ldr	r3, [pc, #140]	; (8014420 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8014394:	6819      	ldr	r1, [r3, #0]
 8014396:	2314      	movs	r3, #20
 8014398:	fb03 1302 	mla	r3, r3, r2, r1
 801439c:	6858      	ldr	r0, [r3, #4]
 801439e:	2800      	cmp	r0, #0
 80143a0:	d03a      	beq.n	8014418 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 80143a2:	4920      	ldr	r1, [pc, #128]	; (8014424 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80143a4:	6809      	ldr	r1, [r1, #0]
 80143a6:	2900      	cmp	r1, #0
 80143a8:	d036      	beq.n	8014418 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 80143aa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80143ae:	2900      	cmp	r1, #0
 80143b0:	d032      	beq.n	8014418 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 80143b2:	891a      	ldrh	r2, [r3, #8]
 80143b4:	8958      	ldrh	r0, [r3, #10]
 80143b6:	4350      	muls	r0, r2
 80143b8:	7c5a      	ldrb	r2, [r3, #17]
 80143ba:	7cdb      	ldrb	r3, [r3, #19]
 80143bc:	0952      	lsrs	r2, r2, #5
 80143be:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80143c2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80143c6:	2b0b      	cmp	r3, #11
 80143c8:	bf18      	it	ne
 80143ca:	0040      	lslne	r0, r0, #1
 80143cc:	3003      	adds	r0, #3
 80143ce:	f020 0003 	bic.w	r0, r0, #3
 80143d2:	4408      	add	r0, r1
 80143d4:	4770      	bx	lr
 80143d6:	4b14      	ldr	r3, [pc, #80]	; (8014428 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 80143d8:	881b      	ldrh	r3, [r3, #0]
 80143da:	4403      	add	r3, r0
 80143dc:	429a      	cmp	r2, r3
 80143de:	da1a      	bge.n	8014416 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 80143e0:	4b12      	ldr	r3, [pc, #72]	; (801442c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 80143e2:	1a10      	subs	r0, r2, r0
 80143e4:	210e      	movs	r1, #14
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	fb01 3000 	mla	r0, r1, r0, r3
 80143ec:	7b03      	ldrb	r3, [r0, #12]
 80143ee:	f003 031f 	and.w	r3, r3, #31
 80143f2:	2b0b      	cmp	r3, #11
 80143f4:	d10b      	bne.n	801440e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80143f6:	8903      	ldrh	r3, [r0, #8]
 80143f8:	8940      	ldrh	r0, [r0, #10]
 80143fa:	4358      	muls	r0, r3
 80143fc:	4b09      	ldr	r3, [pc, #36]	; (8014424 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80143fe:	3003      	adds	r0, #3
 8014400:	6819      	ldr	r1, [r3, #0]
 8014402:	f020 0303 	bic.w	r3, r0, #3
 8014406:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801440a:	4418      	add	r0, r3
 801440c:	4770      	bx	lr
 801440e:	2b0d      	cmp	r3, #13
 8014410:	d101      	bne.n	8014416 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8014412:	300d      	adds	r0, #13
 8014414:	4770      	bx	lr
 8014416:	2000      	movs	r0, #0
 8014418:	4770      	bx	lr
 801441a:	bf00      	nop
 801441c:	2000129c 	.word	0x2000129c
 8014420:	200012a0 	.word	0x200012a0
 8014424:	20001294 	.word	0x20001294
 8014428:	2000129e 	.word	0x2000129e
 801442c:	20001298 	.word	0x20001298

08014430 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8014430:	4b19      	ldr	r3, [pc, #100]	; (8014498 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8014432:	6819      	ldr	r1, [r3, #0]
 8014434:	8803      	ldrh	r3, [r0, #0]
 8014436:	b1e9      	cbz	r1, 8014474 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8014438:	4a18      	ldr	r2, [pc, #96]	; (801449c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801443a:	8812      	ldrh	r2, [r2, #0]
 801443c:	429a      	cmp	r2, r3
 801443e:	d90a      	bls.n	8014456 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8014440:	2214      	movs	r2, #20
 8014442:	fb02 1303 	mla	r3, r2, r3, r1
 8014446:	7c58      	ldrb	r0, [r3, #17]
 8014448:	0942      	lsrs	r2, r0, #5
 801444a:	7cd8      	ldrb	r0, [r3, #19]
 801444c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8014450:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8014454:	4770      	bx	lr
 8014456:	4912      	ldr	r1, [pc, #72]	; (80144a0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8014458:	8809      	ldrh	r1, [r1, #0]
 801445a:	4411      	add	r1, r2
 801445c:	428b      	cmp	r3, r1
 801445e:	da09      	bge.n	8014474 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8014460:	1a9b      	subs	r3, r3, r2
 8014462:	4a10      	ldr	r2, [pc, #64]	; (80144a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 8014464:	210e      	movs	r1, #14
 8014466:	6812      	ldr	r2, [r2, #0]
 8014468:	fb01 2303 	mla	r3, r1, r3, r2
 801446c:	7b18      	ldrb	r0, [r3, #12]
 801446e:	f000 001f 	and.w	r0, r0, #31
 8014472:	4770      	bx	lr
 8014474:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014478:	4293      	cmp	r3, r2
 801447a:	d10a      	bne.n	8014492 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801447c:	4b0a      	ldr	r3, [pc, #40]	; (80144a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8014484:	b10a      	cbz	r2, 801448a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8014486:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014488:	b900      	cbnz	r0, 801448c <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801448a:	6898      	ldr	r0, [r3, #8]
 801448c:	6803      	ldr	r3, [r0, #0]
 801448e:	6a1b      	ldr	r3, [r3, #32]
 8014490:	4718      	bx	r3
 8014492:	2000      	movs	r0, #0
 8014494:	4770      	bx	lr
 8014496:	bf00      	nop
 8014498:	200012a0 	.word	0x200012a0
 801449c:	2000129c 	.word	0x2000129c
 80144a0:	2000129e 	.word	0x2000129e
 80144a4:	20001298 	.word	0x20001298
 80144a8:	20001250 	.word	0x20001250

080144ac <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 80144ac:	2010      	movs	r0, #16
 80144ae:	4770      	bx	lr

080144b0 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 80144b0:	2000      	movs	r0, #0
 80144b2:	4770      	bx	lr

080144b4 <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 80144b4:	00d2      	lsls	r2, r2, #3
 80144b6:	0209      	lsls	r1, r1, #8
 80144b8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80144bc:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 80144c0:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 80144c4:	4310      	orrs	r0, r2
 80144c6:	4770      	bx	lr

080144c8 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 80144c8:	0a09      	lsrs	r1, r1, #8
 80144ca:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 80144ce:	4770      	bx	lr

080144d0 <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 80144d0:	08c9      	lsrs	r1, r1, #3
 80144d2:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 80144d6:	4770      	bx	lr

080144d8 <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 80144d8:	00c9      	lsls	r1, r1, #3
 80144da:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 80144de:	4770      	bx	lr

080144e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80144e0:	2bff      	cmp	r3, #255	; 0xff
 80144e2:	d050      	beq.n	8014586 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 80144e4:	2a0b      	cmp	r2, #11
 80144e6:	d04a      	beq.n	801457e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80144e8:	d80e      	bhi.n	8014508 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 80144ea:	2a03      	cmp	r2, #3
 80144ec:	d03f      	beq.n	801456e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 80144ee:	d804      	bhi.n	80144fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80144f0:	2a01      	cmp	r2, #1
 80144f2:	d03e      	beq.n	8014572 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80144f4:	d93f      	bls.n	8014576 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80144f6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80144f8:	4770      	bx	lr
 80144fa:	2a09      	cmp	r2, #9
 80144fc:	d03f      	beq.n	801457e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80144fe:	d83c      	bhi.n	801457a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8014500:	2a08      	cmp	r2, #8
 8014502:	d03a      	beq.n	801457a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8014504:	2000      	movs	r0, #0
 8014506:	4770      	bx	lr
 8014508:	2a2f      	cmp	r2, #47	; 0x2f
 801450a:	d024      	beq.n	8014556 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801450c:	d80d      	bhi.n	801452a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801450e:	2a2d      	cmp	r2, #45	; 0x2d
 8014510:	d014      	beq.n	801453c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8014512:	d826      	bhi.n	8014562 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8014514:	2a2c      	cmp	r2, #44	; 0x2c
 8014516:	d1f5      	bne.n	8014504 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014518:	684b      	ldr	r3, [r1, #4]
 801451a:	781b      	ldrb	r3, [r3, #0]
 801451c:	2b01      	cmp	r3, #1
 801451e:	d018      	beq.n	8014552 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8014520:	d323      	bcc.n	801456a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8014522:	2b02      	cmp	r3, #2
 8014524:	d1ee      	bne.n	8014504 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014526:	6880      	ldr	r0, [r0, #8]
 8014528:	4770      	bx	lr
 801452a:	2a31      	cmp	r2, #49	; 0x31
 801452c:	d004      	beq.n	8014538 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801452e:	d328      	bcc.n	8014582 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8014530:	2a32      	cmp	r2, #50	; 0x32
 8014532:	d026      	beq.n	8014582 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8014534:	2a33      	cmp	r2, #51	; 0x33
 8014536:	d1e5      	bne.n	8014504 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014538:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801453a:	4770      	bx	lr
 801453c:	684b      	ldr	r3, [r1, #4]
 801453e:	781b      	ldrb	r3, [r3, #0]
 8014540:	2b01      	cmp	r3, #1
 8014542:	d004      	beq.n	801454e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014544:	d30b      	bcc.n	801455e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014546:	2b02      	cmp	r3, #2
 8014548:	d1dc      	bne.n	8014504 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801454a:	6900      	ldr	r0, [r0, #16]
 801454c:	4770      	bx	lr
 801454e:	6a00      	ldr	r0, [r0, #32]
 8014550:	4770      	bx	lr
 8014552:	6980      	ldr	r0, [r0, #24]
 8014554:	4770      	bx	lr
 8014556:	684b      	ldr	r3, [r1, #4]
 8014558:	781b      	ldrb	r3, [r3, #0]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d1d2      	bne.n	8014504 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801455e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8014560:	4770      	bx	lr
 8014562:	684b      	ldr	r3, [r1, #4]
 8014564:	781b      	ldrb	r3, [r3, #0]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d1cc      	bne.n	8014504 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801456a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801456c:	4770      	bx	lr
 801456e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8014570:	4770      	bx	lr
 8014572:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8014574:	4770      	bx	lr
 8014576:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8014578:	4770      	bx	lr
 801457a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801457c:	4770      	bx	lr
 801457e:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8014580:	4770      	bx	lr
 8014582:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8014584:	4770      	bx	lr
 8014586:	2a0b      	cmp	r2, #11
 8014588:	d049      	beq.n	801461e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801458a:	d80e      	bhi.n	80145aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801458c:	2a03      	cmp	r2, #3
 801458e:	d040      	beq.n	8014612 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8014590:	d804      	bhi.n	801459c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8014592:	2a01      	cmp	r2, #1
 8014594:	d03f      	beq.n	8014616 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8014596:	d940      	bls.n	801461a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8014598:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801459a:	4770      	bx	lr
 801459c:	2a09      	cmp	r2, #9
 801459e:	d03e      	beq.n	801461e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80145a0:	d801      	bhi.n	80145a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 80145a2:	2a08      	cmp	r2, #8
 80145a4:	d1ae      	bne.n	8014504 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80145a6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80145a8:	4770      	bx	lr
 80145aa:	2a2f      	cmp	r2, #47	; 0x2f
 80145ac:	d024      	beq.n	80145f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 80145ae:	d80d      	bhi.n	80145cc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 80145b0:	2a2d      	cmp	r2, #45	; 0x2d
 80145b2:	d014      	beq.n	80145de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 80145b4:	d826      	bhi.n	8014604 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 80145b6:	2a2c      	cmp	r2, #44	; 0x2c
 80145b8:	d1a4      	bne.n	8014504 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80145ba:	684b      	ldr	r3, [r1, #4]
 80145bc:	781b      	ldrb	r3, [r3, #0]
 80145be:	2b01      	cmp	r3, #1
 80145c0:	d018      	beq.n	80145f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 80145c2:	d324      	bcc.n	801460e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 80145c4:	2b02      	cmp	r3, #2
 80145c6:	d19d      	bne.n	8014504 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80145c8:	68c0      	ldr	r0, [r0, #12]
 80145ca:	4770      	bx	lr
 80145cc:	2a31      	cmp	r2, #49	; 0x31
 80145ce:	d004      	beq.n	80145da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 80145d0:	d327      	bcc.n	8014622 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 80145d2:	2a32      	cmp	r2, #50	; 0x32
 80145d4:	d025      	beq.n	8014622 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 80145d6:	2a33      	cmp	r2, #51	; 0x33
 80145d8:	d194      	bne.n	8014504 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80145da:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80145dc:	4770      	bx	lr
 80145de:	684b      	ldr	r3, [r1, #4]
 80145e0:	781b      	ldrb	r3, [r3, #0]
 80145e2:	2b01      	cmp	r3, #1
 80145e4:	d004      	beq.n	80145f0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 80145e6:	d30b      	bcc.n	8014600 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 80145e8:	2b02      	cmp	r3, #2
 80145ea:	d18b      	bne.n	8014504 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80145ec:	6940      	ldr	r0, [r0, #20]
 80145ee:	4770      	bx	lr
 80145f0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80145f2:	4770      	bx	lr
 80145f4:	69c0      	ldr	r0, [r0, #28]
 80145f6:	4770      	bx	lr
 80145f8:	684b      	ldr	r3, [r1, #4]
 80145fa:	781b      	ldrb	r3, [r3, #0]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d181      	bne.n	8014504 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014600:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8014602:	4770      	bx	lr
 8014604:	684b      	ldr	r3, [r1, #4]
 8014606:	781b      	ldrb	r3, [r3, #0]
 8014608:	2b00      	cmp	r3, #0
 801460a:	f47f af7b 	bne.w	8014504 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801460e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8014610:	4770      	bx	lr
 8014612:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8014614:	4770      	bx	lr
 8014616:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8014618:	4770      	bx	lr
 801461a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801461c:	4770      	bx	lr
 801461e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8014620:	4770      	bx	lr
 8014622:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8014624:	4770      	bx	lr
	...

08014628 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8014628:	b508      	push	{r3, lr}
 801462a:	4b06      	ldr	r3, [pc, #24]	; (8014644 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 801462c:	8818      	ldrh	r0, [r3, #0]
 801462e:	b928      	cbnz	r0, 801463c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8014630:	4b05      	ldr	r3, [pc, #20]	; (8014648 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 8014632:	2154      	movs	r1, #84	; 0x54
 8014634:	4a05      	ldr	r2, [pc, #20]	; (801464c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8014636:	4806      	ldr	r0, [pc, #24]	; (8014650 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8014638:	f001 ff18 	bl	801646c <__assert_func>
 801463c:	0040      	lsls	r0, r0, #1
 801463e:	b280      	uxth	r0, r0
 8014640:	bd08      	pop	{r3, pc}
 8014642:	bf00      	nop
 8014644:	2000124a 	.word	0x2000124a
 8014648:	0801a1f5 	.word	0x0801a1f5
 801464c:	0801a4e1 	.word	0x0801a4e1
 8014650:	0801a237 	.word	0x0801a237

08014654 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8014654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014658:	b08b      	sub	sp, #44	; 0x2c
 801465a:	460f      	mov	r7, r1
 801465c:	4616      	mov	r6, r2
 801465e:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8014662:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8014666:	f1bb 0f00 	cmp.w	fp, #0
 801466a:	d046      	beq.n	80146fa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801466c:	6810      	ldr	r0, [r2, #0]
 801466e:	ad06      	add	r5, sp, #24
 8014670:	6851      	ldr	r1, [r2, #4]
 8014672:	c503      	stmia	r5!, {r0, r1}
 8014674:	6818      	ldr	r0, [r3, #0]
 8014676:	ad08      	add	r5, sp, #32
 8014678:	6859      	ldr	r1, [r3, #4]
 801467a:	c503      	stmia	r5!, {r0, r1}
 801467c:	a806      	add	r0, sp, #24
 801467e:	f7fe fc0b 	bl	8012e98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014682:	4631      	mov	r1, r6
 8014684:	a808      	add	r0, sp, #32
 8014686:	f7fe fbef 	bl	8012e68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801468a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801468e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8014692:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8014696:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801469a:	fb16 2103 	smlabb	r1, r6, r3, r2
 801469e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80146a2:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 80146a6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80146aa:	4f5d      	ldr	r7, [pc, #372]	; (8014820 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 80146ac:	440a      	add	r2, r1
 80146ae:	6838      	ldr	r0, [r7, #0]
 80146b0:	46b9      	mov	r9, r7
 80146b2:	f8ad 2020 	strh.w	r2, [sp, #32]
 80146b6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80146ba:	4413      	add	r3, r2
 80146bc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80146c0:	6803      	ldr	r3, [r0, #0]
 80146c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146c4:	4798      	blx	r3
 80146c6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80146ca:	d019      	beq.n	8014700 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80146cc:	f010 0f04 	tst.w	r0, #4
 80146d0:	d01a      	beq.n	8014708 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 80146d2:	f8d9 0000 	ldr.w	r0, [r9]
 80146d6:	b2ad      	uxth	r5, r5
 80146d8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80146dc:	6801      	ldr	r1, [r0, #0]
 80146de:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80146e2:	9501      	str	r5, [sp, #4]
 80146e4:	e9cd b403 	strd	fp, r4, [sp, #12]
 80146e8:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80146ec:	9402      	str	r4, [sp, #8]
 80146ee:	fa1f f488 	uxth.w	r4, r8
 80146f2:	9400      	str	r4, [sp, #0]
 80146f4:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 80146f6:	4631      	mov	r1, r6
 80146f8:	47a0      	blx	r4
 80146fa:	b00b      	add	sp, #44	; 0x2c
 80146fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014700:	b914      	cbnz	r4, 8014708 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8014702:	f010 0f01 	tst.w	r0, #1
 8014706:	e7e3      	b.n	80146d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 8014708:	f8d9 0000 	ldr.w	r0, [r9]
 801470c:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8014710:	6803      	ldr	r3, [r0, #0]
 8014712:	6a1b      	ldr	r3, [r3, #32]
 8014714:	4798      	blx	r3
 8014716:	4b43      	ldr	r3, [pc, #268]	; (8014824 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d0>)
 8014718:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801471c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8014720:	881a      	ldrh	r2, [r3, #0]
 8014722:	469a      	mov	sl, r3
 8014724:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8014728:	fb05 f502 	mul.w	r5, r5, r2
 801472c:	fb02 1404 	mla	r4, r2, r4, r1
 8014730:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8014734:	d058      	beq.n	80147e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x194>
 8014736:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801473a:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801473e:	fa1f f28b 	uxth.w	r2, fp
 8014742:	469e      	mov	lr, r3
 8014744:	fa1f f989 	uxth.w	r9, r9
 8014748:	42ac      	cmp	r4, r5
 801474a:	d263      	bcs.n	8014814 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 801474c:	eb04 0a07 	add.w	sl, r4, r7
 8014750:	4554      	cmp	r4, sl
 8014752:	d23c      	bcs.n	80147ce <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17a>
 8014754:	8821      	ldrh	r1, [r4, #0]
 8014756:	f836 3b02 	ldrh.w	r3, [r6], #2
 801475a:	1208      	asrs	r0, r1, #8
 801475c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8014760:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8014764:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8014768:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801476c:	00c9      	lsls	r1, r1, #3
 801476e:	fb10 f009 	smulbb	r0, r0, r9
 8014772:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8014776:	b2c9      	uxtb	r1, r1
 8014778:	fb0c 0c02 	mla	ip, ip, r2, r0
 801477c:	10d8      	asrs	r0, r3, #3
 801477e:	fb11 f109 	smulbb	r1, r1, r9
 8014782:	00db      	lsls	r3, r3, #3
 8014784:	fa1f fc8c 	uxth.w	ip, ip
 8014788:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801478c:	fb1b fb09 	smulbb	fp, fp, r9
 8014790:	b2db      	uxtb	r3, r3
 8014792:	fb03 1302 	mla	r3, r3, r2, r1
 8014796:	f10c 0101 	add.w	r1, ip, #1
 801479a:	fb00 b002 	mla	r0, r0, r2, fp
 801479e:	b29b      	uxth	r3, r3
 80147a0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80147a4:	1c59      	adds	r1, r3, #1
 80147a6:	b280      	uxth	r0, r0
 80147a8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80147ac:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80147b0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80147b4:	ea4c 0c03 	orr.w	ip, ip, r3
 80147b8:	1c43      	adds	r3, r0, #1
 80147ba:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80147be:	0940      	lsrs	r0, r0, #5
 80147c0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80147c4:	ea4c 0c00 	orr.w	ip, ip, r0
 80147c8:	f824 cb02 	strh.w	ip, [r4], #2
 80147cc:	e7c0      	b.n	8014750 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 80147ce:	f8be 3000 	ldrh.w	r3, [lr]
 80147d2:	eba3 0308 	sub.w	r3, r3, r8
 80147d6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80147da:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80147de:	eba3 0308 	sub.w	r3, r3, r8
 80147e2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80147e6:	e7af      	b.n	8014748 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 80147e8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80147ec:	f8d9 0000 	ldr.w	r0, [r9]
 80147f0:	42ac      	cmp	r4, r5
 80147f2:	6803      	ldr	r3, [r0, #0]
 80147f4:	d20e      	bcs.n	8014814 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 80147f6:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
 80147fa:	4632      	mov	r2, r6
 80147fc:	463b      	mov	r3, r7
 80147fe:	4621      	mov	r1, r4
 8014800:	47c0      	blx	r8
 8014802:	f8ba 3000 	ldrh.w	r3, [sl]
 8014806:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801480a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801480e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8014812:	e7eb      	b.n	80147ec <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 8014814:	4b02      	ldr	r3, [pc, #8]	; (8014820 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 8014816:	6818      	ldr	r0, [r3, #0]
 8014818:	6803      	ldr	r3, [r0, #0]
 801481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801481c:	4798      	blx	r3
 801481e:	e76c      	b.n	80146fa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8014820:	20001250 	.word	0x20001250
 8014824:	2000124a 	.word	0x2000124a

08014828 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8014828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801482c:	460d      	mov	r5, r1
 801482e:	b087      	sub	sp, #28
 8014830:	4614      	mov	r4, r2
 8014832:	4698      	mov	r8, r3
 8014834:	b333      	cbz	r3, 8014884 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8014836:	4608      	mov	r0, r1
 8014838:	f7fc fda9 	bl	801138e <_ZNK8touchgfx4Rect7isEmptyEv>
 801483c:	bb10      	cbnz	r0, 8014884 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801483e:	6828      	ldr	r0, [r5, #0]
 8014840:	ab04      	add	r3, sp, #16
 8014842:	6869      	ldr	r1, [r5, #4]
 8014844:	4e72      	ldr	r6, [pc, #456]	; (8014a10 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1e8>)
 8014846:	c303      	stmia	r3!, {r0, r1}
 8014848:	a804      	add	r0, sp, #16
 801484a:	f7fe fb25 	bl	8012e98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801484e:	6830      	ldr	r0, [r6, #0]
 8014850:	6803      	ldr	r3, [r0, #0]
 8014852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014854:	4798      	blx	r3
 8014856:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801485a:	d016      	beq.n	801488a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801485c:	f010 0f08 	tst.w	r0, #8
 8014860:	d016      	beq.n	8014890 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 8014862:	f8bd 5016 	ldrh.w	r5, [sp, #22]
 8014866:	6830      	ldr	r0, [r6, #0]
 8014868:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801486c:	6801      	ldr	r1, [r0, #0]
 801486e:	9501      	str	r5, [sp, #4]
 8014870:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8014874:	f8cd 8008 	str.w	r8, [sp, #8]
 8014878:	9500      	str	r5, [sp, #0]
 801487a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801487e:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 8014880:	4621      	mov	r1, r4
 8014882:	47a8      	blx	r5
 8014884:	b007      	add	sp, #28
 8014886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801488a:	f010 0f02 	tst.w	r0, #2
 801488e:	e7e7      	b.n	8014860 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x38>
 8014890:	6830      	ldr	r0, [r6, #0]
 8014892:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8014896:	6803      	ldr	r3, [r0, #0]
 8014898:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801489c:	6a1b      	ldr	r3, [r3, #32]
 801489e:	4798      	blx	r3
 80148a0:	495c      	ldr	r1, [pc, #368]	; (8014a14 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ec>)
 80148a2:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 80148a6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80148aa:	880b      	ldrh	r3, [r1, #0]
 80148ac:	468e      	mov	lr, r1
 80148ae:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 80148b2:	fb03 c202 	mla	r2, r3, r2, ip
 80148b6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80148ba:	fb07 f203 	mul.w	r2, r7, r3
 80148be:	d053      	beq.n	8014968 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x140>
 80148c0:	fa1f f388 	uxth.w	r3, r8
 80148c4:	f1c8 07ff 	rsb	r7, r8, #255	; 0xff
 80148c8:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 80148cc:	ea4f 2814 	mov.w	r8, r4, lsr #8
 80148d0:	00e4      	lsls	r4, r4, #3
 80148d2:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80148d6:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 80148da:	eb00 0142 	add.w	r1, r0, r2, lsl #1
 80148de:	b2e4      	uxtb	r4, r4
 80148e0:	fb09 f903 	mul.w	r9, r9, r3
 80148e4:	fb08 f803 	mul.w	r8, r8, r3
 80148e8:	006d      	lsls	r5, r5, #1
 80148ea:	4363      	muls	r3, r4
 80148ec:	b2bc      	uxth	r4, r7
 80148ee:	4288      	cmp	r0, r1
 80148f0:	f080 8088 	bcs.w	8014a04 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 80148f4:	eb00 0a05 	add.w	sl, r0, r5
 80148f8:	4550      	cmp	r0, sl
 80148fa:	d22f      	bcs.n	801495c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 80148fc:	8802      	ldrh	r2, [r0, #0]
 80148fe:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8014902:	10d7      	asrs	r7, r2, #3
 8014904:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8014908:	00d2      	lsls	r2, r2, #3
 801490a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801490e:	fb1c fc04 	smulbb	ip, ip, r4
 8014912:	b2d2      	uxtb	r2, r2
 8014914:	fb17 f704 	smulbb	r7, r7, r4
 8014918:	fb12 f204 	smulbb	r2, r2, r4
 801491c:	44c4      	add	ip, r8
 801491e:	444f      	add	r7, r9
 8014920:	fa1f fc8c 	uxth.w	ip, ip
 8014924:	441a      	add	r2, r3
 8014926:	b2bf      	uxth	r7, r7
 8014928:	b292      	uxth	r2, r2
 801492a:	f10c 0b01 	add.w	fp, ip, #1
 801492e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8014932:	f102 0b01 	add.w	fp, r2, #1
 8014936:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801493a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801493e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8014942:	ea4c 0202 	orr.w	r2, ip, r2
 8014946:	f107 0c01 	add.w	ip, r7, #1
 801494a:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801494e:	097f      	lsrs	r7, r7, #5
 8014950:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8014954:	433a      	orrs	r2, r7
 8014956:	f820 2b02 	strh.w	r2, [r0], #2
 801495a:	e7cd      	b.n	80148f8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd0>
 801495c:	f8be 2000 	ldrh.w	r2, [lr]
 8014960:	ebc5 0242 	rsb	r2, r5, r2, lsl #1
 8014964:	4410      	add	r0, r2
 8014966:	e7c2      	b.n	80148ee <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xc6>
 8014968:	07db      	lsls	r3, r3, #31
 801496a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801496e:	d50e      	bpl.n	801498e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x166>
 8014970:	006d      	lsls	r5, r5, #1
 8014972:	4290      	cmp	r0, r2
 8014974:	d246      	bcs.n	8014a04 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 8014976:	1943      	adds	r3, r0, r5
 8014978:	4298      	cmp	r0, r3
 801497a:	d202      	bcs.n	8014982 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15a>
 801497c:	f820 4b02 	strh.w	r4, [r0], #2
 8014980:	e7fa      	b.n	8014978 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x150>
 8014982:	f8be 3000 	ldrh.w	r3, [lr]
 8014986:	ebc5 0343 	rsb	r3, r5, r3, lsl #1
 801498a:	4418      	add	r0, r3
 801498c:	e7f1      	b.n	8014972 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x14a>
 801498e:	0787      	lsls	r7, r0, #30
 8014990:	462b      	mov	r3, r5
 8014992:	d00a      	beq.n	80149aa <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x182>
 8014994:	4603      	mov	r3, r0
 8014996:	4293      	cmp	r3, r2
 8014998:	d205      	bcs.n	80149a6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17e>
 801499a:	801c      	strh	r4, [r3, #0]
 801499c:	f8be 1000 	ldrh.w	r1, [lr]
 80149a0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80149a4:	e7f7      	b.n	8014996 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 80149a6:	3002      	adds	r0, #2
 80149a8:	1e6b      	subs	r3, r5, #1
 80149aa:	07dd      	lsls	r5, r3, #31
 80149ac:	d50d      	bpl.n	80149ca <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a2>
 80149ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80149b2:	3901      	subs	r1, #1
 80149b4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80149b8:	4291      	cmp	r1, r2
 80149ba:	d205      	bcs.n	80149c8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a0>
 80149bc:	800c      	strh	r4, [r1, #0]
 80149be:	f8be 5000 	ldrh.w	r5, [lr]
 80149c2:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 80149c6:	e7f7      	b.n	80149b8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>
 80149c8:	3b01      	subs	r3, #1
 80149ca:	b1db      	cbz	r3, 8014a04 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 80149cc:	b2a1      	uxth	r1, r4
 80149ce:	105b      	asrs	r3, r3, #1
 80149d0:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80149d4:	009b      	lsls	r3, r3, #2
 80149d6:	4290      	cmp	r0, r2
 80149d8:	d214      	bcs.n	8014a04 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 80149da:	0781      	lsls	r1, r0, #30
 80149dc:	d006      	beq.n	80149ec <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c4>
 80149de:	4b0e      	ldr	r3, [pc, #56]	; (8014a18 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f0>)
 80149e0:	f44f 7162 	mov.w	r1, #904	; 0x388
 80149e4:	4a0d      	ldr	r2, [pc, #52]	; (8014a1c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f4>)
 80149e6:	480e      	ldr	r0, [pc, #56]	; (8014a20 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f8>)
 80149e8:	f001 fd40 	bl	801646c <__assert_func>
 80149ec:	18c5      	adds	r5, r0, r3
 80149ee:	4601      	mov	r1, r0
 80149f0:	42a9      	cmp	r1, r5
 80149f2:	d202      	bcs.n	80149fa <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1d2>
 80149f4:	f841 4b04 	str.w	r4, [r1], #4
 80149f8:	e7fa      	b.n	80149f0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c8>
 80149fa:	f8be 1000 	ldrh.w	r1, [lr]
 80149fe:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8014a02:	e7e8      	b.n	80149d6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ae>
 8014a04:	6830      	ldr	r0, [r6, #0]
 8014a06:	6803      	ldr	r3, [r0, #0]
 8014a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a0a:	4798      	blx	r3
 8014a0c:	e73a      	b.n	8014884 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8014a0e:	bf00      	nop
 8014a10:	20001250 	.word	0x20001250
 8014a14:	2000124a 	.word	0x2000124a
 8014a18:	0801a194 	.word	0x0801a194
 8014a1c:	0801a639 	.word	0x0801a639
 8014a20:	0801a1c3 	.word	0x0801a1c3

08014a24 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8014a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a28:	4f97      	ldr	r7, [pc, #604]	; (8014c88 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 8014a2a:	4616      	mov	r6, r2
 8014a2c:	b08f      	sub	sp, #60	; 0x3c
 8014a2e:	4604      	mov	r4, r0
 8014a30:	683a      	ldr	r2, [r7, #0]
 8014a32:	4689      	mov	r9, r1
 8014a34:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8014a38:	2a02      	cmp	r2, #2
 8014a3a:	d106      	bne.n	8014a4a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8014a3c:	4b93      	ldr	r3, [pc, #588]	; (8014c8c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 8014a3e:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 8014a42:	4a93      	ldr	r2, [pc, #588]	; (8014c90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8014a44:	4893      	ldr	r0, [pc, #588]	; (8014c94 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 8014a46:	f001 fd11 	bl	801646c <__assert_func>
 8014a4a:	ad0e      	add	r5, sp, #56	; 0x38
 8014a4c:	f825 3d24 	strh.w	r3, [r5, #-36]!
 8014a50:	4628      	mov	r0, r5
 8014a52:	f7ff fced 	bl	8014430 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014a56:	6823      	ldr	r3, [r4, #0]
 8014a58:	4680      	mov	r8, r0
 8014a5a:	4620      	mov	r0, r4
 8014a5c:	6a1b      	ldr	r3, [r3, #32]
 8014a5e:	4798      	blx	r3
 8014a60:	4580      	cmp	r8, r0
 8014a62:	d004      	beq.n	8014a6e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8014a64:	4b8c      	ldr	r3, [pc, #560]	; (8014c98 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 8014a66:	f240 21ca 	movw	r1, #714	; 0x2ca
 8014a6a:	4a89      	ldr	r2, [pc, #548]	; (8014c90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8014a6c:	e7ea      	b.n	8014a44 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8014a6e:	4628      	mov	r0, r5
 8014a70:	f7ff fc54 	bl	801431c <_ZNK8touchgfx6Bitmap7getDataEv>
 8014a74:	4680      	mov	r8, r0
 8014a76:	b920      	cbnz	r0, 8014a82 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8014a78:	4b88      	ldr	r3, [pc, #544]	; (8014c9c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 8014a7a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8014a7e:	4a84      	ldr	r2, [pc, #528]	; (8014c90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8014a80:	e7e0      	b.n	8014a44 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8014a82:	6830      	ldr	r0, [r6, #0]
 8014a84:	ab06      	add	r3, sp, #24
 8014a86:	6871      	ldr	r1, [r6, #4]
 8014a88:	f10d 0b20 	add.w	fp, sp, #32
 8014a8c:	f9b6 a000 	ldrsh.w	sl, [r6]
 8014a90:	c303      	stmia	r3!, {r0, r1}
 8014a92:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014a96:	ab08      	add	r3, sp, #32
 8014a98:	f8d9 0000 	ldr.w	r0, [r9]
 8014a9c:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8014aa0:	c303      	stmia	r3!, {r0, r1}
 8014aa2:	4628      	mov	r0, r5
 8014aa4:	f7ff fb32 	bl	801410c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014aa8:	4606      	mov	r6, r0
 8014aaa:	4628      	mov	r0, r5
 8014aac:	4d7c      	ldr	r5, [pc, #496]	; (8014ca0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8014aae:	f7ff fb67 	bl	8014180 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014ab2:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8014ab6:	a806      	add	r0, sp, #24
 8014ab8:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8014abc:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8014ac0:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8014ac4:	f7fe f9e8 	bl	8012e98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014ac8:	4658      	mov	r0, fp
 8014aca:	f7fe f9e5 	bl	8012e98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014ace:	a80a      	add	r0, sp, #40	; 0x28
 8014ad0:	f7fe f9e2 	bl	8012e98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014ad4:	4b73      	ldr	r3, [pc, #460]	; (8014ca4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8014ad6:	2100      	movs	r1, #0
 8014ad8:	f9b5 2000 	ldrsh.w	r2, [r5]
 8014adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ae0:	4658      	mov	r0, fp
 8014ae2:	910c      	str	r1, [sp, #48]	; 0x30
 8014ae4:	a90c      	add	r1, sp, #48	; 0x30
 8014ae6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8014aea:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8014aee:	f7fc fc0b 	bl	8011308 <_ZN8touchgfx4RectaNERKS0_>
 8014af2:	4658      	mov	r0, fp
 8014af4:	f7fc fc4b 	bl	801138e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014af8:	2800      	cmp	r0, #0
 8014afa:	f040 809a 	bne.w	8014c32 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8014afe:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8014b02:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8014b06:	4288      	cmp	r0, r1
 8014b08:	db38      	blt.n	8014b7c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8014b0a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8014b0e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8014b12:	429a      	cmp	r2, r3
 8014b14:	db32      	blt.n	8014b7c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8014b16:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8014b1a:	4430      	add	r0, r6
 8014b1c:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8014b20:	4431      	add	r1, r6
 8014b22:	b200      	sxth	r0, r0
 8014b24:	b209      	sxth	r1, r1
 8014b26:	4288      	cmp	r0, r1
 8014b28:	dc28      	bgt.n	8014b7c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8014b2a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8014b2e:	440a      	add	r2, r1
 8014b30:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8014b34:	440b      	add	r3, r1
 8014b36:	b212      	sxth	r2, r2
 8014b38:	b21b      	sxth	r3, r3
 8014b3a:	429a      	cmp	r2, r3
 8014b3c:	dc1e      	bgt.n	8014b7c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8014b3e:	6823      	ldr	r3, [r4, #0]
 8014b40:	4620      	mov	r0, r4
 8014b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b44:	4798      	blx	r3
 8014b46:	4682      	mov	sl, r0
 8014b48:	6838      	ldr	r0, [r7, #0]
 8014b4a:	6803      	ldr	r3, [r0, #0]
 8014b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b4e:	4798      	blx	r3
 8014b50:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8014b54:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014b58:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8014b5c:	1a5b      	subs	r3, r3, r1
 8014b5e:	b29b      	uxth	r3, r3
 8014b60:	b21c      	sxth	r4, r3
 8014b62:	2c00      	cmp	r4, #0
 8014b64:	dc0f      	bgt.n	8014b86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 8014b66:	bf18      	it	ne
 8014b68:	f8ad 1020 	strhne.w	r1, [sp, #32]
 8014b6c:	4644      	mov	r4, r8
 8014b6e:	bf1e      	ittt	ne
 8014b70:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 8014b74:	185b      	addne	r3, r3, r1
 8014b76:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8014b7a:	e009      	b.n	8014b90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 8014b7c:	4b4a      	ldr	r3, [pc, #296]	; (8014ca8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8014b7e:	f240 21da 	movw	r1, #730	; 0x2da
 8014b82:	4a43      	ldr	r2, [pc, #268]	; (8014c90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8014b84:	e75e      	b.n	8014a44 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8014b86:	1ad3      	subs	r3, r2, r3
 8014b88:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8014b8c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8014b90:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 8014b94:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8014b98:	1b9b      	subs	r3, r3, r6
 8014b9a:	b29b      	uxth	r3, r3
 8014b9c:	b219      	sxth	r1, r3
 8014b9e:	2900      	cmp	r1, #0
 8014ba0:	dd4b      	ble.n	8014c3a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 8014ba2:	4351      	muls	r1, r2
 8014ba4:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8014ba8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8014bac:	1acb      	subs	r3, r1, r3
 8014bae:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8014bb2:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8014bb6:	2e00      	cmp	r6, #0
 8014bb8:	dd3b      	ble.n	8014c32 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8014bba:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	dd37      	ble.n	8014c32 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8014bc2:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8014bc6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8014bca:	fb0a f90c 	mul.w	r9, sl, ip
 8014bce:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 8014bd2:	4481      	add	r9, r0
 8014bd4:	8828      	ldrh	r0, [r5, #0]
 8014bd6:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 8014bda:	1a41      	subs	r1, r0, r1
 8014bdc:	42ae      	cmp	r6, r5
 8014bde:	bfa8      	it	ge
 8014be0:	462e      	movge	r6, r5
 8014be2:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8014be6:	428e      	cmp	r6, r1
 8014be8:	bfa8      	it	ge
 8014bea:	460e      	movge	r6, r1
 8014bec:	429d      	cmp	r5, r3
 8014bee:	bfa8      	it	ge
 8014bf0:	461d      	movge	r5, r3
 8014bf2:	4b2c      	ldr	r3, [pc, #176]	; (8014ca4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8014bf4:	881b      	ldrh	r3, [r3, #0]
 8014bf6:	eba3 030c 	sub.w	r3, r3, ip
 8014bfa:	429d      	cmp	r5, r3
 8014bfc:	bfa8      	it	ge
 8014bfe:	461d      	movge	r5, r3
 8014c00:	42b0      	cmp	r0, r6
 8014c02:	d12c      	bne.n	8014c5e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8014c04:	4290      	cmp	r0, r2
 8014c06:	d12a      	bne.n	8014c5e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8014c08:	6838      	ldr	r0, [r7, #0]
 8014c0a:	9203      	str	r2, [sp, #12]
 8014c0c:	6803      	ldr	r3, [r0, #0]
 8014c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c10:	4798      	blx	r3
 8014c12:	07c3      	lsls	r3, r0, #31
 8014c14:	d51a      	bpl.n	8014c4c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8014c16:	9a03      	ldr	r2, [sp, #12]
 8014c18:	6838      	ldr	r0, [r7, #0]
 8014c1a:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 8014c1e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8014c22:	6803      	ldr	r3, [r0, #0]
 8014c24:	9200      	str	r2, [sp, #0]
 8014c26:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8014c28:	4623      	mov	r3, r4
 8014c2a:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8014c2e:	47a8      	blx	r5
 8014c30:	4680      	mov	r8, r0
 8014c32:	4640      	mov	r0, r8
 8014c34:	b00f      	add	sp, #60	; 0x3c
 8014c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c3a:	bf1f      	itttt	ne
 8014c3c:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 8014c40:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 8014c44:	185b      	addne	r3, r3, r1
 8014c46:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8014c4a:	e7b2      	b.n	8014bb2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 8014c4c:	6838      	ldr	r0, [r7, #0]
 8014c4e:	464a      	mov	r2, r9
 8014c50:	4621      	mov	r1, r4
 8014c52:	6803      	ldr	r3, [r0, #0]
 8014c54:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8014c56:	fb05 f30a 	mul.w	r3, r5, sl
 8014c5a:	47b0      	blx	r6
 8014c5c:	e7e9      	b.n	8014c32 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8014c5e:	4355      	muls	r5, r2
 8014c60:	0076      	lsls	r6, r6, #1
 8014c62:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 8014c66:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 8014c6a:	9303      	str	r3, [sp, #12]
 8014c6c:	9b03      	ldr	r3, [sp, #12]
 8014c6e:	429c      	cmp	r4, r3
 8014c70:	d2df      	bcs.n	8014c32 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8014c72:	6838      	ldr	r0, [r7, #0]
 8014c74:	464a      	mov	r2, r9
 8014c76:	4621      	mov	r1, r4
 8014c78:	44d1      	add	r9, sl
 8014c7a:	6803      	ldr	r3, [r0, #0]
 8014c7c:	445c      	add	r4, fp
 8014c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c80:	461d      	mov	r5, r3
 8014c82:	4633      	mov	r3, r6
 8014c84:	47a8      	blx	r5
 8014c86:	e7f1      	b.n	8014c6c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 8014c88:	20001250 	.word	0x20001250
 8014c8c:	08019fcb 	.word	0x08019fcb
 8014c90:	0801a51c 	.word	0x0801a51c
 8014c94:	0801a1c3 	.word	0x0801a1c3
 8014c98:	0801a07d 	.word	0x0801a07d
 8014c9c:	0801a0d2 	.word	0x0801a0d2
 8014ca0:	2000124a 	.word	0x2000124a
 8014ca4:	2000124c 	.word	0x2000124c
 8014ca8:	0801a110 	.word	0x0801a110

08014cac <_ZN8touchgfx8LCD16bppC1Ev>:
 8014cac:	2200      	movs	r2, #0
 8014cae:	4910      	ldr	r1, [pc, #64]	; (8014cf0 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8014cb0:	6042      	str	r2, [r0, #4]
 8014cb2:	6001      	str	r1, [r0, #0]
 8014cb4:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8014cb8:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8014cbc:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8014cc0:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8014cc4:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8014cc8:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8014ccc:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8014cd0:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8014cd4:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8014cd8:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8014cdc:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8014ce0:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8014ce4:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8014ce8:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8014cec:	4770      	bx	lr
 8014cee:	bf00      	nop
 8014cf0:	0801a274 	.word	0x0801a274

08014cf4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8014cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cf8:	b08b      	sub	sp, #44	; 0x2c
 8014cfa:	460d      	mov	r5, r1
 8014cfc:	4604      	mov	r4, r0
 8014cfe:	4699      	mov	r9, r3
 8014d00:	6808      	ldr	r0, [r1, #0]
 8014d02:	ab06      	add	r3, sp, #24
 8014d04:	6849      	ldr	r1, [r1, #4]
 8014d06:	c303      	stmia	r3!, {r0, r1}
 8014d08:	6810      	ldr	r0, [r2, #0]
 8014d0a:	ab08      	add	r3, sp, #32
 8014d0c:	6851      	ldr	r1, [r2, #4]
 8014d0e:	c303      	stmia	r3!, {r0, r1}
 8014d10:	a806      	add	r0, sp, #24
 8014d12:	f7fe f8c1 	bl	8012e98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014d16:	4629      	mov	r1, r5
 8014d18:	a808      	add	r0, sp, #32
 8014d1a:	4d63      	ldr	r5, [pc, #396]	; (8014ea8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 8014d1c:	f7fe f8a4 	bl	8012e68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014d20:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8014d24:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8014d28:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8014d2c:	6828      	ldr	r0, [r5, #0]
 8014d2e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8014d32:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8014d36:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8014d3a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8014d3e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8014d42:	440a      	add	r2, r1
 8014d44:	f8ad 2020 	strh.w	r2, [sp, #32]
 8014d48:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8014d4c:	4413      	add	r3, r2
 8014d4e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014d52:	6803      	ldr	r3, [r0, #0]
 8014d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d56:	4798      	blx	r3
 8014d58:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8014d5c:	d118      	bne.n	8014d90 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8014d5e:	f010 0f20 	tst.w	r0, #32
 8014d62:	6828      	ldr	r0, [r5, #0]
 8014d64:	d017      	beq.n	8014d96 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8014d66:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 8014d6a:	b2b6      	uxth	r6, r6
 8014d6c:	6801      	ldr	r1, [r0, #0]
 8014d6e:	9502      	str	r5, [sp, #8]
 8014d70:	fa1f f588 	uxth.w	r5, r8
 8014d74:	f8cd 900c 	str.w	r9, [sp, #12]
 8014d78:	9601      	str	r6, [sp, #4]
 8014d7a:	9500      	str	r5, [sp, #0]
 8014d7c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8014d80:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8014d82:	4621      	mov	r1, r4
 8014d84:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8014d88:	47a8      	blx	r5
 8014d8a:	b00b      	add	sp, #44	; 0x2c
 8014d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d90:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014d94:	e7e5      	b.n	8014d62 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8014d96:	6803      	ldr	r3, [r0, #0]
 8014d98:	6a1b      	ldr	r3, [r3, #32]
 8014d9a:	4798      	blx	r3
 8014d9c:	4a43      	ldr	r2, [pc, #268]	; (8014eac <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 8014d9e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8014da2:	f8b2 e000 	ldrh.w	lr, [r2]
 8014da6:	4692      	mov	sl, r2
 8014da8:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8014dac:	fb0e 1303 	mla	r3, lr, r3, r1
 8014db0:	fb0e fe06 	mul.w	lr, lr, r6
 8014db4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014db8:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8014dbc:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 8014dc0:	9305      	str	r3, [sp, #20]
 8014dc2:	4570      	cmp	r0, lr
 8014dc4:	d26a      	bcs.n	8014e9c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a8>
 8014dc6:	9b05      	ldr	r3, [sp, #20]
 8014dc8:	4621      	mov	r1, r4
 8014dca:	eb00 0b03 	add.w	fp, r0, r3
 8014dce:	4558      	cmp	r0, fp
 8014dd0:	d257      	bcs.n	8014e82 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18e>
 8014dd2:	f851 4b04 	ldr.w	r4, [r1], #4
 8014dd6:	0e22      	lsrs	r2, r4, #24
 8014dd8:	d012      	beq.n	8014e00 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 8014dda:	2aff      	cmp	r2, #255	; 0xff
 8014ddc:	ea4f 2714 	mov.w	r7, r4, lsr #8
 8014de0:	d110      	bne.n	8014e04 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8014de2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8014de6:	d10d      	bne.n	8014e04 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8014de8:	0963      	lsrs	r3, r4, #5
 8014dea:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8014dee:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8014df2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8014df6:	f027 0707 	bic.w	r7, r7, #7
 8014dfa:	431f      	orrs	r7, r3
 8014dfc:	433c      	orrs	r4, r7
 8014dfe:	8004      	strh	r4, [r0, #0]
 8014e00:	3002      	adds	r0, #2
 8014e02:	e7e4      	b.n	8014dce <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xda>
 8014e04:	fb09 f302 	mul.w	r3, r9, r2
 8014e08:	f8b0 c000 	ldrh.w	ip, [r0]
 8014e0c:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8014e10:	b2ff      	uxtb	r7, r7
 8014e12:	1c5a      	adds	r2, r3, #1
 8014e14:	ea4f 262c 	mov.w	r6, ip, asr #8
 8014e18:	b2e4      	uxtb	r4, r4
 8014e1a:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8014e1e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8014e22:	1212      	asrs	r2, r2, #8
 8014e24:	b293      	uxth	r3, r2
 8014e26:	43d2      	mvns	r2, r2
 8014e28:	fb15 f503 	smulbb	r5, r5, r3
 8014e2c:	b2d2      	uxtb	r2, r2
 8014e2e:	fb17 f703 	smulbb	r7, r7, r3
 8014e32:	fb06 5602 	mla	r6, r6, r2, r5
 8014e36:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8014e3a:	fb14 f403 	smulbb	r4, r4, r3
 8014e3e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8014e42:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8014e46:	b2b6      	uxth	r6, r6
 8014e48:	fa5f fc8c 	uxtb.w	ip, ip
 8014e4c:	fb05 7702 	mla	r7, r5, r2, r7
 8014e50:	1c73      	adds	r3, r6, #1
 8014e52:	fb0c 4202 	mla	r2, ip, r2, r4
 8014e56:	b2bf      	uxth	r7, r7
 8014e58:	b292      	uxth	r2, r2
 8014e5a:	1c7d      	adds	r5, r7, #1
 8014e5c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8014e60:	f102 0c01 	add.w	ip, r2, #1
 8014e64:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8014e68:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8014e6c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8014e70:	097f      	lsrs	r7, r7, #5
 8014e72:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8014e76:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8014e7a:	4316      	orrs	r6, r2
 8014e7c:	433e      	orrs	r6, r7
 8014e7e:	8006      	strh	r6, [r0, #0]
 8014e80:	e7be      	b.n	8014e00 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 8014e82:	f8ba 3000 	ldrh.w	r3, [sl]
 8014e86:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 8014e8a:	eba3 0308 	sub.w	r3, r3, r8
 8014e8e:	eba4 0408 	sub.w	r4, r4, r8
 8014e92:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014e96:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8014e9a:	e792      	b.n	8014dc2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8014e9c:	4b02      	ldr	r3, [pc, #8]	; (8014ea8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 8014e9e:	6818      	ldr	r0, [r3, #0]
 8014ea0:	6803      	ldr	r3, [r0, #0]
 8014ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ea4:	4798      	blx	r3
 8014ea6:	e770      	b.n	8014d8a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8014ea8:	20001250 	.word	0x20001250
 8014eac:	2000124a 	.word	0x2000124a

08014eb0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8014eb0:	b570      	push	{r4, r5, r6, lr}
 8014eb2:	9d04      	ldr	r5, [sp, #16]
 8014eb4:	460c      	mov	r4, r1
 8014eb6:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8014eba:	4619      	mov	r1, r3
 8014ebc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8014ec0:	2a0d      	cmp	r2, #13
 8014ec2:	d820      	bhi.n	8014f06 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 8014ec4:	e8df f002 	tbb	[pc, r2]
 8014ec8:	18121807 	.word	0x18121807
 8014ecc:	18181818 	.word	0x18181818
 8014ed0:	18181818 	.word	0x18181818
 8014ed4:	1818      	.short	0x1818
 8014ed6:	6802      	ldr	r2, [r0, #0]
 8014ed8:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8014edc:	68d6      	ldr	r6, [r2, #12]
 8014ede:	462b      	mov	r3, r5
 8014ee0:	460a      	mov	r2, r1
 8014ee2:	4621      	mov	r1, r4
 8014ee4:	46b4      	mov	ip, r6
 8014ee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014eea:	4760      	bx	ip
 8014eec:	462a      	mov	r2, r5
 8014eee:	4620      	mov	r0, r4
 8014ef0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ef4:	f7ff befe 	b.w	8014cf4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8014ef8:	4b03      	ldr	r3, [pc, #12]	; (8014f08 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 8014efa:	f240 21c1 	movw	r1, #705	; 0x2c1
 8014efe:	4a03      	ldr	r2, [pc, #12]	; (8014f0c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 8014f00:	4803      	ldr	r0, [pc, #12]	; (8014f10 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 8014f02:	f001 fab3 	bl	801646c <__assert_func>
 8014f06:	bd70      	pop	{r4, r5, r6, pc}
 8014f08:	0801a15f 	.word	0x0801a15f
 8014f0c:	0801a5a2 	.word	0x0801a5a2
 8014f10:	0801a1c3 	.word	0x0801a1c3

08014f14 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8014f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f18:	b093      	sub	sp, #76	; 0x4c
 8014f1a:	880f      	ldrh	r7, [r1, #0]
 8014f1c:	4604      	mov	r4, r0
 8014f1e:	4688      	mov	r8, r1
 8014f20:	4616      	mov	r6, r2
 8014f22:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8014f26:	b12f      	cbz	r7, 8014f34 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8014f28:	4b6f      	ldr	r3, [pc, #444]	; (80150e8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 8014f2a:	21e2      	movs	r1, #226	; 0xe2
 8014f2c:	4a6f      	ldr	r2, [pc, #444]	; (80150ec <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8014f2e:	4870      	ldr	r0, [pc, #448]	; (80150f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8014f30:	f001 fa9c 	bl	801646c <__assert_func>
 8014f34:	6810      	ldr	r0, [r2, #0]
 8014f36:	ad0e      	add	r5, sp, #56	; 0x38
 8014f38:	6851      	ldr	r1, [r2, #4]
 8014f3a:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 80150f8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>
 8014f3e:	c503      	stmia	r5!, {r0, r1}
 8014f40:	6818      	ldr	r0, [r3, #0]
 8014f42:	ad10      	add	r5, sp, #64	; 0x40
 8014f44:	6859      	ldr	r1, [r3, #4]
 8014f46:	c503      	stmia	r5!, {r0, r1}
 8014f48:	a80e      	add	r0, sp, #56	; 0x38
 8014f4a:	f7fd ffa5 	bl	8012e98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014f4e:	4631      	mov	r1, r6
 8014f50:	a810      	add	r0, sp, #64	; 0x40
 8014f52:	4e68      	ldr	r6, [pc, #416]	; (80150f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8014f54:	f7fd ff88 	bl	8012e68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014f58:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8014f5c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8014f60:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8014f64:	f8db 0000 	ldr.w	r0, [fp]
 8014f68:	fb11 2103 	smlabb	r1, r1, r3, r2
 8014f6c:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8014f70:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8014f74:	440c      	add	r4, r1
 8014f76:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8014f7a:	440a      	add	r2, r1
 8014f7c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8014f80:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8014f84:	4413      	add	r3, r2
 8014f86:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8014f8a:	6803      	ldr	r3, [r0, #0]
 8014f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014f90:	4798      	blx	r3
 8014f92:	2801      	cmp	r0, #1
 8014f94:	d11d      	bne.n	8014fd2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 8014f96:	220b      	movs	r2, #11
 8014f98:	9708      	str	r7, [sp, #32]
 8014f9a:	b2ad      	uxth	r5, r5
 8014f9c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014fa0:	9207      	str	r2, [sp, #28]
 8014fa2:	4621      	mov	r1, r4
 8014fa4:	8832      	ldrh	r2, [r6, #0]
 8014fa6:	f8cd a010 	str.w	sl, [sp, #16]
 8014faa:	9502      	str	r5, [sp, #8]
 8014fac:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8014fb0:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8014fb4:	9203      	str	r2, [sp, #12]
 8014fb6:	fa1f f289 	uxth.w	r2, r9
 8014fba:	9201      	str	r2, [sp, #4]
 8014fbc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8014fc0:	9200      	str	r2, [sp, #0]
 8014fc2:	4642      	mov	r2, r8
 8014fc4:	f8db 0000 	ldr.w	r0, [fp]
 8014fc8:	f7fc fd20 	bl	8011a0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8014fcc:	b013      	add	sp, #76	; 0x4c
 8014fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fd2:	f8db 0000 	ldr.w	r0, [fp]
 8014fd6:	6803      	ldr	r3, [r0, #0]
 8014fd8:	6a1b      	ldr	r3, [r3, #32]
 8014fda:	4798      	blx	r3
 8014fdc:	8832      	ldrh	r2, [r6, #0]
 8014fde:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8014fe2:	f04f 0e04 	mov.w	lr, #4
 8014fe6:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8014fea:	4355      	muls	r5, r2
 8014fec:	960d      	str	r6, [sp, #52]	; 0x34
 8014fee:	fb02 1303 	mla	r3, r2, r3, r1
 8014ff2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014ff6:	eb00 0345 	add.w	r3, r0, r5, lsl #1
 8014ffa:	930c      	str	r3, [sp, #48]	; 0x30
 8014ffc:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8015000:	930b      	str	r3, [sp, #44]	; 0x2c
 8015002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015004:	4298      	cmp	r0, r3
 8015006:	d269      	bcs.n	80150dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8015008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801500a:	4621      	mov	r1, r4
 801500c:	eb00 0b03 	add.w	fp, r0, r3
 8015010:	4558      	cmp	r0, fp
 8015012:	460b      	mov	r3, r1
 8015014:	d256      	bcs.n	80150c4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8015016:	781b      	ldrb	r3, [r3, #0]
 8015018:	3101      	adds	r1, #1
 801501a:	fb1e e303 	smlabb	r3, lr, r3, lr
 801501e:	f858 2003 	ldr.w	r2, [r8, r3]
 8015022:	0e14      	lsrs	r4, r2, #24
 8015024:	d012      	beq.n	801504c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 8015026:	2cff      	cmp	r4, #255	; 0xff
 8015028:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801502c:	d110      	bne.n	8015050 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801502e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8015032:	d10d      	bne.n	8015050 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8015034:	0953      	lsrs	r3, r2, #5
 8015036:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801503a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801503e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8015042:	f026 0607 	bic.w	r6, r6, #7
 8015046:	431e      	orrs	r6, r3
 8015048:	4332      	orrs	r2, r6
 801504a:	8002      	strh	r2, [r0, #0]
 801504c:	3002      	adds	r0, #2
 801504e:	e7df      	b.n	8015010 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfc>
 8015050:	fb0a f404 	mul.w	r4, sl, r4
 8015054:	8807      	ldrh	r7, [r0, #0]
 8015056:	b2f6      	uxtb	r6, r6
 8015058:	1c63      	adds	r3, r4, #1
 801505a:	123d      	asrs	r5, r7, #8
 801505c:	eb03 2324 	add.w	r3, r3, r4, asr #8
 8015060:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8015064:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8015068:	b2d2      	uxtb	r2, r2
 801506a:	121b      	asrs	r3, r3, #8
 801506c:	fa1f fc83 	uxth.w	ip, r3
 8015070:	43db      	mvns	r3, r3
 8015072:	fb14 f40c 	smulbb	r4, r4, ip
 8015076:	b2db      	uxtb	r3, r3
 8015078:	fb12 f20c 	smulbb	r2, r2, ip
 801507c:	fb05 4503 	mla	r5, r5, r3, r4
 8015080:	10fc      	asrs	r4, r7, #3
 8015082:	fb16 f60c 	smulbb	r6, r6, ip
 8015086:	00ff      	lsls	r7, r7, #3
 8015088:	b2ad      	uxth	r5, r5
 801508a:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801508e:	b2ff      	uxtb	r7, r7
 8015090:	fb04 6603 	mla	r6, r4, r3, r6
 8015094:	fb07 2203 	mla	r2, r7, r3, r2
 8015098:	1c6b      	adds	r3, r5, #1
 801509a:	b2b6      	uxth	r6, r6
 801509c:	b292      	uxth	r2, r2
 801509e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80150a2:	1c54      	adds	r4, r2, #1
 80150a4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80150a8:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 80150ac:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80150b0:	4325      	orrs	r5, r4
 80150b2:	1c74      	adds	r4, r6, #1
 80150b4:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 80150b8:	0976      	lsrs	r6, r6, #5
 80150ba:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80150be:	4335      	orrs	r5, r6
 80150c0:	8005      	strh	r5, [r0, #0]
 80150c2:	e7c3      	b.n	801504c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 80150c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80150c6:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 80150ca:	881b      	ldrh	r3, [r3, #0]
 80150cc:	eba4 0409 	sub.w	r4, r4, r9
 80150d0:	eba3 0309 	sub.w	r3, r3, r9
 80150d4:	440c      	add	r4, r1
 80150d6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80150da:	e792      	b.n	8015002 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 80150dc:	4b06      	ldr	r3, [pc, #24]	; (80150f8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 80150de:	6818      	ldr	r0, [r3, #0]
 80150e0:	6803      	ldr	r3, [r0, #0]
 80150e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150e4:	4798      	blx	r3
 80150e6:	e771      	b.n	8014fcc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 80150e8:	08019f7b 	.word	0x08019f7b
 80150ec:	0801a456 	.word	0x0801a456
 80150f0:	0801a1c3 	.word	0x0801a1c3
 80150f4:	2000124a 	.word	0x2000124a
 80150f8:	20001250 	.word	0x20001250

080150fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80150fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015100:	4614      	mov	r4, r2
 8015102:	880a      	ldrh	r2, [r1, #0]
 8015104:	b091      	sub	sp, #68	; 0x44
 8015106:	4607      	mov	r7, r0
 8015108:	2a02      	cmp	r2, #2
 801510a:	4689      	mov	r9, r1
 801510c:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 8015110:	d006      	beq.n	8015120 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 8015112:	4b77      	ldr	r3, [pc, #476]	; (80152f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f4>)
 8015114:	f240 113b 	movw	r1, #315	; 0x13b
 8015118:	4a76      	ldr	r2, [pc, #472]	; (80152f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f8>)
 801511a:	4877      	ldr	r0, [pc, #476]	; (80152f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1fc>)
 801511c:	f001 f9a6 	bl	801646c <__assert_func>
 8015120:	2e00      	cmp	r6, #0
 8015122:	d04b      	beq.n	80151bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8015124:	6820      	ldr	r0, [r4, #0]
 8015126:	ad0c      	add	r5, sp, #48	; 0x30
 8015128:	6861      	ldr	r1, [r4, #4]
 801512a:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8015300 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>
 801512e:	c503      	stmia	r5!, {r0, r1}
 8015130:	6818      	ldr	r0, [r3, #0]
 8015132:	ad0e      	add	r5, sp, #56	; 0x38
 8015134:	6859      	ldr	r1, [r3, #4]
 8015136:	c503      	stmia	r5!, {r0, r1}
 8015138:	a80c      	add	r0, sp, #48	; 0x30
 801513a:	f7fd fead 	bl	8012e98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801513e:	4621      	mov	r1, r4
 8015140:	a80e      	add	r0, sp, #56	; 0x38
 8015142:	f7fd fe91 	bl	8012e68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015146:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801514a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801514e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8015152:	f8da 0000 	ldr.w	r0, [sl]
 8015156:	fb11 2103 	smlabb	r1, r1, r3, r2
 801515a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801515e:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8015162:	187c      	adds	r4, r7, r1
 8015164:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8015168:	4f64      	ldr	r7, [pc, #400]	; (80152fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 801516a:	440a      	add	r2, r1
 801516c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8015170:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8015174:	4413      	add	r3, r2
 8015176:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801517a:	6803      	ldr	r3, [r0, #0]
 801517c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015180:	4798      	blx	r3
 8015182:	2801      	cmp	r0, #1
 8015184:	d11d      	bne.n	80151c2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 8015186:	2200      	movs	r2, #0
 8015188:	210b      	movs	r1, #11
 801518a:	b2ad      	uxth	r5, r5
 801518c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015190:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8015194:	8839      	ldrh	r1, [r7, #0]
 8015196:	9604      	str	r6, [sp, #16]
 8015198:	9502      	str	r5, [sp, #8]
 801519a:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801519e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80151a2:	4621      	mov	r1, r4
 80151a4:	9203      	str	r2, [sp, #12]
 80151a6:	fa1f f288 	uxth.w	r2, r8
 80151aa:	9201      	str	r2, [sp, #4]
 80151ac:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80151b0:	9200      	str	r2, [sp, #0]
 80151b2:	464a      	mov	r2, r9
 80151b4:	f8da 0000 	ldr.w	r0, [sl]
 80151b8:	f7fc fc28 	bl	8011a0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80151bc:	b011      	add	sp, #68	; 0x44
 80151be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151c2:	f8da 0000 	ldr.w	r0, [sl]
 80151c6:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 80151ca:	6803      	ldr	r3, [r0, #0]
 80151cc:	6a1b      	ldr	r3, [r3, #32]
 80151ce:	4798      	blx	r3
 80151d0:	8839      	ldrh	r1, [r7, #0]
 80151d2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80151d6:	2eff      	cmp	r6, #255	; 0xff
 80151d8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80151dc:	fb05 f501 	mul.w	r5, r5, r1
 80151e0:	fb01 2303 	mla	r3, r1, r3, r2
 80151e4:	f109 0204 	add.w	r2, r9, #4
 80151e8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80151ec:	d05f      	beq.n	80152ae <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b2>
 80151ee:	f1c6 09ff 	rsb	r9, r6, #255	; 0xff
 80151f2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80151f6:	b2b6      	uxth	r6, r6
 80151f8:	970b      	str	r7, [sp, #44]	; 0x2c
 80151fa:	fa1f f989 	uxth.w	r9, r9
 80151fe:	42a8      	cmp	r0, r5
 8015200:	d26f      	bcs.n	80152e2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 8015202:	eb00 010b 	add.w	r1, r0, fp
 8015206:	4288      	cmp	r0, r1
 8015208:	4623      	mov	r3, r4
 801520a:	d244      	bcs.n	8015296 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19a>
 801520c:	8807      	ldrh	r7, [r0, #0]
 801520e:	3401      	adds	r4, #1
 8015210:	781b      	ldrb	r3, [r3, #0]
 8015212:	ea4f 2c27 	mov.w	ip, r7, asr #8
 8015216:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801521a:	ea4f 0ae7 	mov.w	sl, r7, asr #3
 801521e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8015222:	00ff      	lsls	r7, r7, #3
 8015224:	ea4f 2e23 	mov.w	lr, r3, asr #8
 8015228:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801522c:	fb1c fc09 	smulbb	ip, ip, r9
 8015230:	b2ff      	uxtb	r7, r7
 8015232:	fb1a fa09 	smulbb	sl, sl, r9
 8015236:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801523a:	fb17 f709 	smulbb	r7, r7, r9
 801523e:	fb0e ce06 	mla	lr, lr, r6, ip
 8015242:	ea4f 0ce3 	mov.w	ip, r3, asr #3
 8015246:	00db      	lsls	r3, r3, #3
 8015248:	fa1f fe8e 	uxth.w	lr, lr
 801524c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8015250:	b2db      	uxtb	r3, r3
 8015252:	fb0c ac06 	mla	ip, ip, r6, sl
 8015256:	f10e 0a01 	add.w	sl, lr, #1
 801525a:	fb03 7306 	mla	r3, r3, r6, r7
 801525e:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8015262:	b29b      	uxth	r3, r3
 8015264:	f40e 4a78 	and.w	sl, lr, #63488	; 0xf800
 8015268:	fa1f fc8c 	uxth.w	ip, ip
 801526c:	f103 0e01 	add.w	lr, r3, #1
 8015270:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8015274:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8015278:	ea4a 0e03 	orr.w	lr, sl, r3
 801527c:	f10c 0a01 	add.w	sl, ip, #1
 8015280:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8015284:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8015288:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801528c:	ea4e 0e0c 	orr.w	lr, lr, ip
 8015290:	f820 eb02 	strh.w	lr, [r0], #2
 8015294:	e7b7      	b.n	8015206 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 8015296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015298:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 801529c:	881b      	ldrh	r3, [r3, #0]
 801529e:	eba1 0108 	sub.w	r1, r1, r8
 80152a2:	eba3 0308 	sub.w	r3, r3, r8
 80152a6:	440c      	add	r4, r1
 80152a8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80152ac:	e7a7      	b.n	80151fe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
 80152ae:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80152b2:	42a8      	cmp	r0, r5
 80152b4:	d215      	bcs.n	80152e2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 80152b6:	eb00 010b 	add.w	r1, r0, fp
 80152ba:	4288      	cmp	r0, r1
 80152bc:	d206      	bcs.n	80152cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1d0>
 80152be:	f814 3b01 	ldrb.w	r3, [r4], #1
 80152c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80152c6:	f820 3b02 	strh.w	r3, [r0], #2
 80152ca:	e7f6      	b.n	80152ba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1be>
 80152cc:	883b      	ldrh	r3, [r7, #0]
 80152ce:	eba3 0308 	sub.w	r3, r3, r8
 80152d2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80152d6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80152da:	eba3 0308 	sub.w	r3, r3, r8
 80152de:	441c      	add	r4, r3
 80152e0:	e7e7      	b.n	80152b2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b6>
 80152e2:	4b07      	ldr	r3, [pc, #28]	; (8015300 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 80152e4:	6818      	ldr	r0, [r3, #0]
 80152e6:	6803      	ldr	r3, [r0, #0]
 80152e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152ea:	4798      	blx	r3
 80152ec:	e766      	b.n	80151bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 80152ee:	bf00      	nop
 80152f0:	08019e39 	.word	0x08019e39
 80152f4:	0801a2c0 	.word	0x0801a2c0
 80152f8:	0801a1c3 	.word	0x0801a1c3
 80152fc:	2000124a 	.word	0x2000124a
 8015300:	20001250 	.word	0x20001250

08015304 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8015304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015308:	4614      	mov	r4, r2
 801530a:	880a      	ldrh	r2, [r1, #0]
 801530c:	b091      	sub	sp, #68	; 0x44
 801530e:	4606      	mov	r6, r0
 8015310:	2a01      	cmp	r2, #1
 8015312:	4688      	mov	r8, r1
 8015314:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8015318:	d006      	beq.n	8015328 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 801531a:	4b7c      	ldr	r3, [pc, #496]	; (801550c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x208>)
 801531c:	f240 1197 	movw	r1, #407	; 0x197
 8015320:	4a7b      	ldr	r2, [pc, #492]	; (8015510 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20c>)
 8015322:	487c      	ldr	r0, [pc, #496]	; (8015514 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x210>)
 8015324:	f001 f8a2 	bl	801646c <__assert_func>
 8015328:	2f00      	cmp	r7, #0
 801532a:	d04b      	beq.n	80153c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801532c:	6820      	ldr	r0, [r4, #0]
 801532e:	ad0c      	add	r5, sp, #48	; 0x30
 8015330:	6861      	ldr	r1, [r4, #4]
 8015332:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8015520 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8015336:	c503      	stmia	r5!, {r0, r1}
 8015338:	6818      	ldr	r0, [r3, #0]
 801533a:	ad0e      	add	r5, sp, #56	; 0x38
 801533c:	6859      	ldr	r1, [r3, #4]
 801533e:	c503      	stmia	r5!, {r0, r1}
 8015340:	a80c      	add	r0, sp, #48	; 0x30
 8015342:	f7fd fda9 	bl	8012e98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015346:	4621      	mov	r1, r4
 8015348:	a80e      	add	r0, sp, #56	; 0x38
 801534a:	f7fd fd8d 	bl	8012e68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801534e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8015352:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8015356:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801535a:	f8da 0000 	ldr.w	r0, [sl]
 801535e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8015362:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 8015366:	f9bd 903e 	ldrsh.w	r9, [sp, #62]	; 0x3e
 801536a:	1874      	adds	r4, r6, r1
 801536c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8015370:	4e69      	ldr	r6, [pc, #420]	; (8015518 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x214>)
 8015372:	440a      	add	r2, r1
 8015374:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8015378:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801537c:	4413      	add	r3, r2
 801537e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8015382:	6803      	ldr	r3, [r0, #0]
 8015384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015388:	4798      	blx	r3
 801538a:	2801      	cmp	r0, #1
 801538c:	d11d      	bne.n	80153ca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 801538e:	220b      	movs	r2, #11
 8015390:	2100      	movs	r1, #0
 8015392:	b2ad      	uxth	r5, r5
 8015394:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015398:	e9cd 2107 	strd	r2, r1, [sp, #28]
 801539c:	8832      	ldrh	r2, [r6, #0]
 801539e:	4621      	mov	r1, r4
 80153a0:	9704      	str	r7, [sp, #16]
 80153a2:	9501      	str	r5, [sp, #4]
 80153a4:	e9cd 0205 	strd	r0, r2, [sp, #20]
 80153a8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80153ac:	9203      	str	r2, [sp, #12]
 80153ae:	fa1f f289 	uxth.w	r2, r9
 80153b2:	9202      	str	r2, [sp, #8]
 80153b4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80153b8:	9200      	str	r2, [sp, #0]
 80153ba:	4642      	mov	r2, r8
 80153bc:	f8da 0000 	ldr.w	r0, [sl]
 80153c0:	f7fc fb24 	bl	8011a0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80153c4:	b011      	add	sp, #68	; 0x44
 80153c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153ca:	f8da 0000 	ldr.w	r0, [sl]
 80153ce:	6803      	ldr	r3, [r0, #0]
 80153d0:	6a1b      	ldr	r3, [r3, #32]
 80153d2:	4798      	blx	r3
 80153d4:	8832      	ldrh	r2, [r6, #0]
 80153d6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80153da:	2fff      	cmp	r7, #255	; 0xff
 80153dc:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 80153e0:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 80153e4:	fb09 f902 	mul.w	r9, r9, r2
 80153e8:	fb02 1303 	mla	r3, r2, r3, r1
 80153ec:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80153f0:	d056      	beq.n	80154a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 80153f2:	ea6f 0c07 	mvn.w	ip, r7
 80153f6:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 80153fa:	b2bb      	uxth	r3, r7
 80153fc:	960b      	str	r6, [sp, #44]	; 0x2c
 80153fe:	fa5f fc8c 	uxtb.w	ip, ip
 8015402:	4548      	cmp	r0, r9
 8015404:	d27b      	bcs.n	80154fe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 8015406:	eb00 0a0e 	add.w	sl, r0, lr
 801540a:	4550      	cmp	r0, sl
 801540c:	4622      	mov	r2, r4
 801540e:	d23d      	bcs.n	801548c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x188>
 8015410:	7811      	ldrb	r1, [r2, #0]
 8015412:	2604      	movs	r6, #4
 8015414:	2203      	movs	r2, #3
 8015416:	3401      	adds	r4, #1
 8015418:	fb12 6101 	smlabb	r1, r2, r1, r6
 801541c:	8802      	ldrh	r2, [r0, #0]
 801541e:	eb08 0b01 	add.w	fp, r8, r1
 8015422:	1217      	asrs	r7, r2, #8
 8015424:	f818 1001 	ldrb.w	r1, [r8, r1]
 8015428:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801542c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8015430:	f89b b001 	ldrb.w	fp, [fp, #1]
 8015434:	fb16 f603 	smulbb	r6, r6, r3
 8015438:	fb1b fb03 	smulbb	fp, fp, r3
 801543c:	fb07 670c 	mla	r7, r7, ip, r6
 8015440:	10d6      	asrs	r6, r2, #3
 8015442:	00d2      	lsls	r2, r2, #3
 8015444:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8015448:	b2bf      	uxth	r7, r7
 801544a:	b2d2      	uxtb	r2, r2
 801544c:	fb06 b60c 	mla	r6, r6, ip, fp
 8015450:	fb12 f20c 	smulbb	r2, r2, ip
 8015454:	b2b6      	uxth	r6, r6
 8015456:	fb01 2103 	mla	r1, r1, r3, r2
 801545a:	1c7a      	adds	r2, r7, #1
 801545c:	f106 0b01 	add.w	fp, r6, #1
 8015460:	b289      	uxth	r1, r1
 8015462:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8015466:	1c4a      	adds	r2, r1, #1
 8015468:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801546c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8015470:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8015474:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8015478:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801547c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8015480:	4317      	orrs	r7, r2
 8015482:	ea47 070b 	orr.w	r7, r7, fp
 8015486:	f820 7b02 	strh.w	r7, [r0], #2
 801548a:	e7be      	b.n	801540a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 801548c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801548e:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8015492:	8812      	ldrh	r2, [r2, #0]
 8015494:	1b49      	subs	r1, r1, r5
 8015496:	1b52      	subs	r2, r2, r5
 8015498:	440c      	add	r4, r1
 801549a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801549e:	e7b0      	b.n	8015402 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfe>
 80154a0:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 80154a4:	2203      	movs	r2, #3
 80154a6:	2704      	movs	r7, #4
 80154a8:	491c      	ldr	r1, [pc, #112]	; (801551c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 80154aa:	4548      	cmp	r0, r9
 80154ac:	d227      	bcs.n	80154fe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 80154ae:	eb00 0c0e 	add.w	ip, r0, lr
 80154b2:	4560      	cmp	r0, ip
 80154b4:	4623      	mov	r3, r4
 80154b6:	d219      	bcs.n	80154ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e8>
 80154b8:	f893 a000 	ldrb.w	sl, [r3]
 80154bc:	3401      	adds	r4, #1
 80154be:	fb12 7a0a 	smlabb	sl, r2, sl, r7
 80154c2:	eb08 0b0a 	add.w	fp, r8, sl
 80154c6:	f818 a00a 	ldrb.w	sl, [r8, sl]
 80154ca:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80154ce:	f89b b001 	ldrb.w	fp, [fp, #1]
 80154d2:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 80154d6:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80154da:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80154de:	ea43 030b 	orr.w	r3, r3, fp
 80154e2:	ea43 03da 	orr.w	r3, r3, sl, lsr #3
 80154e6:	f820 3b02 	strh.w	r3, [r0], #2
 80154ea:	e7e2      	b.n	80154b2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 80154ec:	8833      	ldrh	r3, [r6, #0]
 80154ee:	1b5b      	subs	r3, r3, r5
 80154f0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80154f4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80154f8:	1b5b      	subs	r3, r3, r5
 80154fa:	441c      	add	r4, r3
 80154fc:	e7d5      	b.n	80154aa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 80154fe:	4b08      	ldr	r3, [pc, #32]	; (8015520 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8015500:	6818      	ldr	r0, [r3, #0]
 8015502:	6803      	ldr	r3, [r0, #0]
 8015504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015506:	4798      	blx	r3
 8015508:	e75c      	b.n	80153c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801550a:	bf00      	nop
 801550c:	08019e87 	.word	0x08019e87
 8015510:	0801a349 	.word	0x0801a349
 8015514:	0801a1c3 	.word	0x0801a1c3
 8015518:	2000124a 	.word	0x2000124a
 801551c:	fffff800 	.word	0xfffff800
 8015520:	20001250 	.word	0x20001250

08015524 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8015524:	b430      	push	{r4, r5}
 8015526:	780d      	ldrb	r5, [r1, #0]
 8015528:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801552c:	2d01      	cmp	r5, #1
 801552e:	d00a      	beq.n	8015546 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8015530:	d305      	bcc.n	801553e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8015532:	2d02      	cmp	r5, #2
 8015534:	d10b      	bne.n	801554e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8015536:	9402      	str	r4, [sp, #8]
 8015538:	bc30      	pop	{r4, r5}
 801553a:	f7ff bddf 	b.w	80150fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801553e:	9402      	str	r4, [sp, #8]
 8015540:	bc30      	pop	{r4, r5}
 8015542:	f7ff bce7 	b.w	8014f14 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8015546:	9402      	str	r4, [sp, #8]
 8015548:	bc30      	pop	{r4, r5}
 801554a:	f7ff bedb 	b.w	8015304 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801554e:	bc30      	pop	{r4, r5}
 8015550:	4770      	bx	lr
	...

08015554 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8015554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015558:	b087      	sub	sp, #28
 801555a:	4604      	mov	r4, r0
 801555c:	460e      	mov	r6, r1
 801555e:	6810      	ldr	r0, [r2, #0]
 8015560:	6851      	ldr	r1, [r2, #4]
 8015562:	ad02      	add	r5, sp, #8
 8015564:	4617      	mov	r7, r2
 8015566:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801556a:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801579c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801556e:	c503      	stmia	r5!, {r0, r1}
 8015570:	6818      	ldr	r0, [r3, #0]
 8015572:	ad04      	add	r5, sp, #16
 8015574:	6859      	ldr	r1, [r3, #4]
 8015576:	c503      	stmia	r5!, {r0, r1}
 8015578:	a802      	add	r0, sp, #8
 801557a:	f7fd fc8d 	bl	8012e98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801557e:	4639      	mov	r1, r7
 8015580:	a804      	add	r0, sp, #16
 8015582:	f7fd fc71 	bl	8012e68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015586:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801558a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801558e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8015592:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8015596:	fb11 2103 	smlabb	r1, r1, r3, r2
 801559a:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801559e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80155a2:	440e      	add	r6, r1
 80155a4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80155a8:	440a      	add	r2, r1
 80155aa:	f8ad 2010 	strh.w	r2, [sp, #16]
 80155ae:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80155b2:	4413      	add	r3, r2
 80155b4:	f8ad 3012 	strh.w	r3, [sp, #18]
 80155b8:	4b77      	ldr	r3, [pc, #476]	; (8015798 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80155ba:	6818      	ldr	r0, [r3, #0]
 80155bc:	6803      	ldr	r3, [r0, #0]
 80155be:	6a1b      	ldr	r3, [r3, #32]
 80155c0:	4798      	blx	r3
 80155c2:	f8b9 b000 	ldrh.w	fp, [r9]
 80155c6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80155ca:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80155ce:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80155d2:	fb05 f50b 	mul.w	r5, r5, fp
 80155d6:	fb0b 2303 	mla	r3, fp, r3, r2
 80155da:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80155de:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80155e2:	9300      	str	r3, [sp, #0]
 80155e4:	d068      	beq.n	80156b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x164>
 80155e6:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 80155ea:	4558      	cmp	r0, fp
 80155ec:	f080 80cc 	bcs.w	8015788 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80155f0:	9b00      	ldr	r3, [sp, #0]
 80155f2:	4631      	mov	r1, r6
 80155f4:	18c3      	adds	r3, r0, r3
 80155f6:	9301      	str	r3, [sp, #4]
 80155f8:	9b01      	ldr	r3, [sp, #4]
 80155fa:	4298      	cmp	r0, r3
 80155fc:	d24e      	bcs.n	801569c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x148>
 80155fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015602:	2a00      	cmp	r2, #0
 8015604:	d047      	beq.n	8015696 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 8015606:	fb0a f202 	mul.w	r2, sl, r2
 801560a:	1c53      	adds	r3, r2, #1
 801560c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8015610:	121b      	asrs	r3, r3, #8
 8015612:	d040      	beq.n	8015696 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 8015614:	8802      	ldrh	r2, [r0, #0]
 8015616:	b29e      	uxth	r6, r3
 8015618:	f8b4 c000 	ldrh.w	ip, [r4]
 801561c:	43db      	mvns	r3, r3
 801561e:	1215      	asrs	r5, r2, #8
 8015620:	b2db      	uxtb	r3, r3
 8015622:	ea4f 272c 	mov.w	r7, ip, asr #8
 8015626:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801562a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801562e:	fb15 f503 	smulbb	r5, r5, r3
 8015632:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8015636:	00d2      	lsls	r2, r2, #3
 8015638:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801563c:	fb07 5706 	mla	r7, r7, r6, r5
 8015640:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8015644:	b2d2      	uxtb	r2, r2
 8015646:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801564a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801564e:	fb1e fe03 	smulbb	lr, lr, r3
 8015652:	b2bf      	uxth	r7, r7
 8015654:	fb12 f203 	smulbb	r2, r2, r3
 8015658:	fa5f fc8c 	uxtb.w	ip, ip
 801565c:	fb05 e506 	mla	r5, r5, r6, lr
 8015660:	1c7b      	adds	r3, r7, #1
 8015662:	fb0c 2c06 	mla	ip, ip, r6, r2
 8015666:	b2ad      	uxth	r5, r5
 8015668:	fa1f fc8c 	uxth.w	ip, ip
 801566c:	f105 0e01 	add.w	lr, r5, #1
 8015670:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8015674:	f10c 0601 	add.w	r6, ip, #1
 8015678:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801567c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8015680:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8015684:	096d      	lsrs	r5, r5, #5
 8015686:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801568a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801568e:	ea47 070c 	orr.w	r7, r7, ip
 8015692:	432f      	orrs	r7, r5
 8015694:	8007      	strh	r7, [r0, #0]
 8015696:	3002      	adds	r0, #2
 8015698:	3402      	adds	r4, #2
 801569a:	e7ad      	b.n	80155f8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801569c:	f8b9 3000 	ldrh.w	r3, [r9]
 80156a0:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80156a4:	eba3 0308 	sub.w	r3, r3, r8
 80156a8:	eba6 0608 	sub.w	r6, r6, r8
 80156ac:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80156b0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80156b4:	440e      	add	r6, r1
 80156b6:	e798      	b.n	80155ea <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 80156b8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80156bc:	42a8      	cmp	r0, r5
 80156be:	d263      	bcs.n	8015788 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80156c0:	9b00      	ldr	r3, [sp, #0]
 80156c2:	4631      	mov	r1, r6
 80156c4:	eb00 0b03 	add.w	fp, r0, r3
 80156c8:	4558      	cmp	r0, fp
 80156ca:	d24f      	bcs.n	801576c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 80156cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80156d0:	b12b      	cbz	r3, 80156de <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 80156d2:	2bff      	cmp	r3, #255	; 0xff
 80156d4:	f8b4 e000 	ldrh.w	lr, [r4]
 80156d8:	d104      	bne.n	80156e4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x190>
 80156da:	f8a0 e000 	strh.w	lr, [r0]
 80156de:	3002      	adds	r0, #2
 80156e0:	3402      	adds	r4, #2
 80156e2:	e7f1      	b.n	80156c8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x174>
 80156e4:	8802      	ldrh	r2, [r0, #0]
 80156e6:	b29f      	uxth	r7, r3
 80156e8:	43db      	mvns	r3, r3
 80156ea:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80156ee:	1216      	asrs	r6, r2, #8
 80156f0:	b2db      	uxtb	r3, r3
 80156f2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80156f6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80156fa:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 80156fe:	00d2      	lsls	r2, r2, #3
 8015700:	fb16 f603 	smulbb	r6, r6, r3
 8015704:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8015708:	b2d2      	uxtb	r2, r2
 801570a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801570e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8015712:	fb1a fa03 	smulbb	sl, sl, r3
 8015716:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801571a:	fb12 f303 	smulbb	r3, r2, r3
 801571e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8015722:	fa5f fe8e 	uxtb.w	lr, lr
 8015726:	fb06 a607 	mla	r6, r6, r7, sl
 801572a:	fa1f fc8c 	uxth.w	ip, ip
 801572e:	fb0e 3e07 	mla	lr, lr, r7, r3
 8015732:	b2b6      	uxth	r6, r6
 8015734:	f10c 0201 	add.w	r2, ip, #1
 8015738:	fa1f fe8e 	uxth.w	lr, lr
 801573c:	f106 0a01 	add.w	sl, r6, #1
 8015740:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8015744:	f10e 0301 	add.w	r3, lr, #1
 8015748:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801574c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8015750:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8015754:	0976      	lsrs	r6, r6, #5
 8015756:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801575a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801575e:	ea4c 0c0e 	orr.w	ip, ip, lr
 8015762:	ea4c 0c06 	orr.w	ip, ip, r6
 8015766:	f8a0 c000 	strh.w	ip, [r0]
 801576a:	e7b8      	b.n	80156de <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 801576c:	f8b9 3000 	ldrh.w	r3, [r9]
 8015770:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8015774:	eba3 0308 	sub.w	r3, r3, r8
 8015778:	eba6 0608 	sub.w	r6, r6, r8
 801577c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8015780:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8015784:	440e      	add	r6, r1
 8015786:	e799      	b.n	80156bc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 8015788:	4b03      	ldr	r3, [pc, #12]	; (8015798 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801578a:	6818      	ldr	r0, [r3, #0]
 801578c:	6803      	ldr	r3, [r0, #0]
 801578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015790:	4798      	blx	r3
 8015792:	b007      	add	sp, #28
 8015794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015798:	20001250 	.word	0x20001250
 801579c:	2000124a 	.word	0x2000124a

080157a0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80157a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157a4:	b089      	sub	sp, #36	; 0x24
 80157a6:	4682      	mov	sl, r0
 80157a8:	460d      	mov	r5, r1
 80157aa:	4691      	mov	r9, r2
 80157ac:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 80157b0:	4698      	mov	r8, r3
 80157b2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80157b4:	b3ae      	cbz	r6, 8015822 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80157b6:	4608      	mov	r0, r1
 80157b8:	f7fe fca8 	bl	801410c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80157bc:	4607      	mov	r7, r0
 80157be:	4628      	mov	r0, r5
 80157c0:	f7fe fcde 	bl	8014180 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80157c4:	f8ad 000e 	strh.w	r0, [sp, #14]
 80157c8:	4628      	mov	r0, r5
 80157ca:	f8ad 9008 	strh.w	r9, [sp, #8]
 80157ce:	f8ad 800a 	strh.w	r8, [sp, #10]
 80157d2:	f8ad 700c 	strh.w	r7, [sp, #12]
 80157d6:	f7fe fe2b 	bl	8014430 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80157da:	b178      	cbz	r0, 80157fc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80157dc:	4628      	mov	r0, r5
 80157de:	f7fe fe27 	bl	8014430 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80157e2:	2802      	cmp	r0, #2
 80157e4:	d00a      	beq.n	80157fc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80157e6:	4628      	mov	r0, r5
 80157e8:	f7fe fe22 	bl	8014430 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80157ec:	280b      	cmp	r0, #11
 80157ee:	d005      	beq.n	80157fc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80157f0:	4b69      	ldr	r3, [pc, #420]	; (8015998 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 80157f2:	214b      	movs	r1, #75	; 0x4b
 80157f4:	4a69      	ldr	r2, [pc, #420]	; (801599c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 80157f6:	486a      	ldr	r0, [pc, #424]	; (80159a0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 80157f8:	f000 fe38 	bl	801646c <__assert_func>
 80157fc:	4628      	mov	r0, r5
 80157fe:	f7fe fd8d 	bl	801431c <_ZNK8touchgfx6Bitmap7getDataEv>
 8015802:	4607      	mov	r7, r0
 8015804:	4628      	mov	r0, r5
 8015806:	f7fe fdbb 	bl	8014380 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801580a:	4681      	mov	r9, r0
 801580c:	4628      	mov	r0, r5
 801580e:	f7fe fe0f 	bl	8014430 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015812:	2802      	cmp	r0, #2
 8015814:	d108      	bne.n	8015828 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8015816:	4633      	mov	r3, r6
 8015818:	4622      	mov	r2, r4
 801581a:	a902      	add	r1, sp, #8
 801581c:	4638      	mov	r0, r7
 801581e:	f7ff fa69 	bl	8014cf4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8015822:	b009      	add	sp, #36	; 0x24
 8015824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015828:	4628      	mov	r0, r5
 801582a:	f7fe fe01 	bl	8014430 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801582e:	280b      	cmp	r0, #11
 8015830:	d107      	bne.n	8015842 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 8015832:	9600      	str	r6, [sp, #0]
 8015834:	4623      	mov	r3, r4
 8015836:	aa02      	add	r2, sp, #8
 8015838:	4649      	mov	r1, r9
 801583a:	4638      	mov	r0, r7
 801583c:	f7ff fe72 	bl	8015524 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8015840:	e7ef      	b.n	8015822 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8015842:	4628      	mov	r0, r5
 8015844:	f7fe fd30 	bl	80142a8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8015848:	b950      	cbnz	r0, 8015860 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801584a:	f8da 3000 	ldr.w	r3, [sl]
 801584e:	aa02      	add	r2, sp, #8
 8015850:	4639      	mov	r1, r7
 8015852:	e9cd 6000 	strd	r6, r0, [sp]
 8015856:	4650      	mov	r0, sl
 8015858:	68dd      	ldr	r5, [r3, #12]
 801585a:	4623      	mov	r3, r4
 801585c:	47a8      	blx	r5
 801585e:	e7e0      	b.n	8015822 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8015860:	f10d 0818 	add.w	r8, sp, #24
 8015864:	4629      	mov	r1, r5
 8015866:	ad04      	add	r5, sp, #16
 8015868:	4640      	mov	r0, r8
 801586a:	f7fe fcc3 	bl	80141f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801586e:	e898 0003 	ldmia.w	r8, {r0, r1}
 8015872:	e885 0003 	stmia.w	r5, {r0, r1}
 8015876:	4628      	mov	r0, r5
 8015878:	4621      	mov	r1, r4
 801587a:	f7fb fd45 	bl	8011308 <_ZN8touchgfx4RectaNERKS0_>
 801587e:	4628      	mov	r0, r5
 8015880:	f7fb fd85 	bl	801138e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015884:	b138      	cbz	r0, 8015896 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 8015886:	4623      	mov	r3, r4
 8015888:	9600      	str	r6, [sp, #0]
 801588a:	aa02      	add	r2, sp, #8
 801588c:	4649      	mov	r1, r9
 801588e:	4638      	mov	r0, r7
 8015890:	f7ff fe60 	bl	8015554 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8015894:	e7c5      	b.n	8015822 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8015896:	f8da 3000 	ldr.w	r3, [sl]
 801589a:	aa02      	add	r2, sp, #8
 801589c:	4639      	mov	r1, r7
 801589e:	e9cd 6000 	strd	r6, r0, [sp]
 80158a2:	4650      	mov	r0, sl
 80158a4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 80158a8:	462b      	mov	r3, r5
 80158aa:	47d8      	blx	fp
 80158ac:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80158b0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80158b4:	4293      	cmp	r3, r2
 80158b6:	dd13      	ble.n	80158e0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 80158b8:	f9b4 0000 	ldrsh.w	r0, [r4]
 80158bc:	1a9b      	subs	r3, r3, r2
 80158be:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80158c2:	f8ad 0018 	strh.w	r0, [sp, #24]
 80158c6:	4638      	mov	r0, r7
 80158c8:	f8ad 201a 	strh.w	r2, [sp, #26]
 80158cc:	aa02      	add	r2, sp, #8
 80158ce:	f8ad 101c 	strh.w	r1, [sp, #28]
 80158d2:	4649      	mov	r1, r9
 80158d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80158d8:	4643      	mov	r3, r8
 80158da:	9600      	str	r6, [sp, #0]
 80158dc:	f7ff fe3a 	bl	8015554 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80158e0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80158e4:	f9b4 2000 	ldrsh.w	r2, [r4]
 80158e8:	4293      	cmp	r3, r2
 80158ea:	dd13      	ble.n	8015914 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 80158ec:	1a9b      	subs	r3, r3, r2
 80158ee:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80158f2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80158f6:	f8ad 2018 	strh.w	r2, [sp, #24]
 80158fa:	aa02      	add	r2, sp, #8
 80158fc:	f8ad 001a 	strh.w	r0, [sp, #26]
 8015900:	4638      	mov	r0, r7
 8015902:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015906:	4643      	mov	r3, r8
 8015908:	f8ad 101e 	strh.w	r1, [sp, #30]
 801590c:	4649      	mov	r1, r9
 801590e:	9600      	str	r6, [sp, #0]
 8015910:	f7ff fe20 	bl	8015554 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8015914:	88a2      	ldrh	r2, [r4, #4]
 8015916:	8823      	ldrh	r3, [r4, #0]
 8015918:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801591c:	4413      	add	r3, r2
 801591e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8015922:	440a      	add	r2, r1
 8015924:	b29b      	uxth	r3, r3
 8015926:	b292      	uxth	r2, r2
 8015928:	b218      	sxth	r0, r3
 801592a:	b211      	sxth	r1, r2
 801592c:	4288      	cmp	r0, r1
 801592e:	dd13      	ble.n	8015958 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 8015930:	1a9b      	subs	r3, r3, r2
 8015932:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8015936:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 801593a:	aa02      	add	r2, sp, #8
 801593c:	f8ad 1018 	strh.w	r1, [sp, #24]
 8015940:	4649      	mov	r1, r9
 8015942:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015946:	4643      	mov	r3, r8
 8015948:	f8ad 001e 	strh.w	r0, [sp, #30]
 801594c:	4638      	mov	r0, r7
 801594e:	9600      	str	r6, [sp, #0]
 8015950:	f8ad 501a 	strh.w	r5, [sp, #26]
 8015954:	f7ff fdfe 	bl	8015554 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8015958:	88e2      	ldrh	r2, [r4, #6]
 801595a:	8863      	ldrh	r3, [r4, #2]
 801595c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8015960:	4413      	add	r3, r2
 8015962:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8015966:	440a      	add	r2, r1
 8015968:	b29b      	uxth	r3, r3
 801596a:	b292      	uxth	r2, r2
 801596c:	b218      	sxth	r0, r3
 801596e:	b211      	sxth	r1, r2
 8015970:	4288      	cmp	r0, r1
 8015972:	f77f af56 	ble.w	8015822 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8015976:	f9b4 5000 	ldrsh.w	r5, [r4]
 801597a:	1a9b      	subs	r3, r3, r2
 801597c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8015980:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015984:	4643      	mov	r3, r8
 8015986:	f8ad 5018 	strh.w	r5, [sp, #24]
 801598a:	f8ad 101a 	strh.w	r1, [sp, #26]
 801598e:	f8ad 001c 	strh.w	r0, [sp, #28]
 8015992:	9600      	str	r6, [sp, #0]
 8015994:	e779      	b.n	801588a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 8015996:	bf00      	nop
 8015998:	08019ed5 	.word	0x08019ed5
 801599c:	0801a3d2 	.word	0x0801a3d2
 80159a0:	0801a1c3 	.word	0x0801a1c3

080159a4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 80159a4:	b508      	push	{r3, lr}
 80159a6:	b180      	cbz	r0, 80159ca <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 80159a8:	2902      	cmp	r1, #2
 80159aa:	d014      	beq.n	80159d6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 80159ac:	2903      	cmp	r1, #3
 80159ae:	d01d      	beq.n	80159ec <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 80159b0:	2901      	cmp	r1, #1
 80159b2:	d101      	bne.n	80159b8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 80159b4:	2001      	movs	r0, #1
 80159b6:	bd08      	pop	{r3, pc}
 80159b8:	4b0e      	ldr	r3, [pc, #56]	; (80159f4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 80159ba:	8818      	ldrh	r0, [r3, #0]
 80159bc:	b990      	cbnz	r0, 80159e4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 80159be:	4b0e      	ldr	r3, [pc, #56]	; (80159f8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 80159c0:	2154      	movs	r1, #84	; 0x54
 80159c2:	4a0e      	ldr	r2, [pc, #56]	; (80159fc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 80159c4:	480e      	ldr	r0, [pc, #56]	; (8015a00 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 80159c6:	f000 fd51 	bl	801646c <__assert_func>
 80159ca:	2902      	cmp	r1, #2
 80159cc:	d00e      	beq.n	80159ec <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 80159ce:	2903      	cmp	r1, #3
 80159d0:	d0f2      	beq.n	80159b8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 80159d2:	2901      	cmp	r1, #1
 80159d4:	d1ee      	bne.n	80159b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 80159d6:	4b07      	ldr	r3, [pc, #28]	; (80159f4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 80159d8:	8818      	ldrh	r0, [r3, #0]
 80159da:	2800      	cmp	r0, #0
 80159dc:	d0ef      	beq.n	80159be <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 80159de:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80159e2:	e7e8      	b.n	80159b6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 80159e4:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80159e8:	4240      	negs	r0, r0
 80159ea:	e7e4      	b.n	80159b6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 80159ec:	f04f 30ff 	mov.w	r0, #4294967295
 80159f0:	e7e1      	b.n	80159b6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 80159f2:	bf00      	nop
 80159f4:	2000124a 	.word	0x2000124a
 80159f8:	0801a1f5 	.word	0x0801a1f5
 80159fc:	0801a4e1 	.word	0x0801a4e1
 8015a00:	0801a237 	.word	0x0801a237

08015a04 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8015a04:	b508      	push	{r3, lr}
 8015a06:	b180      	cbz	r0, 8015a2a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8015a08:	2902      	cmp	r1, #2
 8015a0a:	d014      	beq.n	8015a36 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8015a0c:	2903      	cmp	r1, #3
 8015a0e:	d018      	beq.n	8015a42 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8015a10:	2901      	cmp	r1, #1
 8015a12:	d001      	beq.n	8015a18 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8015a14:	2001      	movs	r0, #1
 8015a16:	e013      	b.n	8015a40 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8015a18:	4b0e      	ldr	r3, [pc, #56]	; (8015a54 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8015a1a:	8818      	ldrh	r0, [r3, #0]
 8015a1c:	b970      	cbnz	r0, 8015a3c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 8015a1e:	4b0e      	ldr	r3, [pc, #56]	; (8015a58 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 8015a20:	2154      	movs	r1, #84	; 0x54
 8015a22:	4a0e      	ldr	r2, [pc, #56]	; (8015a5c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 8015a24:	480e      	ldr	r0, [pc, #56]	; (8015a60 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8015a26:	f000 fd21 	bl	801646c <__assert_func>
 8015a2a:	2902      	cmp	r1, #2
 8015a2c:	d009      	beq.n	8015a42 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8015a2e:	2903      	cmp	r1, #3
 8015a30:	d0f0      	beq.n	8015a14 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 8015a32:	2901      	cmp	r1, #1
 8015a34:	d1f0      	bne.n	8015a18 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8015a36:	f04f 30ff 	mov.w	r0, #4294967295
 8015a3a:	e001      	b.n	8015a40 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8015a3c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8015a40:	bd08      	pop	{r3, pc}
 8015a42:	4b04      	ldr	r3, [pc, #16]	; (8015a54 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8015a44:	8818      	ldrh	r0, [r3, #0]
 8015a46:	2800      	cmp	r0, #0
 8015a48:	d0e9      	beq.n	8015a1e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 8015a4a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8015a4e:	4240      	negs	r0, r0
 8015a50:	e7f6      	b.n	8015a40 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8015a52:	bf00      	nop
 8015a54:	2000124a 	.word	0x2000124a
 8015a58:	0801a1f5 	.word	0x0801a1f5
 8015a5c:	0801a4e1 	.word	0x0801a4e1
 8015a60:	0801a237 	.word	0x0801a237

08015a64 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8015a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a68:	b099      	sub	sp, #100	; 0x64
 8015a6a:	910b      	str	r1, [sp, #44]	; 0x2c
 8015a6c:	a914      	add	r1, sp, #80	; 0x50
 8015a6e:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 8015a72:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 8015a76:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 8015a7a:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8015a7e:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8015a82:	e881 000c 	stmia.w	r1, {r2, r3}
 8015a86:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8015a8a:	f89d 10a4 	ldrb.w	r1, [sp, #164]	; 0xa4
 8015a8e:	9308      	str	r3, [sp, #32]
 8015a90:	910c      	str	r1, [sp, #48]	; 0x30
 8015a92:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
 8015a96:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8015a9a:	910d      	str	r1, [sp, #52]	; 0x34
 8015a9c:	f893 b00d 	ldrb.w	fp, [r3, #13]
 8015aa0:	7998      	ldrb	r0, [r3, #6]
 8015aa2:	ea4f 114b 	mov.w	r1, fp, lsl #5
 8015aa6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8015aaa:	4301      	orrs	r1, r0
 8015aac:	9109      	str	r1, [sp, #36]	; 0x24
 8015aae:	f000 81e4 	beq.w	8015e7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8015ab2:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 8015ab6:	79d9      	ldrb	r1, [r3, #7]
 8015ab8:	f40b 7b80 	and.w	fp, fp, #256	; 0x100
 8015abc:	ea51 0b0b 	orrs.w	fp, r1, fp
 8015ac0:	f000 81db 	beq.w	8015e7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8015ac4:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8015ac8:	b29b      	uxth	r3, r3
 8015aca:	2e00      	cmp	r6, #0
 8015acc:	f000 80fd 	beq.w	8015cca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 8015ad0:	1af6      	subs	r6, r6, r3
 8015ad2:	b2b6      	uxth	r6, r6
 8015ad4:	0433      	lsls	r3, r6, #16
 8015ad6:	d502      	bpl.n	8015ade <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8015ad8:	1bad      	subs	r5, r5, r6
 8015ada:	2600      	movs	r6, #0
 8015adc:	b22d      	sxth	r5, r5
 8015ade:	f9b2 1000 	ldrsh.w	r1, [r2]
 8015ae2:	a814      	add	r0, sp, #80	; 0x50
 8015ae4:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8015ae8:	428d      	cmp	r5, r1
 8015aea:	b28b      	uxth	r3, r1
 8015aec:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8015af0:	bfbf      	itttt	lt
 8015af2:	18f6      	addlt	r6, r6, r3
 8015af4:	1b75      	sublt	r5, r6, r5
 8015af6:	b2ae      	uxthlt	r6, r5
 8015af8:	460d      	movlt	r5, r1
 8015afa:	8891      	ldrh	r1, [r2, #4]
 8015afc:	440b      	add	r3, r1
 8015afe:	4629      	mov	r1, r5
 8015b00:	b21b      	sxth	r3, r3
 8015b02:	9311      	str	r3, [sp, #68]	; 0x44
 8015b04:	8853      	ldrh	r3, [r2, #2]
 8015b06:	88d2      	ldrh	r2, [r2, #6]
 8015b08:	4413      	add	r3, r2
 8015b0a:	9a08      	ldr	r2, [sp, #32]
 8015b0c:	b21b      	sxth	r3, r3
 8015b0e:	9310      	str	r3, [sp, #64]	; 0x40
 8015b10:	4bb1      	ldr	r3, [pc, #708]	; (8015dd8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 8015b12:	f893 9000 	ldrb.w	r9, [r3]
 8015b16:	f109 3cff 	add.w	ip, r9, #4294967295
 8015b1a:	f1dc 0300 	rsbs	r3, ip, #0
 8015b1e:	eb43 030c 	adc.w	r3, r3, ip
 8015b22:	930f      	str	r3, [sp, #60]	; 0x3c
 8015b24:	4653      	mov	r3, sl
 8015b26:	f7fd f829 	bl	8012b7c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8015b2a:	4629      	mov	r1, r5
 8015b2c:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8015b30:	4653      	mov	r3, sl
 8015b32:	9a08      	ldr	r2, [sp, #32]
 8015b34:	a814      	add	r0, sp, #80	; 0x50
 8015b36:	f7fd f839 	bl	8012bac <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8015b3a:	a918      	add	r1, sp, #96	; 0x60
 8015b3c:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8015b40:	a817      	add	r0, sp, #92	; 0x5c
 8015b42:	f7fd f97b 	bl	8012e3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8015b46:	f1ba 0f00 	cmp.w	sl, #0
 8015b4a:	f040 80c1 	bne.w	8015cd0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26c>
 8015b4e:	f1b9 0f01 	cmp.w	r9, #1
 8015b52:	f040 80c5 	bne.w	8015ce0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27c>
 8015b56:	2301      	movs	r3, #1
 8015b58:	f1b8 0f01 	cmp.w	r8, #1
 8015b5c:	fa03 f308 	lsl.w	r3, r3, r8
 8015b60:	f103 33ff 	add.w	r3, r3, #4294967295
 8015b64:	b2db      	uxtb	r3, r3
 8015b66:	930a      	str	r3, [sp, #40]	; 0x28
 8015b68:	f000 80e5 	beq.w	8015d36 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d2>
 8015b6c:	f1b8 0f02 	cmp.w	r8, #2
 8015b70:	f000 80e4 	beq.w	8015d3c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 8015b74:	f1b8 0f04 	cmp.w	r8, #4
 8015b78:	bf15      	itete	ne
 8015b7a:	46c1      	movne	r9, r8
 8015b7c:	f04f 0904 	moveq.w	r9, #4
 8015b80:	2301      	movne	r3, #1
 8015b82:	2311      	moveq	r3, #17
 8015b84:	9307      	str	r3, [sp, #28]
 8015b86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b88:	b153      	cbz	r3, 8015ba0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 8015b8a:	2408      	movs	r4, #8
 8015b8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b8e:	fb94 f3f9 	sdiv	r3, r4, r9
 8015b92:	1e5c      	subs	r4, r3, #1
 8015b94:	4414      	add	r4, r2
 8015b96:	fb94 f4f3 	sdiv	r4, r4, r3
 8015b9a:	fb14 f403 	smulbb	r4, r4, r3
 8015b9e:	b2a4      	uxth	r4, r4
 8015ba0:	b906      	cbnz	r6, 8015ba4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 8015ba2:	b16f      	cbz	r7, 8015bc0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15c>
 8015ba4:	fb07 6304 	mla	r3, r7, r4, r6
 8015ba8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8015baa:	4639      	mov	r1, r7
 8015bac:	fb08 f303 	mul.w	r3, r8, r3
 8015bb0:	f003 0707 	and.w	r7, r3, #7
 8015bb4:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
 8015bb8:	9328      	str	r3, [sp, #160]	; 0xa0
 8015bba:	ebab 0301 	sub.w	r3, fp, r1
 8015bbe:	930e      	str	r3, [sp, #56]	; 0x38
 8015bc0:	4651      	mov	r1, sl
 8015bc2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015bc4:	f7ff feee 	bl	80159a4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8015bc8:	4651      	mov	r1, sl
 8015bca:	4683      	mov	fp, r0
 8015bcc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015bce:	f7ff ff19 	bl	8015a04 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8015bd2:	9a08      	ldr	r2, [sp, #32]
 8015bd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015bd6:	4682      	mov	sl, r0
 8015bd8:	1a9b      	subs	r3, r3, r2
 8015bda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015bdc:	429a      	cmp	r2, r3
 8015bde:	bfa8      	it	ge
 8015be0:	461a      	movge	r2, r3
 8015be2:	2a00      	cmp	r2, #0
 8015be4:	9208      	str	r2, [sp, #32]
 8015be6:	f340 8148 	ble.w	8015e7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8015bea:	1bad      	subs	r5, r5, r6
 8015bec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015bee:	1b5d      	subs	r5, r3, r5
 8015bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bf2:	429d      	cmp	r5, r3
 8015bf4:	bfd4      	ite	le
 8015bf6:	ebc6 0605 	rsble	r6, r6, r5
 8015bfa:	ebc6 0603 	rsbgt	r6, r6, r3
 8015bfe:	2e00      	cmp	r6, #0
 8015c00:	f340 813b 	ble.w	8015e7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8015c04:	1ba4      	subs	r4, r4, r6
 8015c06:	fb09 f304 	mul.w	r3, r9, r4
 8015c0a:	930e      	str	r3, [sp, #56]	; 0x38
 8015c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	f040 809d 	bne.w	8015d4e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ea>
 8015c14:	4b71      	ldr	r3, [pc, #452]	; (8015ddc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8015c16:	6818      	ldr	r0, [r3, #0]
 8015c18:	6803      	ldr	r3, [r0, #0]
 8015c1a:	6a1b      	ldr	r3, [r3, #32]
 8015c1c:	4798      	blx	r3
 8015c1e:	4970      	ldr	r1, [pc, #448]	; (8015de0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 8015c20:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8015c24:	880c      	ldrh	r4, [r1, #0]
 8015c26:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 8015c2a:	fb04 1303 	mla	r3, r4, r3, r1
 8015c2e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015c32:	9309      	str	r3, [sp, #36]	; 0x24
 8015c34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015c36:	7819      	ldrb	r1, [r3, #0]
 8015c38:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015c3a:	4139      	asrs	r1, r7
 8015c3c:	0a1b      	lsrs	r3, r3, #8
 8015c3e:	b2c9      	uxtb	r1, r1
 8015c40:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8015c44:	930f      	str	r3, [sp, #60]	; 0x3c
 8015c46:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015c48:	08db      	lsrs	r3, r3, #3
 8015c4a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8015c4e:	9310      	str	r3, [sp, #64]	; 0x40
 8015c50:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015c52:	00db      	lsls	r3, r3, #3
 8015c54:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8015c58:	9311      	str	r3, [sp, #68]	; 0x44
 8015c5a:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8015c5e:	fb0b ab16 	mls	fp, fp, r6, sl
 8015c62:	fb03 fa06 	mul.w	sl, r3, r6
 8015c66:	930c      	str	r3, [sp, #48]	; 0x30
 8015c68:	eb0a 034b 	add.w	r3, sl, fp, lsl #1
 8015c6c:	9312      	str	r3, [sp, #72]	; 0x48
 8015c6e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015c70:	b29b      	uxth	r3, r3
 8015c72:	9313      	str	r3, [sp, #76]	; 0x4c
 8015c74:	9b08      	ldr	r3, [sp, #32]
 8015c76:	3b01      	subs	r3, #1
 8015c78:	9308      	str	r3, [sp, #32]
 8015c7a:	3301      	adds	r3, #1
 8015c7c:	f000 80c4 	beq.w	8015e08 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 8015c80:	46b2      	mov	sl, r6
 8015c82:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8015c86:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8015c8a:	f0c0 80ab 	bcc.w	8015de4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8015c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c90:	400b      	ands	r3, r1
 8015c92:	d00a      	beq.n	8015caa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x246>
 8015c94:	9807      	ldr	r0, [sp, #28]
 8015c96:	fb13 f300 	smulbb	r3, r3, r0
 8015c9a:	2bfe      	cmp	r3, #254	; 0xfe
 8015c9c:	dd59      	ble.n	8015d52 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 8015c9e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015ca0:	28ff      	cmp	r0, #255	; 0xff
 8015ca2:	d156      	bne.n	8015d52 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 8015ca4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015ca6:	f8ae 4000 	strh.w	r4, [lr]
 8015caa:	4447      	add	r7, r8
 8015cac:	b2bf      	uxth	r7, r7
 8015cae:	2f07      	cmp	r7, #7
 8015cb0:	bf89      	itett	hi
 8015cb2:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8015cb4:	fa41 f109 	asrls.w	r1, r1, r9
 8015cb8:	2700      	movhi	r7, #0
 8015cba:	7859      	ldrbhi	r1, [r3, #1]
 8015cbc:	bf8a      	itet	hi
 8015cbe:	3301      	addhi	r3, #1
 8015cc0:	b2c9      	uxtbls	r1, r1
 8015cc2:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8015cc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015cc6:	449e      	add	lr, r3
 8015cc8:	e7dd      	b.n	8015c86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x222>
 8015cca:	441d      	add	r5, r3
 8015ccc:	b22d      	sxth	r5, r5
 8015cce:	e706      	b.n	8015ade <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8015cd0:	f1ba 0f01 	cmp.w	sl, #1
 8015cd4:	f47f af3f 	bne.w	8015b56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8015cd8:	f1b9 0f01 	cmp.w	r9, #1
 8015cdc:	f47f af3b 	bne.w	8015b56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8015ce0:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8015ddc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8015ce4:	f8d9 0000 	ldr.w	r0, [r9]
 8015ce8:	6803      	ldr	r3, [r0, #0]
 8015cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015cec:	4798      	blx	r3
 8015cee:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8015cf2:	464a      	mov	r2, r9
 8015cf4:	d006      	beq.n	8015d04 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 8015cf6:	f1b8 0f04 	cmp.w	r8, #4
 8015cfa:	d11a      	bne.n	8015d32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8015cfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015cfe:	3300      	adds	r3, #0
 8015d00:	bf18      	it	ne
 8015d02:	2301      	movne	r3, #1
 8015d04:	05c0      	lsls	r0, r0, #23
 8015d06:	f140 8088 	bpl.w	8015e1a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 8015d0a:	f1b8 0f08 	cmp.w	r8, #8
 8015d0e:	f040 8084 	bne.w	8015e1a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	bf14      	ite	ne
 8015d16:	2180      	movne	r1, #128	; 0x80
 8015d18:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8015d1c:	2e00      	cmp	r6, #0
 8015d1e:	f040 80af 	bne.w	8015e80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x41c>
 8015d22:	2f00      	cmp	r7, #0
 8015d24:	f000 8083 	beq.w	8015e2e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8015d28:	23ff      	movs	r3, #255	; 0xff
 8015d2a:	46c1      	mov	r9, r8
 8015d2c:	930a      	str	r3, [sp, #40]	; 0x28
 8015d2e:	2301      	movs	r3, #1
 8015d30:	e728      	b.n	8015b84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 8015d32:	2300      	movs	r3, #0
 8015d34:	e7e6      	b.n	8015d04 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 8015d36:	46c1      	mov	r9, r8
 8015d38:	23ff      	movs	r3, #255	; 0xff
 8015d3a:	e723      	b.n	8015b84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 8015d3c:	46c1      	mov	r9, r8
 8015d3e:	2355      	movs	r3, #85	; 0x55
 8015d40:	e720      	b.n	8015b84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 8015d42:	23ff      	movs	r3, #255	; 0xff
 8015d44:	46c1      	mov	r9, r8
 8015d46:	930a      	str	r3, [sp, #40]	; 0x28
 8015d48:	2301      	movs	r3, #1
 8015d4a:	9307      	str	r3, [sp, #28]
 8015d4c:	e71d      	b.n	8015b8a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x126>
 8015d4e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015d50:	e765      	b.n	8015c1e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ba>
 8015d52:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015d54:	f8be 5000 	ldrh.w	r5, [lr]
 8015d58:	fb10 f303 	smulbb	r3, r0, r3
 8015d5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015d5e:	122c      	asrs	r4, r5, #8
 8015d60:	b29b      	uxth	r3, r3
 8015d62:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8015d66:	1c58      	adds	r0, r3, #1
 8015d68:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8015d6c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015d6e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015d72:	fa1f fc83 	uxth.w	ip, r3
 8015d76:	43db      	mvns	r3, r3
 8015d78:	fb10 f00c 	smulbb	r0, r0, ip
 8015d7c:	b2db      	uxtb	r3, r3
 8015d7e:	fb1c fb02 	smulbb	fp, ip, r2
 8015d82:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015d84:	fb04 0403 	mla	r4, r4, r3, r0
 8015d88:	10e8      	asrs	r0, r5, #3
 8015d8a:	fb1c fc02 	smulbb	ip, ip, r2
 8015d8e:	00ed      	lsls	r5, r5, #3
 8015d90:	b2a4      	uxth	r4, r4
 8015d92:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8015d96:	b2ed      	uxtb	r5, r5
 8015d98:	fb00 b003 	mla	r0, r0, r3, fp
 8015d9c:	fb05 cc03 	mla	ip, r5, r3, ip
 8015da0:	1c63      	adds	r3, r4, #1
 8015da2:	b280      	uxth	r0, r0
 8015da4:	fa1f fc8c 	uxth.w	ip, ip
 8015da8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8015dac:	f10c 0b01 	add.w	fp, ip, #1
 8015db0:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8015db4:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 8015db8:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8015dbc:	ea44 040b 	orr.w	r4, r4, fp
 8015dc0:	f100 0b01 	add.w	fp, r0, #1
 8015dc4:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8015dc8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8015dcc:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8015dd0:	ea44 040b 	orr.w	r4, r4, fp
 8015dd4:	e767      	b.n	8015ca6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x242>
 8015dd6:	bf00      	nop
 8015dd8:	20001248 	.word	0x20001248
 8015ddc:	20001250 	.word	0x20001250
 8015de0:	2000124a 	.word	0x2000124a
 8015de4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015de6:	b153      	cbz	r3, 8015dfe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8015de8:	441f      	add	r7, r3
 8015dea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015dec:	b2bf      	uxth	r7, r7
 8015dee:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 8015df2:	f007 0707 	and.w	r7, r7, #7
 8015df6:	7819      	ldrb	r1, [r3, #0]
 8015df8:	9328      	str	r3, [sp, #160]	; 0xa0
 8015dfa:	4139      	asrs	r1, r7
 8015dfc:	b2c9      	uxtb	r1, r1
 8015dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015e02:	441a      	add	r2, r3
 8015e04:	9209      	str	r2, [sp, #36]	; 0x24
 8015e06:	e735      	b.n	8015c74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x210>
 8015e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d135      	bne.n	8015e7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8015e0e:	4b21      	ldr	r3, [pc, #132]	; (8015e94 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x430>)
 8015e10:	6818      	ldr	r0, [r3, #0]
 8015e12:	6803      	ldr	r3, [r0, #0]
 8015e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e16:	4798      	blx	r3
 8015e18:	e02f      	b.n	8015e7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	f43f ae9b 	beq.w	8015b56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8015e20:	2e00      	cmp	r6, #0
 8015e22:	f47f ae98 	bne.w	8015b56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8015e26:	2f00      	cmp	r7, #0
 8015e28:	f47f ae95 	bne.w	8015b56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8015e2c:	2180      	movs	r1, #128	; 0x80
 8015e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e30:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015e32:	18eb      	adds	r3, r5, r3
 8015e34:	4283      	cmp	r3, r0
 8015e36:	f73f ae8e 	bgt.w	8015b56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8015e3a:	9b08      	ldr	r3, [sp, #32]
 8015e3c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015e3e:	445b      	add	r3, fp
 8015e40:	4283      	cmp	r3, r0
 8015e42:	f73f ae88 	bgt.w	8015b56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8015e46:	f1b8 0f08 	cmp.w	r8, #8
 8015e4a:	6810      	ldr	r0, [r2, #0]
 8015e4c:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8015e50:	bf18      	it	ne
 8015e52:	3401      	addne	r4, #1
 8015e54:	6805      	ldr	r5, [r0, #0]
 8015e56:	9105      	str	r1, [sp, #20]
 8015e58:	bf18      	it	ne
 8015e5a:	f024 0401 	bicne.w	r4, r4, #1
 8015e5e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015e60:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8015e64:	bf18      	it	ne
 8015e66:	b2a4      	uxthne	r4, r4
 8015e68:	9104      	str	r1, [sp, #16]
 8015e6a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8015e6c:	e9cd 4b00 	strd	r4, fp, [sp]
 8015e70:	e9cd 4102 	strd	r4, r1, [sp, #8]
 8015e74:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8015e76:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8015e78:	47a0      	blx	r4
 8015e7a:	b019      	add	sp, #100	; 0x64
 8015e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	f47f af5d 	bne.w	8015d42 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8015e88:	23ff      	movs	r3, #255	; 0xff
 8015e8a:	46c1      	mov	r9, r8
 8015e8c:	930a      	str	r3, [sp, #40]	; 0x28
 8015e8e:	2301      	movs	r3, #1
 8015e90:	9307      	str	r3, [sp, #28]
 8015e92:	e687      	b.n	8015ba4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 8015e94:	20001250 	.word	0x20001250

08015e98 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8015e98:	6101      	str	r1, [r0, #16]
 8015e9a:	4770      	bx	lr

08015e9c <_ZN8touchgfx8Gestures4tickEv>:
 8015e9c:	7b83      	ldrb	r3, [r0, #14]
 8015e9e:	b14b      	cbz	r3, 8015eb4 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8015ea0:	8903      	ldrh	r3, [r0, #8]
 8015ea2:	3301      	adds	r3, #1
 8015ea4:	b29b      	uxth	r3, r3
 8015ea6:	2b07      	cmp	r3, #7
 8015ea8:	8103      	strh	r3, [r0, #8]
 8015eaa:	bf81      	itttt	hi
 8015eac:	2300      	movhi	r3, #0
 8015eae:	8143      	strhhi	r3, [r0, #10]
 8015eb0:	8183      	strhhi	r3, [r0, #12]
 8015eb2:	7383      	strbhi	r3, [r0, #14]
 8015eb4:	4770      	bx	lr
	...

08015eb8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8015eb8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8015ebc:	4604      	mov	r4, r0
 8015ebe:	4698      	mov	r8, r3
 8015ec0:	8880      	ldrh	r0, [r0, #4]
 8015ec2:	4617      	mov	r7, r2
 8015ec4:	4b1d      	ldr	r3, [pc, #116]	; (8015f3c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8015ec6:	460e      	mov	r6, r1
 8015ec8:	f8ad 0006 	strh.w	r0, [sp, #6]
 8015ecc:	eba8 0000 	sub.w	r0, r8, r0
 8015ed0:	9300      	str	r3, [sp, #0]
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	b280      	uxth	r0, r0
 8015ed6:	8aa2      	ldrh	r2, [r4, #20]
 8015ed8:	f88d 3004 	strb.w	r3, [sp, #4]
 8015edc:	b203      	sxth	r3, r0
 8015ede:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8015ee2:	88e1      	ldrh	r1, [r4, #6]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	f8ad 800a 	strh.w	r8, [sp, #10]
 8015eea:	f8ad 1008 	strh.w	r1, [sp, #8]
 8015eee:	bfb8      	it	lt
 8015ef0:	4240      	neglt	r0, r0
 8015ef2:	f8ad 500c 	strh.w	r5, [sp, #12]
 8015ef6:	bfb8      	it	lt
 8015ef8:	b203      	sxthlt	r3, r0
 8015efa:	4293      	cmp	r3, r2
 8015efc:	dc08      	bgt.n	8015f10 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8015efe:	1a69      	subs	r1, r5, r1
 8015f00:	b289      	uxth	r1, r1
 8015f02:	b20b      	sxth	r3, r1
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	bfbc      	itt	lt
 8015f08:	4249      	neglt	r1, r1
 8015f0a:	b20b      	sxthlt	r3, r1
 8015f0c:	429a      	cmp	r2, r3
 8015f0e:	da13      	bge.n	8015f38 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8015f10:	6920      	ldr	r0, [r4, #16]
 8015f12:	4669      	mov	r1, sp
 8015f14:	eba8 0606 	sub.w	r6, r8, r6
 8015f18:	1bef      	subs	r7, r5, r7
 8015f1a:	6803      	ldr	r3, [r0, #0]
 8015f1c:	685b      	ldr	r3, [r3, #4]
 8015f1e:	4798      	blx	r3
 8015f20:	2300      	movs	r3, #0
 8015f22:	2001      	movs	r0, #1
 8015f24:	8166      	strh	r6, [r4, #10]
 8015f26:	8123      	strh	r3, [r4, #8]
 8015f28:	81a7      	strh	r7, [r4, #12]
 8015f2a:	f8a4 8004 	strh.w	r8, [r4, #4]
 8015f2e:	80e5      	strh	r5, [r4, #6]
 8015f30:	73a0      	strb	r0, [r4, #14]
 8015f32:	b004      	add	sp, #16
 8015f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f38:	2000      	movs	r0, #0
 8015f3a:	e7fa      	b.n	8015f32 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8015f3c:	08019674 	.word	0x08019674

08015f40 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8015f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f42:	461e      	mov	r6, r3
 8015f44:	1e4b      	subs	r3, r1, #1
 8015f46:	b085      	sub	sp, #20
 8015f48:	4604      	mov	r4, r0
 8015f4a:	2b01      	cmp	r3, #1
 8015f4c:	460d      	mov	r5, r1
 8015f4e:	4617      	mov	r7, r2
 8015f50:	d84b      	bhi.n	8015fea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8015f52:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015f56:	1cd3      	adds	r3, r2, #3
 8015f58:	b29b      	uxth	r3, r3
 8015f5a:	2b06      	cmp	r3, #6
 8015f5c:	d916      	bls.n	8015f8c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8015f5e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8016000 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8015f62:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8015f66:	f8cd c004 	str.w	ip, [sp, #4]
 8015f6a:	f04f 0c00 	mov.w	ip, #0
 8015f6e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8015f72:	6900      	ldr	r0, [r0, #16]
 8015f74:	f8ad 100c 	strh.w	r1, [sp, #12]
 8015f78:	a901      	add	r1, sp, #4
 8015f7a:	f88d c008 	strb.w	ip, [sp, #8]
 8015f7e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8015f82:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015f86:	6803      	ldr	r3, [r0, #0]
 8015f88:	689b      	ldr	r3, [r3, #8]
 8015f8a:	4798      	blx	r3
 8015f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015f90:	1cd3      	adds	r3, r2, #3
 8015f92:	b29b      	uxth	r3, r3
 8015f94:	2b06      	cmp	r3, #6
 8015f96:	d916      	bls.n	8015fc6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8015f98:	f8df c064 	ldr.w	ip, [pc, #100]	; 8016000 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8015f9c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8015fa0:	f8cd c004 	str.w	ip, [sp, #4]
 8015fa4:	f04f 0c01 	mov.w	ip, #1
 8015fa8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8015fac:	6920      	ldr	r0, [r4, #16]
 8015fae:	f8ad 100c 	strh.w	r1, [sp, #12]
 8015fb2:	a901      	add	r1, sp, #4
 8015fb4:	f88d c008 	strb.w	ip, [sp, #8]
 8015fb8:	f8ad 200a 	strh.w	r2, [sp, #10]
 8015fbc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015fc0:	6803      	ldr	r3, [r0, #0]
 8015fc2:	689b      	ldr	r3, [r3, #8]
 8015fc4:	4798      	blx	r3
 8015fc6:	4b0d      	ldr	r3, [pc, #52]	; (8015ffc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8015fc8:	a901      	add	r1, sp, #4
 8015fca:	6920      	ldr	r0, [r4, #16]
 8015fcc:	9301      	str	r3, [sp, #4]
 8015fce:	2300      	movs	r3, #0
 8015fd0:	f88d 5008 	strb.w	r5, [sp, #8]
 8015fd4:	f8ad 700a 	strh.w	r7, [sp, #10]
 8015fd8:	f8ad 600c 	strh.w	r6, [sp, #12]
 8015fdc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015fe0:	6803      	ldr	r3, [r0, #0]
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	4798      	blx	r3
 8015fe6:	b005      	add	sp, #20
 8015fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015fea:	2900      	cmp	r1, #0
 8015fec:	d1eb      	bne.n	8015fc6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8015fee:	80a2      	strh	r2, [r4, #4]
 8015ff0:	80c6      	strh	r6, [r0, #6]
 8015ff2:	60a1      	str	r1, [r4, #8]
 8015ff4:	81a1      	strh	r1, [r4, #12]
 8015ff6:	73a1      	strb	r1, [r4, #14]
 8015ff8:	e7e5      	b.n	8015fc6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8015ffa:	bf00      	nop
 8015ffc:	08019660 	.word	0x08019660
 8016000:	08019688 	.word	0x08019688

08016004 <_ZdlPv>:
 8016004:	f000 ba9a 	b.w	801653c <free>

08016008 <_ZdlPvj>:
 8016008:	f7ff bffc 	b.w	8016004 <_ZdlPv>

0801600c <__cxa_guard_acquire>:
 801600c:	6803      	ldr	r3, [r0, #0]
 801600e:	07db      	lsls	r3, r3, #31
 8016010:	d406      	bmi.n	8016020 <__cxa_guard_acquire+0x14>
 8016012:	7843      	ldrb	r3, [r0, #1]
 8016014:	b103      	cbz	r3, 8016018 <__cxa_guard_acquire+0xc>
 8016016:	deff      	udf	#255	; 0xff
 8016018:	2301      	movs	r3, #1
 801601a:	7043      	strb	r3, [r0, #1]
 801601c:	4618      	mov	r0, r3
 801601e:	4770      	bx	lr
 8016020:	2000      	movs	r0, #0
 8016022:	4770      	bx	lr

08016024 <__cxa_guard_release>:
 8016024:	2301      	movs	r3, #1
 8016026:	6003      	str	r3, [r0, #0]
 8016028:	4770      	bx	lr

0801602a <_Znwj>:
 801602a:	2801      	cmp	r0, #1
 801602c:	bf38      	it	cc
 801602e:	2001      	movcc	r0, #1
 8016030:	b510      	push	{r4, lr}
 8016032:	4604      	mov	r4, r0
 8016034:	4620      	mov	r0, r4
 8016036:	f000 fa79 	bl	801652c <malloc>
 801603a:	b930      	cbnz	r0, 801604a <_Znwj+0x20>
 801603c:	f000 fa06 	bl	801644c <_ZSt15get_new_handlerv>
 8016040:	b908      	cbnz	r0, 8016046 <_Znwj+0x1c>
 8016042:	f000 fa0b 	bl	801645c <abort>
 8016046:	4780      	blx	r0
 8016048:	e7f4      	b.n	8016034 <_Znwj+0xa>
 801604a:	bd10      	pop	{r4, pc}

0801604c <__cxa_pure_virtual>:
 801604c:	b508      	push	{r3, lr}
 801604e:	f000 f9f7 	bl	8016440 <_ZSt9terminatev>

08016052 <_ZNSaIcEC1Ev>:
 8016052:	4770      	bx	lr

08016054 <_ZNSaIcED1Ev>:
 8016054:	4770      	bx	lr

08016056 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 8016056:	684b      	ldr	r3, [r1, #4]
 8016058:	6043      	str	r3, [r0, #4]
 801605a:	684b      	ldr	r3, [r1, #4]
 801605c:	6001      	str	r1, [r0, #0]
 801605e:	6018      	str	r0, [r3, #0]
 8016060:	6048      	str	r0, [r1, #4]
 8016062:	4770      	bx	lr

08016064 <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 8016064:	e9d0 3200 	ldrd	r3, r2, [r0]
 8016068:	6013      	str	r3, [r2, #0]
 801606a:	605a      	str	r2, [r3, #4]
 801606c:	4770      	bx	lr

0801606e <_ZSt17__throw_bad_allocv>:
 801606e:	b508      	push	{r3, lr}
 8016070:	f000 f9f4 	bl	801645c <abort>

08016074 <_ZSt19__throw_logic_errorPKc>:
 8016074:	b508      	push	{r3, lr}
 8016076:	f000 f9f1 	bl	801645c <abort>

0801607a <_ZSt20__throw_length_errorPKc>:
 801607a:	b508      	push	{r3, lr}
 801607c:	f000 f9ee 	bl	801645c <abort>

08016080 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8016080:	b10a      	cbz	r2, 8016086 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8016082:	f000 ba63 	b.w	801654c <memcpy>
 8016086:	4770      	bx	lr

08016088 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8016088:	b508      	push	{r3, lr}
 801608a:	680b      	ldr	r3, [r1, #0]
 801608c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016090:	d302      	bcc.n	8016098 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8016092:	480d      	ldr	r0, [pc, #52]	; (80160c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8016094:	f7ff fff1 	bl	801607a <_ZSt20__throw_length_errorPKc>
 8016098:	4293      	cmp	r3, r2
 801609a:	d90b      	bls.n	80160b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801609c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80160a0:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80160a4:	d206      	bcs.n	80160b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80160a6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80160aa:	bf2a      	itet	cs
 80160ac:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 80160b0:	6008      	strcc	r0, [r1, #0]
 80160b2:	600b      	strcs	r3, [r1, #0]
 80160b4:	6808      	ldr	r0, [r1, #0]
 80160b6:	3001      	adds	r0, #1
 80160b8:	d501      	bpl.n	80160be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80160ba:	f7ff ffd8 	bl	801606e <_ZSt17__throw_bad_allocv>
 80160be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80160c2:	f7ff bfb2 	b.w	801602a <_Znwj>
 80160c6:	bf00      	nop
 80160c8:	0801a698 	.word	0x0801a698

080160cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80160cc:	f850 3b08 	ldr.w	r3, [r0], #8
 80160d0:	4283      	cmp	r3, r0
 80160d2:	d002      	beq.n	80160da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80160d4:	4618      	mov	r0, r3
 80160d6:	f7ff bf95 	b.w	8016004 <_ZdlPv>
 80160da:	4770      	bx	lr

080160dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80160dc:	6840      	ldr	r0, [r0, #4]
 80160de:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80160e2:	3901      	subs	r1, #1
 80160e4:	1a09      	subs	r1, r1, r0
 80160e6:	4291      	cmp	r1, r2
 80160e8:	b508      	push	{r3, lr}
 80160ea:	d202      	bcs.n	80160f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80160ec:	4618      	mov	r0, r3
 80160ee:	f7ff ffc4 	bl	801607a <_ZSt20__throw_length_errorPKc>
 80160f2:	bd08      	pop	{r3, pc}

080160f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80160f4:	6803      	ldr	r3, [r0, #0]
 80160f6:	428b      	cmp	r3, r1
 80160f8:	d806      	bhi.n	8016108 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80160fa:	6840      	ldr	r0, [r0, #4]
 80160fc:	4418      	add	r0, r3
 80160fe:	4281      	cmp	r1, r0
 8016100:	bf94      	ite	ls
 8016102:	2000      	movls	r0, #0
 8016104:	2001      	movhi	r0, #1
 8016106:	4770      	bx	lr
 8016108:	2001      	movs	r0, #1
 801610a:	4770      	bx	lr

0801610c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 801610c:	2a01      	cmp	r2, #1
 801610e:	b510      	push	{r4, lr}
 8016110:	d102      	bne.n	8016118 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8016112:	780a      	ldrb	r2, [r1, #0]
 8016114:	7002      	strb	r2, [r0, #0]
 8016116:	bd10      	pop	{r4, pc}
 8016118:	f7ff ffb2 	bl	8016080 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 801611c:	e7fb      	b.n	8016116 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0801611e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 801611e:	2a01      	cmp	r2, #1
 8016120:	b430      	push	{r4, r5}
 8016122:	d103      	bne.n	801612c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8016124:	780b      	ldrb	r3, [r1, #0]
 8016126:	7003      	strb	r3, [r0, #0]
 8016128:	bc30      	pop	{r4, r5}
 801612a:	4770      	bx	lr
 801612c:	2a00      	cmp	r2, #0
 801612e:	d0fb      	beq.n	8016128 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8016130:	bc30      	pop	{r4, r5}
 8016132:	f000 ba19 	b.w	8016568 <memmove>

08016136 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8016136:	b508      	push	{r3, lr}
 8016138:	1a52      	subs	r2, r2, r1
 801613a:	f7ff ffe7 	bl	801610c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801613e:	bd08      	pop	{r3, pc}

08016140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8016140:	b508      	push	{r3, lr}
 8016142:	1a52      	subs	r2, r2, r1
 8016144:	f7ff ffe2 	bl	801610c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8016148:	bd08      	pop	{r3, pc}

0801614a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 801614a:	4288      	cmp	r0, r1
 801614c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801614e:	4604      	mov	r4, r0
 8016150:	460e      	mov	r6, r1
 8016152:	d01e      	beq.n	8016192 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 8016154:	4603      	mov	r3, r0
 8016156:	684d      	ldr	r5, [r1, #4]
 8016158:	f853 2b08 	ldr.w	r2, [r3], #8
 801615c:	429a      	cmp	r2, r3
 801615e:	bf14      	ite	ne
 8016160:	6882      	ldrne	r2, [r0, #8]
 8016162:	220f      	moveq	r2, #15
 8016164:	42aa      	cmp	r2, r5
 8016166:	d20a      	bcs.n	801617e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 8016168:	a901      	add	r1, sp, #4
 801616a:	9501      	str	r5, [sp, #4]
 801616c:	f7ff ff8c 	bl	8016088 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8016170:	4607      	mov	r7, r0
 8016172:	4620      	mov	r0, r4
 8016174:	f7ff ffaa 	bl	80160cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8016178:	9b01      	ldr	r3, [sp, #4]
 801617a:	6027      	str	r7, [r4, #0]
 801617c:	60a3      	str	r3, [r4, #8]
 801617e:	b125      	cbz	r5, 801618a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 8016180:	6831      	ldr	r1, [r6, #0]
 8016182:	6820      	ldr	r0, [r4, #0]
 8016184:	462a      	mov	r2, r5
 8016186:	f7ff ffc1 	bl	801610c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801618a:	6823      	ldr	r3, [r4, #0]
 801618c:	6065      	str	r5, [r4, #4]
 801618e:	2200      	movs	r2, #0
 8016190:	555a      	strb	r2, [r3, r5]
 8016192:	b003      	add	sp, #12
 8016194:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016196 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8016196:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801619a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801619c:	461f      	mov	r7, r3
 801619e:	6843      	ldr	r3, [r0, #4]
 80161a0:	eb01 0802 	add.w	r8, r1, r2
 80161a4:	1ab2      	subs	r2, r6, r2
 80161a6:	441a      	add	r2, r3
 80161a8:	eba3 0908 	sub.w	r9, r3, r8
 80161ac:	4603      	mov	r3, r0
 80161ae:	9201      	str	r2, [sp, #4]
 80161b0:	f853 2b08 	ldr.w	r2, [r3], #8
 80161b4:	429a      	cmp	r2, r3
 80161b6:	bf18      	it	ne
 80161b8:	6882      	ldrne	r2, [r0, #8]
 80161ba:	460d      	mov	r5, r1
 80161bc:	bf08      	it	eq
 80161be:	220f      	moveq	r2, #15
 80161c0:	a901      	add	r1, sp, #4
 80161c2:	4604      	mov	r4, r0
 80161c4:	f7ff ff60 	bl	8016088 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80161c8:	4682      	mov	sl, r0
 80161ca:	b11d      	cbz	r5, 80161d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80161cc:	6821      	ldr	r1, [r4, #0]
 80161ce:	462a      	mov	r2, r5
 80161d0:	f7ff ff9c 	bl	801610c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80161d4:	b137      	cbz	r7, 80161e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80161d6:	b12e      	cbz	r6, 80161e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80161d8:	4632      	mov	r2, r6
 80161da:	4639      	mov	r1, r7
 80161dc:	eb0a 0005 	add.w	r0, sl, r5
 80161e0:	f7ff ff94 	bl	801610c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80161e4:	f1b9 0f00 	cmp.w	r9, #0
 80161e8:	d007      	beq.n	80161fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 80161ea:	6821      	ldr	r1, [r4, #0]
 80161ec:	4435      	add	r5, r6
 80161ee:	464a      	mov	r2, r9
 80161f0:	4441      	add	r1, r8
 80161f2:	eb0a 0005 	add.w	r0, sl, r5
 80161f6:	f7ff ff89 	bl	801610c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80161fa:	4620      	mov	r0, r4
 80161fc:	f7ff ff66 	bl	80160cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8016200:	9b01      	ldr	r3, [sp, #4]
 8016202:	f8c4 a000 	str.w	sl, [r4]
 8016206:	60a3      	str	r3, [r4, #8]
 8016208:	b002      	add	sp, #8
 801620a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801620e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801620e:	b510      	push	{r4, lr}
 8016210:	4604      	mov	r4, r0
 8016212:	f7ff ff5b 	bl	80160cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8016216:	4620      	mov	r0, r4
 8016218:	bd10      	pop	{r4, pc}

0801621a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 801621a:	b510      	push	{r4, lr}
 801621c:	4604      	mov	r4, r0
 801621e:	f7ff ff94 	bl	801614a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8016222:	4620      	mov	r0, r4
 8016224:	bd10      	pop	{r4, pc}
	...

08016228 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8016228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801622c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801622e:	4614      	mov	r4, r2
 8016230:	4680      	mov	r8, r0
 8016232:	462a      	mov	r2, r5
 8016234:	4689      	mov	r9, r1
 8016236:	461f      	mov	r7, r3
 8016238:	4621      	mov	r1, r4
 801623a:	4b39      	ldr	r3, [pc, #228]	; (8016320 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 801623c:	f7ff ff4e 	bl	80160dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8016240:	4642      	mov	r2, r8
 8016242:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016246:	f852 6b08 	ldr.w	r6, [r2], #8
 801624a:	4296      	cmp	r6, r2
 801624c:	bf18      	it	ne
 801624e:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 8016252:	eba5 0b04 	sub.w	fp, r5, r4
 8016256:	eb03 0a0b 	add.w	sl, r3, fp
 801625a:	bf08      	it	eq
 801625c:	220f      	moveq	r2, #15
 801625e:	4552      	cmp	r2, sl
 8016260:	d351      	bcc.n	8016306 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 8016262:	444e      	add	r6, r9
 8016264:	4639      	mov	r1, r7
 8016266:	44a1      	add	r9, r4
 8016268:	4640      	mov	r0, r8
 801626a:	eba3 0909 	sub.w	r9, r3, r9
 801626e:	f7ff ff41 	bl	80160f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8016272:	b180      	cbz	r0, 8016296 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 8016274:	f1b9 0f00 	cmp.w	r9, #0
 8016278:	d006      	beq.n	8016288 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 801627a:	42ac      	cmp	r4, r5
 801627c:	d004      	beq.n	8016288 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 801627e:	464a      	mov	r2, r9
 8016280:	1931      	adds	r1, r6, r4
 8016282:	1970      	adds	r0, r6, r5
 8016284:	f7ff ff4b 	bl	801611e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8016288:	b315      	cbz	r5, 80162d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 801628a:	462a      	mov	r2, r5
 801628c:	4639      	mov	r1, r7
 801628e:	4630      	mov	r0, r6
 8016290:	f7ff ff3c 	bl	801610c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8016294:	e01c      	b.n	80162d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8016296:	b135      	cbz	r5, 80162a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8016298:	42ac      	cmp	r4, r5
 801629a:	d33c      	bcc.n	8016316 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 801629c:	462a      	mov	r2, r5
 801629e:	4639      	mov	r1, r7
 80162a0:	4630      	mov	r0, r6
 80162a2:	f7ff ff3c 	bl	801611e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80162a6:	f1b9 0f00 	cmp.w	r9, #0
 80162aa:	d011      	beq.n	80162d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80162ac:	42ac      	cmp	r4, r5
 80162ae:	d00f      	beq.n	80162d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80162b0:	464a      	mov	r2, r9
 80162b2:	1931      	adds	r1, r6, r4
 80162b4:	1970      	adds	r0, r6, r5
 80162b6:	f7ff ff32 	bl	801611e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80162ba:	42ac      	cmp	r4, r5
 80162bc:	d208      	bcs.n	80162d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80162be:	4434      	add	r4, r6
 80162c0:	197b      	adds	r3, r7, r5
 80162c2:	429c      	cmp	r4, r3
 80162c4:	d30f      	bcc.n	80162e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 80162c6:	462a      	mov	r2, r5
 80162c8:	4639      	mov	r1, r7
 80162ca:	4630      	mov	r0, r6
 80162cc:	f7ff ff27 	bl	801611e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80162d0:	f8d8 3000 	ldr.w	r3, [r8]
 80162d4:	f8c8 a004 	str.w	sl, [r8, #4]
 80162d8:	2200      	movs	r2, #0
 80162da:	4640      	mov	r0, r8
 80162dc:	f803 200a 	strb.w	r2, [r3, sl]
 80162e0:	b003      	add	sp, #12
 80162e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162e6:	42bc      	cmp	r4, r7
 80162e8:	d803      	bhi.n	80162f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 80162ea:	462a      	mov	r2, r5
 80162ec:	eb07 010b 	add.w	r1, r7, fp
 80162f0:	e7cd      	b.n	801628e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 80162f2:	1be4      	subs	r4, r4, r7
 80162f4:	4622      	mov	r2, r4
 80162f6:	4639      	mov	r1, r7
 80162f8:	4630      	mov	r0, r6
 80162fa:	f7ff ff10 	bl	801611e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80162fe:	1b2a      	subs	r2, r5, r4
 8016300:	1971      	adds	r1, r6, r5
 8016302:	1930      	adds	r0, r6, r4
 8016304:	e7c4      	b.n	8016290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 8016306:	9500      	str	r5, [sp, #0]
 8016308:	463b      	mov	r3, r7
 801630a:	4622      	mov	r2, r4
 801630c:	4649      	mov	r1, r9
 801630e:	4640      	mov	r0, r8
 8016310:	f7ff ff41 	bl	8016196 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8016314:	e7dc      	b.n	80162d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8016316:	f1b9 0f00 	cmp.w	r9, #0
 801631a:	d0d0      	beq.n	80162be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 801631c:	e7c8      	b.n	80162b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 801631e:	bf00      	nop
 8016320:	0801a6b0 	.word	0x0801a6b0

08016324 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8016324:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016326:	4604      	mov	r4, r0
 8016328:	4608      	mov	r0, r1
 801632a:	9103      	str	r1, [sp, #12]
 801632c:	f7e9 ffc0 	bl	80002b0 <strlen>
 8016330:	9b03      	ldr	r3, [sp, #12]
 8016332:	9000      	str	r0, [sp, #0]
 8016334:	6862      	ldr	r2, [r4, #4]
 8016336:	2100      	movs	r1, #0
 8016338:	4620      	mov	r0, r4
 801633a:	f7ff ff75 	bl	8016228 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 801633e:	b004      	add	sp, #16
 8016340:	bd10      	pop	{r4, pc}

08016342 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 8016342:	b508      	push	{r3, lr}
 8016344:	f7ff ffee 	bl	8016324 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 8016348:	bd08      	pop	{r3, pc}
	...

0801634c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 801634c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801634e:	4604      	mov	r4, r0
 8016350:	4616      	mov	r6, r2
 8016352:	460d      	mov	r5, r1
 8016354:	b919      	cbnz	r1, 801635e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8016356:	b112      	cbz	r2, 801635e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8016358:	480d      	ldr	r0, [pc, #52]	; (8016390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 801635a:	f7ff fe8b 	bl	8016074 <_ZSt19__throw_logic_errorPKc>
 801635e:	1b73      	subs	r3, r6, r5
 8016360:	2b0f      	cmp	r3, #15
 8016362:	9301      	str	r3, [sp, #4]
 8016364:	d907      	bls.n	8016376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 8016366:	2200      	movs	r2, #0
 8016368:	a901      	add	r1, sp, #4
 801636a:	4620      	mov	r0, r4
 801636c:	f7ff fe8c 	bl	8016088 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8016370:	9b01      	ldr	r3, [sp, #4]
 8016372:	6020      	str	r0, [r4, #0]
 8016374:	60a3      	str	r3, [r4, #8]
 8016376:	4632      	mov	r2, r6
 8016378:	4629      	mov	r1, r5
 801637a:	6820      	ldr	r0, [r4, #0]
 801637c:	f7ff fedb 	bl	8016136 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8016380:	9b01      	ldr	r3, [sp, #4]
 8016382:	6822      	ldr	r2, [r4, #0]
 8016384:	6063      	str	r3, [r4, #4]
 8016386:	2100      	movs	r1, #0
 8016388:	54d1      	strb	r1, [r2, r3]
 801638a:	b002      	add	sp, #8
 801638c:	bd70      	pop	{r4, r5, r6, pc}
 801638e:	bf00      	nop
 8016390:	0801a6c9 	.word	0x0801a6c9

08016394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8016394:	b538      	push	{r3, r4, r5, lr}
 8016396:	f100 0308 	add.w	r3, r0, #8
 801639a:	6003      	str	r3, [r0, #0]
 801639c:	e9d1 5200 	ldrd	r5, r2, [r1]
 80163a0:	4604      	mov	r4, r0
 80163a2:	f04f 0300 	mov.w	r3, #0
 80163a6:	442a      	add	r2, r5
 80163a8:	4629      	mov	r1, r5
 80163aa:	f7ff ffcf 	bl	801634c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80163ae:	4620      	mov	r0, r4
 80163b0:	bd38      	pop	{r3, r4, r5, pc}
	...

080163b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80163b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80163b6:	4604      	mov	r4, r0
 80163b8:	4616      	mov	r6, r2
 80163ba:	460d      	mov	r5, r1
 80163bc:	b919      	cbnz	r1, 80163c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80163be:	b112      	cbz	r2, 80163c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80163c0:	480d      	ldr	r0, [pc, #52]	; (80163f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80163c2:	f7ff fe57 	bl	8016074 <_ZSt19__throw_logic_errorPKc>
 80163c6:	1b73      	subs	r3, r6, r5
 80163c8:	2b0f      	cmp	r3, #15
 80163ca:	9301      	str	r3, [sp, #4]
 80163cc:	d907      	bls.n	80163de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80163ce:	2200      	movs	r2, #0
 80163d0:	a901      	add	r1, sp, #4
 80163d2:	4620      	mov	r0, r4
 80163d4:	f7ff fe58 	bl	8016088 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80163d8:	9b01      	ldr	r3, [sp, #4]
 80163da:	6020      	str	r0, [r4, #0]
 80163dc:	60a3      	str	r3, [r4, #8]
 80163de:	4632      	mov	r2, r6
 80163e0:	4629      	mov	r1, r5
 80163e2:	6820      	ldr	r0, [r4, #0]
 80163e4:	f7ff feac 	bl	8016140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80163e8:	9b01      	ldr	r3, [sp, #4]
 80163ea:	6822      	ldr	r2, [r4, #0]
 80163ec:	6063      	str	r3, [r4, #4]
 80163ee:	2100      	movs	r1, #0
 80163f0:	54d1      	strb	r1, [r2, r3]
 80163f2:	b002      	add	sp, #8
 80163f4:	bd70      	pop	{r4, r5, r6, pc}
 80163f6:	bf00      	nop
 80163f8:	0801a6c9 	.word	0x0801a6c9

080163fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80163fc:	b538      	push	{r3, r4, r5, lr}
 80163fe:	f100 0308 	add.w	r3, r0, #8
 8016402:	4604      	mov	r4, r0
 8016404:	6003      	str	r3, [r0, #0]
 8016406:	460d      	mov	r5, r1
 8016408:	b159      	cbz	r1, 8016422 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 801640a:	4608      	mov	r0, r1
 801640c:	f7e9 ff50 	bl	80002b0 <strlen>
 8016410:	182a      	adds	r2, r5, r0
 8016412:	4620      	mov	r0, r4
 8016414:	f04f 0300 	mov.w	r3, #0
 8016418:	4629      	mov	r1, r5
 801641a:	f7ff ffcb 	bl	80163b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 801641e:	4620      	mov	r0, r4
 8016420:	bd38      	pop	{r3, r4, r5, pc}
 8016422:	f04f 32ff 	mov.w	r2, #4294967295
 8016426:	e7f4      	b.n	8016412 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08016428 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8016428:	b508      	push	{r3, lr}
 801642a:	4780      	blx	r0
 801642c:	f000 f816 	bl	801645c <abort>

08016430 <_ZSt13get_terminatev>:
 8016430:	4b02      	ldr	r3, [pc, #8]	; (801643c <_ZSt13get_terminatev+0xc>)
 8016432:	6818      	ldr	r0, [r3, #0]
 8016434:	f3bf 8f5b 	dmb	ish
 8016438:	4770      	bx	lr
 801643a:	bf00      	nop
 801643c:	20000040 	.word	0x20000040

08016440 <_ZSt9terminatev>:
 8016440:	b508      	push	{r3, lr}
 8016442:	f7ff fff5 	bl	8016430 <_ZSt13get_terminatev>
 8016446:	f7ff ffef 	bl	8016428 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0801644c <_ZSt15get_new_handlerv>:
 801644c:	4b02      	ldr	r3, [pc, #8]	; (8016458 <_ZSt15get_new_handlerv+0xc>)
 801644e:	6818      	ldr	r0, [r3, #0]
 8016450:	f3bf 8f5b 	dmb	ish
 8016454:	4770      	bx	lr
 8016456:	bf00      	nop
 8016458:	200012a4 	.word	0x200012a4

0801645c <abort>:
 801645c:	b508      	push	{r3, lr}
 801645e:	2006      	movs	r0, #6
 8016460:	f000 fc74 	bl	8016d4c <raise>
 8016464:	2001      	movs	r0, #1
 8016466:	f7ec fa39 	bl	80028dc <_exit>
	...

0801646c <__assert_func>:
 801646c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801646e:	4614      	mov	r4, r2
 8016470:	461a      	mov	r2, r3
 8016472:	4b09      	ldr	r3, [pc, #36]	; (8016498 <__assert_func+0x2c>)
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	4605      	mov	r5, r0
 8016478:	68d8      	ldr	r0, [r3, #12]
 801647a:	b14c      	cbz	r4, 8016490 <__assert_func+0x24>
 801647c:	4b07      	ldr	r3, [pc, #28]	; (801649c <__assert_func+0x30>)
 801647e:	9100      	str	r1, [sp, #0]
 8016480:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016484:	4906      	ldr	r1, [pc, #24]	; (80164a0 <__assert_func+0x34>)
 8016486:	462b      	mov	r3, r5
 8016488:	f000 f81a 	bl	80164c0 <fiprintf>
 801648c:	f7ff ffe6 	bl	801645c <abort>
 8016490:	4b04      	ldr	r3, [pc, #16]	; (80164a4 <__assert_func+0x38>)
 8016492:	461c      	mov	r4, r3
 8016494:	e7f3      	b.n	801647e <__assert_func+0x12>
 8016496:	bf00      	nop
 8016498:	20000044 	.word	0x20000044
 801649c:	0801a6f3 	.word	0x0801a6f3
 80164a0:	0801a700 	.word	0x0801a700
 80164a4:	0801a72e 	.word	0x0801a72e

080164a8 <atexit>:
 80164a8:	2300      	movs	r3, #0
 80164aa:	4601      	mov	r1, r0
 80164ac:	461a      	mov	r2, r3
 80164ae:	4618      	mov	r0, r3
 80164b0:	f000 bd48 	b.w	8016f44 <__register_exitproc>

080164b4 <__errno>:
 80164b4:	4b01      	ldr	r3, [pc, #4]	; (80164bc <__errno+0x8>)
 80164b6:	6818      	ldr	r0, [r3, #0]
 80164b8:	4770      	bx	lr
 80164ba:	bf00      	nop
 80164bc:	20000044 	.word	0x20000044

080164c0 <fiprintf>:
 80164c0:	b40e      	push	{r1, r2, r3}
 80164c2:	b503      	push	{r0, r1, lr}
 80164c4:	4601      	mov	r1, r0
 80164c6:	ab03      	add	r3, sp, #12
 80164c8:	4805      	ldr	r0, [pc, #20]	; (80164e0 <fiprintf+0x20>)
 80164ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80164ce:	6800      	ldr	r0, [r0, #0]
 80164d0:	9301      	str	r3, [sp, #4]
 80164d2:	f000 f93f 	bl	8016754 <_vfiprintf_r>
 80164d6:	b002      	add	sp, #8
 80164d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80164dc:	b003      	add	sp, #12
 80164de:	4770      	bx	lr
 80164e0:	20000044 	.word	0x20000044

080164e4 <__libc_init_array>:
 80164e4:	b570      	push	{r4, r5, r6, lr}
 80164e6:	4d0d      	ldr	r5, [pc, #52]	; (801651c <__libc_init_array+0x38>)
 80164e8:	4c0d      	ldr	r4, [pc, #52]	; (8016520 <__libc_init_array+0x3c>)
 80164ea:	1b64      	subs	r4, r4, r5
 80164ec:	10a4      	asrs	r4, r4, #2
 80164ee:	2600      	movs	r6, #0
 80164f0:	42a6      	cmp	r6, r4
 80164f2:	d109      	bne.n	8016508 <__libc_init_array+0x24>
 80164f4:	4d0b      	ldr	r5, [pc, #44]	; (8016524 <__libc_init_array+0x40>)
 80164f6:	4c0c      	ldr	r4, [pc, #48]	; (8016528 <__libc_init_array+0x44>)
 80164f8:	f001 f9e8 	bl	80178cc <_init>
 80164fc:	1b64      	subs	r4, r4, r5
 80164fe:	10a4      	asrs	r4, r4, #2
 8016500:	2600      	movs	r6, #0
 8016502:	42a6      	cmp	r6, r4
 8016504:	d105      	bne.n	8016512 <__libc_init_array+0x2e>
 8016506:	bd70      	pop	{r4, r5, r6, pc}
 8016508:	f855 3b04 	ldr.w	r3, [r5], #4
 801650c:	4798      	blx	r3
 801650e:	3601      	adds	r6, #1
 8016510:	e7ee      	b.n	80164f0 <__libc_init_array+0xc>
 8016512:	f855 3b04 	ldr.w	r3, [r5], #4
 8016516:	4798      	blx	r3
 8016518:	3601      	adds	r6, #1
 801651a:	e7f2      	b.n	8016502 <__libc_init_array+0x1e>
 801651c:	0801b4b8 	.word	0x0801b4b8
 8016520:	0801b4b8 	.word	0x0801b4b8
 8016524:	0801b4b8 	.word	0x0801b4b8
 8016528:	0801b4dc 	.word	0x0801b4dc

0801652c <malloc>:
 801652c:	4b02      	ldr	r3, [pc, #8]	; (8016538 <malloc+0xc>)
 801652e:	4601      	mov	r1, r0
 8016530:	6818      	ldr	r0, [r3, #0]
 8016532:	f000 b88b 	b.w	801664c <_malloc_r>
 8016536:	bf00      	nop
 8016538:	20000044 	.word	0x20000044

0801653c <free>:
 801653c:	4b02      	ldr	r3, [pc, #8]	; (8016548 <free+0xc>)
 801653e:	4601      	mov	r1, r0
 8016540:	6818      	ldr	r0, [r3, #0]
 8016542:	f000 b833 	b.w	80165ac <_free_r>
 8016546:	bf00      	nop
 8016548:	20000044 	.word	0x20000044

0801654c <memcpy>:
 801654c:	440a      	add	r2, r1
 801654e:	4291      	cmp	r1, r2
 8016550:	f100 33ff 	add.w	r3, r0, #4294967295
 8016554:	d100      	bne.n	8016558 <memcpy+0xc>
 8016556:	4770      	bx	lr
 8016558:	b510      	push	{r4, lr}
 801655a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801655e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016562:	4291      	cmp	r1, r2
 8016564:	d1f9      	bne.n	801655a <memcpy+0xe>
 8016566:	bd10      	pop	{r4, pc}

08016568 <memmove>:
 8016568:	4288      	cmp	r0, r1
 801656a:	b510      	push	{r4, lr}
 801656c:	eb01 0402 	add.w	r4, r1, r2
 8016570:	d902      	bls.n	8016578 <memmove+0x10>
 8016572:	4284      	cmp	r4, r0
 8016574:	4623      	mov	r3, r4
 8016576:	d807      	bhi.n	8016588 <memmove+0x20>
 8016578:	1e43      	subs	r3, r0, #1
 801657a:	42a1      	cmp	r1, r4
 801657c:	d008      	beq.n	8016590 <memmove+0x28>
 801657e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016582:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016586:	e7f8      	b.n	801657a <memmove+0x12>
 8016588:	4402      	add	r2, r0
 801658a:	4601      	mov	r1, r0
 801658c:	428a      	cmp	r2, r1
 801658e:	d100      	bne.n	8016592 <memmove+0x2a>
 8016590:	bd10      	pop	{r4, pc}
 8016592:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016596:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801659a:	e7f7      	b.n	801658c <memmove+0x24>

0801659c <memset>:
 801659c:	4402      	add	r2, r0
 801659e:	4603      	mov	r3, r0
 80165a0:	4293      	cmp	r3, r2
 80165a2:	d100      	bne.n	80165a6 <memset+0xa>
 80165a4:	4770      	bx	lr
 80165a6:	f803 1b01 	strb.w	r1, [r3], #1
 80165aa:	e7f9      	b.n	80165a0 <memset+0x4>

080165ac <_free_r>:
 80165ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80165ae:	2900      	cmp	r1, #0
 80165b0:	d048      	beq.n	8016644 <_free_r+0x98>
 80165b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80165b6:	9001      	str	r0, [sp, #4]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	f1a1 0404 	sub.w	r4, r1, #4
 80165be:	bfb8      	it	lt
 80165c0:	18e4      	addlt	r4, r4, r3
 80165c2:	f000 ff41 	bl	8017448 <__malloc_lock>
 80165c6:	4a20      	ldr	r2, [pc, #128]	; (8016648 <_free_r+0x9c>)
 80165c8:	9801      	ldr	r0, [sp, #4]
 80165ca:	6813      	ldr	r3, [r2, #0]
 80165cc:	4615      	mov	r5, r2
 80165ce:	b933      	cbnz	r3, 80165de <_free_r+0x32>
 80165d0:	6063      	str	r3, [r4, #4]
 80165d2:	6014      	str	r4, [r2, #0]
 80165d4:	b003      	add	sp, #12
 80165d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80165da:	f000 bf3b 	b.w	8017454 <__malloc_unlock>
 80165de:	42a3      	cmp	r3, r4
 80165e0:	d90b      	bls.n	80165fa <_free_r+0x4e>
 80165e2:	6821      	ldr	r1, [r4, #0]
 80165e4:	1862      	adds	r2, r4, r1
 80165e6:	4293      	cmp	r3, r2
 80165e8:	bf04      	itt	eq
 80165ea:	681a      	ldreq	r2, [r3, #0]
 80165ec:	685b      	ldreq	r3, [r3, #4]
 80165ee:	6063      	str	r3, [r4, #4]
 80165f0:	bf04      	itt	eq
 80165f2:	1852      	addeq	r2, r2, r1
 80165f4:	6022      	streq	r2, [r4, #0]
 80165f6:	602c      	str	r4, [r5, #0]
 80165f8:	e7ec      	b.n	80165d4 <_free_r+0x28>
 80165fa:	461a      	mov	r2, r3
 80165fc:	685b      	ldr	r3, [r3, #4]
 80165fe:	b10b      	cbz	r3, 8016604 <_free_r+0x58>
 8016600:	42a3      	cmp	r3, r4
 8016602:	d9fa      	bls.n	80165fa <_free_r+0x4e>
 8016604:	6811      	ldr	r1, [r2, #0]
 8016606:	1855      	adds	r5, r2, r1
 8016608:	42a5      	cmp	r5, r4
 801660a:	d10b      	bne.n	8016624 <_free_r+0x78>
 801660c:	6824      	ldr	r4, [r4, #0]
 801660e:	4421      	add	r1, r4
 8016610:	1854      	adds	r4, r2, r1
 8016612:	42a3      	cmp	r3, r4
 8016614:	6011      	str	r1, [r2, #0]
 8016616:	d1dd      	bne.n	80165d4 <_free_r+0x28>
 8016618:	681c      	ldr	r4, [r3, #0]
 801661a:	685b      	ldr	r3, [r3, #4]
 801661c:	6053      	str	r3, [r2, #4]
 801661e:	4421      	add	r1, r4
 8016620:	6011      	str	r1, [r2, #0]
 8016622:	e7d7      	b.n	80165d4 <_free_r+0x28>
 8016624:	d902      	bls.n	801662c <_free_r+0x80>
 8016626:	230c      	movs	r3, #12
 8016628:	6003      	str	r3, [r0, #0]
 801662a:	e7d3      	b.n	80165d4 <_free_r+0x28>
 801662c:	6825      	ldr	r5, [r4, #0]
 801662e:	1961      	adds	r1, r4, r5
 8016630:	428b      	cmp	r3, r1
 8016632:	bf04      	itt	eq
 8016634:	6819      	ldreq	r1, [r3, #0]
 8016636:	685b      	ldreq	r3, [r3, #4]
 8016638:	6063      	str	r3, [r4, #4]
 801663a:	bf04      	itt	eq
 801663c:	1949      	addeq	r1, r1, r5
 801663e:	6021      	streq	r1, [r4, #0]
 8016640:	6054      	str	r4, [r2, #4]
 8016642:	e7c7      	b.n	80165d4 <_free_r+0x28>
 8016644:	b003      	add	sp, #12
 8016646:	bd30      	pop	{r4, r5, pc}
 8016648:	200012a8 	.word	0x200012a8

0801664c <_malloc_r>:
 801664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801664e:	1ccd      	adds	r5, r1, #3
 8016650:	f025 0503 	bic.w	r5, r5, #3
 8016654:	3508      	adds	r5, #8
 8016656:	2d0c      	cmp	r5, #12
 8016658:	bf38      	it	cc
 801665a:	250c      	movcc	r5, #12
 801665c:	2d00      	cmp	r5, #0
 801665e:	4606      	mov	r6, r0
 8016660:	db01      	blt.n	8016666 <_malloc_r+0x1a>
 8016662:	42a9      	cmp	r1, r5
 8016664:	d903      	bls.n	801666e <_malloc_r+0x22>
 8016666:	230c      	movs	r3, #12
 8016668:	6033      	str	r3, [r6, #0]
 801666a:	2000      	movs	r0, #0
 801666c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801666e:	f000 feeb 	bl	8017448 <__malloc_lock>
 8016672:	4921      	ldr	r1, [pc, #132]	; (80166f8 <_malloc_r+0xac>)
 8016674:	680a      	ldr	r2, [r1, #0]
 8016676:	4614      	mov	r4, r2
 8016678:	b99c      	cbnz	r4, 80166a2 <_malloc_r+0x56>
 801667a:	4f20      	ldr	r7, [pc, #128]	; (80166fc <_malloc_r+0xb0>)
 801667c:	683b      	ldr	r3, [r7, #0]
 801667e:	b923      	cbnz	r3, 801668a <_malloc_r+0x3e>
 8016680:	4621      	mov	r1, r4
 8016682:	4630      	mov	r0, r6
 8016684:	f000 fb2a 	bl	8016cdc <_sbrk_r>
 8016688:	6038      	str	r0, [r7, #0]
 801668a:	4629      	mov	r1, r5
 801668c:	4630      	mov	r0, r6
 801668e:	f000 fb25 	bl	8016cdc <_sbrk_r>
 8016692:	1c43      	adds	r3, r0, #1
 8016694:	d123      	bne.n	80166de <_malloc_r+0x92>
 8016696:	230c      	movs	r3, #12
 8016698:	6033      	str	r3, [r6, #0]
 801669a:	4630      	mov	r0, r6
 801669c:	f000 feda 	bl	8017454 <__malloc_unlock>
 80166a0:	e7e3      	b.n	801666a <_malloc_r+0x1e>
 80166a2:	6823      	ldr	r3, [r4, #0]
 80166a4:	1b5b      	subs	r3, r3, r5
 80166a6:	d417      	bmi.n	80166d8 <_malloc_r+0x8c>
 80166a8:	2b0b      	cmp	r3, #11
 80166aa:	d903      	bls.n	80166b4 <_malloc_r+0x68>
 80166ac:	6023      	str	r3, [r4, #0]
 80166ae:	441c      	add	r4, r3
 80166b0:	6025      	str	r5, [r4, #0]
 80166b2:	e004      	b.n	80166be <_malloc_r+0x72>
 80166b4:	6863      	ldr	r3, [r4, #4]
 80166b6:	42a2      	cmp	r2, r4
 80166b8:	bf0c      	ite	eq
 80166ba:	600b      	streq	r3, [r1, #0]
 80166bc:	6053      	strne	r3, [r2, #4]
 80166be:	4630      	mov	r0, r6
 80166c0:	f000 fec8 	bl	8017454 <__malloc_unlock>
 80166c4:	f104 000b 	add.w	r0, r4, #11
 80166c8:	1d23      	adds	r3, r4, #4
 80166ca:	f020 0007 	bic.w	r0, r0, #7
 80166ce:	1ac2      	subs	r2, r0, r3
 80166d0:	d0cc      	beq.n	801666c <_malloc_r+0x20>
 80166d2:	1a1b      	subs	r3, r3, r0
 80166d4:	50a3      	str	r3, [r4, r2]
 80166d6:	e7c9      	b.n	801666c <_malloc_r+0x20>
 80166d8:	4622      	mov	r2, r4
 80166da:	6864      	ldr	r4, [r4, #4]
 80166dc:	e7cc      	b.n	8016678 <_malloc_r+0x2c>
 80166de:	1cc4      	adds	r4, r0, #3
 80166e0:	f024 0403 	bic.w	r4, r4, #3
 80166e4:	42a0      	cmp	r0, r4
 80166e6:	d0e3      	beq.n	80166b0 <_malloc_r+0x64>
 80166e8:	1a21      	subs	r1, r4, r0
 80166ea:	4630      	mov	r0, r6
 80166ec:	f000 faf6 	bl	8016cdc <_sbrk_r>
 80166f0:	3001      	adds	r0, #1
 80166f2:	d1dd      	bne.n	80166b0 <_malloc_r+0x64>
 80166f4:	e7cf      	b.n	8016696 <_malloc_r+0x4a>
 80166f6:	bf00      	nop
 80166f8:	200012a8 	.word	0x200012a8
 80166fc:	200012ac 	.word	0x200012ac

08016700 <__sfputc_r>:
 8016700:	6893      	ldr	r3, [r2, #8]
 8016702:	3b01      	subs	r3, #1
 8016704:	2b00      	cmp	r3, #0
 8016706:	b410      	push	{r4}
 8016708:	6093      	str	r3, [r2, #8]
 801670a:	da08      	bge.n	801671e <__sfputc_r+0x1e>
 801670c:	6994      	ldr	r4, [r2, #24]
 801670e:	42a3      	cmp	r3, r4
 8016710:	db01      	blt.n	8016716 <__sfputc_r+0x16>
 8016712:	290a      	cmp	r1, #10
 8016714:	d103      	bne.n	801671e <__sfputc_r+0x1e>
 8016716:	f85d 4b04 	ldr.w	r4, [sp], #4
 801671a:	f000 bb53 	b.w	8016dc4 <__swbuf_r>
 801671e:	6813      	ldr	r3, [r2, #0]
 8016720:	1c58      	adds	r0, r3, #1
 8016722:	6010      	str	r0, [r2, #0]
 8016724:	7019      	strb	r1, [r3, #0]
 8016726:	4608      	mov	r0, r1
 8016728:	f85d 4b04 	ldr.w	r4, [sp], #4
 801672c:	4770      	bx	lr

0801672e <__sfputs_r>:
 801672e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016730:	4606      	mov	r6, r0
 8016732:	460f      	mov	r7, r1
 8016734:	4614      	mov	r4, r2
 8016736:	18d5      	adds	r5, r2, r3
 8016738:	42ac      	cmp	r4, r5
 801673a:	d101      	bne.n	8016740 <__sfputs_r+0x12>
 801673c:	2000      	movs	r0, #0
 801673e:	e007      	b.n	8016750 <__sfputs_r+0x22>
 8016740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016744:	463a      	mov	r2, r7
 8016746:	4630      	mov	r0, r6
 8016748:	f7ff ffda 	bl	8016700 <__sfputc_r>
 801674c:	1c43      	adds	r3, r0, #1
 801674e:	d1f3      	bne.n	8016738 <__sfputs_r+0xa>
 8016750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016754 <_vfiprintf_r>:
 8016754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016758:	460d      	mov	r5, r1
 801675a:	b09d      	sub	sp, #116	; 0x74
 801675c:	4614      	mov	r4, r2
 801675e:	4698      	mov	r8, r3
 8016760:	4606      	mov	r6, r0
 8016762:	b118      	cbz	r0, 801676c <_vfiprintf_r+0x18>
 8016764:	6983      	ldr	r3, [r0, #24]
 8016766:	b90b      	cbnz	r3, 801676c <_vfiprintf_r+0x18>
 8016768:	f000 fd68 	bl	801723c <__sinit>
 801676c:	4b89      	ldr	r3, [pc, #548]	; (8016994 <_vfiprintf_r+0x240>)
 801676e:	429d      	cmp	r5, r3
 8016770:	d11b      	bne.n	80167aa <_vfiprintf_r+0x56>
 8016772:	6875      	ldr	r5, [r6, #4]
 8016774:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016776:	07d9      	lsls	r1, r3, #31
 8016778:	d405      	bmi.n	8016786 <_vfiprintf_r+0x32>
 801677a:	89ab      	ldrh	r3, [r5, #12]
 801677c:	059a      	lsls	r2, r3, #22
 801677e:	d402      	bmi.n	8016786 <_vfiprintf_r+0x32>
 8016780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016782:	f000 fdf9 	bl	8017378 <__retarget_lock_acquire_recursive>
 8016786:	89ab      	ldrh	r3, [r5, #12]
 8016788:	071b      	lsls	r3, r3, #28
 801678a:	d501      	bpl.n	8016790 <_vfiprintf_r+0x3c>
 801678c:	692b      	ldr	r3, [r5, #16]
 801678e:	b9eb      	cbnz	r3, 80167cc <_vfiprintf_r+0x78>
 8016790:	4629      	mov	r1, r5
 8016792:	4630      	mov	r0, r6
 8016794:	f000 fb68 	bl	8016e68 <__swsetup_r>
 8016798:	b1c0      	cbz	r0, 80167cc <_vfiprintf_r+0x78>
 801679a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801679c:	07dc      	lsls	r4, r3, #31
 801679e:	d50e      	bpl.n	80167be <_vfiprintf_r+0x6a>
 80167a0:	f04f 30ff 	mov.w	r0, #4294967295
 80167a4:	b01d      	add	sp, #116	; 0x74
 80167a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167aa:	4b7b      	ldr	r3, [pc, #492]	; (8016998 <_vfiprintf_r+0x244>)
 80167ac:	429d      	cmp	r5, r3
 80167ae:	d101      	bne.n	80167b4 <_vfiprintf_r+0x60>
 80167b0:	68b5      	ldr	r5, [r6, #8]
 80167b2:	e7df      	b.n	8016774 <_vfiprintf_r+0x20>
 80167b4:	4b79      	ldr	r3, [pc, #484]	; (801699c <_vfiprintf_r+0x248>)
 80167b6:	429d      	cmp	r5, r3
 80167b8:	bf08      	it	eq
 80167ba:	68f5      	ldreq	r5, [r6, #12]
 80167bc:	e7da      	b.n	8016774 <_vfiprintf_r+0x20>
 80167be:	89ab      	ldrh	r3, [r5, #12]
 80167c0:	0598      	lsls	r0, r3, #22
 80167c2:	d4ed      	bmi.n	80167a0 <_vfiprintf_r+0x4c>
 80167c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80167c6:	f000 fdd9 	bl	801737c <__retarget_lock_release_recursive>
 80167ca:	e7e9      	b.n	80167a0 <_vfiprintf_r+0x4c>
 80167cc:	2300      	movs	r3, #0
 80167ce:	9309      	str	r3, [sp, #36]	; 0x24
 80167d0:	2320      	movs	r3, #32
 80167d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80167d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80167da:	2330      	movs	r3, #48	; 0x30
 80167dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80169a0 <_vfiprintf_r+0x24c>
 80167e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80167e4:	f04f 0901 	mov.w	r9, #1
 80167e8:	4623      	mov	r3, r4
 80167ea:	469a      	mov	sl, r3
 80167ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80167f0:	b10a      	cbz	r2, 80167f6 <_vfiprintf_r+0xa2>
 80167f2:	2a25      	cmp	r2, #37	; 0x25
 80167f4:	d1f9      	bne.n	80167ea <_vfiprintf_r+0x96>
 80167f6:	ebba 0b04 	subs.w	fp, sl, r4
 80167fa:	d00b      	beq.n	8016814 <_vfiprintf_r+0xc0>
 80167fc:	465b      	mov	r3, fp
 80167fe:	4622      	mov	r2, r4
 8016800:	4629      	mov	r1, r5
 8016802:	4630      	mov	r0, r6
 8016804:	f7ff ff93 	bl	801672e <__sfputs_r>
 8016808:	3001      	adds	r0, #1
 801680a:	f000 80aa 	beq.w	8016962 <_vfiprintf_r+0x20e>
 801680e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016810:	445a      	add	r2, fp
 8016812:	9209      	str	r2, [sp, #36]	; 0x24
 8016814:	f89a 3000 	ldrb.w	r3, [sl]
 8016818:	2b00      	cmp	r3, #0
 801681a:	f000 80a2 	beq.w	8016962 <_vfiprintf_r+0x20e>
 801681e:	2300      	movs	r3, #0
 8016820:	f04f 32ff 	mov.w	r2, #4294967295
 8016824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016828:	f10a 0a01 	add.w	sl, sl, #1
 801682c:	9304      	str	r3, [sp, #16]
 801682e:	9307      	str	r3, [sp, #28]
 8016830:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016834:	931a      	str	r3, [sp, #104]	; 0x68
 8016836:	4654      	mov	r4, sl
 8016838:	2205      	movs	r2, #5
 801683a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801683e:	4858      	ldr	r0, [pc, #352]	; (80169a0 <_vfiprintf_r+0x24c>)
 8016840:	f7e9 fce6 	bl	8000210 <memchr>
 8016844:	9a04      	ldr	r2, [sp, #16]
 8016846:	b9d8      	cbnz	r0, 8016880 <_vfiprintf_r+0x12c>
 8016848:	06d1      	lsls	r1, r2, #27
 801684a:	bf44      	itt	mi
 801684c:	2320      	movmi	r3, #32
 801684e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016852:	0713      	lsls	r3, r2, #28
 8016854:	bf44      	itt	mi
 8016856:	232b      	movmi	r3, #43	; 0x2b
 8016858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801685c:	f89a 3000 	ldrb.w	r3, [sl]
 8016860:	2b2a      	cmp	r3, #42	; 0x2a
 8016862:	d015      	beq.n	8016890 <_vfiprintf_r+0x13c>
 8016864:	9a07      	ldr	r2, [sp, #28]
 8016866:	4654      	mov	r4, sl
 8016868:	2000      	movs	r0, #0
 801686a:	f04f 0c0a 	mov.w	ip, #10
 801686e:	4621      	mov	r1, r4
 8016870:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016874:	3b30      	subs	r3, #48	; 0x30
 8016876:	2b09      	cmp	r3, #9
 8016878:	d94e      	bls.n	8016918 <_vfiprintf_r+0x1c4>
 801687a:	b1b0      	cbz	r0, 80168aa <_vfiprintf_r+0x156>
 801687c:	9207      	str	r2, [sp, #28]
 801687e:	e014      	b.n	80168aa <_vfiprintf_r+0x156>
 8016880:	eba0 0308 	sub.w	r3, r0, r8
 8016884:	fa09 f303 	lsl.w	r3, r9, r3
 8016888:	4313      	orrs	r3, r2
 801688a:	9304      	str	r3, [sp, #16]
 801688c:	46a2      	mov	sl, r4
 801688e:	e7d2      	b.n	8016836 <_vfiprintf_r+0xe2>
 8016890:	9b03      	ldr	r3, [sp, #12]
 8016892:	1d19      	adds	r1, r3, #4
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	9103      	str	r1, [sp, #12]
 8016898:	2b00      	cmp	r3, #0
 801689a:	bfbb      	ittet	lt
 801689c:	425b      	neglt	r3, r3
 801689e:	f042 0202 	orrlt.w	r2, r2, #2
 80168a2:	9307      	strge	r3, [sp, #28]
 80168a4:	9307      	strlt	r3, [sp, #28]
 80168a6:	bfb8      	it	lt
 80168a8:	9204      	strlt	r2, [sp, #16]
 80168aa:	7823      	ldrb	r3, [r4, #0]
 80168ac:	2b2e      	cmp	r3, #46	; 0x2e
 80168ae:	d10c      	bne.n	80168ca <_vfiprintf_r+0x176>
 80168b0:	7863      	ldrb	r3, [r4, #1]
 80168b2:	2b2a      	cmp	r3, #42	; 0x2a
 80168b4:	d135      	bne.n	8016922 <_vfiprintf_r+0x1ce>
 80168b6:	9b03      	ldr	r3, [sp, #12]
 80168b8:	1d1a      	adds	r2, r3, #4
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	9203      	str	r2, [sp, #12]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	bfb8      	it	lt
 80168c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80168c6:	3402      	adds	r4, #2
 80168c8:	9305      	str	r3, [sp, #20]
 80168ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80169b0 <_vfiprintf_r+0x25c>
 80168ce:	7821      	ldrb	r1, [r4, #0]
 80168d0:	2203      	movs	r2, #3
 80168d2:	4650      	mov	r0, sl
 80168d4:	f7e9 fc9c 	bl	8000210 <memchr>
 80168d8:	b140      	cbz	r0, 80168ec <_vfiprintf_r+0x198>
 80168da:	2340      	movs	r3, #64	; 0x40
 80168dc:	eba0 000a 	sub.w	r0, r0, sl
 80168e0:	fa03 f000 	lsl.w	r0, r3, r0
 80168e4:	9b04      	ldr	r3, [sp, #16]
 80168e6:	4303      	orrs	r3, r0
 80168e8:	3401      	adds	r4, #1
 80168ea:	9304      	str	r3, [sp, #16]
 80168ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80168f0:	482c      	ldr	r0, [pc, #176]	; (80169a4 <_vfiprintf_r+0x250>)
 80168f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80168f6:	2206      	movs	r2, #6
 80168f8:	f7e9 fc8a 	bl	8000210 <memchr>
 80168fc:	2800      	cmp	r0, #0
 80168fe:	d03f      	beq.n	8016980 <_vfiprintf_r+0x22c>
 8016900:	4b29      	ldr	r3, [pc, #164]	; (80169a8 <_vfiprintf_r+0x254>)
 8016902:	bb1b      	cbnz	r3, 801694c <_vfiprintf_r+0x1f8>
 8016904:	9b03      	ldr	r3, [sp, #12]
 8016906:	3307      	adds	r3, #7
 8016908:	f023 0307 	bic.w	r3, r3, #7
 801690c:	3308      	adds	r3, #8
 801690e:	9303      	str	r3, [sp, #12]
 8016910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016912:	443b      	add	r3, r7
 8016914:	9309      	str	r3, [sp, #36]	; 0x24
 8016916:	e767      	b.n	80167e8 <_vfiprintf_r+0x94>
 8016918:	fb0c 3202 	mla	r2, ip, r2, r3
 801691c:	460c      	mov	r4, r1
 801691e:	2001      	movs	r0, #1
 8016920:	e7a5      	b.n	801686e <_vfiprintf_r+0x11a>
 8016922:	2300      	movs	r3, #0
 8016924:	3401      	adds	r4, #1
 8016926:	9305      	str	r3, [sp, #20]
 8016928:	4619      	mov	r1, r3
 801692a:	f04f 0c0a 	mov.w	ip, #10
 801692e:	4620      	mov	r0, r4
 8016930:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016934:	3a30      	subs	r2, #48	; 0x30
 8016936:	2a09      	cmp	r2, #9
 8016938:	d903      	bls.n	8016942 <_vfiprintf_r+0x1ee>
 801693a:	2b00      	cmp	r3, #0
 801693c:	d0c5      	beq.n	80168ca <_vfiprintf_r+0x176>
 801693e:	9105      	str	r1, [sp, #20]
 8016940:	e7c3      	b.n	80168ca <_vfiprintf_r+0x176>
 8016942:	fb0c 2101 	mla	r1, ip, r1, r2
 8016946:	4604      	mov	r4, r0
 8016948:	2301      	movs	r3, #1
 801694a:	e7f0      	b.n	801692e <_vfiprintf_r+0x1da>
 801694c:	ab03      	add	r3, sp, #12
 801694e:	9300      	str	r3, [sp, #0]
 8016950:	462a      	mov	r2, r5
 8016952:	4b16      	ldr	r3, [pc, #88]	; (80169ac <_vfiprintf_r+0x258>)
 8016954:	a904      	add	r1, sp, #16
 8016956:	4630      	mov	r0, r6
 8016958:	f3af 8000 	nop.w
 801695c:	4607      	mov	r7, r0
 801695e:	1c78      	adds	r0, r7, #1
 8016960:	d1d6      	bne.n	8016910 <_vfiprintf_r+0x1bc>
 8016962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016964:	07d9      	lsls	r1, r3, #31
 8016966:	d405      	bmi.n	8016974 <_vfiprintf_r+0x220>
 8016968:	89ab      	ldrh	r3, [r5, #12]
 801696a:	059a      	lsls	r2, r3, #22
 801696c:	d402      	bmi.n	8016974 <_vfiprintf_r+0x220>
 801696e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016970:	f000 fd04 	bl	801737c <__retarget_lock_release_recursive>
 8016974:	89ab      	ldrh	r3, [r5, #12]
 8016976:	065b      	lsls	r3, r3, #25
 8016978:	f53f af12 	bmi.w	80167a0 <_vfiprintf_r+0x4c>
 801697c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801697e:	e711      	b.n	80167a4 <_vfiprintf_r+0x50>
 8016980:	ab03      	add	r3, sp, #12
 8016982:	9300      	str	r3, [sp, #0]
 8016984:	462a      	mov	r2, r5
 8016986:	4b09      	ldr	r3, [pc, #36]	; (80169ac <_vfiprintf_r+0x258>)
 8016988:	a904      	add	r1, sp, #16
 801698a:	4630      	mov	r0, r6
 801698c:	f000 f880 	bl	8016a90 <_printf_i>
 8016990:	e7e4      	b.n	801695c <_vfiprintf_r+0x208>
 8016992:	bf00      	nop
 8016994:	0801a78c 	.word	0x0801a78c
 8016998:	0801a7ac 	.word	0x0801a7ac
 801699c:	0801a76c 	.word	0x0801a76c
 80169a0:	0801a734 	.word	0x0801a734
 80169a4:	0801a73e 	.word	0x0801a73e
 80169a8:	00000000 	.word	0x00000000
 80169ac:	0801672f 	.word	0x0801672f
 80169b0:	0801a73a 	.word	0x0801a73a

080169b4 <_printf_common>:
 80169b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169b8:	4616      	mov	r6, r2
 80169ba:	4699      	mov	r9, r3
 80169bc:	688a      	ldr	r2, [r1, #8]
 80169be:	690b      	ldr	r3, [r1, #16]
 80169c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80169c4:	4293      	cmp	r3, r2
 80169c6:	bfb8      	it	lt
 80169c8:	4613      	movlt	r3, r2
 80169ca:	6033      	str	r3, [r6, #0]
 80169cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80169d0:	4607      	mov	r7, r0
 80169d2:	460c      	mov	r4, r1
 80169d4:	b10a      	cbz	r2, 80169da <_printf_common+0x26>
 80169d6:	3301      	adds	r3, #1
 80169d8:	6033      	str	r3, [r6, #0]
 80169da:	6823      	ldr	r3, [r4, #0]
 80169dc:	0699      	lsls	r1, r3, #26
 80169de:	bf42      	ittt	mi
 80169e0:	6833      	ldrmi	r3, [r6, #0]
 80169e2:	3302      	addmi	r3, #2
 80169e4:	6033      	strmi	r3, [r6, #0]
 80169e6:	6825      	ldr	r5, [r4, #0]
 80169e8:	f015 0506 	ands.w	r5, r5, #6
 80169ec:	d106      	bne.n	80169fc <_printf_common+0x48>
 80169ee:	f104 0a19 	add.w	sl, r4, #25
 80169f2:	68e3      	ldr	r3, [r4, #12]
 80169f4:	6832      	ldr	r2, [r6, #0]
 80169f6:	1a9b      	subs	r3, r3, r2
 80169f8:	42ab      	cmp	r3, r5
 80169fa:	dc26      	bgt.n	8016a4a <_printf_common+0x96>
 80169fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016a00:	1e13      	subs	r3, r2, #0
 8016a02:	6822      	ldr	r2, [r4, #0]
 8016a04:	bf18      	it	ne
 8016a06:	2301      	movne	r3, #1
 8016a08:	0692      	lsls	r2, r2, #26
 8016a0a:	d42b      	bmi.n	8016a64 <_printf_common+0xb0>
 8016a0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016a10:	4649      	mov	r1, r9
 8016a12:	4638      	mov	r0, r7
 8016a14:	47c0      	blx	r8
 8016a16:	3001      	adds	r0, #1
 8016a18:	d01e      	beq.n	8016a58 <_printf_common+0xa4>
 8016a1a:	6823      	ldr	r3, [r4, #0]
 8016a1c:	68e5      	ldr	r5, [r4, #12]
 8016a1e:	6832      	ldr	r2, [r6, #0]
 8016a20:	f003 0306 	and.w	r3, r3, #6
 8016a24:	2b04      	cmp	r3, #4
 8016a26:	bf08      	it	eq
 8016a28:	1aad      	subeq	r5, r5, r2
 8016a2a:	68a3      	ldr	r3, [r4, #8]
 8016a2c:	6922      	ldr	r2, [r4, #16]
 8016a2e:	bf0c      	ite	eq
 8016a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016a34:	2500      	movne	r5, #0
 8016a36:	4293      	cmp	r3, r2
 8016a38:	bfc4      	itt	gt
 8016a3a:	1a9b      	subgt	r3, r3, r2
 8016a3c:	18ed      	addgt	r5, r5, r3
 8016a3e:	2600      	movs	r6, #0
 8016a40:	341a      	adds	r4, #26
 8016a42:	42b5      	cmp	r5, r6
 8016a44:	d11a      	bne.n	8016a7c <_printf_common+0xc8>
 8016a46:	2000      	movs	r0, #0
 8016a48:	e008      	b.n	8016a5c <_printf_common+0xa8>
 8016a4a:	2301      	movs	r3, #1
 8016a4c:	4652      	mov	r2, sl
 8016a4e:	4649      	mov	r1, r9
 8016a50:	4638      	mov	r0, r7
 8016a52:	47c0      	blx	r8
 8016a54:	3001      	adds	r0, #1
 8016a56:	d103      	bne.n	8016a60 <_printf_common+0xac>
 8016a58:	f04f 30ff 	mov.w	r0, #4294967295
 8016a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a60:	3501      	adds	r5, #1
 8016a62:	e7c6      	b.n	80169f2 <_printf_common+0x3e>
 8016a64:	18e1      	adds	r1, r4, r3
 8016a66:	1c5a      	adds	r2, r3, #1
 8016a68:	2030      	movs	r0, #48	; 0x30
 8016a6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016a6e:	4422      	add	r2, r4
 8016a70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016a74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016a78:	3302      	adds	r3, #2
 8016a7a:	e7c7      	b.n	8016a0c <_printf_common+0x58>
 8016a7c:	2301      	movs	r3, #1
 8016a7e:	4622      	mov	r2, r4
 8016a80:	4649      	mov	r1, r9
 8016a82:	4638      	mov	r0, r7
 8016a84:	47c0      	blx	r8
 8016a86:	3001      	adds	r0, #1
 8016a88:	d0e6      	beq.n	8016a58 <_printf_common+0xa4>
 8016a8a:	3601      	adds	r6, #1
 8016a8c:	e7d9      	b.n	8016a42 <_printf_common+0x8e>
	...

08016a90 <_printf_i>:
 8016a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016a94:	460c      	mov	r4, r1
 8016a96:	4691      	mov	r9, r2
 8016a98:	7e27      	ldrb	r7, [r4, #24]
 8016a9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016a9c:	2f78      	cmp	r7, #120	; 0x78
 8016a9e:	4680      	mov	r8, r0
 8016aa0:	469a      	mov	sl, r3
 8016aa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016aa6:	d807      	bhi.n	8016ab8 <_printf_i+0x28>
 8016aa8:	2f62      	cmp	r7, #98	; 0x62
 8016aaa:	d80a      	bhi.n	8016ac2 <_printf_i+0x32>
 8016aac:	2f00      	cmp	r7, #0
 8016aae:	f000 80d8 	beq.w	8016c62 <_printf_i+0x1d2>
 8016ab2:	2f58      	cmp	r7, #88	; 0x58
 8016ab4:	f000 80a3 	beq.w	8016bfe <_printf_i+0x16e>
 8016ab8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016abc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016ac0:	e03a      	b.n	8016b38 <_printf_i+0xa8>
 8016ac2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016ac6:	2b15      	cmp	r3, #21
 8016ac8:	d8f6      	bhi.n	8016ab8 <_printf_i+0x28>
 8016aca:	a001      	add	r0, pc, #4	; (adr r0, 8016ad0 <_printf_i+0x40>)
 8016acc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016ad0:	08016b29 	.word	0x08016b29
 8016ad4:	08016b3d 	.word	0x08016b3d
 8016ad8:	08016ab9 	.word	0x08016ab9
 8016adc:	08016ab9 	.word	0x08016ab9
 8016ae0:	08016ab9 	.word	0x08016ab9
 8016ae4:	08016ab9 	.word	0x08016ab9
 8016ae8:	08016b3d 	.word	0x08016b3d
 8016aec:	08016ab9 	.word	0x08016ab9
 8016af0:	08016ab9 	.word	0x08016ab9
 8016af4:	08016ab9 	.word	0x08016ab9
 8016af8:	08016ab9 	.word	0x08016ab9
 8016afc:	08016c49 	.word	0x08016c49
 8016b00:	08016b6d 	.word	0x08016b6d
 8016b04:	08016c2b 	.word	0x08016c2b
 8016b08:	08016ab9 	.word	0x08016ab9
 8016b0c:	08016ab9 	.word	0x08016ab9
 8016b10:	08016c6b 	.word	0x08016c6b
 8016b14:	08016ab9 	.word	0x08016ab9
 8016b18:	08016b6d 	.word	0x08016b6d
 8016b1c:	08016ab9 	.word	0x08016ab9
 8016b20:	08016ab9 	.word	0x08016ab9
 8016b24:	08016c33 	.word	0x08016c33
 8016b28:	680b      	ldr	r3, [r1, #0]
 8016b2a:	1d1a      	adds	r2, r3, #4
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	600a      	str	r2, [r1, #0]
 8016b30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016b34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016b38:	2301      	movs	r3, #1
 8016b3a:	e0a3      	b.n	8016c84 <_printf_i+0x1f4>
 8016b3c:	6825      	ldr	r5, [r4, #0]
 8016b3e:	6808      	ldr	r0, [r1, #0]
 8016b40:	062e      	lsls	r6, r5, #24
 8016b42:	f100 0304 	add.w	r3, r0, #4
 8016b46:	d50a      	bpl.n	8016b5e <_printf_i+0xce>
 8016b48:	6805      	ldr	r5, [r0, #0]
 8016b4a:	600b      	str	r3, [r1, #0]
 8016b4c:	2d00      	cmp	r5, #0
 8016b4e:	da03      	bge.n	8016b58 <_printf_i+0xc8>
 8016b50:	232d      	movs	r3, #45	; 0x2d
 8016b52:	426d      	negs	r5, r5
 8016b54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016b58:	485e      	ldr	r0, [pc, #376]	; (8016cd4 <_printf_i+0x244>)
 8016b5a:	230a      	movs	r3, #10
 8016b5c:	e019      	b.n	8016b92 <_printf_i+0x102>
 8016b5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016b62:	6805      	ldr	r5, [r0, #0]
 8016b64:	600b      	str	r3, [r1, #0]
 8016b66:	bf18      	it	ne
 8016b68:	b22d      	sxthne	r5, r5
 8016b6a:	e7ef      	b.n	8016b4c <_printf_i+0xbc>
 8016b6c:	680b      	ldr	r3, [r1, #0]
 8016b6e:	6825      	ldr	r5, [r4, #0]
 8016b70:	1d18      	adds	r0, r3, #4
 8016b72:	6008      	str	r0, [r1, #0]
 8016b74:	0628      	lsls	r0, r5, #24
 8016b76:	d501      	bpl.n	8016b7c <_printf_i+0xec>
 8016b78:	681d      	ldr	r5, [r3, #0]
 8016b7a:	e002      	b.n	8016b82 <_printf_i+0xf2>
 8016b7c:	0669      	lsls	r1, r5, #25
 8016b7e:	d5fb      	bpl.n	8016b78 <_printf_i+0xe8>
 8016b80:	881d      	ldrh	r5, [r3, #0]
 8016b82:	4854      	ldr	r0, [pc, #336]	; (8016cd4 <_printf_i+0x244>)
 8016b84:	2f6f      	cmp	r7, #111	; 0x6f
 8016b86:	bf0c      	ite	eq
 8016b88:	2308      	moveq	r3, #8
 8016b8a:	230a      	movne	r3, #10
 8016b8c:	2100      	movs	r1, #0
 8016b8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016b92:	6866      	ldr	r6, [r4, #4]
 8016b94:	60a6      	str	r6, [r4, #8]
 8016b96:	2e00      	cmp	r6, #0
 8016b98:	bfa2      	ittt	ge
 8016b9a:	6821      	ldrge	r1, [r4, #0]
 8016b9c:	f021 0104 	bicge.w	r1, r1, #4
 8016ba0:	6021      	strge	r1, [r4, #0]
 8016ba2:	b90d      	cbnz	r5, 8016ba8 <_printf_i+0x118>
 8016ba4:	2e00      	cmp	r6, #0
 8016ba6:	d04d      	beq.n	8016c44 <_printf_i+0x1b4>
 8016ba8:	4616      	mov	r6, r2
 8016baa:	fbb5 f1f3 	udiv	r1, r5, r3
 8016bae:	fb03 5711 	mls	r7, r3, r1, r5
 8016bb2:	5dc7      	ldrb	r7, [r0, r7]
 8016bb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016bb8:	462f      	mov	r7, r5
 8016bba:	42bb      	cmp	r3, r7
 8016bbc:	460d      	mov	r5, r1
 8016bbe:	d9f4      	bls.n	8016baa <_printf_i+0x11a>
 8016bc0:	2b08      	cmp	r3, #8
 8016bc2:	d10b      	bne.n	8016bdc <_printf_i+0x14c>
 8016bc4:	6823      	ldr	r3, [r4, #0]
 8016bc6:	07df      	lsls	r7, r3, #31
 8016bc8:	d508      	bpl.n	8016bdc <_printf_i+0x14c>
 8016bca:	6923      	ldr	r3, [r4, #16]
 8016bcc:	6861      	ldr	r1, [r4, #4]
 8016bce:	4299      	cmp	r1, r3
 8016bd0:	bfde      	ittt	le
 8016bd2:	2330      	movle	r3, #48	; 0x30
 8016bd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016bd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016bdc:	1b92      	subs	r2, r2, r6
 8016bde:	6122      	str	r2, [r4, #16]
 8016be0:	f8cd a000 	str.w	sl, [sp]
 8016be4:	464b      	mov	r3, r9
 8016be6:	aa03      	add	r2, sp, #12
 8016be8:	4621      	mov	r1, r4
 8016bea:	4640      	mov	r0, r8
 8016bec:	f7ff fee2 	bl	80169b4 <_printf_common>
 8016bf0:	3001      	adds	r0, #1
 8016bf2:	d14c      	bne.n	8016c8e <_printf_i+0x1fe>
 8016bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8016bf8:	b004      	add	sp, #16
 8016bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bfe:	4835      	ldr	r0, [pc, #212]	; (8016cd4 <_printf_i+0x244>)
 8016c00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016c04:	6823      	ldr	r3, [r4, #0]
 8016c06:	680e      	ldr	r6, [r1, #0]
 8016c08:	061f      	lsls	r7, r3, #24
 8016c0a:	f856 5b04 	ldr.w	r5, [r6], #4
 8016c0e:	600e      	str	r6, [r1, #0]
 8016c10:	d514      	bpl.n	8016c3c <_printf_i+0x1ac>
 8016c12:	07d9      	lsls	r1, r3, #31
 8016c14:	bf44      	itt	mi
 8016c16:	f043 0320 	orrmi.w	r3, r3, #32
 8016c1a:	6023      	strmi	r3, [r4, #0]
 8016c1c:	b91d      	cbnz	r5, 8016c26 <_printf_i+0x196>
 8016c1e:	6823      	ldr	r3, [r4, #0]
 8016c20:	f023 0320 	bic.w	r3, r3, #32
 8016c24:	6023      	str	r3, [r4, #0]
 8016c26:	2310      	movs	r3, #16
 8016c28:	e7b0      	b.n	8016b8c <_printf_i+0xfc>
 8016c2a:	6823      	ldr	r3, [r4, #0]
 8016c2c:	f043 0320 	orr.w	r3, r3, #32
 8016c30:	6023      	str	r3, [r4, #0]
 8016c32:	2378      	movs	r3, #120	; 0x78
 8016c34:	4828      	ldr	r0, [pc, #160]	; (8016cd8 <_printf_i+0x248>)
 8016c36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016c3a:	e7e3      	b.n	8016c04 <_printf_i+0x174>
 8016c3c:	065e      	lsls	r6, r3, #25
 8016c3e:	bf48      	it	mi
 8016c40:	b2ad      	uxthmi	r5, r5
 8016c42:	e7e6      	b.n	8016c12 <_printf_i+0x182>
 8016c44:	4616      	mov	r6, r2
 8016c46:	e7bb      	b.n	8016bc0 <_printf_i+0x130>
 8016c48:	680b      	ldr	r3, [r1, #0]
 8016c4a:	6826      	ldr	r6, [r4, #0]
 8016c4c:	6960      	ldr	r0, [r4, #20]
 8016c4e:	1d1d      	adds	r5, r3, #4
 8016c50:	600d      	str	r5, [r1, #0]
 8016c52:	0635      	lsls	r5, r6, #24
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	d501      	bpl.n	8016c5c <_printf_i+0x1cc>
 8016c58:	6018      	str	r0, [r3, #0]
 8016c5a:	e002      	b.n	8016c62 <_printf_i+0x1d2>
 8016c5c:	0671      	lsls	r1, r6, #25
 8016c5e:	d5fb      	bpl.n	8016c58 <_printf_i+0x1c8>
 8016c60:	8018      	strh	r0, [r3, #0]
 8016c62:	2300      	movs	r3, #0
 8016c64:	6123      	str	r3, [r4, #16]
 8016c66:	4616      	mov	r6, r2
 8016c68:	e7ba      	b.n	8016be0 <_printf_i+0x150>
 8016c6a:	680b      	ldr	r3, [r1, #0]
 8016c6c:	1d1a      	adds	r2, r3, #4
 8016c6e:	600a      	str	r2, [r1, #0]
 8016c70:	681e      	ldr	r6, [r3, #0]
 8016c72:	6862      	ldr	r2, [r4, #4]
 8016c74:	2100      	movs	r1, #0
 8016c76:	4630      	mov	r0, r6
 8016c78:	f7e9 faca 	bl	8000210 <memchr>
 8016c7c:	b108      	cbz	r0, 8016c82 <_printf_i+0x1f2>
 8016c7e:	1b80      	subs	r0, r0, r6
 8016c80:	6060      	str	r0, [r4, #4]
 8016c82:	6863      	ldr	r3, [r4, #4]
 8016c84:	6123      	str	r3, [r4, #16]
 8016c86:	2300      	movs	r3, #0
 8016c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016c8c:	e7a8      	b.n	8016be0 <_printf_i+0x150>
 8016c8e:	6923      	ldr	r3, [r4, #16]
 8016c90:	4632      	mov	r2, r6
 8016c92:	4649      	mov	r1, r9
 8016c94:	4640      	mov	r0, r8
 8016c96:	47d0      	blx	sl
 8016c98:	3001      	adds	r0, #1
 8016c9a:	d0ab      	beq.n	8016bf4 <_printf_i+0x164>
 8016c9c:	6823      	ldr	r3, [r4, #0]
 8016c9e:	079b      	lsls	r3, r3, #30
 8016ca0:	d413      	bmi.n	8016cca <_printf_i+0x23a>
 8016ca2:	68e0      	ldr	r0, [r4, #12]
 8016ca4:	9b03      	ldr	r3, [sp, #12]
 8016ca6:	4298      	cmp	r0, r3
 8016ca8:	bfb8      	it	lt
 8016caa:	4618      	movlt	r0, r3
 8016cac:	e7a4      	b.n	8016bf8 <_printf_i+0x168>
 8016cae:	2301      	movs	r3, #1
 8016cb0:	4632      	mov	r2, r6
 8016cb2:	4649      	mov	r1, r9
 8016cb4:	4640      	mov	r0, r8
 8016cb6:	47d0      	blx	sl
 8016cb8:	3001      	adds	r0, #1
 8016cba:	d09b      	beq.n	8016bf4 <_printf_i+0x164>
 8016cbc:	3501      	adds	r5, #1
 8016cbe:	68e3      	ldr	r3, [r4, #12]
 8016cc0:	9903      	ldr	r1, [sp, #12]
 8016cc2:	1a5b      	subs	r3, r3, r1
 8016cc4:	42ab      	cmp	r3, r5
 8016cc6:	dcf2      	bgt.n	8016cae <_printf_i+0x21e>
 8016cc8:	e7eb      	b.n	8016ca2 <_printf_i+0x212>
 8016cca:	2500      	movs	r5, #0
 8016ccc:	f104 0619 	add.w	r6, r4, #25
 8016cd0:	e7f5      	b.n	8016cbe <_printf_i+0x22e>
 8016cd2:	bf00      	nop
 8016cd4:	0801a745 	.word	0x0801a745
 8016cd8:	0801a756 	.word	0x0801a756

08016cdc <_sbrk_r>:
 8016cdc:	b538      	push	{r3, r4, r5, lr}
 8016cde:	4d06      	ldr	r5, [pc, #24]	; (8016cf8 <_sbrk_r+0x1c>)
 8016ce0:	2300      	movs	r3, #0
 8016ce2:	4604      	mov	r4, r0
 8016ce4:	4608      	mov	r0, r1
 8016ce6:	602b      	str	r3, [r5, #0]
 8016ce8:	f7eb fe70 	bl	80029cc <_sbrk>
 8016cec:	1c43      	adds	r3, r0, #1
 8016cee:	d102      	bne.n	8016cf6 <_sbrk_r+0x1a>
 8016cf0:	682b      	ldr	r3, [r5, #0]
 8016cf2:	b103      	cbz	r3, 8016cf6 <_sbrk_r+0x1a>
 8016cf4:	6023      	str	r3, [r4, #0]
 8016cf6:	bd38      	pop	{r3, r4, r5, pc}
 8016cf8:	20001b3c 	.word	0x20001b3c

08016cfc <_raise_r>:
 8016cfc:	291f      	cmp	r1, #31
 8016cfe:	b538      	push	{r3, r4, r5, lr}
 8016d00:	4604      	mov	r4, r0
 8016d02:	460d      	mov	r5, r1
 8016d04:	d904      	bls.n	8016d10 <_raise_r+0x14>
 8016d06:	2316      	movs	r3, #22
 8016d08:	6003      	str	r3, [r0, #0]
 8016d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8016d0e:	bd38      	pop	{r3, r4, r5, pc}
 8016d10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016d12:	b112      	cbz	r2, 8016d1a <_raise_r+0x1e>
 8016d14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016d18:	b94b      	cbnz	r3, 8016d2e <_raise_r+0x32>
 8016d1a:	4620      	mov	r0, r4
 8016d1c:	f000 f830 	bl	8016d80 <_getpid_r>
 8016d20:	462a      	mov	r2, r5
 8016d22:	4601      	mov	r1, r0
 8016d24:	4620      	mov	r0, r4
 8016d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016d2a:	f000 b817 	b.w	8016d5c <_kill_r>
 8016d2e:	2b01      	cmp	r3, #1
 8016d30:	d00a      	beq.n	8016d48 <_raise_r+0x4c>
 8016d32:	1c59      	adds	r1, r3, #1
 8016d34:	d103      	bne.n	8016d3e <_raise_r+0x42>
 8016d36:	2316      	movs	r3, #22
 8016d38:	6003      	str	r3, [r0, #0]
 8016d3a:	2001      	movs	r0, #1
 8016d3c:	e7e7      	b.n	8016d0e <_raise_r+0x12>
 8016d3e:	2400      	movs	r4, #0
 8016d40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016d44:	4628      	mov	r0, r5
 8016d46:	4798      	blx	r3
 8016d48:	2000      	movs	r0, #0
 8016d4a:	e7e0      	b.n	8016d0e <_raise_r+0x12>

08016d4c <raise>:
 8016d4c:	4b02      	ldr	r3, [pc, #8]	; (8016d58 <raise+0xc>)
 8016d4e:	4601      	mov	r1, r0
 8016d50:	6818      	ldr	r0, [r3, #0]
 8016d52:	f7ff bfd3 	b.w	8016cfc <_raise_r>
 8016d56:	bf00      	nop
 8016d58:	20000044 	.word	0x20000044

08016d5c <_kill_r>:
 8016d5c:	b538      	push	{r3, r4, r5, lr}
 8016d5e:	4d07      	ldr	r5, [pc, #28]	; (8016d7c <_kill_r+0x20>)
 8016d60:	2300      	movs	r3, #0
 8016d62:	4604      	mov	r4, r0
 8016d64:	4608      	mov	r0, r1
 8016d66:	4611      	mov	r1, r2
 8016d68:	602b      	str	r3, [r5, #0]
 8016d6a:	f7eb fda7 	bl	80028bc <_kill>
 8016d6e:	1c43      	adds	r3, r0, #1
 8016d70:	d102      	bne.n	8016d78 <_kill_r+0x1c>
 8016d72:	682b      	ldr	r3, [r5, #0]
 8016d74:	b103      	cbz	r3, 8016d78 <_kill_r+0x1c>
 8016d76:	6023      	str	r3, [r4, #0]
 8016d78:	bd38      	pop	{r3, r4, r5, pc}
 8016d7a:	bf00      	nop
 8016d7c:	20001b3c 	.word	0x20001b3c

08016d80 <_getpid_r>:
 8016d80:	f7eb bd94 	b.w	80028ac <_getpid>

08016d84 <_vsiprintf_r>:
 8016d84:	b500      	push	{lr}
 8016d86:	b09b      	sub	sp, #108	; 0x6c
 8016d88:	9100      	str	r1, [sp, #0]
 8016d8a:	9104      	str	r1, [sp, #16]
 8016d8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016d90:	9105      	str	r1, [sp, #20]
 8016d92:	9102      	str	r1, [sp, #8]
 8016d94:	4905      	ldr	r1, [pc, #20]	; (8016dac <_vsiprintf_r+0x28>)
 8016d96:	9103      	str	r1, [sp, #12]
 8016d98:	4669      	mov	r1, sp
 8016d9a:	f000 fbe3 	bl	8017564 <_svfiprintf_r>
 8016d9e:	9b00      	ldr	r3, [sp, #0]
 8016da0:	2200      	movs	r2, #0
 8016da2:	701a      	strb	r2, [r3, #0]
 8016da4:	b01b      	add	sp, #108	; 0x6c
 8016da6:	f85d fb04 	ldr.w	pc, [sp], #4
 8016daa:	bf00      	nop
 8016dac:	ffff0208 	.word	0xffff0208

08016db0 <vsiprintf>:
 8016db0:	4613      	mov	r3, r2
 8016db2:	460a      	mov	r2, r1
 8016db4:	4601      	mov	r1, r0
 8016db6:	4802      	ldr	r0, [pc, #8]	; (8016dc0 <vsiprintf+0x10>)
 8016db8:	6800      	ldr	r0, [r0, #0]
 8016dba:	f7ff bfe3 	b.w	8016d84 <_vsiprintf_r>
 8016dbe:	bf00      	nop
 8016dc0:	20000044 	.word	0x20000044

08016dc4 <__swbuf_r>:
 8016dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dc6:	460e      	mov	r6, r1
 8016dc8:	4614      	mov	r4, r2
 8016dca:	4605      	mov	r5, r0
 8016dcc:	b118      	cbz	r0, 8016dd6 <__swbuf_r+0x12>
 8016dce:	6983      	ldr	r3, [r0, #24]
 8016dd0:	b90b      	cbnz	r3, 8016dd6 <__swbuf_r+0x12>
 8016dd2:	f000 fa33 	bl	801723c <__sinit>
 8016dd6:	4b21      	ldr	r3, [pc, #132]	; (8016e5c <__swbuf_r+0x98>)
 8016dd8:	429c      	cmp	r4, r3
 8016dda:	d12b      	bne.n	8016e34 <__swbuf_r+0x70>
 8016ddc:	686c      	ldr	r4, [r5, #4]
 8016dde:	69a3      	ldr	r3, [r4, #24]
 8016de0:	60a3      	str	r3, [r4, #8]
 8016de2:	89a3      	ldrh	r3, [r4, #12]
 8016de4:	071a      	lsls	r2, r3, #28
 8016de6:	d52f      	bpl.n	8016e48 <__swbuf_r+0x84>
 8016de8:	6923      	ldr	r3, [r4, #16]
 8016dea:	b36b      	cbz	r3, 8016e48 <__swbuf_r+0x84>
 8016dec:	6923      	ldr	r3, [r4, #16]
 8016dee:	6820      	ldr	r0, [r4, #0]
 8016df0:	1ac0      	subs	r0, r0, r3
 8016df2:	6963      	ldr	r3, [r4, #20]
 8016df4:	b2f6      	uxtb	r6, r6
 8016df6:	4283      	cmp	r3, r0
 8016df8:	4637      	mov	r7, r6
 8016dfa:	dc04      	bgt.n	8016e06 <__swbuf_r+0x42>
 8016dfc:	4621      	mov	r1, r4
 8016dfe:	4628      	mov	r0, r5
 8016e00:	f000 f988 	bl	8017114 <_fflush_r>
 8016e04:	bb30      	cbnz	r0, 8016e54 <__swbuf_r+0x90>
 8016e06:	68a3      	ldr	r3, [r4, #8]
 8016e08:	3b01      	subs	r3, #1
 8016e0a:	60a3      	str	r3, [r4, #8]
 8016e0c:	6823      	ldr	r3, [r4, #0]
 8016e0e:	1c5a      	adds	r2, r3, #1
 8016e10:	6022      	str	r2, [r4, #0]
 8016e12:	701e      	strb	r6, [r3, #0]
 8016e14:	6963      	ldr	r3, [r4, #20]
 8016e16:	3001      	adds	r0, #1
 8016e18:	4283      	cmp	r3, r0
 8016e1a:	d004      	beq.n	8016e26 <__swbuf_r+0x62>
 8016e1c:	89a3      	ldrh	r3, [r4, #12]
 8016e1e:	07db      	lsls	r3, r3, #31
 8016e20:	d506      	bpl.n	8016e30 <__swbuf_r+0x6c>
 8016e22:	2e0a      	cmp	r6, #10
 8016e24:	d104      	bne.n	8016e30 <__swbuf_r+0x6c>
 8016e26:	4621      	mov	r1, r4
 8016e28:	4628      	mov	r0, r5
 8016e2a:	f000 f973 	bl	8017114 <_fflush_r>
 8016e2e:	b988      	cbnz	r0, 8016e54 <__swbuf_r+0x90>
 8016e30:	4638      	mov	r0, r7
 8016e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e34:	4b0a      	ldr	r3, [pc, #40]	; (8016e60 <__swbuf_r+0x9c>)
 8016e36:	429c      	cmp	r4, r3
 8016e38:	d101      	bne.n	8016e3e <__swbuf_r+0x7a>
 8016e3a:	68ac      	ldr	r4, [r5, #8]
 8016e3c:	e7cf      	b.n	8016dde <__swbuf_r+0x1a>
 8016e3e:	4b09      	ldr	r3, [pc, #36]	; (8016e64 <__swbuf_r+0xa0>)
 8016e40:	429c      	cmp	r4, r3
 8016e42:	bf08      	it	eq
 8016e44:	68ec      	ldreq	r4, [r5, #12]
 8016e46:	e7ca      	b.n	8016dde <__swbuf_r+0x1a>
 8016e48:	4621      	mov	r1, r4
 8016e4a:	4628      	mov	r0, r5
 8016e4c:	f000 f80c 	bl	8016e68 <__swsetup_r>
 8016e50:	2800      	cmp	r0, #0
 8016e52:	d0cb      	beq.n	8016dec <__swbuf_r+0x28>
 8016e54:	f04f 37ff 	mov.w	r7, #4294967295
 8016e58:	e7ea      	b.n	8016e30 <__swbuf_r+0x6c>
 8016e5a:	bf00      	nop
 8016e5c:	0801a78c 	.word	0x0801a78c
 8016e60:	0801a7ac 	.word	0x0801a7ac
 8016e64:	0801a76c 	.word	0x0801a76c

08016e68 <__swsetup_r>:
 8016e68:	4b32      	ldr	r3, [pc, #200]	; (8016f34 <__swsetup_r+0xcc>)
 8016e6a:	b570      	push	{r4, r5, r6, lr}
 8016e6c:	681d      	ldr	r5, [r3, #0]
 8016e6e:	4606      	mov	r6, r0
 8016e70:	460c      	mov	r4, r1
 8016e72:	b125      	cbz	r5, 8016e7e <__swsetup_r+0x16>
 8016e74:	69ab      	ldr	r3, [r5, #24]
 8016e76:	b913      	cbnz	r3, 8016e7e <__swsetup_r+0x16>
 8016e78:	4628      	mov	r0, r5
 8016e7a:	f000 f9df 	bl	801723c <__sinit>
 8016e7e:	4b2e      	ldr	r3, [pc, #184]	; (8016f38 <__swsetup_r+0xd0>)
 8016e80:	429c      	cmp	r4, r3
 8016e82:	d10f      	bne.n	8016ea4 <__swsetup_r+0x3c>
 8016e84:	686c      	ldr	r4, [r5, #4]
 8016e86:	89a3      	ldrh	r3, [r4, #12]
 8016e88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016e8c:	0719      	lsls	r1, r3, #28
 8016e8e:	d42c      	bmi.n	8016eea <__swsetup_r+0x82>
 8016e90:	06dd      	lsls	r5, r3, #27
 8016e92:	d411      	bmi.n	8016eb8 <__swsetup_r+0x50>
 8016e94:	2309      	movs	r3, #9
 8016e96:	6033      	str	r3, [r6, #0]
 8016e98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016e9c:	81a3      	strh	r3, [r4, #12]
 8016e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8016ea2:	e03e      	b.n	8016f22 <__swsetup_r+0xba>
 8016ea4:	4b25      	ldr	r3, [pc, #148]	; (8016f3c <__swsetup_r+0xd4>)
 8016ea6:	429c      	cmp	r4, r3
 8016ea8:	d101      	bne.n	8016eae <__swsetup_r+0x46>
 8016eaa:	68ac      	ldr	r4, [r5, #8]
 8016eac:	e7eb      	b.n	8016e86 <__swsetup_r+0x1e>
 8016eae:	4b24      	ldr	r3, [pc, #144]	; (8016f40 <__swsetup_r+0xd8>)
 8016eb0:	429c      	cmp	r4, r3
 8016eb2:	bf08      	it	eq
 8016eb4:	68ec      	ldreq	r4, [r5, #12]
 8016eb6:	e7e6      	b.n	8016e86 <__swsetup_r+0x1e>
 8016eb8:	0758      	lsls	r0, r3, #29
 8016eba:	d512      	bpl.n	8016ee2 <__swsetup_r+0x7a>
 8016ebc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016ebe:	b141      	cbz	r1, 8016ed2 <__swsetup_r+0x6a>
 8016ec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ec4:	4299      	cmp	r1, r3
 8016ec6:	d002      	beq.n	8016ece <__swsetup_r+0x66>
 8016ec8:	4630      	mov	r0, r6
 8016eca:	f7ff fb6f 	bl	80165ac <_free_r>
 8016ece:	2300      	movs	r3, #0
 8016ed0:	6363      	str	r3, [r4, #52]	; 0x34
 8016ed2:	89a3      	ldrh	r3, [r4, #12]
 8016ed4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016ed8:	81a3      	strh	r3, [r4, #12]
 8016eda:	2300      	movs	r3, #0
 8016edc:	6063      	str	r3, [r4, #4]
 8016ede:	6923      	ldr	r3, [r4, #16]
 8016ee0:	6023      	str	r3, [r4, #0]
 8016ee2:	89a3      	ldrh	r3, [r4, #12]
 8016ee4:	f043 0308 	orr.w	r3, r3, #8
 8016ee8:	81a3      	strh	r3, [r4, #12]
 8016eea:	6923      	ldr	r3, [r4, #16]
 8016eec:	b94b      	cbnz	r3, 8016f02 <__swsetup_r+0x9a>
 8016eee:	89a3      	ldrh	r3, [r4, #12]
 8016ef0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016ef8:	d003      	beq.n	8016f02 <__swsetup_r+0x9a>
 8016efa:	4621      	mov	r1, r4
 8016efc:	4630      	mov	r0, r6
 8016efe:	f000 fa63 	bl	80173c8 <__smakebuf_r>
 8016f02:	89a0      	ldrh	r0, [r4, #12]
 8016f04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016f08:	f010 0301 	ands.w	r3, r0, #1
 8016f0c:	d00a      	beq.n	8016f24 <__swsetup_r+0xbc>
 8016f0e:	2300      	movs	r3, #0
 8016f10:	60a3      	str	r3, [r4, #8]
 8016f12:	6963      	ldr	r3, [r4, #20]
 8016f14:	425b      	negs	r3, r3
 8016f16:	61a3      	str	r3, [r4, #24]
 8016f18:	6923      	ldr	r3, [r4, #16]
 8016f1a:	b943      	cbnz	r3, 8016f2e <__swsetup_r+0xc6>
 8016f1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016f20:	d1ba      	bne.n	8016e98 <__swsetup_r+0x30>
 8016f22:	bd70      	pop	{r4, r5, r6, pc}
 8016f24:	0781      	lsls	r1, r0, #30
 8016f26:	bf58      	it	pl
 8016f28:	6963      	ldrpl	r3, [r4, #20]
 8016f2a:	60a3      	str	r3, [r4, #8]
 8016f2c:	e7f4      	b.n	8016f18 <__swsetup_r+0xb0>
 8016f2e:	2000      	movs	r0, #0
 8016f30:	e7f7      	b.n	8016f22 <__swsetup_r+0xba>
 8016f32:	bf00      	nop
 8016f34:	20000044 	.word	0x20000044
 8016f38:	0801a78c 	.word	0x0801a78c
 8016f3c:	0801a7ac 	.word	0x0801a7ac
 8016f40:	0801a76c 	.word	0x0801a76c

08016f44 <__register_exitproc>:
 8016f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f48:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8017004 <__register_exitproc+0xc0>
 8016f4c:	4606      	mov	r6, r0
 8016f4e:	f8d8 0000 	ldr.w	r0, [r8]
 8016f52:	461f      	mov	r7, r3
 8016f54:	460d      	mov	r5, r1
 8016f56:	4691      	mov	r9, r2
 8016f58:	f000 fa0e 	bl	8017378 <__retarget_lock_acquire_recursive>
 8016f5c:	4b25      	ldr	r3, [pc, #148]	; (8016ff4 <__register_exitproc+0xb0>)
 8016f5e:	681c      	ldr	r4, [r3, #0]
 8016f60:	b934      	cbnz	r4, 8016f70 <__register_exitproc+0x2c>
 8016f62:	4c25      	ldr	r4, [pc, #148]	; (8016ff8 <__register_exitproc+0xb4>)
 8016f64:	601c      	str	r4, [r3, #0]
 8016f66:	4b25      	ldr	r3, [pc, #148]	; (8016ffc <__register_exitproc+0xb8>)
 8016f68:	b113      	cbz	r3, 8016f70 <__register_exitproc+0x2c>
 8016f6a:	681b      	ldr	r3, [r3, #0]
 8016f6c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8016f70:	6863      	ldr	r3, [r4, #4]
 8016f72:	2b1f      	cmp	r3, #31
 8016f74:	dd07      	ble.n	8016f86 <__register_exitproc+0x42>
 8016f76:	f8d8 0000 	ldr.w	r0, [r8]
 8016f7a:	f000 f9ff 	bl	801737c <__retarget_lock_release_recursive>
 8016f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8016f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f86:	b34e      	cbz	r6, 8016fdc <__register_exitproc+0x98>
 8016f88:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8016f8c:	b988      	cbnz	r0, 8016fb2 <__register_exitproc+0x6e>
 8016f8e:	4b1c      	ldr	r3, [pc, #112]	; (8017000 <__register_exitproc+0xbc>)
 8016f90:	b923      	cbnz	r3, 8016f9c <__register_exitproc+0x58>
 8016f92:	f8d8 0000 	ldr.w	r0, [r8]
 8016f96:	f000 f9f0 	bl	801737a <__retarget_lock_release>
 8016f9a:	e7f0      	b.n	8016f7e <__register_exitproc+0x3a>
 8016f9c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8016fa0:	f7ff fac4 	bl	801652c <malloc>
 8016fa4:	2800      	cmp	r0, #0
 8016fa6:	d0f4      	beq.n	8016f92 <__register_exitproc+0x4e>
 8016fa8:	2300      	movs	r3, #0
 8016faa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8016fae:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8016fb2:	6863      	ldr	r3, [r4, #4]
 8016fb4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8016fb8:	2201      	movs	r2, #1
 8016fba:	409a      	lsls	r2, r3
 8016fbc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8016fc0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8016fc4:	4313      	orrs	r3, r2
 8016fc6:	2e02      	cmp	r6, #2
 8016fc8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8016fcc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8016fd0:	bf02      	ittt	eq
 8016fd2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8016fd6:	431a      	orreq	r2, r3
 8016fd8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8016fdc:	6863      	ldr	r3, [r4, #4]
 8016fde:	f8d8 0000 	ldr.w	r0, [r8]
 8016fe2:	1c5a      	adds	r2, r3, #1
 8016fe4:	3302      	adds	r3, #2
 8016fe6:	6062      	str	r2, [r4, #4]
 8016fe8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8016fec:	f000 f9c6 	bl	801737c <__retarget_lock_release_recursive>
 8016ff0:	2000      	movs	r0, #0
 8016ff2:	e7c6      	b.n	8016f82 <__register_exitproc+0x3e>
 8016ff4:	20001444 	.word	0x20001444
 8016ff8:	200013b8 	.word	0x200013b8
 8016ffc:	0801a768 	.word	0x0801a768
 8017000:	0801652d 	.word	0x0801652d
 8017004:	200000a8 	.word	0x200000a8

08017008 <__sflush_r>:
 8017008:	898a      	ldrh	r2, [r1, #12]
 801700a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801700e:	4605      	mov	r5, r0
 8017010:	0710      	lsls	r0, r2, #28
 8017012:	460c      	mov	r4, r1
 8017014:	d458      	bmi.n	80170c8 <__sflush_r+0xc0>
 8017016:	684b      	ldr	r3, [r1, #4]
 8017018:	2b00      	cmp	r3, #0
 801701a:	dc05      	bgt.n	8017028 <__sflush_r+0x20>
 801701c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801701e:	2b00      	cmp	r3, #0
 8017020:	dc02      	bgt.n	8017028 <__sflush_r+0x20>
 8017022:	2000      	movs	r0, #0
 8017024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017028:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801702a:	2e00      	cmp	r6, #0
 801702c:	d0f9      	beq.n	8017022 <__sflush_r+0x1a>
 801702e:	2300      	movs	r3, #0
 8017030:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017034:	682f      	ldr	r7, [r5, #0]
 8017036:	602b      	str	r3, [r5, #0]
 8017038:	d032      	beq.n	80170a0 <__sflush_r+0x98>
 801703a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801703c:	89a3      	ldrh	r3, [r4, #12]
 801703e:	075a      	lsls	r2, r3, #29
 8017040:	d505      	bpl.n	801704e <__sflush_r+0x46>
 8017042:	6863      	ldr	r3, [r4, #4]
 8017044:	1ac0      	subs	r0, r0, r3
 8017046:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017048:	b10b      	cbz	r3, 801704e <__sflush_r+0x46>
 801704a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801704c:	1ac0      	subs	r0, r0, r3
 801704e:	2300      	movs	r3, #0
 8017050:	4602      	mov	r2, r0
 8017052:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017054:	6a21      	ldr	r1, [r4, #32]
 8017056:	4628      	mov	r0, r5
 8017058:	47b0      	blx	r6
 801705a:	1c43      	adds	r3, r0, #1
 801705c:	89a3      	ldrh	r3, [r4, #12]
 801705e:	d106      	bne.n	801706e <__sflush_r+0x66>
 8017060:	6829      	ldr	r1, [r5, #0]
 8017062:	291d      	cmp	r1, #29
 8017064:	d82c      	bhi.n	80170c0 <__sflush_r+0xb8>
 8017066:	4a2a      	ldr	r2, [pc, #168]	; (8017110 <__sflush_r+0x108>)
 8017068:	40ca      	lsrs	r2, r1
 801706a:	07d6      	lsls	r6, r2, #31
 801706c:	d528      	bpl.n	80170c0 <__sflush_r+0xb8>
 801706e:	2200      	movs	r2, #0
 8017070:	6062      	str	r2, [r4, #4]
 8017072:	04d9      	lsls	r1, r3, #19
 8017074:	6922      	ldr	r2, [r4, #16]
 8017076:	6022      	str	r2, [r4, #0]
 8017078:	d504      	bpl.n	8017084 <__sflush_r+0x7c>
 801707a:	1c42      	adds	r2, r0, #1
 801707c:	d101      	bne.n	8017082 <__sflush_r+0x7a>
 801707e:	682b      	ldr	r3, [r5, #0]
 8017080:	b903      	cbnz	r3, 8017084 <__sflush_r+0x7c>
 8017082:	6560      	str	r0, [r4, #84]	; 0x54
 8017084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017086:	602f      	str	r7, [r5, #0]
 8017088:	2900      	cmp	r1, #0
 801708a:	d0ca      	beq.n	8017022 <__sflush_r+0x1a>
 801708c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017090:	4299      	cmp	r1, r3
 8017092:	d002      	beq.n	801709a <__sflush_r+0x92>
 8017094:	4628      	mov	r0, r5
 8017096:	f7ff fa89 	bl	80165ac <_free_r>
 801709a:	2000      	movs	r0, #0
 801709c:	6360      	str	r0, [r4, #52]	; 0x34
 801709e:	e7c1      	b.n	8017024 <__sflush_r+0x1c>
 80170a0:	6a21      	ldr	r1, [r4, #32]
 80170a2:	2301      	movs	r3, #1
 80170a4:	4628      	mov	r0, r5
 80170a6:	47b0      	blx	r6
 80170a8:	1c41      	adds	r1, r0, #1
 80170aa:	d1c7      	bne.n	801703c <__sflush_r+0x34>
 80170ac:	682b      	ldr	r3, [r5, #0]
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d0c4      	beq.n	801703c <__sflush_r+0x34>
 80170b2:	2b1d      	cmp	r3, #29
 80170b4:	d001      	beq.n	80170ba <__sflush_r+0xb2>
 80170b6:	2b16      	cmp	r3, #22
 80170b8:	d101      	bne.n	80170be <__sflush_r+0xb6>
 80170ba:	602f      	str	r7, [r5, #0]
 80170bc:	e7b1      	b.n	8017022 <__sflush_r+0x1a>
 80170be:	89a3      	ldrh	r3, [r4, #12]
 80170c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170c4:	81a3      	strh	r3, [r4, #12]
 80170c6:	e7ad      	b.n	8017024 <__sflush_r+0x1c>
 80170c8:	690f      	ldr	r7, [r1, #16]
 80170ca:	2f00      	cmp	r7, #0
 80170cc:	d0a9      	beq.n	8017022 <__sflush_r+0x1a>
 80170ce:	0793      	lsls	r3, r2, #30
 80170d0:	680e      	ldr	r6, [r1, #0]
 80170d2:	bf08      	it	eq
 80170d4:	694b      	ldreq	r3, [r1, #20]
 80170d6:	600f      	str	r7, [r1, #0]
 80170d8:	bf18      	it	ne
 80170da:	2300      	movne	r3, #0
 80170dc:	eba6 0807 	sub.w	r8, r6, r7
 80170e0:	608b      	str	r3, [r1, #8]
 80170e2:	f1b8 0f00 	cmp.w	r8, #0
 80170e6:	dd9c      	ble.n	8017022 <__sflush_r+0x1a>
 80170e8:	6a21      	ldr	r1, [r4, #32]
 80170ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80170ec:	4643      	mov	r3, r8
 80170ee:	463a      	mov	r2, r7
 80170f0:	4628      	mov	r0, r5
 80170f2:	47b0      	blx	r6
 80170f4:	2800      	cmp	r0, #0
 80170f6:	dc06      	bgt.n	8017106 <__sflush_r+0xfe>
 80170f8:	89a3      	ldrh	r3, [r4, #12]
 80170fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170fe:	81a3      	strh	r3, [r4, #12]
 8017100:	f04f 30ff 	mov.w	r0, #4294967295
 8017104:	e78e      	b.n	8017024 <__sflush_r+0x1c>
 8017106:	4407      	add	r7, r0
 8017108:	eba8 0800 	sub.w	r8, r8, r0
 801710c:	e7e9      	b.n	80170e2 <__sflush_r+0xda>
 801710e:	bf00      	nop
 8017110:	20400001 	.word	0x20400001

08017114 <_fflush_r>:
 8017114:	b538      	push	{r3, r4, r5, lr}
 8017116:	690b      	ldr	r3, [r1, #16]
 8017118:	4605      	mov	r5, r0
 801711a:	460c      	mov	r4, r1
 801711c:	b913      	cbnz	r3, 8017124 <_fflush_r+0x10>
 801711e:	2500      	movs	r5, #0
 8017120:	4628      	mov	r0, r5
 8017122:	bd38      	pop	{r3, r4, r5, pc}
 8017124:	b118      	cbz	r0, 801712e <_fflush_r+0x1a>
 8017126:	6983      	ldr	r3, [r0, #24]
 8017128:	b90b      	cbnz	r3, 801712e <_fflush_r+0x1a>
 801712a:	f000 f887 	bl	801723c <__sinit>
 801712e:	4b14      	ldr	r3, [pc, #80]	; (8017180 <_fflush_r+0x6c>)
 8017130:	429c      	cmp	r4, r3
 8017132:	d11b      	bne.n	801716c <_fflush_r+0x58>
 8017134:	686c      	ldr	r4, [r5, #4]
 8017136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d0ef      	beq.n	801711e <_fflush_r+0xa>
 801713e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017140:	07d0      	lsls	r0, r2, #31
 8017142:	d404      	bmi.n	801714e <_fflush_r+0x3a>
 8017144:	0599      	lsls	r1, r3, #22
 8017146:	d402      	bmi.n	801714e <_fflush_r+0x3a>
 8017148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801714a:	f000 f915 	bl	8017378 <__retarget_lock_acquire_recursive>
 801714e:	4628      	mov	r0, r5
 8017150:	4621      	mov	r1, r4
 8017152:	f7ff ff59 	bl	8017008 <__sflush_r>
 8017156:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017158:	07da      	lsls	r2, r3, #31
 801715a:	4605      	mov	r5, r0
 801715c:	d4e0      	bmi.n	8017120 <_fflush_r+0xc>
 801715e:	89a3      	ldrh	r3, [r4, #12]
 8017160:	059b      	lsls	r3, r3, #22
 8017162:	d4dd      	bmi.n	8017120 <_fflush_r+0xc>
 8017164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017166:	f000 f909 	bl	801737c <__retarget_lock_release_recursive>
 801716a:	e7d9      	b.n	8017120 <_fflush_r+0xc>
 801716c:	4b05      	ldr	r3, [pc, #20]	; (8017184 <_fflush_r+0x70>)
 801716e:	429c      	cmp	r4, r3
 8017170:	d101      	bne.n	8017176 <_fflush_r+0x62>
 8017172:	68ac      	ldr	r4, [r5, #8]
 8017174:	e7df      	b.n	8017136 <_fflush_r+0x22>
 8017176:	4b04      	ldr	r3, [pc, #16]	; (8017188 <_fflush_r+0x74>)
 8017178:	429c      	cmp	r4, r3
 801717a:	bf08      	it	eq
 801717c:	68ec      	ldreq	r4, [r5, #12]
 801717e:	e7da      	b.n	8017136 <_fflush_r+0x22>
 8017180:	0801a78c 	.word	0x0801a78c
 8017184:	0801a7ac 	.word	0x0801a7ac
 8017188:	0801a76c 	.word	0x0801a76c

0801718c <std>:
 801718c:	2300      	movs	r3, #0
 801718e:	b510      	push	{r4, lr}
 8017190:	4604      	mov	r4, r0
 8017192:	e9c0 3300 	strd	r3, r3, [r0]
 8017196:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801719a:	6083      	str	r3, [r0, #8]
 801719c:	8181      	strh	r1, [r0, #12]
 801719e:	6643      	str	r3, [r0, #100]	; 0x64
 80171a0:	81c2      	strh	r2, [r0, #14]
 80171a2:	6183      	str	r3, [r0, #24]
 80171a4:	4619      	mov	r1, r3
 80171a6:	2208      	movs	r2, #8
 80171a8:	305c      	adds	r0, #92	; 0x5c
 80171aa:	f7ff f9f7 	bl	801659c <memset>
 80171ae:	4b05      	ldr	r3, [pc, #20]	; (80171c4 <std+0x38>)
 80171b0:	6263      	str	r3, [r4, #36]	; 0x24
 80171b2:	4b05      	ldr	r3, [pc, #20]	; (80171c8 <std+0x3c>)
 80171b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80171b6:	4b05      	ldr	r3, [pc, #20]	; (80171cc <std+0x40>)
 80171b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80171ba:	4b05      	ldr	r3, [pc, #20]	; (80171d0 <std+0x44>)
 80171bc:	6224      	str	r4, [r4, #32]
 80171be:	6323      	str	r3, [r4, #48]	; 0x30
 80171c0:	bd10      	pop	{r4, pc}
 80171c2:	bf00      	nop
 80171c4:	08017765 	.word	0x08017765
 80171c8:	08017787 	.word	0x08017787
 80171cc:	080177bf 	.word	0x080177bf
 80171d0:	080177e3 	.word	0x080177e3

080171d4 <_cleanup_r>:
 80171d4:	4901      	ldr	r1, [pc, #4]	; (80171dc <_cleanup_r+0x8>)
 80171d6:	f000 b8af 	b.w	8017338 <_fwalk_reent>
 80171da:	bf00      	nop
 80171dc:	08017115 	.word	0x08017115

080171e0 <__sfmoreglue>:
 80171e0:	b570      	push	{r4, r5, r6, lr}
 80171e2:	1e4a      	subs	r2, r1, #1
 80171e4:	2568      	movs	r5, #104	; 0x68
 80171e6:	4355      	muls	r5, r2
 80171e8:	460e      	mov	r6, r1
 80171ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80171ee:	f7ff fa2d 	bl	801664c <_malloc_r>
 80171f2:	4604      	mov	r4, r0
 80171f4:	b140      	cbz	r0, 8017208 <__sfmoreglue+0x28>
 80171f6:	2100      	movs	r1, #0
 80171f8:	e9c0 1600 	strd	r1, r6, [r0]
 80171fc:	300c      	adds	r0, #12
 80171fe:	60a0      	str	r0, [r4, #8]
 8017200:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017204:	f7ff f9ca 	bl	801659c <memset>
 8017208:	4620      	mov	r0, r4
 801720a:	bd70      	pop	{r4, r5, r6, pc}

0801720c <__sfp_lock_acquire>:
 801720c:	4801      	ldr	r0, [pc, #4]	; (8017214 <__sfp_lock_acquire+0x8>)
 801720e:	f000 b8b3 	b.w	8017378 <__retarget_lock_acquire_recursive>
 8017212:	bf00      	nop
 8017214:	20001b34 	.word	0x20001b34

08017218 <__sfp_lock_release>:
 8017218:	4801      	ldr	r0, [pc, #4]	; (8017220 <__sfp_lock_release+0x8>)
 801721a:	f000 b8af 	b.w	801737c <__retarget_lock_release_recursive>
 801721e:	bf00      	nop
 8017220:	20001b34 	.word	0x20001b34

08017224 <__sinit_lock_acquire>:
 8017224:	4801      	ldr	r0, [pc, #4]	; (801722c <__sinit_lock_acquire+0x8>)
 8017226:	f000 b8a7 	b.w	8017378 <__retarget_lock_acquire_recursive>
 801722a:	bf00      	nop
 801722c:	20001b33 	.word	0x20001b33

08017230 <__sinit_lock_release>:
 8017230:	4801      	ldr	r0, [pc, #4]	; (8017238 <__sinit_lock_release+0x8>)
 8017232:	f000 b8a3 	b.w	801737c <__retarget_lock_release_recursive>
 8017236:	bf00      	nop
 8017238:	20001b33 	.word	0x20001b33

0801723c <__sinit>:
 801723c:	b510      	push	{r4, lr}
 801723e:	4604      	mov	r4, r0
 8017240:	f7ff fff0 	bl	8017224 <__sinit_lock_acquire>
 8017244:	69a3      	ldr	r3, [r4, #24]
 8017246:	b11b      	cbz	r3, 8017250 <__sinit+0x14>
 8017248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801724c:	f7ff bff0 	b.w	8017230 <__sinit_lock_release>
 8017250:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017254:	6523      	str	r3, [r4, #80]	; 0x50
 8017256:	4b13      	ldr	r3, [pc, #76]	; (80172a4 <__sinit+0x68>)
 8017258:	4a13      	ldr	r2, [pc, #76]	; (80172a8 <__sinit+0x6c>)
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	62a2      	str	r2, [r4, #40]	; 0x28
 801725e:	42a3      	cmp	r3, r4
 8017260:	bf04      	itt	eq
 8017262:	2301      	moveq	r3, #1
 8017264:	61a3      	streq	r3, [r4, #24]
 8017266:	4620      	mov	r0, r4
 8017268:	f000 f820 	bl	80172ac <__sfp>
 801726c:	6060      	str	r0, [r4, #4]
 801726e:	4620      	mov	r0, r4
 8017270:	f000 f81c 	bl	80172ac <__sfp>
 8017274:	60a0      	str	r0, [r4, #8]
 8017276:	4620      	mov	r0, r4
 8017278:	f000 f818 	bl	80172ac <__sfp>
 801727c:	2200      	movs	r2, #0
 801727e:	60e0      	str	r0, [r4, #12]
 8017280:	2104      	movs	r1, #4
 8017282:	6860      	ldr	r0, [r4, #4]
 8017284:	f7ff ff82 	bl	801718c <std>
 8017288:	68a0      	ldr	r0, [r4, #8]
 801728a:	2201      	movs	r2, #1
 801728c:	2109      	movs	r1, #9
 801728e:	f7ff ff7d 	bl	801718c <std>
 8017292:	68e0      	ldr	r0, [r4, #12]
 8017294:	2202      	movs	r2, #2
 8017296:	2112      	movs	r1, #18
 8017298:	f7ff ff78 	bl	801718c <std>
 801729c:	2301      	movs	r3, #1
 801729e:	61a3      	str	r3, [r4, #24]
 80172a0:	e7d2      	b.n	8017248 <__sinit+0xc>
 80172a2:	bf00      	nop
 80172a4:	0801a730 	.word	0x0801a730
 80172a8:	080171d5 	.word	0x080171d5

080172ac <__sfp>:
 80172ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172ae:	4607      	mov	r7, r0
 80172b0:	f7ff ffac 	bl	801720c <__sfp_lock_acquire>
 80172b4:	4b1e      	ldr	r3, [pc, #120]	; (8017330 <__sfp+0x84>)
 80172b6:	681e      	ldr	r6, [r3, #0]
 80172b8:	69b3      	ldr	r3, [r6, #24]
 80172ba:	b913      	cbnz	r3, 80172c2 <__sfp+0x16>
 80172bc:	4630      	mov	r0, r6
 80172be:	f7ff ffbd 	bl	801723c <__sinit>
 80172c2:	3648      	adds	r6, #72	; 0x48
 80172c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80172c8:	3b01      	subs	r3, #1
 80172ca:	d503      	bpl.n	80172d4 <__sfp+0x28>
 80172cc:	6833      	ldr	r3, [r6, #0]
 80172ce:	b30b      	cbz	r3, 8017314 <__sfp+0x68>
 80172d0:	6836      	ldr	r6, [r6, #0]
 80172d2:	e7f7      	b.n	80172c4 <__sfp+0x18>
 80172d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80172d8:	b9d5      	cbnz	r5, 8017310 <__sfp+0x64>
 80172da:	4b16      	ldr	r3, [pc, #88]	; (8017334 <__sfp+0x88>)
 80172dc:	60e3      	str	r3, [r4, #12]
 80172de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80172e2:	6665      	str	r5, [r4, #100]	; 0x64
 80172e4:	f000 f847 	bl	8017376 <__retarget_lock_init_recursive>
 80172e8:	f7ff ff96 	bl	8017218 <__sfp_lock_release>
 80172ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80172f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80172f4:	6025      	str	r5, [r4, #0]
 80172f6:	61a5      	str	r5, [r4, #24]
 80172f8:	2208      	movs	r2, #8
 80172fa:	4629      	mov	r1, r5
 80172fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017300:	f7ff f94c 	bl	801659c <memset>
 8017304:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017308:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801730c:	4620      	mov	r0, r4
 801730e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017310:	3468      	adds	r4, #104	; 0x68
 8017312:	e7d9      	b.n	80172c8 <__sfp+0x1c>
 8017314:	2104      	movs	r1, #4
 8017316:	4638      	mov	r0, r7
 8017318:	f7ff ff62 	bl	80171e0 <__sfmoreglue>
 801731c:	4604      	mov	r4, r0
 801731e:	6030      	str	r0, [r6, #0]
 8017320:	2800      	cmp	r0, #0
 8017322:	d1d5      	bne.n	80172d0 <__sfp+0x24>
 8017324:	f7ff ff78 	bl	8017218 <__sfp_lock_release>
 8017328:	230c      	movs	r3, #12
 801732a:	603b      	str	r3, [r7, #0]
 801732c:	e7ee      	b.n	801730c <__sfp+0x60>
 801732e:	bf00      	nop
 8017330:	0801a730 	.word	0x0801a730
 8017334:	ffff0001 	.word	0xffff0001

08017338 <_fwalk_reent>:
 8017338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801733c:	4606      	mov	r6, r0
 801733e:	4688      	mov	r8, r1
 8017340:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017344:	2700      	movs	r7, #0
 8017346:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801734a:	f1b9 0901 	subs.w	r9, r9, #1
 801734e:	d505      	bpl.n	801735c <_fwalk_reent+0x24>
 8017350:	6824      	ldr	r4, [r4, #0]
 8017352:	2c00      	cmp	r4, #0
 8017354:	d1f7      	bne.n	8017346 <_fwalk_reent+0xe>
 8017356:	4638      	mov	r0, r7
 8017358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801735c:	89ab      	ldrh	r3, [r5, #12]
 801735e:	2b01      	cmp	r3, #1
 8017360:	d907      	bls.n	8017372 <_fwalk_reent+0x3a>
 8017362:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017366:	3301      	adds	r3, #1
 8017368:	d003      	beq.n	8017372 <_fwalk_reent+0x3a>
 801736a:	4629      	mov	r1, r5
 801736c:	4630      	mov	r0, r6
 801736e:	47c0      	blx	r8
 8017370:	4307      	orrs	r7, r0
 8017372:	3568      	adds	r5, #104	; 0x68
 8017374:	e7e9      	b.n	801734a <_fwalk_reent+0x12>

08017376 <__retarget_lock_init_recursive>:
 8017376:	4770      	bx	lr

08017378 <__retarget_lock_acquire_recursive>:
 8017378:	4770      	bx	lr

0801737a <__retarget_lock_release>:
 801737a:	4770      	bx	lr

0801737c <__retarget_lock_release_recursive>:
 801737c:	4770      	bx	lr

0801737e <__swhatbuf_r>:
 801737e:	b570      	push	{r4, r5, r6, lr}
 8017380:	460e      	mov	r6, r1
 8017382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017386:	2900      	cmp	r1, #0
 8017388:	b096      	sub	sp, #88	; 0x58
 801738a:	4614      	mov	r4, r2
 801738c:	461d      	mov	r5, r3
 801738e:	da07      	bge.n	80173a0 <__swhatbuf_r+0x22>
 8017390:	2300      	movs	r3, #0
 8017392:	602b      	str	r3, [r5, #0]
 8017394:	89b3      	ldrh	r3, [r6, #12]
 8017396:	061a      	lsls	r2, r3, #24
 8017398:	d410      	bmi.n	80173bc <__swhatbuf_r+0x3e>
 801739a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801739e:	e00e      	b.n	80173be <__swhatbuf_r+0x40>
 80173a0:	466a      	mov	r2, sp
 80173a2:	f000 fa45 	bl	8017830 <_fstat_r>
 80173a6:	2800      	cmp	r0, #0
 80173a8:	dbf2      	blt.n	8017390 <__swhatbuf_r+0x12>
 80173aa:	9a01      	ldr	r2, [sp, #4]
 80173ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80173b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80173b4:	425a      	negs	r2, r3
 80173b6:	415a      	adcs	r2, r3
 80173b8:	602a      	str	r2, [r5, #0]
 80173ba:	e7ee      	b.n	801739a <__swhatbuf_r+0x1c>
 80173bc:	2340      	movs	r3, #64	; 0x40
 80173be:	2000      	movs	r0, #0
 80173c0:	6023      	str	r3, [r4, #0]
 80173c2:	b016      	add	sp, #88	; 0x58
 80173c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080173c8 <__smakebuf_r>:
 80173c8:	898b      	ldrh	r3, [r1, #12]
 80173ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80173cc:	079d      	lsls	r5, r3, #30
 80173ce:	4606      	mov	r6, r0
 80173d0:	460c      	mov	r4, r1
 80173d2:	d507      	bpl.n	80173e4 <__smakebuf_r+0x1c>
 80173d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80173d8:	6023      	str	r3, [r4, #0]
 80173da:	6123      	str	r3, [r4, #16]
 80173dc:	2301      	movs	r3, #1
 80173de:	6163      	str	r3, [r4, #20]
 80173e0:	b002      	add	sp, #8
 80173e2:	bd70      	pop	{r4, r5, r6, pc}
 80173e4:	ab01      	add	r3, sp, #4
 80173e6:	466a      	mov	r2, sp
 80173e8:	f7ff ffc9 	bl	801737e <__swhatbuf_r>
 80173ec:	9900      	ldr	r1, [sp, #0]
 80173ee:	4605      	mov	r5, r0
 80173f0:	4630      	mov	r0, r6
 80173f2:	f7ff f92b 	bl	801664c <_malloc_r>
 80173f6:	b948      	cbnz	r0, 801740c <__smakebuf_r+0x44>
 80173f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80173fc:	059a      	lsls	r2, r3, #22
 80173fe:	d4ef      	bmi.n	80173e0 <__smakebuf_r+0x18>
 8017400:	f023 0303 	bic.w	r3, r3, #3
 8017404:	f043 0302 	orr.w	r3, r3, #2
 8017408:	81a3      	strh	r3, [r4, #12]
 801740a:	e7e3      	b.n	80173d4 <__smakebuf_r+0xc>
 801740c:	4b0d      	ldr	r3, [pc, #52]	; (8017444 <__smakebuf_r+0x7c>)
 801740e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017410:	89a3      	ldrh	r3, [r4, #12]
 8017412:	6020      	str	r0, [r4, #0]
 8017414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017418:	81a3      	strh	r3, [r4, #12]
 801741a:	9b00      	ldr	r3, [sp, #0]
 801741c:	6163      	str	r3, [r4, #20]
 801741e:	9b01      	ldr	r3, [sp, #4]
 8017420:	6120      	str	r0, [r4, #16]
 8017422:	b15b      	cbz	r3, 801743c <__smakebuf_r+0x74>
 8017424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017428:	4630      	mov	r0, r6
 801742a:	f000 fa13 	bl	8017854 <_isatty_r>
 801742e:	b128      	cbz	r0, 801743c <__smakebuf_r+0x74>
 8017430:	89a3      	ldrh	r3, [r4, #12]
 8017432:	f023 0303 	bic.w	r3, r3, #3
 8017436:	f043 0301 	orr.w	r3, r3, #1
 801743a:	81a3      	strh	r3, [r4, #12]
 801743c:	89a0      	ldrh	r0, [r4, #12]
 801743e:	4305      	orrs	r5, r0
 8017440:	81a5      	strh	r5, [r4, #12]
 8017442:	e7cd      	b.n	80173e0 <__smakebuf_r+0x18>
 8017444:	080171d5 	.word	0x080171d5

08017448 <__malloc_lock>:
 8017448:	4801      	ldr	r0, [pc, #4]	; (8017450 <__malloc_lock+0x8>)
 801744a:	f7ff bf95 	b.w	8017378 <__retarget_lock_acquire_recursive>
 801744e:	bf00      	nop
 8017450:	20001b30 	.word	0x20001b30

08017454 <__malloc_unlock>:
 8017454:	4801      	ldr	r0, [pc, #4]	; (801745c <__malloc_unlock+0x8>)
 8017456:	f7ff bf91 	b.w	801737c <__retarget_lock_release_recursive>
 801745a:	bf00      	nop
 801745c:	20001b30 	.word	0x20001b30

08017460 <_realloc_r>:
 8017460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017462:	4607      	mov	r7, r0
 8017464:	4614      	mov	r4, r2
 8017466:	460e      	mov	r6, r1
 8017468:	b921      	cbnz	r1, 8017474 <_realloc_r+0x14>
 801746a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801746e:	4611      	mov	r1, r2
 8017470:	f7ff b8ec 	b.w	801664c <_malloc_r>
 8017474:	b922      	cbnz	r2, 8017480 <_realloc_r+0x20>
 8017476:	f7ff f899 	bl	80165ac <_free_r>
 801747a:	4625      	mov	r5, r4
 801747c:	4628      	mov	r0, r5
 801747e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017480:	f000 fa0a 	bl	8017898 <_malloc_usable_size_r>
 8017484:	42a0      	cmp	r0, r4
 8017486:	d20f      	bcs.n	80174a8 <_realloc_r+0x48>
 8017488:	4621      	mov	r1, r4
 801748a:	4638      	mov	r0, r7
 801748c:	f7ff f8de 	bl	801664c <_malloc_r>
 8017490:	4605      	mov	r5, r0
 8017492:	2800      	cmp	r0, #0
 8017494:	d0f2      	beq.n	801747c <_realloc_r+0x1c>
 8017496:	4631      	mov	r1, r6
 8017498:	4622      	mov	r2, r4
 801749a:	f7ff f857 	bl	801654c <memcpy>
 801749e:	4631      	mov	r1, r6
 80174a0:	4638      	mov	r0, r7
 80174a2:	f7ff f883 	bl	80165ac <_free_r>
 80174a6:	e7e9      	b.n	801747c <_realloc_r+0x1c>
 80174a8:	4635      	mov	r5, r6
 80174aa:	e7e7      	b.n	801747c <_realloc_r+0x1c>

080174ac <__ssputs_r>:
 80174ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80174b0:	688e      	ldr	r6, [r1, #8]
 80174b2:	429e      	cmp	r6, r3
 80174b4:	4682      	mov	sl, r0
 80174b6:	460c      	mov	r4, r1
 80174b8:	4690      	mov	r8, r2
 80174ba:	461f      	mov	r7, r3
 80174bc:	d838      	bhi.n	8017530 <__ssputs_r+0x84>
 80174be:	898a      	ldrh	r2, [r1, #12]
 80174c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80174c4:	d032      	beq.n	801752c <__ssputs_r+0x80>
 80174c6:	6825      	ldr	r5, [r4, #0]
 80174c8:	6909      	ldr	r1, [r1, #16]
 80174ca:	eba5 0901 	sub.w	r9, r5, r1
 80174ce:	6965      	ldr	r5, [r4, #20]
 80174d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80174d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80174d8:	3301      	adds	r3, #1
 80174da:	444b      	add	r3, r9
 80174dc:	106d      	asrs	r5, r5, #1
 80174de:	429d      	cmp	r5, r3
 80174e0:	bf38      	it	cc
 80174e2:	461d      	movcc	r5, r3
 80174e4:	0553      	lsls	r3, r2, #21
 80174e6:	d531      	bpl.n	801754c <__ssputs_r+0xa0>
 80174e8:	4629      	mov	r1, r5
 80174ea:	f7ff f8af 	bl	801664c <_malloc_r>
 80174ee:	4606      	mov	r6, r0
 80174f0:	b950      	cbnz	r0, 8017508 <__ssputs_r+0x5c>
 80174f2:	230c      	movs	r3, #12
 80174f4:	f8ca 3000 	str.w	r3, [sl]
 80174f8:	89a3      	ldrh	r3, [r4, #12]
 80174fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80174fe:	81a3      	strh	r3, [r4, #12]
 8017500:	f04f 30ff 	mov.w	r0, #4294967295
 8017504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017508:	6921      	ldr	r1, [r4, #16]
 801750a:	464a      	mov	r2, r9
 801750c:	f7ff f81e 	bl	801654c <memcpy>
 8017510:	89a3      	ldrh	r3, [r4, #12]
 8017512:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801751a:	81a3      	strh	r3, [r4, #12]
 801751c:	6126      	str	r6, [r4, #16]
 801751e:	6165      	str	r5, [r4, #20]
 8017520:	444e      	add	r6, r9
 8017522:	eba5 0509 	sub.w	r5, r5, r9
 8017526:	6026      	str	r6, [r4, #0]
 8017528:	60a5      	str	r5, [r4, #8]
 801752a:	463e      	mov	r6, r7
 801752c:	42be      	cmp	r6, r7
 801752e:	d900      	bls.n	8017532 <__ssputs_r+0x86>
 8017530:	463e      	mov	r6, r7
 8017532:	4632      	mov	r2, r6
 8017534:	6820      	ldr	r0, [r4, #0]
 8017536:	4641      	mov	r1, r8
 8017538:	f7ff f816 	bl	8016568 <memmove>
 801753c:	68a3      	ldr	r3, [r4, #8]
 801753e:	6822      	ldr	r2, [r4, #0]
 8017540:	1b9b      	subs	r3, r3, r6
 8017542:	4432      	add	r2, r6
 8017544:	60a3      	str	r3, [r4, #8]
 8017546:	6022      	str	r2, [r4, #0]
 8017548:	2000      	movs	r0, #0
 801754a:	e7db      	b.n	8017504 <__ssputs_r+0x58>
 801754c:	462a      	mov	r2, r5
 801754e:	f7ff ff87 	bl	8017460 <_realloc_r>
 8017552:	4606      	mov	r6, r0
 8017554:	2800      	cmp	r0, #0
 8017556:	d1e1      	bne.n	801751c <__ssputs_r+0x70>
 8017558:	6921      	ldr	r1, [r4, #16]
 801755a:	4650      	mov	r0, sl
 801755c:	f7ff f826 	bl	80165ac <_free_r>
 8017560:	e7c7      	b.n	80174f2 <__ssputs_r+0x46>
	...

08017564 <_svfiprintf_r>:
 8017564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017568:	4698      	mov	r8, r3
 801756a:	898b      	ldrh	r3, [r1, #12]
 801756c:	061b      	lsls	r3, r3, #24
 801756e:	b09d      	sub	sp, #116	; 0x74
 8017570:	4607      	mov	r7, r0
 8017572:	460d      	mov	r5, r1
 8017574:	4614      	mov	r4, r2
 8017576:	d50e      	bpl.n	8017596 <_svfiprintf_r+0x32>
 8017578:	690b      	ldr	r3, [r1, #16]
 801757a:	b963      	cbnz	r3, 8017596 <_svfiprintf_r+0x32>
 801757c:	2140      	movs	r1, #64	; 0x40
 801757e:	f7ff f865 	bl	801664c <_malloc_r>
 8017582:	6028      	str	r0, [r5, #0]
 8017584:	6128      	str	r0, [r5, #16]
 8017586:	b920      	cbnz	r0, 8017592 <_svfiprintf_r+0x2e>
 8017588:	230c      	movs	r3, #12
 801758a:	603b      	str	r3, [r7, #0]
 801758c:	f04f 30ff 	mov.w	r0, #4294967295
 8017590:	e0d1      	b.n	8017736 <_svfiprintf_r+0x1d2>
 8017592:	2340      	movs	r3, #64	; 0x40
 8017594:	616b      	str	r3, [r5, #20]
 8017596:	2300      	movs	r3, #0
 8017598:	9309      	str	r3, [sp, #36]	; 0x24
 801759a:	2320      	movs	r3, #32
 801759c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80175a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80175a4:	2330      	movs	r3, #48	; 0x30
 80175a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017750 <_svfiprintf_r+0x1ec>
 80175aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80175ae:	f04f 0901 	mov.w	r9, #1
 80175b2:	4623      	mov	r3, r4
 80175b4:	469a      	mov	sl, r3
 80175b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80175ba:	b10a      	cbz	r2, 80175c0 <_svfiprintf_r+0x5c>
 80175bc:	2a25      	cmp	r2, #37	; 0x25
 80175be:	d1f9      	bne.n	80175b4 <_svfiprintf_r+0x50>
 80175c0:	ebba 0b04 	subs.w	fp, sl, r4
 80175c4:	d00b      	beq.n	80175de <_svfiprintf_r+0x7a>
 80175c6:	465b      	mov	r3, fp
 80175c8:	4622      	mov	r2, r4
 80175ca:	4629      	mov	r1, r5
 80175cc:	4638      	mov	r0, r7
 80175ce:	f7ff ff6d 	bl	80174ac <__ssputs_r>
 80175d2:	3001      	adds	r0, #1
 80175d4:	f000 80aa 	beq.w	801772c <_svfiprintf_r+0x1c8>
 80175d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80175da:	445a      	add	r2, fp
 80175dc:	9209      	str	r2, [sp, #36]	; 0x24
 80175de:	f89a 3000 	ldrb.w	r3, [sl]
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	f000 80a2 	beq.w	801772c <_svfiprintf_r+0x1c8>
 80175e8:	2300      	movs	r3, #0
 80175ea:	f04f 32ff 	mov.w	r2, #4294967295
 80175ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80175f2:	f10a 0a01 	add.w	sl, sl, #1
 80175f6:	9304      	str	r3, [sp, #16]
 80175f8:	9307      	str	r3, [sp, #28]
 80175fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80175fe:	931a      	str	r3, [sp, #104]	; 0x68
 8017600:	4654      	mov	r4, sl
 8017602:	2205      	movs	r2, #5
 8017604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017608:	4851      	ldr	r0, [pc, #324]	; (8017750 <_svfiprintf_r+0x1ec>)
 801760a:	f7e8 fe01 	bl	8000210 <memchr>
 801760e:	9a04      	ldr	r2, [sp, #16]
 8017610:	b9d8      	cbnz	r0, 801764a <_svfiprintf_r+0xe6>
 8017612:	06d0      	lsls	r0, r2, #27
 8017614:	bf44      	itt	mi
 8017616:	2320      	movmi	r3, #32
 8017618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801761c:	0711      	lsls	r1, r2, #28
 801761e:	bf44      	itt	mi
 8017620:	232b      	movmi	r3, #43	; 0x2b
 8017622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017626:	f89a 3000 	ldrb.w	r3, [sl]
 801762a:	2b2a      	cmp	r3, #42	; 0x2a
 801762c:	d015      	beq.n	801765a <_svfiprintf_r+0xf6>
 801762e:	9a07      	ldr	r2, [sp, #28]
 8017630:	4654      	mov	r4, sl
 8017632:	2000      	movs	r0, #0
 8017634:	f04f 0c0a 	mov.w	ip, #10
 8017638:	4621      	mov	r1, r4
 801763a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801763e:	3b30      	subs	r3, #48	; 0x30
 8017640:	2b09      	cmp	r3, #9
 8017642:	d94e      	bls.n	80176e2 <_svfiprintf_r+0x17e>
 8017644:	b1b0      	cbz	r0, 8017674 <_svfiprintf_r+0x110>
 8017646:	9207      	str	r2, [sp, #28]
 8017648:	e014      	b.n	8017674 <_svfiprintf_r+0x110>
 801764a:	eba0 0308 	sub.w	r3, r0, r8
 801764e:	fa09 f303 	lsl.w	r3, r9, r3
 8017652:	4313      	orrs	r3, r2
 8017654:	9304      	str	r3, [sp, #16]
 8017656:	46a2      	mov	sl, r4
 8017658:	e7d2      	b.n	8017600 <_svfiprintf_r+0x9c>
 801765a:	9b03      	ldr	r3, [sp, #12]
 801765c:	1d19      	adds	r1, r3, #4
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	9103      	str	r1, [sp, #12]
 8017662:	2b00      	cmp	r3, #0
 8017664:	bfbb      	ittet	lt
 8017666:	425b      	neglt	r3, r3
 8017668:	f042 0202 	orrlt.w	r2, r2, #2
 801766c:	9307      	strge	r3, [sp, #28]
 801766e:	9307      	strlt	r3, [sp, #28]
 8017670:	bfb8      	it	lt
 8017672:	9204      	strlt	r2, [sp, #16]
 8017674:	7823      	ldrb	r3, [r4, #0]
 8017676:	2b2e      	cmp	r3, #46	; 0x2e
 8017678:	d10c      	bne.n	8017694 <_svfiprintf_r+0x130>
 801767a:	7863      	ldrb	r3, [r4, #1]
 801767c:	2b2a      	cmp	r3, #42	; 0x2a
 801767e:	d135      	bne.n	80176ec <_svfiprintf_r+0x188>
 8017680:	9b03      	ldr	r3, [sp, #12]
 8017682:	1d1a      	adds	r2, r3, #4
 8017684:	681b      	ldr	r3, [r3, #0]
 8017686:	9203      	str	r2, [sp, #12]
 8017688:	2b00      	cmp	r3, #0
 801768a:	bfb8      	it	lt
 801768c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017690:	3402      	adds	r4, #2
 8017692:	9305      	str	r3, [sp, #20]
 8017694:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017760 <_svfiprintf_r+0x1fc>
 8017698:	7821      	ldrb	r1, [r4, #0]
 801769a:	2203      	movs	r2, #3
 801769c:	4650      	mov	r0, sl
 801769e:	f7e8 fdb7 	bl	8000210 <memchr>
 80176a2:	b140      	cbz	r0, 80176b6 <_svfiprintf_r+0x152>
 80176a4:	2340      	movs	r3, #64	; 0x40
 80176a6:	eba0 000a 	sub.w	r0, r0, sl
 80176aa:	fa03 f000 	lsl.w	r0, r3, r0
 80176ae:	9b04      	ldr	r3, [sp, #16]
 80176b0:	4303      	orrs	r3, r0
 80176b2:	3401      	adds	r4, #1
 80176b4:	9304      	str	r3, [sp, #16]
 80176b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80176ba:	4826      	ldr	r0, [pc, #152]	; (8017754 <_svfiprintf_r+0x1f0>)
 80176bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80176c0:	2206      	movs	r2, #6
 80176c2:	f7e8 fda5 	bl	8000210 <memchr>
 80176c6:	2800      	cmp	r0, #0
 80176c8:	d038      	beq.n	801773c <_svfiprintf_r+0x1d8>
 80176ca:	4b23      	ldr	r3, [pc, #140]	; (8017758 <_svfiprintf_r+0x1f4>)
 80176cc:	bb1b      	cbnz	r3, 8017716 <_svfiprintf_r+0x1b2>
 80176ce:	9b03      	ldr	r3, [sp, #12]
 80176d0:	3307      	adds	r3, #7
 80176d2:	f023 0307 	bic.w	r3, r3, #7
 80176d6:	3308      	adds	r3, #8
 80176d8:	9303      	str	r3, [sp, #12]
 80176da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176dc:	4433      	add	r3, r6
 80176de:	9309      	str	r3, [sp, #36]	; 0x24
 80176e0:	e767      	b.n	80175b2 <_svfiprintf_r+0x4e>
 80176e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80176e6:	460c      	mov	r4, r1
 80176e8:	2001      	movs	r0, #1
 80176ea:	e7a5      	b.n	8017638 <_svfiprintf_r+0xd4>
 80176ec:	2300      	movs	r3, #0
 80176ee:	3401      	adds	r4, #1
 80176f0:	9305      	str	r3, [sp, #20]
 80176f2:	4619      	mov	r1, r3
 80176f4:	f04f 0c0a 	mov.w	ip, #10
 80176f8:	4620      	mov	r0, r4
 80176fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80176fe:	3a30      	subs	r2, #48	; 0x30
 8017700:	2a09      	cmp	r2, #9
 8017702:	d903      	bls.n	801770c <_svfiprintf_r+0x1a8>
 8017704:	2b00      	cmp	r3, #0
 8017706:	d0c5      	beq.n	8017694 <_svfiprintf_r+0x130>
 8017708:	9105      	str	r1, [sp, #20]
 801770a:	e7c3      	b.n	8017694 <_svfiprintf_r+0x130>
 801770c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017710:	4604      	mov	r4, r0
 8017712:	2301      	movs	r3, #1
 8017714:	e7f0      	b.n	80176f8 <_svfiprintf_r+0x194>
 8017716:	ab03      	add	r3, sp, #12
 8017718:	9300      	str	r3, [sp, #0]
 801771a:	462a      	mov	r2, r5
 801771c:	4b0f      	ldr	r3, [pc, #60]	; (801775c <_svfiprintf_r+0x1f8>)
 801771e:	a904      	add	r1, sp, #16
 8017720:	4638      	mov	r0, r7
 8017722:	f3af 8000 	nop.w
 8017726:	1c42      	adds	r2, r0, #1
 8017728:	4606      	mov	r6, r0
 801772a:	d1d6      	bne.n	80176da <_svfiprintf_r+0x176>
 801772c:	89ab      	ldrh	r3, [r5, #12]
 801772e:	065b      	lsls	r3, r3, #25
 8017730:	f53f af2c 	bmi.w	801758c <_svfiprintf_r+0x28>
 8017734:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017736:	b01d      	add	sp, #116	; 0x74
 8017738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801773c:	ab03      	add	r3, sp, #12
 801773e:	9300      	str	r3, [sp, #0]
 8017740:	462a      	mov	r2, r5
 8017742:	4b06      	ldr	r3, [pc, #24]	; (801775c <_svfiprintf_r+0x1f8>)
 8017744:	a904      	add	r1, sp, #16
 8017746:	4638      	mov	r0, r7
 8017748:	f7ff f9a2 	bl	8016a90 <_printf_i>
 801774c:	e7eb      	b.n	8017726 <_svfiprintf_r+0x1c2>
 801774e:	bf00      	nop
 8017750:	0801a734 	.word	0x0801a734
 8017754:	0801a73e 	.word	0x0801a73e
 8017758:	00000000 	.word	0x00000000
 801775c:	080174ad 	.word	0x080174ad
 8017760:	0801a73a 	.word	0x0801a73a

08017764 <__sread>:
 8017764:	b510      	push	{r4, lr}
 8017766:	460c      	mov	r4, r1
 8017768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801776c:	f000 f89c 	bl	80178a8 <_read_r>
 8017770:	2800      	cmp	r0, #0
 8017772:	bfab      	itete	ge
 8017774:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017776:	89a3      	ldrhlt	r3, [r4, #12]
 8017778:	181b      	addge	r3, r3, r0
 801777a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801777e:	bfac      	ite	ge
 8017780:	6563      	strge	r3, [r4, #84]	; 0x54
 8017782:	81a3      	strhlt	r3, [r4, #12]
 8017784:	bd10      	pop	{r4, pc}

08017786 <__swrite>:
 8017786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801778a:	461f      	mov	r7, r3
 801778c:	898b      	ldrh	r3, [r1, #12]
 801778e:	05db      	lsls	r3, r3, #23
 8017790:	4605      	mov	r5, r0
 8017792:	460c      	mov	r4, r1
 8017794:	4616      	mov	r6, r2
 8017796:	d505      	bpl.n	80177a4 <__swrite+0x1e>
 8017798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801779c:	2302      	movs	r3, #2
 801779e:	2200      	movs	r2, #0
 80177a0:	f000 f868 	bl	8017874 <_lseek_r>
 80177a4:	89a3      	ldrh	r3, [r4, #12]
 80177a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80177aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80177ae:	81a3      	strh	r3, [r4, #12]
 80177b0:	4632      	mov	r2, r6
 80177b2:	463b      	mov	r3, r7
 80177b4:	4628      	mov	r0, r5
 80177b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80177ba:	f000 b817 	b.w	80177ec <_write_r>

080177be <__sseek>:
 80177be:	b510      	push	{r4, lr}
 80177c0:	460c      	mov	r4, r1
 80177c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80177c6:	f000 f855 	bl	8017874 <_lseek_r>
 80177ca:	1c43      	adds	r3, r0, #1
 80177cc:	89a3      	ldrh	r3, [r4, #12]
 80177ce:	bf15      	itete	ne
 80177d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80177d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80177d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80177da:	81a3      	strheq	r3, [r4, #12]
 80177dc:	bf18      	it	ne
 80177de:	81a3      	strhne	r3, [r4, #12]
 80177e0:	bd10      	pop	{r4, pc}

080177e2 <__sclose>:
 80177e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80177e6:	f000 b813 	b.w	8017810 <_close_r>
	...

080177ec <_write_r>:
 80177ec:	b538      	push	{r3, r4, r5, lr}
 80177ee:	4d07      	ldr	r5, [pc, #28]	; (801780c <_write_r+0x20>)
 80177f0:	4604      	mov	r4, r0
 80177f2:	4608      	mov	r0, r1
 80177f4:	4611      	mov	r1, r2
 80177f6:	2200      	movs	r2, #0
 80177f8:	602a      	str	r2, [r5, #0]
 80177fa:	461a      	mov	r2, r3
 80177fc:	f7eb f895 	bl	800292a <_write>
 8017800:	1c43      	adds	r3, r0, #1
 8017802:	d102      	bne.n	801780a <_write_r+0x1e>
 8017804:	682b      	ldr	r3, [r5, #0]
 8017806:	b103      	cbz	r3, 801780a <_write_r+0x1e>
 8017808:	6023      	str	r3, [r4, #0]
 801780a:	bd38      	pop	{r3, r4, r5, pc}
 801780c:	20001b3c 	.word	0x20001b3c

08017810 <_close_r>:
 8017810:	b538      	push	{r3, r4, r5, lr}
 8017812:	4d06      	ldr	r5, [pc, #24]	; (801782c <_close_r+0x1c>)
 8017814:	2300      	movs	r3, #0
 8017816:	4604      	mov	r4, r0
 8017818:	4608      	mov	r0, r1
 801781a:	602b      	str	r3, [r5, #0]
 801781c:	f7eb f8a1 	bl	8002962 <_close>
 8017820:	1c43      	adds	r3, r0, #1
 8017822:	d102      	bne.n	801782a <_close_r+0x1a>
 8017824:	682b      	ldr	r3, [r5, #0]
 8017826:	b103      	cbz	r3, 801782a <_close_r+0x1a>
 8017828:	6023      	str	r3, [r4, #0]
 801782a:	bd38      	pop	{r3, r4, r5, pc}
 801782c:	20001b3c 	.word	0x20001b3c

08017830 <_fstat_r>:
 8017830:	b538      	push	{r3, r4, r5, lr}
 8017832:	4d07      	ldr	r5, [pc, #28]	; (8017850 <_fstat_r+0x20>)
 8017834:	2300      	movs	r3, #0
 8017836:	4604      	mov	r4, r0
 8017838:	4608      	mov	r0, r1
 801783a:	4611      	mov	r1, r2
 801783c:	602b      	str	r3, [r5, #0]
 801783e:	f7eb f89c 	bl	800297a <_fstat>
 8017842:	1c43      	adds	r3, r0, #1
 8017844:	d102      	bne.n	801784c <_fstat_r+0x1c>
 8017846:	682b      	ldr	r3, [r5, #0]
 8017848:	b103      	cbz	r3, 801784c <_fstat_r+0x1c>
 801784a:	6023      	str	r3, [r4, #0]
 801784c:	bd38      	pop	{r3, r4, r5, pc}
 801784e:	bf00      	nop
 8017850:	20001b3c 	.word	0x20001b3c

08017854 <_isatty_r>:
 8017854:	b538      	push	{r3, r4, r5, lr}
 8017856:	4d06      	ldr	r5, [pc, #24]	; (8017870 <_isatty_r+0x1c>)
 8017858:	2300      	movs	r3, #0
 801785a:	4604      	mov	r4, r0
 801785c:	4608      	mov	r0, r1
 801785e:	602b      	str	r3, [r5, #0]
 8017860:	f7eb f89b 	bl	800299a <_isatty>
 8017864:	1c43      	adds	r3, r0, #1
 8017866:	d102      	bne.n	801786e <_isatty_r+0x1a>
 8017868:	682b      	ldr	r3, [r5, #0]
 801786a:	b103      	cbz	r3, 801786e <_isatty_r+0x1a>
 801786c:	6023      	str	r3, [r4, #0]
 801786e:	bd38      	pop	{r3, r4, r5, pc}
 8017870:	20001b3c 	.word	0x20001b3c

08017874 <_lseek_r>:
 8017874:	b538      	push	{r3, r4, r5, lr}
 8017876:	4d07      	ldr	r5, [pc, #28]	; (8017894 <_lseek_r+0x20>)
 8017878:	4604      	mov	r4, r0
 801787a:	4608      	mov	r0, r1
 801787c:	4611      	mov	r1, r2
 801787e:	2200      	movs	r2, #0
 8017880:	602a      	str	r2, [r5, #0]
 8017882:	461a      	mov	r2, r3
 8017884:	f7eb f894 	bl	80029b0 <_lseek>
 8017888:	1c43      	adds	r3, r0, #1
 801788a:	d102      	bne.n	8017892 <_lseek_r+0x1e>
 801788c:	682b      	ldr	r3, [r5, #0]
 801788e:	b103      	cbz	r3, 8017892 <_lseek_r+0x1e>
 8017890:	6023      	str	r3, [r4, #0]
 8017892:	bd38      	pop	{r3, r4, r5, pc}
 8017894:	20001b3c 	.word	0x20001b3c

08017898 <_malloc_usable_size_r>:
 8017898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801789c:	1f18      	subs	r0, r3, #4
 801789e:	2b00      	cmp	r3, #0
 80178a0:	bfbc      	itt	lt
 80178a2:	580b      	ldrlt	r3, [r1, r0]
 80178a4:	18c0      	addlt	r0, r0, r3
 80178a6:	4770      	bx	lr

080178a8 <_read_r>:
 80178a8:	b538      	push	{r3, r4, r5, lr}
 80178aa:	4d07      	ldr	r5, [pc, #28]	; (80178c8 <_read_r+0x20>)
 80178ac:	4604      	mov	r4, r0
 80178ae:	4608      	mov	r0, r1
 80178b0:	4611      	mov	r1, r2
 80178b2:	2200      	movs	r2, #0
 80178b4:	602a      	str	r2, [r5, #0]
 80178b6:	461a      	mov	r2, r3
 80178b8:	f7eb f81a 	bl	80028f0 <_read>
 80178bc:	1c43      	adds	r3, r0, #1
 80178be:	d102      	bne.n	80178c6 <_read_r+0x1e>
 80178c0:	682b      	ldr	r3, [r5, #0]
 80178c2:	b103      	cbz	r3, 80178c6 <_read_r+0x1e>
 80178c4:	6023      	str	r3, [r4, #0]
 80178c6:	bd38      	pop	{r3, r4, r5, pc}
 80178c8:	20001b3c 	.word	0x20001b3c

080178cc <_init>:
 80178cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178ce:	bf00      	nop
 80178d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80178d2:	bc08      	pop	{r3}
 80178d4:	469e      	mov	lr, r3
 80178d6:	4770      	bx	lr

080178d8 <_fini>:
 80178d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178da:	bf00      	nop
 80178dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80178de:	bc08      	pop	{r3}
 80178e0:	469e      	mov	lr, r3
 80178e2:	4770      	bx	lr
