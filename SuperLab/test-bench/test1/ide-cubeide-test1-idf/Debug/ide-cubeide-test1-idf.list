
ide-cubeide-test1-idf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d10  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08004ee0  08004ee0  00014ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080053b0  080053b0  000153b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  080053b8  080053b8  000153b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   0000000c  080053c4  080053c4  000153c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  080053d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003b8  20000078  08005448  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00002000  20000430  08005448  00020430  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00045f93  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00008b98  00000000  00000000  0006603b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000bd0  00000000  00000000  0006ebd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000e40  00000000  00000000  0006f7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002df23  00000000  00000000  000705e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001db11  00000000  00000000  0009e50b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010071c  00000000  00000000  000bc01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001bc738  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003f84  00000000  00000000  001bc78c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    00009bcc  00000000  00000000  001c0710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000cc  00000000  00000000  001ca2dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001b9  00000000  00000000  001ca3a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004ec8 	.word	0x08004ec8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08004ec8 	.word	0x08004ec8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005bc:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	2400      	movs	r4, #0
 80005c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80005c2:	940c      	str	r4, [sp, #48]	; 0x30
 80005c4:	940d      	str	r4, [sp, #52]	; 0x34
 80005c6:	940e      	str	r4, [sp, #56]	; 0x38
 80005c8:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ca:	4bac      	ldr	r3, [pc, #688]	; (800087c <MX_GPIO_Init+0x2c4>)
 80005cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ce:	f042 0210 	orr.w	r2, r2, #16
 80005d2:	631a      	str	r2, [r3, #48]	; 0x30
 80005d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005d6:	f002 0210 	and.w	r2, r2, #16
 80005da:	9200      	str	r2, [sp, #0]
 80005dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005e4:	631a      	str	r2, [r3, #48]	; 0x30
 80005e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80005ec:	9201      	str	r2, [sp, #4]
 80005ee:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f2:	f042 0202 	orr.w	r2, r2, #2
 80005f6:	631a      	str	r2, [r3, #48]	; 0x30
 80005f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fa:	f002 0202 	and.w	r2, r2, #2
 80005fe:	9202      	str	r2, [sp, #8]
 8000600:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000604:	f042 0208 	orr.w	r2, r2, #8
 8000608:	631a      	str	r2, [r3, #48]	; 0x30
 800060a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800060c:	f002 0208 	and.w	r2, r2, #8
 8000610:	9203      	str	r2, [sp, #12]
 8000612:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000616:	f042 0204 	orr.w	r2, r2, #4
 800061a:	631a      	str	r2, [r3, #48]	; 0x30
 800061c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800061e:	f002 0204 	and.w	r2, r2, #4
 8000622:	9204      	str	r2, [sp, #16]
 8000624:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000628:	f042 0201 	orr.w	r2, r2, #1
 800062c:	631a      	str	r2, [r3, #48]	; 0x30
 800062e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000630:	f002 0201 	and.w	r2, r2, #1
 8000634:	9205      	str	r2, [sp, #20]
 8000636:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800063a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800063e:	631a      	str	r2, [r3, #48]	; 0x30
 8000640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000642:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000646:	9206      	str	r2, [sp, #24]
 8000648:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800064a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800064c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000650:	631a      	str	r2, [r3, #48]	; 0x30
 8000652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000654:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000658:	9207      	str	r2, [sp, #28]
 800065a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800065c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800065e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000662:	631a      	str	r2, [r3, #48]	; 0x30
 8000664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000666:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800066a:	9208      	str	r2, [sp, #32]
 800066c:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800066e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000670:	f042 0220 	orr.w	r2, r2, #32
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
 8000676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000678:	f002 0220 	and.w	r2, r2, #32
 800067c:	9209      	str	r2, [sp, #36]	; 0x24
 800067e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000682:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000686:	631a      	str	r2, [r3, #48]	; 0x30
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068e:	930a      	str	r3, [sp, #40]	; 0x28
 8000690:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000692:	4622      	mov	r2, r4
 8000694:	2110      	movs	r1, #16
 8000696:	487a      	ldr	r0, [pc, #488]	; (8000880 <MX_GPIO_Init+0x2c8>)
 8000698:	f000 fdba 	bl	8001210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|LED2_Pin, GPIO_PIN_RESET);
 800069c:	4622      	mov	r2, r4
 800069e:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80006a2:	4878      	ldr	r0, [pc, #480]	; (8000884 <MX_GPIO_Init+0x2cc>)
 80006a4:	f000 fdb4 	bl	8001210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006a8:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 80008a4 <MX_GPIO_Init+0x2ec>
 80006ac:	2201      	movs	r2, #1
 80006ae:	2120      	movs	r1, #32
 80006b0:	4650      	mov	r0, sl
 80006b2:	f000 fdad 	bl	8001210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, BUTTON1_Pin|BUTTON0_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80006b6:	4622      	mov	r2, r4
 80006b8:	f241 010c 	movw	r1, #4108	; 0x100c
 80006bc:	4872      	ldr	r0, [pc, #456]	; (8000888 <MX_GPIO_Init+0x2d0>)
 80006be:	f000 fda7 	bl	8001210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80006c2:	4622      	mov	r2, r4
 80006c4:	2108      	movs	r1, #8
 80006c6:	4871      	ldr	r0, [pc, #452]	; (800088c <MX_GPIO_Init+0x2d4>)
 80006c8:	f000 fda2 	bl	8001210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|LED1_Pin, GPIO_PIN_RESET);
 80006cc:	4622      	mov	r2, r4
 80006ce:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 80006d2:	486f      	ldr	r0, [pc, #444]	; (8000890 <MX_GPIO_Init+0x2d8>)
 80006d4:	f000 fd9c 	bl	8001210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUTTON2_Pin|BUTTON3_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80006d8:	4622      	mov	r2, r4
 80006da:	21c8      	movs	r1, #200	; 0xc8
 80006dc:	486d      	ldr	r0, [pc, #436]	; (8000894 <MX_GPIO_Init+0x2dc>)
 80006de:	f000 fd97 	bl	8001210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80006e2:	2310      	movs	r3, #16
 80006e4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e6:	2502      	movs	r5, #2
 80006e8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80006ee:	230e      	movs	r3, #14
 80006f0:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 80008a8 <MX_GPIO_Init+0x2f0>
 80006f6:	a90b      	add	r1, sp, #44	; 0x2c
 80006f8:	4648      	mov	r0, r9
 80006fa:	f000 fc99 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80006fe:	2308      	movs	r3, #8
 8000700:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000702:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000706:	a90b      	add	r1, sp, #44	; 0x2c
 8000708:	4648      	mov	r0, r9
 800070a:	f000 fc91 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800070e:	2304      	movs	r3, #4
 8000710:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000716:	2603      	movs	r6, #3
 8000718:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800071a:	2309      	movs	r3, #9
 800071c:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800071e:	a90b      	add	r1, sp, #44	; 0x2c
 8000720:	4648      	mov	r0, r9
 8000722:	f000 fc85 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000726:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800072a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000730:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000732:	230b      	movs	r3, #11
 8000734:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000736:	a90b      	add	r1, sp, #44	; 0x2c
 8000738:	4856      	ldr	r0, [pc, #344]	; (8000894 <MX_GPIO_Init+0x2dc>)
 800073a:	f000 fc79 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800073e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000742:	930b      	str	r3, [sp, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000744:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000748:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800074a:	f04f 080c 	mov.w	r8, #12
 800074e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000752:	a90b      	add	r1, sp, #44	; 0x2c
 8000754:	4648      	mov	r0, r9
 8000756:	f000 fc6b 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800075a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800075e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000760:	2312      	movs	r3, #18
 8000762:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000764:	2701      	movs	r7, #1
 8000766:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800076a:	2304      	movs	r3, #4
 800076c:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076e:	a90b      	add	r1, sp, #44	; 0x2c
 8000770:	4843      	ldr	r0, [pc, #268]	; (8000880 <MX_GPIO_Init+0x2c8>)
 8000772:	f000 fc5d 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000776:	f643 4323 	movw	r3, #15395	; 0x3c23
 800077a:	930b      	str	r3, [sp, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000780:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000782:	f04f 0b0a 	mov.w	fp, #10
 8000786:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078a:	a90b      	add	r1, sp, #44	; 0x2c
 800078c:	483c      	ldr	r0, [pc, #240]	; (8000880 <MX_GPIO_Init+0x2c8>)
 800078e:	f000 fc4f 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8000792:	2310      	movs	r3, #16
 8000794:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 800079c:	a90b      	add	r1, sp, #44	; 0x2c
 800079e:	4838      	ldr	r0, [pc, #224]	; (8000880 <MX_GPIO_Init+0x2c8>)
 80007a0:	f000 fc46 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80007ae:	2308      	movs	r3, #8
 80007b0:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80007b2:	a90b      	add	r1, sp, #44	; 0x2c
 80007b4:	4650      	mov	r0, sl
 80007b6:	f000 fc3b 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80007ba:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80007be:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c4:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80007c6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ca:	a90b      	add	r1, sp, #44	; 0x2c
 80007cc:	4832      	ldr	r0, [pc, #200]	; (8000898 <MX_GPIO_Init+0x2e0>)
 80007ce:	f000 fc2f 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED2_Pin;
 80007d2:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80007d6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	a90b      	add	r1, sp, #44	; 0x2c
 80007e0:	4828      	ldr	r0, [pc, #160]	; (8000884 <MX_GPIO_Init+0x2cc>)
 80007e2:	f000 fc25 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80007e6:	2360      	movs	r3, #96	; 0x60
 80007e8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007f0:	230d      	movs	r3, #13
 80007f2:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f4:	a90b      	add	r1, sp, #44	; 0x2c
 80007f6:	4648      	mov	r0, r9
 80007f8:	f000 fc1a 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80007fc:	2340      	movs	r3, #64	; 0x40
 80007fe:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000804:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000806:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800080a:	a90b      	add	r1, sp, #44	; 0x2c
 800080c:	481c      	ldr	r0, [pc, #112]	; (8000880 <MX_GPIO_Init+0x2c8>)
 800080e:	f000 fc0f 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000812:	f248 1333 	movw	r3, #33075	; 0x8133
 8000816:	930b      	str	r3, [sp, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000818:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800081e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000822:	a90b      	add	r1, sp, #44	; 0x2c
 8000824:	481b      	ldr	r0, [pc, #108]	; (8000894 <MX_GPIO_Init+0x2dc>)
 8000826:	f000 fc03 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800082a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800082e:	930b      	str	r3, [sp, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000836:	230e      	movs	r3, #14
 8000838:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800083a:	a90b      	add	r1, sp, #44	; 0x2c
 800083c:	4817      	ldr	r0, [pc, #92]	; (800089c <MX_GPIO_Init+0x2e4>)
 800083e:	f000 fbf7 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000842:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 8000846:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800084e:	a90b      	add	r1, sp, #44	; 0x2c
 8000850:	4812      	ldr	r0, [pc, #72]	; (800089c <MX_GPIO_Init+0x2e4>)
 8000852:	f000 fbed 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000856:	2340      	movs	r3, #64	; 0x40
 8000858:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_GPIO_Init+0x2e8>)
 800085c:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000860:	a90b      	add	r1, sp, #44	; 0x2c
 8000862:	4650      	mov	r0, sl
 8000864:	f000 fbe4 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000868:	f24c 7303 	movw	r3, #50947	; 0xc703
 800086c:	930b      	str	r3, [sp, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000872:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000874:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8000878:	e018      	b.n	80008ac <MX_GPIO_Init+0x2f4>
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40020400 	.word	0x40020400
 8000884:	40020000 	.word	0x40020000
 8000888:	40022000 	.word	0x40022000
 800088c:	40022800 	.word	0x40022800
 8000890:	40021c00 	.word	0x40021c00
 8000894:	40021800 	.word	0x40021800
 8000898:	40020800 	.word	0x40020800
 800089c:	40022400 	.word	0x40022400
 80008a0:	10120000 	.word	0x10120000
 80008a4:	40020c00 	.word	0x40020c00
 80008a8:	40021000 	.word	0x40021000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ac:	a90b      	add	r1, sp, #44	; 0x2c
 80008ae:	4650      	mov	r0, sl
 80008b0:	f000 fbbe 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80008b4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008b8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008be:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008c0:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	a90b      	add	r1, sp, #44	; 0x2c
 80008c6:	48a2      	ldr	r0, [pc, #648]	; (8000b50 <MX_GPIO_Init+0x598>)
 80008c8:	f000 fbb2 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80008cc:	23f0      	movs	r3, #240	; 0xf0
 80008ce:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80008d6:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008da:	a90b      	add	r1, sp, #44	; 0x2c
 80008dc:	489d      	ldr	r0, [pc, #628]	; (8000b54 <MX_GPIO_Init+0x59c>)
 80008de:	f000 fba7 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80008e2:	23f7      	movs	r3, #247	; 0xf7
 80008e4:	930b      	str	r3, [sp, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008ec:	220e      	movs	r2, #14
 80008ee:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80008f0:	a90b      	add	r1, sp, #44	; 0x2c
 80008f2:	4899      	ldr	r0, [pc, #612]	; (8000b58 <MX_GPIO_Init+0x5a0>)
 80008f4:	f000 fb9c 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80008f8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000902:	2209      	movs	r2, #9
 8000904:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000906:	a90b      	add	r1, sp, #44	; 0x2c
 8000908:	4894      	ldr	r0, [pc, #592]	; (8000b5c <MX_GPIO_Init+0x5a4>)
 800090a:	f000 fb91 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800090e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000912:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800091a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800091e:	a90b      	add	r1, sp, #44	; 0x2c
 8000920:	488e      	ldr	r0, [pc, #568]	; (8000b5c <MX_GPIO_Init+0x5a4>)
 8000922:	f000 fb85 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000926:	2320      	movs	r3, #32
 8000928:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000930:	a90b      	add	r1, sp, #44	; 0x2c
 8000932:	4650      	mov	r0, sl
 8000934:	f000 fb7c 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000938:	2208      	movs	r2, #8
 800093a:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000942:	220d      	movs	r2, #13
 8000944:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000946:	a90b      	add	r1, sp, #44	; 0x2c
 8000948:	4650      	mov	r0, sl
 800094a:	f000 fb71 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON0_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON0_Pin|LCD_DISP_Pin;
 800094e:	f241 030c 	movw	r3, #4108	; 0x100c
 8000952:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800095a:	a90b      	add	r1, sp, #44	; 0x2c
 800095c:	487d      	ldr	r0, [pc, #500]	; (8000b54 <MX_GPIO_Init+0x59c>)
 800095e:	f000 fb67 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000962:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000966:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000968:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800096c:	a90b      	add	r1, sp, #44	; 0x2c
 800096e:	487c      	ldr	r0, [pc, #496]	; (8000b60 <MX_GPIO_Init+0x5a8>)
 8000970:	f000 fb5e 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000974:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000978:	930b      	str	r3, [sp, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000980:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000984:	a90b      	add	r1, sp, #44	; 0x2c
 8000986:	4877      	ldr	r0, [pc, #476]	; (8000b64 <MX_GPIO_Init+0x5ac>)
 8000988:	f000 fb52 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800098c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000990:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000998:	220e      	movs	r2, #14
 800099a:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800099c:	a90b      	add	r1, sp, #44	; 0x2c
 800099e:	486d      	ldr	r0, [pc, #436]	; (8000b54 <MX_GPIO_Init+0x59c>)
 80009a0:	f000 fb46 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80009a4:	2208      	movs	r2, #8
 80009a6:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80009ae:	a90b      	add	r1, sp, #44	; 0x2c
 80009b0:	4869      	ldr	r0, [pc, #420]	; (8000b58 <MX_GPIO_Init+0x5a0>)
 80009b2:	f000 fb3d 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80009b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ba:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80009c2:	220d      	movs	r2, #13
 80009c4:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80009c6:	a90b      	add	r1, sp, #44	; 0x2c
 80009c8:	4864      	ldr	r0, [pc, #400]	; (8000b5c <MX_GPIO_Init+0x5a4>)
 80009ca:	f000 fb31 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ce:	2210      	movs	r2, #16
 80009d0:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009d6:	a90b      	add	r1, sp, #44	; 0x2c
 80009d8:	4650      	mov	r0, sl
 80009da:	f000 fb29 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80009de:	2204      	movs	r2, #4
 80009e0:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80009e8:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80009ec:	a90b      	add	r1, sp, #44	; 0x2c
 80009ee:	4650      	mov	r0, sl
 80009f0:	f000 fb1e 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80009f4:	f248 0304 	movw	r3, #32772	; 0x8004
 80009f8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fa:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80009fe:	a90b      	add	r1, sp, #44	; 0x2c
 8000a00:	4859      	ldr	r0, [pc, #356]	; (8000b68 <MX_GPIO_Init+0x5b0>)
 8000a02:	f000 fb15 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000a06:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a0e:	f04f 0905 	mov.w	r9, #5
 8000a12:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000a16:	a90b      	add	r1, sp, #44	; 0x2c
 8000a18:	484e      	ldr	r0, [pc, #312]	; (8000b54 <MX_GPIO_Init+0x59c>)
 8000a1a:	f000 fb09 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_PWR_EN_Pin LED1_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin|LED1_Pin;
 8000a1e:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000a22:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a2a:	a90b      	add	r1, sp, #44	; 0x2c
 8000a2c:	484e      	ldr	r0, [pc, #312]	; (8000b68 <MX_GPIO_Init+0x5b0>)
 8000a2e:	f000 faff 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000a32:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000a36:	930b      	str	r3, [sp, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a3e:	220d      	movs	r2, #13
 8000a40:	920f      	str	r2, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a42:	a90b      	add	r1, sp, #44	; 0x2c
 8000a44:	4848      	ldr	r0, [pc, #288]	; (8000b68 <MX_GPIO_Init+0x5b0>)
 8000a46:	f000 faf3 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000a4a:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000a52:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000a54:	a90b      	add	r1, sp, #44	; 0x2c
 8000a56:	483f      	ldr	r0, [pc, #252]	; (8000b54 <MX_GPIO_Init+0x59c>)
 8000a58:	f000 faea 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000a5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a60:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a62:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <MX_GPIO_Init+0x5b4>)
 8000a64:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000a68:	a90b      	add	r1, sp, #44	; 0x2c
 8000a6a:	483a      	ldr	r0, [pc, #232]	; (8000b54 <MX_GPIO_Init+0x59c>)
 8000a6c:	f000 fae0 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000a70:	23c0      	movs	r3, #192	; 0xc0
 8000a72:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a7a:	2308      	movs	r3, #8
 8000a7c:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7e:	a90b      	add	r1, sp, #44	; 0x2c
 8000a80:	4837      	ldr	r0, [pc, #220]	; (8000b60 <MX_GPIO_Init+0x5a8>)
 8000a82:	f000 fad5 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000a86:	2310      	movs	r3, #16
 8000a88:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000a90:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000a94:	a90b      	add	r1, sp, #44	; 0x2c
 8000a96:	4834      	ldr	r0, [pc, #208]	; (8000b68 <MX_GPIO_Init+0x5b0>)
 8000a98:	f000 faca 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000a9c:	2328      	movs	r3, #40	; 0x28
 8000a9e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aa6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000aaa:	a90b      	add	r1, sp, #44	; 0x2c
 8000aac:	482e      	ldr	r0, [pc, #184]	; (8000b68 <MX_GPIO_Init+0x5b0>)
 8000aae:	f000 fabf 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin|EXT_RST_Pin;
 8000ab2:	23c8      	movs	r3, #200	; 0xc8
 8000ab4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000abc:	a90b      	add	r1, sp, #44	; 0x2c
 8000abe:	4827      	ldr	r0, [pc, #156]	; (8000b5c <MX_GPIO_Init+0x5a4>)
 8000ac0:	f000 fab6 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000ac4:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000ac8:	930b      	str	r3, [sp, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aca:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ace:	a90b      	add	r1, sp, #44	; 0x2c
 8000ad0:	4824      	ldr	r0, [pc, #144]	; (8000b64 <MX_GPIO_Init+0x5ac>)
 8000ad2:	f000 faad 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ae0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	a90b      	add	r1, sp, #44	; 0x2c
 8000ae6:	481e      	ldr	r0, [pc, #120]	; (8000b60 <MX_GPIO_Init+0x5a8>)
 8000ae8:	f000 faa2 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000aec:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000af6:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afa:	a90b      	add	r1, sp, #44	; 0x2c
 8000afc:	4818      	ldr	r0, [pc, #96]	; (8000b60 <MX_GPIO_Init+0x5a8>)
 8000afe:	f000 fa97 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b02:	2332      	movs	r3, #50	; 0x32
 8000b04:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b0c:	230b      	movs	r3, #11
 8000b0e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b10:	a90b      	add	r1, sp, #44	; 0x2c
 8000b12:	4813      	ldr	r0, [pc, #76]	; (8000b60 <MX_GPIO_Init+0x5a8>)
 8000b14:	f000 fa8c 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b18:	2304      	movs	r3, #4
 8000b1a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b22:	2309      	movs	r3, #9
 8000b24:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b26:	a90b      	add	r1, sp, #44	; 0x2c
 8000b28:	4811      	ldr	r0, [pc, #68]	; (8000b70 <MX_GPIO_Init+0x5b8>)
 8000b2a:	f000 fa81 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000b2e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b32:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b3a:	2309      	movs	r3, #9
 8000b3c:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3e:	a90b      	add	r1, sp, #44	; 0x2c
 8000b40:	4650      	mov	r0, sl
 8000b42:	f000 fa75 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000b46:	2304      	movs	r3, #4
 8000b48:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	940d      	str	r4, [sp, #52]	; 0x34
 8000b4e:	e011      	b.n	8000b74 <MX_GPIO_Init+0x5bc>
 8000b50:	40020000 	.word	0x40020000
 8000b54:	40022000 	.word	0x40022000
 8000b58:	40022800 	.word	0x40022800
 8000b5c:	40021800 	.word	0x40021800
 8000b60:	40020800 	.word	0x40020800
 8000b64:	40021400 	.word	0x40021400
 8000b68:	40021c00 	.word	0x40021c00
 8000b6c:	10120000 	.word	0x10120000
 8000b70:	40020400 	.word	0x40020400
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000b74:	a90b      	add	r1, sp, #44	; 0x2c
 8000b76:	4823      	ldr	r0, [pc, #140]	; (8000c04 <MX_GPIO_Init+0x64c>)
 8000b78:	f000 fa5a 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b7c:	2386      	movs	r3, #134	; 0x86
 8000b7e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b84:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b86:	230b      	movs	r3, #11
 8000b88:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	a90b      	add	r1, sp, #44	; 0x2c
 8000b8c:	481e      	ldr	r0, [pc, #120]	; (8000c08 <MX_GPIO_Init+0x650>)
 8000b8e:	f000 fa4f 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000b92:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b94:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000b98:	a90b      	add	r1, sp, #44	; 0x2c
 8000b9a:	481b      	ldr	r0, [pc, #108]	; (8000c08 <MX_GPIO_Init+0x650>)
 8000b9c:	f000 fa48 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000ba0:	2350      	movs	r3, #80	; 0x50
 8000ba2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000baa:	230d      	movs	r3, #13
 8000bac:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	a90b      	add	r1, sp, #44	; 0x2c
 8000bb0:	4815      	ldr	r0, [pc, #84]	; (8000c08 <MX_GPIO_Init+0x650>)
 8000bb2:	f000 fa3d 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000bb6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bba:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bbc:	2312      	movs	r3, #18
 8000bbe:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc0:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bc8:	a90b      	add	r1, sp, #44	; 0x2c
 8000bca:	4810      	ldr	r0, [pc, #64]	; (8000c0c <MX_GPIO_Init+0x654>)
 8000bcc:	f000 fa30 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000bd0:	2328      	movs	r3, #40	; 0x28
 8000bd2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000bda:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	a90b      	add	r1, sp, #44	; 0x2c
 8000be0:	4809      	ldr	r0, [pc, #36]	; (8000c08 <MX_GPIO_Init+0x650>)
 8000be2:	f000 fa25 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000be6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000bea:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bf2:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	a90b      	add	r1, sp, #44	; 0x2c
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_GPIO_Init+0x658>)
 8000bfa:	f000 fa19 	bl	8001030 <HAL_GPIO_Init>

}
 8000bfe:	b011      	add	sp, #68	; 0x44
 8000c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c04:	40021800 	.word	0x40021800
 8000c08:	40020000 	.word	0x40020000
 8000c0c:	40021c00 	.word	0x40021c00
 8000c10:	40020400 	.word	0x40020400

08000c14 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <Error_Handler+0x2>

08000c18 <MX_USART1_UART_Init>:
{
 8000c18:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000c1a:	480b      	ldr	r0, [pc, #44]	; (8000c48 <MX_USART1_UART_Init+0x30>)
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_USART1_UART_Init+0x34>)
 8000c1e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000c20:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000c24:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	2300      	movs	r3, #0
 8000c28:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c2a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c2c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c2e:	220c      	movs	r2, #12
 8000c30:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c36:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c38:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c3a:	f001 fcd4 	bl	80025e6 <HAL_UART_Init>
 8000c3e:	b900      	cbnz	r0, 8000c42 <MX_USART1_UART_Init+0x2a>
}
 8000c40:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000c42:	f7ff ffe7 	bl	8000c14 <Error_Handler>
 8000c46:	bf00      	nop
 8000c48:	2000039c 	.word	0x2000039c
 8000c4c:	40011000 	.word	0x40011000

08000c50 <SystemClock_Config>:
{
 8000c50:	b510      	push	{r4, lr}
 8000c52:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c54:	2230      	movs	r2, #48	; 0x30
 8000c56:	2100      	movs	r1, #0
 8000c58:	a828      	add	r0, sp, #160	; 0xa0
 8000c5a:	f002 ff4d 	bl	8003af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c5e:	2400      	movs	r4, #0
 8000c60:	9423      	str	r4, [sp, #140]	; 0x8c
 8000c62:	9424      	str	r4, [sp, #144]	; 0x90
 8000c64:	9425      	str	r4, [sp, #148]	; 0x94
 8000c66:	9426      	str	r4, [sp, #152]	; 0x98
 8000c68:	9427      	str	r4, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c6a:	2284      	movs	r2, #132	; 0x84
 8000c6c:	4621      	mov	r1, r4
 8000c6e:	a802      	add	r0, sp, #8
 8000c70:	f002 ff42 	bl	8003af8 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c74:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <SystemClock_Config+0xb8>)
 8000c76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c78:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c7c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c88:	4a20      	ldr	r2, [pc, #128]	; (8000d0c <SystemClock_Config+0xbc>)
 8000c8a:	6813      	ldr	r3, [r2, #0]
 8000c8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	6813      	ldr	r3, [r2, #0]
 8000c98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c9c:	9301      	str	r3, [sp, #4]
 8000c9e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	922b      	str	r2, [sp, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca8:	2210      	movs	r2, #16
 8000caa:	922c      	str	r2, [sp, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cac:	932e      	str	r3, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cae:	942f      	str	r4, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 10;
 8000cb0:	220a      	movs	r2, #10
 8000cb2:	9230      	str	r2, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 210;
 8000cb4:	22d2      	movs	r2, #210	; 0xd2
 8000cb6:	9231      	str	r2, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb8:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cba:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbc:	a828      	add	r0, sp, #160	; 0xa0
 8000cbe:	f000 faad 	bl	800121c <HAL_RCC_OscConfig>
 8000cc2:	b9d0      	cbnz	r0, 8000cfa <SystemClock_Config+0xaa>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cd0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cd4:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cda:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cdc:	2105      	movs	r1, #5
 8000cde:	a823      	add	r0, sp, #140	; 0x8c
 8000ce0:	f000 fd06 	bl	80016f0 <HAL_RCC_ClockConfig>
 8000ce4:	b958      	cbnz	r0, 8000cfe <SystemClock_Config+0xae>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ce6:	2340      	movs	r3, #64	; 0x40
 8000ce8:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cea:	2300      	movs	r3, #0
 8000cec:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cee:	a802      	add	r0, sp, #8
 8000cf0:	f000 fdda 	bl	80018a8 <HAL_RCCEx_PeriphCLKConfig>
 8000cf4:	b928      	cbnz	r0, 8000d02 <SystemClock_Config+0xb2>
}
 8000cf6:	b034      	add	sp, #208	; 0xd0
 8000cf8:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000cfa:	f7ff ff8b 	bl	8000c14 <Error_Handler>
    Error_Handler();
 8000cfe:	f7ff ff89 	bl	8000c14 <Error_Handler>
    Error_Handler();
 8000d02:	f7ff ff87 	bl	8000c14 <Error_Handler>
 8000d06:	bf00      	nop
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40007000 	.word	0x40007000

08000d10 <main>:
{
 8000d10:	b508      	push	{r3, lr}
  HAL_Init();
 8000d12:	f000 f8c5 	bl	8000ea0 <HAL_Init>
  SystemClock_Config();
 8000d16:	f7ff ff9b 	bl	8000c50 <SystemClock_Config>
  XF_initialize(20);
 8000d1a:	2014      	movs	r0, #20
 8000d1c:	f002 fbd2 	bl	80034c4 <XF_initialize>
  Factory_initialize();
 8000d20:	f001 fd51 	bl	80027c6 <Factory_initialize>
  MX_GPIO_Init();
 8000d24:	f7ff fc48 	bl	80005b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d28:	f7ff ff76 	bl	8000c18 <MX_USART1_UART_Init>
  Factory_build();
 8000d2c:	f001 fd62 	bl	80027f4 <Factory_build>
	  XF_execOnce();
 8000d30:	f002 fbdc 	bl	80034ec <XF_execOnce>
  while (1)
 8000d34:	e7fc      	b.n	8000d30 <main+0x20>
	...

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <HAL_MspInit+0x2c>)
 8000d3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d3e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d42:	641a      	str	r2, [r3, #64]	; 0x40
 8000d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d46:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000d4a:	9200      	str	r2, [sp, #0]
 8000d4c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d54:	645a      	str	r2, [r3, #68]	; 0x44
 8000d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5c:	9301      	str	r3, [sp, #4]
 8000d5e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d60:	b002      	add	sp, #8
 8000d62:	4770      	bx	lr
 8000d64:	40023800 	.word	0x40023800

08000d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d68:	b570      	push	{r4, r5, r6, lr}
 8000d6a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	9303      	str	r3, [sp, #12]
 8000d70:	9304      	str	r3, [sp, #16]
 8000d72:	9305      	str	r3, [sp, #20]
 8000d74:	9306      	str	r3, [sp, #24]
 8000d76:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000d78:	6802      	ldr	r2, [r0, #0]
 8000d7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d7e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d001      	beq.n	8000d8a <HAL_UART_MspInit+0x22>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d86:	b008      	add	sp, #32
 8000d88:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d8a:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8000d8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d90:	f042 0210 	orr.w	r2, r2, #16
 8000d94:	645a      	str	r2, [r3, #68]	; 0x44
 8000d96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d98:	f002 0210 	and.w	r2, r2, #16
 8000d9c:	9200      	str	r2, [sp, #0]
 8000d9e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000da2:	f042 0202 	orr.w	r2, r2, #2
 8000da6:	631a      	str	r2, [r3, #48]	; 0x30
 8000da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000daa:	f002 0202 	and.w	r2, r2, #2
 8000dae:	9201      	str	r2, [sp, #4]
 8000db0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000db4:	f042 0201 	orr.w	r2, r2, #1
 8000db8:	631a      	str	r2, [r3, #48]	; 0x30
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	9302      	str	r3, [sp, #8]
 8000dc2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000dc4:	2380      	movs	r3, #128	; 0x80
 8000dc6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2602      	movs	r6, #2
 8000dca:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2400      	movs	r4, #0
 8000dce:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dd2:	2507      	movs	r5, #7
 8000dd4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	a903      	add	r1, sp, #12
 8000dd8:	4807      	ldr	r0, [pc, #28]	; (8000df8 <HAL_UART_MspInit+0x90>)
 8000dda:	f000 f929 	bl	8001030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dea:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000dec:	a903      	add	r1, sp, #12
 8000dee:	4803      	ldr	r0, [pc, #12]	; (8000dfc <HAL_UART_MspInit+0x94>)
 8000df0:	f000 f91e 	bl	8001030 <HAL_GPIO_Init>
}
 8000df4:	e7c7      	b.n	8000d86 <HAL_UART_MspInit+0x1e>
 8000df6:	bf00      	nop
 8000df8:	40020400 	.word	0x40020400
 8000dfc:	40020000 	.word	0x40020000

08000e00 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <NMI_Handler>

08000e02 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <HardFault_Handler>

08000e04 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <MemManage_Handler>

08000e06 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler>

08000e08 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <UsageFault_Handler>

08000e0a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0a:	4770      	bx	lr

08000e0c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0c:	4770      	bx	lr

08000e0e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0e:	4770      	bx	lr

08000e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e10:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e12:	f000 f851 	bl	8000eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  // SysTick handler gets called every millisecond (is given by code
  // generated by STM32CubeIDE). Check which interval is needed by the
  // XF (typically slower) and call XF_tick() accordingly.
  if(XF_isRunning()) {
 8000e16:	f002 f980 	bl	800311a <XF_isRunning>
 8000e1a:	b900      	cbnz	r0, 8000e1e <SysTick_Handler+0xe>
	  }
  }


  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1c:	bd10      	pop	{r4, pc}
	  if ((HAL_GetTick() % XF_tickIntervalInMilliseconds()) == 0)
 8000e1e:	f000 f857 	bl	8000ed0 <HAL_GetTick>
 8000e22:	4604      	mov	r4, r0
 8000e24:	f002 f972 	bl	800310c <XF_tickIntervalInMilliseconds>
 8000e28:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2c:	fb00 4013 	mls	r0, r0, r3, r4
 8000e30:	2800      	cmp	r0, #0
 8000e32:	d1f3      	bne.n	8000e1c <SysTick_Handler+0xc>
	      XF_tick();
 8000e34:	f002 f956 	bl	80030e4 <XF_tick>
}
 8000e38:	e7f0      	b.n	8000e1c <SysTick_Handler+0xc>
	...

08000e3c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <SystemInit+0x18>)
 8000e3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000e42:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e4e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b510      	push	{r4, lr}
 8000e5a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_InitTick+0x40>)
 8000e5e:	7818      	ldrb	r0, [r3, #0]
 8000e60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e64:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e68:	4a0c      	ldr	r2, [pc, #48]	; (8000e9c <HAL_InitTick+0x44>)
 8000e6a:	6810      	ldr	r0, [r2, #0]
 8000e6c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e70:	f000 f878 	bl	8000f64 <HAL_SYSTICK_Config>
 8000e74:	b968      	cbnz	r0, 8000e92 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e76:	2c0f      	cmp	r4, #15
 8000e78:	d901      	bls.n	8000e7e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	e00a      	b.n	8000e94 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4621      	mov	r1, r4
 8000e82:	f04f 30ff 	mov.w	r0, #4294967295
 8000e86:	f000 f83b 	bl	8000f00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e8a:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <HAL_InitTick+0x40>)
 8000e8c:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000e8e:	2000      	movs	r0, #0
 8000e90:	e000      	b.n	8000e94 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000e92:	2001      	movs	r0, #1
}
 8000e94:	bd10      	pop	{r4, pc}
 8000e96:	bf00      	nop
 8000e98:	20000004 	.word	0x20000004
 8000e9c:	20000000 	.word	0x20000000

08000ea0 <HAL_Init>:
{
 8000ea0:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea2:	2003      	movs	r0, #3
 8000ea4:	f000 f81a 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff ffd5 	bl	8000e58 <HAL_InitTick>
  HAL_MspInit();
 8000eae:	f7ff ff43 	bl	8000d38 <HAL_MspInit>
}
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	bd08      	pop	{r3, pc}
	...

08000eb8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000eb8:	4a03      	ldr	r2, [pc, #12]	; (8000ec8 <HAL_IncTick+0x10>)
 8000eba:	6811      	ldr	r1, [r2, #0]
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_IncTick+0x14>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	440b      	add	r3, r1
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	2000041c 	.word	0x2000041c
 8000ecc:	20000004 	.word	0x20000004

08000ed0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ed0:	4b01      	ldr	r3, [pc, #4]	; (8000ed8 <HAL_GetTick+0x8>)
 8000ed2:	6818      	ldr	r0, [r3, #0]
}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	2000041c 	.word	0x2000041c

08000edc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000edc:	4906      	ldr	r1, [pc, #24]	; (8000ef8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000ede:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ee4:	041b      	lsls	r3, r3, #16
 8000ee6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee8:	0200      	lsls	r0, r0, #8
 8000eea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eee:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000ef0:	4a02      	ldr	r2, [pc, #8]	; (8000efc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ef2:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000ef4:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00
 8000efc:	05fa0000 	.word	0x05fa0000

08000f00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f00:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_NVIC_SetPriority+0x58>)
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0a:	f1c3 0407 	rsb	r4, r3, #7
 8000f0e:	2c04      	cmp	r4, #4
 8000f10:	bf28      	it	cs
 8000f12:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f14:	1d1d      	adds	r5, r3, #4
 8000f16:	2d06      	cmp	r5, #6
 8000f18:	d914      	bls.n	8000f44 <HAL_NVIC_SetPriority+0x44>
 8000f1a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	f04f 35ff 	mov.w	r5, #4294967295
 8000f20:	fa05 f404 	lsl.w	r4, r5, r4
 8000f24:	ea21 0104 	bic.w	r1, r1, r4
 8000f28:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2a:	fa05 f303 	lsl.w	r3, r5, r3
 8000f2e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f32:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000f34:	2800      	cmp	r0, #0
 8000f36:	db07      	blt.n	8000f48 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	0109      	lsls	r1, r1, #4
 8000f3a:	b2c9      	uxtb	r1, r1
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <HAL_NVIC_SetPriority+0x5c>)
 8000f3e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f40:	bc30      	pop	{r4, r5}
 8000f42:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f44:	2300      	movs	r3, #0
 8000f46:	e7e9      	b.n	8000f1c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	f000 000f 	and.w	r0, r0, #15
 8000f4c:	0109      	lsls	r1, r1, #4
 8000f4e:	b2c9      	uxtb	r1, r1
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <HAL_NVIC_SetPriority+0x60>)
 8000f52:	5419      	strb	r1, [r3, r0]
 8000f54:	e7f4      	b.n	8000f40 <HAL_NVIC_SetPriority+0x40>
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00
 8000f5c:	e000e400 	.word	0xe000e400
 8000f60:	e000ed14 	.word	0xe000ed14

08000f64 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f64:	3801      	subs	r0, #1
 8000f66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f6a:	d20a      	bcs.n	8000f82 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_SYSTICK_Config+0x24>)
 8000f6e:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <HAL_SYSTICK_Config+0x28>)
 8000f72:	21f0      	movs	r1, #240	; 0xf0
 8000f74:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f78:	2000      	movs	r0, #0
 8000f7a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f80:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f82:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e010 	.word	0xe000e010
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f90:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000f92:	6805      	ldr	r5, [r0, #0]
 8000f94:	682c      	ldr	r4, [r5, #0]
 8000f96:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8000f9a:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000f9c:	6804      	ldr	r4, [r0, #0]
 8000f9e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fa0:	6883      	ldr	r3, [r0, #8]
 8000fa2:	2b40      	cmp	r3, #64	; 0x40
 8000fa4:	d005      	beq.n	8000fb2 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000fa6:	6803      	ldr	r3, [r0, #0]
 8000fa8:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000faa:	6803      	ldr	r3, [r0, #0]
 8000fac:	60da      	str	r2, [r3, #12]
  }
}
 8000fae:	bc30      	pop	{r4, r5}
 8000fb0:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8000fb2:	6803      	ldr	r3, [r0, #0]
 8000fb4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000fb6:	6803      	ldr	r3, [r0, #0]
 8000fb8:	60d9      	str	r1, [r3, #12]
 8000fba:	e7f8      	b.n	8000fae <DMA_SetConfig+0x1e>

08000fbc <HAL_DMA_Start_IT>:
{
 8000fbc:	b538      	push	{r3, r4, r5, lr}
 8000fbe:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fc0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8000fc2:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8000fc6:	2801      	cmp	r0, #1
 8000fc8:	d030      	beq.n	800102c <HAL_DMA_Start_IT+0x70>
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fd0:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8000fd4:	b2c0      	uxtb	r0, r0
 8000fd6:	2801      	cmp	r0, #1
 8000fd8:	d004      	beq.n	8000fe4 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8000fe0:	2002      	movs	r0, #2
}
 8000fe2:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fea:	2000      	movs	r0, #0
 8000fec:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fee:	4620      	mov	r0, r4
 8000ff0:	f7ff ffce 	bl	8000f90 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ff4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000ff6:	233f      	movs	r3, #63	; 0x3f
 8000ff8:	4093      	lsls	r3, r2
 8000ffa:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ffc:	6822      	ldr	r2, [r4, #0]
 8000ffe:	6813      	ldr	r3, [r2, #0]
 8001000:	f043 0316 	orr.w	r3, r3, #22
 8001004:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001006:	6822      	ldr	r2, [r4, #0]
 8001008:	6953      	ldr	r3, [r2, #20]
 800100a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800100e:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001010:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001012:	b123      	cbz	r3, 800101e <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001014:	6822      	ldr	r2, [r4, #0]
 8001016:	6813      	ldr	r3, [r2, #0]
 8001018:	f043 0308 	orr.w	r3, r3, #8
 800101c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800101e:	6822      	ldr	r2, [r4, #0]
 8001020:	6813      	ldr	r3, [r2, #0]
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001028:	2000      	movs	r0, #0
 800102a:	e7da      	b.n	8000fe2 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 800102c:	2002      	movs	r0, #2
 800102e:	e7d8      	b.n	8000fe2 <HAL_DMA_Start_IT+0x26>

08001030 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001030:	2300      	movs	r3, #0
 8001032:	2b0f      	cmp	r3, #15
 8001034:	f200 80e3 	bhi.w	80011fe <HAL_GPIO_Init+0x1ce>
{
 8001038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103a:	b083      	sub	sp, #12
 800103c:	e039      	b.n	80010b2 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800103e:	2209      	movs	r2, #9
 8001040:	e000      	b.n	8001044 <HAL_GPIO_Init+0x14>
 8001042:	2200      	movs	r2, #0
 8001044:	40b2      	lsls	r2, r6
 8001046:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8001048:	3402      	adds	r4, #2
 800104a:	4e6d      	ldr	r6, [pc, #436]	; (8001200 <HAL_GPIO_Init+0x1d0>)
 800104c:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001050:	4a6c      	ldr	r2, [pc, #432]	; (8001204 <HAL_GPIO_Init+0x1d4>)
 8001052:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001054:	43ea      	mvns	r2, r5
 8001056:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800105a:	684f      	ldr	r7, [r1, #4]
 800105c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001060:	d001      	beq.n	8001066 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8001062:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8001066:	4c67      	ldr	r4, [pc, #412]	; (8001204 <HAL_GPIO_Init+0x1d4>)
 8001068:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 800106a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800106c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001070:	684f      	ldr	r7, [r1, #4]
 8001072:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001076:	d001      	beq.n	800107c <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8001078:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 800107c:	4c61      	ldr	r4, [pc, #388]	; (8001204 <HAL_GPIO_Init+0x1d4>)
 800107e:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001080:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001082:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001086:	684f      	ldr	r7, [r1, #4]
 8001088:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800108c:	d001      	beq.n	8001092 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 800108e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8001092:	4c5c      	ldr	r4, [pc, #368]	; (8001204 <HAL_GPIO_Init+0x1d4>)
 8001094:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8001096:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001098:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800109a:	684e      	ldr	r6, [r1, #4]
 800109c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80010a0:	d001      	beq.n	80010a6 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80010a2:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80010a6:	4c57      	ldr	r4, [pc, #348]	; (8001204 <HAL_GPIO_Init+0x1d4>)
 80010a8:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80010aa:	3301      	adds	r3, #1
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	f200 80a4 	bhi.w	80011fa <HAL_GPIO_Init+0x1ca>
    ioposition = ((uint32_t)0x01) << position;
 80010b2:	2201      	movs	r2, #1
 80010b4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b6:	680c      	ldr	r4, [r1, #0]
 80010b8:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80010bc:	ea32 0404 	bics.w	r4, r2, r4
 80010c0:	d1f3      	bne.n	80010aa <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c2:	684c      	ldr	r4, [r1, #4]
 80010c4:	1e66      	subs	r6, r4, #1
 80010c6:	2c11      	cmp	r4, #17
 80010c8:	bf18      	it	ne
 80010ca:	2e01      	cmpne	r6, #1
 80010cc:	d901      	bls.n	80010d2 <HAL_GPIO_Init+0xa2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ce:	2c12      	cmp	r4, #18
 80010d0:	d112      	bne.n	80010f8 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->OSPEEDR; 
 80010d2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010d4:	005f      	lsls	r7, r3, #1
 80010d6:	2403      	movs	r4, #3
 80010d8:	40bc      	lsls	r4, r7
 80010da:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 80010de:	68cc      	ldr	r4, [r1, #12]
 80010e0:	40bc      	lsls	r4, r7
 80010e2:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80010e4:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80010e6:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e8:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80010ec:	684c      	ldr	r4, [r1, #4]
 80010ee:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80010f2:	409a      	lsls	r2, r3
 80010f4:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80010f6:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80010f8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010fa:	005e      	lsls	r6, r3, #1
 80010fc:	2403      	movs	r4, #3
 80010fe:	40b4      	lsls	r4, r6
 8001100:	43e2      	mvns	r2, r4
 8001102:	ea27 0704 	bic.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001106:	688c      	ldr	r4, [r1, #8]
 8001108:	40b4      	lsls	r4, r6
 800110a:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 800110c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800110e:	684c      	ldr	r4, [r1, #4]
 8001110:	2c12      	cmp	r4, #18
 8001112:	bf18      	it	ne
 8001114:	2c02      	cmpne	r4, #2
 8001116:	d113      	bne.n	8001140 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3];
 8001118:	08df      	lsrs	r7, r3, #3
 800111a:	3708      	adds	r7, #8
 800111c:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001120:	f003 0407 	and.w	r4, r3, #7
 8001124:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8001128:	240f      	movs	r4, #15
 800112a:	fa04 f40c 	lsl.w	r4, r4, ip
 800112e:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001132:	690c      	ldr	r4, [r1, #16]
 8001134:	fa04 f40c 	lsl.w	r4, r4, ip
 8001138:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 800113c:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8001140:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001142:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001144:	684a      	ldr	r2, [r1, #4]
 8001146:	f002 0203 	and.w	r2, r2, #3
 800114a:	40b2      	lsls	r2, r6
 800114c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800114e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001150:	684a      	ldr	r2, [r1, #4]
 8001152:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001156:	d0a8      	beq.n	80010aa <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001158:	4a2b      	ldr	r2, [pc, #172]	; (8001208 <HAL_GPIO_Init+0x1d8>)
 800115a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800115c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001160:	6454      	str	r4, [r2, #68]	; 0x44
 8001162:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001164:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001168:	9201      	str	r2, [sp, #4]
 800116a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800116c:	089c      	lsrs	r4, r3, #2
 800116e:	1ca6      	adds	r6, r4, #2
 8001170:	4a23      	ldr	r2, [pc, #140]	; (8001200 <HAL_GPIO_Init+0x1d0>)
 8001172:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001176:	f003 0203 	and.w	r2, r3, #3
 800117a:	0096      	lsls	r6, r2, #2
 800117c:	220f      	movs	r2, #15
 800117e:	40b2      	lsls	r2, r6
 8001180:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001184:	4a21      	ldr	r2, [pc, #132]	; (800120c <HAL_GPIO_Init+0x1dc>)
 8001186:	4290      	cmp	r0, r2
 8001188:	f43f af5b 	beq.w	8001042 <HAL_GPIO_Init+0x12>
 800118c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001190:	4290      	cmp	r0, r2
 8001192:	d022      	beq.n	80011da <HAL_GPIO_Init+0x1aa>
 8001194:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001198:	4290      	cmp	r0, r2
 800119a:	d020      	beq.n	80011de <HAL_GPIO_Init+0x1ae>
 800119c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011a0:	4290      	cmp	r0, r2
 80011a2:	d01e      	beq.n	80011e2 <HAL_GPIO_Init+0x1b2>
 80011a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011a8:	4290      	cmp	r0, r2
 80011aa:	d01c      	beq.n	80011e6 <HAL_GPIO_Init+0x1b6>
 80011ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011b0:	4290      	cmp	r0, r2
 80011b2:	d01a      	beq.n	80011ea <HAL_GPIO_Init+0x1ba>
 80011b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011b8:	4290      	cmp	r0, r2
 80011ba:	d018      	beq.n	80011ee <HAL_GPIO_Init+0x1be>
 80011bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011c0:	4290      	cmp	r0, r2
 80011c2:	d016      	beq.n	80011f2 <HAL_GPIO_Init+0x1c2>
 80011c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011c8:	4290      	cmp	r0, r2
 80011ca:	d014      	beq.n	80011f6 <HAL_GPIO_Init+0x1c6>
 80011cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011d0:	4290      	cmp	r0, r2
 80011d2:	f43f af34 	beq.w	800103e <HAL_GPIO_Init+0xe>
 80011d6:	220a      	movs	r2, #10
 80011d8:	e734      	b.n	8001044 <HAL_GPIO_Init+0x14>
 80011da:	2201      	movs	r2, #1
 80011dc:	e732      	b.n	8001044 <HAL_GPIO_Init+0x14>
 80011de:	2202      	movs	r2, #2
 80011e0:	e730      	b.n	8001044 <HAL_GPIO_Init+0x14>
 80011e2:	2203      	movs	r2, #3
 80011e4:	e72e      	b.n	8001044 <HAL_GPIO_Init+0x14>
 80011e6:	2204      	movs	r2, #4
 80011e8:	e72c      	b.n	8001044 <HAL_GPIO_Init+0x14>
 80011ea:	2205      	movs	r2, #5
 80011ec:	e72a      	b.n	8001044 <HAL_GPIO_Init+0x14>
 80011ee:	2206      	movs	r2, #6
 80011f0:	e728      	b.n	8001044 <HAL_GPIO_Init+0x14>
 80011f2:	2207      	movs	r2, #7
 80011f4:	e726      	b.n	8001044 <HAL_GPIO_Init+0x14>
 80011f6:	2208      	movs	r2, #8
 80011f8:	e724      	b.n	8001044 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80011fa:	b003      	add	sp, #12
 80011fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011fe:	4770      	bx	lr
 8001200:	40013800 	.word	0x40013800
 8001204:	40013c00 	.word	0x40013c00
 8001208:	40023800 	.word	0x40023800
 800120c:	40020000 	.word	0x40020000

08001210 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001210:	b10a      	cbz	r2, 8001216 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001212:	6181      	str	r1, [r0, #24]
 8001214:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001216:	0409      	lsls	r1, r1, #16
 8001218:	6181      	str	r1, [r0, #24]
  }
}
 800121a:	4770      	bx	lr

0800121c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800121c:	2800      	cmp	r0, #0
 800121e:	f000 81ff 	beq.w	8001620 <HAL_RCC_OscConfig+0x404>
{
 8001222:	b570      	push	{r4, r5, r6, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001228:	6803      	ldr	r3, [r0, #0]
 800122a:	f013 0f01 	tst.w	r3, #1
 800122e:	d029      	beq.n	8001284 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001230:	4ba7      	ldr	r3, [pc, #668]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 030c 	and.w	r3, r3, #12
 8001238:	2b04      	cmp	r3, #4
 800123a:	d01a      	beq.n	8001272 <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800123c:	4ba4      	ldr	r3, [pc, #656]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 030c 	and.w	r3, r3, #12
 8001244:	2b08      	cmp	r3, #8
 8001246:	d00f      	beq.n	8001268 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001248:	6863      	ldr	r3, [r4, #4]
 800124a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124e:	d040      	beq.n	80012d2 <HAL_RCC_OscConfig+0xb6>
 8001250:	2b00      	cmp	r3, #0
 8001252:	d154      	bne.n	80012fe <HAL_RCC_OscConfig+0xe2>
 8001254:	4b9e      	ldr	r3, [pc, #632]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	e039      	b.n	80012dc <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001268:	4b99      	ldr	r3, [pc, #612]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001270:	d0ea      	beq.n	8001248 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001272:	4b97      	ldr	r3, [pc, #604]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800127a:	d003      	beq.n	8001284 <HAL_RCC_OscConfig+0x68>
 800127c:	6863      	ldr	r3, [r4, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 81d0 	beq.w	8001624 <HAL_RCC_OscConfig+0x408>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	f013 0f02 	tst.w	r3, #2
 800128a:	d074      	beq.n	8001376 <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800128c:	4b90      	ldr	r3, [pc, #576]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f013 0f0c 	tst.w	r3, #12
 8001294:	d05e      	beq.n	8001354 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001296:	4b8e      	ldr	r3, [pc, #568]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 030c 	and.w	r3, r3, #12
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d053      	beq.n	800134a <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012a2:	68e3      	ldr	r3, [r4, #12]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 8089 	beq.w	80013bc <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012aa:	4a89      	ldr	r2, [pc, #548]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 80012ac:	6813      	ldr	r3, [r2, #0]
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b4:	f7ff fe0c 	bl	8000ed0 <HAL_GetTick>
 80012b8:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ba:	4b85      	ldr	r3, [pc, #532]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f013 0f02 	tst.w	r3, #2
 80012c2:	d172      	bne.n	80013aa <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c4:	f7ff fe04 	bl	8000ed0 <HAL_GetTick>
 80012c8:	1b40      	subs	r0, r0, r5
 80012ca:	2802      	cmp	r0, #2
 80012cc:	d9f5      	bls.n	80012ba <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 80012ce:	2003      	movs	r0, #3
 80012d0:	e1ad      	b.n	800162e <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d2:	4a7f      	ldr	r2, [pc, #508]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 80012d4:	6813      	ldr	r3, [r2, #0]
 80012d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012da:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012dc:	6863      	ldr	r3, [r4, #4]
 80012de:	b32b      	cbz	r3, 800132c <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80012e0:	f7ff fdf6 	bl	8000ed0 <HAL_GetTick>
 80012e4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	4b7a      	ldr	r3, [pc, #488]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80012ee:	d1c9      	bne.n	8001284 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fdee 	bl	8000ed0 <HAL_GetTick>
 80012f4:	1b40      	subs	r0, r0, r5
 80012f6:	2864      	cmp	r0, #100	; 0x64
 80012f8:	d9f5      	bls.n	80012e6 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80012fa:	2003      	movs	r0, #3
 80012fc:	e197      	b.n	800162e <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001302:	d009      	beq.n	8001318 <HAL_RCC_OscConfig+0xfc>
 8001304:	4b72      	ldr	r3, [pc, #456]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e7e1      	b.n	80012dc <HAL_RCC_OscConfig+0xc0>
 8001318:	4b6d      	ldr	r3, [pc, #436]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	e7d7      	b.n	80012dc <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 800132c:	f7ff fdd0 	bl	8000ed0 <HAL_GetTick>
 8001330:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	4b67      	ldr	r3, [pc, #412]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800133a:	d0a3      	beq.n	8001284 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800133c:	f7ff fdc8 	bl	8000ed0 <HAL_GetTick>
 8001340:	1b40      	subs	r0, r0, r5
 8001342:	2864      	cmp	r0, #100	; 0x64
 8001344:	d9f5      	bls.n	8001332 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8001346:	2003      	movs	r0, #3
 8001348:	e171      	b.n	800162e <HAL_RCC_OscConfig+0x412>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800134a:	4b61      	ldr	r3, [pc, #388]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001352:	d1a6      	bne.n	80012a2 <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001354:	4b5e      	ldr	r3, [pc, #376]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f013 0f02 	tst.w	r3, #2
 800135c:	d003      	beq.n	8001366 <HAL_RCC_OscConfig+0x14a>
 800135e:	68e3      	ldr	r3, [r4, #12]
 8001360:	2b01      	cmp	r3, #1
 8001362:	f040 8161 	bne.w	8001628 <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001366:	4a5a      	ldr	r2, [pc, #360]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 8001368:	6813      	ldr	r3, [r2, #0]
 800136a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800136e:	6921      	ldr	r1, [r4, #16]
 8001370:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001374:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001376:	6823      	ldr	r3, [r4, #0]
 8001378:	f013 0f08 	tst.w	r3, #8
 800137c:	d046      	beq.n	800140c <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800137e:	6963      	ldr	r3, [r4, #20]
 8001380:	b383      	cbz	r3, 80013e4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001382:	4a53      	ldr	r2, [pc, #332]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 8001384:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138c:	f7ff fda0 	bl	8000ed0 <HAL_GetTick>
 8001390:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001392:	4b4f      	ldr	r3, [pc, #316]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 8001394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001396:	f013 0f02 	tst.w	r3, #2
 800139a:	d137      	bne.n	800140c <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800139c:	f7ff fd98 	bl	8000ed0 <HAL_GetTick>
 80013a0:	1b40      	subs	r0, r0, r5
 80013a2:	2802      	cmp	r0, #2
 80013a4:	d9f5      	bls.n	8001392 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 80013a6:	2003      	movs	r0, #3
 80013a8:	e141      	b.n	800162e <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013aa:	4a49      	ldr	r2, [pc, #292]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 80013ac:	6813      	ldr	r3, [r2, #0]
 80013ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013b2:	6921      	ldr	r1, [r4, #16]
 80013b4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	e7dc      	b.n	8001376 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 80013bc:	4a44      	ldr	r2, [pc, #272]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 80013be:	6813      	ldr	r3, [r2, #0]
 80013c0:	f023 0301 	bic.w	r3, r3, #1
 80013c4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80013c6:	f7ff fd83 	bl	8000ed0 <HAL_GetTick>
 80013ca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013cc:	4b40      	ldr	r3, [pc, #256]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f013 0f02 	tst.w	r3, #2
 80013d4:	d0cf      	beq.n	8001376 <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d6:	f7ff fd7b 	bl	8000ed0 <HAL_GetTick>
 80013da:	1b40      	subs	r0, r0, r5
 80013dc:	2802      	cmp	r0, #2
 80013de:	d9f5      	bls.n	80013cc <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 80013e0:	2003      	movs	r0, #3
 80013e2:	e124      	b.n	800162e <HAL_RCC_OscConfig+0x412>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013e4:	4a3a      	ldr	r2, [pc, #232]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 80013e6:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80013e8:	f023 0301 	bic.w	r3, r3, #1
 80013ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ee:	f7ff fd6f 	bl	8000ed0 <HAL_GetTick>
 80013f2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f4:	4b36      	ldr	r3, [pc, #216]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 80013f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013f8:	f013 0f02 	tst.w	r3, #2
 80013fc:	d006      	beq.n	800140c <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013fe:	f7ff fd67 	bl	8000ed0 <HAL_GetTick>
 8001402:	1b40      	subs	r0, r0, r5
 8001404:	2802      	cmp	r0, #2
 8001406:	d9f5      	bls.n	80013f4 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8001408:	2003      	movs	r0, #3
 800140a:	e110      	b.n	800162e <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800140c:	6823      	ldr	r3, [r4, #0]
 800140e:	f013 0f04 	tst.w	r3, #4
 8001412:	d07d      	beq.n	8001510 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001414:	4b2e      	ldr	r3, [pc, #184]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800141c:	d10b      	bne.n	8001436 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	4b2c      	ldr	r3, [pc, #176]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 8001420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001422:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001426:	641a      	str	r2, [r3, #64]	; 0x40
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001432:	2501      	movs	r5, #1
 8001434:	e000      	b.n	8001438 <HAL_RCC_OscConfig+0x21c>
  FlagStatus pwrclkchanged = RESET;
 8001436:	2500      	movs	r5, #0
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001438:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <HAL_RCC_OscConfig+0x2b8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001440:	d00e      	beq.n	8001460 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001442:	68a3      	ldr	r3, [r4, #8]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d01f      	beq.n	8001488 <HAL_RCC_OscConfig+0x26c>
 8001448:	2b00      	cmp	r3, #0
 800144a:	d135      	bne.n	80014b8 <HAL_RCC_OscConfig+0x29c>
 800144c:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 800144e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001450:	f022 0201 	bic.w	r2, r2, #1
 8001454:	671a      	str	r2, [r3, #112]	; 0x70
 8001456:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001458:	f022 0204 	bic.w	r2, r2, #4
 800145c:	671a      	str	r2, [r3, #112]	; 0x70
 800145e:	e018      	b.n	8001492 <HAL_RCC_OscConfig+0x276>
      PWR->CR1 |= PWR_CR1_DBP;
 8001460:	4a1c      	ldr	r2, [pc, #112]	; (80014d4 <HAL_RCC_OscConfig+0x2b8>)
 8001462:	6813      	ldr	r3, [r2, #0]
 8001464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001468:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800146a:	f7ff fd31 	bl	8000ed0 <HAL_GetTick>
 800146e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_RCC_OscConfig+0x2b8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001478:	d1e3      	bne.n	8001442 <HAL_RCC_OscConfig+0x226>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800147a:	f7ff fd29 	bl	8000ed0 <HAL_GetTick>
 800147e:	1b80      	subs	r0, r0, r6
 8001480:	2864      	cmp	r0, #100	; 0x64
 8001482:	d9f5      	bls.n	8001470 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8001484:	2003      	movs	r0, #3
 8001486:	e0d2      	b.n	800162e <HAL_RCC_OscConfig+0x412>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001488:	4a11      	ldr	r2, [pc, #68]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 800148a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001492:	68a3      	ldr	r3, [r4, #8]
 8001494:	b353      	cbz	r3, 80014ec <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001496:	f7ff fd1b 	bl	8000ed0 <HAL_GetTick>
 800149a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 800149e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a0:	f013 0f02 	tst.w	r3, #2
 80014a4:	d133      	bne.n	800150e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a6:	f7ff fd13 	bl	8000ed0 <HAL_GetTick>
 80014aa:	1b80      	subs	r0, r0, r6
 80014ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80014b0:	4298      	cmp	r0, r3
 80014b2:	d9f3      	bls.n	800149c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80014b4:	2003      	movs	r0, #3
 80014b6:	e0ba      	b.n	800162e <HAL_RCC_OscConfig+0x412>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b8:	2b05      	cmp	r3, #5
 80014ba:	d00d      	beq.n	80014d8 <HAL_RCC_OscConfig+0x2bc>
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <HAL_RCC_OscConfig+0x2b4>)
 80014be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014c0:	f022 0201 	bic.w	r2, r2, #1
 80014c4:	671a      	str	r2, [r3, #112]	; 0x70
 80014c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014c8:	f022 0204 	bic.w	r2, r2, #4
 80014cc:	671a      	str	r2, [r3, #112]	; 0x70
 80014ce:	e7e0      	b.n	8001492 <HAL_RCC_OscConfig+0x276>
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40007000 	.word	0x40007000
 80014d8:	4b5c      	ldr	r3, [pc, #368]	; (800164c <HAL_RCC_OscConfig+0x430>)
 80014da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014dc:	f042 0204 	orr.w	r2, r2, #4
 80014e0:	671a      	str	r2, [r3, #112]	; 0x70
 80014e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014e4:	f042 0201 	orr.w	r2, r2, #1
 80014e8:	671a      	str	r2, [r3, #112]	; 0x70
 80014ea:	e7d2      	b.n	8001492 <HAL_RCC_OscConfig+0x276>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ec:	f7ff fcf0 	bl	8000ed0 <HAL_GetTick>
 80014f0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f2:	4b56      	ldr	r3, [pc, #344]	; (800164c <HAL_RCC_OscConfig+0x430>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f6:	f013 0f02 	tst.w	r3, #2
 80014fa:	d008      	beq.n	800150e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014fc:	f7ff fce8 	bl	8000ed0 <HAL_GetTick>
 8001500:	1b80      	subs	r0, r0, r6
 8001502:	f241 3388 	movw	r3, #5000	; 0x1388
 8001506:	4298      	cmp	r0, r3
 8001508:	d9f3      	bls.n	80014f2 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 800150a:	2003      	movs	r0, #3
 800150c:	e08f      	b.n	800162e <HAL_RCC_OscConfig+0x412>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800150e:	b9fd      	cbnz	r5, 8001550 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001510:	69a3      	ldr	r3, [r4, #24]
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 808a 	beq.w	800162c <HAL_RCC_OscConfig+0x410>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001518:	4a4c      	ldr	r2, [pc, #304]	; (800164c <HAL_RCC_OscConfig+0x430>)
 800151a:	6892      	ldr	r2, [r2, #8]
 800151c:	f002 020c 	and.w	r2, r2, #12
 8001520:	2a08      	cmp	r2, #8
 8001522:	d058      	beq.n	80015d6 <HAL_RCC_OscConfig+0x3ba>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001524:	2b02      	cmp	r3, #2
 8001526:	d019      	beq.n	800155c <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001528:	4a48      	ldr	r2, [pc, #288]	; (800164c <HAL_RCC_OscConfig+0x430>)
 800152a:	6813      	ldr	r3, [r2, #0]
 800152c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001530:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001532:	f7ff fccd 	bl	8000ed0 <HAL_GetTick>
 8001536:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001538:	4b44      	ldr	r3, [pc, #272]	; (800164c <HAL_RCC_OscConfig+0x430>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001540:	d047      	beq.n	80015d2 <HAL_RCC_OscConfig+0x3b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001542:	f7ff fcc5 	bl	8000ed0 <HAL_GetTick>
 8001546:	1b00      	subs	r0, r0, r4
 8001548:	2802      	cmp	r0, #2
 800154a:	d9f5      	bls.n	8001538 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800154c:	2003      	movs	r0, #3
 800154e:	e06e      	b.n	800162e <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001550:	4a3e      	ldr	r2, [pc, #248]	; (800164c <HAL_RCC_OscConfig+0x430>)
 8001552:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	e7d9      	b.n	8001510 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 800155c:	4a3b      	ldr	r2, [pc, #236]	; (800164c <HAL_RCC_OscConfig+0x430>)
 800155e:	6813      	ldr	r3, [r2, #0]
 8001560:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001564:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001566:	f7ff fcb3 	bl	8000ed0 <HAL_GetTick>
 800156a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156c:	4b37      	ldr	r3, [pc, #220]	; (800164c <HAL_RCC_OscConfig+0x430>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001574:	d006      	beq.n	8001584 <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001576:	f7ff fcab 	bl	8000ed0 <HAL_GetTick>
 800157a:	1b40      	subs	r0, r0, r5
 800157c:	2802      	cmp	r0, #2
 800157e:	d9f5      	bls.n	800156c <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8001580:	2003      	movs	r0, #3
 8001582:	e054      	b.n	800162e <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001584:	69e3      	ldr	r3, [r4, #28]
 8001586:	6a22      	ldr	r2, [r4, #32]
 8001588:	4313      	orrs	r3, r2
 800158a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800158c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001590:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001592:	0852      	lsrs	r2, r2, #1
 8001594:	3a01      	subs	r2, #1
 8001596:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800159a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800159c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80015a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015a4:	4a29      	ldr	r2, [pc, #164]	; (800164c <HAL_RCC_OscConfig+0x430>)
 80015a6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80015a8:	6813      	ldr	r3, [r2, #0]
 80015aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ae:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80015b0:	f7ff fc8e 	bl	8000ed0 <HAL_GetTick>
 80015b4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b6:	4b25      	ldr	r3, [pc, #148]	; (800164c <HAL_RCC_OscConfig+0x430>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80015be:	d106      	bne.n	80015ce <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c0:	f7ff fc86 	bl	8000ed0 <HAL_GetTick>
 80015c4:	1b00      	subs	r0, r0, r4
 80015c6:	2802      	cmp	r0, #2
 80015c8:	d9f5      	bls.n	80015b6 <HAL_RCC_OscConfig+0x39a>
            return HAL_TIMEOUT;
 80015ca:	2003      	movs	r0, #3
 80015cc:	e02f      	b.n	800162e <HAL_RCC_OscConfig+0x412>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80015ce:	2000      	movs	r0, #0
 80015d0:	e02d      	b.n	800162e <HAL_RCC_OscConfig+0x412>
 80015d2:	2000      	movs	r0, #0
 80015d4:	e02b      	b.n	800162e <HAL_RCC_OscConfig+0x412>
      pll_config = RCC->PLLCFGR;
 80015d6:	4a1d      	ldr	r2, [pc, #116]	; (800164c <HAL_RCC_OscConfig+0x430>)
 80015d8:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d029      	beq.n	8001632 <HAL_RCC_OscConfig+0x416>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015de:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80015e2:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015e4:	428b      	cmp	r3, r1
 80015e6:	d126      	bne.n	8001636 <HAL_RCC_OscConfig+0x41a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015e8:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 80015ec:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ee:	428b      	cmp	r3, r1
 80015f0:	d123      	bne.n	800163a <HAL_RCC_OscConfig+0x41e>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015f8:	4013      	ands	r3, r2
 80015fa:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80015fe:	d11e      	bne.n	800163e <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001600:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8001604:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001606:	085b      	lsrs	r3, r3, #1
 8001608:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800160a:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800160e:	d118      	bne.n	8001642 <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001610:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001614:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001616:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 800161a:	d114      	bne.n	8001646 <HAL_RCC_OscConfig+0x42a>
  return HAL_OK;
 800161c:	2000      	movs	r0, #0
 800161e:	e006      	b.n	800162e <HAL_RCC_OscConfig+0x412>
    return HAL_ERROR;
 8001620:	2001      	movs	r0, #1
}
 8001622:	4770      	bx	lr
        return HAL_ERROR;
 8001624:	2001      	movs	r0, #1
 8001626:	e002      	b.n	800162e <HAL_RCC_OscConfig+0x412>
        return HAL_ERROR;
 8001628:	2001      	movs	r0, #1
 800162a:	e000      	b.n	800162e <HAL_RCC_OscConfig+0x412>
  return HAL_OK;
 800162c:	2000      	movs	r0, #0
}
 800162e:	b002      	add	sp, #8
 8001630:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001632:	2001      	movs	r0, #1
 8001634:	e7fb      	b.n	800162e <HAL_RCC_OscConfig+0x412>
 8001636:	2001      	movs	r0, #1
 8001638:	e7f9      	b.n	800162e <HAL_RCC_OscConfig+0x412>
 800163a:	2001      	movs	r0, #1
 800163c:	e7f7      	b.n	800162e <HAL_RCC_OscConfig+0x412>
 800163e:	2001      	movs	r0, #1
 8001640:	e7f5      	b.n	800162e <HAL_RCC_OscConfig+0x412>
 8001642:	2001      	movs	r0, #1
 8001644:	e7f3      	b.n	800162e <HAL_RCC_OscConfig+0x412>
 8001646:	2001      	movs	r0, #1
 8001648:	e7f1      	b.n	800162e <HAL_RCC_OscConfig+0x412>
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800

08001650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001652:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b04      	cmp	r3, #4
 800165c:	d03d      	beq.n	80016da <HAL_RCC_GetSysClockFreq+0x8a>
 800165e:	2b08      	cmp	r3, #8
 8001660:	d13d      	bne.n	80016de <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001662:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001670:	d012      	beq.n	8001698 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001672:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001674:	6859      	ldr	r1, [r3, #4]
 8001676:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800167a:	2300      	movs	r3, #0
 800167c:	481a      	ldr	r0, [pc, #104]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x98>)
 800167e:	fba1 0100 	umull	r0, r1, r1, r0
 8001682:	f7fe fe1d 	bl	80002c0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800168e:	3301      	adds	r3, #1
 8001690:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001692:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001696:	e023      	b.n	80016e0 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80016a0:	015c      	lsls	r4, r3, #5
 80016a2:	2500      	movs	r5, #0
 80016a4:	1ae4      	subs	r4, r4, r3
 80016a6:	f165 0500 	sbc.w	r5, r5, #0
 80016aa:	01ae      	lsls	r6, r5, #6
 80016ac:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 80016b0:	01a7      	lsls	r7, r4, #6
 80016b2:	1b38      	subs	r0, r7, r4
 80016b4:	eb66 0105 	sbc.w	r1, r6, r5
 80016b8:	00cc      	lsls	r4, r1, #3
 80016ba:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 80016be:	00c5      	lsls	r5, r0, #3
 80016c0:	18e8      	adds	r0, r5, r3
 80016c2:	f144 0100 	adc.w	r1, r4, #0
 80016c6:	028b      	lsls	r3, r1, #10
 80016c8:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80016cc:	0284      	lsls	r4, r0, #10
 80016ce:	4620      	mov	r0, r4
 80016d0:	4619      	mov	r1, r3
 80016d2:	2300      	movs	r3, #0
 80016d4:	f7fe fdf4 	bl	80002c0 <__aeabi_uldivmod>
 80016d8:	e7d5      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80016da:	4803      	ldr	r0, [pc, #12]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80016dc:	e000      	b.n	80016e0 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016de:	4803      	ldr	r0, [pc, #12]	; (80016ec <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80016e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	017d7840 	.word	0x017d7840
 80016ec:	00f42400 	.word	0x00f42400

080016f0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80016f0:	2800      	cmp	r0, #0
 80016f2:	f000 80a0 	beq.w	8001836 <HAL_RCC_ClockConfig+0x146>
{
 80016f6:	b570      	push	{r4, r5, r6, lr}
 80016f8:	460d      	mov	r5, r1
 80016fa:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016fc:	4b52      	ldr	r3, [pc, #328]	; (8001848 <HAL_RCC_ClockConfig+0x158>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 030f 	and.w	r3, r3, #15
 8001704:	428b      	cmp	r3, r1
 8001706:	d20b      	bcs.n	8001720 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001708:	4a4f      	ldr	r2, [pc, #316]	; (8001848 <HAL_RCC_ClockConfig+0x158>)
 800170a:	6813      	ldr	r3, [r2, #0]
 800170c:	f023 030f 	bic.w	r3, r3, #15
 8001710:	430b      	orrs	r3, r1
 8001712:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001714:	6813      	ldr	r3, [r2, #0]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	428b      	cmp	r3, r1
 800171c:	f040 808d 	bne.w	800183a <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	f013 0f02 	tst.w	r3, #2
 8001726:	d017      	beq.n	8001758 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001728:	f013 0f04 	tst.w	r3, #4
 800172c:	d004      	beq.n	8001738 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800172e:	4a47      	ldr	r2, [pc, #284]	; (800184c <HAL_RCC_ClockConfig+0x15c>)
 8001730:	6893      	ldr	r3, [r2, #8]
 8001732:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001736:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001738:	6823      	ldr	r3, [r4, #0]
 800173a:	f013 0f08 	tst.w	r3, #8
 800173e:	d004      	beq.n	800174a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001740:	4a42      	ldr	r2, [pc, #264]	; (800184c <HAL_RCC_ClockConfig+0x15c>)
 8001742:	6893      	ldr	r3, [r2, #8]
 8001744:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001748:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800174a:	4a40      	ldr	r2, [pc, #256]	; (800184c <HAL_RCC_ClockConfig+0x15c>)
 800174c:	6893      	ldr	r3, [r2, #8]
 800174e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001752:	68a1      	ldr	r1, [r4, #8]
 8001754:	430b      	orrs	r3, r1
 8001756:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001758:	6823      	ldr	r3, [r4, #0]
 800175a:	f013 0f01 	tst.w	r3, #1
 800175e:	d031      	beq.n	80017c4 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001760:	6863      	ldr	r3, [r4, #4]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d020      	beq.n	80017a8 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001766:	2b02      	cmp	r3, #2
 8001768:	d025      	beq.n	80017b6 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176a:	4a38      	ldr	r2, [pc, #224]	; (800184c <HAL_RCC_ClockConfig+0x15c>)
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	f012 0f02 	tst.w	r2, #2
 8001772:	d064      	beq.n	800183e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001774:	4935      	ldr	r1, [pc, #212]	; (800184c <HAL_RCC_ClockConfig+0x15c>)
 8001776:	688a      	ldr	r2, [r1, #8]
 8001778:	f022 0203 	bic.w	r2, r2, #3
 800177c:	4313      	orrs	r3, r2
 800177e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001780:	f7ff fba6 	bl	8000ed0 <HAL_GetTick>
 8001784:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001786:	4b31      	ldr	r3, [pc, #196]	; (800184c <HAL_RCC_ClockConfig+0x15c>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	6862      	ldr	r2, [r4, #4]
 8001790:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001794:	d016      	beq.n	80017c4 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001796:	f7ff fb9b 	bl	8000ed0 <HAL_GetTick>
 800179a:	1b80      	subs	r0, r0, r6
 800179c:	f241 3388 	movw	r3, #5000	; 0x1388
 80017a0:	4298      	cmp	r0, r3
 80017a2:	d9f0      	bls.n	8001786 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80017a4:	2003      	movs	r0, #3
 80017a6:	e045      	b.n	8001834 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a8:	4a28      	ldr	r2, [pc, #160]	; (800184c <HAL_RCC_ClockConfig+0x15c>)
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80017b0:	d1e0      	bne.n	8001774 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80017b2:	2001      	movs	r0, #1
 80017b4:	e03e      	b.n	8001834 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b6:	4a25      	ldr	r2, [pc, #148]	; (800184c <HAL_RCC_ClockConfig+0x15c>)
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80017be:	d1d9      	bne.n	8001774 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80017c0:	2001      	movs	r0, #1
 80017c2:	e037      	b.n	8001834 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017c4:	4b20      	ldr	r3, [pc, #128]	; (8001848 <HAL_RCC_ClockConfig+0x158>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 030f 	and.w	r3, r3, #15
 80017cc:	42ab      	cmp	r3, r5
 80017ce:	d90a      	bls.n	80017e6 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d0:	4a1d      	ldr	r2, [pc, #116]	; (8001848 <HAL_RCC_ClockConfig+0x158>)
 80017d2:	6813      	ldr	r3, [r2, #0]
 80017d4:	f023 030f 	bic.w	r3, r3, #15
 80017d8:	432b      	orrs	r3, r5
 80017da:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017dc:	6813      	ldr	r3, [r2, #0]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	42ab      	cmp	r3, r5
 80017e4:	d12d      	bne.n	8001842 <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e6:	6823      	ldr	r3, [r4, #0]
 80017e8:	f013 0f04 	tst.w	r3, #4
 80017ec:	d006      	beq.n	80017fc <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ee:	4a17      	ldr	r2, [pc, #92]	; (800184c <HAL_RCC_ClockConfig+0x15c>)
 80017f0:	6893      	ldr	r3, [r2, #8]
 80017f2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80017f6:	68e1      	ldr	r1, [r4, #12]
 80017f8:	430b      	orrs	r3, r1
 80017fa:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fc:	6823      	ldr	r3, [r4, #0]
 80017fe:	f013 0f08 	tst.w	r3, #8
 8001802:	d007      	beq.n	8001814 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001804:	4a11      	ldr	r2, [pc, #68]	; (800184c <HAL_RCC_ClockConfig+0x15c>)
 8001806:	6893      	ldr	r3, [r2, #8]
 8001808:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800180c:	6921      	ldr	r1, [r4, #16]
 800180e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001812:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001814:	f7ff ff1c 	bl	8001650 <HAL_RCC_GetSysClockFreq>
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <HAL_RCC_ClockConfig+0x15c>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001820:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <HAL_RCC_ClockConfig+0x160>)
 8001822:	5cd3      	ldrb	r3, [r2, r3]
 8001824:	40d8      	lsrs	r0, r3
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_RCC_ClockConfig+0x164>)
 8001828:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_RCC_ClockConfig+0x168>)
 800182c:	6818      	ldr	r0, [r3, #0]
 800182e:	f7ff fb13 	bl	8000e58 <HAL_InitTick>
  return HAL_OK;
 8001832:	2000      	movs	r0, #0
}
 8001834:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001836:	2001      	movs	r0, #1
}
 8001838:	4770      	bx	lr
      return HAL_ERROR;
 800183a:	2001      	movs	r0, #1
 800183c:	e7fa      	b.n	8001834 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800183e:	2001      	movs	r0, #1
 8001840:	e7f8      	b.n	8001834 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 8001842:	2001      	movs	r0, #1
 8001844:	e7f6      	b.n	8001834 <HAL_RCC_ClockConfig+0x144>
 8001846:	bf00      	nop
 8001848:	40023c00 	.word	0x40023c00
 800184c:	40023800 	.word	0x40023800
 8001850:	08004ee0 	.word	0x08004ee0
 8001854:	20000000 	.word	0x20000000
 8001858:	20000008 	.word	0x20000008

0800185c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800185c:	4b01      	ldr	r3, [pc, #4]	; (8001864 <HAL_RCC_GetHCLKFreq+0x8>)
 800185e:	6818      	ldr	r0, [r3, #0]
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000000 	.word	0x20000000

08001868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001868:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800186a:	f7ff fff7 	bl	800185c <HAL_RCC_GetHCLKFreq>
 800186e:	4b04      	ldr	r3, [pc, #16]	; (8001880 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001876:	4a03      	ldr	r2, [pc, #12]	; (8001884 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001878:	5cd3      	ldrb	r3, [r2, r3]
}
 800187a:	40d8      	lsrs	r0, r3
 800187c:	bd08      	pop	{r3, pc}
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800
 8001884:	08004ef0 	.word	0x08004ef0

08001888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001888:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800188a:	f7ff ffe7 	bl	800185c <HAL_RCC_GetHCLKFreq>
 800188e:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001896:	4a03      	ldr	r2, [pc, #12]	; (80018a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001898:	5cd3      	ldrb	r3, [r2, r3]
}
 800189a:	40d8      	lsrs	r0, r3
 800189c:	bd08      	pop	{r3, pc}
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800
 80018a4:	08004ef0 	.word	0x08004ef0

080018a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018aa:	b083      	sub	sp, #12
 80018ac:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80018ae:	6806      	ldr	r6, [r0, #0]
 80018b0:	f016 0601 	ands.w	r6, r6, #1
 80018b4:	d00d      	beq.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80018b6:	4baf      	ldr	r3, [pc, #700]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80018c4:	430a      	orrs	r2, r1
 80018c6:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80018c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 812b 	beq.w	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  uint32_t plli2sused = 0;
 80018d0:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80018d2:	6825      	ldr	r5, [r4, #0]
 80018d4:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 80018d8:	d011      	beq.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80018da:	4aa6      	ldr	r2, [pc, #664]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80018dc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80018e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80018e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80018e6:	430b      	orrs	r3, r1
 80018e8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80018ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018f2:	f000 811a 	beq.w	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x282>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 8119 	beq.w	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x286>
  uint32_t pllsaiused = 0;
 80018fc:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80018fe:	6823      	ldr	r3, [r4, #0]
 8001900:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001904:	d00f      	beq.n	8001926 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001906:	4a9b      	ldr	r2, [pc, #620]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001908:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800190c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001910:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001912:	430b      	orrs	r3, r1
 8001914:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001918:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800191a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800191e:	f000 8108 	beq.w	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001922:	b903      	cbnz	r3, 8001926 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 8001924:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001926:	6823      	ldr	r3, [r4, #0]
 8001928:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800192c:	d000      	beq.n	8001930 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 800192e:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001930:	f013 0f20 	tst.w	r3, #32
 8001934:	f040 80ff 	bne.w	8001b36 <HAL_RCCEx_PeriphCLKConfig+0x28e>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001938:	6823      	ldr	r3, [r4, #0]
 800193a:	f013 0f10 	tst.w	r3, #16
 800193e:	d00c      	beq.n	800195a <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001940:	4b8c      	ldr	r3, [pc, #560]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001942:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001946:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800194a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800194e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001952:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001954:	430a      	orrs	r2, r1
 8001956:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001960:	d008      	beq.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001962:	4a84      	ldr	r2, [pc, #528]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001964:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001968:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800196c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800196e:	430b      	orrs	r3, r1
 8001970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001974:	6823      	ldr	r3, [r4, #0]
 8001976:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800197a:	d008      	beq.n	800198e <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800197c:	4a7d      	ldr	r2, [pc, #500]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800197e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001982:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001986:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001988:	430b      	orrs	r3, r1
 800198a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001994:	d008      	beq.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001996:	4a77      	ldr	r2, [pc, #476]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001998:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800199c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80019a0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80019a2:	430b      	orrs	r3, r1
 80019a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80019a8:	6823      	ldr	r3, [r4, #0]
 80019aa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80019ae:	d008      	beq.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80019b0:	4a70      	ldr	r2, [pc, #448]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80019b2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019b6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80019ba:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80019bc:	430b      	orrs	r3, r1
 80019be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019c2:	6823      	ldr	r3, [r4, #0]
 80019c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80019c8:	d008      	beq.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019ca:	4a6a      	ldr	r2, [pc, #424]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80019cc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019d0:	f023 0303 	bic.w	r3, r3, #3
 80019d4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80019d6:	430b      	orrs	r3, r1
 80019d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019dc:	6823      	ldr	r3, [r4, #0]
 80019de:	f013 0f80 	tst.w	r3, #128	; 0x80
 80019e2:	d008      	beq.n	80019f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019e4:	4a63      	ldr	r2, [pc, #396]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80019e6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019ea:	f023 030c 	bic.w	r3, r3, #12
 80019ee:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80019f0:	430b      	orrs	r3, r1
 80019f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80019fc:	d008      	beq.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80019fe:	4a5d      	ldr	r2, [pc, #372]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001a00:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a04:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a08:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001a0a:	430b      	orrs	r3, r1
 8001a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001a10:	6823      	ldr	r3, [r4, #0]
 8001a12:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001a16:	d008      	beq.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001a18:	4a56      	ldr	r2, [pc, #344]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001a1a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a1e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001a22:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001a24:	430b      	orrs	r3, r1
 8001a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001a2a:	6823      	ldr	r3, [r4, #0]
 8001a2c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001a30:	d008      	beq.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001a32:	4a50      	ldr	r2, [pc, #320]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001a34:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a3c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001a3e:	430b      	orrs	r3, r1
 8001a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001a44:	6823      	ldr	r3, [r4, #0]
 8001a46:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001a4a:	d008      	beq.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001a4c:	4a49      	ldr	r2, [pc, #292]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001a4e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a52:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001a56:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001a58:	430b      	orrs	r3, r1
 8001a5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001a64:	d008      	beq.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001a66:	4a43      	ldr	r2, [pc, #268]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001a68:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a70:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001a72:	430b      	orrs	r3, r1
 8001a74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001a78:	6823      	ldr	r3, [r4, #0]
 8001a7a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001a7e:	d008      	beq.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001a80:	4a3c      	ldr	r2, [pc, #240]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001a82:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a86:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a8a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a92:	6823      	ldr	r3, [r4, #0]
 8001a94:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001a98:	d008      	beq.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a9a:	4a36      	ldr	r2, [pc, #216]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001a9c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001aa0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001aa4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8001aa6:	430b      	orrs	r3, r1
 8001aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001ab2:	d00d      	beq.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001ab4:	4a2f      	ldr	r2, [pc, #188]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001ab6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001aba:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001abe:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001ac0:	430b      	orrs	r3, r1
 8001ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001ac6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001ac8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001acc:	f000 809e 	beq.w	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x364>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001ad0:	6823      	ldr	r3, [r4, #0]
 8001ad2:	f013 0f08 	tst.w	r3, #8
 8001ad6:	d000      	beq.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 8001ad8:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001ada:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001ade:	d008      	beq.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ae0:	4a24      	ldr	r2, [pc, #144]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001ae2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001ae6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001aea:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001aec:	430b      	orrs	r3, r1
 8001aee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001af2:	6823      	ldr	r3, [r4, #0]
 8001af4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8001af8:	d009      	beq.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001afa:	4a1e      	ldr	r2, [pc, #120]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001afc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b04:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001b0e:	2e00      	cmp	r6, #0
 8001b10:	d17e      	bne.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8001b12:	6823      	ldr	r3, [r4, #0]
 8001b14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b18:	d07a      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x368>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001b1a:	2d01      	cmp	r5, #1
 8001b1c:	f000 810b 	beq.w	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x48e>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001b20:	2000      	movs	r0, #0
}
 8001b22:	b003      	add	sp, #12
 8001b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
      plli2sused = 1;
 8001b26:	2601      	movs	r6, #1
 8001b28:	e6d3      	b.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8001b2a:	2601      	movs	r6, #1
 8001b2c:	e6e3      	b.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 8001b2e:	2501      	movs	r5, #1
 8001b30:	e6e5      	b.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 8001b32:	2601      	movs	r6, #1
 8001b34:	e6f5      	b.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b3e:	641a      	str	r2, [r3, #64]	; 0x40
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001b4a:	4a0b      	ldr	r2, [pc, #44]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001b4c:	6813      	ldr	r3, [r2, #0]
 8001b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b52:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001b54:	f7ff f9bc 	bl	8000ed0 <HAL_GetTick>
 8001b58:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b62:	d10b      	bne.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b64:	f7ff f9b4 	bl	8000ed0 <HAL_GetTick>
 8001b68:	1bc0      	subs	r0, r0, r7
 8001b6a:	2864      	cmp	r0, #100	; 0x64
 8001b6c:	d9f5      	bls.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        return HAL_TIMEOUT;
 8001b6e:	2003      	movs	r0, #3
 8001b70:	e7d7      	b.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b7c:	4bb3      	ldr	r3, [pc, #716]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b80:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001b84:	d015      	beq.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8001b86:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001b88:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d010      	beq.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x30a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b90:	4bae      	ldr	r3, [pc, #696]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001b92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b94:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b98:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001b9a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001b9e:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ba0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001ba2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001ba6:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001ba8:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bac:	f013 0f01 	tst.w	r3, #1
 8001bb0:	d112      	bne.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bb2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bb4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001bb8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001bbc:	d01d      	beq.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x352>
 8001bbe:	4aa3      	ldr	r2, [pc, #652]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001bc0:	6893      	ldr	r3, [r2, #8]
 8001bc2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001bc6:	6093      	str	r3, [r2, #8]
 8001bc8:	49a0      	ldr	r1, [pc, #640]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001bca:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001bcc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001bce:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	670b      	str	r3, [r1, #112]	; 0x70
 8001bd6:	e6af      	b.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8001bd8:	f7ff f97a 	bl	8000ed0 <HAL_GetTick>
 8001bdc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bde:	4b9b      	ldr	r3, [pc, #620]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	f013 0f02 	tst.w	r3, #2
 8001be6:	d1e4      	bne.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x30a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be8:	f7ff f972 	bl	8000ed0 <HAL_GetTick>
 8001bec:	1bc0      	subs	r0, r0, r7
 8001bee:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bf2:	4298      	cmp	r0, r3
 8001bf4:	d9f3      	bls.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x336>
            return HAL_TIMEOUT;
 8001bf6:	2003      	movs	r0, #3
 8001bf8:	e793      	b.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bfa:	4894      	ldr	r0, [pc, #592]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001bfc:	6882      	ldr	r2, [r0, #8]
 8001bfe:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001c02:	4993      	ldr	r1, [pc, #588]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8001c04:	4019      	ands	r1, r3
 8001c06:	430a      	orrs	r2, r1
 8001c08:	6082      	str	r2, [r0, #8]
 8001c0a:	e7dd      	b.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x320>
      pllsaiused = 1;
 8001c0c:	2501      	movs	r5, #1
 8001c0e:	e75f      	b.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_PLLI2S_DISABLE();
 8001c10:	4a8e      	ldr	r2, [pc, #568]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001c12:	6813      	ldr	r3, [r2, #0]
 8001c14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001c18:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001c1a:	f7ff f959 	bl	8000ed0 <HAL_GetTick>
 8001c1e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c20:	4b8a      	ldr	r3, [pc, #552]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001c28:	d006      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001c2a:	f7ff f951 	bl	8000ed0 <HAL_GetTick>
 8001c2e:	1b80      	subs	r0, r0, r6
 8001c30:	2864      	cmp	r0, #100	; 0x64
 8001c32:	d9f5      	bls.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x378>
        return HAL_TIMEOUT;
 8001c34:	2003      	movs	r0, #3
 8001c36:	e774      	b.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001c38:	6823      	ldr	r3, [r4, #0]
 8001c3a:	f013 0f01 	tst.w	r3, #1
 8001c3e:	d013      	beq.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8001c40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c42:	b98b      	cbnz	r3, 8001c68 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001c44:	4a81      	ldr	r2, [pc, #516]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001c46:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001c4a:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c4e:	6860      	ldr	r0, [r4, #4]
 8001c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c54:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001c58:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	68a1      	ldr	r1, [r4, #8]
 8001c60:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001c64:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001c6e:	d003      	beq.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001c70:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001c72:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001c76:	d006      	beq.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8001c78:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001c7c:	d01e      	beq.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x414>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001c7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c84:	d11a      	bne.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x414>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001c86:	4a71      	ldr	r2, [pc, #452]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001c88:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001c8c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001c90:	6860      	ldr	r0, [r4, #4]
 8001c92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c96:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001c9a:	68e0      	ldr	r0, [r4, #12]
 8001c9c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001ca0:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001ca4:	430b      	orrs	r3, r1
 8001ca6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001caa:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001cae:	f023 031f 	bic.w	r3, r3, #31
 8001cb2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001cb4:	3901      	subs	r1, #1
 8001cb6:	430b      	orrs	r3, r1
 8001cb8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001cbc:	6823      	ldr	r3, [r4, #0]
 8001cbe:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001cc2:	d011      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001cc4:	4a61      	ldr	r2, [pc, #388]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001cc6:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001cca:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001cce:	6866      	ldr	r6, [r4, #4]
 8001cd0:	6923      	ldr	r3, [r4, #16]
 8001cd2:	041b      	lsls	r3, r3, #16
 8001cd4:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8001cd8:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001cdc:	4303      	orrs	r3, r0
 8001cde:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001ce2:	430b      	orrs	r3, r1
 8001ce4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001ce8:	6823      	ldr	r3, [r4, #0]
 8001cea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001cee:	d00d      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x464>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001cf0:	6862      	ldr	r2, [r4, #4]
 8001cf2:	6923      	ldr	r3, [r4, #16]
 8001cf4:	041b      	lsls	r3, r3, #16
 8001cf6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001cfa:	68e2      	ldr	r2, [r4, #12]
 8001cfc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d00:	68a2      	ldr	r2, [r4, #8]
 8001d02:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001d06:	4a51      	ldr	r2, [pc, #324]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001d08:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001d0c:	4a4f      	ldr	r2, [pc, #316]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001d0e:	6813      	ldr	r3, [r2, #0]
 8001d10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d14:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001d16:	f7ff f8db 	bl	8000ed0 <HAL_GetTick>
 8001d1a:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d1c:	4b4b      	ldr	r3, [pc, #300]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001d24:	f47f aef9 	bne.w	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x272>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d28:	f7ff f8d2 	bl	8000ed0 <HAL_GetTick>
 8001d2c:	1b80      	subs	r0, r0, r6
 8001d2e:	2864      	cmp	r0, #100	; 0x64
 8001d30:	d9f4      	bls.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x474>
        return HAL_TIMEOUT;
 8001d32:	2003      	movs	r0, #3
 8001d34:	e6f5      	b.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    __HAL_RCC_PLLSAI_DISABLE();
 8001d36:	4a45      	ldr	r2, [pc, #276]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001d38:	6813      	ldr	r3, [r2, #0]
 8001d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001d40:	f7ff f8c6 	bl	8000ed0 <HAL_GetTick>
 8001d44:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001d46:	4b41      	ldr	r3, [pc, #260]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001d4e:	d006      	beq.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001d50:	f7ff f8be 	bl	8000ed0 <HAL_GetTick>
 8001d54:	1b40      	subs	r0, r0, r5
 8001d56:	2864      	cmp	r0, #100	; 0x64
 8001d58:	d9f5      	bls.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x49e>
        return HAL_TIMEOUT;
 8001d5a:	2003      	movs	r0, #3
 8001d5c:	e6e1      	b.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001d5e:	6823      	ldr	r3, [r4, #0]
 8001d60:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001d64:	d001      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8001d66:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d68:	b122      	cbz	r2, 8001d74 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8001d6a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001d6e:	d01d      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x504>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001d70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d72:	b9db      	cbnz	r3, 8001dac <HAL_RCCEx_PeriphCLKConfig+0x504>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001d74:	4a35      	ldr	r2, [pc, #212]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001d76:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001d7a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001d7e:	6960      	ldr	r0, [r4, #20]
 8001d80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d84:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001d88:	69a0      	ldr	r0, [r4, #24]
 8001d8a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001d8e:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001d92:	430b      	orrs	r3, r1
 8001d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001d98:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001d9c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001da0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001da2:	3901      	subs	r1, #1
 8001da4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001da8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001dac:	6823      	ldr	r3, [r4, #0]
 8001dae:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001db2:	d003      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8001db4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001db6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001dba:	d031      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x578>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001dbc:	6823      	ldr	r3, [r4, #0]
 8001dbe:	f013 0f08 	tst.w	r3, #8
 8001dc2:	d019      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x550>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001dc4:	4a21      	ldr	r2, [pc, #132]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001dc6:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001dca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001dce:	6960      	ldr	r0, [r4, #20]
 8001dd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dd4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001dd8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	69e1      	ldr	r1, [r4, #28]
 8001de0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001de8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001dec:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001df0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001df2:	430b      	orrs	r3, r1
 8001df4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8001df8:	4a14      	ldr	r2, [pc, #80]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001dfa:	6813      	ldr	r3, [r2, #0]
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e00:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001e02:	f7ff f865 	bl	8000ed0 <HAL_GetTick>
 8001e06:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001e08:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001e10:	d119      	bne.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001e12:	f7ff f85d 	bl	8000ed0 <HAL_GetTick>
 8001e16:	1b00      	subs	r0, r0, r4
 8001e18:	2864      	cmp	r0, #100	; 0x64
 8001e1a:	d9f5      	bls.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x560>
        return HAL_TIMEOUT;
 8001e1c:	2003      	movs	r0, #3
 8001e1e:	e680      	b.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001e20:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8001e22:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001e26:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001e2a:	6965      	ldr	r5, [r4, #20]
 8001e2c:	6a23      	ldr	r3, [r4, #32]
 8001e2e:	041b      	lsls	r3, r3, #16
 8001e30:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001e34:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001e38:	4303      	orrs	r3, r0
 8001e3a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001e3e:	430b      	orrs	r3, r1
 8001e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001e44:	e7ba      	b.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x514>
  return HAL_OK;
 8001e46:	2000      	movs	r0, #0
 8001e48:	e66b      	b.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	0ffffcff 	.word	0x0ffffcff

08001e54 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001e54:	6802      	ldr	r2, [r0, #0]
 8001e56:	6813      	ldr	r3, [r2, #0]
 8001e58:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001e5c:	6013      	str	r3, [r2, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001e5e:	2320      	movs	r3, #32
 8001e60:	6743      	str	r3, [r0, #116]	; 0x74
}
 8001e62:	4770      	bx	lr

08001e64 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e64:	6802      	ldr	r2, [r0, #0]
 8001e66:	6813      	ldr	r3, [r2, #0]
 8001e68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001e6c:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e6e:	6802      	ldr	r2, [r0, #0]
 8001e70:	6893      	ldr	r3, [r2, #8]
 8001e72:	f023 0301 	bic.w	r3, r3, #1
 8001e76:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e78:	2320      	movs	r3, #32
 8001e7a:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001e80:	4770      	bx	lr
	...

08001e84 <HAL_UART_Transmit_DMA>:
{
 8001e84:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001e86:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8001e88:	2a20      	cmp	r2, #32
 8001e8a:	d142      	bne.n	8001f12 <HAL_UART_Transmit_DMA+0x8e>
{
 8001e8c:	b510      	push	{r4, lr}
 8001e8e:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8001e90:	fab3 f283 	clz	r2, r3
 8001e94:	0952      	lsrs	r2, r2, #5
 8001e96:	2900      	cmp	r1, #0
 8001e98:	bf08      	it	eq
 8001e9a:	2201      	moveq	r2, #1
 8001e9c:	2a00      	cmp	r2, #0
 8001e9e:	d13a      	bne.n	8001f16 <HAL_UART_Transmit_DMA+0x92>
    __HAL_LOCK(huart);
 8001ea0:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
 8001ea4:	2a01      	cmp	r2, #1
 8001ea6:	d038      	beq.n	8001f1a <HAL_UART_Transmit_DMA+0x96>
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 8001eae:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001eb0:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 8001eb4:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb8:	2200      	movs	r2, #0
 8001eba:	67c2      	str	r2, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ebc:	2221      	movs	r2, #33	; 0x21
 8001ebe:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->hdmatx != NULL)
 8001ec0:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001ec2:	b1d2      	cbz	r2, 8001efa <HAL_UART_Transmit_DMA+0x76>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001ec4:	4916      	ldr	r1, [pc, #88]	; (8001f20 <HAL_UART_Transmit_DMA+0x9c>)
 8001ec6:	63d1      	str	r1, [r2, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001ec8:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001eca:	4916      	ldr	r1, [pc, #88]	; (8001f24 <HAL_UART_Transmit_DMA+0xa0>)
 8001ecc:	6411      	str	r1, [r2, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001ece:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001ed0:	4915      	ldr	r1, [pc, #84]	; (8001f28 <HAL_UART_Transmit_DMA+0xa4>)
 8001ed2:	64d1      	str	r1, [r2, #76]	; 0x4c
      huart->hdmatx->XferAbortCallback = NULL;
 8001ed4:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	6511      	str	r1, [r2, #80]	; 0x50
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8001eda:	6802      	ldr	r2, [r0, #0]
 8001edc:	3228      	adds	r2, #40	; 0x28
 8001ede:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8001ee0:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8001ee2:	f7ff f86b 	bl	8000fbc <HAL_DMA_Start_IT>
 8001ee6:	b140      	cbz	r0, 8001efa <HAL_UART_Transmit_DMA+0x76>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001ee8:	2310      	movs	r3, #16
 8001eea:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8001eec:	2300      	movs	r3, #0
 8001eee:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 8001ef2:	2320      	movs	r3, #32
 8001ef4:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	e00a      	b.n	8001f10 <HAL_UART_Transmit_DMA+0x8c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8001efa:	6823      	ldr	r3, [r4, #0]
 8001efc:	2240      	movs	r2, #64	; 0x40
 8001efe:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8001f00:	2000      	movs	r0, #0
 8001f02:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001f06:	6822      	ldr	r2, [r4, #0]
 8001f08:	6893      	ldr	r3, [r2, #8]
 8001f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f0e:	6093      	str	r3, [r2, #8]
}
 8001f10:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001f12:	2002      	movs	r0, #2
}
 8001f14:	4770      	bx	lr
      return HAL_ERROR;
 8001f16:	2001      	movs	r0, #1
 8001f18:	e7fa      	b.n	8001f10 <HAL_UART_Transmit_DMA+0x8c>
    __HAL_LOCK(huart);
 8001f1a:	2002      	movs	r0, #2
 8001f1c:	e7f8      	b.n	8001f10 <HAL_UART_Transmit_DMA+0x8c>
 8001f1e:	bf00      	nop
 8001f20:	08001f2f 	.word	0x08001f2f
 8001f24:	08001f61 	.word	0x08001f61
 8001f28:	08001f6d 	.word	0x08001f6d

08001f2c <HAL_UART_TxCpltCallback>:
}
 8001f2c:	4770      	bx	lr

08001f2e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001f2e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001f30:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8001f32:	69c2      	ldr	r2, [r0, #28]
 8001f34:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001f38:	d00d      	beq.n	8001f56 <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0U;
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001f40:	6819      	ldr	r1, [r3, #0]
 8001f42:	688a      	ldr	r2, [r1, #8]
 8001f44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f48:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	6813      	ldr	r3, [r2, #0]
 8001f4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f52:	6013      	str	r3, [r2, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001f54:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff ffe8 	bl	8001f2c <HAL_UART_TxCpltCallback>
}
 8001f5c:	e7fa      	b.n	8001f54 <UART_DMATransmitCplt+0x26>

08001f5e <HAL_UART_TxHalfCpltCallback>:
}
 8001f5e:	4770      	bx	lr

08001f60 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001f60:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8001f62:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001f64:	f7ff fffb 	bl	8001f5e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f68:	bd08      	pop	{r3, pc}

08001f6a <HAL_UART_ErrorCallback>:
}
 8001f6a:	4770      	bx	lr

08001f6c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f6c:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001f6e:	6b84      	ldr	r4, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8001f70:	6f62      	ldr	r2, [r4, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8001f72:	6fa5      	ldr	r5, [r4, #120]	; 0x78

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8001f74:	6823      	ldr	r3, [r4, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f7c:	d001      	beq.n	8001f82 <UART_DMAError+0x16>
 8001f7e:	2a21      	cmp	r2, #33	; 0x21
 8001f80:	d00e      	beq.n	8001fa0 <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8001f82:	6823      	ldr	r3, [r4, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001f8a:	d001      	beq.n	8001f90 <UART_DMAError+0x24>
 8001f8c:	2d22      	cmp	r5, #34	; 0x22
 8001f8e:	d00e      	beq.n	8001fae <UART_DMAError+0x42>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001f90:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001f92:	f043 0310 	orr.w	r3, r3, #16
 8001f96:	67e3      	str	r3, [r4, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f7ff ffe6 	bl	8001f6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f9e:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	f7ff ff54 	bl	8001e54 <UART_EndTxTransfer>
 8001fac:	e7e9      	b.n	8001f82 <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	f7ff ff55 	bl	8001e64 <UART_EndRxTransfer>
 8001fba:	e7e9      	b.n	8001f90 <UART_DMAError+0x24>

08001fbc <UART_SetConfig>:
{
 8001fbc:	b538      	push	{r3, r4, r5, lr}
 8001fbe:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fc0:	6883      	ldr	r3, [r0, #8]
 8001fc2:	6902      	ldr	r2, [r0, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	6942      	ldr	r2, [r0, #20]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	69c2      	ldr	r2, [r0, #28]
 8001fcc:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001fce:	6801      	ldr	r1, [r0, #0]
 8001fd0:	6808      	ldr	r0, [r1, #0]
 8001fd2:	4a9f      	ldr	r2, [pc, #636]	; (8002250 <UART_SetConfig+0x294>)
 8001fd4:	4002      	ands	r2, r0
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fda:	6822      	ldr	r2, [r4, #0]
 8001fdc:	6853      	ldr	r3, [r2, #4]
 8001fde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fe2:	68e1      	ldr	r1, [r4, #12]
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001fe8:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8001fea:	6a23      	ldr	r3, [r4, #32]
 8001fec:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001fee:	6821      	ldr	r1, [r4, #0]
 8001ff0:	688b      	ldr	r3, [r1, #8]
 8001ff2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ffa:	6823      	ldr	r3, [r4, #0]
 8001ffc:	4a95      	ldr	r2, [pc, #596]	; (8002254 <UART_SetConfig+0x298>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d019      	beq.n	8002036 <UART_SetConfig+0x7a>
 8002002:	4a95      	ldr	r2, [pc, #596]	; (8002258 <UART_SetConfig+0x29c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d029      	beq.n	800205c <UART_SetConfig+0xa0>
 8002008:	4a94      	ldr	r2, [pc, #592]	; (800225c <UART_SetConfig+0x2a0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d03e      	beq.n	800208c <UART_SetConfig+0xd0>
 800200e:	4a94      	ldr	r2, [pc, #592]	; (8002260 <UART_SetConfig+0x2a4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d062      	beq.n	80020da <UART_SetConfig+0x11e>
 8002014:	4a93      	ldr	r2, [pc, #588]	; (8002264 <UART_SetConfig+0x2a8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d071      	beq.n	80020fe <UART_SetConfig+0x142>
 800201a:	4a93      	ldr	r2, [pc, #588]	; (8002268 <UART_SetConfig+0x2ac>)
 800201c:	4293      	cmp	r3, r2
 800201e:	f000 8083 	beq.w	8002128 <UART_SetConfig+0x16c>
 8002022:	4a92      	ldr	r2, [pc, #584]	; (800226c <UART_SetConfig+0x2b0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	f000 8094 	beq.w	8002152 <UART_SetConfig+0x196>
 800202a:	4a91      	ldr	r2, [pc, #580]	; (8002270 <UART_SetConfig+0x2b4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	f000 80a5 	beq.w	800217c <UART_SetConfig+0x1c0>
 8002032:	2510      	movs	r5, #16
 8002034:	e03a      	b.n	80020ac <UART_SetConfig+0xf0>
 8002036:	4b8f      	ldr	r3, [pc, #572]	; (8002274 <UART_SetConfig+0x2b8>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b03      	cmp	r3, #3
 8002042:	d809      	bhi.n	8002058 <UART_SetConfig+0x9c>
 8002044:	e8df f003 	tbb	[pc, r3]
 8002048:	06ae0402 	.word	0x06ae0402
 800204c:	2501      	movs	r5, #1
 800204e:	e02d      	b.n	80020ac <UART_SetConfig+0xf0>
 8002050:	2504      	movs	r5, #4
 8002052:	e02b      	b.n	80020ac <UART_SetConfig+0xf0>
 8002054:	2508      	movs	r5, #8
 8002056:	e029      	b.n	80020ac <UART_SetConfig+0xf0>
 8002058:	2510      	movs	r5, #16
 800205a:	e027      	b.n	80020ac <UART_SetConfig+0xf0>
 800205c:	4b85      	ldr	r3, [pc, #532]	; (8002274 <UART_SetConfig+0x2b8>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b0c      	cmp	r3, #12
 8002068:	d80e      	bhi.n	8002088 <UART_SetConfig+0xcc>
 800206a:	e8df f003 	tbb	[pc, r3]
 800206e:	0d07      	.short	0x0d07
 8002070:	0d090d0d 	.word	0x0d090d0d
 8002074:	0d9d0d0d 	.word	0x0d9d0d0d
 8002078:	0d0d      	.short	0x0d0d
 800207a:	0b          	.byte	0x0b
 800207b:	00          	.byte	0x00
 800207c:	2500      	movs	r5, #0
 800207e:	e015      	b.n	80020ac <UART_SetConfig+0xf0>
 8002080:	2504      	movs	r5, #4
 8002082:	e013      	b.n	80020ac <UART_SetConfig+0xf0>
 8002084:	2508      	movs	r5, #8
 8002086:	e011      	b.n	80020ac <UART_SetConfig+0xf0>
 8002088:	2510      	movs	r5, #16
 800208a:	e00f      	b.n	80020ac <UART_SetConfig+0xf0>
 800208c:	4b79      	ldr	r3, [pc, #484]	; (8002274 <UART_SetConfig+0x2b8>)
 800208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002092:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002096:	2b20      	cmp	r3, #32
 8002098:	f000 8088 	beq.w	80021ac <UART_SetConfig+0x1f0>
 800209c:	d819      	bhi.n	80020d2 <UART_SetConfig+0x116>
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 8086 	beq.w	80021b0 <UART_SetConfig+0x1f4>
 80020a4:	2b10      	cmp	r3, #16
 80020a6:	f040 8085 	bne.w	80021b4 <UART_SetConfig+0x1f8>
 80020aa:	2504      	movs	r5, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020ac:	69e3      	ldr	r3, [r4, #28]
 80020ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020b2:	f000 80ab 	beq.w	800220c <UART_SetConfig+0x250>
    switch (clocksource)
 80020b6:	2d08      	cmp	r5, #8
 80020b8:	f200 8140 	bhi.w	800233c <UART_SetConfig+0x380>
 80020bc:	e8df f015 	tbh	[pc, r5, lsl #1]
 80020c0:	01180107 	.word	0x01180107
 80020c4:	013e0122 	.word	0x013e0122
 80020c8:	013e012b 	.word	0x013e012b
 80020cc:	013e013e 	.word	0x013e013e
 80020d0:	0135      	.short	0x0135
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020d2:	2b30      	cmp	r3, #48	; 0x30
 80020d4:	d170      	bne.n	80021b8 <UART_SetConfig+0x1fc>
 80020d6:	2508      	movs	r5, #8
 80020d8:	e7e8      	b.n	80020ac <UART_SetConfig+0xf0>
 80020da:	4b66      	ldr	r3, [pc, #408]	; (8002274 <UART_SetConfig+0x2b8>)
 80020dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80020e4:	2b80      	cmp	r3, #128	; 0x80
 80020e6:	d069      	beq.n	80021bc <UART_SetConfig+0x200>
 80020e8:	d805      	bhi.n	80020f6 <UART_SetConfig+0x13a>
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d068      	beq.n	80021c0 <UART_SetConfig+0x204>
 80020ee:	2b40      	cmp	r3, #64	; 0x40
 80020f0:	d168      	bne.n	80021c4 <UART_SetConfig+0x208>
 80020f2:	2504      	movs	r5, #4
 80020f4:	e7da      	b.n	80020ac <UART_SetConfig+0xf0>
 80020f6:	2bc0      	cmp	r3, #192	; 0xc0
 80020f8:	d166      	bne.n	80021c8 <UART_SetConfig+0x20c>
 80020fa:	2508      	movs	r5, #8
 80020fc:	e7d6      	b.n	80020ac <UART_SetConfig+0xf0>
 80020fe:	4b5d      	ldr	r3, [pc, #372]	; (8002274 <UART_SetConfig+0x2b8>)
 8002100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800210c:	d05e      	beq.n	80021cc <UART_SetConfig+0x210>
 800210e:	d806      	bhi.n	800211e <UART_SetConfig+0x162>
 8002110:	2b00      	cmp	r3, #0
 8002112:	d05d      	beq.n	80021d0 <UART_SetConfig+0x214>
 8002114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002118:	d15c      	bne.n	80021d4 <UART_SetConfig+0x218>
 800211a:	2504      	movs	r5, #4
 800211c:	e7c6      	b.n	80020ac <UART_SetConfig+0xf0>
 800211e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002122:	d159      	bne.n	80021d8 <UART_SetConfig+0x21c>
 8002124:	2508      	movs	r5, #8
 8002126:	e7c1      	b.n	80020ac <UART_SetConfig+0xf0>
 8002128:	4b52      	ldr	r3, [pc, #328]	; (8002274 <UART_SetConfig+0x2b8>)
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002136:	d051      	beq.n	80021dc <UART_SetConfig+0x220>
 8002138:	d806      	bhi.n	8002148 <UART_SetConfig+0x18c>
 800213a:	2b00      	cmp	r3, #0
 800213c:	d050      	beq.n	80021e0 <UART_SetConfig+0x224>
 800213e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002142:	d14f      	bne.n	80021e4 <UART_SetConfig+0x228>
 8002144:	2504      	movs	r5, #4
 8002146:	e7b1      	b.n	80020ac <UART_SetConfig+0xf0>
 8002148:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800214c:	d14c      	bne.n	80021e8 <UART_SetConfig+0x22c>
 800214e:	2508      	movs	r5, #8
 8002150:	e7ac      	b.n	80020ac <UART_SetConfig+0xf0>
 8002152:	4b48      	ldr	r3, [pc, #288]	; (8002274 <UART_SetConfig+0x2b8>)
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002158:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800215c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002160:	d044      	beq.n	80021ec <UART_SetConfig+0x230>
 8002162:	d806      	bhi.n	8002172 <UART_SetConfig+0x1b6>
 8002164:	2b00      	cmp	r3, #0
 8002166:	d043      	beq.n	80021f0 <UART_SetConfig+0x234>
 8002168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800216c:	d142      	bne.n	80021f4 <UART_SetConfig+0x238>
 800216e:	2504      	movs	r5, #4
 8002170:	e79c      	b.n	80020ac <UART_SetConfig+0xf0>
 8002172:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002176:	d13f      	bne.n	80021f8 <UART_SetConfig+0x23c>
 8002178:	2508      	movs	r5, #8
 800217a:	e797      	b.n	80020ac <UART_SetConfig+0xf0>
 800217c:	4b3d      	ldr	r3, [pc, #244]	; (8002274 <UART_SetConfig+0x2b8>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002182:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800218a:	d037      	beq.n	80021fc <UART_SetConfig+0x240>
 800218c:	d805      	bhi.n	800219a <UART_SetConfig+0x1de>
 800218e:	b3bb      	cbz	r3, 8002200 <UART_SetConfig+0x244>
 8002190:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002194:	d136      	bne.n	8002204 <UART_SetConfig+0x248>
 8002196:	2504      	movs	r5, #4
 8002198:	e788      	b.n	80020ac <UART_SetConfig+0xf0>
 800219a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800219e:	d133      	bne.n	8002208 <UART_SetConfig+0x24c>
 80021a0:	2508      	movs	r5, #8
 80021a2:	e783      	b.n	80020ac <UART_SetConfig+0xf0>
 80021a4:	2502      	movs	r5, #2
 80021a6:	e781      	b.n	80020ac <UART_SetConfig+0xf0>
 80021a8:	2502      	movs	r5, #2
 80021aa:	e77f      	b.n	80020ac <UART_SetConfig+0xf0>
 80021ac:	2502      	movs	r5, #2
 80021ae:	e77d      	b.n	80020ac <UART_SetConfig+0xf0>
 80021b0:	2500      	movs	r5, #0
 80021b2:	e77b      	b.n	80020ac <UART_SetConfig+0xf0>
 80021b4:	2510      	movs	r5, #16
 80021b6:	e779      	b.n	80020ac <UART_SetConfig+0xf0>
 80021b8:	2510      	movs	r5, #16
 80021ba:	e777      	b.n	80020ac <UART_SetConfig+0xf0>
 80021bc:	2502      	movs	r5, #2
 80021be:	e775      	b.n	80020ac <UART_SetConfig+0xf0>
 80021c0:	2500      	movs	r5, #0
 80021c2:	e773      	b.n	80020ac <UART_SetConfig+0xf0>
 80021c4:	2510      	movs	r5, #16
 80021c6:	e771      	b.n	80020ac <UART_SetConfig+0xf0>
 80021c8:	2510      	movs	r5, #16
 80021ca:	e76f      	b.n	80020ac <UART_SetConfig+0xf0>
 80021cc:	2502      	movs	r5, #2
 80021ce:	e76d      	b.n	80020ac <UART_SetConfig+0xf0>
 80021d0:	2500      	movs	r5, #0
 80021d2:	e76b      	b.n	80020ac <UART_SetConfig+0xf0>
 80021d4:	2510      	movs	r5, #16
 80021d6:	e769      	b.n	80020ac <UART_SetConfig+0xf0>
 80021d8:	2510      	movs	r5, #16
 80021da:	e767      	b.n	80020ac <UART_SetConfig+0xf0>
 80021dc:	2502      	movs	r5, #2
 80021de:	e765      	b.n	80020ac <UART_SetConfig+0xf0>
 80021e0:	2501      	movs	r5, #1
 80021e2:	e763      	b.n	80020ac <UART_SetConfig+0xf0>
 80021e4:	2510      	movs	r5, #16
 80021e6:	e761      	b.n	80020ac <UART_SetConfig+0xf0>
 80021e8:	2510      	movs	r5, #16
 80021ea:	e75f      	b.n	80020ac <UART_SetConfig+0xf0>
 80021ec:	2502      	movs	r5, #2
 80021ee:	e75d      	b.n	80020ac <UART_SetConfig+0xf0>
 80021f0:	2500      	movs	r5, #0
 80021f2:	e75b      	b.n	80020ac <UART_SetConfig+0xf0>
 80021f4:	2510      	movs	r5, #16
 80021f6:	e759      	b.n	80020ac <UART_SetConfig+0xf0>
 80021f8:	2510      	movs	r5, #16
 80021fa:	e757      	b.n	80020ac <UART_SetConfig+0xf0>
 80021fc:	2502      	movs	r5, #2
 80021fe:	e755      	b.n	80020ac <UART_SetConfig+0xf0>
 8002200:	2500      	movs	r5, #0
 8002202:	e753      	b.n	80020ac <UART_SetConfig+0xf0>
 8002204:	2510      	movs	r5, #16
 8002206:	e751      	b.n	80020ac <UART_SetConfig+0xf0>
 8002208:	2510      	movs	r5, #16
 800220a:	e74f      	b.n	80020ac <UART_SetConfig+0xf0>
    switch (clocksource)
 800220c:	2d08      	cmp	r5, #8
 800220e:	d85b      	bhi.n	80022c8 <UART_SetConfig+0x30c>
 8002210:	e8df f005 	tbb	[pc, r5]
 8002214:	5a3d3205 	.word	0x5a3d3205
 8002218:	5a5a5a46 	.word	0x5a5a5a46
 800221c:	51          	.byte	0x51
 800221d:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 800221e:	f7ff fb23 	bl	8001868 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002222:	6862      	ldr	r2, [r4, #4]
 8002224:	0853      	lsrs	r3, r2, #1
 8002226:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800222a:	fbb3 f3f2 	udiv	r3, r3, r2
 800222e:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002230:	f1a3 0110 	sub.w	r1, r3, #16
 8002234:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002238:	4291      	cmp	r1, r2
 800223a:	f200 8082 	bhi.w	8002342 <UART_SetConfig+0x386>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800223e:	b29a      	uxth	r2, r3
 8002240:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002244:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002248:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 800224a:	6822      	ldr	r2, [r4, #0]
 800224c:	60d3      	str	r3, [r2, #12]
 800224e:	e07b      	b.n	8002348 <UART_SetConfig+0x38c>
 8002250:	efff69f3 	.word	0xefff69f3
 8002254:	40011000 	.word	0x40011000
 8002258:	40004400 	.word	0x40004400
 800225c:	40004800 	.word	0x40004800
 8002260:	40004c00 	.word	0x40004c00
 8002264:	40005000 	.word	0x40005000
 8002268:	40011400 	.word	0x40011400
 800226c:	40007800 	.word	0x40007800
 8002270:	40007c00 	.word	0x40007c00
 8002274:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK2Freq();
 8002278:	f7ff fb06 	bl	8001888 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800227c:	6862      	ldr	r2, [r4, #4]
 800227e:	0853      	lsrs	r3, r2, #1
 8002280:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002284:	fbb3 f3f2 	udiv	r3, r3, r2
 8002288:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800228a:	2500      	movs	r5, #0
        break;
 800228c:	e7d0      	b.n	8002230 <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800228e:	6862      	ldr	r2, [r4, #4]
 8002290:	4b30      	ldr	r3, [pc, #192]	; (8002354 <UART_SetConfig+0x398>)
 8002292:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002296:	fbb3 f3f2 	udiv	r3, r3, r2
 800229a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800229c:	2500      	movs	r5, #0
        break;
 800229e:	e7c7      	b.n	8002230 <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetSysClockFreq();
 80022a0:	f7ff f9d6 	bl	8001650 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80022a4:	6862      	ldr	r2, [r4, #4]
 80022a6:	0853      	lsrs	r3, r2, #1
 80022a8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80022ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80022b0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80022b2:	2500      	movs	r5, #0
        break;
 80022b4:	e7bc      	b.n	8002230 <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80022b6:	6862      	ldr	r2, [r4, #4]
 80022b8:	0853      	lsrs	r3, r2, #1
 80022ba:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80022be:	fbb3 f3f2 	udiv	r3, r3, r2
 80022c2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80022c4:	2500      	movs	r5, #0
        break;
 80022c6:	e7b3      	b.n	8002230 <UART_SetConfig+0x274>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022c8:	2501      	movs	r5, #1
 80022ca:	2300      	movs	r3, #0
 80022cc:	e7b0      	b.n	8002230 <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetPCLK1Freq();
 80022ce:	f7ff facb 	bl	8001868 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80022d2:	6862      	ldr	r2, [r4, #4]
 80022d4:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80022d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80022dc:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022de:	f1a3 0110 	sub.w	r1, r3, #16
 80022e2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80022e6:	4291      	cmp	r1, r2
 80022e8:	d82d      	bhi.n	8002346 <UART_SetConfig+0x38a>
      huart->Instance->BRR = usartdiv;
 80022ea:	6822      	ldr	r2, [r4, #0]
 80022ec:	60d3      	str	r3, [r2, #12]
 80022ee:	e02b      	b.n	8002348 <UART_SetConfig+0x38c>
        pclk = HAL_RCC_GetPCLK2Freq();
 80022f0:	f7ff faca 	bl	8001888 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80022f4:	6862      	ldr	r2, [r4, #4]
 80022f6:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80022fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80022fe:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002300:	2500      	movs	r5, #0
        break;
 8002302:	e7ec      	b.n	80022de <UART_SetConfig+0x322>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002304:	6862      	ldr	r2, [r4, #4]
 8002306:	4b14      	ldr	r3, [pc, #80]	; (8002358 <UART_SetConfig+0x39c>)
 8002308:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800230c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002310:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002312:	2500      	movs	r5, #0
        break;
 8002314:	e7e3      	b.n	80022de <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetSysClockFreq();
 8002316:	f7ff f99b 	bl	8001650 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800231a:	6862      	ldr	r2, [r4, #4]
 800231c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002320:	fbb3 f3f2 	udiv	r3, r3, r2
 8002324:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002326:	2500      	movs	r5, #0
        break;
 8002328:	e7d9      	b.n	80022de <UART_SetConfig+0x322>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800232a:	6862      	ldr	r2, [r4, #4]
 800232c:	0853      	lsrs	r3, r2, #1
 800232e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002332:	fbb3 f3f2 	udiv	r3, r3, r2
 8002336:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002338:	2500      	movs	r5, #0
        break;
 800233a:	e7d0      	b.n	80022de <UART_SetConfig+0x322>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800233c:	2501      	movs	r5, #1
 800233e:	2300      	movs	r3, #0
 8002340:	e7cd      	b.n	80022de <UART_SetConfig+0x322>
      ret = HAL_ERROR;
 8002342:	2501      	movs	r5, #1
 8002344:	e000      	b.n	8002348 <UART_SetConfig+0x38c>
      ret = HAL_ERROR;
 8002346:	2501      	movs	r5, #1
  huart->RxISR = NULL;
 8002348:	2300      	movs	r3, #0
 800234a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800234c:	6663      	str	r3, [r4, #100]	; 0x64
}
 800234e:	4628      	mov	r0, r5
 8002350:	bd38      	pop	{r3, r4, r5, pc}
 8002352:	bf00      	nop
 8002354:	01e84800 	.word	0x01e84800
 8002358:	00f42400 	.word	0x00f42400

0800235c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800235c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800235e:	f013 0f01 	tst.w	r3, #1
 8002362:	d006      	beq.n	8002372 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002364:	6802      	ldr	r2, [r0, #0]
 8002366:	6853      	ldr	r3, [r2, #4]
 8002368:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800236c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800236e:	430b      	orrs	r3, r1
 8002370:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002372:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002374:	f013 0f02 	tst.w	r3, #2
 8002378:	d006      	beq.n	8002388 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800237a:	6802      	ldr	r2, [r0, #0]
 800237c:	6853      	ldr	r3, [r2, #4]
 800237e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002382:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002384:	430b      	orrs	r3, r1
 8002386:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002388:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800238a:	f013 0f04 	tst.w	r3, #4
 800238e:	d006      	beq.n	800239e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002390:	6802      	ldr	r2, [r0, #0]
 8002392:	6853      	ldr	r3, [r2, #4]
 8002394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002398:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800239a:	430b      	orrs	r3, r1
 800239c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800239e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023a0:	f013 0f08 	tst.w	r3, #8
 80023a4:	d006      	beq.n	80023b4 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023a6:	6802      	ldr	r2, [r0, #0]
 80023a8:	6853      	ldr	r3, [r2, #4]
 80023aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80023ae:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80023b0:	430b      	orrs	r3, r1
 80023b2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023b6:	f013 0f10 	tst.w	r3, #16
 80023ba:	d006      	beq.n	80023ca <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023bc:	6802      	ldr	r2, [r0, #0]
 80023be:	6893      	ldr	r3, [r2, #8]
 80023c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023c4:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80023c6:	430b      	orrs	r3, r1
 80023c8:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023cc:	f013 0f20 	tst.w	r3, #32
 80023d0:	d006      	beq.n	80023e0 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023d2:	6802      	ldr	r2, [r0, #0]
 80023d4:	6893      	ldr	r3, [r2, #8]
 80023d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023da:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80023dc:	430b      	orrs	r3, r1
 80023de:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80023e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023e2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80023e6:	d00a      	beq.n	80023fe <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023e8:	6802      	ldr	r2, [r0, #0]
 80023ea:	6853      	ldr	r3, [r2, #4]
 80023ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80023f0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80023f2:	430b      	orrs	r3, r1
 80023f4:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023f6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80023f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023fc:	d00b      	beq.n	8002416 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80023fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002400:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002404:	d006      	beq.n	8002414 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002406:	6802      	ldr	r2, [r0, #0]
 8002408:	6853      	ldr	r3, [r2, #4]
 800240a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800240e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002410:	430b      	orrs	r3, r1
 8002412:	6053      	str	r3, [r2, #4]
}
 8002414:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002416:	6802      	ldr	r2, [r0, #0]
 8002418:	6853      	ldr	r3, [r2, #4]
 800241a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800241e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002420:	430b      	orrs	r3, r1
 8002422:	6053      	str	r3, [r2, #4]
 8002424:	e7eb      	b.n	80023fe <UART_AdvFeatureConfig+0xa2>

08002426 <UART_WaitOnFlagUntilTimeout>:
{
 8002426:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800242a:	4605      	mov	r5, r0
 800242c:	460f      	mov	r7, r1
 800242e:	4616      	mov	r6, r2
 8002430:	4699      	mov	r9, r3
 8002432:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002436:	682c      	ldr	r4, [r5, #0]
 8002438:	69e4      	ldr	r4, [r4, #28]
 800243a:	ea37 0304 	bics.w	r3, r7, r4
 800243e:	bf0c      	ite	eq
 8002440:	2401      	moveq	r4, #1
 8002442:	2400      	movne	r4, #0
 8002444:	42b4      	cmp	r4, r6
 8002446:	d13c      	bne.n	80024c2 <UART_WaitOnFlagUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8002448:	f1b8 3fff 	cmp.w	r8, #4294967295
 800244c:	d0f3      	beq.n	8002436 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244e:	f7fe fd3f 	bl	8000ed0 <HAL_GetTick>
 8002452:	eba0 0009 	sub.w	r0, r0, r9
 8002456:	4540      	cmp	r0, r8
 8002458:	d821      	bhi.n	800249e <UART_WaitOnFlagUntilTimeout+0x78>
 800245a:	f1b8 0f00 	cmp.w	r8, #0
 800245e:	d01e      	beq.n	800249e <UART_WaitOnFlagUntilTimeout+0x78>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002460:	682b      	ldr	r3, [r5, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	f012 0f04 	tst.w	r2, #4
 8002468:	d0e5      	beq.n	8002436 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800246a:	69da      	ldr	r2, [r3, #28]
 800246c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002470:	d0e1      	beq.n	8002436 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002472:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002476:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002478:	682a      	ldr	r2, [r5, #0]
 800247a:	6813      	ldr	r3, [r2, #0]
 800247c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002480:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002482:	682a      	ldr	r2, [r5, #0]
 8002484:	6893      	ldr	r3, [r2, #8]
 8002486:	f023 0301 	bic.w	r3, r3, #1
 800248a:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 800248c:	2320      	movs	r3, #32
 800248e:	676b      	str	r3, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002490:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002492:	67eb      	str	r3, [r5, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002494:	2300      	movs	r3, #0
 8002496:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
          return HAL_TIMEOUT;
 800249a:	2003      	movs	r0, #3
 800249c:	e012      	b.n	80024c4 <UART_WaitOnFlagUntilTimeout+0x9e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800249e:	682a      	ldr	r2, [r5, #0]
 80024a0:	6813      	ldr	r3, [r2, #0]
 80024a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024a6:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024a8:	682a      	ldr	r2, [r5, #0]
 80024aa:	6893      	ldr	r3, [r2, #8]
 80024ac:	f023 0301 	bic.w	r3, r3, #1
 80024b0:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80024b2:	2320      	movs	r3, #32
 80024b4:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80024b6:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80024b8:	2300      	movs	r3, #0
 80024ba:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 80024be:	2003      	movs	r0, #3
 80024c0:	e000      	b.n	80024c4 <UART_WaitOnFlagUntilTimeout+0x9e>
  return HAL_OK;
 80024c2:	2000      	movs	r0, #0
}
 80024c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080024c8 <HAL_UART_Transmit>:
{
 80024c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80024d0:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80024d2:	2b20      	cmp	r3, #32
 80024d4:	d159      	bne.n	800258a <HAL_UART_Transmit+0xc2>
 80024d6:	4604      	mov	r4, r0
 80024d8:	460d      	mov	r5, r1
 80024da:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80024dc:	fab2 f382 	clz	r3, r2
 80024e0:	095b      	lsrs	r3, r3, #5
 80024e2:	2900      	cmp	r1, #0
 80024e4:	bf08      	it	eq
 80024e6:	2301      	moveq	r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d152      	bne.n	8002592 <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 80024ec:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d050      	beq.n	8002596 <HAL_UART_Transmit+0xce>
 80024f4:	2301      	movs	r3, #1
 80024f6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024fe:	2321      	movs	r3, #33	; 0x21
 8002500:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8002502:	f7fe fce5 	bl	8000ed0 <HAL_GetTick>
 8002506:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8002508:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800250c:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002510:	68a3      	ldr	r3, [r4, #8]
 8002512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002516:	d005      	beq.n	8002524 <HAL_UART_Transmit+0x5c>
      pdata16bits = NULL;
 8002518:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 800251c:	2300      	movs	r3, #0
 800251e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 8002522:	e014      	b.n	800254e <HAL_UART_Transmit+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002524:	6923      	ldr	r3, [r4, #16]
 8002526:	b113      	cbz	r3, 800252e <HAL_UART_Transmit+0x66>
      pdata16bits = NULL;
 8002528:	f04f 0800 	mov.w	r8, #0
 800252c:	e7f6      	b.n	800251c <HAL_UART_Transmit+0x54>
      pdata16bits = (uint16_t *) pData;
 800252e:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002530:	2500      	movs	r5, #0
 8002532:	e7f3      	b.n	800251c <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002534:	f838 3b02 	ldrh.w	r3, [r8], #2
 8002538:	6822      	ldr	r2, [r4, #0]
 800253a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800253e:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002540:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002544:	b292      	uxth	r2, r2
 8002546:	3a01      	subs	r2, #1
 8002548:	b292      	uxth	r2, r2
 800254a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800254e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002552:	b29b      	uxth	r3, r3
 8002554:	b173      	cbz	r3, 8002574 <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002556:	9600      	str	r6, [sp, #0]
 8002558:	463b      	mov	r3, r7
 800255a:	2200      	movs	r2, #0
 800255c:	2180      	movs	r1, #128	; 0x80
 800255e:	4620      	mov	r0, r4
 8002560:	f7ff ff61 	bl	8002426 <UART_WaitOnFlagUntilTimeout>
 8002564:	b9c8      	cbnz	r0, 800259a <HAL_UART_Transmit+0xd2>
      if (pdata8bits == NULL)
 8002566:	2d00      	cmp	r5, #0
 8002568:	d0e4      	beq.n	8002534 <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800256a:	f815 2b01 	ldrb.w	r2, [r5], #1
 800256e:	6823      	ldr	r3, [r4, #0]
 8002570:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002572:	e7e5      	b.n	8002540 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002574:	9600      	str	r6, [sp, #0]
 8002576:	463b      	mov	r3, r7
 8002578:	2200      	movs	r2, #0
 800257a:	2140      	movs	r1, #64	; 0x40
 800257c:	4620      	mov	r0, r4
 800257e:	f7ff ff52 	bl	8002426 <UART_WaitOnFlagUntilTimeout>
 8002582:	b960      	cbnz	r0, 800259e <HAL_UART_Transmit+0xd6>
    huart->gState = HAL_UART_STATE_READY;
 8002584:	2320      	movs	r3, #32
 8002586:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8002588:	e000      	b.n	800258c <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 800258a:	2002      	movs	r0, #2
}
 800258c:	b002      	add	sp, #8
 800258e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002592:	2001      	movs	r0, #1
 8002594:	e7fa      	b.n	800258c <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8002596:	2002      	movs	r0, #2
 8002598:	e7f8      	b.n	800258c <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 800259a:	2003      	movs	r0, #3
 800259c:	e7f6      	b.n	800258c <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 800259e:	2003      	movs	r0, #3
 80025a0:	e7f4      	b.n	800258c <HAL_UART_Transmit+0xc4>

080025a2 <UART_CheckIdleState>:
{
 80025a2:	b510      	push	{r4, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80025ac:	f7fe fc90 	bl	8000ed0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025b0:	6823      	ldr	r3, [r4, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f013 0f08 	tst.w	r3, #8
 80025b8:	d107      	bne.n	80025ca <UART_CheckIdleState+0x28>
  huart->gState = HAL_UART_STATE_READY;
 80025ba:	2320      	movs	r3, #32
 80025bc:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80025be:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80025c0:	2000      	movs	r0, #0
 80025c2:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 80025c6:	b002      	add	sp, #8
 80025c8:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	4603      	mov	r3, r0
 80025d2:	2200      	movs	r2, #0
 80025d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80025d8:	4620      	mov	r0, r4
 80025da:	f7ff ff24 	bl	8002426 <UART_WaitOnFlagUntilTimeout>
 80025de:	2800      	cmp	r0, #0
 80025e0:	d0eb      	beq.n	80025ba <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80025e2:	2003      	movs	r0, #3
 80025e4:	e7ef      	b.n	80025c6 <UART_CheckIdleState+0x24>

080025e6 <HAL_UART_Init>:
  if (huart == NULL)
 80025e6:	b368      	cbz	r0, 8002644 <HAL_UART_Init+0x5e>
{
 80025e8:	b510      	push	{r4, lr}
 80025ea:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80025ec:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80025ee:	b303      	cbz	r3, 8002632 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 80025f0:	2324      	movs	r3, #36	; 0x24
 80025f2:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80025f4:	6822      	ldr	r2, [r4, #0]
 80025f6:	6813      	ldr	r3, [r2, #0]
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025fe:	4620      	mov	r0, r4
 8002600:	f7ff fcdc 	bl	8001fbc <UART_SetConfig>
 8002604:	2801      	cmp	r0, #1
 8002606:	d013      	beq.n	8002630 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800260a:	b9bb      	cbnz	r3, 800263c <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800260c:	6822      	ldr	r2, [r4, #0]
 800260e:	6853      	ldr	r3, [r2, #4]
 8002610:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002614:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002616:	6822      	ldr	r2, [r4, #0]
 8002618:	6893      	ldr	r3, [r2, #8]
 800261a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800261e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002620:	6822      	ldr	r2, [r4, #0]
 8002622:	6813      	ldr	r3, [r2, #0]
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800262a:	4620      	mov	r0, r4
 800262c:	f7ff ffb9 	bl	80025a2 <UART_CheckIdleState>
}
 8002630:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002632:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002636:	f7fe fb97 	bl	8000d68 <HAL_UART_MspInit>
 800263a:	e7d9      	b.n	80025f0 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 800263c:	4620      	mov	r0, r4
 800263e:	f7ff fe8d 	bl	800235c <UART_AdvFeatureConfig>
 8002642:	e7e3      	b.n	800260c <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8002644:	2001      	movs	r0, #1
}
 8002646:	4770      	bx	lr

08002648 <_ZN14StateMachine01D1Ev>:
   text_(text)
{
	currentState_ = STATE_INITIAL;
}

StateMachine01::~StateMachine01()
 8002648:	b510      	push	{r4, lr}
 800264a:	4604      	mov	r4, r0
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <_ZN14StateMachine01D1Ev+0x20>)
 800264e:	6003      	str	r3, [r0, #0]
      _M_length(size_type __length)
      { _M_string_length = __length; }

      pointer
      _M_data() const
      { return _M_dataplus._M_p; }
 8002650:	6980      	ldr	r0, [r0, #24]

      const_pointer
      _M_local_data() const
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8002652:	f104 0320 	add.w	r3, r4, #32
      _M_create(size_type&, size_type);

      void
      _M_dispose()
      {
	if (!_M_is_local())
 8002656:	4298      	cmp	r0, r3
 8002658:	d001      	beq.n	800265e <_ZN14StateMachine01D1Ev+0x16>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 800265a:	f000 ff55 	bl	8003508 <_ZdlPv>
 800265e:	4620      	mov	r0, r4
 8002660:	f000 fae4 	bl	8002c2c <_ZN10XFBehaviorD1Ev>
{

}
 8002664:	4620      	mov	r0, r4
 8002666:	bd10      	pop	{r4, pc}
 8002668:	08004f00 	.word	0x08004f00

0800266c <_ZN14StateMachine01D0Ev>:
StateMachine01::~StateMachine01()
 800266c:	b510      	push	{r4, lr}
 800266e:	4604      	mov	r4, r0
}
 8002670:	f7ff ffea 	bl	8002648 <_ZN14StateMachine01D1Ev>
 8002674:	2130      	movs	r1, #48	; 0x30
 8002676:	4620      	mov	r0, r4
 8002678:	f000 ff48 	bl	800350c <_ZdlPvj>
 800267c:	4620      	mov	r0, r4
 800267e:	bd10      	pop	{r4, pc}

08002680 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8002680:	b570      	push	{r4, r5, r6, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	4605      	mov	r5, r0
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8002686:	460e      	mov	r6, r1
 8002688:	b161      	cbz	r1, 80026a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x24>
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 800268a:	1b94      	subs	r4, r2, r6
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800268c:	9401      	str	r4, [sp, #4]

	if (__dnew > size_type(_S_local_capacity))
 800268e:	2c0f      	cmp	r4, #15
 8002690:	d80d      	bhi.n	80026ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2e>
      { return _M_dataplus._M_p; }
 8002692:	6828      	ldr	r0, [r5, #0]
      // When __n = 1 way faster than the general multichar
      // traits_type::copy/move/assign.
      static void
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
	if (__n == 1)
 8002694:	2c01      	cmp	r4, #1
 8002696:	d013      	beq.n	80026c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x40>
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
	if (__n == 0)
 8002698:	b1a4      	cbz	r4, 80026c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>
	  return __s1;
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 800269a:	4622      	mov	r2, r4
 800269c:	4631      	mov	r1, r6
 800269e:	f001 fa03 	bl	8003aa8 <memcpy>
 80026a2:	e00f      	b.n	80026c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 80026a4:	4291      	cmp	r1, r2
 80026a6:	d0f0      	beq.n	800268a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0xa>
	  std::__throw_logic_error(__N("basic_string::"
 80026a8:	480a      	ldr	r0, [pc, #40]	; (80026d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x54>)
 80026aa:	f000 ff63 	bl	8003574 <_ZSt19__throw_logic_errorPKc>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 80026ae:	2200      	movs	r2, #0
 80026b0:	a901      	add	r1, sp, #4
 80026b2:	4628      	mov	r0, r5
 80026b4:	f001 f81c 	bl	80036f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_dataplus._M_p = __p; }
 80026b8:	6028      	str	r0, [r5, #0]
	    _M_capacity(__dnew);
 80026ba:	9b01      	ldr	r3, [sp, #4]
      { _M_allocated_capacity = __capacity; }
 80026bc:	60ab      	str	r3, [r5, #8]
 80026be:	e7e8      	b.n	8002692 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
      { __c1 = __c2; }
 80026c0:	7833      	ldrb	r3, [r6, #0]
 80026c2:	7003      	strb	r3, [r0, #0]
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 80026c4:	9b01      	ldr	r3, [sp, #4]
      { _M_string_length = __length; }
 80026c6:	606b      	str	r3, [r5, #4]
      { return _M_dataplus._M_p; }
 80026c8:	682a      	ldr	r2, [r5, #0]
 80026ca:	2100      	movs	r1, #0
 80026cc:	54d1      	strb	r1, [r2, r3]
      }
 80026ce:	b002      	add	sp, #8
 80026d0:	bd70      	pop	{r4, r5, r6, pc}
 80026d2:	bf00      	nop
 80026d4:	08005028 	.word	0x08005028

080026d8 <_ZN14StateMachine01C1EiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
StateMachine01::StateMachine01(int repeatInterval, string text)
 80026d8:	b570      	push	{r4, r5, r6, lr}
 80026da:	4604      	mov	r4, r0
 80026dc:	460e      	mov	r6, r1
 80026de:	4615      	mov	r5, r2
   text_(text)
 80026e0:	f000 fa98 	bl	8002c14 <_ZN10XFBehaviorC1Ev>
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <_ZN14StateMachine01C1EiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>)
 80026e6:	6023      	str	r3, [r4, #0]
 80026e8:	6166      	str	r6, [r4, #20]
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 80026ea:	f104 0320 	add.w	r3, r4, #32
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 80026ee:	61a3      	str	r3, [r4, #24]
      { return _M_dataplus._M_p; }
 80026f0:	6829      	ldr	r1, [r5, #0]

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
 80026f2:	686a      	ldr	r2, [r5, #4]
          _M_construct(__beg, __end, _Tag());
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	440a      	add	r2, r1
 80026fa:	f104 0018 	add.w	r0, r4, #24
 80026fe:	f7ff ffbf 	bl	8002680 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	currentState_ = STATE_INITIAL;
 8002702:	2301      	movs	r3, #1
 8002704:	7423      	strb	r3, [r4, #16]
}
 8002706:	4620      	mov	r0, r4
 8002708:	bd70      	pop	{r4, r5, r6, pc}
 800270a:	bf00      	nop
 800270c:	08004f00 	.word	0x08004f00

08002710 <_ZN14StateMachine0112processEventEv>:

XFEventStatus StateMachine01::processEvent()
{
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002712:	b087      	sub	sp, #28
 8002714:	4604      	mov	r4, r0
	eEventStatus eventStatus = XFEventStatus::Unknown;

	switch (currentState_)
 8002716:	7c05      	ldrb	r5, [r0, #16]
 8002718:	2d01      	cmp	r5, #1
 800271a:	d005      	beq.n	8002728 <_ZN14StateMachine0112processEventEv+0x18>
 800271c:	2d02      	cmp	r5, #2
 800271e:	d01b      	beq.n	8002758 <_ZN14StateMachine0112processEventEv+0x48>
 8002720:	2500      	movs	r5, #0
	default:
		break;
	}

	return eventStatus;
}
 8002722:	4628      	mov	r0, r5
 8002724:	b007      	add	sp, #28
 8002726:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (getCurrentEvent()->getEventType() == XFEvent::Initial)
 8002728:	f000 fa81 	bl	8002c2e <_ZNK10XFBehavior15getCurrentEventEv>

    /** \brief Returns the type of the event.
     *
     * Can be used to distinguish between an event or a timeout.
     */
    inline XFEventType getEventType() const { return eventType_; }
 800272c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d001      	beq.n	8002738 <_ZN14StateMachine0112processEventEv+0x28>
	eEventStatus eventStatus = XFEventStatus::Unknown;
 8002734:	2500      	movs	r5, #0
 8002736:	e7f4      	b.n	8002722 <_ZN14StateMachine0112processEventEv+0x12>
				GEN(XFDefaultTransition());
 8002738:	6823      	ldr	r3, [r4, #0]
 800273a:	68df      	ldr	r7, [r3, #12]
 800273c:	2010      	movs	r0, #16
 800273e:	f000 fef6 	bl	800352e <_Znwj>
 8002742:	4606      	mov	r6, r0
 8002744:	2100      	movs	r1, #0
 8002746:	f000 faa7 	bl	8002c98 <_ZN19XFDefaultTransitionC1EPN9interface10XFBehaviorE>
 800274a:	2200      	movs	r2, #0
 800274c:	4631      	mov	r1, r6
 800274e:	4620      	mov	r0, r4
 8002750:	47b8      	blx	r7
				currentState_ = STATE_SAY_HELLO;
 8002752:	2302      	movs	r3, #2
 8002754:	7423      	strb	r3, [r4, #16]
				eventStatus = XFEventStatus::Consumed;
 8002756:	e7e4      	b.n	8002722 <_ZN14StateMachine0112processEventEv+0x12>
			if (getCurrentEvent()->getEventType() == XFEvent::DefaultTransition ||
 8002758:	f000 fa69 	bl	8002c2e <_ZNK10XFBehavior15getCurrentEventEv>
 800275c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d010      	beq.n	8002786 <_ZN14StateMachine0112processEventEv+0x76>
				(getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8002764:	4620      	mov	r0, r4
 8002766:	f000 fa62 	bl	8002c2e <_ZNK10XFBehavior15getCurrentEventEv>
 800276a:	f990 3004 	ldrsb.w	r3, [r0, #4]
			if (getCurrentEvent()->getEventType() == XFEvent::DefaultTransition ||
 800276e:	2b04      	cmp	r3, #4
 8002770:	d001      	beq.n	8002776 <_ZN14StateMachine0112processEventEv+0x66>
	eEventStatus eventStatus = XFEventStatus::Unknown;
 8002772:	2500      	movs	r5, #0
 8002774:	e7d5      	b.n	8002722 <_ZN14StateMachine0112processEventEv+0x12>
				 getCurrentTimeout()->getId() == Timeout_SAY_HELLO_id))
 8002776:	4620      	mov	r0, r4
 8002778:	f000 fa5d 	bl	8002c36 <_ZN10XFBehavior17getCurrentTimeoutEv>
    /** \brief Sets pointer to behavioral class (see #pBehavior_).
     * Sets the behavior in which the event should be executed.
     */
    inline void setBehavior(interface::XFBehavior * pBehavior) { pBehavior_ = pBehavior; }

    inline int getId() const { return id_; }		///< Returns #id_ identifying the event in the behaviors context.
 800277c:	6883      	ldr	r3, [r0, #8]
				(getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 800277e:	2b01      	cmp	r3, #1
 8002780:	d001      	beq.n	8002786 <_ZN14StateMachine0112processEventEv+0x76>
	eEventStatus eventStatus = XFEventStatus::Unknown;
 8002782:	2500      	movs	r5, #0
 8002784:	e7cd      	b.n	8002722 <_ZN14StateMachine0112processEventEv+0x12>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8002786:	ad02      	add	r5, sp, #8
 8002788:	9500      	str	r5, [sp, #0]
      { return _M_dataplus._M_p; }
 800278a:	69a1      	ldr	r1, [r4, #24]
      { return _M_string_length; }
 800278c:	69e2      	ldr	r2, [r4, #28]
          _M_construct(__beg, __end, _Tag());
 800278e:	f04f 0300 	mov.w	r3, #0
 8002792:	440a      	add	r2, r1
 8002794:	4668      	mov	r0, sp
 8002796:	f7ff ff73 	bl	8002680 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
					Trace::out(getText());
 800279a:	4668      	mov	r0, sp
 800279c:	f000 f8b8 	bl	8002910 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
      { return _M_dataplus._M_p; }
 80027a0:	9800      	ldr	r0, [sp, #0]
	if (!_M_is_local())
 80027a2:	42a8      	cmp	r0, r5
 80027a4:	d001      	beq.n	80027aa <_ZN14StateMachine0112processEventEv+0x9a>
 80027a6:	f000 feaf 	bl	8003508 <_ZdlPv>
    ~StateMachine01() override;

protected:
    XFEventStatus processEvent() override;								///< Remplementation from XFBehavior

    inline int getRepeatInterval() const { return repeatInterval_; }	///< Returns repeat interval. Accessor for #_repeatInterval.
 80027aa:	6966      	ldr	r6, [r4, #20]
     *
     * Will work only if the current event is of type IXFEvent::Timeout.
     */
    const XFTimeout * getCurrentTimeout();

    inline void scheduleTimeout(int timeoutId, int interval) { getDispatcher()->scheduleTimeout(timeoutId, interval, this); }	///< @brief Schedules a timeout for this state machine.
 80027ac:	4620      	mov	r0, r4
 80027ae:	f000 fa40 	bl	8002c32 <_ZN10XFBehavior13getDispatcherEv>
 80027b2:	6803      	ldr	r3, [r0, #0]
 80027b4:	68dd      	ldr	r5, [r3, #12]
 80027b6:	4623      	mov	r3, r4
 80027b8:	4632      	mov	r2, r6
 80027ba:	2101      	movs	r1, #1
 80027bc:	47a8      	blx	r5
				currentState_ = STATE_SAY_HELLO;
 80027be:	2302      	movs	r3, #2
 80027c0:	7423      	strb	r3, [r4, #16]
				eventStatus = XFEventStatus::Consumed;
 80027c2:	2501      	movs	r5, #1
 80027c4:	e7ad      	b.n	8002722 <_ZN14StateMachine0112processEventEv+0x12>

080027c6 <Factory_initialize>:
#include "testfactory01.h"

void Factory_initialize()
{
    TestFactory01::initialize();
}
 80027c6:	4770      	bx	lr

080027c8 <_ZN13TestFactory015buildEv>:
{
}

// static
void TestFactory01::build()
{
 80027c8:	b510      	push	{r4, lr}
    Trace::out("Starting test1...");
 80027ca:	4807      	ldr	r0, [pc, #28]	; (80027e8 <_ZN13TestFactory015buildEv+0x20>)
 80027cc:	f000 f8f4 	bl	80029b8 <_ZN5Trace3outEPKcz>
    Trace::out("---------------------");
 80027d0:	4806      	ldr	r0, [pc, #24]	; (80027ec <_ZN13TestFactory015buildEv+0x24>)
 80027d2:	f000 f8f1 	bl	80029b8 <_ZN5Trace3outEPKcz>

    // Start state machine
    task01_.startBehavior();
 80027d6:	4c06      	ldr	r4, [pc, #24]	; (80027f0 <_ZN13TestFactory015buildEv+0x28>)
 80027d8:	4620      	mov	r0, r4
 80027da:	f000 fa0b 	bl	8002bf4 <_ZN10XFBehavior13startBehaviorEv>
    task02_.startBehavior();
 80027de:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80027e2:	f000 fa07 	bl	8002bf4 <_ZN10XFBehavior13startBehaviorEv>
}
 80027e6:	bd10      	pop	{r4, pc}
 80027e8:	08005054 	.word	0x08005054
 80027ec:	08005068 	.word	0x08005068
 80027f0:	20000094 	.word	0x20000094

080027f4 <Factory_build>:
{
 80027f4:	b508      	push	{r3, lr}
    TestFactory01::build();
 80027f6:	f7ff ffe7 	bl	80027c8 <_ZN13TestFactory015buildEv>
}
 80027fa:	bd08      	pop	{r3, pc}

080027fc <_Z41__static_initialization_and_destruction_0ii>:
}
 80027fc:	b530      	push	{r4, r5, lr}
 80027fe:	b08f      	sub	sp, #60	; 0x3c
 8002800:	4604      	mov	r4, r0
 8002802:	460d      	mov	r5, r1
 8002804:	2801      	cmp	r0, #1
 8002806:	d006      	beq.n	8002816 <_Z41__static_initialization_and_destruction_0ii+0x1a>
StateMachine01 TestFactory01::task02_(500, "Echo");
 8002808:	b91c      	cbnz	r4, 8002812 <_Z41__static_initialization_and_destruction_0ii+0x16>
 800280a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800280e:	429d      	cmp	r5, r3
 8002810:	d028      	beq.n	8002864 <_Z41__static_initialization_and_destruction_0ii+0x68>
}
 8002812:	b00f      	add	sp, #60	; 0x3c
 8002814:	bd30      	pop	{r4, r5, pc}
 8002816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800281a:	4299      	cmp	r1, r3
 800281c:	d1f4      	bne.n	8002808 <_Z41__static_initialization_and_destruction_0ii+0xc>
StateMachine01 TestFactory01::task01_(1000, "Say Hello");
 800281e:	aa06      	add	r2, sp, #24
 8002820:	4915      	ldr	r1, [pc, #84]	; (8002878 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002822:	4668      	mov	r0, sp
 8002824:	f001 f89e 	bl	8003964 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002828:	466a      	mov	r2, sp
 800282a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800282e:	4813      	ldr	r0, [pc, #76]	; (800287c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002830:	f7ff ff52 	bl	80026d8 <_ZN14StateMachine01C1EiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
      { return _M_dataplus._M_p; }
 8002834:	9800      	ldr	r0, [sp, #0]
	if (!_M_is_local())
 8002836:	ab02      	add	r3, sp, #8
 8002838:	4298      	cmp	r0, r3
 800283a:	d001      	beq.n	8002840 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800283c:	f000 fe64 	bl	8003508 <_ZdlPv>
StateMachine01 TestFactory01::task02_(500, "Echo");
 8002840:	aa0d      	add	r2, sp, #52	; 0x34
 8002842:	490f      	ldr	r1, [pc, #60]	; (8002880 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002844:	a807      	add	r0, sp, #28
 8002846:	f001 f88d 	bl	8003964 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800284a:	aa07      	add	r2, sp, #28
 800284c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002850:	480c      	ldr	r0, [pc, #48]	; (8002884 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002852:	f7ff ff41 	bl	80026d8 <_ZN14StateMachine01C1EiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
      { return _M_dataplus._M_p; }
 8002856:	9807      	ldr	r0, [sp, #28]
	if (!_M_is_local())
 8002858:	ab09      	add	r3, sp, #36	; 0x24
 800285a:	4298      	cmp	r0, r3
 800285c:	d0d4      	beq.n	8002808 <_Z41__static_initialization_and_destruction_0ii+0xc>
 800285e:	f000 fe53 	bl	8003508 <_ZdlPv>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8002862:	e7d1      	b.n	8002808 <_Z41__static_initialization_and_destruction_0ii+0xc>
 8002864:	4c05      	ldr	r4, [pc, #20]	; (800287c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002866:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800286a:	f7ff feed 	bl	8002648 <_ZN14StateMachine01D1Ev>
StateMachine01 TestFactory01::task01_(1000, "Say Hello");
 800286e:	4620      	mov	r0, r4
 8002870:	f7ff feea 	bl	8002648 <_ZN14StateMachine01D1Ev>
}
 8002874:	e7cd      	b.n	8002812 <_Z41__static_initialization_and_destruction_0ii+0x16>
 8002876:	bf00      	nop
 8002878:	08005080 	.word	0x08005080
 800287c:	20000094 	.word	0x20000094
 8002880:	0800508c 	.word	0x0800508c
 8002884:	200000c4 	.word	0x200000c4

08002888 <_GLOBAL__sub_I_Factory_initialize>:
 8002888:	b508      	push	{r3, lr}
 800288a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800288e:	2001      	movs	r0, #1
 8002890:	f7ff ffb4 	bl	80027fc <_Z41__static_initialization_and_destruction_0ii>
 8002894:	bd08      	pop	{r3, pc}

08002896 <_GLOBAL__sub_D_Factory_initialize>:
 8002896:	b508      	push	{r3, lr}
 8002898:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800289c:	2000      	movs	r0, #0
 800289e:	f7ff ffad 	bl	80027fc <_Z41__static_initialization_and_destruction_0ii>
 80028a2:	bd08      	pop	{r3, pc}

080028a4 <_ZL10traceMutexv>:
static XFMutex * mutex = XFMutex::create();

static interface::XFMutex & traceMutex()
{
    return *mutex;
}
 80028a4:	4b01      	ldr	r3, [pc, #4]	; (80028ac <_ZL10traceMutexv+0x8>)
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	200000f4 	.word	0x200000f4

080028b0 <_ZL14traceMutexLockv>:

static void traceMutexLock()
{
 80028b0:	b508      	push	{r3, lr}
    traceMutex().lock();
 80028b2:	f7ff fff7 	bl	80028a4 <_ZL10traceMutexv>
 80028b6:	6803      	ldr	r3, [r0, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	4798      	blx	r3
}
 80028bc:	bd08      	pop	{r3, pc}

080028be <_ZL16traceMutexUnlockv>:

static void traceMutexUnlock()
{
 80028be:	b508      	push	{r3, lr}
    traceMutex().unlock();
 80028c0:	f7ff fff0 	bl	80028a4 <_ZL10traceMutexv>
 80028c4:	6803      	ldr	r3, [r0, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4798      	blx	r3
}
 80028ca:	bd08      	pop	{r3, pc}

080028cc <_ZL17checkStringEndingPcm>:
	traceUart.initialize(TRACE_UART_BAUD_RATE);
}

static int32_t checkStringEnding(char * str, uint32_t len)
{
	if (!len)
 80028cc:	b1f1      	cbz	r1, 800290c <_ZL17checkStringEndingPcm+0x40>
{
 80028ce:	b510      	push	{r4, lr}
 80028d0:	460b      	mov	r3, r1
	{
		return 0;
	}

	if (str[len-1] != '\n')
 80028d2:	1e4a      	subs	r2, r1, #1
 80028d4:	1884      	adds	r4, r0, r2
 80028d6:	5c81      	ldrb	r1, [r0, r2]
 80028d8:	290a      	cmp	r1, #10
 80028da:	d00a      	beq.n	80028f2 <_ZL17checkStringEndingPcm+0x26>
	{
#if (TRACE_ADD_CRLF_SEQU != 0)
		// Add "\r\n" at the end of the string
		str[len] = '\r';
 80028dc:	220d      	movs	r2, #13
 80028de:	54c2      	strb	r2, [r0, r3]
		str[len+1] = '\n';
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	210a      	movs	r1, #10
 80028e4:	5481      	strb	r1, [r0, r2]
		str[len+2] = '\0';
 80028e6:	3302      	adds	r3, #2
 80028e8:	2200      	movs	r2, #0
 80028ea:	54c2      	strb	r2, [r0, r3]
			memmove(&str[len], &str[len-1], 2);
			str[len-1] = '\r';
		}
	}
#endif // TRACE_ADD_CRLF_SEQU
	return strlen(str);
 80028ec:	f7fd fce0 	bl	80002b0 <strlen>
}
 80028f0:	bd10      	pop	{r4, pc}
		if (len == 1 ||
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d005      	beq.n	8002902 <_ZL17checkStringEndingPcm+0x36>
 80028f6:	d9f9      	bls.n	80028ec <_ZL17checkStringEndingPcm+0x20>
			(len >= 2 && str[len-2] != '\r'))
 80028f8:	18c1      	adds	r1, r0, r3
 80028fa:	f811 1c02 	ldrb.w	r1, [r1, #-2]
 80028fe:	290d      	cmp	r1, #13
 8002900:	d0f4      	beq.n	80028ec <_ZL17checkStringEndingPcm+0x20>
			memmove(&str[len], &str[len-1], 2);
 8002902:	8821      	ldrh	r1, [r4, #0]
 8002904:	52c1      	strh	r1, [r0, r3]
			str[len-1] = '\r';
 8002906:	230d      	movs	r3, #13
 8002908:	5483      	strb	r3, [r0, r2]
 800290a:	e7ef      	b.n	80028ec <_ZL17checkStringEndingPcm+0x20>
		return 0;
 800290c:	2000      	movs	r0, #0
}
 800290e:	4770      	bx	lr

08002910 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Trace::out(string str)
{
 8002910:	b570      	push	{r4, r5, r6, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	4604      	mov	r4, r0
	traceMutexLock();
 8002916:	f7ff ffcb 	bl	80028b0 <_ZL14traceMutexLockv>
      { return _M_string_length; }
 800291a:	6863      	ldr	r3, [r4, #4]
	if (str[str.length()-1] != '\n')
 800291c:	3b01      	subs	r3, #1
      { return _M_dataplus._M_p; }
 800291e:	6822      	ldr	r2, [r4, #0]
 8002920:	5cd3      	ldrb	r3, [r2, r3]
 8002922:	2b0a      	cmp	r3, #10
 8002924:	d10e      	bne.n	8002944 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>
      { return _M_string_length; }
 8002926:	6861      	ldr	r1, [r4, #4]
	{
		str += '\n';
	}

#if defined(TRACE_ADD_CRLF_SEQU) && (TRACE_ADD_CRLF_SEQU != 0)
	if(str[str.length()-2] != '\r'){
 8002928:	1e8b      	subs	r3, r1, #2
      { return _M_dataplus._M_p; }
 800292a:	6822      	ldr	r2, [r4, #0]
 800292c:	5cd3      	ldrb	r3, [r2, r3]
 800292e:	2b0d      	cmp	r3, #13
 8002930:	d125      	bne.n	800297e <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e>
		str.insert(str.length()-1, "\r");
	}
#endif // TRACE_ADD_CRLF_SEQU

	traceUart.write(str.data(), str.length());
 8002932:	6862      	ldr	r2, [r4, #4]
 8002934:	6821      	ldr	r1, [r4, #0]
 8002936:	481c      	ldr	r0, [pc, #112]	; (80029a8 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x98>)
 8002938:	f000 f910 	bl	8002b5c <_ZN4Uart5writeEPKcj>
	traceMutexUnlock();
 800293c:	f7ff ffbf 	bl	80028be <_ZL16traceMutexUnlockv>
}
 8002940:	b002      	add	sp, #8
 8002942:	bd70      	pop	{r4, r5, r6, pc}
      { return _M_string_length; }
 8002944:	6866      	ldr	r6, [r4, #4]
       */
      void
      push_back(_CharT __c)
      {
	const size_type __size = this->size();
	if (__size + 1 > this->capacity())
 8002946:	1c75      	adds	r5, r6, #1
      { return _M_dataplus._M_p; }
 8002948:	4623      	mov	r3, r4
 800294a:	f853 2b08 	ldr.w	r2, [r3], #8
	return _M_is_local() ? size_type(_S_local_capacity)
 800294e:	429a      	cmp	r2, r3
 8002950:	d00a      	beq.n	8002968 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x58>
 8002952:	68a3      	ldr	r3, [r4, #8]
	if (__size + 1 > this->capacity())
 8002954:	429d      	cmp	r5, r3
 8002956:	d809      	bhi.n	800296c <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>
      { return _M_dataplus._M_p; }
 8002958:	6823      	ldr	r3, [r4, #0]
 800295a:	220a      	movs	r2, #10
 800295c:	559a      	strb	r2, [r3, r6]
      { _M_string_length = __length; }
 800295e:	6065      	str	r5, [r4, #4]
      { return _M_dataplus._M_p; }
 8002960:	6823      	ldr	r3, [r4, #0]
 8002962:	2200      	movs	r2, #0
 8002964:	555a      	strb	r2, [r3, r5]
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
	traits_type::assign(this->_M_data()[__size], __c);
	this->_M_set_length(__size + 1);
      }
 8002966:	e7de      	b.n	8002926 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16>
	return _M_is_local() ? size_type(_S_local_capacity)
 8002968:	230f      	movs	r3, #15
 800296a:	e7f3      	b.n	8002954 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44>
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
 800296c:	2301      	movs	r3, #1
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	2300      	movs	r3, #0
 8002972:	461a      	mov	r2, r3
 8002974:	4631      	mov	r1, r6
 8002976:	4620      	mov	r0, r4
 8002978:	f000 ff16 	bl	80037a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800297c:	e7ec      	b.n	8002958 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x48>
		str.insert(str.length()-1, "\r");
 800297e:	3901      	subs	r1, #1
      { return _M_string_length; }
 8002980:	6862      	ldr	r2, [r4, #4]
	if (__pos > this->size())
 8002982:	4291      	cmp	r1, r2
 8002984:	d809      	bhi.n	800299a <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8a>
	return __testoff ? __off : this->size() - __pos;
 8002986:	1a52      	subs	r2, r2, r1
 8002988:	d000      	beq.n	800298c <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7c>
 800298a:	2200      	movs	r2, #0
      replace(size_type __pos, size_type __n1, const _CharT* __s,
	      size_type __n2)
      {
	__glibcxx_requires_string_len(__s, __n2);
	return _M_replace(_M_check(__pos, "basic_string::replace"),
			  _M_limit(__pos, __n1), __s, __n2);
 800298c:	2301      	movs	r3, #1
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c>)
 8002992:	4620      	mov	r0, r4
 8002994:	f000 ff44 	bl	8003820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
			     traits_type::length(__s));
 8002998:	e7cb      	b.n	8002932 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22>
	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
 800299a:	4613      	mov	r3, r2
 800299c:	460a      	mov	r2, r1
 800299e:	4904      	ldr	r1, [pc, #16]	; (80029b0 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa0>)
 80029a0:	4804      	ldr	r0, [pc, #16]	; (80029b4 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa4>)
 80029a2:	f000 fded 	bl	8003580 <_ZSt24__throw_out_of_range_fmtPKcz>
 80029a6:	bf00      	nop
 80029a8:	200001f8 	.word	0x200001f8
 80029ac:	080050e4 	.word	0x080050e4
 80029b0:	08005094 	.word	0x08005094
 80029b4:	080050ac 	.word	0x080050ac

080029b8 <_ZN5Trace3outEPKcz>:

void Trace::out(const char * format, ...)
{
 80029b8:	b40f      	push	{r0, r1, r2, r3}
 80029ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029bc:	b083      	sub	sp, #12
 80029be:	ad08      	add	r5, sp, #32
 80029c0:	f855 7b04 	ldr.w	r7, [r5], #4
	traceMutexLock();
 80029c4:	f7ff ff74 	bl	80028b0 <_ZL14traceMutexLockv>
	va_list args;

	// Format string
	va_start(args, format);
 80029c8:	9501      	str	r5, [sp, #4]
	vsprintf(strTrace, format, args);
 80029ca:	4e0d      	ldr	r6, [pc, #52]	; (8002a00 <_ZN5Trace3outEPKcz+0x48>)
 80029cc:	1d34      	adds	r4, r6, #4
 80029ce:	462a      	mov	r2, r5
 80029d0:	4639      	mov	r1, r7
 80029d2:	4620      	mov	r0, r4
 80029d4:	f001 fc9a 	bl	800430c <vsiprintf>
	va_end(args);

	checkStringEnding(strTrace, strlen(strTrace));
 80029d8:	4620      	mov	r0, r4
 80029da:	f7fd fc69 	bl	80002b0 <strlen>
 80029de:	4601      	mov	r1, r0
 80029e0:	4620      	mov	r0, r4
 80029e2:	f7ff ff73 	bl	80028cc <_ZL17checkStringEndingPcm>

	traceUart.write(strTrace);
 80029e6:	2200      	movs	r2, #0
 80029e8:	4621      	mov	r1, r4
 80029ea:	f506 7082 	add.w	r0, r6, #260	; 0x104
 80029ee:	f000 f8b5 	bl	8002b5c <_ZN4Uart5writeEPKcj>
	traceMutexUnlock();
 80029f2:	f7ff ff64 	bl	80028be <_ZL16traceMutexUnlockv>
}
 80029f6:	b003      	add	sp, #12
 80029f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80029fc:	b004      	add	sp, #16
 80029fe:	4770      	bx	lr
 8002a00:	200000f4 	.word	0x200000f4

08002a04 <_Z41__static_initialization_and_destruction_0ii>:

//static
void Trace::unlock()
{
    traceMutexUnlock();
}
 8002a04:	b570      	push	{r4, r5, r6, lr}
 8002a06:	4604      	mov	r4, r0
 8002a08:	460d      	mov	r5, r1
 8002a0a:	2801      	cmp	r0, #1
 8002a0c:	d005      	beq.n	8002a1a <_Z41__static_initialization_and_destruction_0ii+0x16>
static XFMutex * mutex = XFMutex::create();
 8002a0e:	b91c      	cbnz	r4, 8002a18 <_Z41__static_initialization_and_destruction_0ii+0x14>
 8002a10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a14:	429d      	cmp	r5, r3
 8002a16:	d010      	beq.n	8002a3a <_Z41__static_initialization_and_destruction_0ii+0x36>
}
 8002a18:	bd70      	pop	{r4, r5, r6, pc}
 8002a1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a1e:	4299      	cmp	r1, r3
 8002a20:	d1f5      	bne.n	8002a0e <_Z41__static_initialization_and_destruction_0ii+0xa>
static Uart traceUart(TRACE_UART_CONSTRUCTOR_PARAMETERS);
 8002a22:	4e08      	ldr	r6, [pc, #32]	; (8002a44 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002a24:	2300      	movs	r3, #0
 8002a26:	4a08      	ldr	r2, [pc, #32]	; (8002a48 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f506 7082 	add.w	r0, r6, #260	; 0x104
 8002a2e:	f000 f849 	bl	8002ac4 <_ZN4UartC1EhP20__UART_HandleTypeDefb>
static XFMutex * mutex = XFMutex::create();
 8002a32:	f000 fd1b 	bl	800346c <_ZN9interface7XFMutex6createEv>
 8002a36:	6030      	str	r0, [r6, #0]
 8002a38:	e7e9      	b.n	8002a0e <_Z41__static_initialization_and_destruction_0ii+0xa>
static Uart traceUart(TRACE_UART_CONSTRUCTOR_PARAMETERS);
 8002a3a:	4804      	ldr	r0, [pc, #16]	; (8002a4c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002a3c:	f000 f83a 	bl	8002ab4 <_ZN4UartD1Ev>
}
 8002a40:	e7ea      	b.n	8002a18 <_Z41__static_initialization_and_destruction_0ii+0x14>
 8002a42:	bf00      	nop
 8002a44:	200000f4 	.word	0x200000f4
 8002a48:	2000039c 	.word	0x2000039c
 8002a4c:	200001f8 	.word	0x200001f8

08002a50 <_GLOBAL__sub_I_trace_initialize>:
 8002a50:	b508      	push	{r3, lr}
 8002a52:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002a56:	2001      	movs	r0, #1
 8002a58:	f7ff ffd4 	bl	8002a04 <_Z41__static_initialization_and_destruction_0ii>
 8002a5c:	bd08      	pop	{r3, pc}

08002a5e <_GLOBAL__sub_D_trace_initialize>:
 8002a5e:	b508      	push	{r3, lr}
 8002a60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002a64:	2000      	movs	r0, #0
 8002a66:	f7ff ffcd 	bl	8002a04 <_Z41__static_initialization_and_destruction_0ii>
 8002a6a:	bd08      	pop	{r3, pc}

08002a6c <_Z5inISRv>:

int inISR()
{
	// Variable must be put to TRUE in every ISR to indicate execution
	// of an ISR and need to put back to FALSE before leaving ISR.
	return bInISR;
 8002a6c:	4b01      	ldr	r3, [pc, #4]	; (8002a74 <_Z5inISRv+0x8>)
 8002a6e:	6818      	ldr	r0, [r3, #0]
}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000288 	.word	0x20000288

08002a78 <_Z13enterCriticalv>:

void enterCritical()
{
 8002a78:	b508      	push	{r3, lr}
	// Only disable interrupts when not calling from an ISR
	if (!inISR())
 8002a7a:	f7ff fff7 	bl	8002a6c <_Z5inISRv>
 8002a7e:	b938      	cbnz	r0, 8002a90 <_Z13enterCriticalv+0x18>
	{
		if (!bOMEnterCriticalRegionNested)
 8002a80:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <_Z13enterCriticalv+0x1c>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	b903      	cbnz	r3, 8002a88 <_Z13enterCriticalv+0x10>
 8002a86:	b672      	cpsid	i
		{
			// Turn off the priority configurable interrupts
		    __disable_irq();
		}
		bOMEnterCriticalRegionNested++;
 8002a88:	4a02      	ldr	r2, [pc, #8]	; (8002a94 <_Z13enterCriticalv+0x1c>)
 8002a8a:	6853      	ldr	r3, [r2, #4]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	6053      	str	r3, [r2, #4]
	}
}
 8002a90:	bd08      	pop	{r3, pc}
 8002a92:	bf00      	nop
 8002a94:	20000288 	.word	0x20000288

08002a98 <_Z12exitCriticalv>:

void exitCritical()
{
 8002a98:	b508      	push	{r3, lr}
	// Only enable interrupts when not calling from an ISR
	if (!inISR())
 8002a9a:	f7ff ffe7 	bl	8002a6c <_Z5inISRv>
 8002a9e:	b930      	cbnz	r0, 8002aae <_Z12exitCriticalv+0x16>
	{
		bOMEnterCriticalRegionNested--;
 8002aa0:	4b03      	ldr	r3, [pc, #12]	; (8002ab0 <_Z12exitCriticalv+0x18>)
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	3a01      	subs	r2, #1
 8002aa6:	605a      	str	r2, [r3, #4]

		if (!bOMEnterCriticalRegionNested)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	b903      	cbnz	r3, 8002aae <_Z12exitCriticalv+0x16>
  __ASM volatile ("cpsie i" : : : "memory");
 8002aac:	b662      	cpsie	i
		{
			// Turn on the interrupts with configurable priority
		    __enable_irq();
		}
	}
}
 8002aae:	bd08      	pop	{r3, pc}
 8002ab0:	20000288 	.word	0x20000288

08002ab4 <_ZN4UartD1Ev>:
}

Uart::~Uart()
{

}
 8002ab4:	4770      	bx	lr

08002ab6 <_ZN4UartD0Ev>:
Uart::~Uart()
 8002ab6:	b510      	push	{r4, lr}
 8002ab8:	4604      	mov	r4, r0
}
 8002aba:	2190      	movs	r1, #144	; 0x90
 8002abc:	f000 fd26 	bl	800350c <_ZdlPvj>
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	bd10      	pop	{r4, pc}

08002ac4 <_ZN4UartC1EhP20__UART_HandleTypeDefb>:
Uart::Uart(const unsigned char uartNbr, UART_HandleTypeDef * uartHandle, bool bTxDMA /* = false */)
 8002ac4:	b510      	push	{r4, lr}
   _bTxDMA(bTxDMA)
 8002ac6:	4c0f      	ldr	r4, [pc, #60]	; (8002b04 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x40>)
 8002ac8:	6004      	str	r4, [r0, #0]
 8002aca:	24ff      	movs	r4, #255	; 0xff
 8002acc:	7104      	strb	r4, [r0, #4]
 8002ace:	2400      	movs	r4, #0
 8002ad0:	6084      	str	r4, [r0, #8]
 8002ad2:	7303      	strb	r3, [r0, #12]
	assert(uartNbr < UART_COUNT);
 8002ad4:	2902      	cmp	r1, #2
 8002ad6:	d809      	bhi.n	8002aec <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x28>
        if (!_sUart[uartNbr])
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x44>)
 8002ada:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ade:	b95b      	cbnz	r3, 8002af8 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x34>
            _sUart[uartNbr] = this;
 8002ae0:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x44>)
 8002ae2:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
            _uartNbr = uartNbr;
 8002ae6:	7101      	strb	r1, [r0, #4]
            _pUartHandle = uartHandle;
 8002ae8:	6082      	str	r2, [r0, #8]
}
 8002aea:	bd10      	pop	{r4, pc}
	assert(uartNbr < UART_COUNT);
 8002aec:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x48>)
 8002aee:	4a08      	ldr	r2, [pc, #32]	; (8002b10 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x4c>)
 8002af0:	2111      	movs	r1, #17
 8002af2:	4808      	ldr	r0, [pc, #32]	; (8002b14 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x50>)
 8002af4:	f000 ff6e 	bl	80039d4 <__assert_func>
            assert(false);  // Error: Instance for specified UART already exists.
 8002af8:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x54>)
 8002afa:	4a05      	ldr	r2, [pc, #20]	; (8002b10 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x4c>)
 8002afc:	211f      	movs	r1, #31
 8002afe:	4805      	ldr	r0, [pc, #20]	; (8002b14 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x50>)
 8002b00:	f000 ff68 	bl	80039d4 <__assert_func>
 8002b04:	08004f28 	.word	0x08004f28
 8002b08:	20000290 	.word	0x20000290
 8002b0c:	080050e8 	.word	0x080050e8
 8002b10:	08005100 	.word	0x08005100
 8002b14:	08005138 	.word	0x08005138
 8002b18:	08005180 	.word	0x08005180

08002b1c <_ZN4Uart13writeUsingDMAEPKhm>:
        writeUsingDMA((const uint8_t *)str, length);
    }
}

void Uart::writeUsingDMA(const uint8_t * str, uint32_t length)
{
 8002b1c:	b570      	push	{r4, r5, r6, lr}
    assert(length <= sizeof(_pTxDmaBuffer));
 8002b1e:	2a80      	cmp	r2, #128	; 0x80
 8002b20:	d80f      	bhi.n	8002b42 <_ZN4Uart13writeUsingDMAEPKhm+0x26>
 8002b22:	4605      	mov	r5, r0
 8002b24:	4614      	mov	r4, r2

    // Copy data to TX DMA buffer
    ::memcpy(_pTxDmaBuffer, str, length);
 8002b26:	f100 060d 	add.w	r6, r0, #13
 8002b2a:	4630      	mov	r0, r6
 8002b2c:	f000 ffbc 	bl	8003aa8 <memcpy>

    // Check that a Tx process is not already ongoing
    // (should never happen, but who knows!)
    while (_pUartHandle->gState != HAL_UART_STATE_READY)
 8002b30:	68a8      	ldr	r0, [r5, #8]
 8002b32:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d1fb      	bne.n	8002b30 <_ZN4Uart13writeUsingDMAEPKhm+0x14>
    { continue; }

    // Give data to TX DMA
    HAL_UART_Transmit_DMA(_pUartHandle, _pTxDmaBuffer, length);
 8002b38:	b2a2      	uxth	r2, r4
 8002b3a:	4631      	mov	r1, r6
 8002b3c:	f7ff f9a2 	bl	8001e84 <HAL_UART_Transmit_DMA>
}
 8002b40:	bd70      	pop	{r4, r5, r6, pc}
    assert(length <= sizeof(_pTxDmaBuffer));
 8002b42:	4b03      	ldr	r3, [pc, #12]	; (8002b50 <_ZN4Uart13writeUsingDMAEPKhm+0x34>)
 8002b44:	4a03      	ldr	r2, [pc, #12]	; (8002b54 <_ZN4Uart13writeUsingDMAEPKhm+0x38>)
 8002b46:	2150      	movs	r1, #80	; 0x50
 8002b48:	4803      	ldr	r0, [pc, #12]	; (8002b58 <_ZN4Uart13writeUsingDMAEPKhm+0x3c>)
 8002b4a:	f000 ff43 	bl	80039d4 <__assert_func>
 8002b4e:	bf00      	nop
 8002b50:	08005188 	.word	0x08005188
 8002b54:	080051a8 	.word	0x080051a8
 8002b58:	08005138 	.word	0x08005138

08002b5c <_ZN4Uart5writeEPKcj>:
{
 8002b5c:	b538      	push	{r3, r4, r5, lr}
 8002b5e:	4604      	mov	r4, r0
 8002b60:	460d      	mov	r5, r1
	if (!length)
 8002b62:	4610      	mov	r0, r2
 8002b64:	b912      	cbnz	r2, 8002b6c <_ZN4Uart5writeEPKcj+0x10>
		length = strlen(str);
 8002b66:	4608      	mov	r0, r1
 8002b68:	f7fd fba2 	bl	80002b0 <strlen>
    if (!_bTxDMA)
 8002b6c:	7b23      	ldrb	r3, [r4, #12]
 8002b6e:	b933      	cbnz	r3, 8002b7e <_ZN4Uart5writeEPKcj+0x22>
        HAL_UART_Transmit(_pUartHandle, (uint8_t *)str, length, 50);
 8002b70:	2332      	movs	r3, #50	; 0x32
 8002b72:	b282      	uxth	r2, r0
 8002b74:	4629      	mov	r1, r5
 8002b76:	68a0      	ldr	r0, [r4, #8]
 8002b78:	f7ff fca6 	bl	80024c8 <HAL_UART_Transmit>
}
 8002b7c:	bd38      	pop	{r3, r4, r5, pc}
        writeUsingDMA((const uint8_t *)str, length);
 8002b7e:	4602      	mov	r2, r0
 8002b80:	4629      	mov	r1, r5
 8002b82:	4620      	mov	r0, r4
 8002b84:	f7ff ffca 	bl	8002b1c <_ZN4Uart13writeUsingDMAEPKhm>
}
 8002b88:	e7f8      	b.n	8002b7c <_ZN4Uart5writeEPKcj+0x20>
	...

08002b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bc4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b92:	e003      	b.n	8002b9c <LoopCopyDataInit>

08002b94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b9a:	3104      	adds	r1, #4

08002b9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b9c:	480b      	ldr	r0, [pc, #44]	; (8002bcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b9e:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ba0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ba2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ba4:	d3f6      	bcc.n	8002b94 <CopyDataInit>
  ldr  r2, =_sbss
 8002ba6:	4a0b      	ldr	r2, [pc, #44]	; (8002bd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ba8:	e002      	b.n	8002bb0 <LoopFillZerobss>

08002baa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002baa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002bac:	f842 3b04 	str.w	r3, [r2], #4

08002bb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002bb0:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002bb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002bb4:	d3f9      	bcc.n	8002baa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bb6:	f7fe f941 	bl	8000e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bba:	f000 ff41 	bl	8003a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bbe:	f7fe f8a7 	bl	8000d10 <main>
  bx  lr    
 8002bc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bc4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002bc8:	080053d0 	.word	0x080053d0
  ldr  r0, =_sdata
 8002bcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002bd0:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002bd4:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002bd8:	20000430 	.word	0x20000430

08002bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bdc:	e7fe      	b.n	8002bdc <ADC_IRQHandler>

08002bde <_ZN10XFBehavior9pushEventEP7XFEventb>:
{
    GEN(XFInitialEvent);
}

void XFBehavior::pushEvent(XFEvent *pEvent, bool fromISR)
{
 8002bde:	b508      	push	{r3, lr}
    inline void setBehavior(interface::XFBehavior * pBehavior) { pBehavior_ = pBehavior; }
 8002be0:	60c8      	str	r0, [r1, #12]
    pEvent->setBehavior(this);
    pDispatcher_->pushEvent(pEvent, fromISR);
 8002be2:	6840      	ldr	r0, [r0, #4]
 8002be4:	6803      	ldr	r3, [r0, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4798      	blx	r3
}
 8002bea:	bd08      	pop	{r3, pc}

08002bec <_ZNK10XFBehavior17deleteOnTerminateEv>:

bool XFBehavior::deleteOnTerminate() const
{
    return deleteOnTerminate_;
}
 8002bec:	7a00      	ldrb	r0, [r0, #8]
 8002bee:	4770      	bx	lr

08002bf0 <_ZN10XFBehavior20setDeleteOnTerminateEb>:

void XFBehavior::setDeleteOnTerminate(bool deleteBehaviour)
{
    deleteOnTerminate_ = deleteBehaviour;
 8002bf0:	7201      	strb	r1, [r0, #8]
}
 8002bf2:	4770      	bx	lr

08002bf4 <_ZN10XFBehavior13startBehaviorEv>:
{
 8002bf4:	b570      	push	{r4, r5, r6, lr}
 8002bf6:	4604      	mov	r4, r0
    GEN(XFInitialEvent);
 8002bf8:	6803      	ldr	r3, [r0, #0]
 8002bfa:	68de      	ldr	r6, [r3, #12]
 8002bfc:	2010      	movs	r0, #16
 8002bfe:	f000 fc96 	bl	800352e <_Znwj>
 8002c02:	4605      	mov	r5, r0
 8002c04:	f000 f85c 	bl	8002cc0 <_ZN14XFInitialEventC1Ev>
 8002c08:	2200      	movs	r2, #0
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	47b0      	blx	r6
}
 8002c10:	bd70      	pop	{r4, r5, r6, pc}
	...

08002c14 <_ZN10XFBehaviorC1Ev>:
XFBehavior::XFBehavior()
 8002c14:	b510      	push	{r4, lr}
 8002c16:	4604      	mov	r4, r0
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <_ZN10XFBehaviorC1Ev+0x14>)
 8002c1a:	6003      	str	r3, [r0, #0]
    pDispatcher_ = interface::XFDispatcher::getInstance();
 8002c1c:	f000 f8b0 	bl	8002d80 <_ZN9interface12XFDispatcher11getInstanceEv>
 8002c20:	6060      	str	r0, [r4, #4]
}
 8002c22:	4620      	mov	r0, r4
 8002c24:	bd10      	pop	{r4, pc}
 8002c26:	bf00      	nop
 8002c28:	08004f38 	.word	0x08004f38

08002c2c <_ZN10XFBehaviorD1Ev>:
}
 8002c2c:	4770      	bx	lr

08002c2e <_ZNK10XFBehavior15getCurrentEventEv>:

const XFEvent *XFBehavior::getCurrentEvent() const
{
    return pCurrentEvent_;
}
 8002c2e:	68c0      	ldr	r0, [r0, #12]
 8002c30:	4770      	bx	lr

08002c32 <_ZN10XFBehavior13getDispatcherEv>:

interface::XFDispatcher *XFBehavior::getDispatcher()
{
    return pDispatcher_;
}
 8002c32:	6840      	ldr	r0, [r0, #4]
 8002c34:	4770      	bx	lr

08002c36 <_ZN10XFBehavior17getCurrentTimeoutEv>:

const XFTimeout *XFBehavior::getCurrentTimeout()
{
	return reinterpret_cast<const XFTimeout*>(pCurrentEvent_);
}
 8002c36:	68c0      	ldr	r0, [r0, #12]
 8002c38:	4770      	bx	lr

08002c3a <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>:

void XFBehavior::setCurrentEvent(const XFEvent *pEvent)
{
    pCurrentEvent_ = pEvent;
 8002c3a:	60c1      	str	r1, [r0, #12]
}
 8002c3c:	4770      	bx	lr

08002c3e <_ZN10XFBehavior7processEPK7XFEvent>:

XFBehavior::TerminateBehavior XFBehavior::process(const XFEvent *pEvent)
{
 8002c3e:	b570      	push	{r4, r5, r6, lr}
 8002c40:	4604      	mov	r4, r0
 8002c42:	460d      	mov	r5, r1
    setCurrentEvent(pEvent);
 8002c44:	f7ff fff9 	bl	8002c3a <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>
    XFEventStatus evStatus = processEvent();
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	4798      	blx	r3
 8002c50:	4606      	mov	r6, r0
    if(pEvent->deleteAfterConsume() &&
 8002c52:	682b      	ldr	r3, [r5, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	4628      	mov	r0, r5
 8002c58:	4798      	blx	r3
 8002c5a:	b110      	cbz	r0, 8002c62 <_ZN10XFBehavior7processEPK7XFEvent+0x24>
	/**
	 * Checks if both variables contain the same event status.
	 */
    bool operator == (const XFEventStatus::eEventStatus & eventStatus) const
	{
        return (this->status_ == eventStatus);
 8002c5c:	b2f3      	uxtb	r3, r6
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d009      	beq.n	8002c76 <_ZN10XFBehavior7processEPK7XFEvent+0x38>
            (evStatus == XFEventStatus::Consumed /*|| evStatus == XFEventStatus::Terminate*/)) {
    	delete pEvent;
    }
    return (deleteOnTerminate() && evStatus == XFEventStatus::Terminate);
 8002c62:	6823      	ldr	r3, [r4, #0]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	4620      	mov	r0, r4
 8002c68:	4798      	blx	r3
 8002c6a:	b118      	cbz	r0, 8002c74 <_ZN10XFBehavior7processEPK7XFEvent+0x36>
 8002c6c:	b2f6      	uxtb	r6, r6
 8002c6e:	2e08      	cmp	r6, #8
 8002c70:	d000      	beq.n	8002c74 <_ZN10XFBehavior7processEPK7XFEvent+0x36>
 8002c72:	2000      	movs	r0, #0
}
 8002c74:	bd70      	pop	{r4, r5, r6, pc}
    	delete pEvent;
 8002c76:	2d00      	cmp	r5, #0
 8002c78:	d0f3      	beq.n	8002c62 <_ZN10XFBehavior7processEPK7XFEvent+0x24>
 8002c7a:	682b      	ldr	r3, [r5, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4628      	mov	r0, r5
 8002c80:	4798      	blx	r3
 8002c82:	e7ee      	b.n	8002c62 <_ZN10XFBehavior7processEPK7XFEvent+0x24>

08002c84 <_ZNK19XFDefaultTransition18deleteAfterConsumeEv>:
}

bool XFDefaultTransition::deleteAfterConsume() const
{
    return true;
}
 8002c84:	2001      	movs	r0, #1
 8002c86:	4770      	bx	lr

08002c88 <_ZN19XFDefaultTransitionD1Ev>:
 * Represents a transition in a state machine having no trigger.
 *
 * In case one wants to directly transition from one state to
 * another (without a trigger) a default transition must be pushed.
 */
class XFDefaultTransition : public XFEvent
 8002c88:	4770      	bx	lr

08002c8a <_ZN19XFDefaultTransitionD0Ev>:
 8002c8a:	b510      	push	{r4, lr}
 8002c8c:	4604      	mov	r4, r0
 8002c8e:	2110      	movs	r1, #16
 8002c90:	f000 fc3c 	bl	800350c <_ZdlPvj>
 8002c94:	4620      	mov	r0, r4
 8002c96:	bd10      	pop	{r4, pc}

08002c98 <_ZN19XFDefaultTransitionC1EPN9interface10XFBehaviorE>:
    XFEvent(XFEventType eventType, int id, interface::XFBehavior * pBehavior) : eventType_(eventType), id_(id), pBehavior_(pBehavior) {}
 8002c98:	2202      	movs	r2, #2
 8002c9a:	7102      	strb	r2, [r0, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	6082      	str	r2, [r0, #8]
 8002ca0:	60c1      	str	r1, [r0, #12]
    :XFEvent(DefaultTransition, 0, pBehavior) // Prolly must be modified
 8002ca2:	4a01      	ldr	r2, [pc, #4]	; (8002ca8 <_ZN19XFDefaultTransitionC1EPN9interface10XFBehaviorE+0x10>)
 8002ca4:	6002      	str	r2, [r0, #0]
}
 8002ca6:	4770      	bx	lr
 8002ca8:	08004f60 	.word	0x08004f60

08002cac <_ZNK14XFInitialEvent18deleteAfterConsumeEv>:
}

bool XFInitialEvent::deleteAfterConsume() const
{
    return true;
}
 8002cac:	2001      	movs	r0, #1
 8002cae:	4770      	bx	lr

08002cb0 <_ZN14XFInitialEventD1Ev>:
 * @brief Initial event to start a behavior.
 *
 * Represents for example the first transition executed
 * in a state machine.
 */
class XFInitialEvent : public XFEvent
 8002cb0:	4770      	bx	lr

08002cb2 <_ZN14XFInitialEventD0Ev>:
 8002cb2:	b510      	push	{r4, lr}
 8002cb4:	4604      	mov	r4, r0
 8002cb6:	2110      	movs	r1, #16
 8002cb8:	f000 fc28 	bl	800350c <_ZdlPvj>
 8002cbc:	4620      	mov	r0, r4
 8002cbe:	bd10      	pop	{r4, pc}

08002cc0 <_ZN14XFInitialEventC1Ev>:
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	7102      	strb	r2, [r0, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	6082      	str	r2, [r0, #8]
 8002cc8:	60c2      	str	r2, [r0, #12]
    :XFEvent(XFEventType::Initial, 0, nullptr) // Prolly must be modified
 8002cca:	4a01      	ldr	r2, [pc, #4]	; (8002cd0 <_ZN14XFInitialEventC1Ev+0x10>)
 8002ccc:	6002      	str	r2, [r0, #0]
}
 8002cce:	4770      	bx	lr
 8002cd0:	08004f74 	.word	0x08004f74

08002cd4 <_ZNK9XFTimeout18deleteAfterConsumeEv>:
}

bool XFTimeout::deleteAfterConsume() const
{
    return true;
}
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	4770      	bx	lr

08002cd8 <_ZN9XFTimeoutD1Ev>:
 * the `getEventType()` method.
 *
 * XFTimeout is inheriting from XFEvent, so every timeout is
 * also an event.
 */
class XFTimeout : public XFEvent
 8002cd8:	4770      	bx	lr

08002cda <_ZN9XFTimeoutD0Ev>:
 8002cda:	b510      	push	{r4, lr}
 8002cdc:	4604      	mov	r4, r0
 8002cde:	2118      	movs	r1, #24
 8002ce0:	f000 fc14 	bl	800350c <_ZdlPvj>
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	bd10      	pop	{r4, pc}

08002ce8 <_ZN9XFTimeoutC1EiiPN9interface10XFBehaviorE>:
XFTimeout::XFTimeout(int id, int interval, interface::XFBehavior *pBehavior)
 8002ce8:	b430      	push	{r4, r5}
 8002cea:	2504      	movs	r5, #4
 8002cec:	7105      	strb	r5, [r0, #4]
 8002cee:	6081      	str	r1, [r0, #8]
 8002cf0:	60c3      	str	r3, [r0, #12]
    :XFEvent(Timeout, id, pBehavior)
 8002cf2:	4b03      	ldr	r3, [pc, #12]	; (8002d00 <_ZN9XFTimeoutC1EiiPN9interface10XFBehaviorE+0x18>)
 8002cf4:	6003      	str	r3, [r0, #0]
    interval_ = interval;
 8002cf6:	6102      	str	r2, [r0, #16]
    relTicks_ = interval;
 8002cf8:	6142      	str	r2, [r0, #20]
}
 8002cfa:	bc30      	pop	{r4, r5}
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	08004f88 	.word	0x08004f88

08002d04 <_ZN12XFDispatcher7executeEPKv>:
        _events.pop();      // Deletes it from Queue
    }
}

int XFDispatcher::execute(const void *param)
{
 8002d04:	b508      	push	{r3, lr}
 8002d06:	4604      	mov	r4, r0
    while(true) {
        executeOnce();
 8002d08:	6823      	ldr	r3, [r4, #0]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	4798      	blx	r3
    while(true) {
 8002d10:	e7fa      	b.n	8002d08 <_ZN12XFDispatcher7executeEPKv+0x4>

08002d12 <_ZNK12XFDispatcher13dispatchEventEPK7XFEvent>:
    }
}

void XFDispatcher::dispatchEvent(const XFEvent *pEvent) const
{
 8002d12:	b510      	push	{r4, lr}
 8002d14:	460c      	mov	r4, r1
    inline interface::XFBehavior * getBehavior() const { return pBehavior_; }
 8002d16:	68c8      	ldr	r0, [r1, #12]
    bool killBehavior = pEvent->getBehavior()->process(pEvent);
 8002d18:	6803      	ldr	r3, [r0, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	4798      	blx	r3
    if (killBehavior) {
 8002d1e:	b148      	cbz	r0, 8002d34 <_ZNK12XFDispatcher13dispatchEventEPK7XFEvent+0x22>
 8002d20:	68e0      	ldr	r0, [r4, #12]
        delete pEvent->getBehavior();
 8002d22:	b110      	cbz	r0, 8002d2a <_ZNK12XFDispatcher13dispatchEventEPK7XFEvent+0x18>
 8002d24:	6803      	ldr	r3, [r0, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	4798      	blx	r3
        delete pEvent;
 8002d2a:	b11c      	cbz	r4, 8002d34 <_ZNK12XFDispatcher13dispatchEventEPK7XFEvent+0x22>
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	4620      	mov	r0, r4
 8002d32:	4798      	blx	r3
    }
}
 8002d34:	bd10      	pop	{r4, pc}

08002d36 <_ZN12XFDispatcher15scheduleTimeoutEiiPN9interface10XFBehaviorE>:
{
 8002d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d38:	460c      	mov	r4, r1
 8002d3a:	4615      	mov	r5, r2
 8002d3c:	461e      	mov	r6, r3
    interface::XFTimeoutManager::getInstance()->scheduleTimeout(timeoutId, interval, pBehavior);
 8002d3e:	f000 f8ad 	bl	8002e9c <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8002d42:	6803      	ldr	r3, [r0, #0]
 8002d44:	695f      	ldr	r7, [r3, #20]
 8002d46:	4633      	mov	r3, r6
 8002d48:	462a      	mov	r2, r5
 8002d4a:	4621      	mov	r1, r4
 8002d4c:	47b8      	blx	r7
}
 8002d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d50 <_ZN12XFDispatcher17unscheduleTimeoutEiPN9interface10XFBehaviorE>:
{
 8002d50:	b538      	push	{r3, r4, r5, lr}
 8002d52:	460c      	mov	r4, r1
 8002d54:	4615      	mov	r5, r2
    interface::XFTimeoutManager::getInstance()->unscheduleTimeout(timeoutId, pBehavior);
 8002d56:	f000 f8a1 	bl	8002e9c <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8002d5a:	6803      	ldr	r3, [r0, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	462a      	mov	r2, r5
 8002d60:	4621      	mov	r1, r4
 8002d62:	4798      	blx	r3
}
 8002d64:	bd38      	pop	{r3, r4, r5, pc}
	...

08002d68 <_ZN12XFDispatcherC1Ev>:
XFDispatcher::XFDispatcher()
 8002d68:	b510      	push	{r4, lr}
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <_ZN12XFDispatcherC1Ev+0x14>)
 8002d6e:	f840 3b04 	str.w	r3, [r0], #4
 8002d72:	f000 fa7d 	bl	8003270 <_ZN12XFEventQueueC1Ev>
}
 8002d76:	4620      	mov	r0, r4
 8002d78:	bd10      	pop	{r4, pc}
 8002d7a:	bf00      	nop
 8002d7c:	08004f9c 	.word	0x08004f9c

08002d80 <_ZN9interface12XFDispatcher11getInstanceEv>:
    static ::XFDispatcher dispatcher;
 8002d80:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <_ZN9interface12XFDispatcher11getInstanceEv+0x38>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	f3bf 8f5b 	dmb	ish
 8002d88:	f013 0f01 	tst.w	r3, #1
 8002d8c:	d001      	beq.n	8002d92 <_ZN9interface12XFDispatcher11getInstanceEv+0x12>
}
 8002d8e:	480b      	ldr	r0, [pc, #44]	; (8002dbc <_ZN9interface12XFDispatcher11getInstanceEv+0x3c>)
 8002d90:	4770      	bx	lr
{
 8002d92:	b510      	push	{r4, lr}
    static ::XFDispatcher dispatcher;
 8002d94:	4808      	ldr	r0, [pc, #32]	; (8002db8 <_ZN9interface12XFDispatcher11getInstanceEv+0x38>)
 8002d96:	f000 fbbb 	bl	8003510 <__cxa_guard_acquire>
 8002d9a:	b908      	cbnz	r0, 8002da0 <_ZN9interface12XFDispatcher11getInstanceEv+0x20>
}
 8002d9c:	4807      	ldr	r0, [pc, #28]	; (8002dbc <_ZN9interface12XFDispatcher11getInstanceEv+0x3c>)
 8002d9e:	bd10      	pop	{r4, pc}
    static ::XFDispatcher dispatcher;
 8002da0:	4c05      	ldr	r4, [pc, #20]	; (8002db8 <_ZN9interface12XFDispatcher11getInstanceEv+0x38>)
 8002da2:	1d20      	adds	r0, r4, #4
 8002da4:	f7ff ffe0 	bl	8002d68 <_ZN12XFDispatcherC1Ev>
 8002da8:	4620      	mov	r0, r4
 8002daa:	f000 fbbd 	bl	8003528 <__cxa_guard_release>
 8002dae:	4804      	ldr	r0, [pc, #16]	; (8002dc0 <_ZN9interface12XFDispatcher11getInstanceEv+0x40>)
 8002db0:	f000 fe2e 	bl	8003a10 <atexit>
 8002db4:	e7f2      	b.n	8002d9c <_ZN9interface12XFDispatcher11getInstanceEv+0x1c>
 8002db6:	bf00      	nop
 8002db8:	200002a0 	.word	0x200002a0
 8002dbc:	200002a4 	.word	0x200002a4
 8002dc0:	08002ddd 	.word	0x08002ddd

08002dc4 <_ZN12XFDispatcherD1Ev>:
XFDispatcher::~XFDispatcher()
 8002dc4:	b510      	push	{r4, lr}
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <_ZN12XFDispatcherD1Ev+0x14>)
 8002dca:	f840 3b04 	str.w	r3, [r0], #4
 8002dce:	f000 f9cd 	bl	800316c <_ZN12XFEventQueueD1Ev>
}
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	bd10      	pop	{r4, pc}
 8002dd6:	bf00      	nop
 8002dd8:	08004f9c 	.word	0x08004f9c

08002ddc <__tcf_0>:
    static ::XFDispatcher dispatcher;
 8002ddc:	b508      	push	{r3, lr}
 8002dde:	4802      	ldr	r0, [pc, #8]	; (8002de8 <__tcf_0+0xc>)
 8002de0:	f7ff fff0 	bl	8002dc4 <_ZN12XFDispatcherD1Ev>
 8002de4:	bd08      	pop	{r3, pc}
 8002de6:	bf00      	nop
 8002de8:	200002a4 	.word	0x200002a4

08002dec <_ZN12XFDispatcherD0Ev>:
XFDispatcher::~XFDispatcher()
 8002dec:	b510      	push	{r4, lr}
 8002dee:	4604      	mov	r4, r0
}
 8002df0:	f7ff ffe8 	bl	8002dc4 <_ZN12XFDispatcherD1Ev>
 8002df4:	2138      	movs	r1, #56	; 0x38
 8002df6:	4620      	mov	r0, r4
 8002df8:	f000 fb88 	bl	800350c <_ZdlPvj>
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	bd10      	pop	{r4, pc}

08002e00 <_ZN12XFDispatcher9pushEventEP7XFEventb>:
{
 8002e00:	b508      	push	{r3, lr}
    _events.push(pEvent, fromISR);
 8002e02:	3004      	adds	r0, #4
 8002e04:	f000 fafe 	bl	8003404 <_ZN12XFEventQueue4pushEPK7XFEventb>
}
 8002e08:	bd08      	pop	{r3, pc}

08002e0a <_ZN12XFDispatcher11executeOnceEv>:
{
 8002e0a:	b570      	push	{r4, r5, r6, lr}
 8002e0c:	4604      	mov	r4, r0
	bool isEmpty = _events.empty();
 8002e0e:	1d05      	adds	r5, r0, #4
 8002e10:	4628      	mov	r0, r5
 8002e12:	f000 f986 	bl	8003122 <_ZNK12XFEventQueue5emptyEv>
    if (!isEmpty) {
 8002e16:	b100      	cbz	r0, 8002e1a <_ZN12XFDispatcher11executeOnceEv+0x10>
}
 8002e18:	bd70      	pop	{r4, r5, r6, pc}
        dispatchEvent(_events.front());
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	69de      	ldr	r6, [r3, #28]
 8002e1e:	4628      	mov	r0, r5
 8002e20:	f000 f986 	bl	8003130 <_ZN12XFEventQueue5frontEv>
 8002e24:	4601      	mov	r1, r0
 8002e26:	4620      	mov	r0, r4
 8002e28:	47b0      	blx	r6
        _events.pop();      // Deletes it from Queue
 8002e2a:	4628      	mov	r0, r5
 8002e2c:	f000 f9c3 	bl	80031b6 <_ZN12XFEventQueue3popEv>
}
 8002e30:	e7f2      	b.n	8002e18 <_ZN12XFDispatcher11executeOnceEv+0xe>

08002e32 <_ZN9interface16XFTimeoutManager10initializeEl>:
     * Sets the time interval in milliseconds in which the timeout manager
     * should handle the timeouts.
     */
    virtual void initialize(int32_t tickInterval)
    {
        tickInterval_ = tickInterval;
 8002e32:	6041      	str	r1, [r0, #4]
    }
 8002e34:	4770      	bx	lr

08002e36 <_ZNK9interface16XFTimeoutManager15getTickIntervalEv>:
     * @brief Returns tick interval in milliseconds.
     */
    virtual int32_t getTickInterval() const
    {
        return tickInterval_;
    }
 8002e36:	6840      	ldr	r0, [r0, #4]
 8002e38:	4770      	bx	lr

08002e3a <_ZN16XFTimeoutManager15scheduleTimeoutEllPN9interface10XFBehaviorE>:
        startTimeoutManagerTimer(tickInterval_);
    }
}

void XFTimeoutManager::scheduleTimeout(int32_t timeoutId, int32_t interval, interface::XFBehavior *pBehavior)
{
 8002e3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e3e:	4604      	mov	r4, r0
 8002e40:	460e      	mov	r6, r1
 8002e42:	4617      	mov	r7, r2
 8002e44:	4698      	mov	r8, r3
    pMutex_->lock();
 8002e46:	6940      	ldr	r0, [r0, #20]
 8002e48:	6803      	ldr	r3, [r0, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	4798      	blx	r3
    addTimeout(new XFTimeout(timeoutId, interval, pBehavior));
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	f8d3 9020 	ldr.w	r9, [r3, #32]
 8002e54:	2018      	movs	r0, #24
 8002e56:	f000 fb6a 	bl	800352e <_Znwj>
 8002e5a:	4605      	mov	r5, r0
 8002e5c:	4643      	mov	r3, r8
 8002e5e:	463a      	mov	r2, r7
 8002e60:	4631      	mov	r1, r6
 8002e62:	f7ff ff41 	bl	8002ce8 <_ZN9XFTimeoutC1EiiPN9interface10XFBehaviorE>
 8002e66:	4629      	mov	r1, r5
 8002e68:	4620      	mov	r0, r4
 8002e6a:	47c8      	blx	r9
    pMutex_->unlock();
 8002e6c:	6960      	ldr	r0, [r4, #20]
 8002e6e:	6803      	ldr	r3, [r0, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	4798      	blx	r3
}
 8002e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002e78 <_ZN16XFTimeoutManagerC1Ev>:
XFTimeoutManager::XFTimeoutManager()
 8002e78:	b510      	push	{r4, lr}
 8002e7a:	4604      	mov	r4, r0
     */
    virtual void tick() = 0;

protected:
    XFTimeoutManager() :
        tickInterval_(0)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	6042      	str	r2, [r0, #4]
 8002e80:	4603      	mov	r3, r0
 8002e82:	4905      	ldr	r1, [pc, #20]	; (8002e98 <_ZN16XFTimeoutManagerC1Ev+0x20>)
 8002e84:	f843 1b08 	str.w	r1, [r3], #8
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
      {
	this->_M_next = this->_M_prev = this;
 8002e88:	60c3      	str	r3, [r0, #12]
 8002e8a:	6083      	str	r3, [r0, #8]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 8002e8c:	6102      	str	r2, [r0, #16]
    pMutex_ = interface::XFMutex::create();
 8002e8e:	f000 faed 	bl	800346c <_ZN9interface7XFMutex6createEv>
 8002e92:	6160      	str	r0, [r4, #20]
}
 8002e94:	4620      	mov	r0, r4
 8002e96:	bd10      	pop	{r4, pc}
 8002e98:	08004fc4 	.word	0x08004fc4

08002e9c <_ZN9interface16XFTimeoutManager11getInstanceEv>:
    static ::XFTimeoutManager timeoutManager;
 8002e9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x38>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	f3bf 8f5b 	dmb	ish
 8002ea4:	f013 0f01 	tst.w	r3, #1
 8002ea8:	d001      	beq.n	8002eae <_ZN9interface16XFTimeoutManager11getInstanceEv+0x12>
}
 8002eaa:	480b      	ldr	r0, [pc, #44]	; (8002ed8 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x3c>)
 8002eac:	4770      	bx	lr
{
 8002eae:	b510      	push	{r4, lr}
    static ::XFTimeoutManager timeoutManager;
 8002eb0:	4808      	ldr	r0, [pc, #32]	; (8002ed4 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x38>)
 8002eb2:	f000 fb2d 	bl	8003510 <__cxa_guard_acquire>
 8002eb6:	b908      	cbnz	r0, 8002ebc <_ZN9interface16XFTimeoutManager11getInstanceEv+0x20>
}
 8002eb8:	4807      	ldr	r0, [pc, #28]	; (8002ed8 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x3c>)
 8002eba:	bd10      	pop	{r4, pc}
    static ::XFTimeoutManager timeoutManager;
 8002ebc:	4c05      	ldr	r4, [pc, #20]	; (8002ed4 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x38>)
 8002ebe:	1d20      	adds	r0, r4, #4
 8002ec0:	f7ff ffda 	bl	8002e78 <_ZN16XFTimeoutManagerC1Ev>
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	f000 fb2f 	bl	8003528 <__cxa_guard_release>
 8002eca:	4804      	ldr	r0, [pc, #16]	; (8002edc <_ZN9interface16XFTimeoutManager11getInstanceEv+0x40>)
 8002ecc:	f000 fda0 	bl	8003a10 <atexit>
 8002ed0:	e7f2      	b.n	8002eb8 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x1c>
 8002ed2:	bf00      	nop
 8002ed4:	200002dc 	.word	0x200002dc
 8002ed8:	200002e0 	.word	0x200002e0
 8002edc:	080030c1 	.word	0x080030c1

08002ee0 <_ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout>:
{
 8002ee0:	b508      	push	{r3, lr}
 8002ee2:	68c8      	ldr	r0, [r1, #12]
    pTimeout->getBehavior()->pushEvent(pTimeout, true);
 8002ee4:	6803      	ldr	r3, [r0, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	4798      	blx	r3
}
 8002eec:	bd08      	pop	{r3, pc}

08002eee <_ZN16XFTimeoutManager4tickEv>:
    }
    pMutex_->unlock();
}

void XFTimeoutManager::tick()
{
 8002eee:	b570      	push	{r4, r5, r6, lr}
 8002ef0:	4604      	mov	r4, r0
    pMutex_->lock();
 8002ef2:	6940      	ldr	r0, [r0, #20]
 8002ef4:	6803      	ldr	r3, [r0, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	4798      	blx	r3
       *  Returns true if the %list is empty.  (Thus begin() would equal
       *  end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8002efa:	4626      	mov	r6, r4
 8002efc:	f856 3f08 	ldr.w	r3, [r6, #8]!
    if(!timeouts_.empty()) {
 8002f00:	429e      	cmp	r6, r3
 8002f02:	d019      	beq.n	8002f38 <_ZN16XFTimeoutManager4tickEv+0x4a>
        timeouts_.front()->substractFromRelTicks(tickInterval_);
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	6861      	ldr	r1, [r4, #4]

    bool deleteAfterConsume() const override;                                                       ///< Tells the dispatcher if the event must be deleted or not.

    inline void setRelTicks(int relTicks) { relTicks_ = relTicks; }                                 ///< Sets remaining ticks.
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
    inline void substractFromRelTicks(int ticksToSubstract) { relTicks_ -= ticksToSubstract; }      ///< Substracts `ticksToSubstract` from remaining ticks.
 8002f08:	6953      	ldr	r3, [r2, #20]
 8002f0a:	1a5b      	subs	r3, r3, r1
 8002f0c:	6153      	str	r3, [r2, #20]
      { return iterator(this->_M_impl._M_node._M_next); }
 8002f0e:	68a3      	ldr	r3, [r4, #8]
        while(timeouts_.front()->getRelTicks() <= 0) {
 8002f10:	6899      	ldr	r1, [r3, #8]
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
 8002f12:	694b      	ldr	r3, [r1, #20]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	dc0f      	bgt.n	8002f38 <_ZN16XFTimeoutManager4tickEv+0x4a>
            returnTimeout(timeouts_.front());
 8002f18:	4620      	mov	r0, r4
 8002f1a:	f7ff ffe1 	bl	8002ee0 <_ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout>
 8002f1e:	68a5      	ldr	r5, [r4, #8]
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8002f20:	6923      	ldr	r3, [r4, #16]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	6123      	str	r3, [r4, #16]
      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
      {
	this->_M_dec_size(1);
	__position._M_node->_M_unhook();
 8002f26:	4628      	mov	r0, r5
 8002f28:	f000 fb1c 	bl	8003564 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
 8002f2c:	4628      	mov	r0, r5
 8002f2e:	f000 faeb 	bl	8003508 <_ZdlPv>
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8002f32:	68a3      	ldr	r3, [r4, #8]
            timeouts_.pop_front();
            if(timeouts_.empty()) { break; }
 8002f34:	429e      	cmp	r6, r3
 8002f36:	d1ea      	bne.n	8002f0e <_ZN16XFTimeoutManager4tickEv+0x20>
        }
    }
    pMutex_->unlock();
 8002f38:	6960      	ldr	r0, [r4, #20]
 8002f3a:	6803      	ldr	r3, [r0, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	4798      	blx	r3
}
 8002f40:	bd70      	pop	{r4, r5, r6, pc}

08002f42 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>:
      }
#endif

  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::
 8002f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f44:	4605      	mov	r5, r0
 8002f46:	460e      	mov	r6, r1
 8002f48:	4617      	mov	r7, r2
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002f4a:	200c      	movs	r0, #12
 8002f4c:	f000 faef 	bl	800352e <_Znwj>
 8002f50:	4604      	mov	r4, r0
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	6083      	str	r3, [r0, #8]
#else
    insert(iterator __position, const value_type& __x)
#endif
    {
      _Node* __tmp = _M_create_node(__x);
      __tmp->_M_hook(__position._M_const_cast()._M_node);
 8002f56:	4631      	mov	r1, r6
 8002f58:	f000 fafd 	bl	8003556 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8002f5c:	68ab      	ldr	r3, [r5, #8]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	60ab      	str	r3, [r5, #8]
      this->_M_inc_size(1);
      return iterator(__tmp);
    }
 8002f62:	4620      	mov	r0, r4
 8002f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f66 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout>:
{
 8002f66:	b570      	push	{r4, r5, r6, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	9101      	str	r1, [sp, #4]
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8002f6c:	4605      	mov	r5, r0
 8002f6e:	f855 2f08 	ldr.w	r2, [r5, #8]!
    if(timeouts_.empty()) {
 8002f72:	4295      	cmp	r5, r2
 8002f74:	d00c      	beq.n	8002f90 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x2a>
      { return __x._M_node != __y._M_node; }
 8002f76:	4611      	mov	r1, r2
        for(it = timeouts_.begin(); it != timeouts_.end(); it++) {
 8002f78:	42aa      	cmp	r2, r5
 8002f7a:	d01c      	beq.n	8002fb6 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x50>
            if(pNewTimeout->getRelTicks() < (*it)->getRelTicks()) {
 8002f7c:	9c01      	ldr	r4, [sp, #4]
 8002f7e:	6963      	ldr	r3, [r4, #20]
 8002f80:	6896      	ldr	r6, [r2, #8]
 8002f82:	6972      	ldr	r2, [r6, #20]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	dc0f      	bgt.n	8002fa8 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x42>
    inline void substractFromRelTicks(int ticksToSubstract) { relTicks_ -= ticksToSubstract; }      ///< Substracts `ticksToSubstract` from remaining ticks.
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	6163      	str	r3, [r4, #20]
	_M_node = _M_node->_M_next;
 8002f8c:	680a      	ldr	r2, [r1, #0]
	return __tmp;
 8002f8e:	e7f2      	b.n	8002f76 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x10>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002f90:	200c      	movs	r0, #12
 8002f92:	f000 facc 	bl	800352e <_Znwj>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002f96:	9b01      	ldr	r3, [sp, #4]
 8002f98:	6083      	str	r3, [r0, #8]
	 __tmp->_M_hook(__position._M_node);
 8002f9a:	4629      	mov	r1, r5
 8002f9c:	f000 fadb 	bl	8003556 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8002fa0:	68ab      	ldr	r3, [r5, #8]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	60ab      	str	r3, [r5, #8]
      { this->_M_insert(end(), __x); }
 8002fa6:	e013      	b.n	8002fd0 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x6a>
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	6173      	str	r3, [r6, #20]
            timeouts_.insert(it, pNewTimeout);
 8002fac:	aa01      	add	r2, sp, #4
 8002fae:	3008      	adds	r0, #8
 8002fb0:	f7ff ffc7 	bl	8002f42 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
 8002fb4:	e00c      	b.n	8002fd0 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x6a>
            timeouts_.push_back(pNewTimeout);
 8002fb6:	f100 0408 	add.w	r4, r0, #8
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002fba:	200c      	movs	r0, #12
 8002fbc:	f000 fab7 	bl	800352e <_Znwj>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002fc0:	9b01      	ldr	r3, [sp, #4]
 8002fc2:	6083      	str	r3, [r0, #8]
	 __tmp->_M_hook(__position._M_node);
 8002fc4:	4629      	mov	r1, r5
 8002fc6:	f000 fac6 	bl	8003556 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8002fca:	68a3      	ldr	r3, [r4, #8]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	60a3      	str	r3, [r4, #8]
}
 8002fd0:	b002      	add	sp, #8
 8002fd2:	bd70      	pop	{r4, r5, r6, pc}

08002fd4 <_ZNKSt8functionIFvmEEclEm>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8002fd4:	b500      	push	{lr}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	9101      	str	r1, [sp, #4]
    bool _M_empty() const { return !_M_manager; }
 8002fda:	6883      	ldr	r3, [r0, #8]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8002fdc:	b12b      	cbz	r3, 8002fea <_ZNKSt8functionIFvmEEclEm+0x16>
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8002fde:	68c3      	ldr	r3, [r0, #12]
 8002fe0:	a901      	add	r1, sp, #4
 8002fe2:	4798      	blx	r3
    }
 8002fe4:	b003      	add	sp, #12
 8002fe6:	f85d fb04 	ldr.w	pc, [sp], #4
	__throw_bad_function_call();
 8002fea:	f000 fae5 	bl	80035b8 <_ZSt25__throw_bad_function_callv>

08002fee <_ZN16XFTimeoutManager5startESt8functionIFvmEE>:
    bool _M_empty() const { return !_M_manager; }
 8002fee:	688a      	ldr	r2, [r1, #8]
    if (startTimeoutManagerTimer != nullptr) {
 8002ff0:	b132      	cbz	r2, 8003000 <_ZN16XFTimeoutManager5startESt8functionIFvmEE+0x12>
{
 8002ff2:	b508      	push	{r3, lr}
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	4608      	mov	r0, r1
        startTimeoutManagerTimer(tickInterval_);
 8002ff8:	6859      	ldr	r1, [r3, #4]
 8002ffa:	f7ff ffeb 	bl	8002fd4 <_ZNKSt8functionIFvmEEclEm>
}
 8002ffe:	bd08      	pop	{r3, pc}
 8003000:	4770      	bx	lr

08003002 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>:
      }
#endif

  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::
 8003002:	b538      	push	{r3, r4, r5, lr}
 8003004:	460c      	mov	r4, r1
    erase(const_iterator __position) noexcept
#else
    erase(iterator __position)
#endif
    {
      iterator __ret = iterator(__position._M_node->_M_next);
 8003006:	680d      	ldr	r5, [r1, #0]
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8003008:	6883      	ldr	r3, [r0, #8]
 800300a:	3b01      	subs	r3, #1
 800300c:	6083      	str	r3, [r0, #8]
	__position._M_node->_M_unhook();
 800300e:	4608      	mov	r0, r1
 8003010:	f000 faa8 	bl	8003564 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	::operator delete(__p);
 8003014:	4620      	mov	r0, r4
 8003016:	f000 fa77 	bl	8003508 <_ZdlPv>
      _M_erase(__position._M_const_cast());
      return __ret;
    }
 800301a:	4628      	mov	r0, r5
 800301c:	bd38      	pop	{r3, r4, r5, pc}

0800301e <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE>:
{
 800301e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003022:	4605      	mov	r5, r0
 8003024:	460e      	mov	r6, r1
 8003026:	4617      	mov	r7, r2
    pMutex_->lock();
 8003028:	6940      	ldr	r0, [r0, #20]
 800302a:	6803      	ldr	r3, [r0, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	4798      	blx	r3
    for(TimeoutList::iterator it = timeouts_.begin(); it != timeouts_.end(); it++) {
 8003030:	68a8      	ldr	r0, [r5, #8]
 8003032:	e014      	b.n	800305e <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE+0x40>
                (*it)->addToRelTicks(relTicksToAdd);
 8003034:	6882      	ldr	r2, [r0, #8]
    inline void addToRelTicks(int ticksToAdd) { relTicks_ += ticksToAdd; }                          ///< Adds `ticksToAdd` to remaining ticks.
 8003036:	6953      	ldr	r3, [r2, #20]
 8003038:	4443      	add	r3, r8
 800303a:	6153      	str	r3, [r2, #20]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 800303c:	4601      	mov	r1, r0
    	while ((*it)->getId() == timeoutId && (*it)->getBehavior() == pBehavior) {
 800303e:	6883      	ldr	r3, [r0, #8]
    inline int getId() const { return id_; }		///< Returns #id_ identifying the event in the behaviors context.
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	4296      	cmp	r6, r2
 8003044:	d10a      	bne.n	800305c <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE+0x3e>
    inline interface::XFBehavior * getBehavior() const { return pBehavior_; }
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	42ba      	cmp	r2, r7
 800304a:	d107      	bne.n	800305c <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE+0x3e>
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
 800304c:	f8d3 8014 	ldr.w	r8, [r3, #20]
    		it = timeouts_.erase(it);
 8003050:	f105 0008 	add.w	r0, r5, #8
 8003054:	f7ff ffd5 	bl	8003002 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
            if(it != timeouts_.end()) {
 8003058:	4284      	cmp	r4, r0
 800305a:	d1eb      	bne.n	8003034 <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE+0x16>
	_M_node = _M_node->_M_next;
 800305c:	6800      	ldr	r0, [r0, #0]
      { return iterator(&this->_M_impl._M_node); }
 800305e:	f105 0408 	add.w	r4, r5, #8
    for(TimeoutList::iterator it = timeouts_.begin(); it != timeouts_.end(); it++) {
 8003062:	4284      	cmp	r4, r0
 8003064:	d1ea      	bne.n	800303c <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE+0x1e>
    pMutex_->unlock();
 8003066:	6968      	ldr	r0, [r5, #20]
 8003068:	6803      	ldr	r3, [r0, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	4798      	blx	r3
}
 800306e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003072 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 8003072:	b538      	push	{r3, r4, r5, lr}
 8003074:	4605      	mov	r5, r0
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8003076:	6800      	ldr	r0, [r0, #0]
      while (__cur != &_M_impl._M_node)
 8003078:	4285      	cmp	r5, r0
 800307a:	d004      	beq.n	8003086 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0x14>
	  __cur = __tmp->_M_next;
 800307c:	6804      	ldr	r4, [r0, #0]
 800307e:	f000 fa43 	bl	8003508 <_ZdlPv>
 8003082:	4620      	mov	r0, r4
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 8003084:	e7f8      	b.n	8003078 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0x6>
    }
 8003086:	bd38      	pop	{r3, r4, r5, pc}

08003088 <_ZN16XFTimeoutManagerD1Ev>:
XFTimeoutManager::~XFTimeoutManager()
 8003088:	b570      	push	{r4, r5, r6, lr}
 800308a:	4606      	mov	r6, r0
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <_ZN16XFTimeoutManagerD1Ev+0x34>)
 800308e:	6003      	str	r3, [r0, #0]
      { return iterator(this->_M_impl._M_node._M_next); }
 8003090:	4605      	mov	r5, r0
    for(XFTimeout* timeout : timeouts_) {
 8003092:	f855 3f08 	ldr.w	r3, [r5, #8]!
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8003096:	e000      	b.n	800309a <_ZN16XFTimeoutManagerD1Ev+0x12>
	_M_node = _M_node->_M_next;
 8003098:	6823      	ldr	r3, [r4, #0]
      { return __x._M_node != __y._M_node; }
 800309a:	461c      	mov	r4, r3
 800309c:	429d      	cmp	r5, r3
 800309e:	d006      	beq.n	80030ae <_ZN16XFTimeoutManagerD1Ev+0x26>
 80030a0:	6898      	ldr	r0, [r3, #8]
        delete timeout;
 80030a2:	2800      	cmp	r0, #0
 80030a4:	d0f8      	beq.n	8003098 <_ZN16XFTimeoutManagerD1Ev+0x10>
 80030a6:	6803      	ldr	r3, [r0, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	4798      	blx	r3
 80030ac:	e7f4      	b.n	8003098 <_ZN16XFTimeoutManagerD1Ev+0x10>
      { _M_clear(); }
 80030ae:	f106 0008 	add.w	r0, r6, #8
 80030b2:	f7ff ffde 	bl	8003072 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>
}
 80030b6:	4630      	mov	r0, r6
 80030b8:	bd70      	pop	{r4, r5, r6, pc}
 80030ba:	bf00      	nop
 80030bc:	08004fc4 	.word	0x08004fc4

080030c0 <__tcf_0>:
    static ::XFTimeoutManager timeoutManager;
 80030c0:	b508      	push	{r3, lr}
 80030c2:	4802      	ldr	r0, [pc, #8]	; (80030cc <__tcf_0+0xc>)
 80030c4:	f7ff ffe0 	bl	8003088 <_ZN16XFTimeoutManagerD1Ev>
 80030c8:	bd08      	pop	{r3, pc}
 80030ca:	bf00      	nop
 80030cc:	200002e0 	.word	0x200002e0

080030d0 <_ZN16XFTimeoutManagerD0Ev>:
XFTimeoutManager::~XFTimeoutManager()
 80030d0:	b510      	push	{r4, lr}
 80030d2:	4604      	mov	r4, r0
}
 80030d4:	f7ff ffd8 	bl	8003088 <_ZN16XFTimeoutManagerD1Ev>
 80030d8:	2118      	movs	r1, #24
 80030da:	4620      	mov	r0, r4
 80030dc:	f000 fa16 	bl	800350c <_ZdlPvj>
 80030e0:	4620      	mov	r0, r4
 80030e2:	bd10      	pop	{r4, pc}

080030e4 <XF_tick>:
 * SysTick_Handler() function is already implemented in the STM32CubeMX generated
 * code (see Src/stm32fxxx_it.c file). Therefore, we must provide here a function
 * which can be explicitly called in SysTick_Handler() to tick the XF.
 */
void XF_tick()
{
 80030e4:	b508      	push	{r3, lr}
	bInISR = true;                              // Tell critical section we are in an ISR
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <XF_tick+0x24>)
 80030e8:	2201      	movs	r2, #1
 80030ea:	601a      	str	r2, [r3, #0]
	if (XF::isRunning())                        // Call tick only if XF is running
 80030ec:	f000 fa02 	bl	80034f4 <_ZN2XF9isRunningEv>
 80030f0:	b918      	cbnz	r0, 80030fa <XF_tick+0x16>
	{
	    XFTimeoutManager::getInstance()->tick();    // Call framework hook tick function
	}
	bInISR = false;
 80030f2:	4b05      	ldr	r3, [pc, #20]	; (8003108 <XF_tick+0x24>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
}
 80030f8:	bd08      	pop	{r3, pc}
	    XFTimeoutManager::getInstance()->tick();    // Call framework hook tick function
 80030fa:	f7ff fecf 	bl	8002e9c <_ZN9interface16XFTimeoutManager11getInstanceEv>
 80030fe:	6803      	ldr	r3, [r0, #0]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	4798      	blx	r3
 8003104:	e7f5      	b.n	80030f2 <XF_tick+0xe>
 8003106:	bf00      	nop
 8003108:	20000288 	.word	0x20000288

0800310c <XF_tickIntervalInMilliseconds>:

/**
 * C function wrapping getTickInterval() method of XFTimeoutManager.
 */
int32_t XF_tickIntervalInMilliseconds()
{
 800310c:	b508      	push	{r3, lr}
    return XFTimeoutManager::getInstance()->getTickInterval();
 800310e:	f7ff fec5 	bl	8002e9c <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8003112:	6803      	ldr	r3, [r0, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	4798      	blx	r3
}
 8003118:	bd08      	pop	{r3, pc}

0800311a <XF_isRunning>:

bool XF_isRunning()
{
 800311a:	b508      	push	{r3, lr}
    return XF::isRunning();
 800311c:	f000 f9ea 	bl	80034f4 <_ZN2XF9isRunningEv>
}
 8003120:	bd08      	pop	{r3, pc}

08003122 <_ZNK12XFEventQueue5emptyEv>:
  // are in scope (for additional details, see libstdc++/3628)
  template<typename _Tp, typename _Ref, typename _Ptr>
    inline bool
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    { return __x._M_cur == __y._M_cur; }
 8003122:	6a03      	ldr	r3, [r0, #32]
 8003124:	6900      	ldr	r0, [r0, #16]
XFEventQueue::~XFEventQueue() {
}

bool XFEventQueue::empty() const {
    return _queue.empty();
}
 8003126:	4298      	cmp	r0, r3
 8003128:	bf14      	ite	ne
 800312a:	2000      	movne	r0, #0
 800312c:	2001      	moveq	r0, #1
 800312e:	4770      	bx	lr

08003130 <_ZN12XFEventQueue5frontEv>:
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8003130:	6903      	ldr	r3, [r0, #16]
    return true;
}

const XFEvent* XFEventQueue::front() {
    return _queue.front();
}
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	4770      	bx	lr

08003136 <_ZN12XFEventQueue4pendEv>:
}

bool XFEventQueue::pend() {
    // Not inplemented for IDF use
    return true;
}
 8003136:	2001      	movs	r0, #1
 8003138:	4770      	bx	lr

0800313a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_>:
	}
    }

  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
 800313a:	b538      	push	{r3, r4, r5, lr}
 800313c:	460c      	mov	r4, r1
 800313e:	4615      	mov	r5, r2
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8003140:	42ac      	cmp	r4, r5
 8003142:	d204      	bcs.n	800314e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x14>
 8003144:	f854 0b04 	ldr.w	r0, [r4], #4
 8003148:	f000 f9de 	bl	8003508 <_ZdlPv>
 800314c:	e7f8      	b.n	8003140 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x6>
	_M_deallocate_node(*__n);
    }
 800314e:	bd38      	pop	{r3, r4, r5, pc}

08003150 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8003150:	b510      	push	{r4, lr}
 8003152:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
 8003154:	6803      	ldr	r3, [r0, #0]
 8003156:	b13b      	cbz	r3, 8003168 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev+0x18>
			   this->_M_impl._M_finish._M_node + 1);
 8003158:	6a42      	ldr	r2, [r0, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800315a:	3204      	adds	r2, #4
 800315c:	6941      	ldr	r1, [r0, #20]
 800315e:	f7ff ffec 	bl	800313a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_>
 8003162:	6820      	ldr	r0, [r4, #0]
 8003164:	f000 f9d0 	bl	8003508 <_ZdlPv>
    }
 8003168:	4620      	mov	r0, r4
 800316a:	bd10      	pop	{r4, pc}

0800316c <_ZN12XFEventQueueD1Ev>:
XFEventQueue::~XFEventQueue() {
 800316c:	b510      	push	{r4, lr}
 800316e:	4604      	mov	r4, r0
 8003170:	4b03      	ldr	r3, [pc, #12]	; (8003180 <_ZN12XFEventQueueD1Ev+0x14>)
 8003172:	f840 3b08 	str.w	r3, [r0], #8
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8003176:	f7ff ffeb 	bl	8003150 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>
}
 800317a:	4620      	mov	r0, r4
 800317c:	bd10      	pop	{r4, pc}
 800317e:	bf00      	nop
 8003180:	08004ff0 	.word	0x08004ff0

08003184 <_ZN12XFEventQueueD0Ev>:
XFEventQueue::~XFEventQueue() {
 8003184:	b510      	push	{r4, lr}
 8003186:	4604      	mov	r4, r0
}
 8003188:	f7ff fff0 	bl	800316c <_ZN12XFEventQueueD1Ev>
 800318c:	2130      	movs	r1, #48	; 0x30
 800318e:	4620      	mov	r0, r4
 8003190:	f000 f9bc 	bl	800350c <_ZdlPvj>
 8003194:	4620      	mov	r0, r4
 8003196:	bd10      	pop	{r4, pc}

08003198 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8003198:	b510      	push	{r4, lr}
 800319a:	4604      	mov	r4, r0
 800319c:	68c0      	ldr	r0, [r0, #12]
 800319e:	f000 f9b3 	bl	8003508 <_ZdlPv>
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 80031a2:	6963      	ldr	r3, [r4, #20]
 80031a4:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
 80031a6:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80031ac:	f503 7200 	add.w	r2, r3, #512	; 0x200
 80031b0:	6122      	str	r2, [r4, #16]
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80031b2:	60a3      	str	r3, [r4, #8]
    }
 80031b4:	bd10      	pop	{r4, pc}

080031b6 <_ZN12XFEventQueue3popEv>:
void XFEventQueue::pop() {
 80031b6:	b508      	push	{r3, lr}
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 80031b8:	6903      	ldr	r3, [r0, #16]
	    != this->_M_impl._M_start._M_last - 1)
 80031ba:	6982      	ldr	r2, [r0, #24]
 80031bc:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
 80031be:	4293      	cmp	r3, r2
 80031c0:	d002      	beq.n	80031c8 <_ZN12XFEventQueue3popEv+0x12>
	  {
	    _Alloc_traits::destroy(this->_M_impl,
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 80031c2:	3304      	adds	r3, #4
 80031c4:	6103      	str	r3, [r0, #16]
}
 80031c6:	bd08      	pop	{r3, pc}
 80031c8:	f100 0108 	add.w	r1, r0, #8
	  }
	else
	  _M_pop_front_aux();
 80031cc:	4608      	mov	r0, r1
 80031ce:	f7ff ffe3 	bl	8003198 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_pop_front_auxEv>
 80031d2:	e7f8      	b.n	80031c6 <_ZN12XFEventQueue3popEv+0x10>

080031d4 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_>:
    _Deque_base<_Tp, _Alloc>::
 80031d4:	b538      	push	{r3, r4, r5, lr}
 80031d6:	460c      	mov	r4, r1
 80031d8:	4615      	mov	r5, r2
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80031da:	42ac      	cmp	r4, r5
 80031dc:	d206      	bcs.n	80031ec <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_+0x18>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80031de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80031e2:	f000 f9a4 	bl	800352e <_Znwj>
	    *__cur = this->_M_allocate_node();
 80031e6:	f844 0b04 	str.w	r0, [r4], #4
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80031ea:	e7f6      	b.n	80031da <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_+0x6>
    }
 80031ec:	bd38      	pop	{r3, r4, r5, pc}

080031ee <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80031ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031f2:	b083      	sub	sp, #12
 80031f4:	4604      	mov	r4, r0
 80031f6:	460d      	mov	r5, r1
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 80031f8:	09cb      	lsrs	r3, r1, #7
 80031fa:	1c5e      	adds	r6, r3, #1
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80031fc:	2208      	movs	r2, #8
 80031fe:	9200      	str	r2, [sp, #0]
					   size_t(__num_nodes + 2));
 8003200:	3303      	adds	r3, #3
 8003202:	9301      	str	r3, [sp, #4]
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8003204:	4293      	cmp	r3, r2
 8003206:	d82f      	bhi.n	8003268 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj+0x7a>
	return __b;
      return __a;
 8003208:	466b      	mov	r3, sp
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	6060      	str	r0, [r4, #4]
	if (__n > this->max_size())
 800320e:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8003212:	d22b      	bcs.n	800326c <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj+0x7e>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003214:	0080      	lsls	r0, r0, #2
 8003216:	f000 f98a 	bl	800352e <_Znwj>
 800321a:	4680      	mov	r8, r0
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 800321c:	6020      	str	r0, [r4, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800321e:	6867      	ldr	r7, [r4, #4]
 8003220:	1bbf      	subs	r7, r7, r6
 8003222:	087f      	lsrs	r7, r7, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003224:	eb00 0987 	add.w	r9, r0, r7, lsl #2
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8003228:	eb09 0686 	add.w	r6, r9, r6, lsl #2
	{ _M_create_nodes(__nstart, __nfinish); }
 800322c:	4632      	mov	r2, r6
 800322e:	4649      	mov	r1, r9
 8003230:	4620      	mov	r0, r4
 8003232:	f7ff ffcf 	bl	80031d4 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_>
	_M_node = __new_node;
 8003236:	f8c4 9014 	str.w	r9, [r4, #20]
	_M_first = *__new_node;
 800323a:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
 800323e:	60e2      	str	r2, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8003240:	f502 7300 	add.w	r3, r2, #512	; 0x200
 8003244:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8003246:	1f33      	subs	r3, r6, #4
	_M_node = __new_node;
 8003248:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
 800324a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800324e:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8003250:	f503 7100 	add.w	r1, r3, #512	; 0x200
 8003254:	6221      	str	r1, [r4, #32]
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8003256:	60a2      	str	r2, [r4, #8]
					% __deque_buf_size(sizeof(_Tp)));
 8003258:	f005 057f 	and.w	r5, r5, #127	; 0x7f
					+ __num_elements
 800325c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8003260:	61a3      	str	r3, [r4, #24]
    }
 8003262:	b003      	add	sp, #12
 8003264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return __b;
 8003268:	ab01      	add	r3, sp, #4
 800326a:	e7ce      	b.n	800320a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj+0x1c>
	  std::__throw_bad_alloc();
 800326c:	f000 f97f 	bl	800356e <_ZSt17__throw_bad_allocv>

08003270 <_ZN12XFEventQueueC1Ev>:
XFEventQueue::XFEventQueue() {
 8003270:	b510      	push	{r4, lr}
 8003272:	4604      	mov	r4, r0
 8003274:	4b09      	ldr	r3, [pc, #36]	; (800329c <_ZN12XFEventQueueC1Ev+0x2c>)
 8003276:	6003      	str	r3, [r0, #0]
	void unlock() override;

	bool tryLock(int32_t timeout = 0) override;

protected:
    XFMutex() = default;     ///< Do not allow to directly create an object of this class. Call interface::XFMutex::create() instead.
 8003278:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <_ZN12XFEventQueueC1Ev+0x30>)
 800327a:	6043      	str	r3, [r0, #4]
	  _M_start(), _M_finish()
 800327c:	2100      	movs	r1, #0
 800327e:	6081      	str	r1, [r0, #8]
 8003280:	60c1      	str	r1, [r0, #12]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8003282:	6101      	str	r1, [r0, #16]
 8003284:	6141      	str	r1, [r0, #20]
 8003286:	6181      	str	r1, [r0, #24]
 8003288:	61c1      	str	r1, [r0, #28]
 800328a:	6201      	str	r1, [r0, #32]
 800328c:	6241      	str	r1, [r0, #36]	; 0x24
 800328e:	6281      	str	r1, [r0, #40]	; 0x28
 8003290:	62c1      	str	r1, [r0, #44]	; 0x2c
      { _M_initialize_map(0); }
 8003292:	3008      	adds	r0, #8
 8003294:	f7ff ffab 	bl	80031ee <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj>
}
 8003298:	4620      	mov	r0, r4
 800329a:	bd10      	pop	{r4, pc}
 800329c:	08004ff0 	.word	0x08004ff0
 80032a0:	08005014 	.word	0x08005014

080032a4 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 80032a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	4606      	mov	r6, r0
 80032ac:	9101      	str	r1, [sp, #4]
 80032ae:	4690      	mov	r8, r2
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80032b0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80032b2:	6940      	ldr	r0, [r0, #20]
 80032b4:	1a17      	subs	r7, r2, r0
 80032b6:	10bd      	asrs	r5, r7, #2
 80032b8:	3501      	adds	r5, #1
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80032ba:	440d      	add	r5, r1

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80032bc:	6873      	ldr	r3, [r6, #4]
 80032be:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
 80032c2:	d922      	bls.n	800330a <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x66>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80032c4:	f8d6 c000 	ldr.w	ip, [r6]
					 - __new_num_nodes) / 2
 80032c8:	1b5c      	subs	r4, r3, r5
 80032ca:	0864      	lsrs	r4, r4, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80032cc:	00a4      	lsls	r4, r4, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 80032ce:	f1b8 0f00 	cmp.w	r8, #0
 80032d2:	d001      	beq.n	80032d8 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x34>
 80032d4:	0089      	lsls	r1, r1, #2
 80032d6:	e000      	b.n	80032da <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x36>
 80032d8:	2100      	movs	r1, #0
 80032da:	440c      	add	r4, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80032dc:	4464      	add	r4, ip
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80032de:	42a0      	cmp	r0, r4
 80032e0:	d908      	bls.n	80032f4 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x50>
	    std::copy(this->_M_impl._M_start._M_node,
 80032e2:	1d13      	adds	r3, r2, #4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 80032e4:	1a1a      	subs	r2, r3, r0
	  if (_Num)
 80032e6:	4298      	cmp	r0, r3
 80032e8:	d039      	beq.n	800335e <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xba>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80032ea:	4601      	mov	r1, r0
 80032ec:	4620      	mov	r0, r4
 80032ee:	f000 fbe9 	bl	8003ac4 <memmove>
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80032f2:	e034      	b.n	800335e <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xba>
		      this->_M_impl._M_finish._M_node + 1,
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80032f4:	1d13      	adds	r3, r2, #4
 80032f6:	1d3a      	adds	r2, r7, #4
 80032f8:	18a5      	adds	r5, r4, r2
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 80032fa:	1a1a      	subs	r2, r3, r0
	  if (_Num)
 80032fc:	4298      	cmp	r0, r3
 80032fe:	d02e      	beq.n	800335e <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xba>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8003300:	4601      	mov	r1, r0
 8003302:	1aa8      	subs	r0, r5, r2
 8003304:	f000 fbde 	bl	8003ac4 <memmove>
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003308:	e029      	b.n	800335e <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xba>
			       __new_nstart + __old_num_nodes);
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
 800330a:	1d32      	adds	r2, r6, #4
      if (__a < __b)
 800330c:	4299      	cmp	r1, r3
 800330e:	d836      	bhi.n	800337e <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xda>
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	4413      	add	r3, r2
	  size_type __new_map_size = this->_M_impl._M_map_size
 8003314:	f103 0902 	add.w	r9, r3, #2
	if (__n > this->max_size())
 8003318:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
 800331c:	d231      	bcs.n	8003382 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xde>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800331e:	ea4f 0089 	mov.w	r0, r9, lsl #2
 8003322:	f000 f904 	bl	800352e <_Znwj>
 8003326:	4682      	mov	sl, r0
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8003328:	eba9 0405 	sub.w	r4, r9, r5
 800332c:	0864      	lsrs	r4, r4, #1
 800332e:	00a4      	lsls	r4, r4, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8003330:	f1b8 0f00 	cmp.w	r8, #0
 8003334:	d027      	beq.n	8003386 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xe2>
 8003336:	9d01      	ldr	r5, [sp, #4]
 8003338:	00ad      	lsls	r5, r5, #2
 800333a:	442c      	add	r4, r5
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800333c:	4454      	add	r4, sl
	  std::copy(this->_M_impl._M_start._M_node,
 800333e:	6971      	ldr	r1, [r6, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8003340:	6a73      	ldr	r3, [r6, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8003342:	3304      	adds	r3, #4
	  const ptrdiff_t _Num = __last - __first;
 8003344:	1a5a      	subs	r2, r3, r1
	  if (_Num)
 8003346:	4299      	cmp	r1, r3
 8003348:	d002      	beq.n	8003350 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xac>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800334a:	4620      	mov	r0, r4
 800334c:	f000 fbba 	bl	8003ac4 <memmove>
	::operator delete(__p);
 8003350:	6830      	ldr	r0, [r6, #0]
 8003352:	f000 f8d9 	bl	8003508 <_ZdlPv>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);

	  this->_M_impl._M_map = __new_map;
 8003356:	f8c6 a000 	str.w	sl, [r6]
	  this->_M_impl._M_map_size = __new_map_size;
 800335a:	f8c6 9004 	str.w	r9, [r6, #4]
	_M_node = __new_node;
 800335e:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
 8003360:	6823      	ldr	r3, [r4, #0]
 8003362:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8003364:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003368:	6133      	str	r3, [r6, #16]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 800336a:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
 800336c:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
 800336e:	59e3      	ldr	r3, [r4, r7]
 8003370:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8003372:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003376:	6233      	str	r3, [r6, #32]
    }
 8003378:	b002      	add	sp, #8
 800337a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return __b;
 800337e:	aa01      	add	r2, sp, #4
 8003380:	e7c6      	b.n	8003310 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x6c>
	  std::__throw_bad_alloc();
 8003382:	f000 f8f4 	bl	800356e <_ZSt17__throw_bad_allocv>
	                 + (__add_at_front ? __nodes_to_add : 0);
 8003386:	2500      	movs	r5, #0
 8003388:	e7d7      	b.n	800333a <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x96>
	...

0800338c <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 800338c:	b570      	push	{r4, r5, r6, lr}
 800338e:	460d      	mov	r5, r1
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8003390:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003392:	6942      	ldr	r2, [r0, #20]
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	109b      	asrs	r3, r3, #2
 8003398:	1e5a      	subs	r2, r3, #1
 800339a:	6983      	ldr	r3, [r0, #24]
 800339c:	69c1      	ldr	r1, [r0, #28]
 800339e:	1a5b      	subs	r3, r3, r1
 80033a0:	109b      	asrs	r3, r3, #2
 80033a2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
 80033a6:	6902      	ldr	r2, [r0, #16]
 80033a8:	6881      	ldr	r1, [r0, #8]
 80033aa:	1a52      	subs	r2, r2, r1
 80033ac:	eb03 03a2 	add.w	r3, r3, r2, asr #2
	if (size() == max_size())
 80033b0:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d01b      	beq.n	80033f0 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x64>
 80033b8:	4604      	mov	r4, r0
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80033ba:	6843      	ldr	r3, [r0, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80033bc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80033be:	6801      	ldr	r1, [r0, #0]
 80033c0:	1a52      	subs	r2, r2, r1
 80033c2:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d915      	bls.n	80033f6 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x6a>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80033ca:	6a66      	ldr	r6, [r4, #36]	; 0x24
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80033cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80033d0:	f000 f8ad 	bl	800352e <_Znwj>
 80033d4:	6070      	str	r0, [r6, #4]
	    _Alloc_traits::construct(this->_M_impl,
 80033d6:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80033d8:	682a      	ldr	r2, [r5, #0]
 80033da:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80033dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033de:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
 80033e0:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80033e6:	f503 7200 	add.w	r2, r3, #512	; 0x200
 80033ea:	6222      	str	r2, [r4, #32]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80033ec:	61a3      	str	r3, [r4, #24]
      }
 80033ee:	bd70      	pop	{r4, r5, r6, pc}
	  __throw_length_error(
 80033f0:	4803      	ldr	r0, [pc, #12]	; (8003400 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x74>)
 80033f2:	f000 f8c2 	bl	800357a <_ZSt20__throw_length_errorPKc>
	  _M_reallocate_map(__nodes_to_add, false);
 80033f6:	2200      	movs	r2, #0
 80033f8:	2101      	movs	r1, #1
 80033fa:	f7ff ff53 	bl	80032a4 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb>
 80033fe:	e7e4      	b.n	80033ca <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x3e>
 8003400:	080051dc 	.word	0x080051dc

08003404 <_ZN12XFEventQueue4pushEPK7XFEventb>:
bool XFEventQueue::push(const XFEvent *pEvent, bool fromISR) {
 8003404:	b530      	push	{r4, r5, lr}
 8003406:	b083      	sub	sp, #12
 8003408:	4604      	mov	r4, r0
 800340a:	9101      	str	r1, [sp, #4]
    if(!fromISR) {
 800340c:	4615      	mov	r5, r2
 800340e:	b17a      	cbz	r2, 8003430 <_ZN12XFEventQueue4pushEPK7XFEventb+0x2c>
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
      { c.push_back(__x); }
 8003410:	f104 0008 	add.w	r0, r4, #8
	if (this->_M_impl._M_finish._M_cur
 8003414:	6982      	ldr	r2, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8003416:	6a03      	ldr	r3, [r0, #32]
 8003418:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 800341a:	429a      	cmp	r2, r3
 800341c:	d00c      	beq.n	8003438 <_ZN12XFEventQueue4pushEPK7XFEventb+0x34>
 800341e:	9b01      	ldr	r3, [sp, #4]
 8003420:	6013      	str	r3, [r2, #0]
	    ++this->_M_impl._M_finish._M_cur;
 8003422:	6983      	ldr	r3, [r0, #24]
 8003424:	3304      	adds	r3, #4
 8003426:	6183      	str	r3, [r0, #24]
    if(!fromISR) {
 8003428:	b155      	cbz	r5, 8003440 <_ZN12XFEventQueue4pushEPK7XFEventb+0x3c>
}
 800342a:	2001      	movs	r0, #1
 800342c:	b003      	add	sp, #12
 800342e:	bd30      	pop	{r4, r5, pc}
        _mutex.lock();
 8003430:	3004      	adds	r0, #4
 8003432:	f000 f80c 	bl	800344e <_ZN7XFMutex4lockEv>
 8003436:	e7eb      	b.n	8003410 <_ZN12XFEventQueue4pushEPK7XFEventb+0xc>
	  _M_push_back_aux(__x);
 8003438:	a901      	add	r1, sp, #4
 800343a:	f7ff ffa7 	bl	800338c <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>
 800343e:	e7f3      	b.n	8003428 <_ZN12XFEventQueue4pushEPK7XFEventb+0x24>
        _mutex.unlock();
 8003440:	1d20      	adds	r0, r4, #4
 8003442:	f000 f808 	bl	8003456 <_ZN7XFMutex6unlockEv>
 8003446:	e7f0      	b.n	800342a <_ZN12XFEventQueue4pushEPK7XFEventb+0x26>

08003448 <_ZN7XFMutex7tryLockEl>:
    exitCritical();
}

bool XFMutex::tryLock(int32_t timeout) {
	return true;
}
 8003448:	2001      	movs	r0, #1
 800344a:	4770      	bx	lr

0800344c <_ZN7XFMutexD1Ev>:
class XFMutex : public interface::XFMutex
 800344c:	4770      	bx	lr

0800344e <_ZN7XFMutex4lockEv>:
void XFMutex::lock() {
 800344e:	b508      	push	{r3, lr}
    enterCritical();
 8003450:	f7ff fb12 	bl	8002a78 <_Z13enterCriticalv>
}
 8003454:	bd08      	pop	{r3, pc}

08003456 <_ZN7XFMutex6unlockEv>:
void XFMutex::unlock() {
 8003456:	b508      	push	{r3, lr}
    exitCritical();
 8003458:	f7ff fb1e 	bl	8002a98 <_Z12exitCriticalv>
}
 800345c:	bd08      	pop	{r3, pc}

0800345e <_ZN7XFMutexD0Ev>:
 800345e:	b510      	push	{r4, lr}
 8003460:	4604      	mov	r4, r0
 8003462:	2104      	movs	r1, #4
 8003464:	f000 f852 	bl	800350c <_ZdlPvj>
 8003468:	4620      	mov	r0, r4
 800346a:	bd10      	pop	{r4, pc}

0800346c <_ZN9interface7XFMutex6createEv>:
{
 800346c:	b508      	push	{r3, lr}
    return new ::XFMutex;
 800346e:	2004      	movs	r0, #4
 8003470:	f000 f85d 	bl	800352e <_Znwj>
    XFMutex() = default;     ///< Do not allow to directly create an object of this class. Call interface::XFMutex::create() instead.
 8003474:	4b01      	ldr	r3, [pc, #4]	; (800347c <_ZN9interface7XFMutex6createEv+0x10>)
 8003476:	6003      	str	r3, [r0, #0]
}
 8003478:	bd08      	pop	{r3, pc}
 800347a:	bf00      	nop
 800347c:	08005014 	.word	0x08005014

08003480 <_ZN2XF10initializeEiiPPc>:
{
    XF::execOnce();
}

void XF::initialize(int timeInterval, int argc, char *argv[]) {
    if (!isInitialized_) {
 8003480:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <_ZN2XF10initializeEiiPPc+0x40>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	b103      	cbz	r3, 8003488 <_ZN2XF10initializeEiiPPc+0x8>
 8003486:	4770      	bx	lr
void XF::initialize(int timeInterval, int argc, char *argv[]) {
 8003488:	b510      	push	{r4, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	4604      	mov	r4, r0
        interface::XFTimeoutManager::getInstance()->initialize(timeInterval);
 800348e:	f7ff fd05 	bl	8002e9c <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8003492:	6803      	ldr	r3, [r0, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	4621      	mov	r1, r4
 8003498:	4798      	blx	r3
        interface::XFTimeoutManager::getInstance()->start();
 800349a:	f7ff fcff 	bl	8002e9c <_ZN9interface16XFTimeoutManager11getInstanceEv>
 800349e:	6803      	ldr	r3, [r0, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
    _Function_base() : _M_manager(nullptr) { }
 80034a2:	2200      	movs	r2, #0
 80034a4:	9202      	str	r2, [sp, #8]
 80034a6:	4669      	mov	r1, sp
 80034a8:	4798      	blx	r3
      if (_M_manager)
 80034aa:	9b02      	ldr	r3, [sp, #8]
 80034ac:	b11b      	cbz	r3, 80034b6 <_ZN2XF10initializeEiiPPc+0x36>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80034ae:	2203      	movs	r2, #3
 80034b0:	4669      	mov	r1, sp
 80034b2:	4668      	mov	r0, sp
 80034b4:	4798      	blx	r3
        
        isInitialized_ = true;
 80034b6:	4b02      	ldr	r3, [pc, #8]	; (80034c0 <_ZN2XF10initializeEiiPPc+0x40>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	701a      	strb	r2, [r3, #0]
    }
}
 80034bc:	b004      	add	sp, #16
 80034be:	bd10      	pop	{r4, pc}
 80034c0:	200002f8 	.word	0x200002f8

080034c4 <XF_initialize>:
{
 80034c4:	b508      	push	{r3, lr}
    XF::initialize(timeInterval);
 80034c6:	2200      	movs	r2, #0
 80034c8:	4611      	mov	r1, r2
 80034ca:	f7ff ffd9 	bl	8003480 <_ZN2XF10initializeEiiPPc>
}
 80034ce:	bd08      	pop	{r3, pc}

080034d0 <_ZN2XF8execOnceEv>:
    while(1) {
        execOnce();
    }
}

int XF::execOnce() {
 80034d0:	b508      	push	{r3, lr}
	isRunning_ = true;
 80034d2:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <_ZN2XF8execOnceEv+0x18>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	705a      	strb	r2, [r3, #1]
    interface::XFDispatcher::getInstance()->executeOnce();
 80034d8:	f7ff fc52 	bl	8002d80 <_ZN9interface12XFDispatcher11getInstanceEv>
 80034dc:	6803      	ldr	r3, [r0, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	4798      	blx	r3

    return 0;
}
 80034e2:	2000      	movs	r0, #0
 80034e4:	bd08      	pop	{r3, pc}
 80034e6:	bf00      	nop
 80034e8:	200002f8 	.word	0x200002f8

080034ec <XF_execOnce>:
{
 80034ec:	b508      	push	{r3, lr}
    XF::execOnce();
 80034ee:	f7ff ffef 	bl	80034d0 <_ZN2XF8execOnceEv>
}
 80034f2:	bd08      	pop	{r3, pc}

080034f4 <_ZN2XF9isRunningEv>:

bool XF::isRunning() {
	return isRunning_ && isInitialized_;
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <_ZN2XF9isRunningEv+0x10>)
 80034f6:	785b      	ldrb	r3, [r3, #1]
 80034f8:	b113      	cbz	r3, 8003500 <_ZN2XF9isRunningEv+0xc>
 80034fa:	4b02      	ldr	r3, [pc, #8]	; (8003504 <_ZN2XF9isRunningEv+0x10>)
 80034fc:	7818      	ldrb	r0, [r3, #0]
 80034fe:	4770      	bx	lr
 8003500:	2000      	movs	r0, #0
}
 8003502:	4770      	bx	lr
 8003504:	200002f8 	.word	0x200002f8

08003508 <_ZdlPv>:
 8003508:	f000 bac6 	b.w	8003a98 <free>

0800350c <_ZdlPvj>:
 800350c:	f7ff bffc 	b.w	8003508 <_ZdlPv>

08003510 <__cxa_guard_acquire>:
 8003510:	6803      	ldr	r3, [r0, #0]
 8003512:	07db      	lsls	r3, r3, #31
 8003514:	d406      	bmi.n	8003524 <__cxa_guard_acquire+0x14>
 8003516:	7843      	ldrb	r3, [r0, #1]
 8003518:	b103      	cbz	r3, 800351c <__cxa_guard_acquire+0xc>
 800351a:	deff      	udf	#255	; 0xff
 800351c:	2301      	movs	r3, #1
 800351e:	7043      	strb	r3, [r0, #1]
 8003520:	4618      	mov	r0, r3
 8003522:	4770      	bx	lr
 8003524:	2000      	movs	r0, #0
 8003526:	4770      	bx	lr

08003528 <__cxa_guard_release>:
 8003528:	2301      	movs	r3, #1
 800352a:	6003      	str	r3, [r0, #0]
 800352c:	4770      	bx	lr

0800352e <_Znwj>:
 800352e:	2801      	cmp	r0, #1
 8003530:	bf38      	it	cc
 8003532:	2001      	movcc	r0, #1
 8003534:	b510      	push	{r4, lr}
 8003536:	4604      	mov	r4, r0
 8003538:	4620      	mov	r0, r4
 800353a:	f000 faa5 	bl	8003a88 <malloc>
 800353e:	b930      	cbnz	r0, 800354e <_Znwj+0x20>
 8003540:	f000 fa38 	bl	80039b4 <_ZSt15get_new_handlerv>
 8003544:	b908      	cbnz	r0, 800354a <_Znwj+0x1c>
 8003546:	f000 fa3d 	bl	80039c4 <abort>
 800354a:	4780      	blx	r0
 800354c:	e7f4      	b.n	8003538 <_Znwj+0xa>
 800354e:	bd10      	pop	{r4, pc}

08003550 <__cxa_pure_virtual>:
 8003550:	b508      	push	{r3, lr}
 8003552:	f000 fa29 	bl	80039a8 <_ZSt9terminatev>

08003556 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 8003556:	684b      	ldr	r3, [r1, #4]
 8003558:	6043      	str	r3, [r0, #4]
 800355a:	684b      	ldr	r3, [r1, #4]
 800355c:	6001      	str	r1, [r0, #0]
 800355e:	6018      	str	r0, [r3, #0]
 8003560:	6048      	str	r0, [r1, #4]
 8003562:	4770      	bx	lr

08003564 <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 8003564:	e9d0 3200 	ldrd	r3, r2, [r0]
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	605a      	str	r2, [r3, #4]
 800356c:	4770      	bx	lr

0800356e <_ZSt17__throw_bad_allocv>:
 800356e:	b508      	push	{r3, lr}
 8003570:	f000 fa28 	bl	80039c4 <abort>

08003574 <_ZSt19__throw_logic_errorPKc>:
 8003574:	b508      	push	{r3, lr}
 8003576:	f000 fa25 	bl	80039c4 <abort>

0800357a <_ZSt20__throw_length_errorPKc>:
 800357a:	b508      	push	{r3, lr}
 800357c:	f000 fa22 	bl	80039c4 <abort>

08003580 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8003580:	b40f      	push	{r0, r1, r2, r3}
 8003582:	b580      	push	{r7, lr}
 8003584:	b084      	sub	sp, #16
 8003586:	af00      	add	r7, sp, #0
 8003588:	f107 0418 	add.w	r4, r7, #24
 800358c:	f854 2b04 	ldr.w	r2, [r4], #4
 8003590:	607a      	str	r2, [r7, #4]
 8003592:	4610      	mov	r0, r2
 8003594:	f7fc fe8c 	bl	80002b0 <strlen>
 8003598:	f200 2307 	addw	r3, r0, #519	; 0x207
 800359c:	f023 0307 	bic.w	r3, r3, #7
 80035a0:	ebad 0d03 	sub.w	sp, sp, r3
 80035a4:	f500 7100 	add.w	r1, r0, #512	; 0x200
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	60fc      	str	r4, [r7, #12]
 80035ac:	4623      	mov	r3, r4
 80035ae:	4668      	mov	r0, sp
 80035b0:	f000 f858 	bl	8003664 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80035b4:	f000 fa06 	bl	80039c4 <abort>

080035b8 <_ZSt25__throw_bad_function_callv>:
 80035b8:	b508      	push	{r3, lr}
 80035ba:	f000 fa03 	bl	80039c4 <abort>
	...

080035c0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b09c      	sub	sp, #112	; 0x70
 80035c4:	4606      	mov	r6, r0
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	460c      	mov	r4, r1
 80035ca:	1ba4      	subs	r4, r4, r6
 80035cc:	490e      	ldr	r1, [pc, #56]	; (8003608 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80035ce:	2269      	movs	r2, #105	; 0x69
 80035d0:	1d38      	adds	r0, r7, #4
 80035d2:	f000 fa69 	bl	8003aa8 <memcpy>
 80035d6:	f104 0370 	add.w	r3, r4, #112	; 0x70
 80035da:	f023 0307 	bic.w	r3, r3, #7
 80035de:	ebad 0d03 	sub.w	sp, sp, r3
 80035e2:	466d      	mov	r5, sp
 80035e4:	2268      	movs	r2, #104	; 0x68
 80035e6:	1d39      	adds	r1, r7, #4
 80035e8:	4628      	mov	r0, r5
 80035ea:	f000 fa5d 	bl	8003aa8 <memcpy>
 80035ee:	4622      	mov	r2, r4
 80035f0:	4631      	mov	r1, r6
 80035f2:	f105 0068 	add.w	r0, r5, #104	; 0x68
 80035f6:	442c      	add	r4, r5
 80035f8:	f000 fa56 	bl	8003aa8 <memcpy>
 80035fc:	2300      	movs	r3, #0
 80035fe:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8003602:	4628      	mov	r0, r5
 8003604:	f7ff ffb6 	bl	8003574 <_ZSt19__throw_logic_errorPKc>
 8003608:	0800520c 	.word	0x0800520c

0800360c <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 800360c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003610:	af00      	add	r7, sp, #0
 8003612:	b084      	sub	sp, #16
 8003614:	466d      	mov	r5, sp
 8003616:	f105 040c 	add.w	r4, r5, #12
 800361a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8003660 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 800361e:	4623      	mov	r3, r4
 8003620:	f04f 0c0a 	mov.w	ip, #10
 8003624:	fbb2 f6fc 	udiv	r6, r2, ip
 8003628:	fb0c 2e16 	mls	lr, ip, r6, r2
 800362c:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8003630:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8003634:	4696      	mov	lr, r2
 8003636:	f1be 0f09 	cmp.w	lr, #9
 800363a:	4632      	mov	r2, r6
 800363c:	d8f2      	bhi.n	8003624 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 800363e:	1ae4      	subs	r4, r4, r3
 8003640:	428c      	cmp	r4, r1
 8003642:	d809      	bhi.n	8003658 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8003644:	f1c4 010c 	rsb	r1, r4, #12
 8003648:	4622      	mov	r2, r4
 800364a:	4429      	add	r1, r5
 800364c:	f000 fa2c 	bl	8003aa8 <memcpy>
 8003650:	4620      	mov	r0, r4
 8003652:	46bd      	mov	sp, r7
 8003654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003658:	f04f 34ff 	mov.w	r4, #4294967295
 800365c:	e7f8      	b.n	8003650 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800365e:	bf00      	nop
 8003660:	08005275 	.word	0x08005275

08003664 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8003664:	3901      	subs	r1, #1
 8003666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800366a:	4607      	mov	r7, r0
 800366c:	4615      	mov	r5, r2
 800366e:	eb00 0801 	add.w	r8, r0, r1
 8003672:	4604      	mov	r4, r0
 8003674:	782a      	ldrb	r2, [r5, #0]
 8003676:	b362      	cbz	r2, 80036d2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8003678:	4544      	cmp	r4, r8
 800367a:	d22e      	bcs.n	80036da <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 800367c:	2a25      	cmp	r2, #37	; 0x25
 800367e:	d107      	bne.n	8003690 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8003680:	786a      	ldrb	r2, [r5, #1]
 8003682:	2a73      	cmp	r2, #115	; 0x73
 8003684:	d009      	beq.n	800369a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8003686:	2a7a      	cmp	r2, #122	; 0x7a
 8003688:	d012      	beq.n	80036b0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 800368a:	2a25      	cmp	r2, #37	; 0x25
 800368c:	d100      	bne.n	8003690 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800368e:	3501      	adds	r5, #1
 8003690:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003694:	f804 2b01 	strb.w	r2, [r4], #1
 8003698:	e7ec      	b.n	8003674 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800369a:	f853 2b04 	ldr.w	r2, [r3], #4
 800369e:	3a01      	subs	r2, #1
 80036a0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80036a4:	b1e9      	cbz	r1, 80036e2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7e>
 80036a6:	4544      	cmp	r4, r8
 80036a8:	d017      	beq.n	80036da <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 80036aa:	f804 1b01 	strb.w	r1, [r4], #1
 80036ae:	e7f7      	b.n	80036a0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 80036b0:	78aa      	ldrb	r2, [r5, #2]
 80036b2:	2a75      	cmp	r2, #117	; 0x75
 80036b4:	d1ec      	bne.n	8003690 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80036b6:	461e      	mov	r6, r3
 80036b8:	eba8 0104 	sub.w	r1, r8, r4
 80036bc:	f856 2b04 	ldr.w	r2, [r6], #4
 80036c0:	4620      	mov	r0, r4
 80036c2:	f7ff ffa3 	bl	800360c <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80036c6:	2800      	cmp	r0, #0
 80036c8:	dd07      	ble.n	80036da <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 80036ca:	4404      	add	r4, r0
 80036cc:	3503      	adds	r5, #3
 80036ce:	4633      	mov	r3, r6
 80036d0:	e7d0      	b.n	8003674 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80036d2:	7022      	strb	r2, [r4, #0]
 80036d4:	1be0      	subs	r0, r4, r7
 80036d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036da:	4621      	mov	r1, r4
 80036dc:	4638      	mov	r0, r7
 80036de:	f7ff ff6f 	bl	80035c0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80036e2:	3502      	adds	r5, #2
 80036e4:	e7c6      	b.n	8003674 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>

080036e6 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80036e6:	b10a      	cbz	r2, 80036ec <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80036e8:	f000 b9de 	b.w	8003aa8 <memcpy>
 80036ec:	4770      	bx	lr
	...

080036f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80036f0:	b508      	push	{r3, lr}
 80036f2:	680b      	ldr	r3, [r1, #0]
 80036f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f8:	d302      	bcc.n	8003700 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80036fa:	480d      	ldr	r0, [pc, #52]	; (8003730 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80036fc:	f7ff ff3d 	bl	800357a <_ZSt20__throw_length_errorPKc>
 8003700:	4293      	cmp	r3, r2
 8003702:	d90b      	bls.n	800371c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8003704:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8003708:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800370c:	d206      	bcs.n	800371c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800370e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003712:	bf2a      	itet	cs
 8003714:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8003718:	6008      	strcc	r0, [r1, #0]
 800371a:	600b      	strcs	r3, [r1, #0]
 800371c:	6808      	ldr	r0, [r1, #0]
 800371e:	3001      	adds	r0, #1
 8003720:	d501      	bpl.n	8003726 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8003722:	f7ff ff24 	bl	800356e <_ZSt17__throw_bad_allocv>
 8003726:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800372a:	f7ff bf00 	b.w	800352e <_Znwj>
 800372e:	bf00      	nop
 8003730:	08005280 	.word	0x08005280

08003734 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8003734:	f850 3b08 	ldr.w	r3, [r0], #8
 8003738:	4283      	cmp	r3, r0
 800373a:	d002      	beq.n	8003742 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff bee3 	b.w	8003508 <_ZdlPv>
 8003742:	4770      	bx	lr

08003744 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8003744:	6840      	ldr	r0, [r0, #4]
 8003746:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800374a:	3901      	subs	r1, #1
 800374c:	1a09      	subs	r1, r1, r0
 800374e:	4291      	cmp	r1, r2
 8003750:	b508      	push	{r3, lr}
 8003752:	d202      	bcs.n	800375a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff ff10 	bl	800357a <_ZSt20__throw_length_errorPKc>
 800375a:	bd08      	pop	{r3, pc}

0800375c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800375c:	6803      	ldr	r3, [r0, #0]
 800375e:	428b      	cmp	r3, r1
 8003760:	d806      	bhi.n	8003770 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8003762:	6840      	ldr	r0, [r0, #4]
 8003764:	4418      	add	r0, r3
 8003766:	4281      	cmp	r1, r0
 8003768:	bf94      	ite	ls
 800376a:	2000      	movls	r0, #0
 800376c:	2001      	movhi	r0, #1
 800376e:	4770      	bx	lr
 8003770:	2001      	movs	r0, #1
 8003772:	4770      	bx	lr

08003774 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8003774:	2a01      	cmp	r2, #1
 8003776:	b510      	push	{r4, lr}
 8003778:	d102      	bne.n	8003780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800377a:	780a      	ldrb	r2, [r1, #0]
 800377c:	7002      	strb	r2, [r0, #0]
 800377e:	bd10      	pop	{r4, pc}
 8003780:	f7ff ffb1 	bl	80036e6 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8003784:	e7fb      	b.n	800377e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08003786 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8003786:	2a01      	cmp	r2, #1
 8003788:	b430      	push	{r4, r5}
 800378a:	d103      	bne.n	8003794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800378c:	780b      	ldrb	r3, [r1, #0]
 800378e:	7003      	strb	r3, [r0, #0]
 8003790:	bc30      	pop	{r4, r5}
 8003792:	4770      	bx	lr
 8003794:	2a00      	cmp	r2, #0
 8003796:	d0fb      	beq.n	8003790 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8003798:	bc30      	pop	{r4, r5}
 800379a:	f000 b993 	b.w	8003ac4 <memmove>

0800379e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800379e:	b508      	push	{r3, lr}
 80037a0:	1a52      	subs	r2, r2, r1
 80037a2:	f7ff ffe7 	bl	8003774 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80037a6:	bd08      	pop	{r3, pc}

080037a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80037a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80037ac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80037ae:	461f      	mov	r7, r3
 80037b0:	6843      	ldr	r3, [r0, #4]
 80037b2:	eb01 0802 	add.w	r8, r1, r2
 80037b6:	1ab2      	subs	r2, r6, r2
 80037b8:	441a      	add	r2, r3
 80037ba:	eba3 0908 	sub.w	r9, r3, r8
 80037be:	4603      	mov	r3, r0
 80037c0:	9201      	str	r2, [sp, #4]
 80037c2:	f853 2b08 	ldr.w	r2, [r3], #8
 80037c6:	429a      	cmp	r2, r3
 80037c8:	bf18      	it	ne
 80037ca:	6882      	ldrne	r2, [r0, #8]
 80037cc:	460d      	mov	r5, r1
 80037ce:	bf08      	it	eq
 80037d0:	220f      	moveq	r2, #15
 80037d2:	a901      	add	r1, sp, #4
 80037d4:	4604      	mov	r4, r0
 80037d6:	f7ff ff8b 	bl	80036f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80037da:	4682      	mov	sl, r0
 80037dc:	b11d      	cbz	r5, 80037e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80037de:	6821      	ldr	r1, [r4, #0]
 80037e0:	462a      	mov	r2, r5
 80037e2:	f7ff ffc7 	bl	8003774 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80037e6:	b137      	cbz	r7, 80037f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80037e8:	b12e      	cbz	r6, 80037f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80037ea:	4632      	mov	r2, r6
 80037ec:	4639      	mov	r1, r7
 80037ee:	eb0a 0005 	add.w	r0, sl, r5
 80037f2:	f7ff ffbf 	bl	8003774 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80037f6:	f1b9 0f00 	cmp.w	r9, #0
 80037fa:	d007      	beq.n	800380c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 80037fc:	6821      	ldr	r1, [r4, #0]
 80037fe:	4435      	add	r5, r6
 8003800:	464a      	mov	r2, r9
 8003802:	4441      	add	r1, r8
 8003804:	eb0a 0005 	add.w	r0, sl, r5
 8003808:	f7ff ffb4 	bl	8003774 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800380c:	4620      	mov	r0, r4
 800380e:	f7ff ff91 	bl	8003734 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003812:	9b01      	ldr	r3, [sp, #4]
 8003814:	f8c4 a000 	str.w	sl, [r4]
 8003818:	60a3      	str	r3, [r4, #8]
 800381a:	b002      	add	sp, #8
 800381c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8003820:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003824:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003826:	4614      	mov	r4, r2
 8003828:	4680      	mov	r8, r0
 800382a:	462a      	mov	r2, r5
 800382c:	4689      	mov	r9, r1
 800382e:	461f      	mov	r7, r3
 8003830:	4621      	mov	r1, r4
 8003832:	4b39      	ldr	r3, [pc, #228]	; (8003918 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 8003834:	f7ff ff86 	bl	8003744 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8003838:	4642      	mov	r2, r8
 800383a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800383e:	f852 6b08 	ldr.w	r6, [r2], #8
 8003842:	4296      	cmp	r6, r2
 8003844:	bf18      	it	ne
 8003846:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 800384a:	eba5 0b04 	sub.w	fp, r5, r4
 800384e:	eb03 0a0b 	add.w	sl, r3, fp
 8003852:	bf08      	it	eq
 8003854:	220f      	moveq	r2, #15
 8003856:	4552      	cmp	r2, sl
 8003858:	d351      	bcc.n	80038fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 800385a:	444e      	add	r6, r9
 800385c:	4639      	mov	r1, r7
 800385e:	44a1      	add	r9, r4
 8003860:	4640      	mov	r0, r8
 8003862:	eba3 0909 	sub.w	r9, r3, r9
 8003866:	f7ff ff79 	bl	800375c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 800386a:	b180      	cbz	r0, 800388e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 800386c:	f1b9 0f00 	cmp.w	r9, #0
 8003870:	d006      	beq.n	8003880 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8003872:	42ac      	cmp	r4, r5
 8003874:	d004      	beq.n	8003880 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8003876:	464a      	mov	r2, r9
 8003878:	1931      	adds	r1, r6, r4
 800387a:	1970      	adds	r0, r6, r5
 800387c:	f7ff ff83 	bl	8003786 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8003880:	b315      	cbz	r5, 80038c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8003882:	462a      	mov	r2, r5
 8003884:	4639      	mov	r1, r7
 8003886:	4630      	mov	r0, r6
 8003888:	f7ff ff74 	bl	8003774 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800388c:	e01c      	b.n	80038c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800388e:	b135      	cbz	r5, 800389e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8003890:	42ac      	cmp	r4, r5
 8003892:	d33c      	bcc.n	800390e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 8003894:	462a      	mov	r2, r5
 8003896:	4639      	mov	r1, r7
 8003898:	4630      	mov	r0, r6
 800389a:	f7ff ff74 	bl	8003786 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800389e:	f1b9 0f00 	cmp.w	r9, #0
 80038a2:	d011      	beq.n	80038c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80038a4:	42ac      	cmp	r4, r5
 80038a6:	d00f      	beq.n	80038c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80038a8:	464a      	mov	r2, r9
 80038aa:	1931      	adds	r1, r6, r4
 80038ac:	1970      	adds	r0, r6, r5
 80038ae:	f7ff ff6a 	bl	8003786 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80038b2:	42ac      	cmp	r4, r5
 80038b4:	d208      	bcs.n	80038c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80038b6:	4434      	add	r4, r6
 80038b8:	197b      	adds	r3, r7, r5
 80038ba:	429c      	cmp	r4, r3
 80038bc:	d30f      	bcc.n	80038de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 80038be:	462a      	mov	r2, r5
 80038c0:	4639      	mov	r1, r7
 80038c2:	4630      	mov	r0, r6
 80038c4:	f7ff ff5f 	bl	8003786 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80038c8:	f8d8 3000 	ldr.w	r3, [r8]
 80038cc:	f8c8 a004 	str.w	sl, [r8, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	4640      	mov	r0, r8
 80038d4:	f803 200a 	strb.w	r2, [r3, sl]
 80038d8:	b003      	add	sp, #12
 80038da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038de:	42bc      	cmp	r4, r7
 80038e0:	d803      	bhi.n	80038ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 80038e2:	462a      	mov	r2, r5
 80038e4:	eb07 010b 	add.w	r1, r7, fp
 80038e8:	e7cd      	b.n	8003886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 80038ea:	1be4      	subs	r4, r4, r7
 80038ec:	4622      	mov	r2, r4
 80038ee:	4639      	mov	r1, r7
 80038f0:	4630      	mov	r0, r6
 80038f2:	f7ff ff48 	bl	8003786 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80038f6:	1b2a      	subs	r2, r5, r4
 80038f8:	1971      	adds	r1, r6, r5
 80038fa:	1930      	adds	r0, r6, r4
 80038fc:	e7c4      	b.n	8003888 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 80038fe:	9500      	str	r5, [sp, #0]
 8003900:	463b      	mov	r3, r7
 8003902:	4622      	mov	r2, r4
 8003904:	4649      	mov	r1, r9
 8003906:	4640      	mov	r0, r8
 8003908:	f7ff ff4e 	bl	80037a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800390c:	e7dc      	b.n	80038c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800390e:	f1b9 0f00 	cmp.w	r9, #0
 8003912:	d0d0      	beq.n	80038b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 8003914:	e7c8      	b.n	80038a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 8003916:	bf00      	nop
 8003918:	08005298 	.word	0x08005298

0800391c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800391c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800391e:	4604      	mov	r4, r0
 8003920:	4616      	mov	r6, r2
 8003922:	460d      	mov	r5, r1
 8003924:	b919      	cbnz	r1, 800392e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8003926:	b112      	cbz	r2, 800392e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8003928:	480d      	ldr	r0, [pc, #52]	; (8003960 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800392a:	f7ff fe23 	bl	8003574 <_ZSt19__throw_logic_errorPKc>
 800392e:	1b73      	subs	r3, r6, r5
 8003930:	2b0f      	cmp	r3, #15
 8003932:	9301      	str	r3, [sp, #4]
 8003934:	d907      	bls.n	8003946 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8003936:	2200      	movs	r2, #0
 8003938:	a901      	add	r1, sp, #4
 800393a:	4620      	mov	r0, r4
 800393c:	f7ff fed8 	bl	80036f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8003940:	9b01      	ldr	r3, [sp, #4]
 8003942:	6020      	str	r0, [r4, #0]
 8003944:	60a3      	str	r3, [r4, #8]
 8003946:	4632      	mov	r2, r6
 8003948:	4629      	mov	r1, r5
 800394a:	6820      	ldr	r0, [r4, #0]
 800394c:	f7ff ff27 	bl	800379e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8003950:	9b01      	ldr	r3, [sp, #4]
 8003952:	6822      	ldr	r2, [r4, #0]
 8003954:	6063      	str	r3, [r4, #4]
 8003956:	2100      	movs	r1, #0
 8003958:	54d1      	strb	r1, [r2, r3]
 800395a:	b002      	add	sp, #8
 800395c:	bd70      	pop	{r4, r5, r6, pc}
 800395e:	bf00      	nop
 8003960:	080052b1 	.word	0x080052b1

08003964 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8003964:	b538      	push	{r3, r4, r5, lr}
 8003966:	f100 0308 	add.w	r3, r0, #8
 800396a:	4604      	mov	r4, r0
 800396c:	6003      	str	r3, [r0, #0]
 800396e:	460d      	mov	r5, r1
 8003970:	b159      	cbz	r1, 800398a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8003972:	4608      	mov	r0, r1
 8003974:	f7fc fc9c 	bl	80002b0 <strlen>
 8003978:	182a      	adds	r2, r5, r0
 800397a:	4620      	mov	r0, r4
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	4629      	mov	r1, r5
 8003982:	f7ff ffcb 	bl	800391c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8003986:	4620      	mov	r0, r4
 8003988:	bd38      	pop	{r3, r4, r5, pc}
 800398a:	f04f 32ff 	mov.w	r2, #4294967295
 800398e:	e7f4      	b.n	800397a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08003990 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8003990:	b508      	push	{r3, lr}
 8003992:	4780      	blx	r0
 8003994:	f000 f816 	bl	80039c4 <abort>

08003998 <_ZSt13get_terminatev>:
 8003998:	4b02      	ldr	r3, [pc, #8]	; (80039a4 <_ZSt13get_terminatev+0xc>)
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	f3bf 8f5b 	dmb	ish
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	2000000c 	.word	0x2000000c

080039a8 <_ZSt9terminatev>:
 80039a8:	b508      	push	{r3, lr}
 80039aa:	f7ff fff5 	bl	8003998 <_ZSt13get_terminatev>
 80039ae:	f7ff ffef 	bl	8003990 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080039b4 <_ZSt15get_new_handlerv>:
 80039b4:	4b02      	ldr	r3, [pc, #8]	; (80039c0 <_ZSt15get_new_handlerv+0xc>)
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	f3bf 8f5b 	dmb	ish
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	200002fc 	.word	0x200002fc

080039c4 <abort>:
 80039c4:	b508      	push	{r3, lr}
 80039c6:	2006      	movs	r0, #6
 80039c8:	f000 fc6e 	bl	80042a8 <raise>
 80039cc:	2001      	movs	r0, #1
 80039ce:	f001 fa79 	bl	8004ec4 <_exit>
	...

080039d4 <__assert_func>:
 80039d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80039d6:	4614      	mov	r4, r2
 80039d8:	461a      	mov	r2, r3
 80039da:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <__assert_func+0x2c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4605      	mov	r5, r0
 80039e0:	68d8      	ldr	r0, [r3, #12]
 80039e2:	b14c      	cbz	r4, 80039f8 <__assert_func+0x24>
 80039e4:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <__assert_func+0x30>)
 80039e6:	9100      	str	r1, [sp, #0]
 80039e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80039ec:	4906      	ldr	r1, [pc, #24]	; (8003a08 <__assert_func+0x34>)
 80039ee:	462b      	mov	r3, r5
 80039f0:	f000 f814 	bl	8003a1c <fiprintf>
 80039f4:	f7ff ffe6 	bl	80039c4 <abort>
 80039f8:	4b04      	ldr	r3, [pc, #16]	; (8003a0c <__assert_func+0x38>)
 80039fa:	461c      	mov	r4, r3
 80039fc:	e7f3      	b.n	80039e6 <__assert_func+0x12>
 80039fe:	bf00      	nop
 8003a00:	20000010 	.word	0x20000010
 8003a04:	080052db 	.word	0x080052db
 8003a08:	080052e8 	.word	0x080052e8
 8003a0c:	08005316 	.word	0x08005316

08003a10 <atexit>:
 8003a10:	2300      	movs	r3, #0
 8003a12:	4601      	mov	r1, r0
 8003a14:	461a      	mov	r2, r3
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 bd42 	b.w	80044a0 <__register_exitproc>

08003a1c <fiprintf>:
 8003a1c:	b40e      	push	{r1, r2, r3}
 8003a1e:	b503      	push	{r0, r1, lr}
 8003a20:	4601      	mov	r1, r0
 8003a22:	ab03      	add	r3, sp, #12
 8003a24:	4805      	ldr	r0, [pc, #20]	; (8003a3c <fiprintf+0x20>)
 8003a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a2a:	6800      	ldr	r0, [r0, #0]
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	f000 f93f 	bl	8003cb0 <_vfiprintf_r>
 8003a32:	b002      	add	sp, #8
 8003a34:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a38:	b003      	add	sp, #12
 8003a3a:	4770      	bx	lr
 8003a3c:	20000010 	.word	0x20000010

08003a40 <__libc_init_array>:
 8003a40:	b570      	push	{r4, r5, r6, lr}
 8003a42:	4d0d      	ldr	r5, [pc, #52]	; (8003a78 <__libc_init_array+0x38>)
 8003a44:	4c0d      	ldr	r4, [pc, #52]	; (8003a7c <__libc_init_array+0x3c>)
 8003a46:	1b64      	subs	r4, r4, r5
 8003a48:	10a4      	asrs	r4, r4, #2
 8003a4a:	2600      	movs	r6, #0
 8003a4c:	42a6      	cmp	r6, r4
 8003a4e:	d109      	bne.n	8003a64 <__libc_init_array+0x24>
 8003a50:	4d0b      	ldr	r5, [pc, #44]	; (8003a80 <__libc_init_array+0x40>)
 8003a52:	4c0c      	ldr	r4, [pc, #48]	; (8003a84 <__libc_init_array+0x44>)
 8003a54:	f001 fa38 	bl	8004ec8 <_init>
 8003a58:	1b64      	subs	r4, r4, r5
 8003a5a:	10a4      	asrs	r4, r4, #2
 8003a5c:	2600      	movs	r6, #0
 8003a5e:	42a6      	cmp	r6, r4
 8003a60:	d105      	bne.n	8003a6e <__libc_init_array+0x2e>
 8003a62:	bd70      	pop	{r4, r5, r6, pc}
 8003a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a68:	4798      	blx	r3
 8003a6a:	3601      	adds	r6, #1
 8003a6c:	e7ee      	b.n	8003a4c <__libc_init_array+0xc>
 8003a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a72:	4798      	blx	r3
 8003a74:	3601      	adds	r6, #1
 8003a76:	e7f2      	b.n	8003a5e <__libc_init_array+0x1e>
 8003a78:	080053b8 	.word	0x080053b8
 8003a7c:	080053b8 	.word	0x080053b8
 8003a80:	080053b8 	.word	0x080053b8
 8003a84:	080053c4 	.word	0x080053c4

08003a88 <malloc>:
 8003a88:	4b02      	ldr	r3, [pc, #8]	; (8003a94 <malloc+0xc>)
 8003a8a:	4601      	mov	r1, r0
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	f000 b88b 	b.w	8003ba8 <_malloc_r>
 8003a92:	bf00      	nop
 8003a94:	20000010 	.word	0x20000010

08003a98 <free>:
 8003a98:	4b02      	ldr	r3, [pc, #8]	; (8003aa4 <free+0xc>)
 8003a9a:	4601      	mov	r1, r0
 8003a9c:	6818      	ldr	r0, [r3, #0]
 8003a9e:	f000 b833 	b.w	8003b08 <_free_r>
 8003aa2:	bf00      	nop
 8003aa4:	20000010 	.word	0x20000010

08003aa8 <memcpy>:
 8003aa8:	440a      	add	r2, r1
 8003aaa:	4291      	cmp	r1, r2
 8003aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ab0:	d100      	bne.n	8003ab4 <memcpy+0xc>
 8003ab2:	4770      	bx	lr
 8003ab4:	b510      	push	{r4, lr}
 8003ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003aba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003abe:	4291      	cmp	r1, r2
 8003ac0:	d1f9      	bne.n	8003ab6 <memcpy+0xe>
 8003ac2:	bd10      	pop	{r4, pc}

08003ac4 <memmove>:
 8003ac4:	4288      	cmp	r0, r1
 8003ac6:	b510      	push	{r4, lr}
 8003ac8:	eb01 0402 	add.w	r4, r1, r2
 8003acc:	d902      	bls.n	8003ad4 <memmove+0x10>
 8003ace:	4284      	cmp	r4, r0
 8003ad0:	4623      	mov	r3, r4
 8003ad2:	d807      	bhi.n	8003ae4 <memmove+0x20>
 8003ad4:	1e43      	subs	r3, r0, #1
 8003ad6:	42a1      	cmp	r1, r4
 8003ad8:	d008      	beq.n	8003aec <memmove+0x28>
 8003ada:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ade:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ae2:	e7f8      	b.n	8003ad6 <memmove+0x12>
 8003ae4:	4402      	add	r2, r0
 8003ae6:	4601      	mov	r1, r0
 8003ae8:	428a      	cmp	r2, r1
 8003aea:	d100      	bne.n	8003aee <memmove+0x2a>
 8003aec:	bd10      	pop	{r4, pc}
 8003aee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003af2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003af6:	e7f7      	b.n	8003ae8 <memmove+0x24>

08003af8 <memset>:
 8003af8:	4402      	add	r2, r0
 8003afa:	4603      	mov	r3, r0
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d100      	bne.n	8003b02 <memset+0xa>
 8003b00:	4770      	bx	lr
 8003b02:	f803 1b01 	strb.w	r1, [r3], #1
 8003b06:	e7f9      	b.n	8003afc <memset+0x4>

08003b08 <_free_r>:
 8003b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b0a:	2900      	cmp	r1, #0
 8003b0c:	d048      	beq.n	8003ba0 <_free_r+0x98>
 8003b0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b12:	9001      	str	r0, [sp, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f1a1 0404 	sub.w	r4, r1, #4
 8003b1a:	bfb8      	it	lt
 8003b1c:	18e4      	addlt	r4, r4, r3
 8003b1e:	f000 ff41 	bl	80049a4 <__malloc_lock>
 8003b22:	4a20      	ldr	r2, [pc, #128]	; (8003ba4 <_free_r+0x9c>)
 8003b24:	9801      	ldr	r0, [sp, #4]
 8003b26:	6813      	ldr	r3, [r2, #0]
 8003b28:	4615      	mov	r5, r2
 8003b2a:	b933      	cbnz	r3, 8003b3a <_free_r+0x32>
 8003b2c:	6063      	str	r3, [r4, #4]
 8003b2e:	6014      	str	r4, [r2, #0]
 8003b30:	b003      	add	sp, #12
 8003b32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b36:	f000 bf3b 	b.w	80049b0 <__malloc_unlock>
 8003b3a:	42a3      	cmp	r3, r4
 8003b3c:	d90b      	bls.n	8003b56 <_free_r+0x4e>
 8003b3e:	6821      	ldr	r1, [r4, #0]
 8003b40:	1862      	adds	r2, r4, r1
 8003b42:	4293      	cmp	r3, r2
 8003b44:	bf04      	itt	eq
 8003b46:	681a      	ldreq	r2, [r3, #0]
 8003b48:	685b      	ldreq	r3, [r3, #4]
 8003b4a:	6063      	str	r3, [r4, #4]
 8003b4c:	bf04      	itt	eq
 8003b4e:	1852      	addeq	r2, r2, r1
 8003b50:	6022      	streq	r2, [r4, #0]
 8003b52:	602c      	str	r4, [r5, #0]
 8003b54:	e7ec      	b.n	8003b30 <_free_r+0x28>
 8003b56:	461a      	mov	r2, r3
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	b10b      	cbz	r3, 8003b60 <_free_r+0x58>
 8003b5c:	42a3      	cmp	r3, r4
 8003b5e:	d9fa      	bls.n	8003b56 <_free_r+0x4e>
 8003b60:	6811      	ldr	r1, [r2, #0]
 8003b62:	1855      	adds	r5, r2, r1
 8003b64:	42a5      	cmp	r5, r4
 8003b66:	d10b      	bne.n	8003b80 <_free_r+0x78>
 8003b68:	6824      	ldr	r4, [r4, #0]
 8003b6a:	4421      	add	r1, r4
 8003b6c:	1854      	adds	r4, r2, r1
 8003b6e:	42a3      	cmp	r3, r4
 8003b70:	6011      	str	r1, [r2, #0]
 8003b72:	d1dd      	bne.n	8003b30 <_free_r+0x28>
 8003b74:	681c      	ldr	r4, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	6053      	str	r3, [r2, #4]
 8003b7a:	4421      	add	r1, r4
 8003b7c:	6011      	str	r1, [r2, #0]
 8003b7e:	e7d7      	b.n	8003b30 <_free_r+0x28>
 8003b80:	d902      	bls.n	8003b88 <_free_r+0x80>
 8003b82:	230c      	movs	r3, #12
 8003b84:	6003      	str	r3, [r0, #0]
 8003b86:	e7d3      	b.n	8003b30 <_free_r+0x28>
 8003b88:	6825      	ldr	r5, [r4, #0]
 8003b8a:	1961      	adds	r1, r4, r5
 8003b8c:	428b      	cmp	r3, r1
 8003b8e:	bf04      	itt	eq
 8003b90:	6819      	ldreq	r1, [r3, #0]
 8003b92:	685b      	ldreq	r3, [r3, #4]
 8003b94:	6063      	str	r3, [r4, #4]
 8003b96:	bf04      	itt	eq
 8003b98:	1949      	addeq	r1, r1, r5
 8003b9a:	6021      	streq	r1, [r4, #0]
 8003b9c:	6054      	str	r4, [r2, #4]
 8003b9e:	e7c7      	b.n	8003b30 <_free_r+0x28>
 8003ba0:	b003      	add	sp, #12
 8003ba2:	bd30      	pop	{r4, r5, pc}
 8003ba4:	20000300 	.word	0x20000300

08003ba8 <_malloc_r>:
 8003ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003baa:	1ccd      	adds	r5, r1, #3
 8003bac:	f025 0503 	bic.w	r5, r5, #3
 8003bb0:	3508      	adds	r5, #8
 8003bb2:	2d0c      	cmp	r5, #12
 8003bb4:	bf38      	it	cc
 8003bb6:	250c      	movcc	r5, #12
 8003bb8:	2d00      	cmp	r5, #0
 8003bba:	4606      	mov	r6, r0
 8003bbc:	db01      	blt.n	8003bc2 <_malloc_r+0x1a>
 8003bbe:	42a9      	cmp	r1, r5
 8003bc0:	d903      	bls.n	8003bca <_malloc_r+0x22>
 8003bc2:	230c      	movs	r3, #12
 8003bc4:	6033      	str	r3, [r6, #0]
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bca:	f000 feeb 	bl	80049a4 <__malloc_lock>
 8003bce:	4921      	ldr	r1, [pc, #132]	; (8003c54 <_malloc_r+0xac>)
 8003bd0:	680a      	ldr	r2, [r1, #0]
 8003bd2:	4614      	mov	r4, r2
 8003bd4:	b99c      	cbnz	r4, 8003bfe <_malloc_r+0x56>
 8003bd6:	4f20      	ldr	r7, [pc, #128]	; (8003c58 <_malloc_r+0xb0>)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	b923      	cbnz	r3, 8003be6 <_malloc_r+0x3e>
 8003bdc:	4621      	mov	r1, r4
 8003bde:	4630      	mov	r0, r6
 8003be0:	f000 fb2a 	bl	8004238 <_sbrk_r>
 8003be4:	6038      	str	r0, [r7, #0]
 8003be6:	4629      	mov	r1, r5
 8003be8:	4630      	mov	r0, r6
 8003bea:	f000 fb25 	bl	8004238 <_sbrk_r>
 8003bee:	1c43      	adds	r3, r0, #1
 8003bf0:	d123      	bne.n	8003c3a <_malloc_r+0x92>
 8003bf2:	230c      	movs	r3, #12
 8003bf4:	6033      	str	r3, [r6, #0]
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	f000 feda 	bl	80049b0 <__malloc_unlock>
 8003bfc:	e7e3      	b.n	8003bc6 <_malloc_r+0x1e>
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	1b5b      	subs	r3, r3, r5
 8003c02:	d417      	bmi.n	8003c34 <_malloc_r+0x8c>
 8003c04:	2b0b      	cmp	r3, #11
 8003c06:	d903      	bls.n	8003c10 <_malloc_r+0x68>
 8003c08:	6023      	str	r3, [r4, #0]
 8003c0a:	441c      	add	r4, r3
 8003c0c:	6025      	str	r5, [r4, #0]
 8003c0e:	e004      	b.n	8003c1a <_malloc_r+0x72>
 8003c10:	6863      	ldr	r3, [r4, #4]
 8003c12:	42a2      	cmp	r2, r4
 8003c14:	bf0c      	ite	eq
 8003c16:	600b      	streq	r3, [r1, #0]
 8003c18:	6053      	strne	r3, [r2, #4]
 8003c1a:	4630      	mov	r0, r6
 8003c1c:	f000 fec8 	bl	80049b0 <__malloc_unlock>
 8003c20:	f104 000b 	add.w	r0, r4, #11
 8003c24:	1d23      	adds	r3, r4, #4
 8003c26:	f020 0007 	bic.w	r0, r0, #7
 8003c2a:	1ac2      	subs	r2, r0, r3
 8003c2c:	d0cc      	beq.n	8003bc8 <_malloc_r+0x20>
 8003c2e:	1a1b      	subs	r3, r3, r0
 8003c30:	50a3      	str	r3, [r4, r2]
 8003c32:	e7c9      	b.n	8003bc8 <_malloc_r+0x20>
 8003c34:	4622      	mov	r2, r4
 8003c36:	6864      	ldr	r4, [r4, #4]
 8003c38:	e7cc      	b.n	8003bd4 <_malloc_r+0x2c>
 8003c3a:	1cc4      	adds	r4, r0, #3
 8003c3c:	f024 0403 	bic.w	r4, r4, #3
 8003c40:	42a0      	cmp	r0, r4
 8003c42:	d0e3      	beq.n	8003c0c <_malloc_r+0x64>
 8003c44:	1a21      	subs	r1, r4, r0
 8003c46:	4630      	mov	r0, r6
 8003c48:	f000 faf6 	bl	8004238 <_sbrk_r>
 8003c4c:	3001      	adds	r0, #1
 8003c4e:	d1dd      	bne.n	8003c0c <_malloc_r+0x64>
 8003c50:	e7cf      	b.n	8003bf2 <_malloc_r+0x4a>
 8003c52:	bf00      	nop
 8003c54:	20000300 	.word	0x20000300
 8003c58:	20000304 	.word	0x20000304

08003c5c <__sfputc_r>:
 8003c5c:	6893      	ldr	r3, [r2, #8]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	b410      	push	{r4}
 8003c64:	6093      	str	r3, [r2, #8]
 8003c66:	da08      	bge.n	8003c7a <__sfputc_r+0x1e>
 8003c68:	6994      	ldr	r4, [r2, #24]
 8003c6a:	42a3      	cmp	r3, r4
 8003c6c:	db01      	blt.n	8003c72 <__sfputc_r+0x16>
 8003c6e:	290a      	cmp	r1, #10
 8003c70:	d103      	bne.n	8003c7a <__sfputc_r+0x1e>
 8003c72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c76:	f000 bb53 	b.w	8004320 <__swbuf_r>
 8003c7a:	6813      	ldr	r3, [r2, #0]
 8003c7c:	1c58      	adds	r0, r3, #1
 8003c7e:	6010      	str	r0, [r2, #0]
 8003c80:	7019      	strb	r1, [r3, #0]
 8003c82:	4608      	mov	r0, r1
 8003c84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <__sfputs_r>:
 8003c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8c:	4606      	mov	r6, r0
 8003c8e:	460f      	mov	r7, r1
 8003c90:	4614      	mov	r4, r2
 8003c92:	18d5      	adds	r5, r2, r3
 8003c94:	42ac      	cmp	r4, r5
 8003c96:	d101      	bne.n	8003c9c <__sfputs_r+0x12>
 8003c98:	2000      	movs	r0, #0
 8003c9a:	e007      	b.n	8003cac <__sfputs_r+0x22>
 8003c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ca0:	463a      	mov	r2, r7
 8003ca2:	4630      	mov	r0, r6
 8003ca4:	f7ff ffda 	bl	8003c5c <__sfputc_r>
 8003ca8:	1c43      	adds	r3, r0, #1
 8003caa:	d1f3      	bne.n	8003c94 <__sfputs_r+0xa>
 8003cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003cb0 <_vfiprintf_r>:
 8003cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb4:	460d      	mov	r5, r1
 8003cb6:	b09d      	sub	sp, #116	; 0x74
 8003cb8:	4614      	mov	r4, r2
 8003cba:	4698      	mov	r8, r3
 8003cbc:	4606      	mov	r6, r0
 8003cbe:	b118      	cbz	r0, 8003cc8 <_vfiprintf_r+0x18>
 8003cc0:	6983      	ldr	r3, [r0, #24]
 8003cc2:	b90b      	cbnz	r3, 8003cc8 <_vfiprintf_r+0x18>
 8003cc4:	f000 fd68 	bl	8004798 <__sinit>
 8003cc8:	4b89      	ldr	r3, [pc, #548]	; (8003ef0 <_vfiprintf_r+0x240>)
 8003cca:	429d      	cmp	r5, r3
 8003ccc:	d11b      	bne.n	8003d06 <_vfiprintf_r+0x56>
 8003cce:	6875      	ldr	r5, [r6, #4]
 8003cd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cd2:	07d9      	lsls	r1, r3, #31
 8003cd4:	d405      	bmi.n	8003ce2 <_vfiprintf_r+0x32>
 8003cd6:	89ab      	ldrh	r3, [r5, #12]
 8003cd8:	059a      	lsls	r2, r3, #22
 8003cda:	d402      	bmi.n	8003ce2 <_vfiprintf_r+0x32>
 8003cdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cde:	f000 fdf9 	bl	80048d4 <__retarget_lock_acquire_recursive>
 8003ce2:	89ab      	ldrh	r3, [r5, #12]
 8003ce4:	071b      	lsls	r3, r3, #28
 8003ce6:	d501      	bpl.n	8003cec <_vfiprintf_r+0x3c>
 8003ce8:	692b      	ldr	r3, [r5, #16]
 8003cea:	b9eb      	cbnz	r3, 8003d28 <_vfiprintf_r+0x78>
 8003cec:	4629      	mov	r1, r5
 8003cee:	4630      	mov	r0, r6
 8003cf0:	f000 fb68 	bl	80043c4 <__swsetup_r>
 8003cf4:	b1c0      	cbz	r0, 8003d28 <_vfiprintf_r+0x78>
 8003cf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cf8:	07dc      	lsls	r4, r3, #31
 8003cfa:	d50e      	bpl.n	8003d1a <_vfiprintf_r+0x6a>
 8003cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003d00:	b01d      	add	sp, #116	; 0x74
 8003d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d06:	4b7b      	ldr	r3, [pc, #492]	; (8003ef4 <_vfiprintf_r+0x244>)
 8003d08:	429d      	cmp	r5, r3
 8003d0a:	d101      	bne.n	8003d10 <_vfiprintf_r+0x60>
 8003d0c:	68b5      	ldr	r5, [r6, #8]
 8003d0e:	e7df      	b.n	8003cd0 <_vfiprintf_r+0x20>
 8003d10:	4b79      	ldr	r3, [pc, #484]	; (8003ef8 <_vfiprintf_r+0x248>)
 8003d12:	429d      	cmp	r5, r3
 8003d14:	bf08      	it	eq
 8003d16:	68f5      	ldreq	r5, [r6, #12]
 8003d18:	e7da      	b.n	8003cd0 <_vfiprintf_r+0x20>
 8003d1a:	89ab      	ldrh	r3, [r5, #12]
 8003d1c:	0598      	lsls	r0, r3, #22
 8003d1e:	d4ed      	bmi.n	8003cfc <_vfiprintf_r+0x4c>
 8003d20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d22:	f000 fdd9 	bl	80048d8 <__retarget_lock_release_recursive>
 8003d26:	e7e9      	b.n	8003cfc <_vfiprintf_r+0x4c>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8003d2c:	2320      	movs	r3, #32
 8003d2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d32:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d36:	2330      	movs	r3, #48	; 0x30
 8003d38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003efc <_vfiprintf_r+0x24c>
 8003d3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d40:	f04f 0901 	mov.w	r9, #1
 8003d44:	4623      	mov	r3, r4
 8003d46:	469a      	mov	sl, r3
 8003d48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d4c:	b10a      	cbz	r2, 8003d52 <_vfiprintf_r+0xa2>
 8003d4e:	2a25      	cmp	r2, #37	; 0x25
 8003d50:	d1f9      	bne.n	8003d46 <_vfiprintf_r+0x96>
 8003d52:	ebba 0b04 	subs.w	fp, sl, r4
 8003d56:	d00b      	beq.n	8003d70 <_vfiprintf_r+0xc0>
 8003d58:	465b      	mov	r3, fp
 8003d5a:	4622      	mov	r2, r4
 8003d5c:	4629      	mov	r1, r5
 8003d5e:	4630      	mov	r0, r6
 8003d60:	f7ff ff93 	bl	8003c8a <__sfputs_r>
 8003d64:	3001      	adds	r0, #1
 8003d66:	f000 80aa 	beq.w	8003ebe <_vfiprintf_r+0x20e>
 8003d6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d6c:	445a      	add	r2, fp
 8003d6e:	9209      	str	r2, [sp, #36]	; 0x24
 8003d70:	f89a 3000 	ldrb.w	r3, [sl]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80a2 	beq.w	8003ebe <_vfiprintf_r+0x20e>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d84:	f10a 0a01 	add.w	sl, sl, #1
 8003d88:	9304      	str	r3, [sp, #16]
 8003d8a:	9307      	str	r3, [sp, #28]
 8003d8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d90:	931a      	str	r3, [sp, #104]	; 0x68
 8003d92:	4654      	mov	r4, sl
 8003d94:	2205      	movs	r2, #5
 8003d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d9a:	4858      	ldr	r0, [pc, #352]	; (8003efc <_vfiprintf_r+0x24c>)
 8003d9c:	f7fc fa38 	bl	8000210 <memchr>
 8003da0:	9a04      	ldr	r2, [sp, #16]
 8003da2:	b9d8      	cbnz	r0, 8003ddc <_vfiprintf_r+0x12c>
 8003da4:	06d1      	lsls	r1, r2, #27
 8003da6:	bf44      	itt	mi
 8003da8:	2320      	movmi	r3, #32
 8003daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dae:	0713      	lsls	r3, r2, #28
 8003db0:	bf44      	itt	mi
 8003db2:	232b      	movmi	r3, #43	; 0x2b
 8003db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003db8:	f89a 3000 	ldrb.w	r3, [sl]
 8003dbc:	2b2a      	cmp	r3, #42	; 0x2a
 8003dbe:	d015      	beq.n	8003dec <_vfiprintf_r+0x13c>
 8003dc0:	9a07      	ldr	r2, [sp, #28]
 8003dc2:	4654      	mov	r4, sl
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	f04f 0c0a 	mov.w	ip, #10
 8003dca:	4621      	mov	r1, r4
 8003dcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dd0:	3b30      	subs	r3, #48	; 0x30
 8003dd2:	2b09      	cmp	r3, #9
 8003dd4:	d94e      	bls.n	8003e74 <_vfiprintf_r+0x1c4>
 8003dd6:	b1b0      	cbz	r0, 8003e06 <_vfiprintf_r+0x156>
 8003dd8:	9207      	str	r2, [sp, #28]
 8003dda:	e014      	b.n	8003e06 <_vfiprintf_r+0x156>
 8003ddc:	eba0 0308 	sub.w	r3, r0, r8
 8003de0:	fa09 f303 	lsl.w	r3, r9, r3
 8003de4:	4313      	orrs	r3, r2
 8003de6:	9304      	str	r3, [sp, #16]
 8003de8:	46a2      	mov	sl, r4
 8003dea:	e7d2      	b.n	8003d92 <_vfiprintf_r+0xe2>
 8003dec:	9b03      	ldr	r3, [sp, #12]
 8003dee:	1d19      	adds	r1, r3, #4
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	9103      	str	r1, [sp, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bfbb      	ittet	lt
 8003df8:	425b      	neglt	r3, r3
 8003dfa:	f042 0202 	orrlt.w	r2, r2, #2
 8003dfe:	9307      	strge	r3, [sp, #28]
 8003e00:	9307      	strlt	r3, [sp, #28]
 8003e02:	bfb8      	it	lt
 8003e04:	9204      	strlt	r2, [sp, #16]
 8003e06:	7823      	ldrb	r3, [r4, #0]
 8003e08:	2b2e      	cmp	r3, #46	; 0x2e
 8003e0a:	d10c      	bne.n	8003e26 <_vfiprintf_r+0x176>
 8003e0c:	7863      	ldrb	r3, [r4, #1]
 8003e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8003e10:	d135      	bne.n	8003e7e <_vfiprintf_r+0x1ce>
 8003e12:	9b03      	ldr	r3, [sp, #12]
 8003e14:	1d1a      	adds	r2, r3, #4
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	9203      	str	r2, [sp, #12]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	bfb8      	it	lt
 8003e1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e22:	3402      	adds	r4, #2
 8003e24:	9305      	str	r3, [sp, #20]
 8003e26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003f0c <_vfiprintf_r+0x25c>
 8003e2a:	7821      	ldrb	r1, [r4, #0]
 8003e2c:	2203      	movs	r2, #3
 8003e2e:	4650      	mov	r0, sl
 8003e30:	f7fc f9ee 	bl	8000210 <memchr>
 8003e34:	b140      	cbz	r0, 8003e48 <_vfiprintf_r+0x198>
 8003e36:	2340      	movs	r3, #64	; 0x40
 8003e38:	eba0 000a 	sub.w	r0, r0, sl
 8003e3c:	fa03 f000 	lsl.w	r0, r3, r0
 8003e40:	9b04      	ldr	r3, [sp, #16]
 8003e42:	4303      	orrs	r3, r0
 8003e44:	3401      	adds	r4, #1
 8003e46:	9304      	str	r3, [sp, #16]
 8003e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e4c:	482c      	ldr	r0, [pc, #176]	; (8003f00 <_vfiprintf_r+0x250>)
 8003e4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e52:	2206      	movs	r2, #6
 8003e54:	f7fc f9dc 	bl	8000210 <memchr>
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	d03f      	beq.n	8003edc <_vfiprintf_r+0x22c>
 8003e5c:	4b29      	ldr	r3, [pc, #164]	; (8003f04 <_vfiprintf_r+0x254>)
 8003e5e:	bb1b      	cbnz	r3, 8003ea8 <_vfiprintf_r+0x1f8>
 8003e60:	9b03      	ldr	r3, [sp, #12]
 8003e62:	3307      	adds	r3, #7
 8003e64:	f023 0307 	bic.w	r3, r3, #7
 8003e68:	3308      	adds	r3, #8
 8003e6a:	9303      	str	r3, [sp, #12]
 8003e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e6e:	443b      	add	r3, r7
 8003e70:	9309      	str	r3, [sp, #36]	; 0x24
 8003e72:	e767      	b.n	8003d44 <_vfiprintf_r+0x94>
 8003e74:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e78:	460c      	mov	r4, r1
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	e7a5      	b.n	8003dca <_vfiprintf_r+0x11a>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	3401      	adds	r4, #1
 8003e82:	9305      	str	r3, [sp, #20]
 8003e84:	4619      	mov	r1, r3
 8003e86:	f04f 0c0a 	mov.w	ip, #10
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e90:	3a30      	subs	r2, #48	; 0x30
 8003e92:	2a09      	cmp	r2, #9
 8003e94:	d903      	bls.n	8003e9e <_vfiprintf_r+0x1ee>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0c5      	beq.n	8003e26 <_vfiprintf_r+0x176>
 8003e9a:	9105      	str	r1, [sp, #20]
 8003e9c:	e7c3      	b.n	8003e26 <_vfiprintf_r+0x176>
 8003e9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ea2:	4604      	mov	r4, r0
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e7f0      	b.n	8003e8a <_vfiprintf_r+0x1da>
 8003ea8:	ab03      	add	r3, sp, #12
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	462a      	mov	r2, r5
 8003eae:	4b16      	ldr	r3, [pc, #88]	; (8003f08 <_vfiprintf_r+0x258>)
 8003eb0:	a904      	add	r1, sp, #16
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	f3af 8000 	nop.w
 8003eb8:	4607      	mov	r7, r0
 8003eba:	1c78      	adds	r0, r7, #1
 8003ebc:	d1d6      	bne.n	8003e6c <_vfiprintf_r+0x1bc>
 8003ebe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ec0:	07d9      	lsls	r1, r3, #31
 8003ec2:	d405      	bmi.n	8003ed0 <_vfiprintf_r+0x220>
 8003ec4:	89ab      	ldrh	r3, [r5, #12]
 8003ec6:	059a      	lsls	r2, r3, #22
 8003ec8:	d402      	bmi.n	8003ed0 <_vfiprintf_r+0x220>
 8003eca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ecc:	f000 fd04 	bl	80048d8 <__retarget_lock_release_recursive>
 8003ed0:	89ab      	ldrh	r3, [r5, #12]
 8003ed2:	065b      	lsls	r3, r3, #25
 8003ed4:	f53f af12 	bmi.w	8003cfc <_vfiprintf_r+0x4c>
 8003ed8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003eda:	e711      	b.n	8003d00 <_vfiprintf_r+0x50>
 8003edc:	ab03      	add	r3, sp, #12
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	462a      	mov	r2, r5
 8003ee2:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <_vfiprintf_r+0x258>)
 8003ee4:	a904      	add	r1, sp, #16
 8003ee6:	4630      	mov	r0, r6
 8003ee8:	f000 f880 	bl	8003fec <_printf_i>
 8003eec:	e7e4      	b.n	8003eb8 <_vfiprintf_r+0x208>
 8003eee:	bf00      	nop
 8003ef0:	08005370 	.word	0x08005370
 8003ef4:	08005390 	.word	0x08005390
 8003ef8:	08005350 	.word	0x08005350
 8003efc:	0800531c 	.word	0x0800531c
 8003f00:	08005326 	.word	0x08005326
 8003f04:	00000000 	.word	0x00000000
 8003f08:	08003c8b 	.word	0x08003c8b
 8003f0c:	08005322 	.word	0x08005322

08003f10 <_printf_common>:
 8003f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f14:	4616      	mov	r6, r2
 8003f16:	4699      	mov	r9, r3
 8003f18:	688a      	ldr	r2, [r1, #8]
 8003f1a:	690b      	ldr	r3, [r1, #16]
 8003f1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f20:	4293      	cmp	r3, r2
 8003f22:	bfb8      	it	lt
 8003f24:	4613      	movlt	r3, r2
 8003f26:	6033      	str	r3, [r6, #0]
 8003f28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f2c:	4607      	mov	r7, r0
 8003f2e:	460c      	mov	r4, r1
 8003f30:	b10a      	cbz	r2, 8003f36 <_printf_common+0x26>
 8003f32:	3301      	adds	r3, #1
 8003f34:	6033      	str	r3, [r6, #0]
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	0699      	lsls	r1, r3, #26
 8003f3a:	bf42      	ittt	mi
 8003f3c:	6833      	ldrmi	r3, [r6, #0]
 8003f3e:	3302      	addmi	r3, #2
 8003f40:	6033      	strmi	r3, [r6, #0]
 8003f42:	6825      	ldr	r5, [r4, #0]
 8003f44:	f015 0506 	ands.w	r5, r5, #6
 8003f48:	d106      	bne.n	8003f58 <_printf_common+0x48>
 8003f4a:	f104 0a19 	add.w	sl, r4, #25
 8003f4e:	68e3      	ldr	r3, [r4, #12]
 8003f50:	6832      	ldr	r2, [r6, #0]
 8003f52:	1a9b      	subs	r3, r3, r2
 8003f54:	42ab      	cmp	r3, r5
 8003f56:	dc26      	bgt.n	8003fa6 <_printf_common+0x96>
 8003f58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f5c:	1e13      	subs	r3, r2, #0
 8003f5e:	6822      	ldr	r2, [r4, #0]
 8003f60:	bf18      	it	ne
 8003f62:	2301      	movne	r3, #1
 8003f64:	0692      	lsls	r2, r2, #26
 8003f66:	d42b      	bmi.n	8003fc0 <_printf_common+0xb0>
 8003f68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f6c:	4649      	mov	r1, r9
 8003f6e:	4638      	mov	r0, r7
 8003f70:	47c0      	blx	r8
 8003f72:	3001      	adds	r0, #1
 8003f74:	d01e      	beq.n	8003fb4 <_printf_common+0xa4>
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	68e5      	ldr	r5, [r4, #12]
 8003f7a:	6832      	ldr	r2, [r6, #0]
 8003f7c:	f003 0306 	and.w	r3, r3, #6
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	bf08      	it	eq
 8003f84:	1aad      	subeq	r5, r5, r2
 8003f86:	68a3      	ldr	r3, [r4, #8]
 8003f88:	6922      	ldr	r2, [r4, #16]
 8003f8a:	bf0c      	ite	eq
 8003f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f90:	2500      	movne	r5, #0
 8003f92:	4293      	cmp	r3, r2
 8003f94:	bfc4      	itt	gt
 8003f96:	1a9b      	subgt	r3, r3, r2
 8003f98:	18ed      	addgt	r5, r5, r3
 8003f9a:	2600      	movs	r6, #0
 8003f9c:	341a      	adds	r4, #26
 8003f9e:	42b5      	cmp	r5, r6
 8003fa0:	d11a      	bne.n	8003fd8 <_printf_common+0xc8>
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	e008      	b.n	8003fb8 <_printf_common+0xa8>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	4652      	mov	r2, sl
 8003faa:	4649      	mov	r1, r9
 8003fac:	4638      	mov	r0, r7
 8003fae:	47c0      	blx	r8
 8003fb0:	3001      	adds	r0, #1
 8003fb2:	d103      	bne.n	8003fbc <_printf_common+0xac>
 8003fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fbc:	3501      	adds	r5, #1
 8003fbe:	e7c6      	b.n	8003f4e <_printf_common+0x3e>
 8003fc0:	18e1      	adds	r1, r4, r3
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	2030      	movs	r0, #48	; 0x30
 8003fc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fca:	4422      	add	r2, r4
 8003fcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fd4:	3302      	adds	r3, #2
 8003fd6:	e7c7      	b.n	8003f68 <_printf_common+0x58>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	4622      	mov	r2, r4
 8003fdc:	4649      	mov	r1, r9
 8003fde:	4638      	mov	r0, r7
 8003fe0:	47c0      	blx	r8
 8003fe2:	3001      	adds	r0, #1
 8003fe4:	d0e6      	beq.n	8003fb4 <_printf_common+0xa4>
 8003fe6:	3601      	adds	r6, #1
 8003fe8:	e7d9      	b.n	8003f9e <_printf_common+0x8e>
	...

08003fec <_printf_i>:
 8003fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff0:	460c      	mov	r4, r1
 8003ff2:	4691      	mov	r9, r2
 8003ff4:	7e27      	ldrb	r7, [r4, #24]
 8003ff6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003ff8:	2f78      	cmp	r7, #120	; 0x78
 8003ffa:	4680      	mov	r8, r0
 8003ffc:	469a      	mov	sl, r3
 8003ffe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004002:	d807      	bhi.n	8004014 <_printf_i+0x28>
 8004004:	2f62      	cmp	r7, #98	; 0x62
 8004006:	d80a      	bhi.n	800401e <_printf_i+0x32>
 8004008:	2f00      	cmp	r7, #0
 800400a:	f000 80d8 	beq.w	80041be <_printf_i+0x1d2>
 800400e:	2f58      	cmp	r7, #88	; 0x58
 8004010:	f000 80a3 	beq.w	800415a <_printf_i+0x16e>
 8004014:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004018:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800401c:	e03a      	b.n	8004094 <_printf_i+0xa8>
 800401e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004022:	2b15      	cmp	r3, #21
 8004024:	d8f6      	bhi.n	8004014 <_printf_i+0x28>
 8004026:	a001      	add	r0, pc, #4	; (adr r0, 800402c <_printf_i+0x40>)
 8004028:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800402c:	08004085 	.word	0x08004085
 8004030:	08004099 	.word	0x08004099
 8004034:	08004015 	.word	0x08004015
 8004038:	08004015 	.word	0x08004015
 800403c:	08004015 	.word	0x08004015
 8004040:	08004015 	.word	0x08004015
 8004044:	08004099 	.word	0x08004099
 8004048:	08004015 	.word	0x08004015
 800404c:	08004015 	.word	0x08004015
 8004050:	08004015 	.word	0x08004015
 8004054:	08004015 	.word	0x08004015
 8004058:	080041a5 	.word	0x080041a5
 800405c:	080040c9 	.word	0x080040c9
 8004060:	08004187 	.word	0x08004187
 8004064:	08004015 	.word	0x08004015
 8004068:	08004015 	.word	0x08004015
 800406c:	080041c7 	.word	0x080041c7
 8004070:	08004015 	.word	0x08004015
 8004074:	080040c9 	.word	0x080040c9
 8004078:	08004015 	.word	0x08004015
 800407c:	08004015 	.word	0x08004015
 8004080:	0800418f 	.word	0x0800418f
 8004084:	680b      	ldr	r3, [r1, #0]
 8004086:	1d1a      	adds	r2, r3, #4
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	600a      	str	r2, [r1, #0]
 800408c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004090:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004094:	2301      	movs	r3, #1
 8004096:	e0a3      	b.n	80041e0 <_printf_i+0x1f4>
 8004098:	6825      	ldr	r5, [r4, #0]
 800409a:	6808      	ldr	r0, [r1, #0]
 800409c:	062e      	lsls	r6, r5, #24
 800409e:	f100 0304 	add.w	r3, r0, #4
 80040a2:	d50a      	bpl.n	80040ba <_printf_i+0xce>
 80040a4:	6805      	ldr	r5, [r0, #0]
 80040a6:	600b      	str	r3, [r1, #0]
 80040a8:	2d00      	cmp	r5, #0
 80040aa:	da03      	bge.n	80040b4 <_printf_i+0xc8>
 80040ac:	232d      	movs	r3, #45	; 0x2d
 80040ae:	426d      	negs	r5, r5
 80040b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040b4:	485e      	ldr	r0, [pc, #376]	; (8004230 <_printf_i+0x244>)
 80040b6:	230a      	movs	r3, #10
 80040b8:	e019      	b.n	80040ee <_printf_i+0x102>
 80040ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80040be:	6805      	ldr	r5, [r0, #0]
 80040c0:	600b      	str	r3, [r1, #0]
 80040c2:	bf18      	it	ne
 80040c4:	b22d      	sxthne	r5, r5
 80040c6:	e7ef      	b.n	80040a8 <_printf_i+0xbc>
 80040c8:	680b      	ldr	r3, [r1, #0]
 80040ca:	6825      	ldr	r5, [r4, #0]
 80040cc:	1d18      	adds	r0, r3, #4
 80040ce:	6008      	str	r0, [r1, #0]
 80040d0:	0628      	lsls	r0, r5, #24
 80040d2:	d501      	bpl.n	80040d8 <_printf_i+0xec>
 80040d4:	681d      	ldr	r5, [r3, #0]
 80040d6:	e002      	b.n	80040de <_printf_i+0xf2>
 80040d8:	0669      	lsls	r1, r5, #25
 80040da:	d5fb      	bpl.n	80040d4 <_printf_i+0xe8>
 80040dc:	881d      	ldrh	r5, [r3, #0]
 80040de:	4854      	ldr	r0, [pc, #336]	; (8004230 <_printf_i+0x244>)
 80040e0:	2f6f      	cmp	r7, #111	; 0x6f
 80040e2:	bf0c      	ite	eq
 80040e4:	2308      	moveq	r3, #8
 80040e6:	230a      	movne	r3, #10
 80040e8:	2100      	movs	r1, #0
 80040ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040ee:	6866      	ldr	r6, [r4, #4]
 80040f0:	60a6      	str	r6, [r4, #8]
 80040f2:	2e00      	cmp	r6, #0
 80040f4:	bfa2      	ittt	ge
 80040f6:	6821      	ldrge	r1, [r4, #0]
 80040f8:	f021 0104 	bicge.w	r1, r1, #4
 80040fc:	6021      	strge	r1, [r4, #0]
 80040fe:	b90d      	cbnz	r5, 8004104 <_printf_i+0x118>
 8004100:	2e00      	cmp	r6, #0
 8004102:	d04d      	beq.n	80041a0 <_printf_i+0x1b4>
 8004104:	4616      	mov	r6, r2
 8004106:	fbb5 f1f3 	udiv	r1, r5, r3
 800410a:	fb03 5711 	mls	r7, r3, r1, r5
 800410e:	5dc7      	ldrb	r7, [r0, r7]
 8004110:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004114:	462f      	mov	r7, r5
 8004116:	42bb      	cmp	r3, r7
 8004118:	460d      	mov	r5, r1
 800411a:	d9f4      	bls.n	8004106 <_printf_i+0x11a>
 800411c:	2b08      	cmp	r3, #8
 800411e:	d10b      	bne.n	8004138 <_printf_i+0x14c>
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	07df      	lsls	r7, r3, #31
 8004124:	d508      	bpl.n	8004138 <_printf_i+0x14c>
 8004126:	6923      	ldr	r3, [r4, #16]
 8004128:	6861      	ldr	r1, [r4, #4]
 800412a:	4299      	cmp	r1, r3
 800412c:	bfde      	ittt	le
 800412e:	2330      	movle	r3, #48	; 0x30
 8004130:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004134:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004138:	1b92      	subs	r2, r2, r6
 800413a:	6122      	str	r2, [r4, #16]
 800413c:	f8cd a000 	str.w	sl, [sp]
 8004140:	464b      	mov	r3, r9
 8004142:	aa03      	add	r2, sp, #12
 8004144:	4621      	mov	r1, r4
 8004146:	4640      	mov	r0, r8
 8004148:	f7ff fee2 	bl	8003f10 <_printf_common>
 800414c:	3001      	adds	r0, #1
 800414e:	d14c      	bne.n	80041ea <_printf_i+0x1fe>
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	b004      	add	sp, #16
 8004156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800415a:	4835      	ldr	r0, [pc, #212]	; (8004230 <_printf_i+0x244>)
 800415c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	680e      	ldr	r6, [r1, #0]
 8004164:	061f      	lsls	r7, r3, #24
 8004166:	f856 5b04 	ldr.w	r5, [r6], #4
 800416a:	600e      	str	r6, [r1, #0]
 800416c:	d514      	bpl.n	8004198 <_printf_i+0x1ac>
 800416e:	07d9      	lsls	r1, r3, #31
 8004170:	bf44      	itt	mi
 8004172:	f043 0320 	orrmi.w	r3, r3, #32
 8004176:	6023      	strmi	r3, [r4, #0]
 8004178:	b91d      	cbnz	r5, 8004182 <_printf_i+0x196>
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	f023 0320 	bic.w	r3, r3, #32
 8004180:	6023      	str	r3, [r4, #0]
 8004182:	2310      	movs	r3, #16
 8004184:	e7b0      	b.n	80040e8 <_printf_i+0xfc>
 8004186:	6823      	ldr	r3, [r4, #0]
 8004188:	f043 0320 	orr.w	r3, r3, #32
 800418c:	6023      	str	r3, [r4, #0]
 800418e:	2378      	movs	r3, #120	; 0x78
 8004190:	4828      	ldr	r0, [pc, #160]	; (8004234 <_printf_i+0x248>)
 8004192:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004196:	e7e3      	b.n	8004160 <_printf_i+0x174>
 8004198:	065e      	lsls	r6, r3, #25
 800419a:	bf48      	it	mi
 800419c:	b2ad      	uxthmi	r5, r5
 800419e:	e7e6      	b.n	800416e <_printf_i+0x182>
 80041a0:	4616      	mov	r6, r2
 80041a2:	e7bb      	b.n	800411c <_printf_i+0x130>
 80041a4:	680b      	ldr	r3, [r1, #0]
 80041a6:	6826      	ldr	r6, [r4, #0]
 80041a8:	6960      	ldr	r0, [r4, #20]
 80041aa:	1d1d      	adds	r5, r3, #4
 80041ac:	600d      	str	r5, [r1, #0]
 80041ae:	0635      	lsls	r5, r6, #24
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	d501      	bpl.n	80041b8 <_printf_i+0x1cc>
 80041b4:	6018      	str	r0, [r3, #0]
 80041b6:	e002      	b.n	80041be <_printf_i+0x1d2>
 80041b8:	0671      	lsls	r1, r6, #25
 80041ba:	d5fb      	bpl.n	80041b4 <_printf_i+0x1c8>
 80041bc:	8018      	strh	r0, [r3, #0]
 80041be:	2300      	movs	r3, #0
 80041c0:	6123      	str	r3, [r4, #16]
 80041c2:	4616      	mov	r6, r2
 80041c4:	e7ba      	b.n	800413c <_printf_i+0x150>
 80041c6:	680b      	ldr	r3, [r1, #0]
 80041c8:	1d1a      	adds	r2, r3, #4
 80041ca:	600a      	str	r2, [r1, #0]
 80041cc:	681e      	ldr	r6, [r3, #0]
 80041ce:	6862      	ldr	r2, [r4, #4]
 80041d0:	2100      	movs	r1, #0
 80041d2:	4630      	mov	r0, r6
 80041d4:	f7fc f81c 	bl	8000210 <memchr>
 80041d8:	b108      	cbz	r0, 80041de <_printf_i+0x1f2>
 80041da:	1b80      	subs	r0, r0, r6
 80041dc:	6060      	str	r0, [r4, #4]
 80041de:	6863      	ldr	r3, [r4, #4]
 80041e0:	6123      	str	r3, [r4, #16]
 80041e2:	2300      	movs	r3, #0
 80041e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e8:	e7a8      	b.n	800413c <_printf_i+0x150>
 80041ea:	6923      	ldr	r3, [r4, #16]
 80041ec:	4632      	mov	r2, r6
 80041ee:	4649      	mov	r1, r9
 80041f0:	4640      	mov	r0, r8
 80041f2:	47d0      	blx	sl
 80041f4:	3001      	adds	r0, #1
 80041f6:	d0ab      	beq.n	8004150 <_printf_i+0x164>
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	079b      	lsls	r3, r3, #30
 80041fc:	d413      	bmi.n	8004226 <_printf_i+0x23a>
 80041fe:	68e0      	ldr	r0, [r4, #12]
 8004200:	9b03      	ldr	r3, [sp, #12]
 8004202:	4298      	cmp	r0, r3
 8004204:	bfb8      	it	lt
 8004206:	4618      	movlt	r0, r3
 8004208:	e7a4      	b.n	8004154 <_printf_i+0x168>
 800420a:	2301      	movs	r3, #1
 800420c:	4632      	mov	r2, r6
 800420e:	4649      	mov	r1, r9
 8004210:	4640      	mov	r0, r8
 8004212:	47d0      	blx	sl
 8004214:	3001      	adds	r0, #1
 8004216:	d09b      	beq.n	8004150 <_printf_i+0x164>
 8004218:	3501      	adds	r5, #1
 800421a:	68e3      	ldr	r3, [r4, #12]
 800421c:	9903      	ldr	r1, [sp, #12]
 800421e:	1a5b      	subs	r3, r3, r1
 8004220:	42ab      	cmp	r3, r5
 8004222:	dcf2      	bgt.n	800420a <_printf_i+0x21e>
 8004224:	e7eb      	b.n	80041fe <_printf_i+0x212>
 8004226:	2500      	movs	r5, #0
 8004228:	f104 0619 	add.w	r6, r4, #25
 800422c:	e7f5      	b.n	800421a <_printf_i+0x22e>
 800422e:	bf00      	nop
 8004230:	0800532d 	.word	0x0800532d
 8004234:	0800533e 	.word	0x0800533e

08004238 <_sbrk_r>:
 8004238:	b538      	push	{r3, r4, r5, lr}
 800423a:	4d06      	ldr	r5, [pc, #24]	; (8004254 <_sbrk_r+0x1c>)
 800423c:	2300      	movs	r3, #0
 800423e:	4604      	mov	r4, r0
 8004240:	4608      	mov	r0, r1
 8004242:	602b      	str	r3, [r5, #0]
 8004244:	f000 fe28 	bl	8004e98 <_sbrk>
 8004248:	1c43      	adds	r3, r0, #1
 800424a:	d102      	bne.n	8004252 <_sbrk_r+0x1a>
 800424c:	682b      	ldr	r3, [r5, #0]
 800424e:	b103      	cbz	r3, 8004252 <_sbrk_r+0x1a>
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	bd38      	pop	{r3, r4, r5, pc}
 8004254:	2000042c 	.word	0x2000042c

08004258 <_raise_r>:
 8004258:	291f      	cmp	r1, #31
 800425a:	b538      	push	{r3, r4, r5, lr}
 800425c:	4604      	mov	r4, r0
 800425e:	460d      	mov	r5, r1
 8004260:	d904      	bls.n	800426c <_raise_r+0x14>
 8004262:	2316      	movs	r3, #22
 8004264:	6003      	str	r3, [r0, #0]
 8004266:	f04f 30ff 	mov.w	r0, #4294967295
 800426a:	bd38      	pop	{r3, r4, r5, pc}
 800426c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800426e:	b112      	cbz	r2, 8004276 <_raise_r+0x1e>
 8004270:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004274:	b94b      	cbnz	r3, 800428a <_raise_r+0x32>
 8004276:	4620      	mov	r0, r4
 8004278:	f000 f830 	bl	80042dc <_getpid_r>
 800427c:	462a      	mov	r2, r5
 800427e:	4601      	mov	r1, r0
 8004280:	4620      	mov	r0, r4
 8004282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004286:	f000 b817 	b.w	80042b8 <_kill_r>
 800428a:	2b01      	cmp	r3, #1
 800428c:	d00a      	beq.n	80042a4 <_raise_r+0x4c>
 800428e:	1c59      	adds	r1, r3, #1
 8004290:	d103      	bne.n	800429a <_raise_r+0x42>
 8004292:	2316      	movs	r3, #22
 8004294:	6003      	str	r3, [r0, #0]
 8004296:	2001      	movs	r0, #1
 8004298:	e7e7      	b.n	800426a <_raise_r+0x12>
 800429a:	2400      	movs	r4, #0
 800429c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80042a0:	4628      	mov	r0, r5
 80042a2:	4798      	blx	r3
 80042a4:	2000      	movs	r0, #0
 80042a6:	e7e0      	b.n	800426a <_raise_r+0x12>

080042a8 <raise>:
 80042a8:	4b02      	ldr	r3, [pc, #8]	; (80042b4 <raise+0xc>)
 80042aa:	4601      	mov	r1, r0
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	f7ff bfd3 	b.w	8004258 <_raise_r>
 80042b2:	bf00      	nop
 80042b4:	20000010 	.word	0x20000010

080042b8 <_kill_r>:
 80042b8:	b538      	push	{r3, r4, r5, lr}
 80042ba:	4d07      	ldr	r5, [pc, #28]	; (80042d8 <_kill_r+0x20>)
 80042bc:	2300      	movs	r3, #0
 80042be:	4604      	mov	r4, r0
 80042c0:	4608      	mov	r0, r1
 80042c2:	4611      	mov	r1, r2
 80042c4:	602b      	str	r3, [r5, #0]
 80042c6:	f000 fdcf 	bl	8004e68 <_kill>
 80042ca:	1c43      	adds	r3, r0, #1
 80042cc:	d102      	bne.n	80042d4 <_kill_r+0x1c>
 80042ce:	682b      	ldr	r3, [r5, #0]
 80042d0:	b103      	cbz	r3, 80042d4 <_kill_r+0x1c>
 80042d2:	6023      	str	r3, [r4, #0]
 80042d4:	bd38      	pop	{r3, r4, r5, pc}
 80042d6:	bf00      	nop
 80042d8:	2000042c 	.word	0x2000042c

080042dc <_getpid_r>:
 80042dc:	f000 bdb4 	b.w	8004e48 <_getpid>

080042e0 <_vsiprintf_r>:
 80042e0:	b500      	push	{lr}
 80042e2:	b09b      	sub	sp, #108	; 0x6c
 80042e4:	9100      	str	r1, [sp, #0]
 80042e6:	9104      	str	r1, [sp, #16]
 80042e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042ec:	9105      	str	r1, [sp, #20]
 80042ee:	9102      	str	r1, [sp, #8]
 80042f0:	4905      	ldr	r1, [pc, #20]	; (8004308 <_vsiprintf_r+0x28>)
 80042f2:	9103      	str	r1, [sp, #12]
 80042f4:	4669      	mov	r1, sp
 80042f6:	f000 fbe3 	bl	8004ac0 <_svfiprintf_r>
 80042fa:	9b00      	ldr	r3, [sp, #0]
 80042fc:	2200      	movs	r2, #0
 80042fe:	701a      	strb	r2, [r3, #0]
 8004300:	b01b      	add	sp, #108	; 0x6c
 8004302:	f85d fb04 	ldr.w	pc, [sp], #4
 8004306:	bf00      	nop
 8004308:	ffff0208 	.word	0xffff0208

0800430c <vsiprintf>:
 800430c:	4613      	mov	r3, r2
 800430e:	460a      	mov	r2, r1
 8004310:	4601      	mov	r1, r0
 8004312:	4802      	ldr	r0, [pc, #8]	; (800431c <vsiprintf+0x10>)
 8004314:	6800      	ldr	r0, [r0, #0]
 8004316:	f7ff bfe3 	b.w	80042e0 <_vsiprintf_r>
 800431a:	bf00      	nop
 800431c:	20000010 	.word	0x20000010

08004320 <__swbuf_r>:
 8004320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004322:	460e      	mov	r6, r1
 8004324:	4614      	mov	r4, r2
 8004326:	4605      	mov	r5, r0
 8004328:	b118      	cbz	r0, 8004332 <__swbuf_r+0x12>
 800432a:	6983      	ldr	r3, [r0, #24]
 800432c:	b90b      	cbnz	r3, 8004332 <__swbuf_r+0x12>
 800432e:	f000 fa33 	bl	8004798 <__sinit>
 8004332:	4b21      	ldr	r3, [pc, #132]	; (80043b8 <__swbuf_r+0x98>)
 8004334:	429c      	cmp	r4, r3
 8004336:	d12b      	bne.n	8004390 <__swbuf_r+0x70>
 8004338:	686c      	ldr	r4, [r5, #4]
 800433a:	69a3      	ldr	r3, [r4, #24]
 800433c:	60a3      	str	r3, [r4, #8]
 800433e:	89a3      	ldrh	r3, [r4, #12]
 8004340:	071a      	lsls	r2, r3, #28
 8004342:	d52f      	bpl.n	80043a4 <__swbuf_r+0x84>
 8004344:	6923      	ldr	r3, [r4, #16]
 8004346:	b36b      	cbz	r3, 80043a4 <__swbuf_r+0x84>
 8004348:	6923      	ldr	r3, [r4, #16]
 800434a:	6820      	ldr	r0, [r4, #0]
 800434c:	1ac0      	subs	r0, r0, r3
 800434e:	6963      	ldr	r3, [r4, #20]
 8004350:	b2f6      	uxtb	r6, r6
 8004352:	4283      	cmp	r3, r0
 8004354:	4637      	mov	r7, r6
 8004356:	dc04      	bgt.n	8004362 <__swbuf_r+0x42>
 8004358:	4621      	mov	r1, r4
 800435a:	4628      	mov	r0, r5
 800435c:	f000 f988 	bl	8004670 <_fflush_r>
 8004360:	bb30      	cbnz	r0, 80043b0 <__swbuf_r+0x90>
 8004362:	68a3      	ldr	r3, [r4, #8]
 8004364:	3b01      	subs	r3, #1
 8004366:	60a3      	str	r3, [r4, #8]
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	6022      	str	r2, [r4, #0]
 800436e:	701e      	strb	r6, [r3, #0]
 8004370:	6963      	ldr	r3, [r4, #20]
 8004372:	3001      	adds	r0, #1
 8004374:	4283      	cmp	r3, r0
 8004376:	d004      	beq.n	8004382 <__swbuf_r+0x62>
 8004378:	89a3      	ldrh	r3, [r4, #12]
 800437a:	07db      	lsls	r3, r3, #31
 800437c:	d506      	bpl.n	800438c <__swbuf_r+0x6c>
 800437e:	2e0a      	cmp	r6, #10
 8004380:	d104      	bne.n	800438c <__swbuf_r+0x6c>
 8004382:	4621      	mov	r1, r4
 8004384:	4628      	mov	r0, r5
 8004386:	f000 f973 	bl	8004670 <_fflush_r>
 800438a:	b988      	cbnz	r0, 80043b0 <__swbuf_r+0x90>
 800438c:	4638      	mov	r0, r7
 800438e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004390:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <__swbuf_r+0x9c>)
 8004392:	429c      	cmp	r4, r3
 8004394:	d101      	bne.n	800439a <__swbuf_r+0x7a>
 8004396:	68ac      	ldr	r4, [r5, #8]
 8004398:	e7cf      	b.n	800433a <__swbuf_r+0x1a>
 800439a:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <__swbuf_r+0xa0>)
 800439c:	429c      	cmp	r4, r3
 800439e:	bf08      	it	eq
 80043a0:	68ec      	ldreq	r4, [r5, #12]
 80043a2:	e7ca      	b.n	800433a <__swbuf_r+0x1a>
 80043a4:	4621      	mov	r1, r4
 80043a6:	4628      	mov	r0, r5
 80043a8:	f000 f80c 	bl	80043c4 <__swsetup_r>
 80043ac:	2800      	cmp	r0, #0
 80043ae:	d0cb      	beq.n	8004348 <__swbuf_r+0x28>
 80043b0:	f04f 37ff 	mov.w	r7, #4294967295
 80043b4:	e7ea      	b.n	800438c <__swbuf_r+0x6c>
 80043b6:	bf00      	nop
 80043b8:	08005370 	.word	0x08005370
 80043bc:	08005390 	.word	0x08005390
 80043c0:	08005350 	.word	0x08005350

080043c4 <__swsetup_r>:
 80043c4:	4b32      	ldr	r3, [pc, #200]	; (8004490 <__swsetup_r+0xcc>)
 80043c6:	b570      	push	{r4, r5, r6, lr}
 80043c8:	681d      	ldr	r5, [r3, #0]
 80043ca:	4606      	mov	r6, r0
 80043cc:	460c      	mov	r4, r1
 80043ce:	b125      	cbz	r5, 80043da <__swsetup_r+0x16>
 80043d0:	69ab      	ldr	r3, [r5, #24]
 80043d2:	b913      	cbnz	r3, 80043da <__swsetup_r+0x16>
 80043d4:	4628      	mov	r0, r5
 80043d6:	f000 f9df 	bl	8004798 <__sinit>
 80043da:	4b2e      	ldr	r3, [pc, #184]	; (8004494 <__swsetup_r+0xd0>)
 80043dc:	429c      	cmp	r4, r3
 80043de:	d10f      	bne.n	8004400 <__swsetup_r+0x3c>
 80043e0:	686c      	ldr	r4, [r5, #4]
 80043e2:	89a3      	ldrh	r3, [r4, #12]
 80043e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043e8:	0719      	lsls	r1, r3, #28
 80043ea:	d42c      	bmi.n	8004446 <__swsetup_r+0x82>
 80043ec:	06dd      	lsls	r5, r3, #27
 80043ee:	d411      	bmi.n	8004414 <__swsetup_r+0x50>
 80043f0:	2309      	movs	r3, #9
 80043f2:	6033      	str	r3, [r6, #0]
 80043f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80043f8:	81a3      	strh	r3, [r4, #12]
 80043fa:	f04f 30ff 	mov.w	r0, #4294967295
 80043fe:	e03e      	b.n	800447e <__swsetup_r+0xba>
 8004400:	4b25      	ldr	r3, [pc, #148]	; (8004498 <__swsetup_r+0xd4>)
 8004402:	429c      	cmp	r4, r3
 8004404:	d101      	bne.n	800440a <__swsetup_r+0x46>
 8004406:	68ac      	ldr	r4, [r5, #8]
 8004408:	e7eb      	b.n	80043e2 <__swsetup_r+0x1e>
 800440a:	4b24      	ldr	r3, [pc, #144]	; (800449c <__swsetup_r+0xd8>)
 800440c:	429c      	cmp	r4, r3
 800440e:	bf08      	it	eq
 8004410:	68ec      	ldreq	r4, [r5, #12]
 8004412:	e7e6      	b.n	80043e2 <__swsetup_r+0x1e>
 8004414:	0758      	lsls	r0, r3, #29
 8004416:	d512      	bpl.n	800443e <__swsetup_r+0x7a>
 8004418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800441a:	b141      	cbz	r1, 800442e <__swsetup_r+0x6a>
 800441c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004420:	4299      	cmp	r1, r3
 8004422:	d002      	beq.n	800442a <__swsetup_r+0x66>
 8004424:	4630      	mov	r0, r6
 8004426:	f7ff fb6f 	bl	8003b08 <_free_r>
 800442a:	2300      	movs	r3, #0
 800442c:	6363      	str	r3, [r4, #52]	; 0x34
 800442e:	89a3      	ldrh	r3, [r4, #12]
 8004430:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004434:	81a3      	strh	r3, [r4, #12]
 8004436:	2300      	movs	r3, #0
 8004438:	6063      	str	r3, [r4, #4]
 800443a:	6923      	ldr	r3, [r4, #16]
 800443c:	6023      	str	r3, [r4, #0]
 800443e:	89a3      	ldrh	r3, [r4, #12]
 8004440:	f043 0308 	orr.w	r3, r3, #8
 8004444:	81a3      	strh	r3, [r4, #12]
 8004446:	6923      	ldr	r3, [r4, #16]
 8004448:	b94b      	cbnz	r3, 800445e <__swsetup_r+0x9a>
 800444a:	89a3      	ldrh	r3, [r4, #12]
 800444c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004454:	d003      	beq.n	800445e <__swsetup_r+0x9a>
 8004456:	4621      	mov	r1, r4
 8004458:	4630      	mov	r0, r6
 800445a:	f000 fa63 	bl	8004924 <__smakebuf_r>
 800445e:	89a0      	ldrh	r0, [r4, #12]
 8004460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004464:	f010 0301 	ands.w	r3, r0, #1
 8004468:	d00a      	beq.n	8004480 <__swsetup_r+0xbc>
 800446a:	2300      	movs	r3, #0
 800446c:	60a3      	str	r3, [r4, #8]
 800446e:	6963      	ldr	r3, [r4, #20]
 8004470:	425b      	negs	r3, r3
 8004472:	61a3      	str	r3, [r4, #24]
 8004474:	6923      	ldr	r3, [r4, #16]
 8004476:	b943      	cbnz	r3, 800448a <__swsetup_r+0xc6>
 8004478:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800447c:	d1ba      	bne.n	80043f4 <__swsetup_r+0x30>
 800447e:	bd70      	pop	{r4, r5, r6, pc}
 8004480:	0781      	lsls	r1, r0, #30
 8004482:	bf58      	it	pl
 8004484:	6963      	ldrpl	r3, [r4, #20]
 8004486:	60a3      	str	r3, [r4, #8]
 8004488:	e7f4      	b.n	8004474 <__swsetup_r+0xb0>
 800448a:	2000      	movs	r0, #0
 800448c:	e7f7      	b.n	800447e <__swsetup_r+0xba>
 800448e:	bf00      	nop
 8004490:	20000010 	.word	0x20000010
 8004494:	08005370 	.word	0x08005370
 8004498:	08005390 	.word	0x08005390
 800449c:	08005350 	.word	0x08005350

080044a0 <__register_exitproc>:
 80044a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044a4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8004560 <__register_exitproc+0xc0>
 80044a8:	4606      	mov	r6, r0
 80044aa:	f8d8 0000 	ldr.w	r0, [r8]
 80044ae:	461f      	mov	r7, r3
 80044b0:	460d      	mov	r5, r1
 80044b2:	4691      	mov	r9, r2
 80044b4:	f000 fa0e 	bl	80048d4 <__retarget_lock_acquire_recursive>
 80044b8:	4b25      	ldr	r3, [pc, #148]	; (8004550 <__register_exitproc+0xb0>)
 80044ba:	681c      	ldr	r4, [r3, #0]
 80044bc:	b934      	cbnz	r4, 80044cc <__register_exitproc+0x2c>
 80044be:	4c25      	ldr	r4, [pc, #148]	; (8004554 <__register_exitproc+0xb4>)
 80044c0:	601c      	str	r4, [r3, #0]
 80044c2:	4b25      	ldr	r3, [pc, #148]	; (8004558 <__register_exitproc+0xb8>)
 80044c4:	b113      	cbz	r3, 80044cc <__register_exitproc+0x2c>
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80044cc:	6863      	ldr	r3, [r4, #4]
 80044ce:	2b1f      	cmp	r3, #31
 80044d0:	dd07      	ble.n	80044e2 <__register_exitproc+0x42>
 80044d2:	f8d8 0000 	ldr.w	r0, [r8]
 80044d6:	f000 f9ff 	bl	80048d8 <__retarget_lock_release_recursive>
 80044da:	f04f 30ff 	mov.w	r0, #4294967295
 80044de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044e2:	b34e      	cbz	r6, 8004538 <__register_exitproc+0x98>
 80044e4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80044e8:	b988      	cbnz	r0, 800450e <__register_exitproc+0x6e>
 80044ea:	4b1c      	ldr	r3, [pc, #112]	; (800455c <__register_exitproc+0xbc>)
 80044ec:	b923      	cbnz	r3, 80044f8 <__register_exitproc+0x58>
 80044ee:	f8d8 0000 	ldr.w	r0, [r8]
 80044f2:	f000 f9f0 	bl	80048d6 <__retarget_lock_release>
 80044f6:	e7f0      	b.n	80044da <__register_exitproc+0x3a>
 80044f8:	f44f 7084 	mov.w	r0, #264	; 0x108
 80044fc:	f7ff fac4 	bl	8003a88 <malloc>
 8004500:	2800      	cmp	r0, #0
 8004502:	d0f4      	beq.n	80044ee <__register_exitproc+0x4e>
 8004504:	2300      	movs	r3, #0
 8004506:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800450a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800450e:	6863      	ldr	r3, [r4, #4]
 8004510:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8004514:	2201      	movs	r2, #1
 8004516:	409a      	lsls	r2, r3
 8004518:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800451c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8004520:	4313      	orrs	r3, r2
 8004522:	2e02      	cmp	r6, #2
 8004524:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8004528:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 800452c:	bf02      	ittt	eq
 800452e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8004532:	431a      	orreq	r2, r3
 8004534:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8004538:	6863      	ldr	r3, [r4, #4]
 800453a:	f8d8 0000 	ldr.w	r0, [r8]
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	3302      	adds	r3, #2
 8004542:	6062      	str	r2, [r4, #4]
 8004544:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8004548:	f000 f9c6 	bl	80048d8 <__retarget_lock_release_recursive>
 800454c:	2000      	movs	r0, #0
 800454e:	e7c6      	b.n	80044de <__register_exitproc+0x3e>
 8004550:	20000394 	.word	0x20000394
 8004554:	20000308 	.word	0x20000308
 8004558:	00000000 	.word	0x00000000
 800455c:	08003a89 	.word	0x08003a89
 8004560:	20000074 	.word	0x20000074

08004564 <__sflush_r>:
 8004564:	898a      	ldrh	r2, [r1, #12]
 8004566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800456a:	4605      	mov	r5, r0
 800456c:	0710      	lsls	r0, r2, #28
 800456e:	460c      	mov	r4, r1
 8004570:	d458      	bmi.n	8004624 <__sflush_r+0xc0>
 8004572:	684b      	ldr	r3, [r1, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	dc05      	bgt.n	8004584 <__sflush_r+0x20>
 8004578:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	dc02      	bgt.n	8004584 <__sflush_r+0x20>
 800457e:	2000      	movs	r0, #0
 8004580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004584:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004586:	2e00      	cmp	r6, #0
 8004588:	d0f9      	beq.n	800457e <__sflush_r+0x1a>
 800458a:	2300      	movs	r3, #0
 800458c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004590:	682f      	ldr	r7, [r5, #0]
 8004592:	602b      	str	r3, [r5, #0]
 8004594:	d032      	beq.n	80045fc <__sflush_r+0x98>
 8004596:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004598:	89a3      	ldrh	r3, [r4, #12]
 800459a:	075a      	lsls	r2, r3, #29
 800459c:	d505      	bpl.n	80045aa <__sflush_r+0x46>
 800459e:	6863      	ldr	r3, [r4, #4]
 80045a0:	1ac0      	subs	r0, r0, r3
 80045a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045a4:	b10b      	cbz	r3, 80045aa <__sflush_r+0x46>
 80045a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045a8:	1ac0      	subs	r0, r0, r3
 80045aa:	2300      	movs	r3, #0
 80045ac:	4602      	mov	r2, r0
 80045ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045b0:	6a21      	ldr	r1, [r4, #32]
 80045b2:	4628      	mov	r0, r5
 80045b4:	47b0      	blx	r6
 80045b6:	1c43      	adds	r3, r0, #1
 80045b8:	89a3      	ldrh	r3, [r4, #12]
 80045ba:	d106      	bne.n	80045ca <__sflush_r+0x66>
 80045bc:	6829      	ldr	r1, [r5, #0]
 80045be:	291d      	cmp	r1, #29
 80045c0:	d82c      	bhi.n	800461c <__sflush_r+0xb8>
 80045c2:	4a2a      	ldr	r2, [pc, #168]	; (800466c <__sflush_r+0x108>)
 80045c4:	40ca      	lsrs	r2, r1
 80045c6:	07d6      	lsls	r6, r2, #31
 80045c8:	d528      	bpl.n	800461c <__sflush_r+0xb8>
 80045ca:	2200      	movs	r2, #0
 80045cc:	6062      	str	r2, [r4, #4]
 80045ce:	04d9      	lsls	r1, r3, #19
 80045d0:	6922      	ldr	r2, [r4, #16]
 80045d2:	6022      	str	r2, [r4, #0]
 80045d4:	d504      	bpl.n	80045e0 <__sflush_r+0x7c>
 80045d6:	1c42      	adds	r2, r0, #1
 80045d8:	d101      	bne.n	80045de <__sflush_r+0x7a>
 80045da:	682b      	ldr	r3, [r5, #0]
 80045dc:	b903      	cbnz	r3, 80045e0 <__sflush_r+0x7c>
 80045de:	6560      	str	r0, [r4, #84]	; 0x54
 80045e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045e2:	602f      	str	r7, [r5, #0]
 80045e4:	2900      	cmp	r1, #0
 80045e6:	d0ca      	beq.n	800457e <__sflush_r+0x1a>
 80045e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045ec:	4299      	cmp	r1, r3
 80045ee:	d002      	beq.n	80045f6 <__sflush_r+0x92>
 80045f0:	4628      	mov	r0, r5
 80045f2:	f7ff fa89 	bl	8003b08 <_free_r>
 80045f6:	2000      	movs	r0, #0
 80045f8:	6360      	str	r0, [r4, #52]	; 0x34
 80045fa:	e7c1      	b.n	8004580 <__sflush_r+0x1c>
 80045fc:	6a21      	ldr	r1, [r4, #32]
 80045fe:	2301      	movs	r3, #1
 8004600:	4628      	mov	r0, r5
 8004602:	47b0      	blx	r6
 8004604:	1c41      	adds	r1, r0, #1
 8004606:	d1c7      	bne.n	8004598 <__sflush_r+0x34>
 8004608:	682b      	ldr	r3, [r5, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0c4      	beq.n	8004598 <__sflush_r+0x34>
 800460e:	2b1d      	cmp	r3, #29
 8004610:	d001      	beq.n	8004616 <__sflush_r+0xb2>
 8004612:	2b16      	cmp	r3, #22
 8004614:	d101      	bne.n	800461a <__sflush_r+0xb6>
 8004616:	602f      	str	r7, [r5, #0]
 8004618:	e7b1      	b.n	800457e <__sflush_r+0x1a>
 800461a:	89a3      	ldrh	r3, [r4, #12]
 800461c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004620:	81a3      	strh	r3, [r4, #12]
 8004622:	e7ad      	b.n	8004580 <__sflush_r+0x1c>
 8004624:	690f      	ldr	r7, [r1, #16]
 8004626:	2f00      	cmp	r7, #0
 8004628:	d0a9      	beq.n	800457e <__sflush_r+0x1a>
 800462a:	0793      	lsls	r3, r2, #30
 800462c:	680e      	ldr	r6, [r1, #0]
 800462e:	bf08      	it	eq
 8004630:	694b      	ldreq	r3, [r1, #20]
 8004632:	600f      	str	r7, [r1, #0]
 8004634:	bf18      	it	ne
 8004636:	2300      	movne	r3, #0
 8004638:	eba6 0807 	sub.w	r8, r6, r7
 800463c:	608b      	str	r3, [r1, #8]
 800463e:	f1b8 0f00 	cmp.w	r8, #0
 8004642:	dd9c      	ble.n	800457e <__sflush_r+0x1a>
 8004644:	6a21      	ldr	r1, [r4, #32]
 8004646:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004648:	4643      	mov	r3, r8
 800464a:	463a      	mov	r2, r7
 800464c:	4628      	mov	r0, r5
 800464e:	47b0      	blx	r6
 8004650:	2800      	cmp	r0, #0
 8004652:	dc06      	bgt.n	8004662 <__sflush_r+0xfe>
 8004654:	89a3      	ldrh	r3, [r4, #12]
 8004656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800465a:	81a3      	strh	r3, [r4, #12]
 800465c:	f04f 30ff 	mov.w	r0, #4294967295
 8004660:	e78e      	b.n	8004580 <__sflush_r+0x1c>
 8004662:	4407      	add	r7, r0
 8004664:	eba8 0800 	sub.w	r8, r8, r0
 8004668:	e7e9      	b.n	800463e <__sflush_r+0xda>
 800466a:	bf00      	nop
 800466c:	20400001 	.word	0x20400001

08004670 <_fflush_r>:
 8004670:	b538      	push	{r3, r4, r5, lr}
 8004672:	690b      	ldr	r3, [r1, #16]
 8004674:	4605      	mov	r5, r0
 8004676:	460c      	mov	r4, r1
 8004678:	b913      	cbnz	r3, 8004680 <_fflush_r+0x10>
 800467a:	2500      	movs	r5, #0
 800467c:	4628      	mov	r0, r5
 800467e:	bd38      	pop	{r3, r4, r5, pc}
 8004680:	b118      	cbz	r0, 800468a <_fflush_r+0x1a>
 8004682:	6983      	ldr	r3, [r0, #24]
 8004684:	b90b      	cbnz	r3, 800468a <_fflush_r+0x1a>
 8004686:	f000 f887 	bl	8004798 <__sinit>
 800468a:	4b14      	ldr	r3, [pc, #80]	; (80046dc <_fflush_r+0x6c>)
 800468c:	429c      	cmp	r4, r3
 800468e:	d11b      	bne.n	80046c8 <_fflush_r+0x58>
 8004690:	686c      	ldr	r4, [r5, #4]
 8004692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0ef      	beq.n	800467a <_fflush_r+0xa>
 800469a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800469c:	07d0      	lsls	r0, r2, #31
 800469e:	d404      	bmi.n	80046aa <_fflush_r+0x3a>
 80046a0:	0599      	lsls	r1, r3, #22
 80046a2:	d402      	bmi.n	80046aa <_fflush_r+0x3a>
 80046a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046a6:	f000 f915 	bl	80048d4 <__retarget_lock_acquire_recursive>
 80046aa:	4628      	mov	r0, r5
 80046ac:	4621      	mov	r1, r4
 80046ae:	f7ff ff59 	bl	8004564 <__sflush_r>
 80046b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046b4:	07da      	lsls	r2, r3, #31
 80046b6:	4605      	mov	r5, r0
 80046b8:	d4e0      	bmi.n	800467c <_fflush_r+0xc>
 80046ba:	89a3      	ldrh	r3, [r4, #12]
 80046bc:	059b      	lsls	r3, r3, #22
 80046be:	d4dd      	bmi.n	800467c <_fflush_r+0xc>
 80046c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046c2:	f000 f909 	bl	80048d8 <__retarget_lock_release_recursive>
 80046c6:	e7d9      	b.n	800467c <_fflush_r+0xc>
 80046c8:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <_fflush_r+0x70>)
 80046ca:	429c      	cmp	r4, r3
 80046cc:	d101      	bne.n	80046d2 <_fflush_r+0x62>
 80046ce:	68ac      	ldr	r4, [r5, #8]
 80046d0:	e7df      	b.n	8004692 <_fflush_r+0x22>
 80046d2:	4b04      	ldr	r3, [pc, #16]	; (80046e4 <_fflush_r+0x74>)
 80046d4:	429c      	cmp	r4, r3
 80046d6:	bf08      	it	eq
 80046d8:	68ec      	ldreq	r4, [r5, #12]
 80046da:	e7da      	b.n	8004692 <_fflush_r+0x22>
 80046dc:	08005370 	.word	0x08005370
 80046e0:	08005390 	.word	0x08005390
 80046e4:	08005350 	.word	0x08005350

080046e8 <std>:
 80046e8:	2300      	movs	r3, #0
 80046ea:	b510      	push	{r4, lr}
 80046ec:	4604      	mov	r4, r0
 80046ee:	e9c0 3300 	strd	r3, r3, [r0]
 80046f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046f6:	6083      	str	r3, [r0, #8]
 80046f8:	8181      	strh	r1, [r0, #12]
 80046fa:	6643      	str	r3, [r0, #100]	; 0x64
 80046fc:	81c2      	strh	r2, [r0, #14]
 80046fe:	6183      	str	r3, [r0, #24]
 8004700:	4619      	mov	r1, r3
 8004702:	2208      	movs	r2, #8
 8004704:	305c      	adds	r0, #92	; 0x5c
 8004706:	f7ff f9f7 	bl	8003af8 <memset>
 800470a:	4b05      	ldr	r3, [pc, #20]	; (8004720 <std+0x38>)
 800470c:	6263      	str	r3, [r4, #36]	; 0x24
 800470e:	4b05      	ldr	r3, [pc, #20]	; (8004724 <std+0x3c>)
 8004710:	62a3      	str	r3, [r4, #40]	; 0x28
 8004712:	4b05      	ldr	r3, [pc, #20]	; (8004728 <std+0x40>)
 8004714:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004716:	4b05      	ldr	r3, [pc, #20]	; (800472c <std+0x44>)
 8004718:	6224      	str	r4, [r4, #32]
 800471a:	6323      	str	r3, [r4, #48]	; 0x30
 800471c:	bd10      	pop	{r4, pc}
 800471e:	bf00      	nop
 8004720:	08004cc1 	.word	0x08004cc1
 8004724:	08004ce3 	.word	0x08004ce3
 8004728:	08004d1b 	.word	0x08004d1b
 800472c:	08004d3f 	.word	0x08004d3f

08004730 <_cleanup_r>:
 8004730:	4901      	ldr	r1, [pc, #4]	; (8004738 <_cleanup_r+0x8>)
 8004732:	f000 b8af 	b.w	8004894 <_fwalk_reent>
 8004736:	bf00      	nop
 8004738:	08004671 	.word	0x08004671

0800473c <__sfmoreglue>:
 800473c:	b570      	push	{r4, r5, r6, lr}
 800473e:	1e4a      	subs	r2, r1, #1
 8004740:	2568      	movs	r5, #104	; 0x68
 8004742:	4355      	muls	r5, r2
 8004744:	460e      	mov	r6, r1
 8004746:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800474a:	f7ff fa2d 	bl	8003ba8 <_malloc_r>
 800474e:	4604      	mov	r4, r0
 8004750:	b140      	cbz	r0, 8004764 <__sfmoreglue+0x28>
 8004752:	2100      	movs	r1, #0
 8004754:	e9c0 1600 	strd	r1, r6, [r0]
 8004758:	300c      	adds	r0, #12
 800475a:	60a0      	str	r0, [r4, #8]
 800475c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004760:	f7ff f9ca 	bl	8003af8 <memset>
 8004764:	4620      	mov	r0, r4
 8004766:	bd70      	pop	{r4, r5, r6, pc}

08004768 <__sfp_lock_acquire>:
 8004768:	4801      	ldr	r0, [pc, #4]	; (8004770 <__sfp_lock_acquire+0x8>)
 800476a:	f000 b8b3 	b.w	80048d4 <__retarget_lock_acquire_recursive>
 800476e:	bf00      	nop
 8004770:	20000428 	.word	0x20000428

08004774 <__sfp_lock_release>:
 8004774:	4801      	ldr	r0, [pc, #4]	; (800477c <__sfp_lock_release+0x8>)
 8004776:	f000 b8af 	b.w	80048d8 <__retarget_lock_release_recursive>
 800477a:	bf00      	nop
 800477c:	20000428 	.word	0x20000428

08004780 <__sinit_lock_acquire>:
 8004780:	4801      	ldr	r0, [pc, #4]	; (8004788 <__sinit_lock_acquire+0x8>)
 8004782:	f000 b8a7 	b.w	80048d4 <__retarget_lock_acquire_recursive>
 8004786:	bf00      	nop
 8004788:	20000423 	.word	0x20000423

0800478c <__sinit_lock_release>:
 800478c:	4801      	ldr	r0, [pc, #4]	; (8004794 <__sinit_lock_release+0x8>)
 800478e:	f000 b8a3 	b.w	80048d8 <__retarget_lock_release_recursive>
 8004792:	bf00      	nop
 8004794:	20000423 	.word	0x20000423

08004798 <__sinit>:
 8004798:	b510      	push	{r4, lr}
 800479a:	4604      	mov	r4, r0
 800479c:	f7ff fff0 	bl	8004780 <__sinit_lock_acquire>
 80047a0:	69a3      	ldr	r3, [r4, #24]
 80047a2:	b11b      	cbz	r3, 80047ac <__sinit+0x14>
 80047a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047a8:	f7ff bff0 	b.w	800478c <__sinit_lock_release>
 80047ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80047b0:	6523      	str	r3, [r4, #80]	; 0x50
 80047b2:	4b13      	ldr	r3, [pc, #76]	; (8004800 <__sinit+0x68>)
 80047b4:	4a13      	ldr	r2, [pc, #76]	; (8004804 <__sinit+0x6c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80047ba:	42a3      	cmp	r3, r4
 80047bc:	bf04      	itt	eq
 80047be:	2301      	moveq	r3, #1
 80047c0:	61a3      	streq	r3, [r4, #24]
 80047c2:	4620      	mov	r0, r4
 80047c4:	f000 f820 	bl	8004808 <__sfp>
 80047c8:	6060      	str	r0, [r4, #4]
 80047ca:	4620      	mov	r0, r4
 80047cc:	f000 f81c 	bl	8004808 <__sfp>
 80047d0:	60a0      	str	r0, [r4, #8]
 80047d2:	4620      	mov	r0, r4
 80047d4:	f000 f818 	bl	8004808 <__sfp>
 80047d8:	2200      	movs	r2, #0
 80047da:	60e0      	str	r0, [r4, #12]
 80047dc:	2104      	movs	r1, #4
 80047de:	6860      	ldr	r0, [r4, #4]
 80047e0:	f7ff ff82 	bl	80046e8 <std>
 80047e4:	68a0      	ldr	r0, [r4, #8]
 80047e6:	2201      	movs	r2, #1
 80047e8:	2109      	movs	r1, #9
 80047ea:	f7ff ff7d 	bl	80046e8 <std>
 80047ee:	68e0      	ldr	r0, [r4, #12]
 80047f0:	2202      	movs	r2, #2
 80047f2:	2112      	movs	r1, #18
 80047f4:	f7ff ff78 	bl	80046e8 <std>
 80047f8:	2301      	movs	r3, #1
 80047fa:	61a3      	str	r3, [r4, #24]
 80047fc:	e7d2      	b.n	80047a4 <__sinit+0xc>
 80047fe:	bf00      	nop
 8004800:	08005318 	.word	0x08005318
 8004804:	08004731 	.word	0x08004731

08004808 <__sfp>:
 8004808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480a:	4607      	mov	r7, r0
 800480c:	f7ff ffac 	bl	8004768 <__sfp_lock_acquire>
 8004810:	4b1e      	ldr	r3, [pc, #120]	; (800488c <__sfp+0x84>)
 8004812:	681e      	ldr	r6, [r3, #0]
 8004814:	69b3      	ldr	r3, [r6, #24]
 8004816:	b913      	cbnz	r3, 800481e <__sfp+0x16>
 8004818:	4630      	mov	r0, r6
 800481a:	f7ff ffbd 	bl	8004798 <__sinit>
 800481e:	3648      	adds	r6, #72	; 0x48
 8004820:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004824:	3b01      	subs	r3, #1
 8004826:	d503      	bpl.n	8004830 <__sfp+0x28>
 8004828:	6833      	ldr	r3, [r6, #0]
 800482a:	b30b      	cbz	r3, 8004870 <__sfp+0x68>
 800482c:	6836      	ldr	r6, [r6, #0]
 800482e:	e7f7      	b.n	8004820 <__sfp+0x18>
 8004830:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004834:	b9d5      	cbnz	r5, 800486c <__sfp+0x64>
 8004836:	4b16      	ldr	r3, [pc, #88]	; (8004890 <__sfp+0x88>)
 8004838:	60e3      	str	r3, [r4, #12]
 800483a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800483e:	6665      	str	r5, [r4, #100]	; 0x64
 8004840:	f000 f847 	bl	80048d2 <__retarget_lock_init_recursive>
 8004844:	f7ff ff96 	bl	8004774 <__sfp_lock_release>
 8004848:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800484c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004850:	6025      	str	r5, [r4, #0]
 8004852:	61a5      	str	r5, [r4, #24]
 8004854:	2208      	movs	r2, #8
 8004856:	4629      	mov	r1, r5
 8004858:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800485c:	f7ff f94c 	bl	8003af8 <memset>
 8004860:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004864:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004868:	4620      	mov	r0, r4
 800486a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800486c:	3468      	adds	r4, #104	; 0x68
 800486e:	e7d9      	b.n	8004824 <__sfp+0x1c>
 8004870:	2104      	movs	r1, #4
 8004872:	4638      	mov	r0, r7
 8004874:	f7ff ff62 	bl	800473c <__sfmoreglue>
 8004878:	4604      	mov	r4, r0
 800487a:	6030      	str	r0, [r6, #0]
 800487c:	2800      	cmp	r0, #0
 800487e:	d1d5      	bne.n	800482c <__sfp+0x24>
 8004880:	f7ff ff78 	bl	8004774 <__sfp_lock_release>
 8004884:	230c      	movs	r3, #12
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	e7ee      	b.n	8004868 <__sfp+0x60>
 800488a:	bf00      	nop
 800488c:	08005318 	.word	0x08005318
 8004890:	ffff0001 	.word	0xffff0001

08004894 <_fwalk_reent>:
 8004894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004898:	4606      	mov	r6, r0
 800489a:	4688      	mov	r8, r1
 800489c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048a0:	2700      	movs	r7, #0
 80048a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048a6:	f1b9 0901 	subs.w	r9, r9, #1
 80048aa:	d505      	bpl.n	80048b8 <_fwalk_reent+0x24>
 80048ac:	6824      	ldr	r4, [r4, #0]
 80048ae:	2c00      	cmp	r4, #0
 80048b0:	d1f7      	bne.n	80048a2 <_fwalk_reent+0xe>
 80048b2:	4638      	mov	r0, r7
 80048b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048b8:	89ab      	ldrh	r3, [r5, #12]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d907      	bls.n	80048ce <_fwalk_reent+0x3a>
 80048be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048c2:	3301      	adds	r3, #1
 80048c4:	d003      	beq.n	80048ce <_fwalk_reent+0x3a>
 80048c6:	4629      	mov	r1, r5
 80048c8:	4630      	mov	r0, r6
 80048ca:	47c0      	blx	r8
 80048cc:	4307      	orrs	r7, r0
 80048ce:	3568      	adds	r5, #104	; 0x68
 80048d0:	e7e9      	b.n	80048a6 <_fwalk_reent+0x12>

080048d2 <__retarget_lock_init_recursive>:
 80048d2:	4770      	bx	lr

080048d4 <__retarget_lock_acquire_recursive>:
 80048d4:	4770      	bx	lr

080048d6 <__retarget_lock_release>:
 80048d6:	4770      	bx	lr

080048d8 <__retarget_lock_release_recursive>:
 80048d8:	4770      	bx	lr

080048da <__swhatbuf_r>:
 80048da:	b570      	push	{r4, r5, r6, lr}
 80048dc:	460e      	mov	r6, r1
 80048de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048e2:	2900      	cmp	r1, #0
 80048e4:	b096      	sub	sp, #88	; 0x58
 80048e6:	4614      	mov	r4, r2
 80048e8:	461d      	mov	r5, r3
 80048ea:	da07      	bge.n	80048fc <__swhatbuf_r+0x22>
 80048ec:	2300      	movs	r3, #0
 80048ee:	602b      	str	r3, [r5, #0]
 80048f0:	89b3      	ldrh	r3, [r6, #12]
 80048f2:	061a      	lsls	r2, r3, #24
 80048f4:	d410      	bmi.n	8004918 <__swhatbuf_r+0x3e>
 80048f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048fa:	e00e      	b.n	800491a <__swhatbuf_r+0x40>
 80048fc:	466a      	mov	r2, sp
 80048fe:	f000 fa45 	bl	8004d8c <_fstat_r>
 8004902:	2800      	cmp	r0, #0
 8004904:	dbf2      	blt.n	80048ec <__swhatbuf_r+0x12>
 8004906:	9a01      	ldr	r2, [sp, #4]
 8004908:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800490c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004910:	425a      	negs	r2, r3
 8004912:	415a      	adcs	r2, r3
 8004914:	602a      	str	r2, [r5, #0]
 8004916:	e7ee      	b.n	80048f6 <__swhatbuf_r+0x1c>
 8004918:	2340      	movs	r3, #64	; 0x40
 800491a:	2000      	movs	r0, #0
 800491c:	6023      	str	r3, [r4, #0]
 800491e:	b016      	add	sp, #88	; 0x58
 8004920:	bd70      	pop	{r4, r5, r6, pc}
	...

08004924 <__smakebuf_r>:
 8004924:	898b      	ldrh	r3, [r1, #12]
 8004926:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004928:	079d      	lsls	r5, r3, #30
 800492a:	4606      	mov	r6, r0
 800492c:	460c      	mov	r4, r1
 800492e:	d507      	bpl.n	8004940 <__smakebuf_r+0x1c>
 8004930:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004934:	6023      	str	r3, [r4, #0]
 8004936:	6123      	str	r3, [r4, #16]
 8004938:	2301      	movs	r3, #1
 800493a:	6163      	str	r3, [r4, #20]
 800493c:	b002      	add	sp, #8
 800493e:	bd70      	pop	{r4, r5, r6, pc}
 8004940:	ab01      	add	r3, sp, #4
 8004942:	466a      	mov	r2, sp
 8004944:	f7ff ffc9 	bl	80048da <__swhatbuf_r>
 8004948:	9900      	ldr	r1, [sp, #0]
 800494a:	4605      	mov	r5, r0
 800494c:	4630      	mov	r0, r6
 800494e:	f7ff f92b 	bl	8003ba8 <_malloc_r>
 8004952:	b948      	cbnz	r0, 8004968 <__smakebuf_r+0x44>
 8004954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004958:	059a      	lsls	r2, r3, #22
 800495a:	d4ef      	bmi.n	800493c <__smakebuf_r+0x18>
 800495c:	f023 0303 	bic.w	r3, r3, #3
 8004960:	f043 0302 	orr.w	r3, r3, #2
 8004964:	81a3      	strh	r3, [r4, #12]
 8004966:	e7e3      	b.n	8004930 <__smakebuf_r+0xc>
 8004968:	4b0d      	ldr	r3, [pc, #52]	; (80049a0 <__smakebuf_r+0x7c>)
 800496a:	62b3      	str	r3, [r6, #40]	; 0x28
 800496c:	89a3      	ldrh	r3, [r4, #12]
 800496e:	6020      	str	r0, [r4, #0]
 8004970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004974:	81a3      	strh	r3, [r4, #12]
 8004976:	9b00      	ldr	r3, [sp, #0]
 8004978:	6163      	str	r3, [r4, #20]
 800497a:	9b01      	ldr	r3, [sp, #4]
 800497c:	6120      	str	r0, [r4, #16]
 800497e:	b15b      	cbz	r3, 8004998 <__smakebuf_r+0x74>
 8004980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004984:	4630      	mov	r0, r6
 8004986:	f000 fa13 	bl	8004db0 <_isatty_r>
 800498a:	b128      	cbz	r0, 8004998 <__smakebuf_r+0x74>
 800498c:	89a3      	ldrh	r3, [r4, #12]
 800498e:	f023 0303 	bic.w	r3, r3, #3
 8004992:	f043 0301 	orr.w	r3, r3, #1
 8004996:	81a3      	strh	r3, [r4, #12]
 8004998:	89a0      	ldrh	r0, [r4, #12]
 800499a:	4305      	orrs	r5, r0
 800499c:	81a5      	strh	r5, [r4, #12]
 800499e:	e7cd      	b.n	800493c <__smakebuf_r+0x18>
 80049a0:	08004731 	.word	0x08004731

080049a4 <__malloc_lock>:
 80049a4:	4801      	ldr	r0, [pc, #4]	; (80049ac <__malloc_lock+0x8>)
 80049a6:	f7ff bf95 	b.w	80048d4 <__retarget_lock_acquire_recursive>
 80049aa:	bf00      	nop
 80049ac:	20000424 	.word	0x20000424

080049b0 <__malloc_unlock>:
 80049b0:	4801      	ldr	r0, [pc, #4]	; (80049b8 <__malloc_unlock+0x8>)
 80049b2:	f7ff bf91 	b.w	80048d8 <__retarget_lock_release_recursive>
 80049b6:	bf00      	nop
 80049b8:	20000424 	.word	0x20000424

080049bc <_realloc_r>:
 80049bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049be:	4607      	mov	r7, r0
 80049c0:	4614      	mov	r4, r2
 80049c2:	460e      	mov	r6, r1
 80049c4:	b921      	cbnz	r1, 80049d0 <_realloc_r+0x14>
 80049c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80049ca:	4611      	mov	r1, r2
 80049cc:	f7ff b8ec 	b.w	8003ba8 <_malloc_r>
 80049d0:	b922      	cbnz	r2, 80049dc <_realloc_r+0x20>
 80049d2:	f7ff f899 	bl	8003b08 <_free_r>
 80049d6:	4625      	mov	r5, r4
 80049d8:	4628      	mov	r0, r5
 80049da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049dc:	f000 fa0a 	bl	8004df4 <_malloc_usable_size_r>
 80049e0:	42a0      	cmp	r0, r4
 80049e2:	d20f      	bcs.n	8004a04 <_realloc_r+0x48>
 80049e4:	4621      	mov	r1, r4
 80049e6:	4638      	mov	r0, r7
 80049e8:	f7ff f8de 	bl	8003ba8 <_malloc_r>
 80049ec:	4605      	mov	r5, r0
 80049ee:	2800      	cmp	r0, #0
 80049f0:	d0f2      	beq.n	80049d8 <_realloc_r+0x1c>
 80049f2:	4631      	mov	r1, r6
 80049f4:	4622      	mov	r2, r4
 80049f6:	f7ff f857 	bl	8003aa8 <memcpy>
 80049fa:	4631      	mov	r1, r6
 80049fc:	4638      	mov	r0, r7
 80049fe:	f7ff f883 	bl	8003b08 <_free_r>
 8004a02:	e7e9      	b.n	80049d8 <_realloc_r+0x1c>
 8004a04:	4635      	mov	r5, r6
 8004a06:	e7e7      	b.n	80049d8 <_realloc_r+0x1c>

08004a08 <__ssputs_r>:
 8004a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a0c:	688e      	ldr	r6, [r1, #8]
 8004a0e:	429e      	cmp	r6, r3
 8004a10:	4682      	mov	sl, r0
 8004a12:	460c      	mov	r4, r1
 8004a14:	4690      	mov	r8, r2
 8004a16:	461f      	mov	r7, r3
 8004a18:	d838      	bhi.n	8004a8c <__ssputs_r+0x84>
 8004a1a:	898a      	ldrh	r2, [r1, #12]
 8004a1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a20:	d032      	beq.n	8004a88 <__ssputs_r+0x80>
 8004a22:	6825      	ldr	r5, [r4, #0]
 8004a24:	6909      	ldr	r1, [r1, #16]
 8004a26:	eba5 0901 	sub.w	r9, r5, r1
 8004a2a:	6965      	ldr	r5, [r4, #20]
 8004a2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a34:	3301      	adds	r3, #1
 8004a36:	444b      	add	r3, r9
 8004a38:	106d      	asrs	r5, r5, #1
 8004a3a:	429d      	cmp	r5, r3
 8004a3c:	bf38      	it	cc
 8004a3e:	461d      	movcc	r5, r3
 8004a40:	0553      	lsls	r3, r2, #21
 8004a42:	d531      	bpl.n	8004aa8 <__ssputs_r+0xa0>
 8004a44:	4629      	mov	r1, r5
 8004a46:	f7ff f8af 	bl	8003ba8 <_malloc_r>
 8004a4a:	4606      	mov	r6, r0
 8004a4c:	b950      	cbnz	r0, 8004a64 <__ssputs_r+0x5c>
 8004a4e:	230c      	movs	r3, #12
 8004a50:	f8ca 3000 	str.w	r3, [sl]
 8004a54:	89a3      	ldrh	r3, [r4, #12]
 8004a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a5a:	81a3      	strh	r3, [r4, #12]
 8004a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a64:	6921      	ldr	r1, [r4, #16]
 8004a66:	464a      	mov	r2, r9
 8004a68:	f7ff f81e 	bl	8003aa8 <memcpy>
 8004a6c:	89a3      	ldrh	r3, [r4, #12]
 8004a6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a76:	81a3      	strh	r3, [r4, #12]
 8004a78:	6126      	str	r6, [r4, #16]
 8004a7a:	6165      	str	r5, [r4, #20]
 8004a7c:	444e      	add	r6, r9
 8004a7e:	eba5 0509 	sub.w	r5, r5, r9
 8004a82:	6026      	str	r6, [r4, #0]
 8004a84:	60a5      	str	r5, [r4, #8]
 8004a86:	463e      	mov	r6, r7
 8004a88:	42be      	cmp	r6, r7
 8004a8a:	d900      	bls.n	8004a8e <__ssputs_r+0x86>
 8004a8c:	463e      	mov	r6, r7
 8004a8e:	4632      	mov	r2, r6
 8004a90:	6820      	ldr	r0, [r4, #0]
 8004a92:	4641      	mov	r1, r8
 8004a94:	f7ff f816 	bl	8003ac4 <memmove>
 8004a98:	68a3      	ldr	r3, [r4, #8]
 8004a9a:	6822      	ldr	r2, [r4, #0]
 8004a9c:	1b9b      	subs	r3, r3, r6
 8004a9e:	4432      	add	r2, r6
 8004aa0:	60a3      	str	r3, [r4, #8]
 8004aa2:	6022      	str	r2, [r4, #0]
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	e7db      	b.n	8004a60 <__ssputs_r+0x58>
 8004aa8:	462a      	mov	r2, r5
 8004aaa:	f7ff ff87 	bl	80049bc <_realloc_r>
 8004aae:	4606      	mov	r6, r0
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	d1e1      	bne.n	8004a78 <__ssputs_r+0x70>
 8004ab4:	6921      	ldr	r1, [r4, #16]
 8004ab6:	4650      	mov	r0, sl
 8004ab8:	f7ff f826 	bl	8003b08 <_free_r>
 8004abc:	e7c7      	b.n	8004a4e <__ssputs_r+0x46>
	...

08004ac0 <_svfiprintf_r>:
 8004ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac4:	4698      	mov	r8, r3
 8004ac6:	898b      	ldrh	r3, [r1, #12]
 8004ac8:	061b      	lsls	r3, r3, #24
 8004aca:	b09d      	sub	sp, #116	; 0x74
 8004acc:	4607      	mov	r7, r0
 8004ace:	460d      	mov	r5, r1
 8004ad0:	4614      	mov	r4, r2
 8004ad2:	d50e      	bpl.n	8004af2 <_svfiprintf_r+0x32>
 8004ad4:	690b      	ldr	r3, [r1, #16]
 8004ad6:	b963      	cbnz	r3, 8004af2 <_svfiprintf_r+0x32>
 8004ad8:	2140      	movs	r1, #64	; 0x40
 8004ada:	f7ff f865 	bl	8003ba8 <_malloc_r>
 8004ade:	6028      	str	r0, [r5, #0]
 8004ae0:	6128      	str	r0, [r5, #16]
 8004ae2:	b920      	cbnz	r0, 8004aee <_svfiprintf_r+0x2e>
 8004ae4:	230c      	movs	r3, #12
 8004ae6:	603b      	str	r3, [r7, #0]
 8004ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aec:	e0d1      	b.n	8004c92 <_svfiprintf_r+0x1d2>
 8004aee:	2340      	movs	r3, #64	; 0x40
 8004af0:	616b      	str	r3, [r5, #20]
 8004af2:	2300      	movs	r3, #0
 8004af4:	9309      	str	r3, [sp, #36]	; 0x24
 8004af6:	2320      	movs	r3, #32
 8004af8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004afc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b00:	2330      	movs	r3, #48	; 0x30
 8004b02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004cac <_svfiprintf_r+0x1ec>
 8004b06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b0a:	f04f 0901 	mov.w	r9, #1
 8004b0e:	4623      	mov	r3, r4
 8004b10:	469a      	mov	sl, r3
 8004b12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b16:	b10a      	cbz	r2, 8004b1c <_svfiprintf_r+0x5c>
 8004b18:	2a25      	cmp	r2, #37	; 0x25
 8004b1a:	d1f9      	bne.n	8004b10 <_svfiprintf_r+0x50>
 8004b1c:	ebba 0b04 	subs.w	fp, sl, r4
 8004b20:	d00b      	beq.n	8004b3a <_svfiprintf_r+0x7a>
 8004b22:	465b      	mov	r3, fp
 8004b24:	4622      	mov	r2, r4
 8004b26:	4629      	mov	r1, r5
 8004b28:	4638      	mov	r0, r7
 8004b2a:	f7ff ff6d 	bl	8004a08 <__ssputs_r>
 8004b2e:	3001      	adds	r0, #1
 8004b30:	f000 80aa 	beq.w	8004c88 <_svfiprintf_r+0x1c8>
 8004b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b36:	445a      	add	r2, fp
 8004b38:	9209      	str	r2, [sp, #36]	; 0x24
 8004b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 80a2 	beq.w	8004c88 <_svfiprintf_r+0x1c8>
 8004b44:	2300      	movs	r3, #0
 8004b46:	f04f 32ff 	mov.w	r2, #4294967295
 8004b4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b4e:	f10a 0a01 	add.w	sl, sl, #1
 8004b52:	9304      	str	r3, [sp, #16]
 8004b54:	9307      	str	r3, [sp, #28]
 8004b56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b5a:	931a      	str	r3, [sp, #104]	; 0x68
 8004b5c:	4654      	mov	r4, sl
 8004b5e:	2205      	movs	r2, #5
 8004b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b64:	4851      	ldr	r0, [pc, #324]	; (8004cac <_svfiprintf_r+0x1ec>)
 8004b66:	f7fb fb53 	bl	8000210 <memchr>
 8004b6a:	9a04      	ldr	r2, [sp, #16]
 8004b6c:	b9d8      	cbnz	r0, 8004ba6 <_svfiprintf_r+0xe6>
 8004b6e:	06d0      	lsls	r0, r2, #27
 8004b70:	bf44      	itt	mi
 8004b72:	2320      	movmi	r3, #32
 8004b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b78:	0711      	lsls	r1, r2, #28
 8004b7a:	bf44      	itt	mi
 8004b7c:	232b      	movmi	r3, #43	; 0x2b
 8004b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b82:	f89a 3000 	ldrb.w	r3, [sl]
 8004b86:	2b2a      	cmp	r3, #42	; 0x2a
 8004b88:	d015      	beq.n	8004bb6 <_svfiprintf_r+0xf6>
 8004b8a:	9a07      	ldr	r2, [sp, #28]
 8004b8c:	4654      	mov	r4, sl
 8004b8e:	2000      	movs	r0, #0
 8004b90:	f04f 0c0a 	mov.w	ip, #10
 8004b94:	4621      	mov	r1, r4
 8004b96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b9a:	3b30      	subs	r3, #48	; 0x30
 8004b9c:	2b09      	cmp	r3, #9
 8004b9e:	d94e      	bls.n	8004c3e <_svfiprintf_r+0x17e>
 8004ba0:	b1b0      	cbz	r0, 8004bd0 <_svfiprintf_r+0x110>
 8004ba2:	9207      	str	r2, [sp, #28]
 8004ba4:	e014      	b.n	8004bd0 <_svfiprintf_r+0x110>
 8004ba6:	eba0 0308 	sub.w	r3, r0, r8
 8004baa:	fa09 f303 	lsl.w	r3, r9, r3
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	9304      	str	r3, [sp, #16]
 8004bb2:	46a2      	mov	sl, r4
 8004bb4:	e7d2      	b.n	8004b5c <_svfiprintf_r+0x9c>
 8004bb6:	9b03      	ldr	r3, [sp, #12]
 8004bb8:	1d19      	adds	r1, r3, #4
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	9103      	str	r1, [sp, #12]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	bfbb      	ittet	lt
 8004bc2:	425b      	neglt	r3, r3
 8004bc4:	f042 0202 	orrlt.w	r2, r2, #2
 8004bc8:	9307      	strge	r3, [sp, #28]
 8004bca:	9307      	strlt	r3, [sp, #28]
 8004bcc:	bfb8      	it	lt
 8004bce:	9204      	strlt	r2, [sp, #16]
 8004bd0:	7823      	ldrb	r3, [r4, #0]
 8004bd2:	2b2e      	cmp	r3, #46	; 0x2e
 8004bd4:	d10c      	bne.n	8004bf0 <_svfiprintf_r+0x130>
 8004bd6:	7863      	ldrb	r3, [r4, #1]
 8004bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8004bda:	d135      	bne.n	8004c48 <_svfiprintf_r+0x188>
 8004bdc:	9b03      	ldr	r3, [sp, #12]
 8004bde:	1d1a      	adds	r2, r3, #4
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	9203      	str	r2, [sp, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	bfb8      	it	lt
 8004be8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004bec:	3402      	adds	r4, #2
 8004bee:	9305      	str	r3, [sp, #20]
 8004bf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004cbc <_svfiprintf_r+0x1fc>
 8004bf4:	7821      	ldrb	r1, [r4, #0]
 8004bf6:	2203      	movs	r2, #3
 8004bf8:	4650      	mov	r0, sl
 8004bfa:	f7fb fb09 	bl	8000210 <memchr>
 8004bfe:	b140      	cbz	r0, 8004c12 <_svfiprintf_r+0x152>
 8004c00:	2340      	movs	r3, #64	; 0x40
 8004c02:	eba0 000a 	sub.w	r0, r0, sl
 8004c06:	fa03 f000 	lsl.w	r0, r3, r0
 8004c0a:	9b04      	ldr	r3, [sp, #16]
 8004c0c:	4303      	orrs	r3, r0
 8004c0e:	3401      	adds	r4, #1
 8004c10:	9304      	str	r3, [sp, #16]
 8004c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c16:	4826      	ldr	r0, [pc, #152]	; (8004cb0 <_svfiprintf_r+0x1f0>)
 8004c18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c1c:	2206      	movs	r2, #6
 8004c1e:	f7fb faf7 	bl	8000210 <memchr>
 8004c22:	2800      	cmp	r0, #0
 8004c24:	d038      	beq.n	8004c98 <_svfiprintf_r+0x1d8>
 8004c26:	4b23      	ldr	r3, [pc, #140]	; (8004cb4 <_svfiprintf_r+0x1f4>)
 8004c28:	bb1b      	cbnz	r3, 8004c72 <_svfiprintf_r+0x1b2>
 8004c2a:	9b03      	ldr	r3, [sp, #12]
 8004c2c:	3307      	adds	r3, #7
 8004c2e:	f023 0307 	bic.w	r3, r3, #7
 8004c32:	3308      	adds	r3, #8
 8004c34:	9303      	str	r3, [sp, #12]
 8004c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c38:	4433      	add	r3, r6
 8004c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c3c:	e767      	b.n	8004b0e <_svfiprintf_r+0x4e>
 8004c3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c42:	460c      	mov	r4, r1
 8004c44:	2001      	movs	r0, #1
 8004c46:	e7a5      	b.n	8004b94 <_svfiprintf_r+0xd4>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	3401      	adds	r4, #1
 8004c4c:	9305      	str	r3, [sp, #20]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	f04f 0c0a 	mov.w	ip, #10
 8004c54:	4620      	mov	r0, r4
 8004c56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c5a:	3a30      	subs	r2, #48	; 0x30
 8004c5c:	2a09      	cmp	r2, #9
 8004c5e:	d903      	bls.n	8004c68 <_svfiprintf_r+0x1a8>
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0c5      	beq.n	8004bf0 <_svfiprintf_r+0x130>
 8004c64:	9105      	str	r1, [sp, #20]
 8004c66:	e7c3      	b.n	8004bf0 <_svfiprintf_r+0x130>
 8004c68:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e7f0      	b.n	8004c54 <_svfiprintf_r+0x194>
 8004c72:	ab03      	add	r3, sp, #12
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	462a      	mov	r2, r5
 8004c78:	4b0f      	ldr	r3, [pc, #60]	; (8004cb8 <_svfiprintf_r+0x1f8>)
 8004c7a:	a904      	add	r1, sp, #16
 8004c7c:	4638      	mov	r0, r7
 8004c7e:	f3af 8000 	nop.w
 8004c82:	1c42      	adds	r2, r0, #1
 8004c84:	4606      	mov	r6, r0
 8004c86:	d1d6      	bne.n	8004c36 <_svfiprintf_r+0x176>
 8004c88:	89ab      	ldrh	r3, [r5, #12]
 8004c8a:	065b      	lsls	r3, r3, #25
 8004c8c:	f53f af2c 	bmi.w	8004ae8 <_svfiprintf_r+0x28>
 8004c90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c92:	b01d      	add	sp, #116	; 0x74
 8004c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c98:	ab03      	add	r3, sp, #12
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	462a      	mov	r2, r5
 8004c9e:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <_svfiprintf_r+0x1f8>)
 8004ca0:	a904      	add	r1, sp, #16
 8004ca2:	4638      	mov	r0, r7
 8004ca4:	f7ff f9a2 	bl	8003fec <_printf_i>
 8004ca8:	e7eb      	b.n	8004c82 <_svfiprintf_r+0x1c2>
 8004caa:	bf00      	nop
 8004cac:	0800531c 	.word	0x0800531c
 8004cb0:	08005326 	.word	0x08005326
 8004cb4:	00000000 	.word	0x00000000
 8004cb8:	08004a09 	.word	0x08004a09
 8004cbc:	08005322 	.word	0x08005322

08004cc0 <__sread>:
 8004cc0:	b510      	push	{r4, lr}
 8004cc2:	460c      	mov	r4, r1
 8004cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cc8:	f000 f89c 	bl	8004e04 <_read_r>
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	bfab      	itete	ge
 8004cd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004cd2:	89a3      	ldrhlt	r3, [r4, #12]
 8004cd4:	181b      	addge	r3, r3, r0
 8004cd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004cda:	bfac      	ite	ge
 8004cdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8004cde:	81a3      	strhlt	r3, [r4, #12]
 8004ce0:	bd10      	pop	{r4, pc}

08004ce2 <__swrite>:
 8004ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce6:	461f      	mov	r7, r3
 8004ce8:	898b      	ldrh	r3, [r1, #12]
 8004cea:	05db      	lsls	r3, r3, #23
 8004cec:	4605      	mov	r5, r0
 8004cee:	460c      	mov	r4, r1
 8004cf0:	4616      	mov	r6, r2
 8004cf2:	d505      	bpl.n	8004d00 <__swrite+0x1e>
 8004cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f000 f868 	bl	8004dd0 <_lseek_r>
 8004d00:	89a3      	ldrh	r3, [r4, #12]
 8004d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d0a:	81a3      	strh	r3, [r4, #12]
 8004d0c:	4632      	mov	r2, r6
 8004d0e:	463b      	mov	r3, r7
 8004d10:	4628      	mov	r0, r5
 8004d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d16:	f000 b817 	b.w	8004d48 <_write_r>

08004d1a <__sseek>:
 8004d1a:	b510      	push	{r4, lr}
 8004d1c:	460c      	mov	r4, r1
 8004d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d22:	f000 f855 	bl	8004dd0 <_lseek_r>
 8004d26:	1c43      	adds	r3, r0, #1
 8004d28:	89a3      	ldrh	r3, [r4, #12]
 8004d2a:	bf15      	itete	ne
 8004d2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d36:	81a3      	strheq	r3, [r4, #12]
 8004d38:	bf18      	it	ne
 8004d3a:	81a3      	strhne	r3, [r4, #12]
 8004d3c:	bd10      	pop	{r4, pc}

08004d3e <__sclose>:
 8004d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d42:	f000 b813 	b.w	8004d6c <_close_r>
	...

08004d48 <_write_r>:
 8004d48:	b538      	push	{r3, r4, r5, lr}
 8004d4a:	4d07      	ldr	r5, [pc, #28]	; (8004d68 <_write_r+0x20>)
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	4608      	mov	r0, r1
 8004d50:	4611      	mov	r1, r2
 8004d52:	2200      	movs	r2, #0
 8004d54:	602a      	str	r2, [r5, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	f000 f8ac 	bl	8004eb4 <_write>
 8004d5c:	1c43      	adds	r3, r0, #1
 8004d5e:	d102      	bne.n	8004d66 <_write_r+0x1e>
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	b103      	cbz	r3, 8004d66 <_write_r+0x1e>
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	bd38      	pop	{r3, r4, r5, pc}
 8004d68:	2000042c 	.word	0x2000042c

08004d6c <_close_r>:
 8004d6c:	b538      	push	{r3, r4, r5, lr}
 8004d6e:	4d06      	ldr	r5, [pc, #24]	; (8004d88 <_close_r+0x1c>)
 8004d70:	2300      	movs	r3, #0
 8004d72:	4604      	mov	r4, r0
 8004d74:	4608      	mov	r0, r1
 8004d76:	602b      	str	r3, [r5, #0]
 8004d78:	f000 f856 	bl	8004e28 <_close>
 8004d7c:	1c43      	adds	r3, r0, #1
 8004d7e:	d102      	bne.n	8004d86 <_close_r+0x1a>
 8004d80:	682b      	ldr	r3, [r5, #0]
 8004d82:	b103      	cbz	r3, 8004d86 <_close_r+0x1a>
 8004d84:	6023      	str	r3, [r4, #0]
 8004d86:	bd38      	pop	{r3, r4, r5, pc}
 8004d88:	2000042c 	.word	0x2000042c

08004d8c <_fstat_r>:
 8004d8c:	b538      	push	{r3, r4, r5, lr}
 8004d8e:	4d07      	ldr	r5, [pc, #28]	; (8004dac <_fstat_r+0x20>)
 8004d90:	2300      	movs	r3, #0
 8004d92:	4604      	mov	r4, r0
 8004d94:	4608      	mov	r0, r1
 8004d96:	4611      	mov	r1, r2
 8004d98:	602b      	str	r3, [r5, #0]
 8004d9a:	f000 f84d 	bl	8004e38 <_fstat>
 8004d9e:	1c43      	adds	r3, r0, #1
 8004da0:	d102      	bne.n	8004da8 <_fstat_r+0x1c>
 8004da2:	682b      	ldr	r3, [r5, #0]
 8004da4:	b103      	cbz	r3, 8004da8 <_fstat_r+0x1c>
 8004da6:	6023      	str	r3, [r4, #0]
 8004da8:	bd38      	pop	{r3, r4, r5, pc}
 8004daa:	bf00      	nop
 8004dac:	2000042c 	.word	0x2000042c

08004db0 <_isatty_r>:
 8004db0:	b538      	push	{r3, r4, r5, lr}
 8004db2:	4d06      	ldr	r5, [pc, #24]	; (8004dcc <_isatty_r+0x1c>)
 8004db4:	2300      	movs	r3, #0
 8004db6:	4604      	mov	r4, r0
 8004db8:	4608      	mov	r0, r1
 8004dba:	602b      	str	r3, [r5, #0]
 8004dbc:	f000 f84c 	bl	8004e58 <_isatty>
 8004dc0:	1c43      	adds	r3, r0, #1
 8004dc2:	d102      	bne.n	8004dca <_isatty_r+0x1a>
 8004dc4:	682b      	ldr	r3, [r5, #0]
 8004dc6:	b103      	cbz	r3, 8004dca <_isatty_r+0x1a>
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	bd38      	pop	{r3, r4, r5, pc}
 8004dcc:	2000042c 	.word	0x2000042c

08004dd0 <_lseek_r>:
 8004dd0:	b538      	push	{r3, r4, r5, lr}
 8004dd2:	4d07      	ldr	r5, [pc, #28]	; (8004df0 <_lseek_r+0x20>)
 8004dd4:	4604      	mov	r4, r0
 8004dd6:	4608      	mov	r0, r1
 8004dd8:	4611      	mov	r1, r2
 8004dda:	2200      	movs	r2, #0
 8004ddc:	602a      	str	r2, [r5, #0]
 8004dde:	461a      	mov	r2, r3
 8004de0:	f000 f84a 	bl	8004e78 <_lseek>
 8004de4:	1c43      	adds	r3, r0, #1
 8004de6:	d102      	bne.n	8004dee <_lseek_r+0x1e>
 8004de8:	682b      	ldr	r3, [r5, #0]
 8004dea:	b103      	cbz	r3, 8004dee <_lseek_r+0x1e>
 8004dec:	6023      	str	r3, [r4, #0]
 8004dee:	bd38      	pop	{r3, r4, r5, pc}
 8004df0:	2000042c 	.word	0x2000042c

08004df4 <_malloc_usable_size_r>:
 8004df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004df8:	1f18      	subs	r0, r3, #4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	bfbc      	itt	lt
 8004dfe:	580b      	ldrlt	r3, [r1, r0]
 8004e00:	18c0      	addlt	r0, r0, r3
 8004e02:	4770      	bx	lr

08004e04 <_read_r>:
 8004e04:	b538      	push	{r3, r4, r5, lr}
 8004e06:	4d07      	ldr	r5, [pc, #28]	; (8004e24 <_read_r+0x20>)
 8004e08:	4604      	mov	r4, r0
 8004e0a:	4608      	mov	r0, r1
 8004e0c:	4611      	mov	r1, r2
 8004e0e:	2200      	movs	r2, #0
 8004e10:	602a      	str	r2, [r5, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	f000 f838 	bl	8004e88 <_read>
 8004e18:	1c43      	adds	r3, r0, #1
 8004e1a:	d102      	bne.n	8004e22 <_read_r+0x1e>
 8004e1c:	682b      	ldr	r3, [r5, #0]
 8004e1e:	b103      	cbz	r3, 8004e22 <_read_r+0x1e>
 8004e20:	6023      	str	r3, [r4, #0]
 8004e22:	bd38      	pop	{r3, r4, r5, pc}
 8004e24:	2000042c 	.word	0x2000042c

08004e28 <_close>:
 8004e28:	4b02      	ldr	r3, [pc, #8]	; (8004e34 <_close+0xc>)
 8004e2a:	2258      	movs	r2, #88	; 0x58
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e32:	4770      	bx	lr
 8004e34:	2000042c 	.word	0x2000042c

08004e38 <_fstat>:
 8004e38:	4b02      	ldr	r3, [pc, #8]	; (8004e44 <_fstat+0xc>)
 8004e3a:	2258      	movs	r2, #88	; 0x58
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e42:	4770      	bx	lr
 8004e44:	2000042c 	.word	0x2000042c

08004e48 <_getpid>:
 8004e48:	4b02      	ldr	r3, [pc, #8]	; (8004e54 <_getpid+0xc>)
 8004e4a:	2258      	movs	r2, #88	; 0x58
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e52:	4770      	bx	lr
 8004e54:	2000042c 	.word	0x2000042c

08004e58 <_isatty>:
 8004e58:	4b02      	ldr	r3, [pc, #8]	; (8004e64 <_isatty+0xc>)
 8004e5a:	2258      	movs	r2, #88	; 0x58
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	2000      	movs	r0, #0
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	2000042c 	.word	0x2000042c

08004e68 <_kill>:
 8004e68:	4b02      	ldr	r3, [pc, #8]	; (8004e74 <_kill+0xc>)
 8004e6a:	2258      	movs	r2, #88	; 0x58
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e72:	4770      	bx	lr
 8004e74:	2000042c 	.word	0x2000042c

08004e78 <_lseek>:
 8004e78:	4b02      	ldr	r3, [pc, #8]	; (8004e84 <_lseek+0xc>)
 8004e7a:	2258      	movs	r2, #88	; 0x58
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e82:	4770      	bx	lr
 8004e84:	2000042c 	.word	0x2000042c

08004e88 <_read>:
 8004e88:	4b02      	ldr	r3, [pc, #8]	; (8004e94 <_read+0xc>)
 8004e8a:	2258      	movs	r2, #88	; 0x58
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e92:	4770      	bx	lr
 8004e94:	2000042c 	.word	0x2000042c

08004e98 <_sbrk>:
 8004e98:	4b04      	ldr	r3, [pc, #16]	; (8004eac <_sbrk+0x14>)
 8004e9a:	6819      	ldr	r1, [r3, #0]
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	b909      	cbnz	r1, 8004ea4 <_sbrk+0xc>
 8004ea0:	4903      	ldr	r1, [pc, #12]	; (8004eb0 <_sbrk+0x18>)
 8004ea2:	6019      	str	r1, [r3, #0]
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	4402      	add	r2, r0
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	4770      	bx	lr
 8004eac:	20000398 	.word	0x20000398
 8004eb0:	20000430 	.word	0x20000430

08004eb4 <_write>:
 8004eb4:	4b02      	ldr	r3, [pc, #8]	; (8004ec0 <_write+0xc>)
 8004eb6:	2258      	movs	r2, #88	; 0x58
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	f04f 30ff 	mov.w	r0, #4294967295
 8004ebe:	4770      	bx	lr
 8004ec0:	2000042c 	.word	0x2000042c

08004ec4 <_exit>:
 8004ec4:	e7fe      	b.n	8004ec4 <_exit>
	...

08004ec8 <_init>:
 8004ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eca:	bf00      	nop
 8004ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ece:	bc08      	pop	{r3}
 8004ed0:	469e      	mov	lr, r3
 8004ed2:	4770      	bx	lr

08004ed4 <_fini>:
 8004ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed6:	bf00      	nop
 8004ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eda:	bc08      	pop	{r3}
 8004edc:	469e      	mov	lr, r3
 8004ede:	4770      	bx	lr
